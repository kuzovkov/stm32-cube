
usart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000554  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000684  0800068c  0000168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000684  08000684  0000168c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000684  08000684  0000168c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000684  0800068c  0000168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000684  08000684  00001684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000688  08000688  00001688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  0800068c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800068c  00002064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009a6  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000247  00000000  00000000  0000205b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000022a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000066  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f0a  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009b7  00000000  00000000  000132a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a0d3  00000000  00000000  00013c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006dd32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b8  00000000  00000000  0006dd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0006df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800066c 	.word	0x0800066c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800066c 	.word	0x0800066c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	@ (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	@ (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <SetSysClockTo72>:
uint8_t ReceivedBuffer[20];
uint8_t MainBuffer[50];
uint8_t Index = 0;

void SetSysClockTo72 (void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; //BIT N16 HSEON
 8000200:	4b3c      	ldr	r3, [pc, #240]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a3b      	ldr	r2, [pc, #236]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800020a:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET) {}
 800020c:	bf00      	nop
 800020e:	4b39      	ldr	r3, [pc, #228]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f9      	beq.n	800020e <SetSysClockTo72+0x12>
	FLASH-> ACR &= ~FLASH_ACR_PRFTBE;
 800021a:	4b37      	ldr	r3, [pc, #220]	@ (80002f8 <SetSysClockTo72+0xfc>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a36      	ldr	r2, [pc, #216]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000220:	f023 0310 	bic.w	r3, r3, #16
 8000224:	6013      	str	r3, [r2, #0]
  FLASH-> ACR |= FLASH_ACR_PRFTBE;
 8000226:	4b34      	ldr	r3, [pc, #208]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a33      	ldr	r2, [pc, #204]	@ (80002f8 <SetSysClockTo72+0xfc>)
 800022c:	f043 0310 	orr.w	r3, r3, #16
 8000230:	6013      	str	r3, [r2, #0]
	FLASH-> ACR &= ~FLASH_ACR_LATENCY;
 8000232:	4b31      	ldr	r3, [pc, #196]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a30      	ldr	r2, [pc, #192]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000238:	f023 0307 	bic.w	r3, r3, #7
 800023c:	6013      	str	r3, [r2, #0]
	FLASH-> ACR |= FLASH_ACR_LATENCY_2; //set 010
 800023e:	4b2e      	ldr	r3, [pc, #184]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a2d      	ldr	r2, [pc, #180]	@ (80002f8 <SetSysClockTo72+0xfc>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6013      	str	r3, [r2, #0]
	RCC-> CFGR &= -RCC_CFGR_HPRE;
 800024a:	4b2a      	ldr	r3, [pc, #168]	@ (80002f4 <SetSysClockTo72+0xf8>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	4a29      	ldr	r2, [pc, #164]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000250:	f023 03ef 	bic.w	r3, r3, #239	@ 0xef
 8000254:	6053      	str	r3, [r2, #4]
	RCC-> CFGR |= RCC_CFGR_HPRE_DIV1;
 8000256:	4b27      	ldr	r3, [pc, #156]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000258:	4a26      	ldr	r2, [pc, #152]	@ (80002f4 <SetSysClockTo72+0xf8>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]
	RCC-> CFGR &= -RCC_CFGR_PPRE2;
 800025e:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a24      	ldr	r2, [pc, #144]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000264:	f423 535f 	bic.w	r3, r3, #14272	@ 0x37c0
 8000268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800026c:	6053      	str	r3, [r2, #4]
	RCC-> CFGR |= RCC_CFGR_PPRE2_DIV1;
 800026e:	4b21      	ldr	r3, [pc, #132]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000270:	4a20      	ldr	r2, [pc, #128]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	6053      	str	r3, [r2, #4]
	RCC-> CFGR &= ~RCC_CFGR_PPRE1;
 8000276:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a1e      	ldr	r2, [pc, #120]	@ (80002f4 <SetSysClockTo72+0xf8>)
 800027c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000280:	6053      	str	r3, [r2, #4]
  RCC-> CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000282:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	4a1b      	ldr	r2, [pc, #108]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800028c:	6053      	str	r3, [r2, #4]

  RCC-> CFGR &= (uint32_t) ((uint32_t) ~ (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800028e:	4b19      	ldr	r3, [pc, #100]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4a18      	ldr	r2, [pc, #96]	@ (80002f4 <SetSysClockTo72+0xf8>)
 8000294:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8000298:	6053      	str	r3, [r2, #4]
	RCC-> CFGR |=	(uint32_t) (RCC_CFGR_PLLSRC_HSE |	RCC_CFGR_PLLMULL9);
 800029a:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <SetSysClockTo72+0xf8>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	4a15      	ldr	r2, [pc, #84]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002a0:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80002a4:	6053      	str	r3, [r2, #4]
	RCC-> CR |= RCC_CR_PLLON;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002b0:	6013      	str	r3, [r2, #0]
	while(READ_BIT(RCC->CR, RCC_CR_PLLRDY)!=(RCC_CR_PLLRDY)){}
 80002b2:	bf00      	nop
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80002c0:	d1f8      	bne.n	80002b4 <SetSysClockTo72+0xb8>
	RCC-> CFGR &= ~RCC_CFGR_SW;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002c8:	f023 0303 	bic.w	r3, r3, #3
 80002cc:	6053      	str	r3, [r2, #4]
	RCC-> CFGR |= RCC_CFGR_SW_PLL; //10 - PLL
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4a08      	ldr	r2, [pc, #32]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6053      	str	r3, [r2, #4]

  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){}
 80002da:	bf00      	nop
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <SetSysClockTo72+0xf8>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f003 030c 	and.w	r3, r3, #12
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d1f9      	bne.n	80002dc <SetSysClockTo72+0xe0>

}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40022000 	.word	0x40022000

080002fc <PINB_2_INIT>:
/**
 * инициализация GPIO PB2 (светодиод на плате, плата BluePill+)
 *
 */
void PINB_2_INIT(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //RCC
 8000300:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <PINB_2_INIT+0x48>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a0f      	ldr	r2, [pc, #60]	@ (8000344 <PINB_2_INIT+0x48>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
  GPIOB->CRL &= ~GPIO_CRL_MODE2_0; //0: Выход, максимальная частота 2 MHz;
 800030c:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <PINB_2_INIT+0x4c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <PINB_2_INIT+0x4c>)
 8000312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000316:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= GPIO_CRL_MODE2_1; //1: Выход, максимальная частота 2 MHz;
 8000318:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <PINB_2_INIT+0x4c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <PINB_2_INIT+0x4c>)
 800031e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000322:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~GPIO_CRL_CNF2_0; //00: General purpose output push-pull — выход в режиме Push-pull;
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <PINB_2_INIT+0x4c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a07      	ldr	r2, [pc, #28]	@ (8000348 <PINB_2_INIT+0x4c>)
 800032a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800032e:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~GPIO_CRL_CNF2_1; //00: General purpose output push-pull - выход в режиме Push-pull;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <PINB_2_INIT+0x4c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <PINB_2_INIT+0x4c>)
 8000336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000
 8000348:	40010c00 	.word	0x40010c00

0800034c <UART1_Config>:
  GPIOC->CRH &= ~GPIO_CRH_CNF13_0; //00: General purpose output push-pull — выход в режиме Push-pull;
  GPIOC->CRH &= ~GPIO_CRH_CNF13_1; //00: General purpose output push-pull - выход в режиме Push-pull;
}

void UART1_Config(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  // инициализация всех портов тактирования
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8000350:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <UART1_Config+0x9c>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a24      	ldr	r2, [pc, #144]	@ (80003e8 <UART1_Config+0x9c>)
 8000356:	f043 031d 	orr.w	r3, r3, #29
 800035a:	6193      	str	r3, [r2, #24]
  //USART1 настройка вывода на передачу
  GPIOA->CRH &= ~GPIO_CRH_CNF9; // clear CNF bit 9
 800035c:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <UART1_Config+0xa0>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a22      	ldr	r2, [pc, #136]	@ (80003ec <UART1_Config+0xa0>)
 8000362:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000366:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_CNF9_1; // set CNF bit 9 to 10 Push-Pull
 8000368:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <UART1_Config+0xa0>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <UART1_Config+0xa0>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000372:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_MODE9_0;
 8000374:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <UART1_Config+0xa0>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <UART1_Config+0xa0>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6053      	str	r3, [r2, #4]
  //настройка вывода на прием
  GPIOA->CRH &= ~GPIO_CRH_CNF10;// clear CNF bit 10
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <UART1_Config+0xa0>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <UART1_Config+0xa0>)
 8000386:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800038a:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |= GPIO_CRH_CNF10_0;// set CNF bit 10 to 10 Hiz
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <UART1_Config+0xa0>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <UART1_Config+0xa0>)
 8000392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000396:	6053      	str	r3, [r2, #4]
  GPIOA->CRH &= ~GPIO_CRH_MODE10;
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <UART1_Config+0xa0>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <UART1_Config+0xa0>)
 800039e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80003a2:	6053      	str	r3, [r2, #4]

  //Настройка USART1 регистрами
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; //USART1 clock on
 80003a4:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <UART1_Config+0x9c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	@ (80003e8 <UART1_Config+0x9c>)
 80003aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ae:	6193      	str	r3, [r2, #24]
  USART1->BRR = 0x271; //baudrate 115200 and 72 Mhz RCC
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <UART1_Config+0xa4>)
 80003b2:	f240 2271 	movw	r2, #625	@ 0x271
 80003b6:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE; //USART1 on, TX on, RX on, разрешаем прерывания по приему данных
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <UART1_Config+0xa4>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <UART1_Config+0xa4>)
 80003be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c2:	f043 030c 	orr.w	r3, r3, #12
 80003c6:	60d3      	str	r3, [r2, #12]
  USART1->CR3 |= (1 << 7); //Включение разрешения передачи через DMA
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <UART1_Config+0xa4>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <UART1_Config+0xa4>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d2:	6153      	str	r3, [r2, #20]
  USART1->CR3 |= (1 << 6); //Включение разрешения приема через DMA
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <UART1_Config+0xa4>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <UART1_Config+0xa4>)
 80003da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003de:	6153      	str	r3, [r2, #20]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40013800 	.word	0x40013800

080003f4 <DMA_Init>:

void DMA_Init(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  RCC->AHBENR |= 1 << 0; //включение тактирования DMA1
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <DMA_Init+0x78>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <DMA_Init+0x78>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6153      	str	r3, [r2, #20]
  DMA1_Channel5->CCR |= (1 << 1) | (1 << 2) | (1 << 3);  //включение прерываний DMA, TCIE, HTIE, TEIE биты для разрешения прерывания
 8000404:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <DMA_Init+0x7c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a19      	ldr	r2, [pc, #100]	@ (8000470 <DMA_Init+0x7c>)
 800040a:	f043 030e 	orr.w	r3, r3, #14
 800040e:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR &= ~(1 << 4); //установка направления передачи данных, читаем биты из периферии
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <DMA_Init+0x7c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a16      	ldr	r2, [pc, #88]	@ (8000470 <DMA_Init+0x7c>)
 8000416:	f023 0310 	bic.w	r3, r3, #16
 800041a:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR |= (1 << 5); //включение циклическогого режима(CIRC),
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <DMA_Init+0x7c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <DMA_Init+0x7c>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR |= (1 << 7); //увеличение объема памяти(MIRC),
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <DMA_Init+0x7c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a10      	ldr	r2, [pc, #64]	@ (8000470 <DMA_Init+0x7c>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000432:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR |= (1 << 7); //увеличение объема памяти(MIRC),
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <DMA_Init+0x7c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <DMA_Init+0x7c>)
 800043a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043e:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR &= ~(3 << 3); //размер данных  периферии (PSIZE), 00 : 8bit data
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <DMA_Init+0x7c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0a      	ldr	r2, [pc, #40]	@ (8000470 <DMA_Init+0x7c>)
 8000446:	f023 0318 	bic.w	r3, r3, #24
 800044a:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR &= ~(3 << 10); //размер данных в памяти (MSIZE), 00 : 8bit data
 800044c:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <DMA_Init+0x7c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <DMA_Init+0x7c>)
 8000452:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000456:	6013      	str	r3, [r2, #0]
  DMA1_Channel5->CCR &= ~(3 << 12); //уровень приоритета PL=0 низкий
 8000458:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <DMA_Init+0x7c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <DMA_Init+0x7c>)
 800045e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40020058 	.word	0x40020058

08000474 <DMA_Config>:
 * @param source адрес источника
 * @param destination адрес назначения
 * @param datasize размер данных
 */
void DMA_Config(uint32_t source, uint32_t destination, uint16_t datasize)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	4613      	mov	r3, r2
 8000480:	80fb      	strh	r3, [r7, #6]
  DMA1_Channel5->CNDTR = datasize; //устанавливаем размер данных
 8000482:	4a0a      	ldr	r2, [pc, #40]	@ (80004ac <DMA_Config+0x38>)
 8000484:	88fb      	ldrh	r3, [r7, #6]
 8000486:	6053      	str	r3, [r2, #4]
  DMA1_Channel5->CPAR = source; //устанавливаем периферийный адрес в регистре PAR
 8000488:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <DMA_Config+0x38>)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	6093      	str	r3, [r2, #8]
  DMA1_Channel5->CMAR = destination; //устанавливаем адрес памяти в регистре MAR
 800048e:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <DMA_Config+0x38>)
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	60d3      	str	r3, [r2, #12]
  DMA1_Channel5->CCR |= 1 << 0; //включить DMA1
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <DMA_Config+0x38>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <DMA_Config+0x38>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]

}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40020058 	.word	0x40020058

080004b0 <DMA1_Channel5_IRQHandler>:
startup_stm32f10x_md. s, в котором прописаны все возможные
обработчики прерываний, которые могут быть в данном МК.
 *
 */
void DMA1_Channel5_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  // Если установлено прерывание на половину передачи, то
  if ((DMA1-> ISR) & (1 << 18))
 80004b4:	4b29      	ldr	r3, [pc, #164]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d022      	beq.n	8000506 <DMA1_Channel5_IRQHandler+0x56>
  {
    memcpy (&MainBuffer [Index], &ReceivedBuffer [0], RXSIZE/2);
 80004c0:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b27      	ldr	r3, [pc, #156]	@ (8000564 <DMA1_Channel5_IRQHandler+0xb4>)
 80004c8:	4413      	add	r3, r2
 80004ca:	220a      	movs	r2, #10
 80004cc:	4926      	ldr	r1, [pc, #152]	@ (8000568 <DMA1_Channel5_IRQHandler+0xb8>)
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f8be 	bl	8000650 <memcpy>
    DMA1-> IFCR |= (1 << 18); //Очистка бита прерывания
 80004d4:	4b21      	ldr	r3, [pc, #132]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a20      	ldr	r2, [pc, #128]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 80004da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004de:	6053      	str	r3, [r2, #4]
    Index = Index+ (RXSIZE/2);
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	330a      	adds	r3, #10
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 80004ea:	701a      	strb	r2, [r3, #0]
    if (Index> 49)
 80004ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b31      	cmp	r3, #49	@ 0x31
 80004f2:	d902      	bls.n	80004fa <DMA1_Channel5_IRQHandler+0x4a>
    {
      Index = 0;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
    }
    LED_PB2_ON ();
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <DMA1_Channel5_IRQHandler+0xbc>)
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	4a1b      	ldr	r2, [pc, #108]	@ (800056c <DMA1_Channel5_IRQHandler+0xbc>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6113      	str	r3, [r2, #16]
  }
  // Если установлено прерывание завершения полной пере­дачи, то
  if ((DMA1-> ISR) & (1 << 17))
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050e:	2b00      	cmp	r3, #0
 8000510:	d022      	beq.n	8000558 <DMA1_Channel5_IRQHandler+0xa8>
  {
    memcpy (&MainBuffer [Index],&ReceivedBuffer[RXSIZE/2], RXSIZE/2);
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <DMA1_Channel5_IRQHandler+0xb4>)
 800051a:	4413      	add	r3, r2
 800051c:	220a      	movs	r2, #10
 800051e:	4914      	ldr	r1, [pc, #80]	@ (8000570 <DMA1_Channel5_IRQHandler+0xc0>)
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f895 	bl	8000650 <memcpy>
    DMA1-> IFCR |= (1 <<17); //Очистка бита прерывания
 8000526:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <DMA1_Channel5_IRQHandler+0xac>)
 800052c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000530:	6053      	str	r3, [r2, #4]
    Index = Index+ (RXSIZE/2);
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	330a      	adds	r3, #10
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 800053c:	701a      	strb	r2, [r3, #0]
    if (Index> 49)
 800053e:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b31      	cmp	r3, #49	@ 0x31
 8000544:	d902      	bls.n	800054c <DMA1_Channel5_IRQHandler+0x9c>
    {
      Index=0;
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <DMA1_Channel5_IRQHandler+0xb0>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
    }
    LED_PB2_OFF ();
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <DMA1_Channel5_IRQHandler+0xbc>)
 800054e:	691b      	ldr	r3, [r3, #16]
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <DMA1_Channel5_IRQHandler+0xbc>)
 8000552:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000556:	6113      	str	r3, [r2, #16]
  }
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40020000 	.word	0x40020000
 8000560:	20000062 	.word	0x20000062
 8000564:	20000030 	.word	0x20000030
 8000568:	2000001c 	.word	0x2000001c
 800056c:	40010c00 	.word	0x40010c00
 8000570:	20000026 	.word	0x20000026

08000574 <main>:
 * Работа с USART в режиме прерываний
 *
 * @return int
 */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  uint8_t x = 5;
 800057a:	2305      	movs	r3, #5
 800057c:	71fb      	strb	r3, [r7, #7]
  SetSysClockTo72();
 800057e:	f7ff fe3d 	bl	80001fc <SetSysClockTo72>
  UART1_Config();
 8000582:	f7ff fee3 	bl	800034c <UART1_Config>
  DMA_Init();
 8000586:	f7ff ff35 	bl	80003f4 <DMA_Init>
  NVIC_SetPriority(DMA1_Channel5_IRQn, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	200f      	movs	r0, #15
 800058e:	f7ff fe0b 	bl	80001a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000592:	200f      	movs	r0, #15
 8000594:	f7ff fdec 	bl	8000170 <__NVIC_EnableIRQ>
  DMA_Config((uint32_t) &USART1->DR, (uint32_t) ReceivedBuffer, RXSIZE);
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <main+0x38>)
 800059a:	2214      	movs	r2, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <main+0x3c>)
 80005a0:	f7ff ff68 	bl	8000474 <DMA_Config>
  PINB_2_INIT();
 80005a4:	f7ff feaa 	bl	80002fc <PINB_2_INIT>

  while(1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x34>
 80005ac:	2000001c 	.word	0x2000001c
 80005b0:	40013804 	.word	0x40013804

080005b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b4:	480d      	ldr	r0, [pc, #52]	@ (80005ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	@ (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005e2:	f000 f811 	bl	8000608 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005e6:	f7ff ffc5 	bl	8000574 <main>

080005ea <LoopForever>:

LoopForever:
  b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   r0, =_estack
 80005ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f8:	0800068c 	.word	0x0800068c
  ldr r2, =_sbss
 80005fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000600:	20000064 	.word	0x20000064

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <__libc_init_array>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	2600      	movs	r6, #0
 800060c:	4d0c      	ldr	r5, [pc, #48]	@ (8000640 <__libc_init_array+0x38>)
 800060e:	4c0d      	ldr	r4, [pc, #52]	@ (8000644 <__libc_init_array+0x3c>)
 8000610:	1b64      	subs	r4, r4, r5
 8000612:	10a4      	asrs	r4, r4, #2
 8000614:	42a6      	cmp	r6, r4
 8000616:	d109      	bne.n	800062c <__libc_init_array+0x24>
 8000618:	f000 f828 	bl	800066c <_init>
 800061c:	2600      	movs	r6, #0
 800061e:	4d0a      	ldr	r5, [pc, #40]	@ (8000648 <__libc_init_array+0x40>)
 8000620:	4c0a      	ldr	r4, [pc, #40]	@ (800064c <__libc_init_array+0x44>)
 8000622:	1b64      	subs	r4, r4, r5
 8000624:	10a4      	asrs	r4, r4, #2
 8000626:	42a6      	cmp	r6, r4
 8000628:	d105      	bne.n	8000636 <__libc_init_array+0x2e>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000630:	4798      	blx	r3
 8000632:	3601      	adds	r6, #1
 8000634:	e7ee      	b.n	8000614 <__libc_init_array+0xc>
 8000636:	f855 3b04 	ldr.w	r3, [r5], #4
 800063a:	4798      	blx	r3
 800063c:	3601      	adds	r6, #1
 800063e:	e7f2      	b.n	8000626 <__libc_init_array+0x1e>
 8000640:	08000684 	.word	0x08000684
 8000644:	08000684 	.word	0x08000684
 8000648:	08000684 	.word	0x08000684
 800064c:	08000688 	.word	0x08000688

08000650 <memcpy>:
 8000650:	440a      	add	r2, r1
 8000652:	4291      	cmp	r1, r2
 8000654:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000658:	d100      	bne.n	800065c <memcpy+0xc>
 800065a:	4770      	bx	lr
 800065c:	b510      	push	{r4, lr}
 800065e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000662:	4291      	cmp	r1, r2
 8000664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000668:	d1f9      	bne.n	800065e <memcpy+0xe>
 800066a:	bd10      	pop	{r4, pc}

0800066c <_init>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr

08000678 <_fini>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr
