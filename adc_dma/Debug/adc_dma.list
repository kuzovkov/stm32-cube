
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008248  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d4  08008358  08008358  00009358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b2c  08009b2c  0000b1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b2c  08009b2c  0000ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b34  08009b34  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009b3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  200001e0  08009d1c  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000e58  08009d1c  0000be58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a7b  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002878  00000000  00000000  0001bc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019bd3  00000000  00000000  0001f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011ee8  00000000  00000000  000391ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000936b1  00000000  00000000  0004b093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000de744  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000d16  00000000  00000000  000de787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005880  00000000  00000000  000df4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e4d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008340 	.word	0x08008340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008340 	.word	0x08008340

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	read_adc_value_and_send();
 8000fec:	f000 f82c 	bl	8001048 <read_adc_value_and_send>
	HAL_ADC_Stop_DMA(hadc);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f001 fb27 	bl	8002644 <HAL_ADC_Stop_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <run_adc>:

void run_adc(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	static uint16_t count = 0;
	count++;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <run_adc+0x38>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <run_adc+0x38>)
 800100e:	801a      	strh	r2, [r3, #0]
	if ((count % 5) == 0){
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <run_adc+0x38>)
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <run_adc+0x3c>)
 8001016:	fba3 1302 	umull	r1, r3, r3, r2
 800101a:	0899      	lsrs	r1, r3, #2
 800101c:	460b      	mov	r3, r1
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b29b      	uxth	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <run_adc+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 3);
 800102a:	2203      	movs	r2, #3
 800102c:	4904      	ldr	r1, [pc, #16]	@ (8001040 <run_adc+0x40>)
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <run_adc+0x44>)
 8001030:	f001 fa2a 	bl	8002488 <HAL_ADC_Start_DMA>
	}
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200003a2 	.word	0x200003a2
 800103c:	cccccccd 	.word	0xcccccccd
 8001040:	2000039c 	.word	0x2000039c
 8001044:	200001fc 	.word	0x200001fc

08001048 <read_adc_value_and_send>:

void read_adc_value_and_send(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0c8      	sub	sp, #288	@ 0x120
 800104c:	af04      	add	r7, sp, #16
	char msg_uart[128];
	char msg_display[128];
	float temp;
	float mV;

	for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001054:	e105      	b.n	8001262 <read_adc_value_and_send+0x21a>
		mV = ((float)rawValues[i]) / 4095 * 3300;
 8001056:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800105a:	4a8b      	ldr	r2, [pc, #556]	@ (8001288 <read_adc_value_and_send+0x240>)
 800105c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe17 	bl	8000c94 <__aeabi_ui2f>
 8001066:	4603      	mov	r3, r0
 8001068:	4988      	ldr	r1, [pc, #544]	@ (800128c <read_adc_value_and_send+0x244>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff1e 	bl	8000eac <__aeabi_fdiv>
 8001070:	4603      	mov	r3, r0
 8001072:	4987      	ldr	r1, [pc, #540]	@ (8001290 <read_adc_value_and_send+0x248>)
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe65 	bl	8000d44 <__aeabi_fmul>
 800107a:	4603      	mov	r3, r0
 800107c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
		//Temperature (in °C) = {(V 25 - V SENSE ) / Avg_Slope} + 25.
		//Avg_Slope(1) Average slope 4.0 4.3 4.6 mV/°C
		//V25(1) Voltage at 25 °C 1.34 1.43 1.52 V
		//https://www.st.com/resource/en/datasheet/stm32f103c8.pdf

		temp = ((1460 - mV) / 4.3) + 25;
 8001080:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001084:	4883      	ldr	r0, [pc, #524]	@ (8001294 <read_adc_value_and_send+0x24c>)
 8001086:	f7ff fd53 	bl	8000b30 <__aeabi_fsub>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9cb 	bl	8000428 <__aeabi_f2d>
 8001092:	a37b      	add	r3, pc, #492	@ (adr r3, 8001280 <read_adc_value_and_send+0x238>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fb48 	bl	800072c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001298 <read_adc_value_and_send+0x250>)
 80010aa:	f7ff f85f 	bl	800016c <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fce7 	bl	8000a88 <__aeabi_d2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

		sprintf(msg_uart, "rawValue: %hu\r\n", rawValues[i]);
 80010c0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010c4:	4a70      	ldr	r2, [pc, #448]	@ (8001288 <read_adc_value_and_send+0x240>)
 80010c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ca:	461a      	mov	r2, r3
 80010cc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010d0:	4972      	ldr	r1, [pc, #456]	@ (800129c <read_adc_value_and_send+0x254>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fff6 	bl	80060c4 <siprintf>
		sprintf(msg_display, "%d", rawValues[i]);
 80010d8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001288 <read_adc_value_and_send+0x240>)
 80010de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e2:	461a      	mov	r2, r3
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	496e      	ldr	r1, [pc, #440]	@ (80012a0 <read_adc_value_and_send+0x258>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 ffeb 	bl	80060c4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 80010ee:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f82c 	bl	8000150 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001104:	4867      	ldr	r0, [pc, #412]	@ (80012a4 <read_adc_value_and_send+0x25c>)
 8001106:	f004 f8ec 	bl	80052e2 <HAL_UART_Transmit>
		ST7789_WriteString(20, 10 + i*70, msg_display, Font_16x26, GBLUE, BLACK);
 800110a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800110e:	b29b      	uxth	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	330a      	adds	r3, #10
 8001122:	b299      	uxth	r1, r3
 8001124:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <read_adc_value_and_send+0x260>)
 8001126:	1d38      	adds	r0, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001130:	9201      	str	r2, [sp, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4602      	mov	r2, r0
 800113a:	2014      	movs	r0, #20
 800113c:	f000 fd3d 	bl	8001bba <ST7789_WriteString>
		sprintf(msg_uart, "mV: %f\r\n", mV);
 8001140:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001144:	f7ff f970 	bl	8000428 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8001150:	4956      	ldr	r1, [pc, #344]	@ (80012ac <read_adc_value_and_send+0x264>)
 8001152:	f004 ffb7 	bl	80060c4 <siprintf>
		sprintf(msg_display, "U: %.4f V", mV/1000.0);
 8001156:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800115a:	f7ff f965 	bl	8000428 <__aeabi_f2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <read_adc_value_and_send+0x268>)
 8001164:	f7ff fae2 	bl	800072c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	1d38      	adds	r0, r7, #4
 800116e:	4951      	ldr	r1, [pc, #324]	@ (80012b4 <read_adc_value_and_send+0x26c>)
 8001170:	f004 ffa8 	bl	80060c4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 8001174:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001178:	4618      	mov	r0, r3
 800117a:	f7fe ffe9 	bl	8000150 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800118a:	4846      	ldr	r0, [pc, #280]	@ (80012a4 <read_adc_value_and_send+0x25c>)
 800118c:	f004 f8a9 	bl	80052e2 <HAL_UART_Transmit>
		ST7789_WriteString(20, 40 + i*70, msg_display, Font_16x26, RED, BLACK);
 8001190:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4413      	add	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	00d2      	lsls	r2, r2, #3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3328      	adds	r3, #40	@ 0x28
 80011a8:	b299      	uxth	r1, r3
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <read_adc_value_and_send+0x260>)
 80011ac:	1d38      	adds	r0, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4602      	mov	r2, r0
 80011c0:	2014      	movs	r0, #20
 80011c2:	f000 fcfa 	bl	8001bba <ST7789_WriteString>
		if (i == 0){
 80011c6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d13d      	bne.n	800124a <read_adc_value_and_send+0x202>
			sprintf(msg_uart, "Temperature: %.2f\r\n", temp);
 80011ce:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80011d2:	f7ff f929 	bl	8000428 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80011de:	4936      	ldr	r1, [pc, #216]	@ (80012b8 <read_adc_value_and_send+0x270>)
 80011e0:	f004 ff70 	bl	80060c4 <siprintf>
			sprintf(msg_display, "t: %.2f C", temp);
 80011e4:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	1d38      	adds	r0, r7, #4
 80011f2:	4932      	ldr	r1, [pc, #200]	@ (80012bc <read_adc_value_and_send+0x274>)
 80011f4:	f004 ff66 	bl	80060c4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 80011f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7fe ffa7 	bl	8000150 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120e:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <read_adc_value_and_send+0x25c>)
 8001210:	f004 f867 	bl	80052e2 <HAL_UART_Transmit>
			ST7789_WriteString(20, 60 + i*70, msg_display, Font_16x26, YELLOW, BLACK);
 8001214:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	00d2      	lsls	r2, r2, #3
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	333c      	adds	r3, #60	@ 0x3c
 800122c:	b299      	uxth	r1, r3
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <read_adc_value_and_send+0x260>)
 8001230:	1d38      	adds	r0, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4602      	mov	r2, r0
 8001244:	2014      	movs	r0, #20
 8001246:	f000 fcb8 	bl	8001bba <ST7789_WriteString>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*) "--", strlen("--"), HAL_MAX_DELAY);
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124e:	2202      	movs	r2, #2
 8001250:	491b      	ldr	r1, [pc, #108]	@ (80012c0 <read_adc_value_and_send+0x278>)
 8001252:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <read_adc_value_and_send+0x25c>)
 8001254:	f004 f845 	bl	80052e2 <HAL_UART_Transmit>
	for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8001258:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800125c:	3301      	adds	r3, #1
 800125e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001262:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <read_adc_value_and_send+0x27c>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	429a      	cmp	r2, r3
 800126c:	f4ff aef3 	bcc.w	8001056 <read_adc_value_and_send+0xe>

	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	33333333 	.word	0x33333333
 8001284:	40113333 	.word	0x40113333
 8001288:	2000039c 	.word	0x2000039c
 800128c:	457ff000 	.word	0x457ff000
 8001290:	454e4000 	.word	0x454e4000
 8001294:	44b68000 	.word	0x44b68000
 8001298:	40390000 	.word	0x40390000
 800129c:	08008358 	.word	0x08008358
 80012a0:	08008368 	.word	0x08008368
 80012a4:	20000354 	.word	0x20000354
 80012a8:	20000000 	.word	0x20000000
 80012ac:	0800836c 	.word	0x0800836c
 80012b0:	408f4000 	.word	0x408f4000
 80012b4:	08008378 	.word	0x08008378
 80012b8:	08008384 	.word	0x08008384
 80012bc:	08008398 	.word	0x08008398
 80012c0:	080083a4 	.word	0x080083a4
 80012c4:	200001fc 	.word	0x200001fc

080012c8 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 3);
 80012d0:	2203      	movs	r2, #3
 80012d2:	4904      	ldr	r1, [pc, #16]	@ (80012e4 <HAL_ADC_ErrorCallback+0x1c>)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <HAL_ADC_ErrorCallback+0x20>)
 80012d6:	f001 f8d7 	bl	8002488 <HAL_ADC_Start_DMA>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000039c 	.word	0x2000039c
 80012e8:	200001fc 	.word	0x200001fc

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 ff6c 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f820 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f000 f9de 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012fc:	f000 f9b6 	bl	800166c <MX_DMA_Init>
  MX_SPI1_Init();
 8001300:	f000 f8d2 	bl	80014a8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001304:	f000 f874 	bl	80013f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001308:	f000 f904 	bl	8001514 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800130c:	f000 f984 	bl	8001618 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 8001310:	f000 fb12 	bl	8001938 <ST7789_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2108      	movs	r1, #8
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <main+0x44>)
 800131a:	f002 f917 	bl	800354c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_TIM_Base_Start_IT(&htim1);
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <main+0x48>)
 8001320:	f003 fabc 	bl	800489c <HAL_TIM_Base_Start_IT>
	ST7789_Fill_Color(BLACK);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fbad 	bl	8001a84 <ST7789_Fill_Color>

	while (1)
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <main+0x3e>
 800132e:	bf00      	nop
 8001330:	40010800 	.word	0x40010800
 8001334:	2000030c 	.word	0x2000030c

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	2228      	movs	r2, #40	@ 0x28
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 ff21 	bl	800618e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001376:	2301      	movs	r3, #1
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001382:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001384:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138e:	4618      	mov	r0, r3
 8001390:	f002 f8f4 	bl	800357c <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800139a:	f000 f9cb 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fb60 	bl	8003a80 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013c6:	f000 f9b5 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ca:	2302      	movs	r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fce0 	bl	8003d9c <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013e2:	f000 f9a7 	bl	8001734 <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	@ 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001402:	4a28      	ldr	r2, [pc, #160]	@ (80014a4 <MX_ADC1_Init+0xb4>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001410:	2201      	movs	r2, #1
 8001412:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001416:	2200      	movs	r2, #0
 8001418:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 800141c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 800142a:	2203      	movs	r2, #3
 800142c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142e:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001430:	f000 ff52 	bl	80022d8 <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800143a:	f000 f97b 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800143e:	2310      	movs	r3, #16
 8001440:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001442:	2301      	movs	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001446:	2307      	movs	r3, #7
 8001448:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4814      	ldr	r0, [pc, #80]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001450:	f001 f94e 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 f96b 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800145e:	2311      	movs	r3, #17
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001462:	2302      	movs	r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 800146c:	f001 f940 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001476:	f000 f95d 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800147a:	2304      	movs	r3, #4
 800147c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800147e:	2303      	movs	r3, #3
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <MX_ADC1_Init+0xb0>)
 8001488:	f001 f932 	bl	80026f0 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001492:	f000 f94f 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001fc 	.word	0x200001fc
 80014a4:	40012400 	.word	0x40012400

080014a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_SPI1_Init+0x64>)
 80014ae:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <MX_SPI1_Init+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_SPI1_Init+0x64>)
 80014b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_SPI1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <MX_SPI1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_SPI1_Init+0x64>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <MX_SPI1_Init+0x64>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_SPI1_Init+0x64>)
 80014d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_SPI1_Init+0x64>)
 80014dc:	2210      	movs	r2, #16
 80014de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <MX_SPI1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_SPI1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <MX_SPI1_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_SPI1_Init+0x64>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <MX_SPI1_Init+0x64>)
 80014fa:	f002 fd05 	bl	8003f08 <HAL_SPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001504:	f000 f916 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000270 	.word	0x20000270
 8001510:	40013000 	.word	0x40013000

08001514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b092      	sub	sp, #72	@ 0x48
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2220      	movs	r2, #32
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fe25 	bl	800618e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001544:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001546:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <MX_TIM1_Init+0x100>)
 8001548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <MX_TIM1_Init+0xfc>)
 800154c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001550:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <MX_TIM1_Init+0xfc>)
 800155a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <MX_TIM1_Init+0xfc>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001572:	4827      	ldr	r0, [pc, #156]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001574:	f003 f9e4 	bl	8004940 <HAL_TIM_OC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f8d9 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800158e:	4619      	mov	r1, r3
 8001590:	481f      	ldr	r0, [pc, #124]	@ (8001610 <MX_TIM1_Init+0xfc>)
 8001592:	f003 fd95 	bl	80050c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 f8ca 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4812      	ldr	r0, [pc, #72]	@ (8001610 <MX_TIM1_Init+0xfc>)
 80015c6:	f003 fafb 	bl	8004bc0 <HAL_TIM_OC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015d0:	f000 f8b0 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM1_Init+0xfc>)
 80015f8:	f003 fdc0 	bl	800517c <HAL_TIMEx_ConfigBreakDeadTime>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001602:	f000 f897 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3748      	adds	r7, #72	@ 0x48
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000030c 	.word	0x2000030c
 8001614:	40012c00 	.word	0x40012c00

08001618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_USART1_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_USART1_UART_Init+0x4c>)
 8001650:	f003 fdf7 	bl	8005242 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f86b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000354 	.word	0x20000354
 8001668:	40013800 	.word	0x40013800

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_DMA_Init+0x48>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <MX_DMA_Init+0x48>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6153      	str	r3, [r2, #20]
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_DMA_Init+0x48>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	200b      	movs	r0, #11
 8001690:	f001 faff 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001694:	200b      	movs	r0, #11
 8001696:	f001 fb18 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	200d      	movs	r0, #13
 80016a0:	f001 faf7 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016a4:	200d      	movs	r0, #13
 80016a6:	f001 fb10 	bl	8002cca <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <MX_GPIO_Init+0x74>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a16      	ldr	r2, [pc, #88]	@ (800172c <MX_GPIO_Init+0x74>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_GPIO_Init+0x74>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_GPIO_Init+0x74>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a10      	ldr	r2, [pc, #64]	@ (800172c <MX_GPIO_Init+0x74>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_GPIO_Init+0x74>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	210e      	movs	r1, #14
 8001700:	480b      	ldr	r0, [pc, #44]	@ (8001730 <MX_GPIO_Init+0x78>)
 8001702:	f001 ff23 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001706:	230e      	movs	r3, #14
 8001708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2302      	movs	r3, #2
 8001714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <MX_GPIO_Init+0x78>)
 800171e:	f001 fd91 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800174a:	bf00      	nop
	ST7789_DC_Clr();
 800174c:	2200      	movs	r2, #0
 800174e:	2104      	movs	r1, #4
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <ST7789_WriteCommand+0x30>)
 8001752:	f001 fefb 	bl	800354c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001756:	1df9      	adds	r1, r7, #7
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175c:	2201      	movs	r2, #1
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <ST7789_WriteCommand+0x34>)
 8001760:	f002 fc56 	bl	8004010 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001764:	bf00      	nop
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40010800 	.word	0x40010800
 8001774:	20000270 	.word	0x20000270

08001778 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001782:	bf00      	nop
	ST7789_DC_Set();
 8001784:	2201      	movs	r2, #1
 8001786:	2104      	movs	r1, #4
 8001788:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <ST7789_WriteData+0x80>)
 800178a:	f001 fedf 	bl	800354c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800178e:	e02a      	b.n	80017e6 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001796:	4293      	cmp	r3, r2
 8001798:	bf28      	it	cs
 800179a:	4613      	movcs	r3, r2
 800179c:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <ST7789_WriteData+0x84>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d30e      	bcc.n	80017c8 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	461a      	mov	r2, r3
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <ST7789_WriteData+0x88>)
 80017b2:	f002 fd71 	bl	8004298 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80017b6:	bf00      	nop
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <ST7789_WriteData+0x88>)
 80017ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d1f8      	bne.n	80017b8 <ST7789_WriteData+0x40>
 80017c6:	e006      	b.n	80017d6 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80017c8:	89fa      	ldrh	r2, [r7, #14]
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <ST7789_WriteData+0x88>)
 80017d2:	f002 fc1d 	bl	8004010 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1d1      	bne.n	8001790 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 80017ec:	bf00      	nop
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010800 	.word	0x40010800
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000270 	.word	0x20000270

08001804 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800180e:	bf00      	nop
	ST7789_DC_Set();
 8001810:	2201      	movs	r2, #1
 8001812:	2104      	movs	r1, #4
 8001814:	4807      	ldr	r0, [pc, #28]	@ (8001834 <ST7789_WriteSmallData+0x30>)
 8001816:	f001 fe99 	bl	800354c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800181a:	1df9      	adds	r1, r7, #7
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001820:	2201      	movs	r2, #1
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <ST7789_WriteSmallData+0x34>)
 8001824:	f002 fbf4 	bl	8004010 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001828:	bf00      	nop
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40010800 	.word	0x40010800
 8001838:	20000270 	.word	0x20000270

0800183c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001846:	2036      	movs	r0, #54	@ 0x36
 8001848:	f7ff ff7a 	bl	8001740 <ST7789_WriteCommand>
	switch (m) {
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d81a      	bhi.n	8001888 <ST7789_SetRotation+0x4c>
 8001852:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <ST7789_SetRotation+0x1c>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	08001869 	.word	0x08001869
 800185c:	08001871 	.word	0x08001871
 8001860:	08001879 	.word	0x08001879
 8001864:	08001881 	.word	0x08001881
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001868:	20c0      	movs	r0, #192	@ 0xc0
 800186a:	f7ff ffcb 	bl	8001804 <ST7789_WriteSmallData>
		break;
 800186e:	e00c      	b.n	800188a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001870:	20a0      	movs	r0, #160	@ 0xa0
 8001872:	f7ff ffc7 	bl	8001804 <ST7789_WriteSmallData>
		break;
 8001876:	e008      	b.n	800188a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff ffc3 	bl	8001804 <ST7789_WriteSmallData>
		break;
 800187e:	e004      	b.n	800188a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001880:	2060      	movs	r0, #96	@ 0x60
 8001882:	f7ff ffbf 	bl	8001804 <ST7789_WriteSmallData>
		break;
 8001886:	e000      	b.n	800188a <ST7789_SetRotation+0x4e>
	default:
		break;
 8001888:	bf00      	nop
	}
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop

08001894 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	4604      	mov	r4, r0
 800189c:	4608      	mov	r0, r1
 800189e:	4611      	mov	r1, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	80fb      	strh	r3, [r7, #6]
 80018a6:	4603      	mov	r3, r0
 80018a8:	80bb      	strh	r3, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	807b      	strh	r3, [r7, #2]
 80018ae:	4613      	mov	r3, r2
 80018b0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80018b2:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	82fb      	strh	r3, [r7, #22]
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	827b      	strh	r3, [r7, #18]
 80018c0:	883b      	ldrh	r3, [r7, #0]
 80018c2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80018c4:	202a      	movs	r0, #42	@ 0x2a
 80018c6:	f7ff ff3b 	bl	8001740 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80018ca:	8afb      	ldrh	r3, [r7, #22]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	733b      	strb	r3, [r7, #12]
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	737b      	strb	r3, [r7, #13]
 80018da:	8abb      	ldrh	r3, [r7, #20]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	73bb      	strb	r3, [r7, #14]
 80018e4:	8abb      	ldrh	r3, [r7, #20]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2104      	movs	r1, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff41 	bl	8001778 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80018f6:	202b      	movs	r0, #43	@ 0x2b
 80018f8:	f7ff ff22 	bl	8001740 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80018fc:	8a7b      	ldrh	r3, [r7, #18]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	723b      	strb	r3, [r7, #8]
 8001906:	8a7b      	ldrh	r3, [r7, #18]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	727b      	strb	r3, [r7, #9]
 800190c:	8a3b      	ldrh	r3, [r7, #16]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	b29b      	uxth	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	72bb      	strb	r3, [r7, #10]
 8001916:	8a3b      	ldrh	r3, [r7, #16]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	2104      	movs	r1, #4
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff28 	bl	8001778 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001928:	202c      	movs	r0, #44	@ 0x2c
 800192a:	f7ff ff09 	bl	8001740 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800192e:	bf00      	nop
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08b      	sub	sp, #44	@ 0x2c
 800193c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800193e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001942:	2100      	movs	r1, #0
 8001944:	484a      	ldr	r0, [pc, #296]	@ (8001a70 <ST7789_Init+0x138>)
 8001946:	f004 fc22 	bl	800618e <memset>
	#endif
	HAL_Delay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f000 fca0 	bl	8002290 <HAL_Delay>
    ST7789_RST_Clr();
 8001950:	2200      	movs	r2, #0
 8001952:	2102      	movs	r1, #2
 8001954:	4847      	ldr	r0, [pc, #284]	@ (8001a74 <ST7789_Init+0x13c>)
 8001956:	f001 fdf9 	bl	800354c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800195a:	200a      	movs	r0, #10
 800195c:	f000 fc98 	bl	8002290 <HAL_Delay>
    ST7789_RST_Set();
 8001960:	2201      	movs	r2, #1
 8001962:	2102      	movs	r1, #2
 8001964:	4843      	ldr	r0, [pc, #268]	@ (8001a74 <ST7789_Init+0x13c>)
 8001966:	f001 fdf1 	bl	800354c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800196a:	2014      	movs	r0, #20
 800196c:	f000 fc90 	bl	8002290 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001970:	203a      	movs	r0, #58	@ 0x3a
 8001972:	f7ff fee5 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001976:	2055      	movs	r0, #85	@ 0x55
 8001978:	f7ff ff44 	bl	8001804 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800197c:	20b2      	movs	r0, #178	@ 0xb2
 800197e:	f7ff fedf 	bl	8001740 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001982:	4a3d      	ldr	r2, [pc, #244]	@ (8001a78 <ST7789_Init+0x140>)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800198c:	6018      	str	r0, [r3, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2105      	movs	r1, #5
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff feed 	bl	8001778 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff ff4c 	bl	800183c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80019a4:	20b7      	movs	r0, #183	@ 0xb7
 80019a6:	f7ff fecb 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80019aa:	2035      	movs	r0, #53	@ 0x35
 80019ac:	f7ff ff2a 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80019b0:	20bb      	movs	r0, #187	@ 0xbb
 80019b2:	f7ff fec5 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80019b6:	2019      	movs	r0, #25
 80019b8:	f7ff ff24 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80019bc:	20c0      	movs	r0, #192	@ 0xc0
 80019be:	f7ff febf 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80019c2:	202c      	movs	r0, #44	@ 0x2c
 80019c4:	f7ff ff1e 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80019c8:	20c2      	movs	r0, #194	@ 0xc2
 80019ca:	f7ff feb9 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff ff18 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80019d4:	20c3      	movs	r0, #195	@ 0xc3
 80019d6:	f7ff feb3 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80019da:	2012      	movs	r0, #18
 80019dc:	f7ff ff12 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80019e0:	20c4      	movs	r0, #196	@ 0xc4
 80019e2:	f7ff fead 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80019e6:	2020      	movs	r0, #32
 80019e8:	f7ff ff0c 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80019ec:	20c6      	movs	r0, #198	@ 0xc6
 80019ee:	f7ff fea7 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80019f2:	200f      	movs	r0, #15
 80019f4:	f7ff ff06 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80019f8:	20d0      	movs	r0, #208	@ 0xd0
 80019fa:	f7ff fea1 	bl	8001740 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80019fe:	20a4      	movs	r0, #164	@ 0xa4
 8001a00:	f7ff ff00 	bl	8001804 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001a04:	20a1      	movs	r0, #161	@ 0xa1
 8001a06:	f7ff fefd 	bl	8001804 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001a0a:	20e0      	movs	r0, #224	@ 0xe0
 8001a0c:	f7ff fe98 	bl	8001740 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <ST7789_Init+0x144>)
 8001a12:	f107 0410 	add.w	r4, r7, #16
 8001a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a18:	c407      	stmia	r4!, {r0, r1, r2}
 8001a1a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	210e      	movs	r1, #14
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fea8 	bl	8001778 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001a28:	20e1      	movs	r0, #225	@ 0xe1
 8001a2a:	f7ff fe89 	bl	8001740 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <ST7789_Init+0x148>)
 8001a30:	463c      	mov	r4, r7
 8001a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a34:	c407      	stmia	r4!, {r0, r1, r2}
 8001a36:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001a38:	463b      	mov	r3, r7
 8001a3a:	210e      	movs	r1, #14
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe9b 	bl	8001778 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001a42:	2021      	movs	r0, #33	@ 0x21
 8001a44:	f7ff fe7c 	bl	8001740 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001a48:	2011      	movs	r0, #17
 8001a4a:	f7ff fe79 	bl	8001740 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001a4e:	2013      	movs	r0, #19
 8001a50:	f7ff fe76 	bl	8001740 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001a54:	2029      	movs	r0, #41	@ 0x29
 8001a56:	f7ff fe73 	bl	8001740 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f000 fc18 	bl	8002290 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f80f 	bl	8001a84 <ST7789_Fill_Color>
}
 8001a66:	bf00      	nop
 8001a68:	372c      	adds	r7, #44	@ 0x2c
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003a4 	.word	0x200003a4
 8001a74:	40010800 	.word	0x40010800
 8001a78:	080083a8 	.word	0x080083a8
 8001a7c:	080083b0 	.word	0x080083b0
 8001a80:	080083c0 	.word	0x080083c0

08001a84 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001a8e:	23ef      	movs	r3, #239	@ 0xef
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	2100      	movs	r1, #0
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fefd 	bl	8001894 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001a9a:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	81fb      	strh	r3, [r7, #14]
 8001aa0:	e00e      	b.n	8001ac0 <ST7789_Fill_Color+0x3c>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <ST7789_Fill_Color+0x4c>)
 8001aac:	f004 fb6f 	bl	800618e <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001ab0:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001ab4:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <ST7789_Fill_Color+0x4c>)
 8001ab6:	f7ff fe5f 	bl	8001778 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001aba:	89fb      	ldrh	r3, [r7, #14]
 8001abc:	3301      	adds	r3, #1
 8001abe:	81fb      	strh	r3, [r7, #14]
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ac4:	d9ed      	bls.n	8001aa2 <ST7789_Fill_Color+0x1e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001ac6:	bf00      	nop
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200003a4 	.word	0x200003a4

08001ad4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b088      	sub	sp, #32
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	80bb      	strh	r3, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001aea:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001aec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001af0:	461a      	mov	r2, r3
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b00:	4619      	mov	r1, r3
 8001b02:	88bb      	ldrh	r3, [r7, #4]
 8001b04:	440b      	add	r3, r1
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	88b9      	ldrh	r1, [r7, #4]
 8001b0e:	88f8      	ldrh	r0, [r7, #6]
 8001b10:	f7ff fec0 	bl	8001894 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e041      	b.n	8001b9e <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8001b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	3b20      	subs	r3, #32
 8001b20:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	440b      	add	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e027      	b.n	8001b8c <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001b4c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	743b      	strb	r3, [r7, #16]
 8001b56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2102      	movs	r1, #2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe08 	bl	8001778 <ST7789_WriteData>
 8001b68:	e00d      	b.n	8001b86 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001b6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	733b      	strb	r3, [r7, #12]
 8001b74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fdf9 	bl	8001778 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b90:	461a      	mov	r2, r3
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d3d1      	bcc.n	8001b3c <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d3b7      	bcc.n	8001b1a <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8001baa:	bf00      	nop
}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb6:	b002      	add	sp, #8
 8001bb8:	4770      	bx	lr

08001bba <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001bba:	b082      	sub	sp, #8
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001bce:	bf00      	nop
	while (*str) {
 8001bd0:	e02d      	b.n	8001c2e <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	7d3a      	ldrb	r2, [r7, #20]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2bef      	cmp	r3, #239	@ 0xef
 8001bda:	dd13      	ble.n	8001c04 <ST7789_WriteString+0x4a>
			x = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001be0:	7d7b      	ldrb	r3, [r7, #21]
 8001be2:	461a      	mov	r2, r3
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	7d7a      	ldrb	r2, [r7, #21]
 8001bee:	4413      	add	r3, r2
 8001bf0:	2bef      	cmp	r3, #239	@ 0xef
 8001bf2:	dc21      	bgt.n	8001c38 <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d103      	bne.n	8001c04 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
				continue;
 8001c02:	e014      	b.n	8001c2e <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	88b9      	ldrh	r1, [r7, #4]
 8001c0a:	88f8      	ldrh	r0, [r7, #6]
 8001c0c:	8c3b      	ldrh	r3, [r7, #32]
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	8bbb      	ldrh	r3, [r7, #28]
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f7ff ff5b 	bl	8001ad4 <ST7789_WriteChar>
		x += font.width;
 8001c1e:	7d3b      	ldrb	r3, [r7, #20]
 8001c20:	461a      	mov	r2, r3
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4413      	add	r3, r2
 8001c26:	80fb      	strh	r3, [r7, #6]
		str++;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1cd      	bne.n	8001bd2 <ST7789_WriteString+0x18>
 8001c36:	e000      	b.n	8001c3a <ST7789_WriteString+0x80>
				break;
 8001c38:	bf00      	nop
	}
	ST7789_UnSelect();
 8001c3a:	bf00      	nop
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c46:	b002      	add	sp, #8
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_MspInit+0x60>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_MspInit+0x60>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000

08001cb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <HAL_ADC_MspInit+0xbc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d149      	bne.n	8001d64 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cd0:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a20      	ldr	r2, [pc, #128]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <HAL_ADC_MspInit+0xc0>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d00:	2310      	movs	r3, #16
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4819      	ldr	r0, [pc, #100]	@ (8001d74 <HAL_ADC_MspInit+0xc4>)
 8001d10:	f001 fa98 	bl	8003244 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d14:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d16:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_ADC_MspInit+0xcc>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d3e:	2220      	movs	r2, #32
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d4a:	f000 ffd9 	bl	8002d00 <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001d54:	f7ff fcee 	bl	8001734 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d5c:	621a      	str	r2, [r3, #32]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <HAL_ADC_MspInit+0xc8>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010800 	.word	0x40010800
 8001d78:	2000022c 	.word	0x2000022c
 8001d7c:	40020008 	.word	0x40020008

08001d80 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e4c <HAL_SPI_MspInit+0xcc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d151      	bne.n	8001e44 <HAL_SPI_MspInit+0xc4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001da6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <HAL_SPI_MspInit+0xd0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dd0:	23a0      	movs	r3, #160	@ 0xa0
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	481c      	ldr	r0, [pc, #112]	@ (8001e54 <HAL_SPI_MspInit+0xd4>)
 8001de4:	f001 fa2e 	bl	8003244 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001dea:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_SPI_MspInit+0xdc>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001df0:	2210      	movs	r2, #16
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e18:	480f      	ldr	r0, [pc, #60]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e1a:	f000 ff71 	bl	8002d00 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001e24:	f7ff fc86 	bl	8001734 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e2c:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_SPI_MspInit+0xd8>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2023      	movs	r0, #35	@ 0x23
 8001e3a:	f000 ff2a 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e3e:	2023      	movs	r0, #35	@ 0x23
 8001e40:	f000 ff43 	bl	8002cca <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013000 	.word	0x40013000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	200002c8 	.word	0x200002c8
 8001e5c:	40020030 	.word	0x40020030

08001e60 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_TIM_OC_MspInit+0x44>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d113      	bne.n	8001e9a <HAL_TIM_OC_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_TIM_OC_MspInit+0x48>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <HAL_TIM_OC_MspInit+0x48>)
 8001e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_TIM_OC_MspInit+0x48>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2019      	movs	r0, #25
 8001e90:	f000 feff 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e94:	2019      	movs	r0, #25
 8001e96:	f000 ff18 	bl	8002cca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <HAL_UART_MspInit+0x8c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d131      	bne.n	8001f30 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_UART_MspInit+0x90>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480b      	ldr	r0, [pc, #44]	@ (8001f40 <HAL_UART_MspInit+0x94>)
 8001f12:	f001 f997 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <HAL_UART_MspInit+0x94>)
 8001f2c:	f001 f98a 	bl	8003244 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010800 	.word	0x40010800

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <NMI_Handler+0x4>

08001f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 f960 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA1_Channel1_IRQHandler+0x10>)
 8001fa2:	f001 f81b 	bl	8002fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000022c 	.word	0x2000022c

08001fb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <DMA1_Channel3_IRQHandler+0x10>)
 8001fb6:	f001 f811 	bl	8002fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002c8 	.word	0x200002c8

08001fc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  run_adc();
 8001fc8:	f7ff f81a 	bl	8001000 <run_adc>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <TIM1_UP_IRQHandler+0x14>)
 8001fce:	f002 fd06 	bl	80049de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000030c 	.word	0x2000030c

08001fdc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <SPI1_IRQHandler+0x10>)
 8001fe2:	f002 fa0b 	bl	80043fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000270 	.word	0x20000270

08001ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <_kill>:

int _kill(int pid, int sig)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002008:	f004 f914 	bl	8006234 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	2216      	movs	r2, #22
 8002010:	601a      	str	r2, [r3, #0]
  return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_exit>:

void _exit (int status)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002026:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffe7 	bl	8001ffe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <_exit+0x12>

08002034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e00a      	b.n	800205c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002046:	f3af 8000 	nop.w
 800204a:	4601      	mov	r1, r0
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	dbf0      	blt.n	8002046 <_read+0x12>
  }

  return len;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e009      	b.n	8002094 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	3301      	adds	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	dbf1      	blt.n	8002080 <_write+0x12>
  }
  return len;
 800209c:	687b      	ldr	r3, [r7, #4]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_close>:

int _close(int file)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020cc:	605a      	str	r2, [r3, #4]
  return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <_isatty>:

int _isatty(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f004 f87c 	bl	8006234 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20005000 	.word	0x20005000
 8002168:	00001000 	.word	0x00001000
 800216c:	20000d04 	.word	0x20000d04
 8002170:	20000e58 	.word	0x20000e58

08002174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002180:	f7ff fff8 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480b      	ldr	r0, [pc, #44]	@ (80021b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002186:	490c      	ldr	r1, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002188:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a09      	ldr	r2, [pc, #36]	@ (80021c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800219c:	4c09      	ldr	r4, [pc, #36]	@ (80021c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f004 f849 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ae:	f7ff f89d 	bl	80012ec <main>
  bx lr
 80021b2:	4770      	bx	lr
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021bc:	08009b3c 	.word	0x08009b3c
  ldr r2, =_sbss
 80021c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c4:	20000e58 	.word	0x20000e58

080021c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_Init+0x28>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_Init+0x28>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 fd4d 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fd30 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fd65 	bl	8002ce6 <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002234:	f000 fd2d 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002238:	4a06      	ldr	r2, [pc, #24]	@ (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000000c 	.word	0x2000000c
 8002250:	20000014 	.word	0x20000014
 8002254:	20000010 	.word	0x20000010

08002258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_IncTick+0x1c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_IncTick+0x20>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a03      	ldr	r2, [pc, #12]	@ (8002278 <HAL_IncTick+0x20>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000014 	.word	0x20000014
 8002278:	20000d08 	.word	0x20000d08

0800227c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b02      	ldr	r3, [pc, #8]	@ (800228c <HAL_GetTick+0x10>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000d08 	.word	0x20000d08

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff fff0 	bl	800227c <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffe0 	bl	800227c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000014 	.word	0x20000014

080022d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0be      	b.n	8002478 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fcca 	bl	8001cb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fb39 	bl	8002994 <ADC_ConversionStop_Disable>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8099 	bne.w	8002466 <HAL_ADC_Init+0x18e>
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8095 	bne.w	8002466 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	f043 0202 	orr.w	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002358:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7b1b      	ldrb	r3, [r3, #12]
 800235e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002360:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002370:	d003      	beq.n	800237a <HAL_ADC_Init+0xa2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <HAL_ADC_Init+0xa8>
 800237a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800237e:	e000      	b.n	8002382 <HAL_ADC_Init+0xaa>
 8002380:	2300      	movs	r3, #0
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7d1b      	ldrb	r3, [r3, #20]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d119      	bne.n	80023c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7b1b      	ldrb	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	3b01      	subs	r3, #1
 800239e:	035a      	lsls	r2, r3, #13
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e00b      	b.n	80023c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <HAL_ADC_Init+0x1a8>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_Init+0x126>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d104      	bne.n	8002408 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	3b01      	subs	r3, #1
 8002404:	051b      	lsls	r3, r3, #20
 8002406:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <HAL_ADC_Init+0x1ac>)
 8002424:	4013      	ands	r3, r2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	d10b      	bne.n	8002444 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002442:	e018      	b.n	8002476 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f023 0312 	bic.w	r3, r3, #18
 800244c:	f043 0210 	orr.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002464:	e007      	b.n	8002476 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	ffe1f7fd 	.word	0xffe1f7fd
 8002484:	ff1f0efe 	.word	0xff1f0efe

08002488 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a64      	ldr	r2, [pc, #400]	@ (8002630 <HAL_ADC_Start_DMA+0x1a8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_Start_DMA+0x24>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a63      	ldr	r2, [pc, #396]	@ (8002634 <HAL_ADC_Start_DMA+0x1ac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d106      	bne.n	80024ba <HAL_ADC_Start_DMA+0x32>
 80024ac:	4b60      	ldr	r3, [pc, #384]	@ (8002630 <HAL_ADC_Start_DMA+0x1a8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 80b3 	bne.w	8002620 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_Start_DMA+0x40>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0ae      	b.n	8002626 <HAL_ADC_Start_DMA+0x19e>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fa05 	bl	80028e0 <ADC_Enable>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 809a 	bne.w	8002616 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4e      	ldr	r2, [pc, #312]	@ (8002634 <HAL_ADC_Start_DMA+0x1ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d105      	bne.n	800250c <HAL_ADC_Start_DMA+0x84>
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <HAL_ADC_Start_DMA+0x1a8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d115      	bne.n	8002538 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d026      	beq.n	8002574 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800252e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002536:	e01d      	b.n	8002574 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a39      	ldr	r2, [pc, #228]	@ (8002630 <HAL_ADC_Start_DMA+0x1a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_ADC_Start_DMA+0xd0>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a38      	ldr	r2, [pc, #224]	@ (8002634 <HAL_ADC_Start_DMA+0x1ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d10d      	bne.n	8002574 <HAL_ADC_Start_DMA+0xec>
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <HAL_ADC_Start_DMA+0x1a8>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800256c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	f023 0206 	bic.w	r2, r3, #6
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800258c:	e002      	b.n	8002594 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a25      	ldr	r2, [pc, #148]	@ (8002638 <HAL_ADC_Start_DMA+0x1b0>)
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a24      	ldr	r2, [pc, #144]	@ (800263c <HAL_ADC_Start_DMA+0x1b4>)
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <HAL_ADC_Start_DMA+0x1b8>)
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a18      	ldr	r0, [r3, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	334c      	adds	r3, #76	@ 0x4c
 80025d8:	4619      	mov	r1, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f000 fbe9 	bl	8002db4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025ec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025f0:	d108      	bne.n	8002604 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002600:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002602:	e00f      	b.n	8002624 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002612:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002614:	e006      	b.n	8002624 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800261e:	e001      	b.n	8002624 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40012400 	.word	0x40012400
 8002634:	40012800 	.word	0x40012800
 8002638:	08002a17 	.word	0x08002a17
 800263c:	08002a93 	.word	0x08002a93
 8002640:	08002aaf 	.word	0x08002aaf

08002644 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Stop_DMA+0x1a>
 800265a:	2302      	movs	r3, #2
 800265c:	e03a      	b.n	80026d4 <HAL_ADC_Stop_DMA+0x90>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f994 	bl	8002994 <ADC_ConversionStop_Disable>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d129      	bne.n	80026ca <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002684:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11a      	bne.n	80026ca <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fbeb 	bl	8002e74 <HAL_DMA_Abort>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80026bc:	e005      	b.n	80026ca <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x20>
 800270c:	2302      	movs	r3, #2
 800270e:	e0dc      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1da>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d81c      	bhi.n	800275a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b05      	subs	r3, #5
 8002732:	221f      	movs	r2, #31
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	4019      	ands	r1, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b05      	subs	r3, #5
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	@ 0x34
 8002758:	e03c      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d81c      	bhi.n	800279c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	@ 0x23
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	4019      	ands	r1, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b23      	subs	r3, #35	@ 0x23
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
 800279a:	e01b      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b41      	subs	r3, #65	@ 0x41
 80027ae:	221f      	movs	r2, #31
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b41      	subs	r3, #65	@ 0x41
 80027c8:	fa00 f203 	lsl.w	r2, r0, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b09      	cmp	r3, #9
 80027da:	d91c      	bls.n	8002816 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	2207      	movs	r2, #7
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	3b1e      	subs	r3, #30
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	4019      	ands	r1, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6898      	ldr	r0, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d003      	beq.n	800285a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002856:	2b11      	cmp	r3, #17
 8002858:	d132      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1d      	ldr	r2, [pc, #116]	@ (80028d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d125      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002880:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b10      	cmp	r3, #16
 8002888:	d11a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9a      	lsrs	r2, r3, #18
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x1b2>
 80028ae:	e007      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012400 	.word	0x40012400
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	431bde83 	.word	0x431bde83

080028e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d040      	beq.n	8002980 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800290e:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <ADC_Enable+0xac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <ADC_Enable+0xb0>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800291c:	e002      	b.n	8002924 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800292a:	f7ff fca7 	bl	800227c <HAL_GetTick>
 800292e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002930:	e01f      	b.n	8002972 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002932:	f7ff fca3 	bl	800227c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d918      	bls.n	8002972 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d011      	beq.n	8002972 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d1d8      	bne.n	8002932 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c
 8002990:	431bde83 	.word	0x431bde83

08002994 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12e      	bne.n	8002a0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029be:	f7ff fc5d 	bl	800227c <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c4:	e01b      	b.n	80029fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029c6:	f7ff fc59 	bl	800227c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d914      	bls.n	80029fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10d      	bne.n	80029fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d0dc      	beq.n	80029c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d127      	bne.n	8002a80 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002a46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002a4a:	d115      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7fe fab3 	bl	8000fe4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a7e:	e004      	b.n	8002a8a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fe1b 	bl	80026dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7fe fbf7 	bl	80012c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4906      	ldr	r1, [pc, #24]	@ (8002b7c <__NVIC_EnableIRQ+0x34>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	@ (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c5c:	f7ff ff90 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff2d 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff42 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff90 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5f 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff35 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e043      	b.n	8002d9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_DMA_Init+0xa8>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a22      	ldr	r2, [pc, #136]	@ (8002dac <HAL_DMA_Init+0xac>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_DMA_Init+0xb0>)
 8002d32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	bffdfff8 	.word	0xbffdfff8
 8002dac:	cccccccd 	.word	0xcccccccd
 8002db0:	40020000 	.word	0x40020000

08002db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_DMA_Start_IT+0x20>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e04b      	b.n	8002e6c <HAL_DMA_Start_IT+0xb8>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d13a      	bne.n	8002e5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f9eb 	bl	80031e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 020e 	orr.w	r2, r2, #14
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e00f      	b.n	8002e4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0204 	bic.w	r2, r2, #4
 8002e3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 020a 	orr.w	r2, r2, #10
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2204      	movs	r2, #4
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e020      	b.n	8002ee0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 020e 	bic.w	r2, r2, #14
 8002eac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d005      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e051      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 020e 	bic.w	r2, r2, #14
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <HAL_DMA_Abort_IT+0xd4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d029      	beq.n	8002f8e <HAL_DMA_Abort_IT+0xa2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <HAL_DMA_Abort_IT+0xd8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x9e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc8 <HAL_DMA_Abort_IT+0xdc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_Abort_IT+0x98>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1e      	ldr	r2, [pc, #120]	@ (8002fcc <HAL_DMA_Abort_IT+0xe0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d012      	beq.n	8002f7e <HAL_DMA_Abort_IT+0x92>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <HAL_DMA_Abort_IT+0xe4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00a      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x8c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_DMA_Abort_IT+0xe8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <HAL_DMA_Abort_IT+0x86>
 8002f6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f70:	e00e      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f76:	e00b      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f7c:	e008      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f82:	e005      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f88:	e002      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_Abort_IT+0xa4>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4a11      	ldr	r2, [pc, #68]	@ (8002fd8 <HAL_DMA_Abort_IT+0xec>)
 8002f92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
    } 
  }
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40020008 	.word	0x40020008
 8002fc4:	4002001c 	.word	0x4002001c
 8002fc8:	40020030 	.word	0x40020030
 8002fcc:	40020044 	.word	0x40020044
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	4002006c 	.word	0x4002006c
 8002fd8:	40020000 	.word	0x40020000

08002fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d04f      	beq.n	80030a4 <HAL_DMA_IRQHandler+0xc8>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04a      	beq.n	80030a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0204 	bic.w	r2, r2, #4
 800302a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a66      	ldr	r2, [pc, #408]	@ (80031cc <HAL_DMA_IRQHandler+0x1f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d029      	beq.n	800308a <HAL_DMA_IRQHandler+0xae>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <HAL_DMA_IRQHandler+0x1f4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_IRQHandler+0xaa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a63      	ldr	r2, [pc, #396]	@ (80031d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01a      	beq.n	8003080 <HAL_DMA_IRQHandler+0xa4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a62      	ldr	r2, [pc, #392]	@ (80031d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_DMA_IRQHandler+0x9e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a60      	ldr	r2, [pc, #384]	@ (80031dc <HAL_DMA_IRQHandler+0x200>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_DMA_IRQHandler+0x98>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5f      	ldr	r2, [pc, #380]	@ (80031e0 <HAL_DMA_IRQHandler+0x204>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_DMA_IRQHandler+0x92>
 8003068:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800306c:	e00e      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 800306e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003072:	e00b      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 8003074:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003078:	e008      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 800307a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800307e:	e005      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 8003080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003084:	e002      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 8003086:	2340      	movs	r3, #64	@ 0x40
 8003088:	e000      	b.n	800308c <HAL_DMA_IRQHandler+0xb0>
 800308a:	2304      	movs	r3, #4
 800308c:	4a55      	ldr	r2, [pc, #340]	@ (80031e4 <HAL_DMA_IRQHandler+0x208>)
 800308e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8094 	beq.w	80031c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030a2:	e08e      	b.n	80031c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	2202      	movs	r2, #2
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d056      	beq.n	8003162 <HAL_DMA_IRQHandler+0x186>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d051      	beq.n	8003162 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020a 	bic.w	r2, r2, #10
 80030da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a38      	ldr	r2, [pc, #224]	@ (80031cc <HAL_DMA_IRQHandler+0x1f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d029      	beq.n	8003142 <HAL_DMA_IRQHandler+0x166>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a37      	ldr	r2, [pc, #220]	@ (80031d0 <HAL_DMA_IRQHandler+0x1f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_IRQHandler+0x162>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a35      	ldr	r2, [pc, #212]	@ (80031d4 <HAL_DMA_IRQHandler+0x1f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x15c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a34      	ldr	r2, [pc, #208]	@ (80031d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d012      	beq.n	8003132 <HAL_DMA_IRQHandler+0x156>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a32      	ldr	r2, [pc, #200]	@ (80031dc <HAL_DMA_IRQHandler+0x200>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00a      	beq.n	800312c <HAL_DMA_IRQHandler+0x150>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a31      	ldr	r2, [pc, #196]	@ (80031e0 <HAL_DMA_IRQHandler+0x204>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <HAL_DMA_IRQHandler+0x14a>
 8003120:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003124:	e00e      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 8003126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800312a:	e00b      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 800312c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003130:	e008      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 8003132:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003136:	e005      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 8003138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800313c:	e002      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 800313e:	2320      	movs	r3, #32
 8003140:	e000      	b.n	8003144 <HAL_DMA_IRQHandler+0x168>
 8003142:	2302      	movs	r3, #2
 8003144:	4a27      	ldr	r2, [pc, #156]	@ (80031e4 <HAL_DMA_IRQHandler+0x208>)
 8003146:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d034      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003160:	e02f      	b.n	80031c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2208      	movs	r2, #8
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d028      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x1e8>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 020e 	bic.w	r2, r2, #14
 800318a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
    }
  }
  return;
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
}
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40020008 	.word	0x40020008
 80031d0:	4002001c 	.word	0x4002001c
 80031d4:	40020030 	.word	0x40020030
 80031d8:	40020044 	.word	0x40020044
 80031dc:	40020058 	.word	0x40020058
 80031e0:	4002006c 	.word	0x4002006c
 80031e4:	40020000 	.word	0x40020000

080031e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b10      	cmp	r3, #16
 8003214:	d108      	bne.n	8003228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003226:	e007      	b.n	8003238 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b08b      	sub	sp, #44	@ 0x2c
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e169      	b.n	800352c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003258:	2201      	movs	r2, #1
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8158 	bne.w	8003526 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a9a      	ldr	r2, [pc, #616]	@ (80034e4 <HAL_GPIO_Init+0x2a0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d05e      	beq.n	800333e <HAL_GPIO_Init+0xfa>
 8003280:	4a98      	ldr	r2, [pc, #608]	@ (80034e4 <HAL_GPIO_Init+0x2a0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d875      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 8003286:	4a98      	ldr	r2, [pc, #608]	@ (80034e8 <HAL_GPIO_Init+0x2a4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d058      	beq.n	800333e <HAL_GPIO_Init+0xfa>
 800328c:	4a96      	ldr	r2, [pc, #600]	@ (80034e8 <HAL_GPIO_Init+0x2a4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d86f      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 8003292:	4a96      	ldr	r2, [pc, #600]	@ (80034ec <HAL_GPIO_Init+0x2a8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d052      	beq.n	800333e <HAL_GPIO_Init+0xfa>
 8003298:	4a94      	ldr	r2, [pc, #592]	@ (80034ec <HAL_GPIO_Init+0x2a8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d869      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 800329e:	4a94      	ldr	r2, [pc, #592]	@ (80034f0 <HAL_GPIO_Init+0x2ac>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d04c      	beq.n	800333e <HAL_GPIO_Init+0xfa>
 80032a4:	4a92      	ldr	r2, [pc, #584]	@ (80034f0 <HAL_GPIO_Init+0x2ac>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d863      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 80032aa:	4a92      	ldr	r2, [pc, #584]	@ (80034f4 <HAL_GPIO_Init+0x2b0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d046      	beq.n	800333e <HAL_GPIO_Init+0xfa>
 80032b0:	4a90      	ldr	r2, [pc, #576]	@ (80034f4 <HAL_GPIO_Init+0x2b0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d85d      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d82a      	bhi.n	8003310 <HAL_GPIO_Init+0xcc>
 80032ba:	2b12      	cmp	r3, #18
 80032bc:	d859      	bhi.n	8003372 <HAL_GPIO_Init+0x12e>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_GPIO_Init+0x80>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	0800333f 	.word	0x0800333f
 80032c8:	08003319 	.word	0x08003319
 80032cc:	0800332b 	.word	0x0800332b
 80032d0:	0800336d 	.word	0x0800336d
 80032d4:	08003373 	.word	0x08003373
 80032d8:	08003373 	.word	0x08003373
 80032dc:	08003373 	.word	0x08003373
 80032e0:	08003373 	.word	0x08003373
 80032e4:	08003373 	.word	0x08003373
 80032e8:	08003373 	.word	0x08003373
 80032ec:	08003373 	.word	0x08003373
 80032f0:	08003373 	.word	0x08003373
 80032f4:	08003373 	.word	0x08003373
 80032f8:	08003373 	.word	0x08003373
 80032fc:	08003373 	.word	0x08003373
 8003300:	08003373 	.word	0x08003373
 8003304:	08003373 	.word	0x08003373
 8003308:	08003321 	.word	0x08003321
 800330c:	08003335 	.word	0x08003335
 8003310:	4a79      	ldr	r2, [pc, #484]	@ (80034f8 <HAL_GPIO_Init+0x2b4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003316:	e02c      	b.n	8003372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	623b      	str	r3, [r7, #32]
          break;
 800331e:	e029      	b.n	8003374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	3304      	adds	r3, #4
 8003326:	623b      	str	r3, [r7, #32]
          break;
 8003328:	e024      	b.n	8003374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	3308      	adds	r3, #8
 8003330:	623b      	str	r3, [r7, #32]
          break;
 8003332:	e01f      	b.n	8003374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	330c      	adds	r3, #12
 800333a:	623b      	str	r3, [r7, #32]
          break;
 800333c:	e01a      	b.n	8003374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003346:	2304      	movs	r3, #4
 8003348:	623b      	str	r3, [r7, #32]
          break;
 800334a:	e013      	b.n	8003374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003354:	2308      	movs	r3, #8
 8003356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	611a      	str	r2, [r3, #16]
          break;
 800335e:	e009      	b.n	8003374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003360:	2308      	movs	r3, #8
 8003362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	615a      	str	r2, [r3, #20]
          break;
 800336a:	e003      	b.n	8003374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
          break;
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x130>
          break;
 8003372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2bff      	cmp	r3, #255	@ 0xff
 8003378:	d801      	bhi.n	800337e <HAL_GPIO_Init+0x13a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_Init+0x13e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2bff      	cmp	r3, #255	@ 0xff
 8003388:	d802      	bhi.n	8003390 <HAL_GPIO_Init+0x14c>
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	e002      	b.n	8003396 <HAL_GPIO_Init+0x152>
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	3b08      	subs	r3, #8
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	210f      	movs	r1, #15
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	6a39      	ldr	r1, [r7, #32]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	431a      	orrs	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80b1 	beq.w	8003526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033c4:	4b4d      	ldr	r3, [pc, #308]	@ (80034fc <HAL_GPIO_Init+0x2b8>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	4a4c      	ldr	r2, [pc, #304]	@ (80034fc <HAL_GPIO_Init+0x2b8>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6193      	str	r3, [r2, #24]
 80033d0:	4b4a      	ldr	r3, [pc, #296]	@ (80034fc <HAL_GPIO_Init+0x2b8>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033dc:	4a48      	ldr	r2, [pc, #288]	@ (8003500 <HAL_GPIO_Init+0x2bc>)
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a40      	ldr	r2, [pc, #256]	@ (8003504 <HAL_GPIO_Init+0x2c0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <HAL_GPIO_Init+0x1ec>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3f      	ldr	r2, [pc, #252]	@ (8003508 <HAL_GPIO_Init+0x2c4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00d      	beq.n	800342c <HAL_GPIO_Init+0x1e8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3e      	ldr	r2, [pc, #248]	@ (800350c <HAL_GPIO_Init+0x2c8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d007      	beq.n	8003428 <HAL_GPIO_Init+0x1e4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3d      	ldr	r2, [pc, #244]	@ (8003510 <HAL_GPIO_Init+0x2cc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_GPIO_Init+0x1e0>
 8003420:	2303      	movs	r3, #3
 8003422:	e006      	b.n	8003432 <HAL_GPIO_Init+0x1ee>
 8003424:	2304      	movs	r3, #4
 8003426:	e004      	b.n	8003432 <HAL_GPIO_Init+0x1ee>
 8003428:	2302      	movs	r3, #2
 800342a:	e002      	b.n	8003432 <HAL_GPIO_Init+0x1ee>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_GPIO_Init+0x1ee>
 8003430:	2300      	movs	r3, #0
 8003432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003434:	f002 0203 	and.w	r2, r2, #3
 8003438:	0092      	lsls	r2, r2, #2
 800343a:	4093      	lsls	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003442:	492f      	ldr	r1, [pc, #188]	@ (8003500 <HAL_GPIO_Init+0x2bc>)
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800345c:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	492c      	ldr	r1, [pc, #176]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800346a:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	43db      	mvns	r3, r3
 8003472:	4928      	ldr	r1, [pc, #160]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 8003474:	4013      	ands	r3, r2
 8003476:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003484:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	4922      	ldr	r1, [pc, #136]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	60cb      	str	r3, [r1, #12]
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003492:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	43db      	mvns	r3, r3
 800349a:	491e      	ldr	r1, [pc, #120]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 800349c:	4013      	ands	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4918      	ldr	r1, [pc, #96]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034ba:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4914      	ldr	r1, [pc, #80]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d021      	beq.n	8003518 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	490e      	ldr	r1, [pc, #56]	@ (8003514 <HAL_GPIO_Init+0x2d0>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	e021      	b.n	8003526 <HAL_GPIO_Init+0x2e2>
 80034e2:	bf00      	nop
 80034e4:	10320000 	.word	0x10320000
 80034e8:	10310000 	.word	0x10310000
 80034ec:	10220000 	.word	0x10220000
 80034f0:	10210000 	.word	0x10210000
 80034f4:	10120000 	.word	0x10120000
 80034f8:	10110000 	.word	0x10110000
 80034fc:	40021000 	.word	0x40021000
 8003500:	40010000 	.word	0x40010000
 8003504:	40010800 	.word	0x40010800
 8003508:	40010c00 	.word	0x40010c00
 800350c:	40011000 	.word	0x40011000
 8003510:	40011400 	.word	0x40011400
 8003514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_GPIO_Init+0x304>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	43db      	mvns	r3, r3
 8003520:	4909      	ldr	r1, [pc, #36]	@ (8003548 <HAL_GPIO_Init+0x304>)
 8003522:	4013      	ands	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	3301      	adds	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	f47f ae8e 	bne.w	8003258 <HAL_GPIO_Init+0x14>
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	372c      	adds	r7, #44	@ 0x2c
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e272      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8087 	beq.w	80036aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800359c:	4b92      	ldr	r3, [pc, #584]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d00c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035a8:	4b8f      	ldr	r3, [pc, #572]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d112      	bne.n	80035da <HAL_RCC_OscConfig+0x5e>
 80035b4:	4b8c      	ldr	r3, [pc, #560]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d10b      	bne.n	80035da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c2:	4b89      	ldr	r3, [pc, #548]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x12c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d168      	bne.n	80036a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e24c      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x76>
 80035e4:	4b80      	ldr	r3, [pc, #512]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7f      	ldr	r2, [pc, #508]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e02e      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b7b      	ldr	r3, [pc, #492]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7a      	ldr	r2, [pc, #488]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b78      	ldr	r3, [pc, #480]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a77      	ldr	r2, [pc, #476]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0xbc>
 800361e:	4b72      	ldr	r3, [pc, #456]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a71      	ldr	r2, [pc, #452]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6f      	ldr	r3, [pc, #444]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6e      	ldr	r2, [pc, #440]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 8003638:	4b6b      	ldr	r3, [pc, #428]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6a      	ldr	r2, [pc, #424]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a67      	ldr	r2, [pc, #412]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fe10 	bl	800227c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fe0c 	bl	800227c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e200      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5d      	ldr	r3, [pc, #372]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xe4>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fdfc 	bl	800227c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fdf8 	bl	800227c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1ec      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x10c>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b6:	4b4c      	ldr	r3, [pc, #304]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c2:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x18c>
 80036ce:	4b46      	ldr	r3, [pc, #280]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b43      	ldr	r3, [pc, #268]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x176>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c0      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3d      	ldr	r3, [pc, #244]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4939      	ldr	r1, [pc, #228]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fdb1 	bl	800227c <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fe fdad 	bl	800227c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a1      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2d      	ldr	r3, [pc, #180]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b2a      	ldr	r3, [pc, #168]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4927      	ldr	r1, [pc, #156]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_RCC_OscConfig+0x270>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fd90 	bl	800227c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003760:	f7fe fd8c 	bl	800227c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e180      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d03a      	beq.n	8003800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d019      	beq.n	80037c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <HAL_RCC_OscConfig+0x274>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003798:	f7fe fd70 	bl	800227c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fe fd6c 	bl	800227c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e160      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037be:	2001      	movs	r0, #1
 80037c0:	f000 face 	bl	8003d60 <RCC_Delay>
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe fd56 	bl	800227c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d2:	e00f      	b.n	80037f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fe fd52 	bl	800227c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d908      	bls.n	80037f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e146      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	42420000 	.word	0x42420000
 80037f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b92      	ldr	r3, [pc, #584]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e9      	bne.n	80037d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a6 	beq.w	800395a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b8b      	ldr	r3, [pc, #556]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4a87      	ldr	r2, [pc, #540]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003828:	61d3      	str	r3, [r2, #28]
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b82      	ldr	r3, [pc, #520]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b7f      	ldr	r3, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fe fd13 	bl	800227c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fe fd0f 	bl	800227c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e103      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b75      	ldr	r3, [pc, #468]	@ (8003a44 <HAL_RCC_OscConfig+0x4c8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x312>
 8003880:	4b6f      	ldr	r3, [pc, #444]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4a6e      	ldr	r2, [pc, #440]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6213      	str	r3, [r2, #32]
 800388c:	e02d      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x334>
 8003896:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	4b67      	ldr	r3, [pc, #412]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a66      	ldr	r2, [pc, #408]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	e01c      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x356>
 80038b8:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a60      	ldr	r2, [pc, #384]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	e00b      	b.n	80038ea <HAL_RCC_OscConfig+0x36e>
 80038d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6213      	str	r3, [r2, #32]
 80038de:	4b58      	ldr	r3, [pc, #352]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a57      	ldr	r2, [pc, #348]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fcc3 	bl	800227c <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fcbf 	bl	800227c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0b1      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	4b4b      	ldr	r3, [pc, #300]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ee      	beq.n	80038fa <HAL_RCC_OscConfig+0x37e>
 800391c:	e014      	b.n	8003948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fcad 	bl	800227c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe fca9 	bl	800227c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e09b      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ee      	bne.n	8003926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4a3b      	ldr	r2, [pc, #236]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d061      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d146      	bne.n	8003a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b33      	ldr	r3, [pc, #204]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fc7d 	bl	800227c <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe fc79 	bl	800227c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e06d      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003998:	4b29      	ldr	r3, [pc, #164]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d108      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ae:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4921      	ldr	r1, [pc, #132]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a19      	ldr	r1, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	430b      	orrs	r3, r1
 80039d2:	491b      	ldr	r1, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fc4d 	bl	800227c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fc49 	bl	800227c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e03d      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x46a>
 8003a04:	e035      	b.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fc36 	bl	800227c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fc32 	bl	800227c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e026      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x498>
 8003a32:	e01e      	b.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e019      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_OscConfig+0x500>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0d0      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b6a      	ldr	r3, [pc, #424]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d910      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b67      	ldr	r3, [pc, #412]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 0207 	bic.w	r2, r3, #7
 8003aaa:	4965      	ldr	r1, [pc, #404]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b8      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b59      	ldr	r3, [pc, #356]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af4:	4b53      	ldr	r3, [pc, #332]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a52      	ldr	r2, [pc, #328]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	494d      	ldr	r1, [pc, #308]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d040      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b41      	ldr	r3, [pc, #260]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e073      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06b      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b39      	ldr	r3, [pc, #228]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4936      	ldr	r1, [pc, #216]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fb84 	bl	800227c <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fe fb80 	bl	800227c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e053      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b27      	ldr	r3, [pc, #156]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d210      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 0207 	bic.w	r2, r3, #7
 8003bb6:	4922      	ldr	r1, [pc, #136]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e032      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4916      	ldr	r1, [pc, #88]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bfa:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490e      	ldr	r1, [pc, #56]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c0e:	f000 f821 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490a      	ldr	r1, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a09      	ldr	r2, [pc, #36]	@ (8003c4c <HAL_RCC_ClockConfig+0x1cc>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_ClockConfig+0x1d0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fae2 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800978c 	.word	0x0800978c
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	20000010 	.word	0x20000010

08003c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d002      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x30>
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x36>
 8003c82:	e027      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003c86:	613b      	str	r3, [r7, #16]
      break;
 8003c88:	e027      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c94:	5cd3      	ldrb	r3, [r2, r3]
 8003c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca2:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	0c5b      	lsrs	r3, r3, #17
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb6:	fb03 f202 	mul.w	r2, r3, r2
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e004      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd6:	613b      	str	r3, [r7, #16]
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	693b      	ldr	r3, [r7, #16]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	080097a4 	.word	0x080097a4
 8003cf4:	080097b4 	.word	0x080097b4
 8003cf8:	003d0900 	.word	0x003d0900

08003cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d00:	4b02      	ldr	r3, [pc, #8]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff2 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	0800979c 	.word	0x0800979c

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	0800979c 	.word	0x0800979c

08003d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d68:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <RCC_Delay+0x34>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <RCC_Delay+0x38>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0a5b      	lsrs	r3, r3, #9
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d7c:	bf00      	nop
  }
  while (Delay --);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	60fa      	str	r2, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f9      	bne.n	8003d7c <RCC_Delay+0x1c>
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	2000000c 	.word	0x2000000c
 8003d98:	10624dd3 	.word	0x10624dd3

08003d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d07d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	61d3      	str	r3, [r2, #28]
 8003dd4:	4b49      	ldr	r3, [pc, #292]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b46      	ldr	r3, [pc, #280]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d118      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df0:	4b43      	ldr	r3, [pc, #268]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a42      	ldr	r2, [pc, #264]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fa3e 	bl	800227c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fe fa3a 	bl	800227c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e06d      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b3a      	ldr	r3, [pc, #232]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e22:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02e      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d027      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e40:	4b2e      	ldr	r3, [pc, #184]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e50:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e56:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d014      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fa09 	bl	800227c <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fe fa05 	bl	800227c <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e036      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ee      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4917      	ldr	r1, [pc, #92]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	490b      	ldr	r1, [pc, #44]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ede:	4b07      	ldr	r3, [pc, #28]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4904      	ldr	r1, [pc, #16]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42420440 	.word	0x42420440

08003f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e076      	b.n	8004008 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f2a:	d009      	beq.n	8003f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
 8003f32:	e005      	b.n	8003f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd ff10 	bl	8001d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc4:	ea42 0103 	orr.w	r1, r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	0c1a      	lsrs	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 0204 	and.w	r2, r2, #4
 8003fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004020:	f7fe f92c 	bl	800227c <HAL_GetTick>
 8004024:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
 8004038:	e12a      	b.n	8004290 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0x36>
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e122      	b.n	8004290 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_SPI_Transmit+0x48>
 8004054:	2302      	movs	r3, #2
 8004056:	e11b      	b.n	8004290 <HAL_SPI_Transmit+0x280>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2203      	movs	r2, #3
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a6:	d10f      	bne.n	80040c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	d007      	beq.n	80040e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ee:	d152      	bne.n	8004196 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_Transmit+0xee>
 80040f8:	8b7b      	ldrh	r3, [r7, #26]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d145      	bne.n	800418a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004122:	e032      	b.n	800418a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d112      	bne.n	8004158 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004156:	e018      	b.n	800418a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004158:	f7fe f890 	bl	800227c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d803      	bhi.n	8004170 <HAL_SPI_Transmit+0x160>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800416e:	d102      	bne.n	8004176 <HAL_SPI_Transmit+0x166>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e082      	b.n	8004290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1c7      	bne.n	8004124 <HAL_SPI_Transmit+0x114>
 8004194:	e053      	b.n	800423e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x194>
 800419e:	8b7b      	ldrh	r3, [r7, #26]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d147      	bne.n	8004234 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041ca:	e033      	b.n	8004234 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d113      	bne.n	8004202 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004200:	e018      	b.n	8004234 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004202:	f7fe f83b 	bl	800227c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d803      	bhi.n	800421a <HAL_SPI_Transmit+0x20a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Transmit+0x210>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e02d      	b.n	8004290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1c6      	bne.n	80041cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 faf8 	bl	8004838 <SPI_EndRxTxTransaction>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800428e:	2300      	movs	r3, #0
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	e097      	b.n	80043e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Transmit_DMA+0x2a>
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08f      	b.n	80043e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_SPI_Transmit_DMA+0x3c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e088      	b.n	80043e6 <HAL_SPI_Transmit_DMA+0x14e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2203      	movs	r2, #3
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004322:	d10f      	bne.n	8004344 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004342:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004348:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_SPI_Transmit_DMA+0x158>)
 800434a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004350:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004358:	4a27      	ldr	r2, [pc, #156]	@ (80043f8 <HAL_SPI_Transmit_DMA+0x160>)
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004360:	2200      	movs	r2, #0
 8004362:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	4619      	mov	r1, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800437c:	f7fe fd1a 	bl	8002db4 <HAL_DMA_Start_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e023      	b.n	80043e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b40      	cmp	r3, #64	@ 0x40
 80043aa:	d007      	beq.n	80043bc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0220 	orr.w	r2, r2, #32
 80043d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0202 	orr.w	r2, r2, #2
 80043e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	080046a5 	.word	0x080046a5
 80043f4:	080045ff 	.word	0x080045ff
 80043f8:	080046c1 	.word	0x080046c1

080043fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10f      	bne.n	8004440 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
    return;
 800443e:	e0be      	b.n	80045be <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_SPI_IRQHandler+0x66>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	09db      	lsrs	r3, r3, #7
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
    return;
 8004460:	e0ad      	b.n	80045be <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_SPI_IRQHandler+0x80>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a1 	beq.w	80045be <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 809a 	beq.w	80045be <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d023      	beq.n	80044de <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d011      	beq.n	80044c6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	e00b      	b.n	80044de <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
        return;
 80044dc:	e06f      	b.n	80045be <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d014      	beq.n	8004514 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004518:	2b00      	cmp	r3, #0
 800451a:	d04f      	beq.n	80045bc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800452a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_SPI_IRQHandler+0x14c>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d034      	beq.n	80045b2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0203 	bic.w	r2, r2, #3
 8004556:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_SPI_IRQHandler+0x1c8>)
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe fcbd 	bl	8002eec <HAL_DMA_Abort_IT>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004588:	2b00      	cmp	r3, #0
 800458a:	d016      	beq.n	80045ba <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004590:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <HAL_SPI_IRQHandler+0x1c8>)
 8004592:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fca7 	bl	8002eec <HAL_DMA_Abort_IT>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80045b0:	e003      	b.n	80045ba <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f81a 	bl	80045ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045b8:	e000      	b.n	80045bc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80045ba:	bf00      	nop
    return;
 80045bc:	bf00      	nop
  }
}
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08004701 	.word	0x08004701

080045c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460c:	f7fd fe36 	bl	800227c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b20      	cmp	r3, #32
 800461e:	d03b      	beq.n	8004698 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0220 	bic.w	r2, r2, #32
 800462e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0202 	bic.w	r2, r2, #2
 800463e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	2164      	movs	r1, #100	@ 0x64
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f000 f8f7 	bl	8004838 <SPI_EndRxTxTransaction>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004690:	6978      	ldr	r0, [r7, #20]
 8004692:	f7ff ffab 	bl	80045ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004696:	e002      	b.n	800469e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f7ff ff95 	bl	80045c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff91 	bl	80045da <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0203 	bic.w	r2, r2, #3
 80046dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff7a 	bl	80045ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff ff66 	bl	80045ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004738:	f7fd fda0 	bl	800227c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4413      	add	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004748:	f7fd fd98 	bl	800227c <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800474e:	4b39      	ldr	r3, [pc, #228]	@ (8004834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	015b      	lsls	r3, r3, #5
 8004754:	0d1b      	lsrs	r3, r3, #20
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	fb02 f303 	mul.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475e:	e054      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004766:	d050      	beq.n	800480a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004768:	f7fd fd88 	bl	800227c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	429a      	cmp	r2, r3
 8004776:	d902      	bls.n	800477e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d13d      	bne.n	80047fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800478c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004796:	d111      	bne.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a0:	d004      	beq.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047aa:	d107      	bne.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c4:	d10f      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e017      	b.n	800482a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3b01      	subs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	429a      	cmp	r2, r3
 8004826:	d19b      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c

08004838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2201      	movs	r2, #1
 800484c:	2102      	movs	r1, #2
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff ff6a 	bl	8004728 <SPI_WaitFlagStateUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e013      	b.n	8004892 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	@ 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff57 	bl	8004728 <SPI_WaitFlagStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e000      	b.n	8004892 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e03a      	b.n	800492a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_TIM_Base_Start_IT+0x98>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00e      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x58>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048de:	d009      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x58>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a14      	ldr	r2, [pc, #80]	@ (8004938 <HAL_TIM_Base_Start_IT+0x9c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x58>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a13      	ldr	r2, [pc, #76]	@ (800493c <HAL_TIM_Base_Start_IT+0xa0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d111      	bne.n	8004918 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b06      	cmp	r3, #6
 8004904:	d010      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	e007      	b.n	8004928 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800

08004940 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e041      	b.n	80049d6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd fa7a 	bl	8001e60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 f9a8 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01b      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0202 	mvn.w	r2, #2
 8004a12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f937 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004a2e:	e005      	b.n	8004a3c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f92a 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f939 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01b      	beq.n	8004a8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f06f 0204 	mvn.w	r2, #4
 8004a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f911 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004a7a:	e005      	b.n	8004a88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f904 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f913 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01b      	beq.n	8004ada <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0208 	mvn.w	r2, #8
 8004aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8eb 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004ac6:	e005      	b.n	8004ad4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8de 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8ed 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0210 	mvn.w	r2, #16
 8004af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2208      	movs	r2, #8
 8004afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8c5 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004b12:	e005      	b.n	8004b20 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8b8 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8c7 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0201 	mvn.w	r2, #1
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f897 	bl	8004c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00c      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fb61 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00c      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f897 	bl	8004cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f06f 0220 	mvn.w	r2, #32
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fb34 	bl	800521e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e048      	b.n	8004c70 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d839      	bhi.n	8004c60 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c61 	.word	0x08004c61
 8004bfc:	08004c61 	.word	0x08004c61
 8004c00:	08004c61 	.word	0x08004c61
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c45 	.word	0x08004c45
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c61 	.word	0x08004c61
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c53 	.word	0x08004c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f8be 	bl	8004db0 <TIM_OC1_SetConfig>
      break;
 8004c34:	e017      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f91d 	bl	8004e7c <TIM_OC2_SetConfig>
      break;
 8004c42:	e010      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f980 	bl	8004f50 <TIM_OC3_SetConfig>
      break;
 8004c50:	e009      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f9e3 	bl	8005024 <TIM_OC4_SetConfig>
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
	...

08004cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8004da4 <TIM_Base_SetConfig+0xd0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <TIM_Base_SetConfig+0x30>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf2:	d007      	beq.n	8004d04 <TIM_Base_SetConfig+0x30>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <TIM_Base_SetConfig+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0x30>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <TIM_Base_SetConfig+0xd8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <TIM_Base_SetConfig+0xd0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0x62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0x62>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <TIM_Base_SetConfig+0xd4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0x62>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <TIM_Base_SetConfig+0xd8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004da4 <TIM_Base_SetConfig+0xd0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800

08004db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f023 0201 	bic.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0302 	bic.w	r3, r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	@ (8004e78 <TIM_OC1_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10c      	bne.n	8004e26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0308 	bic.w	r3, r3, #8
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a13      	ldr	r2, [pc, #76]	@ (8004e78 <TIM_OC1_SetConfig+0xc8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00

08004e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f023 0210 	bic.w	r2, r3, #16
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0320 	bic.w	r3, r3, #32
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <TIM_OC2_SetConfig+0xd0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10d      	bne.n	8004ef8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a14      	ldr	r2, [pc, #80]	@ (8004f4c <TIM_OC2_SetConfig+0xd0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d113      	bne.n	8004f28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00

08004f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8005020 <TIM_OC3_SetConfig+0xd0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <TIM_OC3_SetConfig+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d113      	bne.n	8004ffa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00

08005024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800506e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0f      	ldr	r2, [pc, #60]	@ (80050bc <TIM_OC4_SetConfig+0x98>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d109      	bne.n	8005098 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800508a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00

080050c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e046      	b.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00e      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005124:	d009      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a12      	ldr	r2, [pc, #72]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10c      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4313      	orrs	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800

0800517c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e03d      	b.n	8005214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e042      	b.n	80052da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fc fe1f 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2224      	movs	r2, #36	@ 0x24
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005284:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f972 	bl	8005570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800529a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08a      	sub	sp, #40	@ 0x28
 80052e6:	af02      	add	r7, sp, #8
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d175      	bne.n	80053ee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_UART_Transmit+0x2c>
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e06e      	b.n	80053f0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2221      	movs	r2, #33	@ 0x21
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005320:	f7fc ffac 	bl	800227c <HAL_GetTick>
 8005324:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800533a:	d108      	bne.n	800534e <HAL_UART_Transmit+0x6c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	e003      	b.n	8005356 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005356:	e02e      	b.n	80053b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	2180      	movs	r1, #128	@ 0x80
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f848 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e03a      	b.n	80053f0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	3302      	adds	r3, #2
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	e007      	b.n	80053a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1cb      	bne.n	8005358 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2140      	movs	r1, #64	@ 0x40
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f814 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e006      	b.n	80053f0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	e03b      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005410:	d037      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fc ff33 	bl	800227c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <UART_WaitOnFlagUntilTimeout+0x30>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e03a      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d023      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	d020      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b40      	cmp	r3, #64	@ 0x40
 8005444:	d01d      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d116      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f81d 	bl	80054aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2208      	movs	r2, #8
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e00f      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d0b4      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b095      	sub	sp, #84	@ 0x54
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800550c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	2b01      	cmp	r3, #1
 8005520:	d119      	bne.n	8005556 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	60bb      	str	r3, [r7, #8]
   return(result);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f023 0310 	bic.w	r3, r3, #16
 8005538:	647b      	str	r3, [r7, #68]	@ 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005542:	61ba      	str	r2, [r7, #24]
 8005544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	613b      	str	r3, [r7, #16]
   return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005564:	bf00      	nop
 8005566:	3754      	adds	r7, #84	@ 0x54
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
	...

08005570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055aa:	f023 030c 	bic.w	r3, r3, #12
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <UART_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7fe fbae 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	e002      	b.n	80055e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fb96 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80055e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	4a22      	ldr	r2, [pc, #136]	@ (8005688 <UART_SetConfig+0x118>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	0119      	lsls	r1, r3, #4
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009a      	lsls	r2, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	fbb2 f2f3 	udiv	r2, r2, r3
 800561c:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <UART_SetConfig+0x118>)
 800561e:	fba3 0302 	umull	r0, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2064      	movs	r0, #100	@ 0x64
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	3332      	adds	r3, #50	@ 0x32
 8005630:	4a15      	ldr	r2, [pc, #84]	@ (8005688 <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800563c:	4419      	add	r1, r3
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009a      	lsls	r2, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	fbb2 f2f3 	udiv	r2, r2, r3
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <UART_SetConfig+0x118>)
 8005656:	fba3 0302 	umull	r0, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2064      	movs	r0, #100	@ 0x64
 800565e:	fb00 f303 	mul.w	r3, r0, r3
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	3332      	adds	r3, #50	@ 0x32
 8005668:	4a07      	ldr	r2, [pc, #28]	@ (8005688 <UART_SetConfig+0x118>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	440a      	add	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40013800 	.word	0x40013800
 8005688:	51eb851f 	.word	0x51eb851f

0800568c <__cvt>:
 800568c:	2b00      	cmp	r3, #0
 800568e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005692:	461d      	mov	r5, r3
 8005694:	bfbb      	ittet	lt
 8005696:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800569a:	461d      	movlt	r5, r3
 800569c:	2300      	movge	r3, #0
 800569e:	232d      	movlt	r3, #45	@ 0x2d
 80056a0:	b088      	sub	sp, #32
 80056a2:	4614      	mov	r4, r2
 80056a4:	bfb8      	it	lt
 80056a6:	4614      	movlt	r4, r2
 80056a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80056ac:	7013      	strb	r3, [r2, #0]
 80056ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80056b4:	f023 0820 	bic.w	r8, r3, #32
 80056b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056bc:	d005      	beq.n	80056ca <__cvt+0x3e>
 80056be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056c2:	d100      	bne.n	80056c6 <__cvt+0x3a>
 80056c4:	3601      	adds	r6, #1
 80056c6:	2302      	movs	r3, #2
 80056c8:	e000      	b.n	80056cc <__cvt+0x40>
 80056ca:	2303      	movs	r3, #3
 80056cc:	aa07      	add	r2, sp, #28
 80056ce:	9204      	str	r2, [sp, #16]
 80056d0:	aa06      	add	r2, sp, #24
 80056d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056d6:	e9cd 3600 	strd	r3, r6, [sp]
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f000 fe6f 	bl	80063c0 <_dtoa_r>
 80056e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056e6:	4607      	mov	r7, r0
 80056e8:	d119      	bne.n	800571e <__cvt+0x92>
 80056ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80056ec:	07db      	lsls	r3, r3, #31
 80056ee:	d50e      	bpl.n	800570e <__cvt+0x82>
 80056f0:	eb00 0906 	add.w	r9, r0, r6
 80056f4:	2200      	movs	r2, #0
 80056f6:	2300      	movs	r3, #0
 80056f8:	4620      	mov	r0, r4
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7fb f954 	bl	80009a8 <__aeabi_dcmpeq>
 8005700:	b108      	cbz	r0, 8005706 <__cvt+0x7a>
 8005702:	f8cd 901c 	str.w	r9, [sp, #28]
 8005706:	2230      	movs	r2, #48	@ 0x30
 8005708:	9b07      	ldr	r3, [sp, #28]
 800570a:	454b      	cmp	r3, r9
 800570c:	d31e      	bcc.n	800574c <__cvt+0xc0>
 800570e:	4638      	mov	r0, r7
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005714:	1bdb      	subs	r3, r3, r7
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	b008      	add	sp, #32
 800571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005722:	eb00 0906 	add.w	r9, r0, r6
 8005726:	d1e5      	bne.n	80056f4 <__cvt+0x68>
 8005728:	7803      	ldrb	r3, [r0, #0]
 800572a:	2b30      	cmp	r3, #48	@ 0x30
 800572c:	d10a      	bne.n	8005744 <__cvt+0xb8>
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fb f937 	bl	80009a8 <__aeabi_dcmpeq>
 800573a:	b918      	cbnz	r0, 8005744 <__cvt+0xb8>
 800573c:	f1c6 0601 	rsb	r6, r6, #1
 8005740:	f8ca 6000 	str.w	r6, [sl]
 8005744:	f8da 3000 	ldr.w	r3, [sl]
 8005748:	4499      	add	r9, r3
 800574a:	e7d3      	b.n	80056f4 <__cvt+0x68>
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	9107      	str	r1, [sp, #28]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e7d9      	b.n	8005708 <__cvt+0x7c>

08005754 <__exponent>:
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	2900      	cmp	r1, #0
 8005758:	bfb6      	itet	lt
 800575a:	232d      	movlt	r3, #45	@ 0x2d
 800575c:	232b      	movge	r3, #43	@ 0x2b
 800575e:	4249      	neglt	r1, r1
 8005760:	2909      	cmp	r1, #9
 8005762:	7002      	strb	r2, [r0, #0]
 8005764:	7043      	strb	r3, [r0, #1]
 8005766:	dd29      	ble.n	80057bc <__exponent+0x68>
 8005768:	f10d 0307 	add.w	r3, sp, #7
 800576c:	461d      	mov	r5, r3
 800576e:	270a      	movs	r7, #10
 8005770:	fbb1 f6f7 	udiv	r6, r1, r7
 8005774:	461a      	mov	r2, r3
 8005776:	fb07 1416 	mls	r4, r7, r6, r1
 800577a:	3430      	adds	r4, #48	@ 0x30
 800577c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005780:	460c      	mov	r4, r1
 8005782:	2c63      	cmp	r4, #99	@ 0x63
 8005784:	4631      	mov	r1, r6
 8005786:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800578a:	dcf1      	bgt.n	8005770 <__exponent+0x1c>
 800578c:	3130      	adds	r1, #48	@ 0x30
 800578e:	1e94      	subs	r4, r2, #2
 8005790:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005794:	4623      	mov	r3, r4
 8005796:	1c41      	adds	r1, r0, #1
 8005798:	42ab      	cmp	r3, r5
 800579a:	d30a      	bcc.n	80057b2 <__exponent+0x5e>
 800579c:	f10d 0309 	add.w	r3, sp, #9
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	42ac      	cmp	r4, r5
 80057a4:	bf88      	it	hi
 80057a6:	2300      	movhi	r3, #0
 80057a8:	3302      	adds	r3, #2
 80057aa:	4403      	add	r3, r0
 80057ac:	1a18      	subs	r0, r3, r0
 80057ae:	b003      	add	sp, #12
 80057b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057ba:	e7ed      	b.n	8005798 <__exponent+0x44>
 80057bc:	2330      	movs	r3, #48	@ 0x30
 80057be:	3130      	adds	r1, #48	@ 0x30
 80057c0:	7083      	strb	r3, [r0, #2]
 80057c2:	70c1      	strb	r1, [r0, #3]
 80057c4:	1d03      	adds	r3, r0, #4
 80057c6:	e7f1      	b.n	80057ac <__exponent+0x58>

080057c8 <_printf_float>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	b091      	sub	sp, #68	@ 0x44
 80057ce:	460c      	mov	r4, r1
 80057d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80057d4:	4616      	mov	r6, r2
 80057d6:	461f      	mov	r7, r3
 80057d8:	4605      	mov	r5, r0
 80057da:	f000 fce1 	bl	80061a0 <_localeconv_r>
 80057de:	6803      	ldr	r3, [r0, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	9308      	str	r3, [sp, #32]
 80057e4:	f7fa fcb4 	bl	8000150 <strlen>
 80057e8:	2300      	movs	r3, #0
 80057ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80057ec:	f8d8 3000 	ldr.w	r3, [r8]
 80057f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80057f2:	3307      	adds	r3, #7
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	f103 0208 	add.w	r2, r3, #8
 80057fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005800:	f8d4 b000 	ldr.w	fp, [r4]
 8005804:	f8c8 2000 	str.w	r2, [r8]
 8005808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800580c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005812:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800581a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800581e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005822:	4b9c      	ldr	r3, [pc, #624]	@ (8005a94 <_printf_float+0x2cc>)
 8005824:	f7fb f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8005828:	bb70      	cbnz	r0, 8005888 <_printf_float+0xc0>
 800582a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800582e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005832:	4b98      	ldr	r3, [pc, #608]	@ (8005a94 <_printf_float+0x2cc>)
 8005834:	f7fb f8cc 	bl	80009d0 <__aeabi_dcmple>
 8005838:	bb30      	cbnz	r0, 8005888 <_printf_float+0xc0>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	4640      	mov	r0, r8
 8005840:	4649      	mov	r1, r9
 8005842:	f7fb f8bb 	bl	80009bc <__aeabi_dcmplt>
 8005846:	b110      	cbz	r0, 800584e <_printf_float+0x86>
 8005848:	232d      	movs	r3, #45	@ 0x2d
 800584a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800584e:	4a92      	ldr	r2, [pc, #584]	@ (8005a98 <_printf_float+0x2d0>)
 8005850:	4b92      	ldr	r3, [pc, #584]	@ (8005a9c <_printf_float+0x2d4>)
 8005852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005856:	bf8c      	ite	hi
 8005858:	4690      	movhi	r8, r2
 800585a:	4698      	movls	r8, r3
 800585c:	2303      	movs	r3, #3
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f02b 0304 	bic.w	r3, fp, #4
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	4633      	mov	r3, r6
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	9700      	str	r7, [sp, #0]
 8005872:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005874:	f000 f9d4 	bl	8005c20 <_printf_common>
 8005878:	3001      	adds	r0, #1
 800587a:	f040 8090 	bne.w	800599e <_printf_float+0x1d6>
 800587e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005882:	b011      	add	sp, #68	@ 0x44
 8005884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	4640      	mov	r0, r8
 800588e:	4649      	mov	r1, r9
 8005890:	f7fb f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8005894:	b148      	cbz	r0, 80058aa <_printf_float+0xe2>
 8005896:	464b      	mov	r3, r9
 8005898:	2b00      	cmp	r3, #0
 800589a:	bfb8      	it	lt
 800589c:	232d      	movlt	r3, #45	@ 0x2d
 800589e:	4a80      	ldr	r2, [pc, #512]	@ (8005aa0 <_printf_float+0x2d8>)
 80058a0:	bfb8      	it	lt
 80058a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058a6:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa4 <_printf_float+0x2dc>)
 80058a8:	e7d3      	b.n	8005852 <_printf_float+0x8a>
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	d13f      	bne.n	8005934 <_printf_float+0x16c>
 80058b4:	2306      	movs	r3, #6
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	9206      	str	r2, [sp, #24]
 80058c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80058c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80058c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80058ca:	9203      	str	r2, [sp, #12]
 80058cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80058d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	4642      	mov	r2, r8
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4628      	mov	r0, r5
 80058dc:	464b      	mov	r3, r9
 80058de:	910a      	str	r1, [sp, #40]	@ 0x28
 80058e0:	f7ff fed4 	bl	800568c <__cvt>
 80058e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058e6:	4680      	mov	r8, r0
 80058e8:	2947      	cmp	r1, #71	@ 0x47
 80058ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80058ec:	d128      	bne.n	8005940 <_printf_float+0x178>
 80058ee:	1cc8      	adds	r0, r1, #3
 80058f0:	db02      	blt.n	80058f8 <_printf_float+0x130>
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	4299      	cmp	r1, r3
 80058f6:	dd40      	ble.n	800597a <_printf_float+0x1b2>
 80058f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80058fc:	fa5f fa8a 	uxtb.w	sl, sl
 8005900:	4652      	mov	r2, sl
 8005902:	3901      	subs	r1, #1
 8005904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005908:	910d      	str	r1, [sp, #52]	@ 0x34
 800590a:	f7ff ff23 	bl	8005754 <__exponent>
 800590e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005910:	4681      	mov	r9, r0
 8005912:	1813      	adds	r3, r2, r0
 8005914:	2a01      	cmp	r2, #1
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	dc02      	bgt.n	8005920 <_printf_float+0x158>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	07d2      	lsls	r2, r2, #31
 800591e:	d501      	bpl.n	8005924 <_printf_float+0x15c>
 8005920:	3301      	adds	r3, #1
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005928:	2b00      	cmp	r3, #0
 800592a:	d09e      	beq.n	800586a <_printf_float+0xa2>
 800592c:	232d      	movs	r3, #45	@ 0x2d
 800592e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005932:	e79a      	b.n	800586a <_printf_float+0xa2>
 8005934:	2947      	cmp	r1, #71	@ 0x47
 8005936:	d1bf      	bne.n	80058b8 <_printf_float+0xf0>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1bd      	bne.n	80058b8 <_printf_float+0xf0>
 800593c:	2301      	movs	r3, #1
 800593e:	e7ba      	b.n	80058b6 <_printf_float+0xee>
 8005940:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005944:	d9dc      	bls.n	8005900 <_printf_float+0x138>
 8005946:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800594a:	d118      	bne.n	800597e <_printf_float+0x1b6>
 800594c:	2900      	cmp	r1, #0
 800594e:	6863      	ldr	r3, [r4, #4]
 8005950:	dd0b      	ble.n	800596a <_printf_float+0x1a2>
 8005952:	6121      	str	r1, [r4, #16]
 8005954:	b913      	cbnz	r3, 800595c <_printf_float+0x194>
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	07d0      	lsls	r0, r2, #31
 800595a:	d502      	bpl.n	8005962 <_printf_float+0x19a>
 800595c:	3301      	adds	r3, #1
 800595e:	440b      	add	r3, r1
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	f04f 0900 	mov.w	r9, #0
 8005966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005968:	e7dc      	b.n	8005924 <_printf_float+0x15c>
 800596a:	b913      	cbnz	r3, 8005972 <_printf_float+0x1aa>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	07d2      	lsls	r2, r2, #31
 8005970:	d501      	bpl.n	8005976 <_printf_float+0x1ae>
 8005972:	3302      	adds	r3, #2
 8005974:	e7f4      	b.n	8005960 <_printf_float+0x198>
 8005976:	2301      	movs	r3, #1
 8005978:	e7f2      	b.n	8005960 <_printf_float+0x198>
 800597a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800597e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005980:	4299      	cmp	r1, r3
 8005982:	db05      	blt.n	8005990 <_printf_float+0x1c8>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	6121      	str	r1, [r4, #16]
 8005988:	07d8      	lsls	r0, r3, #31
 800598a:	d5ea      	bpl.n	8005962 <_printf_float+0x19a>
 800598c:	1c4b      	adds	r3, r1, #1
 800598e:	e7e7      	b.n	8005960 <_printf_float+0x198>
 8005990:	2900      	cmp	r1, #0
 8005992:	bfcc      	ite	gt
 8005994:	2201      	movgt	r2, #1
 8005996:	f1c1 0202 	rsble	r2, r1, #2
 800599a:	4413      	add	r3, r2
 800599c:	e7e0      	b.n	8005960 <_printf_float+0x198>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	055a      	lsls	r2, r3, #21
 80059a2:	d407      	bmi.n	80059b4 <_printf_float+0x1ec>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	4642      	mov	r2, r8
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	d12b      	bne.n	8005a0a <_printf_float+0x242>
 80059b2:	e764      	b.n	800587e <_printf_float+0xb6>
 80059b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059b8:	f240 80dc 	bls.w	8005b74 <_printf_float+0x3ac>
 80059bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f7fa fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d033      	beq.n	8005a34 <_printf_float+0x26c>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	4a35      	ldr	r2, [pc, #212]	@ (8005aa8 <_printf_float+0x2e0>)
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f af51 	beq.w	800587e <_printf_float+0xb6>
 80059dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80059e0:	4543      	cmp	r3, r8
 80059e2:	db02      	blt.n	80059ea <_printf_float+0x222>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	07d8      	lsls	r0, r3, #31
 80059e8:	d50f      	bpl.n	8005a0a <_printf_float+0x242>
 80059ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	f43f af42 	beq.w	800587e <_printf_float+0xb6>
 80059fa:	f04f 0900 	mov.w	r9, #0
 80059fe:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005a02:	f104 0a1a 	add.w	sl, r4, #26
 8005a06:	45c8      	cmp	r8, r9
 8005a08:	dc09      	bgt.n	8005a1e <_printf_float+0x256>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	079b      	lsls	r3, r3, #30
 8005a0e:	f100 8102 	bmi.w	8005c16 <_printf_float+0x44e>
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a16:	4298      	cmp	r0, r3
 8005a18:	bfb8      	it	lt
 8005a1a:	4618      	movlt	r0, r3
 8005a1c:	e731      	b.n	8005882 <_printf_float+0xba>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4652      	mov	r2, sl
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f af28 	beq.w	800587e <_printf_float+0xb6>
 8005a2e:	f109 0901 	add.w	r9, r9, #1
 8005a32:	e7e8      	b.n	8005a06 <_printf_float+0x23e>
 8005a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	dc38      	bgt.n	8005aac <_printf_float+0x2e4>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4628      	mov	r0, r5
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <_printf_float+0x2e0>)
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f af1a 	beq.w	800587e <_printf_float+0xb6>
 8005a4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005a4e:	ea59 0303 	orrs.w	r3, r9, r3
 8005a52:	d102      	bne.n	8005a5a <_printf_float+0x292>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	07d9      	lsls	r1, r3, #31
 8005a58:	d5d7      	bpl.n	8005a0a <_printf_float+0x242>
 8005a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b8      	blx	r7
 8005a64:	3001      	adds	r0, #1
 8005a66:	f43f af0a 	beq.w	800587e <_printf_float+0xb6>
 8005a6a:	f04f 0a00 	mov.w	sl, #0
 8005a6e:	f104 0b1a 	add.w	fp, r4, #26
 8005a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a74:	425b      	negs	r3, r3
 8005a76:	4553      	cmp	r3, sl
 8005a78:	dc01      	bgt.n	8005a7e <_printf_float+0x2b6>
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	e793      	b.n	80059a6 <_printf_float+0x1de>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	465a      	mov	r2, fp
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f aef8 	beq.w	800587e <_printf_float+0xb6>
 8005a8e:	f10a 0a01 	add.w	sl, sl, #1
 8005a92:	e7ee      	b.n	8005a72 <_printf_float+0x2aa>
 8005a94:	7fefffff 	.word	0x7fefffff
 8005a98:	080097ba 	.word	0x080097ba
 8005a9c:	080097b6 	.word	0x080097b6
 8005aa0:	080097c2 	.word	0x080097c2
 8005aa4:	080097be 	.word	0x080097be
 8005aa8:	080097c6 	.word	0x080097c6
 8005aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ab2:	4553      	cmp	r3, sl
 8005ab4:	bfa8      	it	ge
 8005ab6:	4653      	movge	r3, sl
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	4699      	mov	r9, r3
 8005abc:	dc36      	bgt.n	8005b2c <_printf_float+0x364>
 8005abe:	f04f 0b00 	mov.w	fp, #0
 8005ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ac6:	f104 021a 	add.w	r2, r4, #26
 8005aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ace:	eba3 0309 	sub.w	r3, r3, r9
 8005ad2:	455b      	cmp	r3, fp
 8005ad4:	dc31      	bgt.n	8005b3a <_printf_float+0x372>
 8005ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ad8:	459a      	cmp	sl, r3
 8005ada:	dc3a      	bgt.n	8005b52 <_printf_float+0x38a>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	07da      	lsls	r2, r3, #31
 8005ae0:	d437      	bmi.n	8005b52 <_printf_float+0x38a>
 8005ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8005ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aea:	ebaa 0303 	sub.w	r3, sl, r3
 8005aee:	4599      	cmp	r9, r3
 8005af0:	bfa8      	it	ge
 8005af2:	4699      	movge	r9, r3
 8005af4:	f1b9 0f00 	cmp.w	r9, #0
 8005af8:	dc33      	bgt.n	8005b62 <_printf_float+0x39a>
 8005afa:	f04f 0800 	mov.w	r8, #0
 8005afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b02:	f104 0b1a 	add.w	fp, r4, #26
 8005b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b08:	ebaa 0303 	sub.w	r3, sl, r3
 8005b0c:	eba3 0309 	sub.w	r3, r3, r9
 8005b10:	4543      	cmp	r3, r8
 8005b12:	f77f af7a 	ble.w	8005a0a <_printf_float+0x242>
 8005b16:	2301      	movs	r3, #1
 8005b18:	465a      	mov	r2, fp
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	f43f aeac 	beq.w	800587e <_printf_float+0xb6>
 8005b26:	f108 0801 	add.w	r8, r8, #1
 8005b2a:	e7ec      	b.n	8005b06 <_printf_float+0x33e>
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1c2      	bne.n	8005abe <_printf_float+0x2f6>
 8005b38:	e6a1      	b.n	800587e <_printf_float+0xb6>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae9a 	beq.w	800587e <_printf_float+0xb6>
 8005b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b4c:	f10b 0b01 	add.w	fp, fp, #1
 8005b50:	e7bb      	b.n	8005aca <_printf_float+0x302>
 8005b52:	4631      	mov	r1, r6
 8005b54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1c0      	bne.n	8005ae2 <_printf_float+0x31a>
 8005b60:	e68d      	b.n	800587e <_printf_float+0xb6>
 8005b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b64:	464b      	mov	r3, r9
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	4442      	add	r2, r8
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d1c3      	bne.n	8005afa <_printf_float+0x332>
 8005b72:	e684      	b.n	800587e <_printf_float+0xb6>
 8005b74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b78:	f1ba 0f01 	cmp.w	sl, #1
 8005b7c:	dc01      	bgt.n	8005b82 <_printf_float+0x3ba>
 8005b7e:	07db      	lsls	r3, r3, #31
 8005b80:	d536      	bpl.n	8005bf0 <_printf_float+0x428>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4642      	mov	r2, r8
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f43f ae76 	beq.w	800587e <_printf_float+0xb6>
 8005b92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae6e 	beq.w	800587e <_printf_float+0xb6>
 8005ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005bae:	f7fa fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8005bb2:	b9c0      	cbnz	r0, 8005be6 <_printf_float+0x41e>
 8005bb4:	4653      	mov	r3, sl
 8005bb6:	f108 0201 	add.w	r2, r8, #1
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d10c      	bne.n	8005bde <_printf_float+0x416>
 8005bc4:	e65b      	b.n	800587e <_printf_float+0xb6>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	465a      	mov	r2, fp
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae54 	beq.w	800587e <_printf_float+0xb6>
 8005bd6:	f108 0801 	add.w	r8, r8, #1
 8005bda:	45d0      	cmp	r8, sl
 8005bdc:	dbf3      	blt.n	8005bc6 <_printf_float+0x3fe>
 8005bde:	464b      	mov	r3, r9
 8005be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005be4:	e6e0      	b.n	80059a8 <_printf_float+0x1e0>
 8005be6:	f04f 0800 	mov.w	r8, #0
 8005bea:	f104 0b1a 	add.w	fp, r4, #26
 8005bee:	e7f4      	b.n	8005bda <_printf_float+0x412>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	e7e1      	b.n	8005bba <_printf_float+0x3f2>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	464a      	mov	r2, r9
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	f43f ae3c 	beq.w	800587e <_printf_float+0xb6>
 8005c06:	f108 0801 	add.w	r8, r8, #1
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c0e:	1a5b      	subs	r3, r3, r1
 8005c10:	4543      	cmp	r3, r8
 8005c12:	dcf0      	bgt.n	8005bf6 <_printf_float+0x42e>
 8005c14:	e6fd      	b.n	8005a12 <_printf_float+0x24a>
 8005c16:	f04f 0800 	mov.w	r8, #0
 8005c1a:	f104 0919 	add.w	r9, r4, #25
 8005c1e:	e7f4      	b.n	8005c0a <_printf_float+0x442>

08005c20 <_printf_common>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	4616      	mov	r6, r2
 8005c26:	4698      	mov	r8, r3
 8005c28:	688a      	ldr	r2, [r1, #8]
 8005c2a:	690b      	ldr	r3, [r1, #16]
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bfb8      	it	lt
 8005c32:	4613      	movlt	r3, r2
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c40:	b10a      	cbz	r2, 8005c46 <_printf_common+0x26>
 8005c42:	3301      	adds	r3, #1
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	0699      	lsls	r1, r3, #26
 8005c4a:	bf42      	ittt	mi
 8005c4c:	6833      	ldrmi	r3, [r6, #0]
 8005c4e:	3302      	addmi	r3, #2
 8005c50:	6033      	strmi	r3, [r6, #0]
 8005c52:	6825      	ldr	r5, [r4, #0]
 8005c54:	f015 0506 	ands.w	r5, r5, #6
 8005c58:	d106      	bne.n	8005c68 <_printf_common+0x48>
 8005c5a:	f104 0a19 	add.w	sl, r4, #25
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	6832      	ldr	r2, [r6, #0]
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dc2b      	bgt.n	8005cc0 <_printf_common+0xa0>
 8005c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	3b00      	subs	r3, #0
 8005c70:	bf18      	it	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	0692      	lsls	r2, r2, #26
 8005c76:	d430      	bmi.n	8005cda <_printf_common+0xba>
 8005c78:	4641      	mov	r1, r8
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c80:	47c8      	blx	r9
 8005c82:	3001      	adds	r0, #1
 8005c84:	d023      	beq.n	8005cce <_printf_common+0xae>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	f003 0306 	and.w	r3, r3, #6
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	bf14      	ite	ne
 8005c92:	2500      	movne	r5, #0
 8005c94:	6833      	ldreq	r3, [r6, #0]
 8005c96:	f04f 0600 	mov.w	r6, #0
 8005c9a:	bf08      	it	eq
 8005c9c:	68e5      	ldreq	r5, [r4, #12]
 8005c9e:	f104 041a 	add.w	r4, r4, #26
 8005ca2:	bf08      	it	eq
 8005ca4:	1aed      	subeq	r5, r5, r3
 8005ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005caa:	bf08      	it	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bfc4      	itt	gt
 8005cb4:	1a9b      	subgt	r3, r3, r2
 8005cb6:	18ed      	addgt	r5, r5, r3
 8005cb8:	42b5      	cmp	r5, r6
 8005cba:	d11a      	bne.n	8005cf2 <_printf_common+0xd2>
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e008      	b.n	8005cd2 <_printf_common+0xb2>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d103      	bne.n	8005cd6 <_printf_common+0xb6>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	3501      	adds	r5, #1
 8005cd8:	e7c1      	b.n	8005c5e <_printf_common+0x3e>
 8005cda:	2030      	movs	r0, #48	@ 0x30
 8005cdc:	18e1      	adds	r1, r4, r3
 8005cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ce8:	4422      	add	r2, r4
 8005cea:	3302      	adds	r3, #2
 8005cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cf0:	e7c2      	b.n	8005c78 <_printf_common+0x58>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c8      	blx	r9
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0e6      	beq.n	8005cce <_printf_common+0xae>
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7d9      	b.n	8005cb8 <_printf_common+0x98>

08005d04 <_printf_i>:
 8005d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	7e0f      	ldrb	r7, [r1, #24]
 8005d0a:	4691      	mov	r9, r2
 8005d0c:	2f78      	cmp	r7, #120	@ 0x78
 8005d0e:	4680      	mov	r8, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	469a      	mov	sl, r3
 8005d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d1a:	d807      	bhi.n	8005d2c <_printf_i+0x28>
 8005d1c:	2f62      	cmp	r7, #98	@ 0x62
 8005d1e:	d80a      	bhi.n	8005d36 <_printf_i+0x32>
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	f000 80d1 	beq.w	8005ec8 <_printf_i+0x1c4>
 8005d26:	2f58      	cmp	r7, #88	@ 0x58
 8005d28:	f000 80b8 	beq.w	8005e9c <_printf_i+0x198>
 8005d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d34:	e03a      	b.n	8005dac <_printf_i+0xa8>
 8005d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d3a:	2b15      	cmp	r3, #21
 8005d3c:	d8f6      	bhi.n	8005d2c <_printf_i+0x28>
 8005d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d44 <_printf_i+0x40>)
 8005d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005db1 	.word	0x08005db1
 8005d4c:	08005d2d 	.word	0x08005d2d
 8005d50:	08005d2d 	.word	0x08005d2d
 8005d54:	08005d2d 	.word	0x08005d2d
 8005d58:	08005d2d 	.word	0x08005d2d
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005d2d 	.word	0x08005d2d
 8005d64:	08005d2d 	.word	0x08005d2d
 8005d68:	08005d2d 	.word	0x08005d2d
 8005d6c:	08005d2d 	.word	0x08005d2d
 8005d70:	08005eaf 	.word	0x08005eaf
 8005d74:	08005ddb 	.word	0x08005ddb
 8005d78:	08005e69 	.word	0x08005e69
 8005d7c:	08005d2d 	.word	0x08005d2d
 8005d80:	08005d2d 	.word	0x08005d2d
 8005d84:	08005ed1 	.word	0x08005ed1
 8005d88:	08005d2d 	.word	0x08005d2d
 8005d8c:	08005ddb 	.word	0x08005ddb
 8005d90:	08005d2d 	.word	0x08005d2d
 8005d94:	08005d2d 	.word	0x08005d2d
 8005d98:	08005e71 	.word	0x08005e71
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6032      	str	r2, [r6, #0]
 8005da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dac:	2301      	movs	r3, #1
 8005dae:	e09c      	b.n	8005eea <_printf_i+0x1e6>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6031      	str	r1, [r6, #0]
 8005db8:	0606      	lsls	r6, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xbc>
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	e003      	b.n	8005dc8 <_printf_i+0xc4>
 8005dc0:	0645      	lsls	r5, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xb8>
 8005dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xd0>
 8005dcc:	232d      	movs	r3, #45	@ 0x2d
 8005dce:	426d      	negs	r5, r5
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	230a      	movs	r3, #10
 8005dd6:	4858      	ldr	r0, [pc, #352]	@ (8005f38 <_printf_i+0x234>)
 8005dd8:	e011      	b.n	8005dfe <_printf_i+0xfa>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	0608      	lsls	r0, r1, #24
 8005de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005de4:	d402      	bmi.n	8005dec <_printf_i+0xe8>
 8005de6:	0649      	lsls	r1, r1, #25
 8005de8:	bf48      	it	mi
 8005dea:	b2ad      	uxthmi	r5, r5
 8005dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	bf14      	ite	ne
 8005df2:	230a      	movne	r3, #10
 8005df4:	2308      	moveq	r3, #8
 8005df6:	4850      	ldr	r0, [pc, #320]	@ (8005f38 <_printf_i+0x234>)
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dfe:	6866      	ldr	r6, [r4, #4]
 8005e00:	2e00      	cmp	r6, #0
 8005e02:	60a6      	str	r6, [r4, #8]
 8005e04:	db05      	blt.n	8005e12 <_printf_i+0x10e>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	432e      	orrs	r6, r5
 8005e0a:	f021 0104 	bic.w	r1, r1, #4
 8005e0e:	6021      	str	r1, [r4, #0]
 8005e10:	d04b      	beq.n	8005eaa <_printf_i+0x1a6>
 8005e12:	4616      	mov	r6, r2
 8005e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e18:	fb03 5711 	mls	r7, r3, r1, r5
 8005e1c:	5dc7      	ldrb	r7, [r0, r7]
 8005e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e22:	462f      	mov	r7, r5
 8005e24:	42bb      	cmp	r3, r7
 8005e26:	460d      	mov	r5, r1
 8005e28:	d9f4      	bls.n	8005e14 <_printf_i+0x110>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d10b      	bne.n	8005e46 <_printf_i+0x142>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	07df      	lsls	r7, r3, #31
 8005e32:	d508      	bpl.n	8005e46 <_printf_i+0x142>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	6861      	ldr	r1, [r4, #4]
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	bfde      	ittt	le
 8005e3c:	2330      	movle	r3, #48	@ 0x30
 8005e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e42:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e46:	1b92      	subs	r2, r2, r6
 8005e48:	6122      	str	r2, [r4, #16]
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f8cd a000 	str.w	sl, [sp]
 8005e54:	aa03      	add	r2, sp, #12
 8005e56:	f7ff fee3 	bl	8005c20 <_printf_common>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d14a      	bne.n	8005ef4 <_printf_i+0x1f0>
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e62:	b004      	add	sp, #16
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	2778      	movs	r7, #120	@ 0x78
 8005e72:	4832      	ldr	r0, [pc, #200]	@ (8005f3c <_printf_i+0x238>)
 8005e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	6831      	ldr	r1, [r6, #0]
 8005e7c:	061f      	lsls	r7, r3, #24
 8005e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e82:	d402      	bmi.n	8005e8a <_printf_i+0x186>
 8005e84:	065f      	lsls	r7, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2ad      	uxthmi	r5, r5
 8005e8a:	6031      	str	r1, [r6, #0]
 8005e8c:	07d9      	lsls	r1, r3, #31
 8005e8e:	bf44      	itt	mi
 8005e90:	f043 0320 	orrmi.w	r3, r3, #32
 8005e94:	6023      	strmi	r3, [r4, #0]
 8005e96:	b11d      	cbz	r5, 8005ea0 <_printf_i+0x19c>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	e7ad      	b.n	8005df8 <_printf_i+0xf4>
 8005e9c:	4826      	ldr	r0, [pc, #152]	@ (8005f38 <_printf_i+0x234>)
 8005e9e:	e7e9      	b.n	8005e74 <_printf_i+0x170>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f023 0320 	bic.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e7f6      	b.n	8005e98 <_printf_i+0x194>
 8005eaa:	4616      	mov	r6, r2
 8005eac:	e7bd      	b.n	8005e2a <_printf_i+0x126>
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	6825      	ldr	r5, [r4, #0]
 8005eb2:	1d18      	adds	r0, r3, #4
 8005eb4:	6961      	ldr	r1, [r4, #20]
 8005eb6:	6030      	str	r0, [r6, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	d501      	bpl.n	8005ec2 <_printf_i+0x1be>
 8005ebe:	6019      	str	r1, [r3, #0]
 8005ec0:	e002      	b.n	8005ec8 <_printf_i+0x1c4>
 8005ec2:	0668      	lsls	r0, r5, #25
 8005ec4:	d5fb      	bpl.n	8005ebe <_printf_i+0x1ba>
 8005ec6:	8019      	strh	r1, [r3, #0]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4616      	mov	r6, r2
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	e7bc      	b.n	8005e4a <_printf_i+0x146>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	6862      	ldr	r2, [r4, #4]
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 f9d6 	bl	800628e <memchr>
 8005ee2:	b108      	cbz	r0, 8005ee8 <_printf_i+0x1e4>
 8005ee4:	1b80      	subs	r0, r0, r6
 8005ee6:	6060      	str	r0, [r4, #4]
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	2300      	movs	r3, #0
 8005eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef2:	e7aa      	b.n	8005e4a <_printf_i+0x146>
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	47d0      	blx	sl
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0ad      	beq.n	8005e5e <_printf_i+0x15a>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	d413      	bmi.n	8005f30 <_printf_i+0x22c>
 8005f08:	68e0      	ldr	r0, [r4, #12]
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	4298      	cmp	r0, r3
 8005f0e:	bfb8      	it	lt
 8005f10:	4618      	movlt	r0, r3
 8005f12:	e7a6      	b.n	8005e62 <_printf_i+0x15e>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4632      	mov	r2, r6
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d09d      	beq.n	8005e5e <_printf_i+0x15a>
 8005f22:	3501      	adds	r5, #1
 8005f24:	68e3      	ldr	r3, [r4, #12]
 8005f26:	9903      	ldr	r1, [sp, #12]
 8005f28:	1a5b      	subs	r3, r3, r1
 8005f2a:	42ab      	cmp	r3, r5
 8005f2c:	dcf2      	bgt.n	8005f14 <_printf_i+0x210>
 8005f2e:	e7eb      	b.n	8005f08 <_printf_i+0x204>
 8005f30:	2500      	movs	r5, #0
 8005f32:	f104 0619 	add.w	r6, r4, #25
 8005f36:	e7f5      	b.n	8005f24 <_printf_i+0x220>
 8005f38:	080097c8 	.word	0x080097c8
 8005f3c:	080097d9 	.word	0x080097d9

08005f40 <std>:
 8005f40:	2300      	movs	r3, #0
 8005f42:	b510      	push	{r4, lr}
 8005f44:	4604      	mov	r4, r0
 8005f46:	e9c0 3300 	strd	r3, r3, [r0]
 8005f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f4e:	6083      	str	r3, [r0, #8]
 8005f50:	8181      	strh	r1, [r0, #12]
 8005f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f54:	81c2      	strh	r2, [r0, #14]
 8005f56:	6183      	str	r3, [r0, #24]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	305c      	adds	r0, #92	@ 0x5c
 8005f5e:	f000 f916 	bl	800618e <memset>
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <std+0x58>)
 8005f64:	6224      	str	r4, [r4, #32]
 8005f66:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f68:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <std+0x5c>)
 8005f6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <std+0x60>)
 8005f6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <std+0x64>)
 8005f72:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <std+0x68>)
 8005f76:	429c      	cmp	r4, r3
 8005f78:	d006      	beq.n	8005f88 <std+0x48>
 8005f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f7e:	4294      	cmp	r4, r2
 8005f80:	d002      	beq.n	8005f88 <std+0x48>
 8005f82:	33d0      	adds	r3, #208	@ 0xd0
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d105      	bne.n	8005f94 <std+0x54>
 8005f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f90:	f000 b97a 	b.w	8006288 <__retarget_lock_init_recursive>
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop
 8005f98:	08006109 	.word	0x08006109
 8005f9c:	0800612b 	.word	0x0800612b
 8005fa0:	08006163 	.word	0x08006163
 8005fa4:	08006187 	.word	0x08006187
 8005fa8:	20000d0c 	.word	0x20000d0c

08005fac <stdio_exit_handler>:
 8005fac:	4a02      	ldr	r2, [pc, #8]	@ (8005fb8 <stdio_exit_handler+0xc>)
 8005fae:	4903      	ldr	r1, [pc, #12]	@ (8005fbc <stdio_exit_handler+0x10>)
 8005fb0:	4803      	ldr	r0, [pc, #12]	@ (8005fc0 <stdio_exit_handler+0x14>)
 8005fb2:	f000 b869 	b.w	8006088 <_fwalk_sglue>
 8005fb6:	bf00      	nop
 8005fb8:	20000018 	.word	0x20000018
 8005fbc:	08007c09 	.word	0x08007c09
 8005fc0:	20000028 	.word	0x20000028

08005fc4 <cleanup_stdio>:
 8005fc4:	6841      	ldr	r1, [r0, #4]
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <cleanup_stdio+0x34>)
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	4604      	mov	r4, r0
 8005fce:	d001      	beq.n	8005fd4 <cleanup_stdio+0x10>
 8005fd0:	f001 fe1a 	bl	8007c08 <_fflush_r>
 8005fd4:	68a1      	ldr	r1, [r4, #8]
 8005fd6:	4b09      	ldr	r3, [pc, #36]	@ (8005ffc <cleanup_stdio+0x38>)
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d002      	beq.n	8005fe2 <cleanup_stdio+0x1e>
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f001 fe13 	bl	8007c08 <_fflush_r>
 8005fe2:	68e1      	ldr	r1, [r4, #12]
 8005fe4:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <cleanup_stdio+0x3c>)
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d004      	beq.n	8005ff4 <cleanup_stdio+0x30>
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff0:	f001 be0a 	b.w	8007c08 <_fflush_r>
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000d0c 	.word	0x20000d0c
 8005ffc:	20000d74 	.word	0x20000d74
 8006000:	20000ddc 	.word	0x20000ddc

08006004 <global_stdio_init.part.0>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <global_stdio_init.part.0+0x30>)
 8006008:	4c0b      	ldr	r4, [pc, #44]	@ (8006038 <global_stdio_init.part.0+0x34>)
 800600a:	4a0c      	ldr	r2, [pc, #48]	@ (800603c <global_stdio_init.part.0+0x38>)
 800600c:	4620      	mov	r0, r4
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	2104      	movs	r1, #4
 8006012:	2200      	movs	r2, #0
 8006014:	f7ff ff94 	bl	8005f40 <std>
 8006018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800601c:	2201      	movs	r2, #1
 800601e:	2109      	movs	r1, #9
 8006020:	f7ff ff8e 	bl	8005f40 <std>
 8006024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006028:	2202      	movs	r2, #2
 800602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602e:	2112      	movs	r1, #18
 8006030:	f7ff bf86 	b.w	8005f40 <std>
 8006034:	20000e44 	.word	0x20000e44
 8006038:	20000d0c 	.word	0x20000d0c
 800603c:	08005fad 	.word	0x08005fad

08006040 <__sfp_lock_acquire>:
 8006040:	4801      	ldr	r0, [pc, #4]	@ (8006048 <__sfp_lock_acquire+0x8>)
 8006042:	f000 b922 	b.w	800628a <__retarget_lock_acquire_recursive>
 8006046:	bf00      	nop
 8006048:	20000e4d 	.word	0x20000e4d

0800604c <__sfp_lock_release>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__sfp_lock_release+0x8>)
 800604e:	f000 b91d 	b.w	800628c <__retarget_lock_release_recursive>
 8006052:	bf00      	nop
 8006054:	20000e4d 	.word	0x20000e4d

08006058 <__sinit>:
 8006058:	b510      	push	{r4, lr}
 800605a:	4604      	mov	r4, r0
 800605c:	f7ff fff0 	bl	8006040 <__sfp_lock_acquire>
 8006060:	6a23      	ldr	r3, [r4, #32]
 8006062:	b11b      	cbz	r3, 800606c <__sinit+0x14>
 8006064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006068:	f7ff bff0 	b.w	800604c <__sfp_lock_release>
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <__sinit+0x28>)
 800606e:	6223      	str	r3, [r4, #32]
 8006070:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <__sinit+0x2c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f5      	bne.n	8006064 <__sinit+0xc>
 8006078:	f7ff ffc4 	bl	8006004 <global_stdio_init.part.0>
 800607c:	e7f2      	b.n	8006064 <__sinit+0xc>
 800607e:	bf00      	nop
 8006080:	08005fc5 	.word	0x08005fc5
 8006084:	20000e44 	.word	0x20000e44

08006088 <_fwalk_sglue>:
 8006088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800608c:	4607      	mov	r7, r0
 800608e:	4688      	mov	r8, r1
 8006090:	4614      	mov	r4, r2
 8006092:	2600      	movs	r6, #0
 8006094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006098:	f1b9 0901 	subs.w	r9, r9, #1
 800609c:	d505      	bpl.n	80060aa <_fwalk_sglue+0x22>
 800609e:	6824      	ldr	r4, [r4, #0]
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	d1f7      	bne.n	8006094 <_fwalk_sglue+0xc>
 80060a4:	4630      	mov	r0, r6
 80060a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d907      	bls.n	80060c0 <_fwalk_sglue+0x38>
 80060b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060b4:	3301      	adds	r3, #1
 80060b6:	d003      	beq.n	80060c0 <_fwalk_sglue+0x38>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	4306      	orrs	r6, r0
 80060c0:	3568      	adds	r5, #104	@ 0x68
 80060c2:	e7e9      	b.n	8006098 <_fwalk_sglue+0x10>

080060c4 <siprintf>:
 80060c4:	b40e      	push	{r1, r2, r3}
 80060c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060ca:	b510      	push	{r4, lr}
 80060cc:	2400      	movs	r4, #0
 80060ce:	b09d      	sub	sp, #116	@ 0x74
 80060d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80060d2:	9002      	str	r0, [sp, #8]
 80060d4:	9006      	str	r0, [sp, #24]
 80060d6:	9107      	str	r1, [sp, #28]
 80060d8:	9104      	str	r1, [sp, #16]
 80060da:	4809      	ldr	r0, [pc, #36]	@ (8006100 <siprintf+0x3c>)
 80060dc:	4909      	ldr	r1, [pc, #36]	@ (8006104 <siprintf+0x40>)
 80060de:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e2:	9105      	str	r1, [sp, #20]
 80060e4:	6800      	ldr	r0, [r0, #0]
 80060e6:	a902      	add	r1, sp, #8
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80060ec:	f001 fc10 	bl	8007910 <_svfiprintf_r>
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	701c      	strb	r4, [r3, #0]
 80060f4:	b01d      	add	sp, #116	@ 0x74
 80060f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fa:	b003      	add	sp, #12
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000024 	.word	0x20000024
 8006104:	ffff0208 	.word	0xffff0208

08006108 <__sread>:
 8006108:	b510      	push	{r4, lr}
 800610a:	460c      	mov	r4, r1
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	f000 f86c 	bl	80061ec <_read_r>
 8006114:	2800      	cmp	r0, #0
 8006116:	bfab      	itete	ge
 8006118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800611a:	89a3      	ldrhlt	r3, [r4, #12]
 800611c:	181b      	addge	r3, r3, r0
 800611e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006122:	bfac      	ite	ge
 8006124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006126:	81a3      	strhlt	r3, [r4, #12]
 8006128:	bd10      	pop	{r4, pc}

0800612a <__swrite>:
 800612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	461f      	mov	r7, r3
 8006130:	898b      	ldrh	r3, [r1, #12]
 8006132:	4605      	mov	r5, r0
 8006134:	05db      	lsls	r3, r3, #23
 8006136:	460c      	mov	r4, r1
 8006138:	4616      	mov	r6, r2
 800613a:	d505      	bpl.n	8006148 <__swrite+0x1e>
 800613c:	2302      	movs	r3, #2
 800613e:	2200      	movs	r2, #0
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	f000 f840 	bl	80061c8 <_lseek_r>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	4632      	mov	r2, r6
 800614c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	4628      	mov	r0, r5
 8006154:	463b      	mov	r3, r7
 8006156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800615a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	f000 b857 	b.w	8006210 <_write_r>

08006162 <__sseek>:
 8006162:	b510      	push	{r4, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616a:	f000 f82d 	bl	80061c8 <_lseek_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	bf15      	itete	ne
 8006174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800617a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800617e:	81a3      	strheq	r3, [r4, #12]
 8006180:	bf18      	it	ne
 8006182:	81a3      	strhne	r3, [r4, #12]
 8006184:	bd10      	pop	{r4, pc}

08006186 <__sclose>:
 8006186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618a:	f000 b80d 	b.w	80061a8 <_close_r>

0800618e <memset>:
 800618e:	4603      	mov	r3, r0
 8006190:	4402      	add	r2, r0
 8006192:	4293      	cmp	r3, r2
 8006194:	d100      	bne.n	8006198 <memset+0xa>
 8006196:	4770      	bx	lr
 8006198:	f803 1b01 	strb.w	r1, [r3], #1
 800619c:	e7f9      	b.n	8006192 <memset+0x4>
	...

080061a0 <_localeconv_r>:
 80061a0:	4800      	ldr	r0, [pc, #0]	@ (80061a4 <_localeconv_r+0x4>)
 80061a2:	4770      	bx	lr
 80061a4:	20000164 	.word	0x20000164

080061a8 <_close_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	2300      	movs	r3, #0
 80061ac:	4d05      	ldr	r5, [pc, #20]	@ (80061c4 <_close_r+0x1c>)
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	f7fb ff77 	bl	80020a6 <_close>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_close_r+0x1a>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_close_r+0x1a>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	20000e48 	.word	0x20000e48

080061c8 <_lseek_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	2200      	movs	r2, #0
 80061d2:	4d05      	ldr	r5, [pc, #20]	@ (80061e8 <_lseek_r+0x20>)
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fb ff89 	bl	80020ee <_lseek>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_lseek_r+0x1e>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_lseek_r+0x1e>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000e48 	.word	0x20000e48

080061ec <_read_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	2200      	movs	r2, #0
 80061f6:	4d05      	ldr	r5, [pc, #20]	@ (800620c <_read_r+0x20>)
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f7fb ff1a 	bl	8002034 <_read>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_read_r+0x1e>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_read_r+0x1e>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	20000e48 	.word	0x20000e48

08006210 <_write_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	2200      	movs	r2, #0
 800621a:	4d05      	ldr	r5, [pc, #20]	@ (8006230 <_write_r+0x20>)
 800621c:	602a      	str	r2, [r5, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	f7fb ff25 	bl	800206e <_write>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_write_r+0x1e>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_write_r+0x1e>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	20000e48 	.word	0x20000e48

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	@ (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000024 	.word	0x20000024

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	2600      	movs	r6, #0
 8006244:	4d0c      	ldr	r5, [pc, #48]	@ (8006278 <__libc_init_array+0x38>)
 8006246:	4c0d      	ldr	r4, [pc, #52]	@ (800627c <__libc_init_array+0x3c>)
 8006248:	1b64      	subs	r4, r4, r5
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	42a6      	cmp	r6, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	f002 f876 	bl	8008340 <_init>
 8006254:	2600      	movs	r6, #0
 8006256:	4d0a      	ldr	r5, [pc, #40]	@ (8006280 <__libc_init_array+0x40>)
 8006258:	4c0a      	ldr	r4, [pc, #40]	@ (8006284 <__libc_init_array+0x44>)
 800625a:	1b64      	subs	r4, r4, r5
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	42a6      	cmp	r6, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f855 3b04 	ldr.w	r3, [r5], #4
 8006268:	4798      	blx	r3
 800626a:	3601      	adds	r6, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006272:	4798      	blx	r3
 8006274:	3601      	adds	r6, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	08009b34 	.word	0x08009b34
 800627c:	08009b34 	.word	0x08009b34
 8006280:	08009b34 	.word	0x08009b34
 8006284:	08009b38 	.word	0x08009b38

08006288 <__retarget_lock_init_recursive>:
 8006288:	4770      	bx	lr

0800628a <__retarget_lock_acquire_recursive>:
 800628a:	4770      	bx	lr

0800628c <__retarget_lock_release_recursive>:
 800628c:	4770      	bx	lr

0800628e <memchr>:
 800628e:	4603      	mov	r3, r0
 8006290:	b510      	push	{r4, lr}
 8006292:	b2c9      	uxtb	r1, r1
 8006294:	4402      	add	r2, r0
 8006296:	4293      	cmp	r3, r2
 8006298:	4618      	mov	r0, r3
 800629a:	d101      	bne.n	80062a0 <memchr+0x12>
 800629c:	2000      	movs	r0, #0
 800629e:	e003      	b.n	80062a8 <memchr+0x1a>
 80062a0:	7804      	ldrb	r4, [r0, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	428c      	cmp	r4, r1
 80062a6:	d1f6      	bne.n	8006296 <memchr+0x8>
 80062a8:	bd10      	pop	{r4, pc}

080062aa <quorem>:
 80062aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ae:	6903      	ldr	r3, [r0, #16]
 80062b0:	690c      	ldr	r4, [r1, #16]
 80062b2:	4607      	mov	r7, r0
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	db7e      	blt.n	80063b6 <quorem+0x10c>
 80062b8:	3c01      	subs	r4, #1
 80062ba:	00a3      	lsls	r3, r4, #2
 80062bc:	f100 0514 	add.w	r5, r0, #20
 80062c0:	f101 0814 	add.w	r8, r1, #20
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062d4:	3301      	adds	r3, #1
 80062d6:	429a      	cmp	r2, r3
 80062d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062e0:	d32e      	bcc.n	8006340 <quorem+0x96>
 80062e2:	f04f 0a00 	mov.w	sl, #0
 80062e6:	46c4      	mov	ip, r8
 80062e8:	46ae      	mov	lr, r5
 80062ea:	46d3      	mov	fp, sl
 80062ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062f0:	b298      	uxth	r0, r3
 80062f2:	fb06 a000 	mla	r0, r6, r0, sl
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	0c02      	lsrs	r2, r0, #16
 80062fa:	fb06 2303 	mla	r3, r6, r3, r2
 80062fe:	f8de 2000 	ldr.w	r2, [lr]
 8006302:	b280      	uxth	r0, r0
 8006304:	b292      	uxth	r2, r2
 8006306:	1a12      	subs	r2, r2, r0
 8006308:	445a      	add	r2, fp
 800630a:	f8de 0000 	ldr.w	r0, [lr]
 800630e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006312:	b29b      	uxth	r3, r3
 8006314:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006318:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800631c:	b292      	uxth	r2, r2
 800631e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006322:	45e1      	cmp	r9, ip
 8006324:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006328:	f84e 2b04 	str.w	r2, [lr], #4
 800632c:	d2de      	bcs.n	80062ec <quorem+0x42>
 800632e:	9b00      	ldr	r3, [sp, #0]
 8006330:	58eb      	ldr	r3, [r5, r3]
 8006332:	b92b      	cbnz	r3, 8006340 <quorem+0x96>
 8006334:	9b01      	ldr	r3, [sp, #4]
 8006336:	3b04      	subs	r3, #4
 8006338:	429d      	cmp	r5, r3
 800633a:	461a      	mov	r2, r3
 800633c:	d32f      	bcc.n	800639e <quorem+0xf4>
 800633e:	613c      	str	r4, [r7, #16]
 8006340:	4638      	mov	r0, r7
 8006342:	f001 f981 	bl	8007648 <__mcmp>
 8006346:	2800      	cmp	r0, #0
 8006348:	db25      	blt.n	8006396 <quorem+0xec>
 800634a:	4629      	mov	r1, r5
 800634c:	2000      	movs	r0, #0
 800634e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006352:	f8d1 c000 	ldr.w	ip, [r1]
 8006356:	fa1f fe82 	uxth.w	lr, r2
 800635a:	fa1f f38c 	uxth.w	r3, ip
 800635e:	eba3 030e 	sub.w	r3, r3, lr
 8006362:	4403      	add	r3, r0
 8006364:	0c12      	lsrs	r2, r2, #16
 8006366:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800636a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006374:	45c1      	cmp	r9, r8
 8006376:	ea4f 4022 	mov.w	r0, r2, asr #16
 800637a:	f841 3b04 	str.w	r3, [r1], #4
 800637e:	d2e6      	bcs.n	800634e <quorem+0xa4>
 8006380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006384:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006388:	b922      	cbnz	r2, 8006394 <quorem+0xea>
 800638a:	3b04      	subs	r3, #4
 800638c:	429d      	cmp	r5, r3
 800638e:	461a      	mov	r2, r3
 8006390:	d30b      	bcc.n	80063aa <quorem+0x100>
 8006392:	613c      	str	r4, [r7, #16]
 8006394:	3601      	adds	r6, #1
 8006396:	4630      	mov	r0, r6
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1cb      	bne.n	800633e <quorem+0x94>
 80063a6:	3c01      	subs	r4, #1
 80063a8:	e7c6      	b.n	8006338 <quorem+0x8e>
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1ef      	bne.n	8006392 <quorem+0xe8>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7ea      	b.n	800638c <quorem+0xe2>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e7ee      	b.n	8006398 <quorem+0xee>
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	69c7      	ldr	r7, [r0, #28]
 80063ca:	b097      	sub	sp, #92	@ 0x5c
 80063cc:	4681      	mov	r9, r0
 80063ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80063d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80063d4:	b97f      	cbnz	r7, 80063f6 <_dtoa_r+0x36>
 80063d6:	2010      	movs	r0, #16
 80063d8:	f000 fe0e 	bl	8006ff8 <malloc>
 80063dc:	4602      	mov	r2, r0
 80063de:	f8c9 001c 	str.w	r0, [r9, #28]
 80063e2:	b920      	cbnz	r0, 80063ee <_dtoa_r+0x2e>
 80063e4:	21ef      	movs	r1, #239	@ 0xef
 80063e6:	4bac      	ldr	r3, [pc, #688]	@ (8006698 <_dtoa_r+0x2d8>)
 80063e8:	48ac      	ldr	r0, [pc, #688]	@ (800669c <_dtoa_r+0x2dc>)
 80063ea:	f001 fc6d 	bl	8007cc8 <__assert_func>
 80063ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063f2:	6007      	str	r7, [r0, #0]
 80063f4:	60c7      	str	r7, [r0, #12]
 80063f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063fa:	6819      	ldr	r1, [r3, #0]
 80063fc:	b159      	cbz	r1, 8006416 <_dtoa_r+0x56>
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	2301      	movs	r3, #1
 8006402:	4093      	lsls	r3, r2
 8006404:	604a      	str	r2, [r1, #4]
 8006406:	608b      	str	r3, [r1, #8]
 8006408:	4648      	mov	r0, r9
 800640a:	f000 feeb 	bl	80071e4 <_Bfree>
 800640e:	2200      	movs	r2, #0
 8006410:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	1e2b      	subs	r3, r5, #0
 8006418:	bfaf      	iteee	ge
 800641a:	2300      	movge	r3, #0
 800641c:	2201      	movlt	r2, #1
 800641e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006422:	9307      	strlt	r3, [sp, #28]
 8006424:	bfa8      	it	ge
 8006426:	6033      	strge	r3, [r6, #0]
 8006428:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800642c:	4b9c      	ldr	r3, [pc, #624]	@ (80066a0 <_dtoa_r+0x2e0>)
 800642e:	bfb8      	it	lt
 8006430:	6032      	strlt	r2, [r6, #0]
 8006432:	ea33 0308 	bics.w	r3, r3, r8
 8006436:	d112      	bne.n	800645e <_dtoa_r+0x9e>
 8006438:	f242 730f 	movw	r3, #9999	@ 0x270f
 800643c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006444:	4323      	orrs	r3, r4
 8006446:	f000 855e 	beq.w	8006f06 <_dtoa_r+0xb46>
 800644a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800644c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80066a4 <_dtoa_r+0x2e4>
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8560 	beq.w	8006f16 <_dtoa_r+0xb56>
 8006456:	f10a 0303 	add.w	r3, sl, #3
 800645a:	f000 bd5a 	b.w	8006f12 <_dtoa_r+0xb52>
 800645e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006462:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	f7fa fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006472:	4607      	mov	r7, r0
 8006474:	b158      	cbz	r0, 800648e <_dtoa_r+0xce>
 8006476:	2301      	movs	r3, #1
 8006478:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800647e:	b113      	cbz	r3, 8006486 <_dtoa_r+0xc6>
 8006480:	4b89      	ldr	r3, [pc, #548]	@ (80066a8 <_dtoa_r+0x2e8>)
 8006482:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80066ac <_dtoa_r+0x2ec>
 800648a:	f000 bd44 	b.w	8006f16 <_dtoa_r+0xb56>
 800648e:	ab14      	add	r3, sp, #80	@ 0x50
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	ab15      	add	r3, sp, #84	@ 0x54
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4648      	mov	r0, r9
 8006498:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800649c:	f001 f984 	bl	80077a8 <__d2b>
 80064a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80064a4:	9003      	str	r0, [sp, #12]
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d078      	beq.n	800659c <_dtoa_r+0x1dc>
 80064aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80064c2:	4619      	mov	r1, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	4b7a      	ldr	r3, [pc, #488]	@ (80066b0 <_dtoa_r+0x2f0>)
 80064c8:	f7f9 fe4e 	bl	8000168 <__aeabi_dsub>
 80064cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006680 <_dtoa_r+0x2c0>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7fa f801 	bl	80004d8 <__aeabi_dmul>
 80064d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006688 <_dtoa_r+0x2c8>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7f9 fe46 	bl	800016c <__adddf3>
 80064e0:	4604      	mov	r4, r0
 80064e2:	4630      	mov	r0, r6
 80064e4:	460d      	mov	r5, r1
 80064e6:	f7f9 ff8d 	bl	8000404 <__aeabi_i2d>
 80064ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006690 <_dtoa_r+0x2d0>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7f9 fff2 	bl	80004d8 <__aeabi_dmul>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7f9 fe36 	bl	800016c <__adddf3>
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	f7fa fa98 	bl	8000a38 <__aeabi_d2iz>
 8006508:	2200      	movs	r2, #0
 800650a:	4607      	mov	r7, r0
 800650c:	2300      	movs	r3, #0
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7fa fa53 	bl	80009bc <__aeabi_dcmplt>
 8006516:	b140      	cbz	r0, 800652a <_dtoa_r+0x16a>
 8006518:	4638      	mov	r0, r7
 800651a:	f7f9 ff73 	bl	8000404 <__aeabi_i2d>
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	f7fa fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8006526:	b900      	cbnz	r0, 800652a <_dtoa_r+0x16a>
 8006528:	3f01      	subs	r7, #1
 800652a:	2f16      	cmp	r7, #22
 800652c:	d854      	bhi.n	80065d8 <_dtoa_r+0x218>
 800652e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006532:	4b60      	ldr	r3, [pc, #384]	@ (80066b4 <_dtoa_r+0x2f4>)
 8006534:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7fa fa3e 	bl	80009bc <__aeabi_dcmplt>
 8006540:	2800      	cmp	r0, #0
 8006542:	d04b      	beq.n	80065dc <_dtoa_r+0x21c>
 8006544:	2300      	movs	r3, #0
 8006546:	3f01      	subs	r7, #1
 8006548:	930f      	str	r3, [sp, #60]	@ 0x3c
 800654a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	1e5a      	subs	r2, r3, #1
 8006550:	bf49      	itett	mi
 8006552:	f1c3 0301 	rsbmi	r3, r3, #1
 8006556:	2300      	movpl	r3, #0
 8006558:	9304      	strmi	r3, [sp, #16]
 800655a:	2300      	movmi	r3, #0
 800655c:	9209      	str	r2, [sp, #36]	@ 0x24
 800655e:	bf54      	ite	pl
 8006560:	9304      	strpl	r3, [sp, #16]
 8006562:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006564:	2f00      	cmp	r7, #0
 8006566:	db3b      	blt.n	80065e0 <_dtoa_r+0x220>
 8006568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656a:	970e      	str	r7, [sp, #56]	@ 0x38
 800656c:	443b      	add	r3, r7
 800656e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006570:	2300      	movs	r3, #0
 8006572:	930a      	str	r3, [sp, #40]	@ 0x28
 8006574:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006576:	2b09      	cmp	r3, #9
 8006578:	d865      	bhi.n	8006646 <_dtoa_r+0x286>
 800657a:	2b05      	cmp	r3, #5
 800657c:	bfc4      	itt	gt
 800657e:	3b04      	subgt	r3, #4
 8006580:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006584:	bfc8      	it	gt
 8006586:	2400      	movgt	r4, #0
 8006588:	f1a3 0302 	sub.w	r3, r3, #2
 800658c:	bfd8      	it	le
 800658e:	2401      	movle	r4, #1
 8006590:	2b03      	cmp	r3, #3
 8006592:	d864      	bhi.n	800665e <_dtoa_r+0x29e>
 8006594:	e8df f003 	tbb	[pc, r3]
 8006598:	2c385553 	.word	0x2c385553
 800659c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80065a0:	441e      	add	r6, r3
 80065a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	bfc1      	itttt	gt
 80065aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80065b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065ba:	bfd6      	itet	le
 80065bc:	f1c3 0320 	rsble	r3, r3, #32
 80065c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80065c4:	fa04 f003 	lslle.w	r0, r4, r3
 80065c8:	f7f9 ff0c 	bl	80003e4 <__aeabi_ui2d>
 80065cc:	2201      	movs	r2, #1
 80065ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065d2:	3e01      	subs	r6, #1
 80065d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80065d6:	e774      	b.n	80064c2 <_dtoa_r+0x102>
 80065d8:	2301      	movs	r3, #1
 80065da:	e7b5      	b.n	8006548 <_dtoa_r+0x188>
 80065dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80065de:	e7b4      	b.n	800654a <_dtoa_r+0x18a>
 80065e0:	9b04      	ldr	r3, [sp, #16]
 80065e2:	1bdb      	subs	r3, r3, r7
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	427b      	negs	r3, r7
 80065e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ea:	2300      	movs	r3, #0
 80065ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80065ee:	e7c1      	b.n	8006574 <_dtoa_r+0x1b4>
 80065f0:	2301      	movs	r3, #1
 80065f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f6:	eb07 0b03 	add.w	fp, r7, r3
 80065fa:	f10b 0301 	add.w	r3, fp, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	bfb8      	it	lt
 8006604:	2301      	movlt	r3, #1
 8006606:	e006      	b.n	8006616 <_dtoa_r+0x256>
 8006608:	2301      	movs	r3, #1
 800660a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800660c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd28      	ble.n	8006664 <_dtoa_r+0x2a4>
 8006612:	469b      	mov	fp, r3
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	2100      	movs	r1, #0
 8006618:	2204      	movs	r2, #4
 800661a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800661e:	f102 0514 	add.w	r5, r2, #20
 8006622:	429d      	cmp	r5, r3
 8006624:	d926      	bls.n	8006674 <_dtoa_r+0x2b4>
 8006626:	6041      	str	r1, [r0, #4]
 8006628:	4648      	mov	r0, r9
 800662a:	f000 fd9b 	bl	8007164 <_Balloc>
 800662e:	4682      	mov	sl, r0
 8006630:	2800      	cmp	r0, #0
 8006632:	d143      	bne.n	80066bc <_dtoa_r+0x2fc>
 8006634:	4602      	mov	r2, r0
 8006636:	f240 11af 	movw	r1, #431	@ 0x1af
 800663a:	4b1f      	ldr	r3, [pc, #124]	@ (80066b8 <_dtoa_r+0x2f8>)
 800663c:	e6d4      	b.n	80063e8 <_dtoa_r+0x28>
 800663e:	2300      	movs	r3, #0
 8006640:	e7e3      	b.n	800660a <_dtoa_r+0x24a>
 8006642:	2300      	movs	r3, #0
 8006644:	e7d5      	b.n	80065f2 <_dtoa_r+0x232>
 8006646:	2401      	movs	r4, #1
 8006648:	2300      	movs	r3, #0
 800664a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800664c:	9320      	str	r3, [sp, #128]	@ 0x80
 800664e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006652:	2200      	movs	r2, #0
 8006654:	2312      	movs	r3, #18
 8006656:	f8cd b020 	str.w	fp, [sp, #32]
 800665a:	9221      	str	r2, [sp, #132]	@ 0x84
 800665c:	e7db      	b.n	8006616 <_dtoa_r+0x256>
 800665e:	2301      	movs	r3, #1
 8006660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006662:	e7f4      	b.n	800664e <_dtoa_r+0x28e>
 8006664:	f04f 0b01 	mov.w	fp, #1
 8006668:	465b      	mov	r3, fp
 800666a:	f8cd b020 	str.w	fp, [sp, #32]
 800666e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006672:	e7d0      	b.n	8006616 <_dtoa_r+0x256>
 8006674:	3101      	adds	r1, #1
 8006676:	0052      	lsls	r2, r2, #1
 8006678:	e7d1      	b.n	800661e <_dtoa_r+0x25e>
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
 8006680:	636f4361 	.word	0x636f4361
 8006684:	3fd287a7 	.word	0x3fd287a7
 8006688:	8b60c8b3 	.word	0x8b60c8b3
 800668c:	3fc68a28 	.word	0x3fc68a28
 8006690:	509f79fb 	.word	0x509f79fb
 8006694:	3fd34413 	.word	0x3fd34413
 8006698:	080097f7 	.word	0x080097f7
 800669c:	0800980e 	.word	0x0800980e
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	080097f3 	.word	0x080097f3
 80066a8:	080097c7 	.word	0x080097c7
 80066ac:	080097c6 	.word	0x080097c6
 80066b0:	3ff80000 	.word	0x3ff80000
 80066b4:	08009960 	.word	0x08009960
 80066b8:	08009866 	.word	0x08009866
 80066bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	2b0e      	cmp	r3, #14
 80066c6:	f200 80a1 	bhi.w	800680c <_dtoa_r+0x44c>
 80066ca:	2c00      	cmp	r4, #0
 80066cc:	f000 809e 	beq.w	800680c <_dtoa_r+0x44c>
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	dd33      	ble.n	800673c <_dtoa_r+0x37c>
 80066d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006948 <_dtoa_r+0x588>)
 80066d6:	f007 020f 	and.w	r2, r7, #15
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	05f8      	lsls	r0, r7, #23
 80066e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80066e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066ec:	d516      	bpl.n	800671c <_dtoa_r+0x35c>
 80066ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f2:	4b96      	ldr	r3, [pc, #600]	@ (800694c <_dtoa_r+0x58c>)
 80066f4:	2603      	movs	r6, #3
 80066f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066fa:	f7fa f817 	bl	800072c <__aeabi_ddiv>
 80066fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006702:	f004 040f 	and.w	r4, r4, #15
 8006706:	4d91      	ldr	r5, [pc, #580]	@ (800694c <_dtoa_r+0x58c>)
 8006708:	b954      	cbnz	r4, 8006720 <_dtoa_r+0x360>
 800670a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	f7fa f80b 	bl	800072c <__aeabi_ddiv>
 8006716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800671a:	e028      	b.n	800676e <_dtoa_r+0x3ae>
 800671c:	2602      	movs	r6, #2
 800671e:	e7f2      	b.n	8006706 <_dtoa_r+0x346>
 8006720:	07e1      	lsls	r1, r4, #31
 8006722:	d508      	bpl.n	8006736 <_dtoa_r+0x376>
 8006724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006728:	e9d5 2300 	ldrd	r2, r3, [r5]
 800672c:	f7f9 fed4 	bl	80004d8 <__aeabi_dmul>
 8006730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006734:	3601      	adds	r6, #1
 8006736:	1064      	asrs	r4, r4, #1
 8006738:	3508      	adds	r5, #8
 800673a:	e7e5      	b.n	8006708 <_dtoa_r+0x348>
 800673c:	f000 80af 	beq.w	800689e <_dtoa_r+0x4de>
 8006740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006744:	427c      	negs	r4, r7
 8006746:	4b80      	ldr	r3, [pc, #512]	@ (8006948 <_dtoa_r+0x588>)
 8006748:	f004 020f 	and.w	r2, r4, #15
 800674c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fec0 	bl	80004d8 <__aeabi_dmul>
 8006758:	2602      	movs	r6, #2
 800675a:	2300      	movs	r3, #0
 800675c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006760:	4d7a      	ldr	r5, [pc, #488]	@ (800694c <_dtoa_r+0x58c>)
 8006762:	1124      	asrs	r4, r4, #4
 8006764:	2c00      	cmp	r4, #0
 8006766:	f040 808f 	bne.w	8006888 <_dtoa_r+0x4c8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d3      	bne.n	8006716 <_dtoa_r+0x356>
 800676e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8094 	beq.w	80068a2 <_dtoa_r+0x4e2>
 800677a:	2200      	movs	r2, #0
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	4b73      	ldr	r3, [pc, #460]	@ (8006950 <_dtoa_r+0x590>)
 8006782:	f7fa f91b 	bl	80009bc <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f000 808b 	beq.w	80068a2 <_dtoa_r+0x4e2>
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8087 	beq.w	80068a2 <_dtoa_r+0x4e2>
 8006794:	f1bb 0f00 	cmp.w	fp, #0
 8006798:	dd34      	ble.n	8006804 <_dtoa_r+0x444>
 800679a:	4620      	mov	r0, r4
 800679c:	2200      	movs	r2, #0
 800679e:	4629      	mov	r1, r5
 80067a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006954 <_dtoa_r+0x594>)
 80067a2:	f7f9 fe99 	bl	80004d8 <__aeabi_dmul>
 80067a6:	465c      	mov	r4, fp
 80067a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067ac:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80067b0:	3601      	adds	r6, #1
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7f9 fe26 	bl	8000404 <__aeabi_i2d>
 80067b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067bc:	f7f9 fe8c 	bl	80004d8 <__aeabi_dmul>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b65      	ldr	r3, [pc, #404]	@ (8006958 <_dtoa_r+0x598>)
 80067c4:	f7f9 fcd2 	bl	800016c <__adddf3>
 80067c8:	4605      	mov	r5, r0
 80067ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d16a      	bne.n	80068a8 <_dtoa_r+0x4e8>
 80067d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067d6:	2200      	movs	r2, #0
 80067d8:	4b60      	ldr	r3, [pc, #384]	@ (800695c <_dtoa_r+0x59c>)
 80067da:	f7f9 fcc5 	bl	8000168 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067e6:	462a      	mov	r2, r5
 80067e8:	4633      	mov	r3, r6
 80067ea:	f7fa f905 	bl	80009f8 <__aeabi_dcmpgt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f040 8298 	bne.w	8006d24 <_dtoa_r+0x964>
 80067f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067f8:	462a      	mov	r2, r5
 80067fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067fe:	f7fa f8dd 	bl	80009bc <__aeabi_dcmplt>
 8006802:	bb38      	cbnz	r0, 8006854 <_dtoa_r+0x494>
 8006804:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006808:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800680c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800680e:	2b00      	cmp	r3, #0
 8006810:	f2c0 8157 	blt.w	8006ac2 <_dtoa_r+0x702>
 8006814:	2f0e      	cmp	r7, #14
 8006816:	f300 8154 	bgt.w	8006ac2 <_dtoa_r+0x702>
 800681a:	4b4b      	ldr	r3, [pc, #300]	@ (8006948 <_dtoa_r+0x588>)
 800681c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006820:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006824:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006828:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800682a:	2b00      	cmp	r3, #0
 800682c:	f280 80e5 	bge.w	80069fa <_dtoa_r+0x63a>
 8006830:	9b08      	ldr	r3, [sp, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f300 80e1 	bgt.w	80069fa <_dtoa_r+0x63a>
 8006838:	d10c      	bne.n	8006854 <_dtoa_r+0x494>
 800683a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800683e:	2200      	movs	r2, #0
 8006840:	4b46      	ldr	r3, [pc, #280]	@ (800695c <_dtoa_r+0x59c>)
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800684a:	f7fa f8cb 	bl	80009e4 <__aeabi_dcmpge>
 800684e:	2800      	cmp	r0, #0
 8006850:	f000 8266 	beq.w	8006d20 <_dtoa_r+0x960>
 8006854:	2400      	movs	r4, #0
 8006856:	4625      	mov	r5, r4
 8006858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800685a:	4656      	mov	r6, sl
 800685c:	ea6f 0803 	mvn.w	r8, r3
 8006860:	2700      	movs	r7, #0
 8006862:	4621      	mov	r1, r4
 8006864:	4648      	mov	r0, r9
 8006866:	f000 fcbd 	bl	80071e4 <_Bfree>
 800686a:	2d00      	cmp	r5, #0
 800686c:	f000 80bd 	beq.w	80069ea <_dtoa_r+0x62a>
 8006870:	b12f      	cbz	r7, 800687e <_dtoa_r+0x4be>
 8006872:	42af      	cmp	r7, r5
 8006874:	d003      	beq.n	800687e <_dtoa_r+0x4be>
 8006876:	4639      	mov	r1, r7
 8006878:	4648      	mov	r0, r9
 800687a:	f000 fcb3 	bl	80071e4 <_Bfree>
 800687e:	4629      	mov	r1, r5
 8006880:	4648      	mov	r0, r9
 8006882:	f000 fcaf 	bl	80071e4 <_Bfree>
 8006886:	e0b0      	b.n	80069ea <_dtoa_r+0x62a>
 8006888:	07e2      	lsls	r2, r4, #31
 800688a:	d505      	bpl.n	8006898 <_dtoa_r+0x4d8>
 800688c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006890:	f7f9 fe22 	bl	80004d8 <__aeabi_dmul>
 8006894:	2301      	movs	r3, #1
 8006896:	3601      	adds	r6, #1
 8006898:	1064      	asrs	r4, r4, #1
 800689a:	3508      	adds	r5, #8
 800689c:	e762      	b.n	8006764 <_dtoa_r+0x3a4>
 800689e:	2602      	movs	r6, #2
 80068a0:	e765      	b.n	800676e <_dtoa_r+0x3ae>
 80068a2:	46b8      	mov	r8, r7
 80068a4:	9c08      	ldr	r4, [sp, #32]
 80068a6:	e784      	b.n	80067b2 <_dtoa_r+0x3f2>
 80068a8:	4b27      	ldr	r3, [pc, #156]	@ (8006948 <_dtoa_r+0x588>)
 80068aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068b4:	4454      	add	r4, sl
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d054      	beq.n	8006964 <_dtoa_r+0x5a4>
 80068ba:	2000      	movs	r0, #0
 80068bc:	4928      	ldr	r1, [pc, #160]	@ (8006960 <_dtoa_r+0x5a0>)
 80068be:	f7f9 ff35 	bl	800072c <__aeabi_ddiv>
 80068c2:	4633      	mov	r3, r6
 80068c4:	462a      	mov	r2, r5
 80068c6:	f7f9 fc4f 	bl	8000168 <__aeabi_dsub>
 80068ca:	4656      	mov	r6, sl
 80068cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d4:	f7fa f8b0 	bl	8000a38 <__aeabi_d2iz>
 80068d8:	4605      	mov	r5, r0
 80068da:	f7f9 fd93 	bl	8000404 <__aeabi_i2d>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e6:	f7f9 fc3f 	bl	8000168 <__aeabi_dsub>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	3530      	adds	r5, #48	@ 0x30
 80068f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068f8:	f806 5b01 	strb.w	r5, [r6], #1
 80068fc:	f7fa f85e 	bl	80009bc <__aeabi_dcmplt>
 8006900:	2800      	cmp	r0, #0
 8006902:	d172      	bne.n	80069ea <_dtoa_r+0x62a>
 8006904:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006908:	2000      	movs	r0, #0
 800690a:	4911      	ldr	r1, [pc, #68]	@ (8006950 <_dtoa_r+0x590>)
 800690c:	f7f9 fc2c 	bl	8000168 <__aeabi_dsub>
 8006910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006914:	f7fa f852 	bl	80009bc <__aeabi_dcmplt>
 8006918:	2800      	cmp	r0, #0
 800691a:	f040 80b4 	bne.w	8006a86 <_dtoa_r+0x6c6>
 800691e:	42a6      	cmp	r6, r4
 8006920:	f43f af70 	beq.w	8006804 <_dtoa_r+0x444>
 8006924:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006928:	2200      	movs	r2, #0
 800692a:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <_dtoa_r+0x594>)
 800692c:	f7f9 fdd4 	bl	80004d8 <__aeabi_dmul>
 8006930:	2200      	movs	r2, #0
 8006932:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693a:	4b06      	ldr	r3, [pc, #24]	@ (8006954 <_dtoa_r+0x594>)
 800693c:	f7f9 fdcc 	bl	80004d8 <__aeabi_dmul>
 8006940:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006944:	e7c4      	b.n	80068d0 <_dtoa_r+0x510>
 8006946:	bf00      	nop
 8006948:	08009960 	.word	0x08009960
 800694c:	08009938 	.word	0x08009938
 8006950:	3ff00000 	.word	0x3ff00000
 8006954:	40240000 	.word	0x40240000
 8006958:	401c0000 	.word	0x401c0000
 800695c:	40140000 	.word	0x40140000
 8006960:	3fe00000 	.word	0x3fe00000
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fdb6 	bl	80004d8 <__aeabi_dmul>
 800696c:	4656      	mov	r6, sl
 800696e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006972:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006978:	f7fa f85e 	bl	8000a38 <__aeabi_d2iz>
 800697c:	4605      	mov	r5, r0
 800697e:	f7f9 fd41 	bl	8000404 <__aeabi_i2d>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800698a:	f7f9 fbed 	bl	8000168 <__aeabi_dsub>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	3530      	adds	r5, #48	@ 0x30
 8006994:	f806 5b01 	strb.w	r5, [r6], #1
 8006998:	42a6      	cmp	r6, r4
 800699a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	d124      	bne.n	80069ee <_dtoa_r+0x62e>
 80069a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069a8:	4bae      	ldr	r3, [pc, #696]	@ (8006c64 <_dtoa_r+0x8a4>)
 80069aa:	f7f9 fbdf 	bl	800016c <__adddf3>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069b6:	f7fa f81f 	bl	80009f8 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d163      	bne.n	8006a86 <_dtoa_r+0x6c6>
 80069be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c2:	2000      	movs	r0, #0
 80069c4:	49a7      	ldr	r1, [pc, #668]	@ (8006c64 <_dtoa_r+0x8a4>)
 80069c6:	f7f9 fbcf 	bl	8000168 <__aeabi_dsub>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069d2:	f7f9 fff3 	bl	80009bc <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f af14 	beq.w	8006804 <_dtoa_r+0x444>
 80069dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80069de:	1e73      	subs	r3, r6, #1
 80069e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069e6:	2b30      	cmp	r3, #48	@ 0x30
 80069e8:	d0f8      	beq.n	80069dc <_dtoa_r+0x61c>
 80069ea:	4647      	mov	r7, r8
 80069ec:	e03b      	b.n	8006a66 <_dtoa_r+0x6a6>
 80069ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006c68 <_dtoa_r+0x8a8>)
 80069f0:	f7f9 fd72 	bl	80004d8 <__aeabi_dmul>
 80069f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069f8:	e7bc      	b.n	8006974 <_dtoa_r+0x5b4>
 80069fa:	4656      	mov	r6, sl
 80069fc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	f7f9 fe90 	bl	800072c <__aeabi_ddiv>
 8006a0c:	f7fa f814 	bl	8000a38 <__aeabi_d2iz>
 8006a10:	4680      	mov	r8, r0
 8006a12:	f7f9 fcf7 	bl	8000404 <__aeabi_i2d>
 8006a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1a:	f7f9 fd5d 	bl	80004d8 <__aeabi_dmul>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4620      	mov	r0, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7f9 fb9f 	bl	8000168 <__aeabi_dsub>
 8006a2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a2e:	9d08      	ldr	r5, [sp, #32]
 8006a30:	f806 4b01 	strb.w	r4, [r6], #1
 8006a34:	eba6 040a 	sub.w	r4, r6, sl
 8006a38:	42a5      	cmp	r5, r4
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	d133      	bne.n	8006aa8 <_dtoa_r+0x6e8>
 8006a40:	f7f9 fb94 	bl	800016c <__adddf3>
 8006a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	f7f9 ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 8006a50:	b9c0      	cbnz	r0, 8006a84 <_dtoa_r+0x6c4>
 8006a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7f9 ffa5 	bl	80009a8 <__aeabi_dcmpeq>
 8006a5e:	b110      	cbz	r0, 8006a66 <_dtoa_r+0x6a6>
 8006a60:	f018 0f01 	tst.w	r8, #1
 8006a64:	d10e      	bne.n	8006a84 <_dtoa_r+0x6c4>
 8006a66:	4648      	mov	r0, r9
 8006a68:	9903      	ldr	r1, [sp, #12]
 8006a6a:	f000 fbbb 	bl	80071e4 <_Bfree>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	7033      	strb	r3, [r6, #0]
 8006a72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a74:	3701      	adds	r7, #1
 8006a76:	601f      	str	r7, [r3, #0]
 8006a78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 824b 	beq.w	8006f16 <_dtoa_r+0xb56>
 8006a80:	601e      	str	r6, [r3, #0]
 8006a82:	e248      	b.n	8006f16 <_dtoa_r+0xb56>
 8006a84:	46b8      	mov	r8, r7
 8006a86:	4633      	mov	r3, r6
 8006a88:	461e      	mov	r6, r3
 8006a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8e:	2a39      	cmp	r2, #57	@ 0x39
 8006a90:	d106      	bne.n	8006aa0 <_dtoa_r+0x6e0>
 8006a92:	459a      	cmp	sl, r3
 8006a94:	d1f8      	bne.n	8006a88 <_dtoa_r+0x6c8>
 8006a96:	2230      	movs	r2, #48	@ 0x30
 8006a98:	f108 0801 	add.w	r8, r8, #1
 8006a9c:	f88a 2000 	strb.w	r2, [sl]
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	3201      	adds	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e7a0      	b.n	80069ea <_dtoa_r+0x62a>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8006c68 <_dtoa_r+0x8a8>)
 8006aac:	f7f9 fd14 	bl	80004d8 <__aeabi_dmul>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	f7f9 ff76 	bl	80009a8 <__aeabi_dcmpeq>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d09f      	beq.n	8006a00 <_dtoa_r+0x640>
 8006ac0:	e7d1      	b.n	8006a66 <_dtoa_r+0x6a6>
 8006ac2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	f000 80ea 	beq.w	8006c9e <_dtoa_r+0x8de>
 8006aca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006acc:	2a01      	cmp	r2, #1
 8006ace:	f300 80cd 	bgt.w	8006c6c <_dtoa_r+0x8ac>
 8006ad2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	f000 80c1 	beq.w	8006c5c <_dtoa_r+0x89c>
 8006ada:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ade:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ae0:	9e04      	ldr	r6, [sp, #16]
 8006ae2:	9a04      	ldr	r2, [sp, #16]
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	441a      	add	r2, r3
 8006ae8:	9204      	str	r2, [sp, #16]
 8006aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aec:	4648      	mov	r0, r9
 8006aee:	441a      	add	r2, r3
 8006af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006af2:	f000 fc2b 	bl	800734c <__i2b>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b166      	cbz	r6, 8006b14 <_dtoa_r+0x754>
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd09      	ble.n	8006b14 <_dtoa_r+0x754>
 8006b00:	42b3      	cmp	r3, r6
 8006b02:	bfa8      	it	ge
 8006b04:	4633      	movge	r3, r6
 8006b06:	9a04      	ldr	r2, [sp, #16]
 8006b08:	1af6      	subs	r6, r6, r3
 8006b0a:	1ad2      	subs	r2, r2, r3
 8006b0c:	9204      	str	r2, [sp, #16]
 8006b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b16:	b30b      	cbz	r3, 8006b5c <_dtoa_r+0x79c>
 8006b18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80c6 	beq.w	8006cac <_dtoa_r+0x8ec>
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	f000 80c0 	beq.w	8006ca6 <_dtoa_r+0x8e6>
 8006b26:	4629      	mov	r1, r5
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	f000 fcc6 	bl	80074bc <__pow5mult>
 8006b30:	9a03      	ldr	r2, [sp, #12]
 8006b32:	4601      	mov	r1, r0
 8006b34:	4605      	mov	r5, r0
 8006b36:	4648      	mov	r0, r9
 8006b38:	f000 fc1e 	bl	8007378 <__multiply>
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	4680      	mov	r8, r0
 8006b40:	4648      	mov	r0, r9
 8006b42:	f000 fb4f 	bl	80071e4 <_Bfree>
 8006b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b48:	1b1b      	subs	r3, r3, r4
 8006b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b4c:	f000 80b1 	beq.w	8006cb2 <_dtoa_r+0x8f2>
 8006b50:	4641      	mov	r1, r8
 8006b52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b54:	4648      	mov	r0, r9
 8006b56:	f000 fcb1 	bl	80074bc <__pow5mult>
 8006b5a:	9003      	str	r0, [sp, #12]
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4648      	mov	r0, r9
 8006b60:	f000 fbf4 	bl	800734c <__i2b>
 8006b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b66:	4604      	mov	r4, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 81d8 	beq.w	8006f1e <_dtoa_r+0xb5e>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4601      	mov	r1, r0
 8006b72:	4648      	mov	r0, r9
 8006b74:	f000 fca2 	bl	80074bc <__pow5mult>
 8006b78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f300 809f 	bgt.w	8006cc0 <_dtoa_r+0x900>
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 8097 	bne.w	8006cb8 <_dtoa_r+0x8f8>
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8093 	bne.w	8006cbc <_dtoa_r+0x8fc>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	051b      	lsls	r3, r3, #20
 8006ba0:	b133      	cbz	r3, 8006bb0 <_dtoa_r+0x7f0>
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	9304      	str	r3, [sp, #16]
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	3301      	adds	r3, #1
 8006bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bae:	2301      	movs	r3, #1
 8006bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 81b8 	beq.w	8006f2a <_dtoa_r+0xb6a>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bc0:	6918      	ldr	r0, [r3, #16]
 8006bc2:	f000 fb77 	bl	80072b4 <__hi0bits>
 8006bc6:	f1c0 0020 	rsb	r0, r0, #32
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	4418      	add	r0, r3
 8006bce:	f010 001f 	ands.w	r0, r0, #31
 8006bd2:	f000 8082 	beq.w	8006cda <_dtoa_r+0x91a>
 8006bd6:	f1c0 0320 	rsb	r3, r0, #32
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	dd73      	ble.n	8006cc6 <_dtoa_r+0x906>
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	f1c0 001c 	rsb	r0, r0, #28
 8006be4:	4403      	add	r3, r0
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bea:	4406      	add	r6, r0
 8006bec:	4403      	add	r3, r0
 8006bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd05      	ble.n	8006c02 <_dtoa_r+0x842>
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4648      	mov	r0, r9
 8006bfa:	9903      	ldr	r1, [sp, #12]
 8006bfc:	f000 fcb8 	bl	8007570 <__lshift>
 8006c00:	9003      	str	r0, [sp, #12]
 8006c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd05      	ble.n	8006c14 <_dtoa_r+0x854>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	f000 fcaf 	bl	8007570 <__lshift>
 8006c12:	4604      	mov	r4, r0
 8006c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d061      	beq.n	8006cde <_dtoa_r+0x91e>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	9803      	ldr	r0, [sp, #12]
 8006c1e:	f000 fd13 	bl	8007648 <__mcmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	da5b      	bge.n	8006cde <_dtoa_r+0x91e>
 8006c26:	2300      	movs	r3, #0
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	9903      	ldr	r1, [sp, #12]
 8006c2e:	f000 fafb 	bl	8007228 <__multadd>
 8006c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c34:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006c38:	9003      	str	r0, [sp, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8177 	beq.w	8006f2e <_dtoa_r+0xb6e>
 8006c40:	4629      	mov	r1, r5
 8006c42:	2300      	movs	r3, #0
 8006c44:	220a      	movs	r2, #10
 8006c46:	4648      	mov	r0, r9
 8006c48:	f000 faee 	bl	8007228 <__multadd>
 8006c4c:	f1bb 0f00 	cmp.w	fp, #0
 8006c50:	4605      	mov	r5, r0
 8006c52:	dc6f      	bgt.n	8006d34 <_dtoa_r+0x974>
 8006c54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	dc49      	bgt.n	8006cee <_dtoa_r+0x92e>
 8006c5a:	e06b      	b.n	8006d34 <_dtoa_r+0x974>
 8006c5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c62:	e73c      	b.n	8006ade <_dtoa_r+0x71e>
 8006c64:	3fe00000 	.word	0x3fe00000
 8006c68:	40240000 	.word	0x40240000
 8006c6c:	9b08      	ldr	r3, [sp, #32]
 8006c6e:	1e5c      	subs	r4, r3, #1
 8006c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	db09      	blt.n	8006c8a <_dtoa_r+0x8ca>
 8006c76:	1b1c      	subs	r4, r3, r4
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f6bf af30 	bge.w	8006ae0 <_dtoa_r+0x720>
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	9a08      	ldr	r2, [sp, #32]
 8006c84:	1a9e      	subs	r6, r3, r2
 8006c86:	2300      	movs	r3, #0
 8006c88:	e72b      	b.n	8006ae2 <_dtoa_r+0x722>
 8006c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c8e:	1ae3      	subs	r3, r4, r3
 8006c90:	441a      	add	r2, r3
 8006c92:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c94:	9e04      	ldr	r6, [sp, #16]
 8006c96:	2400      	movs	r4, #0
 8006c98:	9b08      	ldr	r3, [sp, #32]
 8006c9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c9c:	e721      	b.n	8006ae2 <_dtoa_r+0x722>
 8006c9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ca0:	9e04      	ldr	r6, [sp, #16]
 8006ca2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ca4:	e728      	b.n	8006af8 <_dtoa_r+0x738>
 8006ca6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006caa:	e751      	b.n	8006b50 <_dtoa_r+0x790>
 8006cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cae:	9903      	ldr	r1, [sp, #12]
 8006cb0:	e750      	b.n	8006b54 <_dtoa_r+0x794>
 8006cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb6:	e751      	b.n	8006b5c <_dtoa_r+0x79c>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e779      	b.n	8006bb0 <_dtoa_r+0x7f0>
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	e777      	b.n	8006bb0 <_dtoa_r+0x7f0>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc4:	e779      	b.n	8006bba <_dtoa_r+0x7fa>
 8006cc6:	d093      	beq.n	8006bf0 <_dtoa_r+0x830>
 8006cc8:	9a04      	ldr	r2, [sp, #16]
 8006cca:	331c      	adds	r3, #28
 8006ccc:	441a      	add	r2, r3
 8006cce:	9204      	str	r2, [sp, #16]
 8006cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd2:	441e      	add	r6, r3
 8006cd4:	441a      	add	r2, r3
 8006cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cd8:	e78a      	b.n	8006bf0 <_dtoa_r+0x830>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	e7f4      	b.n	8006cc8 <_dtoa_r+0x908>
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	46b8      	mov	r8, r7
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dc20      	bgt.n	8006d28 <_dtoa_r+0x968>
 8006ce6:	469b      	mov	fp, r3
 8006ce8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	dd1e      	ble.n	8006d2c <_dtoa_r+0x96c>
 8006cee:	f1bb 0f00 	cmp.w	fp, #0
 8006cf2:	f47f adb1 	bne.w	8006858 <_dtoa_r+0x498>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	465b      	mov	r3, fp
 8006cfa:	2205      	movs	r2, #5
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fa93 	bl	8007228 <__multadd>
 8006d02:	4601      	mov	r1, r0
 8006d04:	4604      	mov	r4, r0
 8006d06:	9803      	ldr	r0, [sp, #12]
 8006d08:	f000 fc9e 	bl	8007648 <__mcmp>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f77f ada3 	ble.w	8006858 <_dtoa_r+0x498>
 8006d12:	4656      	mov	r6, sl
 8006d14:	2331      	movs	r3, #49	@ 0x31
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	f806 3b01 	strb.w	r3, [r6], #1
 8006d1e:	e59f      	b.n	8006860 <_dtoa_r+0x4a0>
 8006d20:	46b8      	mov	r8, r7
 8006d22:	9c08      	ldr	r4, [sp, #32]
 8006d24:	4625      	mov	r5, r4
 8006d26:	e7f4      	b.n	8006d12 <_dtoa_r+0x952>
 8006d28:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8101 	beq.w	8006f36 <_dtoa_r+0xb76>
 8006d34:	2e00      	cmp	r6, #0
 8006d36:	dd05      	ble.n	8006d44 <_dtoa_r+0x984>
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	4648      	mov	r0, r9
 8006d3e:	f000 fc17 	bl	8007570 <__lshift>
 8006d42:	4605      	mov	r5, r0
 8006d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d05c      	beq.n	8006e04 <_dtoa_r+0xa44>
 8006d4a:	4648      	mov	r0, r9
 8006d4c:	6869      	ldr	r1, [r5, #4]
 8006d4e:	f000 fa09 	bl	8007164 <_Balloc>
 8006d52:	4606      	mov	r6, r0
 8006d54:	b928      	cbnz	r0, 8006d62 <_dtoa_r+0x9a2>
 8006d56:	4602      	mov	r2, r0
 8006d58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d5c:	4b80      	ldr	r3, [pc, #512]	@ (8006f60 <_dtoa_r+0xba0>)
 8006d5e:	f7ff bb43 	b.w	80063e8 <_dtoa_r+0x28>
 8006d62:	692a      	ldr	r2, [r5, #16]
 8006d64:	f105 010c 	add.w	r1, r5, #12
 8006d68:	3202      	adds	r2, #2
 8006d6a:	0092      	lsls	r2, r2, #2
 8006d6c:	300c      	adds	r0, #12
 8006d6e:	f000 ff9d 	bl	8007cac <memcpy>
 8006d72:	2201      	movs	r2, #1
 8006d74:	4631      	mov	r1, r6
 8006d76:	4648      	mov	r0, r9
 8006d78:	f000 fbfa 	bl	8007570 <__lshift>
 8006d7c:	462f      	mov	r7, r5
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f10a 0301 	add.w	r3, sl, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	eb0a 030b 	add.w	r3, sl, fp
 8006d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8c:	9b06      	ldr	r3, [sp, #24]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	4621      	mov	r1, r4
 8006d98:	9803      	ldr	r0, [sp, #12]
 8006d9a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006d9e:	f7ff fa84 	bl	80062aa <quorem>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4639      	mov	r1, r7
 8006da6:	3330      	adds	r3, #48	@ 0x30
 8006da8:	9006      	str	r0, [sp, #24]
 8006daa:	9803      	ldr	r0, [sp, #12]
 8006dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dae:	f000 fc4b 	bl	8007648 <__mcmp>
 8006db2:	462a      	mov	r2, r5
 8006db4:	9008      	str	r0, [sp, #32]
 8006db6:	4621      	mov	r1, r4
 8006db8:	4648      	mov	r0, r9
 8006dba:	f000 fc61 	bl	8007680 <__mdiff>
 8006dbe:	68c2      	ldr	r2, [r0, #12]
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc4:	bb02      	cbnz	r2, 8006e08 <_dtoa_r+0xa48>
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	9803      	ldr	r0, [sp, #12]
 8006dca:	f000 fc3d 	bl	8007648 <__mcmp>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4648      	mov	r0, r9
 8006dd6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006dda:	f000 fa03 	bl	80071e4 <_Bfree>
 8006dde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006de2:	9e04      	ldr	r6, [sp, #16]
 8006de4:	ea42 0103 	orr.w	r1, r2, r3
 8006de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dea:	4319      	orrs	r1, r3
 8006dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dee:	d10d      	bne.n	8006e0c <_dtoa_r+0xa4c>
 8006df0:	2b39      	cmp	r3, #57	@ 0x39
 8006df2:	d027      	beq.n	8006e44 <_dtoa_r+0xa84>
 8006df4:	9a08      	ldr	r2, [sp, #32]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	dd01      	ble.n	8006dfe <_dtoa_r+0xa3e>
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	3331      	adds	r3, #49	@ 0x31
 8006dfe:	f88b 3000 	strb.w	r3, [fp]
 8006e02:	e52e      	b.n	8006862 <_dtoa_r+0x4a2>
 8006e04:	4628      	mov	r0, r5
 8006e06:	e7b9      	b.n	8006d7c <_dtoa_r+0x9bc>
 8006e08:	2201      	movs	r2, #1
 8006e0a:	e7e2      	b.n	8006dd2 <_dtoa_r+0xa12>
 8006e0c:	9908      	ldr	r1, [sp, #32]
 8006e0e:	2900      	cmp	r1, #0
 8006e10:	db04      	blt.n	8006e1c <_dtoa_r+0xa5c>
 8006e12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006e14:	4301      	orrs	r1, r0
 8006e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e18:	4301      	orrs	r1, r0
 8006e1a:	d120      	bne.n	8006e5e <_dtoa_r+0xa9e>
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	ddee      	ble.n	8006dfe <_dtoa_r+0xa3e>
 8006e20:	2201      	movs	r2, #1
 8006e22:	9903      	ldr	r1, [sp, #12]
 8006e24:	4648      	mov	r0, r9
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	f000 fba2 	bl	8007570 <__lshift>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	9003      	str	r0, [sp, #12]
 8006e30:	f000 fc0a 	bl	8007648 <__mcmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	dc02      	bgt.n	8006e40 <_dtoa_r+0xa80>
 8006e3a:	d1e0      	bne.n	8006dfe <_dtoa_r+0xa3e>
 8006e3c:	07da      	lsls	r2, r3, #31
 8006e3e:	d5de      	bpl.n	8006dfe <_dtoa_r+0xa3e>
 8006e40:	2b39      	cmp	r3, #57	@ 0x39
 8006e42:	d1da      	bne.n	8006dfa <_dtoa_r+0xa3a>
 8006e44:	2339      	movs	r3, #57	@ 0x39
 8006e46:	f88b 3000 	strb.w	r3, [fp]
 8006e4a:	4633      	mov	r3, r6
 8006e4c:	461e      	mov	r6, r3
 8006e4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2a39      	cmp	r2, #57	@ 0x39
 8006e56:	d04e      	beq.n	8006ef6 <_dtoa_r+0xb36>
 8006e58:	3201      	adds	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e501      	b.n	8006862 <_dtoa_r+0x4a2>
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	dd03      	ble.n	8006e6a <_dtoa_r+0xaaa>
 8006e62:	2b39      	cmp	r3, #57	@ 0x39
 8006e64:	d0ee      	beq.n	8006e44 <_dtoa_r+0xa84>
 8006e66:	3301      	adds	r3, #1
 8006e68:	e7c9      	b.n	8006dfe <_dtoa_r+0xa3e>
 8006e6a:	9a04      	ldr	r2, [sp, #16]
 8006e6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e72:	428a      	cmp	r2, r1
 8006e74:	d028      	beq.n	8006ec8 <_dtoa_r+0xb08>
 8006e76:	2300      	movs	r3, #0
 8006e78:	220a      	movs	r2, #10
 8006e7a:	9903      	ldr	r1, [sp, #12]
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	f000 f9d3 	bl	8007228 <__multadd>
 8006e82:	42af      	cmp	r7, r5
 8006e84:	9003      	str	r0, [sp, #12]
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	f04f 020a 	mov.w	r2, #10
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4648      	mov	r0, r9
 8006e92:	d107      	bne.n	8006ea4 <_dtoa_r+0xae4>
 8006e94:	f000 f9c8 	bl	8007228 <__multadd>
 8006e98:	4607      	mov	r7, r0
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	e777      	b.n	8006d94 <_dtoa_r+0x9d4>
 8006ea4:	f000 f9c0 	bl	8007228 <__multadd>
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4607      	mov	r7, r0
 8006eac:	2300      	movs	r3, #0
 8006eae:	220a      	movs	r2, #10
 8006eb0:	4648      	mov	r0, r9
 8006eb2:	f000 f9b9 	bl	8007228 <__multadd>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	e7f0      	b.n	8006e9c <_dtoa_r+0xadc>
 8006eba:	f1bb 0f00 	cmp.w	fp, #0
 8006ebe:	bfcc      	ite	gt
 8006ec0:	465e      	movgt	r6, fp
 8006ec2:	2601      	movle	r6, #1
 8006ec4:	2700      	movs	r7, #0
 8006ec6:	4456      	add	r6, sl
 8006ec8:	2201      	movs	r2, #1
 8006eca:	9903      	ldr	r1, [sp, #12]
 8006ecc:	4648      	mov	r0, r9
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	f000 fb4e 	bl	8007570 <__lshift>
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	9003      	str	r0, [sp, #12]
 8006ed8:	f000 fbb6 	bl	8007648 <__mcmp>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dcb4      	bgt.n	8006e4a <_dtoa_r+0xa8a>
 8006ee0:	d102      	bne.n	8006ee8 <_dtoa_r+0xb28>
 8006ee2:	9b04      	ldr	r3, [sp, #16]
 8006ee4:	07db      	lsls	r3, r3, #31
 8006ee6:	d4b0      	bmi.n	8006e4a <_dtoa_r+0xa8a>
 8006ee8:	4633      	mov	r3, r6
 8006eea:	461e      	mov	r6, r3
 8006eec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef0:	2a30      	cmp	r2, #48	@ 0x30
 8006ef2:	d0fa      	beq.n	8006eea <_dtoa_r+0xb2a>
 8006ef4:	e4b5      	b.n	8006862 <_dtoa_r+0x4a2>
 8006ef6:	459a      	cmp	sl, r3
 8006ef8:	d1a8      	bne.n	8006e4c <_dtoa_r+0xa8c>
 8006efa:	2331      	movs	r3, #49	@ 0x31
 8006efc:	f108 0801 	add.w	r8, r8, #1
 8006f00:	f88a 3000 	strb.w	r3, [sl]
 8006f04:	e4ad      	b.n	8006862 <_dtoa_r+0x4a2>
 8006f06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006f64 <_dtoa_r+0xba4>
 8006f0c:	b11b      	cbz	r3, 8006f16 <_dtoa_r+0xb56>
 8006f0e:	f10a 0308 	add.w	r3, sl, #8
 8006f12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4650      	mov	r0, sl
 8006f18:	b017      	add	sp, #92	@ 0x5c
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f77f ae2e 	ble.w	8006b82 <_dtoa_r+0x7c2>
 8006f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	e64d      	b.n	8006bca <_dtoa_r+0x80a>
 8006f2e:	f1bb 0f00 	cmp.w	fp, #0
 8006f32:	f77f aed9 	ble.w	8006ce8 <_dtoa_r+0x928>
 8006f36:	4656      	mov	r6, sl
 8006f38:	4621      	mov	r1, r4
 8006f3a:	9803      	ldr	r0, [sp, #12]
 8006f3c:	f7ff f9b5 	bl	80062aa <quorem>
 8006f40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006f44:	f806 3b01 	strb.w	r3, [r6], #1
 8006f48:	eba6 020a 	sub.w	r2, r6, sl
 8006f4c:	4593      	cmp	fp, r2
 8006f4e:	ddb4      	ble.n	8006eba <_dtoa_r+0xafa>
 8006f50:	2300      	movs	r3, #0
 8006f52:	220a      	movs	r2, #10
 8006f54:	4648      	mov	r0, r9
 8006f56:	9903      	ldr	r1, [sp, #12]
 8006f58:	f000 f966 	bl	8007228 <__multadd>
 8006f5c:	9003      	str	r0, [sp, #12]
 8006f5e:	e7eb      	b.n	8006f38 <_dtoa_r+0xb78>
 8006f60:	08009866 	.word	0x08009866
 8006f64:	080097ea 	.word	0x080097ea

08006f68 <_free_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d040      	beq.n	8006ff2 <_free_r+0x8a>
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f0c      	subs	r4, r1, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfb8      	it	lt
 8006f7a:	18e4      	addlt	r4, r4, r3
 8006f7c:	f000 f8e6 	bl	800714c <__malloc_lock>
 8006f80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff4 <_free_r+0x8c>)
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x2c>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f90:	f000 b8e2 	b.w	8007158 <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x42>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	1821      	adds	r1, r4, r0
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x1e>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x4c>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x42>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1850      	adds	r0, r2, r1
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x6c>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	4401      	add	r1, r0
 8006fc0:	1850      	adds	r0, r2, r1
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x22>
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4408      	add	r0, r1
 8006fce:	6010      	str	r0, [r2, #0]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x22>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x74>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x22>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	1821      	adds	r1, r4, r0
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf01      	itttt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	1809      	addeq	r1, r1, r0
 8006fea:	6021      	streq	r1, [r4, #0]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	6054      	str	r4, [r2, #4]
 8006ff0:	e7cb      	b.n	8006f8a <_free_r+0x22>
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000e54 	.word	0x20000e54

08006ff8 <malloc>:
 8006ff8:	4b02      	ldr	r3, [pc, #8]	@ (8007004 <malloc+0xc>)
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	f000 b825 	b.w	800704c <_malloc_r>
 8007002:	bf00      	nop
 8007004:	20000024 	.word	0x20000024

08007008 <sbrk_aligned>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4e0f      	ldr	r6, [pc, #60]	@ (8007048 <sbrk_aligned+0x40>)
 800700c:	460c      	mov	r4, r1
 800700e:	6831      	ldr	r1, [r6, #0]
 8007010:	4605      	mov	r5, r0
 8007012:	b911      	cbnz	r1, 800701a <sbrk_aligned+0x12>
 8007014:	f000 fe3a 	bl	8007c8c <_sbrk_r>
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 fe35 	bl	8007c8c <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d103      	bne.n	800702e <sbrk_aligned+0x26>
 8007026:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800702a:	4620      	mov	r0, r4
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	1cc4      	adds	r4, r0, #3
 8007030:	f024 0403 	bic.w	r4, r4, #3
 8007034:	42a0      	cmp	r0, r4
 8007036:	d0f8      	beq.n	800702a <sbrk_aligned+0x22>
 8007038:	1a21      	subs	r1, r4, r0
 800703a:	4628      	mov	r0, r5
 800703c:	f000 fe26 	bl	8007c8c <_sbrk_r>
 8007040:	3001      	adds	r0, #1
 8007042:	d1f2      	bne.n	800702a <sbrk_aligned+0x22>
 8007044:	e7ef      	b.n	8007026 <sbrk_aligned+0x1e>
 8007046:	bf00      	nop
 8007048:	20000e50 	.word	0x20000e50

0800704c <_malloc_r>:
 800704c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007050:	1ccd      	adds	r5, r1, #3
 8007052:	f025 0503 	bic.w	r5, r5, #3
 8007056:	3508      	adds	r5, #8
 8007058:	2d0c      	cmp	r5, #12
 800705a:	bf38      	it	cc
 800705c:	250c      	movcc	r5, #12
 800705e:	2d00      	cmp	r5, #0
 8007060:	4606      	mov	r6, r0
 8007062:	db01      	blt.n	8007068 <_malloc_r+0x1c>
 8007064:	42a9      	cmp	r1, r5
 8007066:	d904      	bls.n	8007072 <_malloc_r+0x26>
 8007068:	230c      	movs	r3, #12
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	2000      	movs	r0, #0
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007148 <_malloc_r+0xfc>
 8007076:	f000 f869 	bl	800714c <__malloc_lock>
 800707a:	f8d8 3000 	ldr.w	r3, [r8]
 800707e:	461c      	mov	r4, r3
 8007080:	bb44      	cbnz	r4, 80070d4 <_malloc_r+0x88>
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	f7ff ffbf 	bl	8007008 <sbrk_aligned>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	4604      	mov	r4, r0
 800708e:	d158      	bne.n	8007142 <_malloc_r+0xf6>
 8007090:	f8d8 4000 	ldr.w	r4, [r8]
 8007094:	4627      	mov	r7, r4
 8007096:	2f00      	cmp	r7, #0
 8007098:	d143      	bne.n	8007122 <_malloc_r+0xd6>
 800709a:	2c00      	cmp	r4, #0
 800709c:	d04b      	beq.n	8007136 <_malloc_r+0xea>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	eb04 0903 	add.w	r9, r4, r3
 80070a8:	f000 fdf0 	bl	8007c8c <_sbrk_r>
 80070ac:	4581      	cmp	r9, r0
 80070ae:	d142      	bne.n	8007136 <_malloc_r+0xea>
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	4630      	mov	r0, r6
 80070b4:	1a6d      	subs	r5, r5, r1
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7ff ffa6 	bl	8007008 <sbrk_aligned>
 80070bc:	3001      	adds	r0, #1
 80070be:	d03a      	beq.n	8007136 <_malloc_r+0xea>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	442b      	add	r3, r5
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	bb62      	cbnz	r2, 8007128 <_malloc_r+0xdc>
 80070ce:	f8c8 7000 	str.w	r7, [r8]
 80070d2:	e00f      	b.n	80070f4 <_malloc_r+0xa8>
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	1b52      	subs	r2, r2, r5
 80070d8:	d420      	bmi.n	800711c <_malloc_r+0xd0>
 80070da:	2a0b      	cmp	r2, #11
 80070dc:	d917      	bls.n	800710e <_malloc_r+0xc2>
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	6025      	str	r5, [r4, #0]
 80070e4:	bf18      	it	ne
 80070e6:	6059      	strne	r1, [r3, #4]
 80070e8:	6863      	ldr	r3, [r4, #4]
 80070ea:	bf08      	it	eq
 80070ec:	f8c8 1000 	streq.w	r1, [r8]
 80070f0:	5162      	str	r2, [r4, r5]
 80070f2:	604b      	str	r3, [r1, #4]
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 f82f 	bl	8007158 <__malloc_unlock>
 80070fa:	f104 000b 	add.w	r0, r4, #11
 80070fe:	1d23      	adds	r3, r4, #4
 8007100:	f020 0007 	bic.w	r0, r0, #7
 8007104:	1ac2      	subs	r2, r0, r3
 8007106:	bf1c      	itt	ne
 8007108:	1a1b      	subne	r3, r3, r0
 800710a:	50a3      	strne	r3, [r4, r2]
 800710c:	e7af      	b.n	800706e <_malloc_r+0x22>
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	42a3      	cmp	r3, r4
 8007112:	bf0c      	ite	eq
 8007114:	f8c8 2000 	streq.w	r2, [r8]
 8007118:	605a      	strne	r2, [r3, #4]
 800711a:	e7eb      	b.n	80070f4 <_malloc_r+0xa8>
 800711c:	4623      	mov	r3, r4
 800711e:	6864      	ldr	r4, [r4, #4]
 8007120:	e7ae      	b.n	8007080 <_malloc_r+0x34>
 8007122:	463c      	mov	r4, r7
 8007124:	687f      	ldr	r7, [r7, #4]
 8007126:	e7b6      	b.n	8007096 <_malloc_r+0x4a>
 8007128:	461a      	mov	r2, r3
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	42a3      	cmp	r3, r4
 800712e:	d1fb      	bne.n	8007128 <_malloc_r+0xdc>
 8007130:	2300      	movs	r3, #0
 8007132:	6053      	str	r3, [r2, #4]
 8007134:	e7de      	b.n	80070f4 <_malloc_r+0xa8>
 8007136:	230c      	movs	r3, #12
 8007138:	4630      	mov	r0, r6
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	f000 f80c 	bl	8007158 <__malloc_unlock>
 8007140:	e794      	b.n	800706c <_malloc_r+0x20>
 8007142:	6005      	str	r5, [r0, #0]
 8007144:	e7d6      	b.n	80070f4 <_malloc_r+0xa8>
 8007146:	bf00      	nop
 8007148:	20000e54 	.word	0x20000e54

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	@ (8007154 <__malloc_lock+0x8>)
 800714e:	f7ff b89c 	b.w	800628a <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	20000e4c 	.word	0x20000e4c

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	@ (8007160 <__malloc_unlock+0x8>)
 800715a:	f7ff b897 	b.w	800628c <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	20000e4c 	.word	0x20000e4c

08007164 <_Balloc>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	69c6      	ldr	r6, [r0, #28]
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	b976      	cbnz	r6, 800718c <_Balloc+0x28>
 800716e:	2010      	movs	r0, #16
 8007170:	f7ff ff42 	bl	8006ff8 <malloc>
 8007174:	4602      	mov	r2, r0
 8007176:	61e0      	str	r0, [r4, #28]
 8007178:	b920      	cbnz	r0, 8007184 <_Balloc+0x20>
 800717a:	216b      	movs	r1, #107	@ 0x6b
 800717c:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <_Balloc+0x78>)
 800717e:	4818      	ldr	r0, [pc, #96]	@ (80071e0 <_Balloc+0x7c>)
 8007180:	f000 fda2 	bl	8007cc8 <__assert_func>
 8007184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007188:	6006      	str	r6, [r0, #0]
 800718a:	60c6      	str	r6, [r0, #12]
 800718c:	69e6      	ldr	r6, [r4, #28]
 800718e:	68f3      	ldr	r3, [r6, #12]
 8007190:	b183      	cbz	r3, 80071b4 <_Balloc+0x50>
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800719a:	b9b8      	cbnz	r0, 80071cc <_Balloc+0x68>
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f605 	lsl.w	r6, r1, r5
 80071a2:	1d72      	adds	r2, r6, #5
 80071a4:	4620      	mov	r0, r4
 80071a6:	0092      	lsls	r2, r2, #2
 80071a8:	f000 fdac 	bl	8007d04 <_calloc_r>
 80071ac:	b160      	cbz	r0, 80071c8 <_Balloc+0x64>
 80071ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071b2:	e00e      	b.n	80071d2 <_Balloc+0x6e>
 80071b4:	2221      	movs	r2, #33	@ 0x21
 80071b6:	2104      	movs	r1, #4
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fda3 	bl	8007d04 <_calloc_r>
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	60f0      	str	r0, [r6, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e4      	bne.n	8007192 <_Balloc+0x2e>
 80071c8:	2000      	movs	r0, #0
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	6802      	ldr	r2, [r0, #0]
 80071ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071d2:	2300      	movs	r3, #0
 80071d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071d8:	e7f7      	b.n	80071ca <_Balloc+0x66>
 80071da:	bf00      	nop
 80071dc:	080097f7 	.word	0x080097f7
 80071e0:	08009877 	.word	0x08009877

080071e4 <_Bfree>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	69c6      	ldr	r6, [r0, #28]
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	b976      	cbnz	r6, 800720c <_Bfree+0x28>
 80071ee:	2010      	movs	r0, #16
 80071f0:	f7ff ff02 	bl	8006ff8 <malloc>
 80071f4:	4602      	mov	r2, r0
 80071f6:	61e8      	str	r0, [r5, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_Bfree+0x20>
 80071fa:	218f      	movs	r1, #143	@ 0x8f
 80071fc:	4b08      	ldr	r3, [pc, #32]	@ (8007220 <_Bfree+0x3c>)
 80071fe:	4809      	ldr	r0, [pc, #36]	@ (8007224 <_Bfree+0x40>)
 8007200:	f000 fd62 	bl	8007cc8 <__assert_func>
 8007204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007208:	6006      	str	r6, [r0, #0]
 800720a:	60c6      	str	r6, [r0, #12]
 800720c:	b13c      	cbz	r4, 800721e <_Bfree+0x3a>
 800720e:	69eb      	ldr	r3, [r5, #28]
 8007210:	6862      	ldr	r2, [r4, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007218:	6021      	str	r1, [r4, #0]
 800721a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	080097f7 	.word	0x080097f7
 8007224:	08009877 	.word	0x08009877

08007228 <__multadd>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4607      	mov	r7, r0
 800722e:	460c      	mov	r4, r1
 8007230:	461e      	mov	r6, r3
 8007232:	2000      	movs	r0, #0
 8007234:	690d      	ldr	r5, [r1, #16]
 8007236:	f101 0c14 	add.w	ip, r1, #20
 800723a:	f8dc 3000 	ldr.w	r3, [ip]
 800723e:	3001      	adds	r0, #1
 8007240:	b299      	uxth	r1, r3
 8007242:	fb02 6101 	mla	r1, r2, r1, r6
 8007246:	0c1e      	lsrs	r6, r3, #16
 8007248:	0c0b      	lsrs	r3, r1, #16
 800724a:	fb02 3306 	mla	r3, r2, r6, r3
 800724e:	b289      	uxth	r1, r1
 8007250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007254:	4285      	cmp	r5, r0
 8007256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800725a:	f84c 1b04 	str.w	r1, [ip], #4
 800725e:	dcec      	bgt.n	800723a <__multadd+0x12>
 8007260:	b30e      	cbz	r6, 80072a6 <__multadd+0x7e>
 8007262:	68a3      	ldr	r3, [r4, #8]
 8007264:	42ab      	cmp	r3, r5
 8007266:	dc19      	bgt.n	800729c <__multadd+0x74>
 8007268:	6861      	ldr	r1, [r4, #4]
 800726a:	4638      	mov	r0, r7
 800726c:	3101      	adds	r1, #1
 800726e:	f7ff ff79 	bl	8007164 <_Balloc>
 8007272:	4680      	mov	r8, r0
 8007274:	b928      	cbnz	r0, 8007282 <__multadd+0x5a>
 8007276:	4602      	mov	r2, r0
 8007278:	21ba      	movs	r1, #186	@ 0xba
 800727a:	4b0c      	ldr	r3, [pc, #48]	@ (80072ac <__multadd+0x84>)
 800727c:	480c      	ldr	r0, [pc, #48]	@ (80072b0 <__multadd+0x88>)
 800727e:	f000 fd23 	bl	8007cc8 <__assert_func>
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	f104 010c 	add.w	r1, r4, #12
 8007288:	3202      	adds	r2, #2
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	300c      	adds	r0, #12
 800728e:	f000 fd0d 	bl	8007cac <memcpy>
 8007292:	4621      	mov	r1, r4
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ffa5 	bl	80071e4 <_Bfree>
 800729a:	4644      	mov	r4, r8
 800729c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072a0:	3501      	adds	r5, #1
 80072a2:	615e      	str	r6, [r3, #20]
 80072a4:	6125      	str	r5, [r4, #16]
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ac:	08009866 	.word	0x08009866
 80072b0:	08009877 	.word	0x08009877

080072b4 <__hi0bits>:
 80072b4:	4603      	mov	r3, r0
 80072b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072ba:	bf3a      	itte	cc
 80072bc:	0403      	lslcc	r3, r0, #16
 80072be:	2010      	movcc	r0, #16
 80072c0:	2000      	movcs	r0, #0
 80072c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c6:	bf3c      	itt	cc
 80072c8:	021b      	lslcc	r3, r3, #8
 80072ca:	3008      	addcc	r0, #8
 80072cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d0:	bf3c      	itt	cc
 80072d2:	011b      	lslcc	r3, r3, #4
 80072d4:	3004      	addcc	r0, #4
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	bf3c      	itt	cc
 80072dc:	009b      	lslcc	r3, r3, #2
 80072de:	3002      	addcc	r0, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db05      	blt.n	80072f0 <__hi0bits+0x3c>
 80072e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072e8:	f100 0001 	add.w	r0, r0, #1
 80072ec:	bf08      	it	eq
 80072ee:	2020      	moveq	r0, #32
 80072f0:	4770      	bx	lr

080072f2 <__lo0bits>:
 80072f2:	6803      	ldr	r3, [r0, #0]
 80072f4:	4602      	mov	r2, r0
 80072f6:	f013 0007 	ands.w	r0, r3, #7
 80072fa:	d00b      	beq.n	8007314 <__lo0bits+0x22>
 80072fc:	07d9      	lsls	r1, r3, #31
 80072fe:	d421      	bmi.n	8007344 <__lo0bits+0x52>
 8007300:	0798      	lsls	r0, r3, #30
 8007302:	bf49      	itett	mi
 8007304:	085b      	lsrmi	r3, r3, #1
 8007306:	089b      	lsrpl	r3, r3, #2
 8007308:	2001      	movmi	r0, #1
 800730a:	6013      	strmi	r3, [r2, #0]
 800730c:	bf5c      	itt	pl
 800730e:	2002      	movpl	r0, #2
 8007310:	6013      	strpl	r3, [r2, #0]
 8007312:	4770      	bx	lr
 8007314:	b299      	uxth	r1, r3
 8007316:	b909      	cbnz	r1, 800731c <__lo0bits+0x2a>
 8007318:	2010      	movs	r0, #16
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	b2d9      	uxtb	r1, r3
 800731e:	b909      	cbnz	r1, 8007324 <__lo0bits+0x32>
 8007320:	3008      	adds	r0, #8
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	0719      	lsls	r1, r3, #28
 8007326:	bf04      	itt	eq
 8007328:	091b      	lsreq	r3, r3, #4
 800732a:	3004      	addeq	r0, #4
 800732c:	0799      	lsls	r1, r3, #30
 800732e:	bf04      	itt	eq
 8007330:	089b      	lsreq	r3, r3, #2
 8007332:	3002      	addeq	r0, #2
 8007334:	07d9      	lsls	r1, r3, #31
 8007336:	d403      	bmi.n	8007340 <__lo0bits+0x4e>
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	f100 0001 	add.w	r0, r0, #1
 800733e:	d003      	beq.n	8007348 <__lo0bits+0x56>
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4770      	bx	lr
 8007344:	2000      	movs	r0, #0
 8007346:	4770      	bx	lr
 8007348:	2020      	movs	r0, #32
 800734a:	4770      	bx	lr

0800734c <__i2b>:
 800734c:	b510      	push	{r4, lr}
 800734e:	460c      	mov	r4, r1
 8007350:	2101      	movs	r1, #1
 8007352:	f7ff ff07 	bl	8007164 <_Balloc>
 8007356:	4602      	mov	r2, r0
 8007358:	b928      	cbnz	r0, 8007366 <__i2b+0x1a>
 800735a:	f240 1145 	movw	r1, #325	@ 0x145
 800735e:	4b04      	ldr	r3, [pc, #16]	@ (8007370 <__i2b+0x24>)
 8007360:	4804      	ldr	r0, [pc, #16]	@ (8007374 <__i2b+0x28>)
 8007362:	f000 fcb1 	bl	8007cc8 <__assert_func>
 8007366:	2301      	movs	r3, #1
 8007368:	6144      	str	r4, [r0, #20]
 800736a:	6103      	str	r3, [r0, #16]
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	08009866 	.word	0x08009866
 8007374:	08009877 	.word	0x08009877

08007378 <__multiply>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	4617      	mov	r7, r2
 800737e:	690a      	ldr	r2, [r1, #16]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4689      	mov	r9, r1
 8007384:	429a      	cmp	r2, r3
 8007386:	bfa2      	ittt	ge
 8007388:	463b      	movge	r3, r7
 800738a:	460f      	movge	r7, r1
 800738c:	4699      	movge	r9, r3
 800738e:	693d      	ldr	r5, [r7, #16]
 8007390:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	eb05 060a 	add.w	r6, r5, sl
 800739c:	42b3      	cmp	r3, r6
 800739e:	b085      	sub	sp, #20
 80073a0:	bfb8      	it	lt
 80073a2:	3101      	addlt	r1, #1
 80073a4:	f7ff fede 	bl	8007164 <_Balloc>
 80073a8:	b930      	cbnz	r0, 80073b8 <__multiply+0x40>
 80073aa:	4602      	mov	r2, r0
 80073ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073b0:	4b40      	ldr	r3, [pc, #256]	@ (80074b4 <__multiply+0x13c>)
 80073b2:	4841      	ldr	r0, [pc, #260]	@ (80074b8 <__multiply+0x140>)
 80073b4:	f000 fc88 	bl	8007cc8 <__assert_func>
 80073b8:	f100 0414 	add.w	r4, r0, #20
 80073bc:	4623      	mov	r3, r4
 80073be:	2200      	movs	r2, #0
 80073c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80073c4:	4573      	cmp	r3, lr
 80073c6:	d320      	bcc.n	800740a <__multiply+0x92>
 80073c8:	f107 0814 	add.w	r8, r7, #20
 80073cc:	f109 0114 	add.w	r1, r9, #20
 80073d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80073d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	1beb      	subs	r3, r5, r7
 80073dc:	3b15      	subs	r3, #21
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	3304      	adds	r3, #4
 80073e4:	3715      	adds	r7, #21
 80073e6:	42bd      	cmp	r5, r7
 80073e8:	bf38      	it	cc
 80073ea:	2304      	movcc	r3, #4
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	9103      	str	r1, [sp, #12]
 80073f2:	428b      	cmp	r3, r1
 80073f4:	d80c      	bhi.n	8007410 <__multiply+0x98>
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	dd03      	ble.n	8007402 <__multiply+0x8a>
 80073fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d055      	beq.n	80074ae <__multiply+0x136>
 8007402:	6106      	str	r6, [r0, #16]
 8007404:	b005      	add	sp, #20
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	f843 2b04 	str.w	r2, [r3], #4
 800740e:	e7d9      	b.n	80073c4 <__multiply+0x4c>
 8007410:	f8b1 a000 	ldrh.w	sl, [r1]
 8007414:	f1ba 0f00 	cmp.w	sl, #0
 8007418:	d01f      	beq.n	800745a <__multiply+0xe2>
 800741a:	46c4      	mov	ip, r8
 800741c:	46a1      	mov	r9, r4
 800741e:	2700      	movs	r7, #0
 8007420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007424:	f8d9 3000 	ldr.w	r3, [r9]
 8007428:	fa1f fb82 	uxth.w	fp, r2
 800742c:	b29b      	uxth	r3, r3
 800742e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007432:	443b      	add	r3, r7
 8007434:	f8d9 7000 	ldr.w	r7, [r9]
 8007438:	0c12      	lsrs	r2, r2, #16
 800743a:	0c3f      	lsrs	r7, r7, #16
 800743c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007440:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007444:	b29b      	uxth	r3, r3
 8007446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800744a:	4565      	cmp	r5, ip
 800744c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007450:	f849 3b04 	str.w	r3, [r9], #4
 8007454:	d8e4      	bhi.n	8007420 <__multiply+0xa8>
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	50e7      	str	r7, [r4, r3]
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3104      	adds	r1, #4
 800745e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007462:	f1b9 0f00 	cmp.w	r9, #0
 8007466:	d020      	beq.n	80074aa <__multiply+0x132>
 8007468:	4647      	mov	r7, r8
 800746a:	46a4      	mov	ip, r4
 800746c:	f04f 0a00 	mov.w	sl, #0
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	f8b7 b000 	ldrh.w	fp, [r7]
 8007476:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800747a:	b29b      	uxth	r3, r3
 800747c:	fb09 220b 	mla	r2, r9, fp, r2
 8007480:	4452      	add	r2, sl
 8007482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007486:	f84c 3b04 	str.w	r3, [ip], #4
 800748a:	f857 3b04 	ldr.w	r3, [r7], #4
 800748e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007492:	f8bc 3000 	ldrh.w	r3, [ip]
 8007496:	42bd      	cmp	r5, r7
 8007498:	fb09 330a 	mla	r3, r9, sl, r3
 800749c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80074a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074a4:	d8e5      	bhi.n	8007472 <__multiply+0xfa>
 80074a6:	9a01      	ldr	r2, [sp, #4]
 80074a8:	50a3      	str	r3, [r4, r2]
 80074aa:	3404      	adds	r4, #4
 80074ac:	e79f      	b.n	80073ee <__multiply+0x76>
 80074ae:	3e01      	subs	r6, #1
 80074b0:	e7a1      	b.n	80073f6 <__multiply+0x7e>
 80074b2:	bf00      	nop
 80074b4:	08009866 	.word	0x08009866
 80074b8:	08009877 	.word	0x08009877

080074bc <__pow5mult>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4615      	mov	r5, r2
 80074c2:	f012 0203 	ands.w	r2, r2, #3
 80074c6:	4607      	mov	r7, r0
 80074c8:	460e      	mov	r6, r1
 80074ca:	d007      	beq.n	80074dc <__pow5mult+0x20>
 80074cc:	4c25      	ldr	r4, [pc, #148]	@ (8007564 <__pow5mult+0xa8>)
 80074ce:	3a01      	subs	r2, #1
 80074d0:	2300      	movs	r3, #0
 80074d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d6:	f7ff fea7 	bl	8007228 <__multadd>
 80074da:	4606      	mov	r6, r0
 80074dc:	10ad      	asrs	r5, r5, #2
 80074de:	d03d      	beq.n	800755c <__pow5mult+0xa0>
 80074e0:	69fc      	ldr	r4, [r7, #28]
 80074e2:	b97c      	cbnz	r4, 8007504 <__pow5mult+0x48>
 80074e4:	2010      	movs	r0, #16
 80074e6:	f7ff fd87 	bl	8006ff8 <malloc>
 80074ea:	4602      	mov	r2, r0
 80074ec:	61f8      	str	r0, [r7, #28]
 80074ee:	b928      	cbnz	r0, 80074fc <__pow5mult+0x40>
 80074f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007568 <__pow5mult+0xac>)
 80074f6:	481d      	ldr	r0, [pc, #116]	@ (800756c <__pow5mult+0xb0>)
 80074f8:	f000 fbe6 	bl	8007cc8 <__assert_func>
 80074fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007500:	6004      	str	r4, [r0, #0]
 8007502:	60c4      	str	r4, [r0, #12]
 8007504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800750c:	b94c      	cbnz	r4, 8007522 <__pow5mult+0x66>
 800750e:	f240 2171 	movw	r1, #625	@ 0x271
 8007512:	4638      	mov	r0, r7
 8007514:	f7ff ff1a 	bl	800734c <__i2b>
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	07eb      	lsls	r3, r5, #31
 8007528:	d50a      	bpl.n	8007540 <__pow5mult+0x84>
 800752a:	4631      	mov	r1, r6
 800752c:	4622      	mov	r2, r4
 800752e:	4638      	mov	r0, r7
 8007530:	f7ff ff22 	bl	8007378 <__multiply>
 8007534:	4680      	mov	r8, r0
 8007536:	4631      	mov	r1, r6
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff fe53 	bl	80071e4 <_Bfree>
 800753e:	4646      	mov	r6, r8
 8007540:	106d      	asrs	r5, r5, #1
 8007542:	d00b      	beq.n	800755c <__pow5mult+0xa0>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	b938      	cbnz	r0, 8007558 <__pow5mult+0x9c>
 8007548:	4622      	mov	r2, r4
 800754a:	4621      	mov	r1, r4
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff13 	bl	8007378 <__multiply>
 8007552:	6020      	str	r0, [r4, #0]
 8007554:	f8c0 9000 	str.w	r9, [r0]
 8007558:	4604      	mov	r4, r0
 800755a:	e7e4      	b.n	8007526 <__pow5mult+0x6a>
 800755c:	4630      	mov	r0, r6
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	bf00      	nop
 8007564:	08009928 	.word	0x08009928
 8007568:	080097f7 	.word	0x080097f7
 800756c:	08009877 	.word	0x08009877

08007570 <__lshift>:
 8007570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	460c      	mov	r4, r1
 8007576:	4607      	mov	r7, r0
 8007578:	4691      	mov	r9, r2
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6849      	ldr	r1, [r1, #4]
 800757e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007582:	68a3      	ldr	r3, [r4, #8]
 8007584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007588:	f108 0601 	add.w	r6, r8, #1
 800758c:	42b3      	cmp	r3, r6
 800758e:	db0b      	blt.n	80075a8 <__lshift+0x38>
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff fde7 	bl	8007164 <_Balloc>
 8007596:	4605      	mov	r5, r0
 8007598:	b948      	cbnz	r0, 80075ae <__lshift+0x3e>
 800759a:	4602      	mov	r2, r0
 800759c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075a0:	4b27      	ldr	r3, [pc, #156]	@ (8007640 <__lshift+0xd0>)
 80075a2:	4828      	ldr	r0, [pc, #160]	@ (8007644 <__lshift+0xd4>)
 80075a4:	f000 fb90 	bl	8007cc8 <__assert_func>
 80075a8:	3101      	adds	r1, #1
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	e7ee      	b.n	800758c <__lshift+0x1c>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f100 0114 	add.w	r1, r0, #20
 80075b4:	f100 0210 	add.w	r2, r0, #16
 80075b8:	4618      	mov	r0, r3
 80075ba:	4553      	cmp	r3, sl
 80075bc:	db33      	blt.n	8007626 <__lshift+0xb6>
 80075be:	6920      	ldr	r0, [r4, #16]
 80075c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c4:	f104 0314 	add.w	r3, r4, #20
 80075c8:	f019 091f 	ands.w	r9, r9, #31
 80075cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d4:	d02b      	beq.n	800762e <__lshift+0xbe>
 80075d6:	468a      	mov	sl, r1
 80075d8:	2200      	movs	r2, #0
 80075da:	f1c9 0e20 	rsb	lr, r9, #32
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	fa00 f009 	lsl.w	r0, r0, r9
 80075e4:	4310      	orrs	r0, r2
 80075e6:	f84a 0b04 	str.w	r0, [sl], #4
 80075ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ee:	459c      	cmp	ip, r3
 80075f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80075f4:	d8f3      	bhi.n	80075de <__lshift+0x6e>
 80075f6:	ebac 0304 	sub.w	r3, ip, r4
 80075fa:	3b15      	subs	r3, #21
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	3304      	adds	r3, #4
 8007602:	f104 0015 	add.w	r0, r4, #21
 8007606:	4560      	cmp	r0, ip
 8007608:	bf88      	it	hi
 800760a:	2304      	movhi	r3, #4
 800760c:	50ca      	str	r2, [r1, r3]
 800760e:	b10a      	cbz	r2, 8007614 <__lshift+0xa4>
 8007610:	f108 0602 	add.w	r6, r8, #2
 8007614:	3e01      	subs	r6, #1
 8007616:	4638      	mov	r0, r7
 8007618:	4621      	mov	r1, r4
 800761a:	612e      	str	r6, [r5, #16]
 800761c:	f7ff fde2 	bl	80071e4 <_Bfree>
 8007620:	4628      	mov	r0, r5
 8007622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007626:	f842 0f04 	str.w	r0, [r2, #4]!
 800762a:	3301      	adds	r3, #1
 800762c:	e7c5      	b.n	80075ba <__lshift+0x4a>
 800762e:	3904      	subs	r1, #4
 8007630:	f853 2b04 	ldr.w	r2, [r3], #4
 8007634:	459c      	cmp	ip, r3
 8007636:	f841 2f04 	str.w	r2, [r1, #4]!
 800763a:	d8f9      	bhi.n	8007630 <__lshift+0xc0>
 800763c:	e7ea      	b.n	8007614 <__lshift+0xa4>
 800763e:	bf00      	nop
 8007640:	08009866 	.word	0x08009866
 8007644:	08009877 	.word	0x08009877

08007648 <__mcmp>:
 8007648:	4603      	mov	r3, r0
 800764a:	690a      	ldr	r2, [r1, #16]
 800764c:	6900      	ldr	r0, [r0, #16]
 800764e:	b530      	push	{r4, r5, lr}
 8007650:	1a80      	subs	r0, r0, r2
 8007652:	d10e      	bne.n	8007672 <__mcmp+0x2a>
 8007654:	3314      	adds	r3, #20
 8007656:	3114      	adds	r1, #20
 8007658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800765c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007668:	4295      	cmp	r5, r2
 800766a:	d003      	beq.n	8007674 <__mcmp+0x2c>
 800766c:	d205      	bcs.n	800767a <__mcmp+0x32>
 800766e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007672:	bd30      	pop	{r4, r5, pc}
 8007674:	42a3      	cmp	r3, r4
 8007676:	d3f3      	bcc.n	8007660 <__mcmp+0x18>
 8007678:	e7fb      	b.n	8007672 <__mcmp+0x2a>
 800767a:	2001      	movs	r0, #1
 800767c:	e7f9      	b.n	8007672 <__mcmp+0x2a>
	...

08007680 <__mdiff>:
 8007680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4689      	mov	r9, r1
 8007686:	4606      	mov	r6, r0
 8007688:	4611      	mov	r1, r2
 800768a:	4648      	mov	r0, r9
 800768c:	4614      	mov	r4, r2
 800768e:	f7ff ffdb 	bl	8007648 <__mcmp>
 8007692:	1e05      	subs	r5, r0, #0
 8007694:	d112      	bne.n	80076bc <__mdiff+0x3c>
 8007696:	4629      	mov	r1, r5
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff fd63 	bl	8007164 <_Balloc>
 800769e:	4602      	mov	r2, r0
 80076a0:	b928      	cbnz	r0, 80076ae <__mdiff+0x2e>
 80076a2:	f240 2137 	movw	r1, #567	@ 0x237
 80076a6:	4b3e      	ldr	r3, [pc, #248]	@ (80077a0 <__mdiff+0x120>)
 80076a8:	483e      	ldr	r0, [pc, #248]	@ (80077a4 <__mdiff+0x124>)
 80076aa:	f000 fb0d 	bl	8007cc8 <__assert_func>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076b4:	4610      	mov	r0, r2
 80076b6:	b003      	add	sp, #12
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	bfbc      	itt	lt
 80076be:	464b      	movlt	r3, r9
 80076c0:	46a1      	movlt	r9, r4
 80076c2:	4630      	mov	r0, r6
 80076c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c8:	bfba      	itte	lt
 80076ca:	461c      	movlt	r4, r3
 80076cc:	2501      	movlt	r5, #1
 80076ce:	2500      	movge	r5, #0
 80076d0:	f7ff fd48 	bl	8007164 <_Balloc>
 80076d4:	4602      	mov	r2, r0
 80076d6:	b918      	cbnz	r0, 80076e0 <__mdiff+0x60>
 80076d8:	f240 2145 	movw	r1, #581	@ 0x245
 80076dc:	4b30      	ldr	r3, [pc, #192]	@ (80077a0 <__mdiff+0x120>)
 80076de:	e7e3      	b.n	80076a8 <__mdiff+0x28>
 80076e0:	f100 0b14 	add.w	fp, r0, #20
 80076e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076e8:	f109 0310 	add.w	r3, r9, #16
 80076ec:	60c5      	str	r5, [r0, #12]
 80076ee:	f04f 0c00 	mov.w	ip, #0
 80076f2:	f109 0514 	add.w	r5, r9, #20
 80076f6:	46d9      	mov	r9, fp
 80076f8:	6926      	ldr	r6, [r4, #16]
 80076fa:	f104 0e14 	add.w	lr, r4, #20
 80076fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007702:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800770e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007712:	b281      	uxth	r1, r0
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	fa1f f38a 	uxth.w	r3, sl
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	0c00      	lsrs	r0, r0, #16
 800771e:	4463      	add	r3, ip
 8007720:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007724:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800772e:	4576      	cmp	r6, lr
 8007730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007734:	f849 3b04 	str.w	r3, [r9], #4
 8007738:	d8e6      	bhi.n	8007708 <__mdiff+0x88>
 800773a:	1b33      	subs	r3, r6, r4
 800773c:	3b15      	subs	r3, #21
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	3415      	adds	r4, #21
 8007744:	3304      	adds	r3, #4
 8007746:	42a6      	cmp	r6, r4
 8007748:	bf38      	it	cc
 800774a:	2304      	movcc	r3, #4
 800774c:	441d      	add	r5, r3
 800774e:	445b      	add	r3, fp
 8007750:	461e      	mov	r6, r3
 8007752:	462c      	mov	r4, r5
 8007754:	4544      	cmp	r4, r8
 8007756:	d30e      	bcc.n	8007776 <__mdiff+0xf6>
 8007758:	f108 0103 	add.w	r1, r8, #3
 800775c:	1b49      	subs	r1, r1, r5
 800775e:	f021 0103 	bic.w	r1, r1, #3
 8007762:	3d03      	subs	r5, #3
 8007764:	45a8      	cmp	r8, r5
 8007766:	bf38      	it	cc
 8007768:	2100      	movcc	r1, #0
 800776a:	440b      	add	r3, r1
 800776c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007770:	b199      	cbz	r1, 800779a <__mdiff+0x11a>
 8007772:	6117      	str	r7, [r2, #16]
 8007774:	e79e      	b.n	80076b4 <__mdiff+0x34>
 8007776:	46e6      	mov	lr, ip
 8007778:	f854 1b04 	ldr.w	r1, [r4], #4
 800777c:	fa1f fc81 	uxth.w	ip, r1
 8007780:	44f4      	add	ip, lr
 8007782:	0c08      	lsrs	r0, r1, #16
 8007784:	4471      	add	r1, lr
 8007786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800778a:	b289      	uxth	r1, r1
 800778c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007794:	f846 1b04 	str.w	r1, [r6], #4
 8007798:	e7dc      	b.n	8007754 <__mdiff+0xd4>
 800779a:	3f01      	subs	r7, #1
 800779c:	e7e6      	b.n	800776c <__mdiff+0xec>
 800779e:	bf00      	nop
 80077a0:	08009866 	.word	0x08009866
 80077a4:	08009877 	.word	0x08009877

080077a8 <__d2b>:
 80077a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80077ac:	2101      	movs	r1, #1
 80077ae:	4690      	mov	r8, r2
 80077b0:	4699      	mov	r9, r3
 80077b2:	9e08      	ldr	r6, [sp, #32]
 80077b4:	f7ff fcd6 	bl	8007164 <_Balloc>
 80077b8:	4604      	mov	r4, r0
 80077ba:	b930      	cbnz	r0, 80077ca <__d2b+0x22>
 80077bc:	4602      	mov	r2, r0
 80077be:	f240 310f 	movw	r1, #783	@ 0x30f
 80077c2:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <__d2b+0xa8>)
 80077c4:	4823      	ldr	r0, [pc, #140]	@ (8007854 <__d2b+0xac>)
 80077c6:	f000 fa7f 	bl	8007cc8 <__assert_func>
 80077ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077d2:	b10d      	cbz	r5, 80077d8 <__d2b+0x30>
 80077d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	f1b8 0300 	subs.w	r3, r8, #0
 80077de:	d024      	beq.n	800782a <__d2b+0x82>
 80077e0:	4668      	mov	r0, sp
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	f7ff fd85 	bl	80072f2 <__lo0bits>
 80077e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ec:	b1d8      	cbz	r0, 8007826 <__d2b+0x7e>
 80077ee:	f1c0 0320 	rsb	r3, r0, #32
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	430b      	orrs	r3, r1
 80077f8:	40c2      	lsrs	r2, r0
 80077fa:	6163      	str	r3, [r4, #20]
 80077fc:	9201      	str	r2, [sp, #4]
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2201      	moveq	r2, #1
 8007806:	2202      	movne	r2, #2
 8007808:	61a3      	str	r3, [r4, #24]
 800780a:	6122      	str	r2, [r4, #16]
 800780c:	b1ad      	cbz	r5, 800783a <__d2b+0x92>
 800780e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007812:	4405      	add	r5, r0
 8007814:	6035      	str	r5, [r6, #0]
 8007816:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800781a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781c:	6018      	str	r0, [r3, #0]
 800781e:	4620      	mov	r0, r4
 8007820:	b002      	add	sp, #8
 8007822:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007826:	6161      	str	r1, [r4, #20]
 8007828:	e7e9      	b.n	80077fe <__d2b+0x56>
 800782a:	a801      	add	r0, sp, #4
 800782c:	f7ff fd61 	bl	80072f2 <__lo0bits>
 8007830:	9b01      	ldr	r3, [sp, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	3020      	adds	r0, #32
 8007838:	e7e7      	b.n	800780a <__d2b+0x62>
 800783a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800783e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007842:	6030      	str	r0, [r6, #0]
 8007844:	6918      	ldr	r0, [r3, #16]
 8007846:	f7ff fd35 	bl	80072b4 <__hi0bits>
 800784a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800784e:	e7e4      	b.n	800781a <__d2b+0x72>
 8007850:	08009866 	.word	0x08009866
 8007854:	08009877 	.word	0x08009877

08007858 <__ssputs_r>:
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	461f      	mov	r7, r3
 800785e:	688e      	ldr	r6, [r1, #8]
 8007860:	4682      	mov	sl, r0
 8007862:	42be      	cmp	r6, r7
 8007864:	460c      	mov	r4, r1
 8007866:	4690      	mov	r8, r2
 8007868:	680b      	ldr	r3, [r1, #0]
 800786a:	d82d      	bhi.n	80078c8 <__ssputs_r+0x70>
 800786c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007870:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007874:	d026      	beq.n	80078c4 <__ssputs_r+0x6c>
 8007876:	6965      	ldr	r5, [r4, #20]
 8007878:	6909      	ldr	r1, [r1, #16]
 800787a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800787e:	eba3 0901 	sub.w	r9, r3, r1
 8007882:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007886:	1c7b      	adds	r3, r7, #1
 8007888:	444b      	add	r3, r9
 800788a:	106d      	asrs	r5, r5, #1
 800788c:	429d      	cmp	r5, r3
 800788e:	bf38      	it	cc
 8007890:	461d      	movcc	r5, r3
 8007892:	0553      	lsls	r3, r2, #21
 8007894:	d527      	bpl.n	80078e6 <__ssputs_r+0x8e>
 8007896:	4629      	mov	r1, r5
 8007898:	f7ff fbd8 	bl	800704c <_malloc_r>
 800789c:	4606      	mov	r6, r0
 800789e:	b360      	cbz	r0, 80078fa <__ssputs_r+0xa2>
 80078a0:	464a      	mov	r2, r9
 80078a2:	6921      	ldr	r1, [r4, #16]
 80078a4:	f000 fa02 	bl	8007cac <memcpy>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	6126      	str	r6, [r4, #16]
 80078b6:	444e      	add	r6, r9
 80078b8:	6026      	str	r6, [r4, #0]
 80078ba:	463e      	mov	r6, r7
 80078bc:	6165      	str	r5, [r4, #20]
 80078be:	eba5 0509 	sub.w	r5, r5, r9
 80078c2:	60a5      	str	r5, [r4, #8]
 80078c4:	42be      	cmp	r6, r7
 80078c6:	d900      	bls.n	80078ca <__ssputs_r+0x72>
 80078c8:	463e      	mov	r6, r7
 80078ca:	4632      	mov	r2, r6
 80078cc:	4641      	mov	r1, r8
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	f000 f9c2 	bl	8007c58 <memmove>
 80078d4:	2000      	movs	r0, #0
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	1b9b      	subs	r3, r3, r6
 80078da:	60a3      	str	r3, [r4, #8]
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	4433      	add	r3, r6
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e6:	462a      	mov	r2, r5
 80078e8:	f000 fa32 	bl	8007d50 <_realloc_r>
 80078ec:	4606      	mov	r6, r0
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d1e0      	bne.n	80078b4 <__ssputs_r+0x5c>
 80078f2:	4650      	mov	r0, sl
 80078f4:	6921      	ldr	r1, [r4, #16]
 80078f6:	f7ff fb37 	bl	8006f68 <_free_r>
 80078fa:	230c      	movs	r3, #12
 80078fc:	f8ca 3000 	str.w	r3, [sl]
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	e7e9      	b.n	80078e2 <__ssputs_r+0x8a>
	...

08007910 <_svfiprintf_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	4698      	mov	r8, r3
 8007916:	898b      	ldrh	r3, [r1, #12]
 8007918:	4607      	mov	r7, r0
 800791a:	061b      	lsls	r3, r3, #24
 800791c:	460d      	mov	r5, r1
 800791e:	4614      	mov	r4, r2
 8007920:	b09d      	sub	sp, #116	@ 0x74
 8007922:	d510      	bpl.n	8007946 <_svfiprintf_r+0x36>
 8007924:	690b      	ldr	r3, [r1, #16]
 8007926:	b973      	cbnz	r3, 8007946 <_svfiprintf_r+0x36>
 8007928:	2140      	movs	r1, #64	@ 0x40
 800792a:	f7ff fb8f 	bl	800704c <_malloc_r>
 800792e:	6028      	str	r0, [r5, #0]
 8007930:	6128      	str	r0, [r5, #16]
 8007932:	b930      	cbnz	r0, 8007942 <_svfiprintf_r+0x32>
 8007934:	230c      	movs	r3, #12
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800793c:	b01d      	add	sp, #116	@ 0x74
 800793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007942:	2340      	movs	r3, #64	@ 0x40
 8007944:	616b      	str	r3, [r5, #20]
 8007946:	2300      	movs	r3, #0
 8007948:	9309      	str	r3, [sp, #36]	@ 0x24
 800794a:	2320      	movs	r3, #32
 800794c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007950:	2330      	movs	r3, #48	@ 0x30
 8007952:	f04f 0901 	mov.w	r9, #1
 8007956:	f8cd 800c 	str.w	r8, [sp, #12]
 800795a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007af4 <_svfiprintf_r+0x1e4>
 800795e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007962:	4623      	mov	r3, r4
 8007964:	469a      	mov	sl, r3
 8007966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796a:	b10a      	cbz	r2, 8007970 <_svfiprintf_r+0x60>
 800796c:	2a25      	cmp	r2, #37	@ 0x25
 800796e:	d1f9      	bne.n	8007964 <_svfiprintf_r+0x54>
 8007970:	ebba 0b04 	subs.w	fp, sl, r4
 8007974:	d00b      	beq.n	800798e <_svfiprintf_r+0x7e>
 8007976:	465b      	mov	r3, fp
 8007978:	4622      	mov	r2, r4
 800797a:	4629      	mov	r1, r5
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff ff6b 	bl	8007858 <__ssputs_r>
 8007982:	3001      	adds	r0, #1
 8007984:	f000 80a7 	beq.w	8007ad6 <_svfiprintf_r+0x1c6>
 8007988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800798a:	445a      	add	r2, fp
 800798c:	9209      	str	r2, [sp, #36]	@ 0x24
 800798e:	f89a 3000 	ldrb.w	r3, [sl]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 809f 	beq.w	8007ad6 <_svfiprintf_r+0x1c6>
 8007998:	2300      	movs	r3, #0
 800799a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800799e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a2:	f10a 0a01 	add.w	sl, sl, #1
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	9307      	str	r3, [sp, #28]
 80079aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80079b0:	4654      	mov	r4, sl
 80079b2:	2205      	movs	r2, #5
 80079b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b8:	484e      	ldr	r0, [pc, #312]	@ (8007af4 <_svfiprintf_r+0x1e4>)
 80079ba:	f7fe fc68 	bl	800628e <memchr>
 80079be:	9a04      	ldr	r2, [sp, #16]
 80079c0:	b9d8      	cbnz	r0, 80079fa <_svfiprintf_r+0xea>
 80079c2:	06d0      	lsls	r0, r2, #27
 80079c4:	bf44      	itt	mi
 80079c6:	2320      	movmi	r3, #32
 80079c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079cc:	0711      	lsls	r1, r2, #28
 80079ce:	bf44      	itt	mi
 80079d0:	232b      	movmi	r3, #43	@ 0x2b
 80079d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079d6:	f89a 3000 	ldrb.w	r3, [sl]
 80079da:	2b2a      	cmp	r3, #42	@ 0x2a
 80079dc:	d015      	beq.n	8007a0a <_svfiprintf_r+0xfa>
 80079de:	4654      	mov	r4, sl
 80079e0:	2000      	movs	r0, #0
 80079e2:	f04f 0c0a 	mov.w	ip, #10
 80079e6:	9a07      	ldr	r2, [sp, #28]
 80079e8:	4621      	mov	r1, r4
 80079ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ee:	3b30      	subs	r3, #48	@ 0x30
 80079f0:	2b09      	cmp	r3, #9
 80079f2:	d94b      	bls.n	8007a8c <_svfiprintf_r+0x17c>
 80079f4:	b1b0      	cbz	r0, 8007a24 <_svfiprintf_r+0x114>
 80079f6:	9207      	str	r2, [sp, #28]
 80079f8:	e014      	b.n	8007a24 <_svfiprintf_r+0x114>
 80079fa:	eba0 0308 	sub.w	r3, r0, r8
 80079fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	46a2      	mov	sl, r4
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	e7d2      	b.n	80079b0 <_svfiprintf_r+0xa0>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	1d19      	adds	r1, r3, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	9103      	str	r1, [sp, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbb      	ittet	lt
 8007a16:	425b      	neglt	r3, r3
 8007a18:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1c:	9307      	strge	r3, [sp, #28]
 8007a1e:	9307      	strlt	r3, [sp, #28]
 8007a20:	bfb8      	it	lt
 8007a22:	9204      	strlt	r2, [sp, #16]
 8007a24:	7823      	ldrb	r3, [r4, #0]
 8007a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a28:	d10a      	bne.n	8007a40 <_svfiprintf_r+0x130>
 8007a2a:	7863      	ldrb	r3, [r4, #1]
 8007a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a2e:	d132      	bne.n	8007a96 <_svfiprintf_r+0x186>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	3402      	adds	r4, #2
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	9203      	str	r2, [sp, #12]
 8007a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007af8 <_svfiprintf_r+0x1e8>
 8007a44:	2203      	movs	r2, #3
 8007a46:	4650      	mov	r0, sl
 8007a48:	7821      	ldrb	r1, [r4, #0]
 8007a4a:	f7fe fc20 	bl	800628e <memchr>
 8007a4e:	b138      	cbz	r0, 8007a60 <_svfiprintf_r+0x150>
 8007a50:	2240      	movs	r2, #64	@ 0x40
 8007a52:	9b04      	ldr	r3, [sp, #16]
 8007a54:	eba0 000a 	sub.w	r0, r0, sl
 8007a58:	4082      	lsls	r2, r0
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	3401      	adds	r4, #1
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	2206      	movs	r2, #6
 8007a66:	4825      	ldr	r0, [pc, #148]	@ (8007afc <_svfiprintf_r+0x1ec>)
 8007a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a6c:	f7fe fc0f 	bl	800628e <memchr>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d036      	beq.n	8007ae2 <_svfiprintf_r+0x1d2>
 8007a74:	4b22      	ldr	r3, [pc, #136]	@ (8007b00 <_svfiprintf_r+0x1f0>)
 8007a76:	bb1b      	cbnz	r3, 8007ac0 <_svfiprintf_r+0x1b0>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	3307      	adds	r3, #7
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	3308      	adds	r3, #8
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	4433      	add	r3, r6
 8007a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a8a:	e76a      	b.n	8007962 <_svfiprintf_r+0x52>
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	2001      	movs	r0, #1
 8007a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a94:	e7a8      	b.n	80079e8 <_svfiprintf_r+0xd8>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f04f 0c0a 	mov.w	ip, #10
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	3401      	adds	r4, #1
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa8:	3a30      	subs	r2, #48	@ 0x30
 8007aaa:	2a09      	cmp	r2, #9
 8007aac:	d903      	bls.n	8007ab6 <_svfiprintf_r+0x1a6>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0c6      	beq.n	8007a40 <_svfiprintf_r+0x130>
 8007ab2:	9105      	str	r1, [sp, #20]
 8007ab4:	e7c4      	b.n	8007a40 <_svfiprintf_r+0x130>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	2301      	movs	r3, #1
 8007aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007abe:	e7f0      	b.n	8007aa2 <_svfiprintf_r+0x192>
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	462a      	mov	r2, r5
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b04 <_svfiprintf_r+0x1f4>)
 8007aca:	a904      	add	r1, sp, #16
 8007acc:	f7fd fe7c 	bl	80057c8 <_printf_float>
 8007ad0:	1c42      	adds	r2, r0, #1
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	d1d6      	bne.n	8007a84 <_svfiprintf_r+0x174>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	065b      	lsls	r3, r3, #25
 8007ada:	f53f af2d 	bmi.w	8007938 <_svfiprintf_r+0x28>
 8007ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae0:	e72c      	b.n	800793c <_svfiprintf_r+0x2c>
 8007ae2:	ab03      	add	r3, sp, #12
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <_svfiprintf_r+0x1f4>)
 8007aec:	a904      	add	r1, sp, #16
 8007aee:	f7fe f909 	bl	8005d04 <_printf_i>
 8007af2:	e7ed      	b.n	8007ad0 <_svfiprintf_r+0x1c0>
 8007af4:	080098d0 	.word	0x080098d0
 8007af8:	080098d6 	.word	0x080098d6
 8007afc:	080098da 	.word	0x080098da
 8007b00:	080057c9 	.word	0x080057c9
 8007b04:	08007859 	.word	0x08007859

08007b08 <__sflush_r>:
 8007b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	0716      	lsls	r6, r2, #28
 8007b10:	4605      	mov	r5, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	d454      	bmi.n	8007bc0 <__sflush_r+0xb8>
 8007b16:	684b      	ldr	r3, [r1, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc02      	bgt.n	8007b22 <__sflush_r+0x1a>
 8007b1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dd48      	ble.n	8007bb4 <__sflush_r+0xac>
 8007b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	d045      	beq.n	8007bb4 <__sflush_r+0xac>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b2e:	682f      	ldr	r7, [r5, #0]
 8007b30:	6a21      	ldr	r1, [r4, #32]
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	d030      	beq.n	8007b98 <__sflush_r+0x90>
 8007b36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	0759      	lsls	r1, r3, #29
 8007b3c:	d505      	bpl.n	8007b4a <__sflush_r+0x42>
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	1ad2      	subs	r2, r2, r3
 8007b42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b44:	b10b      	cbz	r3, 8007b4a <__sflush_r+0x42>
 8007b46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b48:	1ad2      	subs	r2, r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b50:	6a21      	ldr	r1, [r4, #32]
 8007b52:	47b0      	blx	r6
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	d106      	bne.n	8007b68 <__sflush_r+0x60>
 8007b5a:	6829      	ldr	r1, [r5, #0]
 8007b5c:	291d      	cmp	r1, #29
 8007b5e:	d82b      	bhi.n	8007bb8 <__sflush_r+0xb0>
 8007b60:	4a28      	ldr	r2, [pc, #160]	@ (8007c04 <__sflush_r+0xfc>)
 8007b62:	40ca      	lsrs	r2, r1
 8007b64:	07d6      	lsls	r6, r2, #31
 8007b66:	d527      	bpl.n	8007bb8 <__sflush_r+0xb0>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	6062      	str	r2, [r4, #4]
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	04d9      	lsls	r1, r3, #19
 8007b70:	6022      	str	r2, [r4, #0]
 8007b72:	d504      	bpl.n	8007b7e <__sflush_r+0x76>
 8007b74:	1c42      	adds	r2, r0, #1
 8007b76:	d101      	bne.n	8007b7c <__sflush_r+0x74>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b903      	cbnz	r3, 8007b7e <__sflush_r+0x76>
 8007b7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b80:	602f      	str	r7, [r5, #0]
 8007b82:	b1b9      	cbz	r1, 8007bb4 <__sflush_r+0xac>
 8007b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b88:	4299      	cmp	r1, r3
 8007b8a:	d002      	beq.n	8007b92 <__sflush_r+0x8a>
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f7ff f9eb 	bl	8006f68 <_free_r>
 8007b92:	2300      	movs	r3, #0
 8007b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b96:	e00d      	b.n	8007bb4 <__sflush_r+0xac>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b0      	blx	r6
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	1c50      	adds	r0, r2, #1
 8007ba2:	d1c9      	bne.n	8007b38 <__sflush_r+0x30>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0c6      	beq.n	8007b38 <__sflush_r+0x30>
 8007baa:	2b1d      	cmp	r3, #29
 8007bac:	d001      	beq.n	8007bb2 <__sflush_r+0xaa>
 8007bae:	2b16      	cmp	r3, #22
 8007bb0:	d11d      	bne.n	8007bee <__sflush_r+0xe6>
 8007bb2:	602f      	str	r7, [r5, #0]
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e021      	b.n	8007bfc <__sflush_r+0xf4>
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbc:	b21b      	sxth	r3, r3
 8007bbe:	e01a      	b.n	8007bf6 <__sflush_r+0xee>
 8007bc0:	690f      	ldr	r7, [r1, #16]
 8007bc2:	2f00      	cmp	r7, #0
 8007bc4:	d0f6      	beq.n	8007bb4 <__sflush_r+0xac>
 8007bc6:	0793      	lsls	r3, r2, #30
 8007bc8:	bf18      	it	ne
 8007bca:	2300      	movne	r3, #0
 8007bcc:	680e      	ldr	r6, [r1, #0]
 8007bce:	bf08      	it	eq
 8007bd0:	694b      	ldreq	r3, [r1, #20]
 8007bd2:	1bf6      	subs	r6, r6, r7
 8007bd4:	600f      	str	r7, [r1, #0]
 8007bd6:	608b      	str	r3, [r1, #8]
 8007bd8:	2e00      	cmp	r6, #0
 8007bda:	ddeb      	ble.n	8007bb4 <__sflush_r+0xac>
 8007bdc:	4633      	mov	r3, r6
 8007bde:	463a      	mov	r2, r7
 8007be0:	4628      	mov	r0, r5
 8007be2:	6a21      	ldr	r1, [r4, #32]
 8007be4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007be8:	47e0      	blx	ip
 8007bea:	2800      	cmp	r0, #0
 8007bec:	dc07      	bgt.n	8007bfe <__sflush_r+0xf6>
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfe:	4407      	add	r7, r0
 8007c00:	1a36      	subs	r6, r6, r0
 8007c02:	e7e9      	b.n	8007bd8 <__sflush_r+0xd0>
 8007c04:	20400001 	.word	0x20400001

08007c08 <_fflush_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b913      	cbnz	r3, 8007c18 <_fflush_r+0x10>
 8007c12:	2500      	movs	r5, #0
 8007c14:	4628      	mov	r0, r5
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	b118      	cbz	r0, 8007c22 <_fflush_r+0x1a>
 8007c1a:	6a03      	ldr	r3, [r0, #32]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <_fflush_r+0x1a>
 8007c1e:	f7fe fa1b 	bl	8006058 <__sinit>
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0f3      	beq.n	8007c12 <_fflush_r+0xa>
 8007c2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c2c:	07d0      	lsls	r0, r2, #31
 8007c2e:	d404      	bmi.n	8007c3a <_fflush_r+0x32>
 8007c30:	0599      	lsls	r1, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_fflush_r+0x32>
 8007c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c36:	f7fe fb28 	bl	800628a <__retarget_lock_acquire_recursive>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7ff ff63 	bl	8007b08 <__sflush_r>
 8007c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c44:	4605      	mov	r5, r0
 8007c46:	07da      	lsls	r2, r3, #31
 8007c48:	d4e4      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	059b      	lsls	r3, r3, #22
 8007c4e:	d4e1      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c52:	f7fe fb1b 	bl	800628c <__retarget_lock_release_recursive>
 8007c56:	e7dd      	b.n	8007c14 <_fflush_r+0xc>

08007c58 <memmove>:
 8007c58:	4288      	cmp	r0, r1
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	eb01 0402 	add.w	r4, r1, r2
 8007c60:	d902      	bls.n	8007c68 <memmove+0x10>
 8007c62:	4284      	cmp	r4, r0
 8007c64:	4623      	mov	r3, r4
 8007c66:	d807      	bhi.n	8007c78 <memmove+0x20>
 8007c68:	1e43      	subs	r3, r0, #1
 8007c6a:	42a1      	cmp	r1, r4
 8007c6c:	d008      	beq.n	8007c80 <memmove+0x28>
 8007c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c76:	e7f8      	b.n	8007c6a <memmove+0x12>
 8007c78:	4601      	mov	r1, r0
 8007c7a:	4402      	add	r2, r0
 8007c7c:	428a      	cmp	r2, r1
 8007c7e:	d100      	bne.n	8007c82 <memmove+0x2a>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c8a:	e7f7      	b.n	8007c7c <memmove+0x24>

08007c8c <_sbrk_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4d05      	ldr	r5, [pc, #20]	@ (8007ca8 <_sbrk_r+0x1c>)
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f7fa fa36 	bl	8002108 <_sbrk>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_sbrk_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_sbrk_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	20000e48 	.word	0x20000e48

08007cac <memcpy>:
 8007cac:	440a      	add	r2, r1
 8007cae:	4291      	cmp	r1, r2
 8007cb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007cb4:	d100      	bne.n	8007cb8 <memcpy+0xc>
 8007cb6:	4770      	bx	lr
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cbe:	4291      	cmp	r1, r2
 8007cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc4:	d1f9      	bne.n	8007cba <memcpy+0xe>
 8007cc6:	bd10      	pop	{r4, pc}

08007cc8 <__assert_func>:
 8007cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cca:	4614      	mov	r4, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <__assert_func+0x2c>)
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68d8      	ldr	r0, [r3, #12]
 8007cd6:	b14c      	cbz	r4, 8007cec <__assert_func+0x24>
 8007cd8:	4b07      	ldr	r3, [pc, #28]	@ (8007cf8 <__assert_func+0x30>)
 8007cda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cde:	9100      	str	r1, [sp, #0]
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	4906      	ldr	r1, [pc, #24]	@ (8007cfc <__assert_func+0x34>)
 8007ce4:	f000 f870 	bl	8007dc8 <fiprintf>
 8007ce8:	f000 f880 	bl	8007dec <abort>
 8007cec:	4b04      	ldr	r3, [pc, #16]	@ (8007d00 <__assert_func+0x38>)
 8007cee:	461c      	mov	r4, r3
 8007cf0:	e7f3      	b.n	8007cda <__assert_func+0x12>
 8007cf2:	bf00      	nop
 8007cf4:	20000024 	.word	0x20000024
 8007cf8:	080098eb 	.word	0x080098eb
 8007cfc:	080098f8 	.word	0x080098f8
 8007d00:	08009926 	.word	0x08009926

08007d04 <_calloc_r>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	fba1 5402 	umull	r5, r4, r1, r2
 8007d0a:	b934      	cbnz	r4, 8007d1a <_calloc_r+0x16>
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7ff f99d 	bl	800704c <_malloc_r>
 8007d12:	4606      	mov	r6, r0
 8007d14:	b928      	cbnz	r0, 8007d22 <_calloc_r+0x1e>
 8007d16:	4630      	mov	r0, r6
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	220c      	movs	r2, #12
 8007d1c:	2600      	movs	r6, #0
 8007d1e:	6002      	str	r2, [r0, #0]
 8007d20:	e7f9      	b.n	8007d16 <_calloc_r+0x12>
 8007d22:	462a      	mov	r2, r5
 8007d24:	4621      	mov	r1, r4
 8007d26:	f7fe fa32 	bl	800618e <memset>
 8007d2a:	e7f4      	b.n	8007d16 <_calloc_r+0x12>

08007d2c <__ascii_mbtowc>:
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	b901      	cbnz	r1, 8007d32 <__ascii_mbtowc+0x6>
 8007d30:	a901      	add	r1, sp, #4
 8007d32:	b142      	cbz	r2, 8007d46 <__ascii_mbtowc+0x1a>
 8007d34:	b14b      	cbz	r3, 8007d4a <__ascii_mbtowc+0x1e>
 8007d36:	7813      	ldrb	r3, [r2, #0]
 8007d38:	600b      	str	r3, [r1, #0]
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	1e10      	subs	r0, r2, #0
 8007d3e:	bf18      	it	ne
 8007d40:	2001      	movne	r0, #1
 8007d42:	b002      	add	sp, #8
 8007d44:	4770      	bx	lr
 8007d46:	4610      	mov	r0, r2
 8007d48:	e7fb      	b.n	8007d42 <__ascii_mbtowc+0x16>
 8007d4a:	f06f 0001 	mvn.w	r0, #1
 8007d4e:	e7f8      	b.n	8007d42 <__ascii_mbtowc+0x16>

08007d50 <_realloc_r>:
 8007d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d54:	4607      	mov	r7, r0
 8007d56:	4614      	mov	r4, r2
 8007d58:	460d      	mov	r5, r1
 8007d5a:	b921      	cbnz	r1, 8007d66 <_realloc_r+0x16>
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	f7ff b973 	b.w	800704c <_malloc_r>
 8007d66:	b92a      	cbnz	r2, 8007d74 <_realloc_r+0x24>
 8007d68:	f7ff f8fe 	bl	8006f68 <_free_r>
 8007d6c:	4625      	mov	r5, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	f000 f841 	bl	8007dfa <_malloc_usable_size_r>
 8007d78:	4284      	cmp	r4, r0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	d802      	bhi.n	8007d84 <_realloc_r+0x34>
 8007d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d82:	d8f4      	bhi.n	8007d6e <_realloc_r+0x1e>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7ff f960 	bl	800704c <_malloc_r>
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	b908      	cbnz	r0, 8007d94 <_realloc_r+0x44>
 8007d90:	4645      	mov	r5, r8
 8007d92:	e7ec      	b.n	8007d6e <_realloc_r+0x1e>
 8007d94:	42b4      	cmp	r4, r6
 8007d96:	4622      	mov	r2, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	bf28      	it	cs
 8007d9c:	4632      	movcs	r2, r6
 8007d9e:	f7ff ff85 	bl	8007cac <memcpy>
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff f8df 	bl	8006f68 <_free_r>
 8007daa:	e7f1      	b.n	8007d90 <_realloc_r+0x40>

08007dac <__ascii_wctomb>:
 8007dac:	4603      	mov	r3, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	b141      	cbz	r1, 8007dc4 <__ascii_wctomb+0x18>
 8007db2:	2aff      	cmp	r2, #255	@ 0xff
 8007db4:	d904      	bls.n	8007dc0 <__ascii_wctomb+0x14>
 8007db6:	228a      	movs	r2, #138	@ 0x8a
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	4770      	bx	lr
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	700a      	strb	r2, [r1, #0]
 8007dc4:	4770      	bx	lr
	...

08007dc8 <fiprintf>:
 8007dc8:	b40e      	push	{r1, r2, r3}
 8007dca:	b503      	push	{r0, r1, lr}
 8007dcc:	4601      	mov	r1, r0
 8007dce:	ab03      	add	r3, sp, #12
 8007dd0:	4805      	ldr	r0, [pc, #20]	@ (8007de8 <fiprintf+0x20>)
 8007dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd6:	6800      	ldr	r0, [r0, #0]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	f000 f83d 	bl	8007e58 <_vfiprintf_r>
 8007dde:	b002      	add	sp, #8
 8007de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de4:	b003      	add	sp, #12
 8007de6:	4770      	bx	lr
 8007de8:	20000024 	.word	0x20000024

08007dec <abort>:
 8007dec:	2006      	movs	r0, #6
 8007dee:	b508      	push	{r3, lr}
 8007df0:	f000 fa06 	bl	8008200 <raise>
 8007df4:	2001      	movs	r0, #1
 8007df6:	f7fa f912 	bl	800201e <_exit>

08007dfa <_malloc_usable_size_r>:
 8007dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfe:	1f18      	subs	r0, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbc      	itt	lt
 8007e04:	580b      	ldrlt	r3, [r1, r0]
 8007e06:	18c0      	addlt	r0, r0, r3
 8007e08:	4770      	bx	lr

08007e0a <__sfputc_r>:
 8007e0a:	6893      	ldr	r3, [r2, #8]
 8007e0c:	b410      	push	{r4}
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	6093      	str	r3, [r2, #8]
 8007e14:	da07      	bge.n	8007e26 <__sfputc_r+0x1c>
 8007e16:	6994      	ldr	r4, [r2, #24]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	db01      	blt.n	8007e20 <__sfputc_r+0x16>
 8007e1c:	290a      	cmp	r1, #10
 8007e1e:	d102      	bne.n	8007e26 <__sfputc_r+0x1c>
 8007e20:	bc10      	pop	{r4}
 8007e22:	f000 b931 	b.w	8008088 <__swbuf_r>
 8007e26:	6813      	ldr	r3, [r2, #0]
 8007e28:	1c58      	adds	r0, r3, #1
 8007e2a:	6010      	str	r0, [r2, #0]
 8007e2c:	7019      	strb	r1, [r3, #0]
 8007e2e:	4608      	mov	r0, r1
 8007e30:	bc10      	pop	{r4}
 8007e32:	4770      	bx	lr

08007e34 <__sfputs_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	4606      	mov	r6, r0
 8007e38:	460f      	mov	r7, r1
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	18d5      	adds	r5, r2, r3
 8007e3e:	42ac      	cmp	r4, r5
 8007e40:	d101      	bne.n	8007e46 <__sfputs_r+0x12>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e007      	b.n	8007e56 <__sfputs_r+0x22>
 8007e46:	463a      	mov	r2, r7
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	f7ff ffdc 	bl	8007e0a <__sfputc_r>
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	d1f3      	bne.n	8007e3e <__sfputs_r+0xa>
 8007e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e58 <_vfiprintf_r>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	460d      	mov	r5, r1
 8007e5e:	4614      	mov	r4, r2
 8007e60:	4698      	mov	r8, r3
 8007e62:	4606      	mov	r6, r0
 8007e64:	b09d      	sub	sp, #116	@ 0x74
 8007e66:	b118      	cbz	r0, 8007e70 <_vfiprintf_r+0x18>
 8007e68:	6a03      	ldr	r3, [r0, #32]
 8007e6a:	b90b      	cbnz	r3, 8007e70 <_vfiprintf_r+0x18>
 8007e6c:	f7fe f8f4 	bl	8006058 <__sinit>
 8007e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_vfiprintf_r+0x2a>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_vfiprintf_r+0x2a>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e7e:	f7fe fa04 	bl	800628a <__retarget_lock_acquire_recursive>
 8007e82:	89ab      	ldrh	r3, [r5, #12]
 8007e84:	071b      	lsls	r3, r3, #28
 8007e86:	d501      	bpl.n	8007e8c <_vfiprintf_r+0x34>
 8007e88:	692b      	ldr	r3, [r5, #16]
 8007e8a:	b99b      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x5c>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f938 	bl	8008104 <__swsetup_r>
 8007e94:	b170      	cbz	r0, 8007eb4 <_vfiprintf_r+0x5c>
 8007e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e98:	07dc      	lsls	r4, r3, #31
 8007e9a:	d504      	bpl.n	8007ea6 <_vfiprintf_r+0x4e>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ea0:	b01d      	add	sp, #116	@ 0x74
 8007ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	0598      	lsls	r0, r3, #22
 8007eaa:	d4f7      	bmi.n	8007e9c <_vfiprintf_r+0x44>
 8007eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eae:	f7fe f9ed 	bl	800628c <__retarget_lock_release_recursive>
 8007eb2:	e7f3      	b.n	8007e9c <_vfiprintf_r+0x44>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ebe:	2330      	movs	r3, #48	@ 0x30
 8007ec0:	f04f 0901 	mov.w	r9, #1
 8007ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008074 <_vfiprintf_r+0x21c>
 8007ecc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	469a      	mov	sl, r3
 8007ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed8:	b10a      	cbz	r2, 8007ede <_vfiprintf_r+0x86>
 8007eda:	2a25      	cmp	r2, #37	@ 0x25
 8007edc:	d1f9      	bne.n	8007ed2 <_vfiprintf_r+0x7a>
 8007ede:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee2:	d00b      	beq.n	8007efc <_vfiprintf_r+0xa4>
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7ff ffa2 	bl	8007e34 <__sfputs_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f000 80a7 	beq.w	8008044 <_vfiprintf_r+0x1ec>
 8007ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef8:	445a      	add	r2, fp
 8007efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007efc:	f89a 3000 	ldrb.w	r3, [sl]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 809f 	beq.w	8008044 <_vfiprintf_r+0x1ec>
 8007f06:	2300      	movs	r3, #0
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f10:	f10a 0a01 	add.w	sl, sl, #1
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	9307      	str	r3, [sp, #28]
 8007f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f1e:	4654      	mov	r4, sl
 8007f20:	2205      	movs	r2, #5
 8007f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f26:	4853      	ldr	r0, [pc, #332]	@ (8008074 <_vfiprintf_r+0x21c>)
 8007f28:	f7fe f9b1 	bl	800628e <memchr>
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	b9d8      	cbnz	r0, 8007f68 <_vfiprintf_r+0x110>
 8007f30:	06d1      	lsls	r1, r2, #27
 8007f32:	bf44      	itt	mi
 8007f34:	2320      	movmi	r3, #32
 8007f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f3a:	0713      	lsls	r3, r2, #28
 8007f3c:	bf44      	itt	mi
 8007f3e:	232b      	movmi	r3, #43	@ 0x2b
 8007f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f44:	f89a 3000 	ldrb.w	r3, [sl]
 8007f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f4a:	d015      	beq.n	8007f78 <_vfiprintf_r+0x120>
 8007f4c:	4654      	mov	r4, sl
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f04f 0c0a 	mov.w	ip, #10
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	4621      	mov	r1, r4
 8007f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f5c:	3b30      	subs	r3, #48	@ 0x30
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d94b      	bls.n	8007ffa <_vfiprintf_r+0x1a2>
 8007f62:	b1b0      	cbz	r0, 8007f92 <_vfiprintf_r+0x13a>
 8007f64:	9207      	str	r2, [sp, #28]
 8007f66:	e014      	b.n	8007f92 <_vfiprintf_r+0x13a>
 8007f68:	eba0 0308 	sub.w	r3, r0, r8
 8007f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	46a2      	mov	sl, r4
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	e7d2      	b.n	8007f1e <_vfiprintf_r+0xc6>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	1d19      	adds	r1, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	9103      	str	r1, [sp, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfbb      	ittet	lt
 8007f84:	425b      	neglt	r3, r3
 8007f86:	f042 0202 	orrlt.w	r2, r2, #2
 8007f8a:	9307      	strge	r3, [sp, #28]
 8007f8c:	9307      	strlt	r3, [sp, #28]
 8007f8e:	bfb8      	it	lt
 8007f90:	9204      	strlt	r2, [sp, #16]
 8007f92:	7823      	ldrb	r3, [r4, #0]
 8007f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f96:	d10a      	bne.n	8007fae <_vfiprintf_r+0x156>
 8007f98:	7863      	ldrb	r3, [r4, #1]
 8007f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f9c:	d132      	bne.n	8008004 <_vfiprintf_r+0x1ac>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	3402      	adds	r4, #2
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	9203      	str	r2, [sp, #12]
 8007fa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008078 <_vfiprintf_r+0x220>
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	7821      	ldrb	r1, [r4, #0]
 8007fb8:	f7fe f969 	bl	800628e <memchr>
 8007fbc:	b138      	cbz	r0, 8007fce <_vfiprintf_r+0x176>
 8007fbe:	2240      	movs	r2, #64	@ 0x40
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	eba0 000a 	sub.w	r0, r0, sl
 8007fc6:	4082      	lsls	r2, r0
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	3401      	adds	r4, #1
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	2206      	movs	r2, #6
 8007fd4:	4829      	ldr	r0, [pc, #164]	@ (800807c <_vfiprintf_r+0x224>)
 8007fd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fda:	f7fe f958 	bl	800628e <memchr>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d03f      	beq.n	8008062 <_vfiprintf_r+0x20a>
 8007fe2:	4b27      	ldr	r3, [pc, #156]	@ (8008080 <_vfiprintf_r+0x228>)
 8007fe4:	bb1b      	cbnz	r3, 800802e <_vfiprintf_r+0x1d6>
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	3307      	adds	r3, #7
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	3308      	adds	r3, #8
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	443b      	add	r3, r7
 8007ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff8:	e76a      	b.n	8007ed0 <_vfiprintf_r+0x78>
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008002:	e7a8      	b.n	8007f56 <_vfiprintf_r+0xfe>
 8008004:	2300      	movs	r3, #0
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	4619      	mov	r1, r3
 800800c:	3401      	adds	r4, #1
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	4620      	mov	r0, r4
 8008012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008016:	3a30      	subs	r2, #48	@ 0x30
 8008018:	2a09      	cmp	r2, #9
 800801a:	d903      	bls.n	8008024 <_vfiprintf_r+0x1cc>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0c6      	beq.n	8007fae <_vfiprintf_r+0x156>
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	e7c4      	b.n	8007fae <_vfiprintf_r+0x156>
 8008024:	4604      	mov	r4, r0
 8008026:	2301      	movs	r3, #1
 8008028:	fb0c 2101 	mla	r1, ip, r1, r2
 800802c:	e7f0      	b.n	8008010 <_vfiprintf_r+0x1b8>
 800802e:	ab03      	add	r3, sp, #12
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462a      	mov	r2, r5
 8008034:	4630      	mov	r0, r6
 8008036:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <_vfiprintf_r+0x22c>)
 8008038:	a904      	add	r1, sp, #16
 800803a:	f7fd fbc5 	bl	80057c8 <_printf_float>
 800803e:	4607      	mov	r7, r0
 8008040:	1c78      	adds	r0, r7, #1
 8008042:	d1d6      	bne.n	8007ff2 <_vfiprintf_r+0x19a>
 8008044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008046:	07d9      	lsls	r1, r3, #31
 8008048:	d405      	bmi.n	8008056 <_vfiprintf_r+0x1fe>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	059a      	lsls	r2, r3, #22
 800804e:	d402      	bmi.n	8008056 <_vfiprintf_r+0x1fe>
 8008050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008052:	f7fe f91b 	bl	800628c <__retarget_lock_release_recursive>
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	065b      	lsls	r3, r3, #25
 800805a:	f53f af1f 	bmi.w	8007e9c <_vfiprintf_r+0x44>
 800805e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008060:	e71e      	b.n	8007ea0 <_vfiprintf_r+0x48>
 8008062:	ab03      	add	r3, sp, #12
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	462a      	mov	r2, r5
 8008068:	4630      	mov	r0, r6
 800806a:	4b06      	ldr	r3, [pc, #24]	@ (8008084 <_vfiprintf_r+0x22c>)
 800806c:	a904      	add	r1, sp, #16
 800806e:	f7fd fe49 	bl	8005d04 <_printf_i>
 8008072:	e7e4      	b.n	800803e <_vfiprintf_r+0x1e6>
 8008074:	080098d0 	.word	0x080098d0
 8008078:	080098d6 	.word	0x080098d6
 800807c:	080098da 	.word	0x080098da
 8008080:	080057c9 	.word	0x080057c9
 8008084:	08007e35 	.word	0x08007e35

08008088 <__swbuf_r>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	4614      	mov	r4, r2
 800808e:	4605      	mov	r5, r0
 8008090:	b118      	cbz	r0, 800809a <__swbuf_r+0x12>
 8008092:	6a03      	ldr	r3, [r0, #32]
 8008094:	b90b      	cbnz	r3, 800809a <__swbuf_r+0x12>
 8008096:	f7fd ffdf 	bl	8006058 <__sinit>
 800809a:	69a3      	ldr	r3, [r4, #24]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	d501      	bpl.n	80080a8 <__swbuf_r+0x20>
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	b943      	cbnz	r3, 80080ba <__swbuf_r+0x32>
 80080a8:	4621      	mov	r1, r4
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 f82a 	bl	8008104 <__swsetup_r>
 80080b0:	b118      	cbz	r0, 80080ba <__swbuf_r+0x32>
 80080b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80080b6:	4638      	mov	r0, r7
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	6922      	ldr	r2, [r4, #16]
 80080be:	b2f6      	uxtb	r6, r6
 80080c0:	1a98      	subs	r0, r3, r2
 80080c2:	6963      	ldr	r3, [r4, #20]
 80080c4:	4637      	mov	r7, r6
 80080c6:	4283      	cmp	r3, r0
 80080c8:	dc05      	bgt.n	80080d6 <__swbuf_r+0x4e>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f7ff fd9b 	bl	8007c08 <_fflush_r>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1ed      	bne.n	80080b2 <__swbuf_r+0x2a>
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	3b01      	subs	r3, #1
 80080da:	60a3      	str	r3, [r4, #8]
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	701e      	strb	r6, [r3, #0]
 80080e4:	6962      	ldr	r2, [r4, #20]
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d004      	beq.n	80080f6 <__swbuf_r+0x6e>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	07db      	lsls	r3, r3, #31
 80080f0:	d5e1      	bpl.n	80080b6 <__swbuf_r+0x2e>
 80080f2:	2e0a      	cmp	r6, #10
 80080f4:	d1df      	bne.n	80080b6 <__swbuf_r+0x2e>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4628      	mov	r0, r5
 80080fa:	f7ff fd85 	bl	8007c08 <_fflush_r>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d0d9      	beq.n	80080b6 <__swbuf_r+0x2e>
 8008102:	e7d6      	b.n	80080b2 <__swbuf_r+0x2a>

08008104 <__swsetup_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4b29      	ldr	r3, [pc, #164]	@ (80081ac <__swsetup_r+0xa8>)
 8008108:	4605      	mov	r5, r0
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	460c      	mov	r4, r1
 800810e:	b118      	cbz	r0, 8008118 <__swsetup_r+0x14>
 8008110:	6a03      	ldr	r3, [r0, #32]
 8008112:	b90b      	cbnz	r3, 8008118 <__swsetup_r+0x14>
 8008114:	f7fd ffa0 	bl	8006058 <__sinit>
 8008118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811c:	0719      	lsls	r1, r3, #28
 800811e:	d422      	bmi.n	8008166 <__swsetup_r+0x62>
 8008120:	06da      	lsls	r2, r3, #27
 8008122:	d407      	bmi.n	8008134 <__swsetup_r+0x30>
 8008124:	2209      	movs	r2, #9
 8008126:	602a      	str	r2, [r5, #0]
 8008128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	e033      	b.n	800819c <__swsetup_r+0x98>
 8008134:	0758      	lsls	r0, r3, #29
 8008136:	d512      	bpl.n	800815e <__swsetup_r+0x5a>
 8008138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800813a:	b141      	cbz	r1, 800814e <__swsetup_r+0x4a>
 800813c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <__swsetup_r+0x46>
 8008144:	4628      	mov	r0, r5
 8008146:	f7fe ff0f 	bl	8006f68 <_free_r>
 800814a:	2300      	movs	r3, #0
 800814c:	6363      	str	r3, [r4, #52]	@ 0x34
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	2300      	movs	r3, #0
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f043 0308 	orr.w	r3, r3, #8
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	b94b      	cbnz	r3, 800817e <__swsetup_r+0x7a>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008174:	d003      	beq.n	800817e <__swsetup_r+0x7a>
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	f000 f882 	bl	8008282 <__smakebuf_r>
 800817e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008182:	f013 0201 	ands.w	r2, r3, #1
 8008186:	d00a      	beq.n	800819e <__swsetup_r+0x9a>
 8008188:	2200      	movs	r2, #0
 800818a:	60a2      	str	r2, [r4, #8]
 800818c:	6962      	ldr	r2, [r4, #20]
 800818e:	4252      	negs	r2, r2
 8008190:	61a2      	str	r2, [r4, #24]
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	b942      	cbnz	r2, 80081a8 <__swsetup_r+0xa4>
 8008196:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800819a:	d1c5      	bne.n	8008128 <__swsetup_r+0x24>
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	0799      	lsls	r1, r3, #30
 80081a0:	bf58      	it	pl
 80081a2:	6962      	ldrpl	r2, [r4, #20]
 80081a4:	60a2      	str	r2, [r4, #8]
 80081a6:	e7f4      	b.n	8008192 <__swsetup_r+0x8e>
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7f7      	b.n	800819c <__swsetup_r+0x98>
 80081ac:	20000024 	.word	0x20000024

080081b0 <_raise_r>:
 80081b0:	291f      	cmp	r1, #31
 80081b2:	b538      	push	{r3, r4, r5, lr}
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	d904      	bls.n	80081c4 <_raise_r+0x14>
 80081ba:	2316      	movs	r3, #22
 80081bc:	6003      	str	r3, [r0, #0]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081c6:	b112      	cbz	r2, 80081ce <_raise_r+0x1e>
 80081c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081cc:	b94b      	cbnz	r3, 80081e2 <_raise_r+0x32>
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f830 	bl	8008234 <_getpid_r>
 80081d4:	4622      	mov	r2, r4
 80081d6:	4601      	mov	r1, r0
 80081d8:	4628      	mov	r0, r5
 80081da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081de:	f000 b817 	b.w	8008210 <_kill_r>
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d00a      	beq.n	80081fc <_raise_r+0x4c>
 80081e6:	1c59      	adds	r1, r3, #1
 80081e8:	d103      	bne.n	80081f2 <_raise_r+0x42>
 80081ea:	2316      	movs	r3, #22
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	2001      	movs	r0, #1
 80081f0:	e7e7      	b.n	80081c2 <_raise_r+0x12>
 80081f2:	2100      	movs	r1, #0
 80081f4:	4620      	mov	r0, r4
 80081f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081fa:	4798      	blx	r3
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7e0      	b.n	80081c2 <_raise_r+0x12>

08008200 <raise>:
 8008200:	4b02      	ldr	r3, [pc, #8]	@ (800820c <raise+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	f7ff bfd3 	b.w	80081b0 <_raise_r>
 800820a:	bf00      	nop
 800820c:	20000024 	.word	0x20000024

08008210 <_kill_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	2300      	movs	r3, #0
 8008214:	4d06      	ldr	r5, [pc, #24]	@ (8008230 <_kill_r+0x20>)
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	f7f9 feee 	bl	8001ffe <_kill>
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	d102      	bne.n	800822c <_kill_r+0x1c>
 8008226:	682b      	ldr	r3, [r5, #0]
 8008228:	b103      	cbz	r3, 800822c <_kill_r+0x1c>
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	bf00      	nop
 8008230:	20000e48 	.word	0x20000e48

08008234 <_getpid_r>:
 8008234:	f7f9 bedc 	b.w	8001ff0 <_getpid>

08008238 <__swhatbuf_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	4615      	mov	r5, r2
 8008242:	2900      	cmp	r1, #0
 8008244:	461e      	mov	r6, r3
 8008246:	b096      	sub	sp, #88	@ 0x58
 8008248:	da0c      	bge.n	8008264 <__swhatbuf_r+0x2c>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	2100      	movs	r1, #0
 800824e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008252:	bf14      	ite	ne
 8008254:	2340      	movne	r3, #64	@ 0x40
 8008256:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800825a:	2000      	movs	r0, #0
 800825c:	6031      	str	r1, [r6, #0]
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	b016      	add	sp, #88	@ 0x58
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	466a      	mov	r2, sp
 8008266:	f000 f849 	bl	80082fc <_fstat_r>
 800826a:	2800      	cmp	r0, #0
 800826c:	dbed      	blt.n	800824a <__swhatbuf_r+0x12>
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008274:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008278:	4259      	negs	r1, r3
 800827a:	4159      	adcs	r1, r3
 800827c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008280:	e7eb      	b.n	800825a <__swhatbuf_r+0x22>

08008282 <__smakebuf_r>:
 8008282:	898b      	ldrh	r3, [r1, #12]
 8008284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008286:	079d      	lsls	r5, r3, #30
 8008288:	4606      	mov	r6, r0
 800828a:	460c      	mov	r4, r1
 800828c:	d507      	bpl.n	800829e <__smakebuf_r+0x1c>
 800828e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	2301      	movs	r3, #1
 8008298:	6163      	str	r3, [r4, #20]
 800829a:	b003      	add	sp, #12
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829e:	466a      	mov	r2, sp
 80082a0:	ab01      	add	r3, sp, #4
 80082a2:	f7ff ffc9 	bl	8008238 <__swhatbuf_r>
 80082a6:	9f00      	ldr	r7, [sp, #0]
 80082a8:	4605      	mov	r5, r0
 80082aa:	4639      	mov	r1, r7
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7fe fecd 	bl	800704c <_malloc_r>
 80082b2:	b948      	cbnz	r0, 80082c8 <__smakebuf_r+0x46>
 80082b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b8:	059a      	lsls	r2, r3, #22
 80082ba:	d4ee      	bmi.n	800829a <__smakebuf_r+0x18>
 80082bc:	f023 0303 	bic.w	r3, r3, #3
 80082c0:	f043 0302 	orr.w	r3, r3, #2
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	e7e2      	b.n	800828e <__smakebuf_r+0xc>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	6020      	str	r0, [r4, #0]
 80082d8:	b15b      	cbz	r3, 80082f2 <__smakebuf_r+0x70>
 80082da:	4630      	mov	r0, r6
 80082dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e0:	f000 f81e 	bl	8008320 <_isatty_r>
 80082e4:	b128      	cbz	r0, 80082f2 <__smakebuf_r+0x70>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f023 0303 	bic.w	r3, r3, #3
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	431d      	orrs	r5, r3
 80082f6:	81a5      	strh	r5, [r4, #12]
 80082f8:	e7cf      	b.n	800829a <__smakebuf_r+0x18>
	...

080082fc <_fstat_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	2300      	movs	r3, #0
 8008300:	4d06      	ldr	r5, [pc, #24]	@ (800831c <_fstat_r+0x20>)
 8008302:	4604      	mov	r4, r0
 8008304:	4608      	mov	r0, r1
 8008306:	4611      	mov	r1, r2
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	f7f9 fed7 	bl	80020bc <_fstat>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d102      	bne.n	8008318 <_fstat_r+0x1c>
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	b103      	cbz	r3, 8008318 <_fstat_r+0x1c>
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	bd38      	pop	{r3, r4, r5, pc}
 800831a:	bf00      	nop
 800831c:	20000e48 	.word	0x20000e48

08008320 <_isatty_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	2300      	movs	r3, #0
 8008324:	4d05      	ldr	r5, [pc, #20]	@ (800833c <_isatty_r+0x1c>)
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	f7f9 fed5 	bl	80020da <_isatty>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_isatty_r+0x1a>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_isatty_r+0x1a>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000e48 	.word	0x20000e48

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
