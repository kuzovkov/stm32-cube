
adxl_345_spi_tap_detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a74  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025d0  08008b88  08008b88  00009b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b158  0800b158  0000d1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b158  0800b158  0000c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b160  0800b160  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b160  0800b160  0000c160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b164  0800b164  0000c164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b168  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e0  200001e8  0800b350  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200016c8  0800b350  0000d6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9c  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261a  00000000  00000000  0001cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000192e4  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010694  00000000  00000000  000397b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f15c  00000000  00000000  00049e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d8fa4  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000c79  00000000  00000000  000d8fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000565c  00000000  00000000  000d9c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000df2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b6c 	.word	0x08008b6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008b6c 	.word	0x08008b6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <ADXL345_CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Функции работы с CS
void ADXL345_CS_Select()   { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET); }
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa2:	4802      	ldr	r0, [pc, #8]	@ (8000fac <ADXL345_CS_Select+0x14>)
 8000fa4:	f002 f86e 	bl	8003084 <HAL_GPIO_WritePin>
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <ADXL345_CS_Deselect>:
void ADXL345_CS_Deselect() { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); }
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fba:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <ADXL345_CS_Deselect+0x14>)
 8000fbc:	f002 f862 	bl	8003084 <HAL_GPIO_WritePin>
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <ADXL345_WriteReg>:

// Функции SPI записи/чтения
void ADXL345_WriteReg(uint8_t reg, uint8_t data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg & 0x3F, data};  // MSB=0 для записи
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	733b      	strb	r3, [r7, #12]
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	737b      	strb	r3, [r7, #13]
    ADXL345_CS_Select();
 8000fe6:	f7ff ffd7 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <ADXL345_WriteReg+0x40>)
 8000ff6:	f002 fd09 	bl	8003a0c <HAL_SPI_Transmit>
    ADXL345_CS_Deselect();
 8000ffa:	f7ff ffd9 	bl	8000fb0 <ADXL345_CS_Deselect>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000025c 	.word	0x2000025c

0800100c <ADXL345_ReadAxes>:
    HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, HAL_MAX_DELAY);
    ADXL345_CS_Deselect();
    return rx;
}

void ADXL345_ReadAxes(int16_t* x, int16_t* y, int16_t* z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    uint8_t tx[7];
    uint8_t rx[7];
    tx[0] = 0x80 | 0x40 | 0x32; // чтение многобайтно с DATAX0
 8001018:	23f2      	movs	r3, #242	@ 0xf2
 800101a:	773b      	strb	r3, [r7, #28]
    for(int i=1; i<7; i++) tx[i]=0x00;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001020:	e008      	b.n	8001034 <ADXL345_ReadAxes+0x28>
 8001022:	f107 021c 	add.w	r2, r7, #28
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	2b06      	cmp	r3, #6
 8001038:	ddf3      	ble.n	8001022 <ADXL345_ReadAxes+0x16>

    ADXL345_CS_Select();
 800103a:	f7ff ffad 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 7, HAL_MAX_DELAY);
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	f107 011c 	add.w	r1, r7, #28
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2307      	movs	r3, #7
 800104e:	4813      	ldr	r0, [pc, #76]	@ (800109c <ADXL345_ReadAxes+0x90>)
 8001050:	f002 ff39 	bl	8003ec6 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001054:	f7ff ffac 	bl	8000fb0 <ADXL345_CS_Deselect>

    *x = (int16_t)((rx[2]<<8)|rx[1]);
 8001058:	7dbb      	ldrb	r3, [r7, #22]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7d7b      	ldrb	r3, [r7, #21]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((rx[4]<<8)|rx[3]);
 800106c:	7e3b      	ldrb	r3, [r7, #24]
 800106e:	b21b      	sxth	r3, r3
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((rx[6]<<8)|rx[5]);
 8001080:	7ebb      	ldrb	r3, [r7, #26]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000025c 	.word	0x2000025c

080010a0 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | 0x80; // R/W=1
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS LOW
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010be:	480f      	ldr	r0, [pc, #60]	@ (80010fc <ADXL_ReadReg+0x5c>)
 80010c0:	f001 ffe0 	bl	8003084 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx, 1, HAL_MAX_DELAY);       // отправили адрес
 80010c4:	f107 010f 	add.w	r1, r7, #15
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010cc:	2201      	movs	r2, #1
 80010ce:	480c      	ldr	r0, [pc, #48]	@ (8001100 <ADXL_ReadReg+0x60>)
 80010d0:	f002 fc9c 	bl	8003a0c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx, 1, HAL_MAX_DELAY);        // читаем 1 байт
 80010d4:	f107 010e 	add.w	r1, r7, #14
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010dc:	2201      	movs	r2, #1
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <ADXL_ReadReg+0x60>)
 80010e0:	f002 fdd8 	bl	8003c94 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // CS HIGH
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <ADXL_ReadReg+0x5c>)
 80010ec:	f001 ffca 	bl	8003084 <HAL_GPIO_WritePin>

    return rx;
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	2000025c 	.word	0x2000025c

08001104 <ADXL345_Init>:
// Инициализация ADXL345
/* Инициализация ADXL345 */
/* Примечание: здесь устанавливаем full resolution и диапазон ±16g (DATA_FORMAT = 0x0B),
   включаем измерения POWER_CTL = 0x08.
   При желании можно настроить частоту в регистре BW_RATE (0x2C) */
void ADXL345_Init(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 8001108:	200a      	movs	r0, #10
 800110a:	f001 fa63 	bl	80025d4 <HAL_Delay>
    ADXL345_WriteReg(0x2D, 0x00); // сброс POWER_CTL чтобы быть уверенным
 800110e:	2100      	movs	r1, #0
 8001110:	202d      	movs	r0, #45	@ 0x2d
 8001112:	f7ff ff59 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 8001116:	2005      	movs	r0, #5
 8001118:	f001 fa5c 	bl	80025d4 <HAL_Delay>
    ADXL345_WriteReg(0x31, 0x0B); // DATA_FORMAT: FULL_RES=1, range=11 (±16g)
 800111c:	210b      	movs	r1, #11
 800111e:	2031      	movs	r0, #49	@ 0x31
 8001120:	f7ff ff52 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(2);
 8001124:	2002      	movs	r0, #2
 8001126:	f001 fa55 	bl	80025d4 <HAL_Delay>
    // опционально: установить скорость выборки (BW_RATE). По умолчанию 100 Hz.
    ADXL345_WriteReg(0x2C, 0x0D); // пример: установить 100 Hz (см. datasheet для нужного значения)
 800112a:	210d      	movs	r1, #13
 800112c:	202c      	movs	r0, #44	@ 0x2c
 800112e:	f7ff ff4b 	bl	8000fc8 <ADXL345_WriteReg>
    ADXL345_WriteReg(0x2D, 0x08); // POWER_CTL: Measure = 1
 8001132:	2108      	movs	r1, #8
 8001134:	202d      	movs	r0, #45	@ 0x2d
 8001136:	f7ff ff47 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 800113a:	2005      	movs	r0, #5
 800113c:	f001 fa4a 	bl	80025d4 <HAL_Delay>

    // --- Настройка Tap ---
	ADXL345_WriteReg(0x1D, 0x10); // THRESH_TAP ~ 3g (48*62.5mg)
 8001140:	2110      	movs	r1, #16
 8001142:	201d      	movs	r0, #29
 8001144:	f7ff ff40 	bl	8000fc8 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x21, 0x10); // DUR ~ 6.25ms
 8001148:	2110      	movs	r1, #16
 800114a:	2021      	movs	r0, #33	@ 0x21
 800114c:	f7ff ff3c 	bl	8000fc8 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x2A, 0x07); // TAP_AXES: X,Y,Z
 8001150:	2107      	movs	r1, #7
 8001152:	202a      	movs	r0, #42	@ 0x2a
 8001154:	f7ff ff38 	bl	8000fc8 <ADXL345_WriteReg>

	// --- Настройка прерываний ---
	ADXL345_WriteReg(0x2E, 0x40); // INT_ENABLE: bit6=SingleTap
 8001158:	2140      	movs	r1, #64	@ 0x40
 800115a:	202e      	movs	r0, #46	@ 0x2e
 800115c:	f7ff ff34 	bl	8000fc8 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x2F, 0x00); // INT_MAP: SingleTap → INT1
 8001160:	2100      	movs	r1, #0
 8001162:	202f      	movs	r0, #47	@ 0x2f
 8001164:	f7ff ff30 	bl	8000fc8 <ADXL345_WriteReg>

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <ADXL345_ReadID>:
#define IMPACT_THRESHOLD_G 6.0f     // порог в g (пример: 6g — подбери экспериментально)
#define IMPACT_DEBOUNCE_MS 200      // окно, в течение которого игнорируем новые пики (ms)
#define SAMPLE_PERIOD_MS 10          // период опроса в ms (зависит от BW_RATE)

//Получение ID устройства, должно вывести 0xE5 (проверка устройства)
uint8_t ADXL345_ReadID() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af02      	add	r7, sp, #8
    uint8_t tx[2] = {0x80 | 0x00, 0x00}; // запрос регистра 0x00
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	80bb      	strh	r3, [r7, #4]
    uint8_t rx[2] = {0};
 8001176:	2300      	movs	r3, #0
 8001178:	803b      	strh	r3, [r7, #0]
    ADXL345_CS_Select();
 800117a:	f7ff ff0d 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 2, HAL_MAX_DELAY);
 800117e:	463a      	mov	r2, r7
 8001180:	1d39      	adds	r1, r7, #4
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2302      	movs	r3, #2
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <ADXL345_ReadID+0x34>)
 800118c:	f002 fe9b 	bl	8003ec6 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001190:	f7ff ff0e 	bl	8000fb0 <ADXL345_CS_Deselect>
    return rx[1]; // второй байт = ответ
 8001194:	787b      	ldrb	r3, [r7, #1]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000025c 	.word	0x2000025c

080011a4 <HAL_GPIO_EXTI_Callback>:
//           gx, gy, gz, ax_ms2, ay_ms2, az_ms2, peaks.max_g_x, peaks.max_g_y, peaks.max_g_z);
//    HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b0a4      	sub	sp, #144	@ 0x90
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	int16_t rx, ry, rz;
	char message[128];

	strcpy(message, "HAL_GPIO_EXTI_Callback");
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_GPIO_EXTI_Callback+0x78>)
 80011b4:	461c      	mov	r4, r3
 80011b6:	4615      	mov	r5, r2
 80011b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c0:	6020      	str	r0, [r4, #0]
 80011c2:	3404      	adds	r4, #4
 80011c4:	8021      	strh	r1, [r4, #0]
 80011c6:	3402      	adds	r4, #2
 80011c8:	0c0b      	lsrs	r3, r1, #16
 80011ca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7fe ffbd 	bl	8000150 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f107 010c 	add.w	r1, r7, #12
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e2:	480f      	ldr	r0, [pc, #60]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011e4:	f003 ffac 	bl	8005140 <HAL_UART_Transmit>
	if (GPIO_Pin == GPIO_PIN_0) {
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d111      	bne.n	8001212 <HAL_GPIO_EXTI_Callback+0x6e>
        // Чтение INT_SOURCE для сброса флага
        uint8_t src = ADXL_ReadReg(0x30);
 80011ee:	2030      	movs	r0, #48	@ 0x30
 80011f0:	f7ff ff56 	bl	80010a0 <ADXL_ReadReg>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (src & 0x40) { // bit6 = SINGLE_TAP
 80011fa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80011fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_EXTI_Callback+0x6e>
        	recording = 1;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x80>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
            sample_index = 0;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x84>)
 800120e:	2200      	movs	r2, #0
 8001210:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8001212:	bf00      	nop
 8001214:	3790      	adds	r7, #144	@ 0x90
 8001216:	46bd      	mov	sp, r7
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	bf00      	nop
 800121c:	08008c08 	.word	0x08008c08
 8001220:	200003c8 	.word	0x200003c8
 8001224:	20000410 	.word	0x20000410
 8001228:	20000412 	.word	0x20000412

0800122c <HAL_TIM_PeriodElapsedCallback>:

// --- таймер для дискретизации ---
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b0d4      	sub	sp, #336	@ 0x150
 8001230:	af04      	add	r7, sp, #16
 8001232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001236:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800123a:	6018      	str	r0, [r3, #0]
    char message[128];
    char message_display[128];

	if (htim->Instance == TIM2) {
 800123c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001240:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	f040 815f 	bne.w	800150e <HAL_TIM_PeriodElapsedCallback+0x2e2>
        if (recording && sample_index < SAMPLE_COUNT) {
 8001250:	4bb1      	ldr	r3, [pc, #708]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8159 	beq.w	800150e <HAL_TIM_PeriodElapsedCallback+0x2e2>
 800125c:	4baf      	ldr	r3, [pc, #700]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	2bff      	cmp	r3, #255	@ 0xff
 8001264:	f200 8153 	bhi.w	800150e <HAL_TIM_PeriodElapsedCallback+0x2e2>
            int16_t x, y, z;
            ADXL345_ReadAxes(&x, &y, &z);
 8001268:	f107 020e 	add.w	r2, r7, #14
 800126c:	f107 0110 	add.w	r1, r7, #16
 8001270:	f107 0312 	add.w	r3, r7, #18
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fec9 	bl	800100c <ADXL345_ReadAxes>
            // Преобразование raw -> g -> m/s^2
			float gx = (float)x * ADXL_SCALE_G;
 800127a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800127e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fdbc 	bl	8000e04 <__aeabi_i2f>
 800128c:	4603      	mov	r3, r0
 800128e:	49a4      	ldr	r1, [pc, #656]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ff65 	bl	8000160 <__aeabi_fmul>
 8001296:	4603      	mov	r3, r0
 8001298:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			float gy = (float)y * ADXL_SCALE_G;
 800129c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdab 	bl	8000e04 <__aeabi_i2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	499b      	ldr	r1, [pc, #620]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff54 	bl	8000160 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			float gz = (float)z * ADXL_SCALE_G;
 80012be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd9a 	bl	8000e04 <__aeabi_i2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4993      	ldr	r1, [pc, #588]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff43 	bl	8000160 <__aeabi_fmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
			float abs_gx = fabsf(gx), abs_gy = fabsf(gy), abs_gz = fabsf(gz);
 80012e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001300:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			float abs_g = sqrt(gx*gx + gy*gy + gz*gz);
 8001304:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8001308:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800130c:	f7fe ff28 	bl	8000160 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	461c      	mov	r4, r3
 8001314:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001318:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800131c:	f7fe ff20 	bl	8000160 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fcb9 	bl	8000c9c <__addsf3>
 800132a:	4603      	mov	r3, r0
 800132c:	461c      	mov	r4, r3
 800132e:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001332:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001336:	f7fe ff13 	bl	8000160 <__aeabi_fmul>
 800133a:	4603      	mov	r3, r0
 800133c:	4619      	mov	r1, r3
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff fcac 	bl	8000c9c <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f922 	bl	8000590 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f007 fb14 	bl	8008980 <sqrt>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc46 	bl	8000bf0 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
			float a_ms2 = abs_g * G_TO_MS2;
 800136a:	496e      	ldr	r1, [pc, #440]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800136c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001370:	f7fe fef6 	bl	8000160 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

            samples[sample_index].g = abs_g;
 800137a:	4b68      	ldr	r3, [pc, #416]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	4a69      	ldr	r2, [pc, #420]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001384:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001388:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
            samples[sample_index].a = a_ms2;
 800138c:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800139c:	605a      	str	r2, [r3, #4]

            sample_index++;
 800139e:	4b5f      	ldr	r3, [pc, #380]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80013aa:	801a      	strh	r2, [r3, #0]
            if (sample_index >= SAMPLE_COUNT) {
 80013ac:	4b5b      	ldr	r3, [pc, #364]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2bff      	cmp	r3, #255	@ 0xff
 80013b4:	f240 80ab 	bls.w	800150e <HAL_TIM_PeriodElapsedCallback+0x2e2>
                recording = 0;
 80013b8:	4b57      	ldr	r3, [pc, #348]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
                sprintf(message, "Recording finished!\r\n");
 80013be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013c2:	495a      	ldr	r1, [pc, #360]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x300>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 f99d 	bl	8006704 <siprintf>
                HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80013ca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe febe 	bl	8000150 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e0:	4853      	ldr	r0, [pc, #332]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80013e2:	f003 fead 	bl	8005140 <HAL_UART_Transmit>
                // выводим в UART для графика
                float g_max, a_max = 0.0;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                for (int i = 0; i < SAMPLE_COUNT; i++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80013f4:	e02e      	b.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x228>
                    if (samples[i].g > g_max)
 80013f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80013f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001400:	4619      	mov	r1, r3
 8001402:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001406:	f7ff fd9f 	bl	8000f48 <__aeabi_fcmplt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_TIM_PeriodElapsedCallback+0x1f2>
                    	g_max = samples[i].g;
 8001410:	4a45      	ldr	r2, [pc, #276]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001416:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800141a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    if (samples[i].a > a_max)
 800141e:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001420:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4619      	mov	r1, r3
 800142c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001430:	f7ff fd8a 	bl	8000f48 <__aeabi_fcmplt>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_TIM_PeriodElapsedCallback+0x21e>
                    	a_max = samples[i].a;
 800143a:	4a3b      	ldr	r2, [pc, #236]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800143c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                for (int i = 0; i < SAMPLE_COUNT; i++) {
 800144a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800144e:	3301      	adds	r3, #1
 8001450:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001454:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001458:	2bff      	cmp	r3, #255	@ 0xff
 800145a:	ddcc      	ble.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
                }
                sprintf(message, "%.2f g, %.2f m/s2\r\n", g_max, a_max);
 800145c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001460:	f7ff f896 	bl	8000590 <__aeabi_f2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800146c:	f7ff f890 	bl	8000590 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001478:	e9cd 2300 	strd	r2, r3, [sp]
 800147c:	4622      	mov	r2, r4
 800147e:	462b      	mov	r3, r5
 8001480:	492c      	ldr	r1, [pc, #176]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001482:	f005 f93f 	bl	8006704 <siprintf>
                HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001486:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fe60 	bl	8000150 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149c:	4824      	ldr	r0, [pc, #144]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800149e:	f003 fe4f 	bl	8005140 <HAL_UART_Transmit>
                sprintf(message_display, "%.2f g", abs_g);
 80014a2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80014a6:	f7ff f873 	bl	8000590 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	f107 0014 	add.w	r0, r7, #20
 80014b2:	4921      	ldr	r1, [pc, #132]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80014b4:	f005 f926 	bl	8006704 <siprintf>
				ST7789_WriteString(20, 80, message_display, Font_16x26, GRED, BLACK);
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80014ba:	f107 0114 	add.w	r1, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	9202      	str	r2, [sp, #8]
 80014c2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	9200      	str	r2, [sp, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	460a      	mov	r2, r1
 80014d0:	2150      	movs	r1, #80	@ 0x50
 80014d2:	2014      	movs	r0, #20
 80014d4:	f000 fc9d 	bl	8001e12 <ST7789_WriteString>
				sprintf(message_display, "%.2fg m/s2", a_ms2);
 80014d8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80014dc:	f7ff f858 	bl	8000590 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	f107 0014 	add.w	r0, r7, #20
 80014e8:	4915      	ldr	r1, [pc, #84]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80014ea:	f005 f90b 	bl	8006704 <siprintf>
				ST7789_WriteString(20, 120, message_display, Font_16x26, GREEN, BLACK);
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80014f0:	f107 0114 	add.w	r1, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	9202      	str	r2, [sp, #8]
 80014f8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	460a      	mov	r2, r1
 8001506:	2178      	movs	r1, #120	@ 0x78
 8001508:	2014      	movs	r0, #20
 800150a:	f000 fc82 	bl	8001e12 <ST7789_WriteString>
            }
        }
    }
}
 800150e:	bf00      	nop
 8001510:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001514:	46bd      	mov	sp, r7
 8001516:	bdb0      	pop	{r4, r5, r7, pc}
 8001518:	20000410 	.word	0x20000410
 800151c:	20000412 	.word	0x20000412
 8001520:	3b7f9724 	.word	0x3b7f9724
 8001524:	411ce80a 	.word	0x411ce80a
 8001528:	20000414 	.word	0x20000414
 800152c:	08008c20 	.word	0x08008c20
 8001530:	200003c8 	.word	0x200003c8
 8001534:	08008c38 	.word	0x08008c38
 8001538:	08008bf4 	.word	0x08008bf4
 800153c:	20000008 	.word	0x20000008
 8001540:	08008bfc 	.word	0x08008bfc

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0c4      	sub	sp, #272	@ 0x110
 8001548:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f000 ffe1 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f000 f84f 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f000 f9a3 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8001556:	f000 f973 	bl	8001840 <MX_DMA_Init>
  MX_SPI1_Init();
 800155a:	f000 f88f 	bl	800167c <MX_SPI1_Init>
  MX_SPI2_Init();
 800155e:	f000 f8c3 	bl	80016e8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001562:	f000 f943 	bl	80017ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001566:	f000 f8f5 	bl	8001754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800156a:	481c      	ldr	r0, [pc, #112]	@ (80015dc <main+0x98>)
 800156c:	f003 f9f6 	bl	800495c <HAL_TIM_Base_Start_IT>
  ADXL345_Init();
 8001570:	f7ff fdc8 	bl	8001104 <ADXL345_Init>
  //init display
  ST7789_Init();
 8001574:	f000 fb0a 	bl	8001b8c <ST7789_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2108      	movs	r1, #8
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <main+0x9c>)
 800157e:	f001 fd81 	bl	8003084 <HAL_GPIO_WritePin>
  ST7789_Fill_Color(BLACK);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 fba8 	bl	8001cd8 <ST7789_Fill_Color>

  // Быстрый тест: прочитать ID
  uint8_t id = ADXL345_ReadID();
 8001588:	f7ff fdf0 	bl	800116c <ADXL345_ReadID>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
  sprintf(message, "ADXL345 ID = 0x%02X", id);
 8001592:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001596:	463b      	mov	r3, r7
 8001598:	4912      	ldr	r1, [pc, #72]	@ (80015e4 <main+0xa0>)
 800159a:	4618      	mov	r0, r3
 800159c:	f005 f8b2 	bl	8006704 <siprintf>
  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80015a0:	463b      	mov	r3, r7
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fdd4 	bl	8000150 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4639      	mov	r1, r7
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b2:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <main+0xa4>)
 80015b4:	f003 fdc4 	bl	8005140 <HAL_UART_Transmit>
  ST7789_WriteString(20, 20, message, Font_11x18, GBLUE, BLACK);
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <main+0xa8>)
 80015ba:	4639      	mov	r1, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	9202      	str	r2, [sp, #8]
 80015c0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	460a      	mov	r2, r1
 80015ce:	2114      	movs	r1, #20
 80015d0:	2014      	movs	r0, #20
 80015d2:	f000 fc1e 	bl	8001e12 <ST7789_WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <main+0x92>
 80015da:	bf00      	nop
 80015dc:	20000380 	.word	0x20000380
 80015e0:	40010800 	.word	0x40010800
 80015e4:	08008c4c 	.word	0x08008c4c
 80015e8:	200003c8 	.word	0x200003c8
 80015ec:	20000000 	.word	0x20000000

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b090      	sub	sp, #64	@ 0x40
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2228      	movs	r2, #40	@ 0x28
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 f8e5 	bl	80067ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800162e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fd53 	bl	80030e4 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001644:	f000 f9a0 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	230f      	movs	r3, #15
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f001 ffc0 	bl	80035e8 <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800166e:	f000 f98b 	bl	8001988 <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3740      	adds	r7, #64	@ 0x40
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <MX_SPI1_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_SPI1_Init+0x64>)
 800169c:	2202      	movs	r2, #2
 800169e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016b0:	2210      	movs	r2, #16
 80016b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016ce:	f002 f919 	bl	8003904 <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 f956 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000204 	.word	0x20000204
 80016e4:	40013000 	.word	0x40013000

080016e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_SPI2_Init+0x64>)
 80016ee:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <MX_SPI2_Init+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <MX_SPI2_Init+0x64>)
 80016f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_SPI2_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_SPI2_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_SPI2_Init+0x64>)
 8001708:	2202      	movs	r2, #2
 800170a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_SPI2_Init+0x64>)
 800170e:	2201      	movs	r2, #1
 8001710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_SPI2_Init+0x64>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_SPI2_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_SPI2_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_SPI2_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_SPI2_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_SPI2_Init+0x64>)
 8001734:	220a      	movs	r2, #10
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_SPI2_Init+0x64>)
 800173a:	f002 f8e3 	bl	8003904 <HAL_SPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001744:	f000 f920 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000025c 	.word	0x2000025c
 8001750:	40003800 	.word	0x40003800

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_TIM2_Init+0x94>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <MX_TIM2_Init+0x94>)
 800177a:	2247      	movs	r2, #71	@ 0x47
 800177c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_TIM2_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1249;
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_TIM2_Init+0x94>)
 8001786:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800178a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_TIM2_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_TIM2_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_TIM2_Init+0x94>)
 800179a:	f003 f890 	bl	80048be <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017a4:	f000 f8f0 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <MX_TIM2_Init+0x94>)
 80017b6:	f003 fa13 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017c0:	f000 f8e2 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_TIM2_Init+0x94>)
 80017d2:	f003 fbf5 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f000 f8d4 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000380 	.word	0x20000380

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <MX_USART1_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_USART1_UART_Init+0x4c>)
 8001824:	f003 fc3c 	bl	80050a0 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f8ab 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200003c8 	.word	0x200003c8
 800183c:	40013800 	.word	0x40013800

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_DMA_Init+0x58>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <MX_DMA_Init+0x58>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_DMA_Init+0x58>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	200d      	movs	r0, #13
 8001864:	f000 ffb1 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001868:	200d      	movs	r0, #13
 800186a:	f000 ffca 	bl	8002802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200e      	movs	r0, #14
 8001874:	f000 ffa9 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001878:	200e      	movs	r0, #14
 800187a:	f000 ffc2 	bl	8002802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	200f      	movs	r0, #15
 8001884:	f000 ffa1 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001888:	200f      	movs	r0, #15
 800188a:	f000 ffba 	bl	8002802 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a30      	ldr	r2, [pc, #192]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <MX_GPIO_Init+0xdc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	210e      	movs	r1, #14
 80018fc:	481f      	ldr	r0, [pc, #124]	@ (800197c <MX_GPIO_Init+0xe0>)
 80018fe:	f001 fbc1 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001908:	481d      	ldr	r0, [pc, #116]	@ (8001980 <MX_GPIO_Init+0xe4>)
 800190a:	f001 fbbb 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190e:	2301      	movs	r3, #1
 8001910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_GPIO_Init+0xe8>)
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4816      	ldr	r0, [pc, #88]	@ (800197c <MX_GPIO_Init+0xe0>)
 8001922:	f001 fa2b 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001926:	230e      	movs	r3, #14
 8001928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2302      	movs	r3, #2
 8001934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4619      	mov	r1, r3
 800193c:	480f      	ldr	r0, [pc, #60]	@ (800197c <MX_GPIO_Init+0xe0>)
 800193e:	f001 fa1d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2302      	movs	r3, #2
 8001952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4809      	ldr	r0, [pc, #36]	@ (8001980 <MX_GPIO_Init+0xe4>)
 800195c:	f001 fa0e 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2101      	movs	r1, #1
 8001964:	2006      	movs	r0, #6
 8001966:	f000 ff30 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800196a:	2006      	movs	r0, #6
 800196c:	f000 ff49 	bl	8002802 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	40010800 	.word	0x40010800
 8001980:	40010c00 	.word	0x40010c00
 8001984:	10110000 	.word	0x10110000

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x8>

08001994 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800199e:	bf00      	nop
	ST7789_DC_Clr();
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <ST7789_WriteCommand+0x30>)
 80019a6:	f001 fb6d 	bl	8003084 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80019aa:	1df9      	adds	r1, r7, #7
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b0:	2201      	movs	r2, #1
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <ST7789_WriteCommand+0x34>)
 80019b4:	f002 f82a 	bl	8003a0c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80019b8:	bf00      	nop
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40010800 	.word	0x40010800
 80019c8:	20000204 	.word	0x20000204

080019cc <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80019d6:	bf00      	nop
	ST7789_DC_Set();
 80019d8:	2201      	movs	r2, #1
 80019da:	2104      	movs	r1, #4
 80019dc:	481b      	ldr	r0, [pc, #108]	@ (8001a4c <ST7789_WriteData+0x80>)
 80019de:	f001 fb51 	bl	8003084 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80019e2:	e02a      	b.n	8001a3a <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ea:	4293      	cmp	r3, r2
 80019ec:	bf28      	it	cs
 80019ee:	4613      	movcs	r3, r2
 80019f0:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <ST7789_WriteData+0x84>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d30e      	bcc.n	8001a1c <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	461a      	mov	r2, r3
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <ST7789_WriteData+0x88>)
 8001a06:	f002 fc07 	bl	8004218 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001a0a:	bf00      	nop
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <ST7789_WriteData+0x88>)
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d1f8      	bne.n	8001a0c <ST7789_WriteData+0x40>
 8001a1a:	e006      	b.n	8001a2a <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001a1c:	89fa      	ldrh	r2, [r7, #14]
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	480b      	ldr	r0, [pc, #44]	@ (8001a54 <ST7789_WriteData+0x88>)
 8001a26:	f001 fff1 	bl	8003a0c <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1d1      	bne.n	80019e4 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 8001a40:	bf00      	nop
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	20000010 	.word	0x20000010
 8001a54:	20000204 	.word	0x20000204

08001a58 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001a62:	bf00      	nop
	ST7789_DC_Set();
 8001a64:	2201      	movs	r2, #1
 8001a66:	2104      	movs	r1, #4
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <ST7789_WriteSmallData+0x30>)
 8001a6a:	f001 fb0b 	bl	8003084 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001a6e:	1df9      	adds	r1, r7, #7
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a74:	2201      	movs	r2, #1
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <ST7789_WriteSmallData+0x34>)
 8001a78:	f001 ffc8 	bl	8003a0c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001a7c:	bf00      	nop
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	20000204 	.word	0x20000204

08001a90 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001a9a:	2036      	movs	r0, #54	@ 0x36
 8001a9c:	f7ff ff7a 	bl	8001994 <ST7789_WriteCommand>
	switch (m) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d81a      	bhi.n	8001adc <ST7789_SetRotation+0x4c>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <ST7789_SetRotation+0x1c>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001ac5 	.word	0x08001ac5
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ad5 	.word	0x08001ad5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001abc:	20c0      	movs	r0, #192	@ 0xc0
 8001abe:	f7ff ffcb 	bl	8001a58 <ST7789_WriteSmallData>
		break;
 8001ac2:	e00c      	b.n	8001ade <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001ac4:	20a0      	movs	r0, #160	@ 0xa0
 8001ac6:	f7ff ffc7 	bl	8001a58 <ST7789_WriteSmallData>
		break;
 8001aca:	e008      	b.n	8001ade <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff ffc3 	bl	8001a58 <ST7789_WriteSmallData>
		break;
 8001ad2:	e004      	b.n	8001ade <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001ad4:	2060      	movs	r0, #96	@ 0x60
 8001ad6:	f7ff ffbf 	bl	8001a58 <ST7789_WriteSmallData>
		break;
 8001ada:	e000      	b.n	8001ade <ST7789_SetRotation+0x4e>
	default:
		break;
 8001adc:	bf00      	nop
	}
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop

08001ae8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	80fb      	strh	r3, [r7, #6]
 8001afa:	4603      	mov	r3, r0
 8001afc:	80bb      	strh	r3, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	807b      	strh	r3, [r7, #2]
 8001b02:	4613      	mov	r3, r2
 8001b04:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001b06:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	82fb      	strh	r3, [r7, #22]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	827b      	strh	r3, [r7, #18]
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001b18:	202a      	movs	r0, #42	@ 0x2a
 8001b1a:	f7ff ff3b 	bl	8001994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001b1e:	8afb      	ldrh	r3, [r7, #22]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	733b      	strb	r3, [r7, #12]
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	737b      	strb	r3, [r7, #13]
 8001b2e:	8abb      	ldrh	r3, [r7, #20]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	73bb      	strb	r3, [r7, #14]
 8001b38:	8abb      	ldrh	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2104      	movs	r1, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff41 	bl	80019cc <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001b4a:	202b      	movs	r0, #43	@ 0x2b
 8001b4c:	f7ff ff22 	bl	8001994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	723b      	strb	r3, [r7, #8]
 8001b5a:	8a7b      	ldrh	r3, [r7, #18]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	727b      	strb	r3, [r7, #9]
 8001b60:	8a3b      	ldrh	r3, [r7, #16]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	72bb      	strb	r3, [r7, #10]
 8001b6a:	8a3b      	ldrh	r3, [r7, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	2104      	movs	r1, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff28 	bl	80019cc <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001b7c:	202c      	movs	r0, #44	@ 0x2c
 8001b7e:	f7ff ff09 	bl	8001994 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001b82:	bf00      	nop
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}

08001b8c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	@ 0x2c
 8001b90:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8001b92:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001b96:	2100      	movs	r1, #0
 8001b98:	484a      	ldr	r0, [pc, #296]	@ (8001cc4 <ST7789_Init+0x138>)
 8001b9a:	f004 fe18 	bl	80067ce <memset>
	#endif
	HAL_Delay(10);
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f000 fd18 	bl	80025d4 <HAL_Delay>
    ST7789_RST_Clr();
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4847      	ldr	r0, [pc, #284]	@ (8001cc8 <ST7789_Init+0x13c>)
 8001baa:	f001 fa6b 	bl	8003084 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001bae:	200a      	movs	r0, #10
 8001bb0:	f000 fd10 	bl	80025d4 <HAL_Delay>
    ST7789_RST_Set();
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4843      	ldr	r0, [pc, #268]	@ (8001cc8 <ST7789_Init+0x13c>)
 8001bba:	f001 fa63 	bl	8003084 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001bbe:	2014      	movs	r0, #20
 8001bc0:	f000 fd08 	bl	80025d4 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001bc4:	203a      	movs	r0, #58	@ 0x3a
 8001bc6:	f7ff fee5 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001bca:	2055      	movs	r0, #85	@ 0x55
 8001bcc:	f7ff ff44 	bl	8001a58 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001bd0:	20b2      	movs	r0, #178	@ 0xb2
 8001bd2:	f7ff fedf 	bl	8001994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001ccc <ST7789_Init+0x140>)
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be0:	6018      	str	r0, [r3, #0]
 8001be2:	3304      	adds	r3, #4
 8001be4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	2105      	movs	r1, #5
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff feed 	bl	80019cc <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7ff ff4c 	bl	8001a90 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001bf8:	20b7      	movs	r0, #183	@ 0xb7
 8001bfa:	f7ff fecb 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001bfe:	2035      	movs	r0, #53	@ 0x35
 8001c00:	f7ff ff2a 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001c04:	20bb      	movs	r0, #187	@ 0xbb
 8001c06:	f7ff fec5 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001c0a:	2019      	movs	r0, #25
 8001c0c:	f7ff ff24 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001c10:	20c0      	movs	r0, #192	@ 0xc0
 8001c12:	f7ff febf 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001c16:	202c      	movs	r0, #44	@ 0x2c
 8001c18:	f7ff ff1e 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001c1c:	20c2      	movs	r0, #194	@ 0xc2
 8001c1e:	f7ff feb9 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff ff18 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001c28:	20c3      	movs	r0, #195	@ 0xc3
 8001c2a:	f7ff feb3 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001c2e:	2012      	movs	r0, #18
 8001c30:	f7ff ff12 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001c34:	20c4      	movs	r0, #196	@ 0xc4
 8001c36:	f7ff fead 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001c3a:	2020      	movs	r0, #32
 8001c3c:	f7ff ff0c 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001c40:	20c6      	movs	r0, #198	@ 0xc6
 8001c42:	f7ff fea7 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001c46:	200f      	movs	r0, #15
 8001c48:	f7ff ff06 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001c4c:	20d0      	movs	r0, #208	@ 0xd0
 8001c4e:	f7ff fea1 	bl	8001994 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001c52:	20a4      	movs	r0, #164	@ 0xa4
 8001c54:	f7ff ff00 	bl	8001a58 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001c58:	20a1      	movs	r0, #161	@ 0xa1
 8001c5a:	f7ff fefd 	bl	8001a58 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001c5e:	20e0      	movs	r0, #224	@ 0xe0
 8001c60:	f7ff fe98 	bl	8001994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001c64:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <ST7789_Init+0x144>)
 8001c66:	f107 0410 	add.w	r4, r7, #16
 8001c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c6e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	210e      	movs	r1, #14
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fea8 	bl	80019cc <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001c7c:	20e1      	movs	r0, #225	@ 0xe1
 8001c7e:	f7ff fe89 	bl	8001994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <ST7789_Init+0x148>)
 8001c84:	463c      	mov	r4, r7
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	c407      	stmia	r4!, {r0, r1, r2}
 8001c8a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	210e      	movs	r1, #14
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fe9b 	bl	80019cc <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001c96:	2021      	movs	r0, #33	@ 0x21
 8001c98:	f7ff fe7c 	bl	8001994 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001c9c:	2011      	movs	r0, #17
 8001c9e:	f7ff fe79 	bl	8001994 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001ca2:	2013      	movs	r0, #19
 8001ca4:	f7ff fe76 	bl	8001994 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001ca8:	2029      	movs	r0, #41	@ 0x29
 8001caa:	f7ff fe73 	bl	8001994 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001cae:	2032      	movs	r0, #50	@ 0x32
 8001cb0:	f000 fc90 	bl	80025d4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f80f 	bl	8001cd8 <ST7789_Fill_Color>
}
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	@ 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000c14 	.word	0x20000c14
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	08008c60 	.word	0x08008c60
 8001cd0:	08008c68 	.word	0x08008c68
 8001cd4:	08008c78 	.word	0x08008c78

08001cd8 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001ce2:	f240 133f 	movw	r3, #319	@ 0x13f
 8001ce6:	22ef      	movs	r2, #239	@ 0xef
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fefc 	bl	8001ae8 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001cf0:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	81fb      	strh	r3, [r7, #14]
 8001cf6:	e00e      	b.n	8001d16 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <ST7789_Fill_Color+0x50>)
 8001d02:	f004 fd64 	bl	80067ce <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001d06:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001d0a:	4807      	ldr	r0, [pc, #28]	@ (8001d28 <ST7789_Fill_Color+0x50>)
 8001d0c:	f7ff fe5e 	bl	80019cc <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	3301      	adds	r3, #1
 8001d14:	81fb      	strh	r3, [r7, #14]
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d1a:	d9ed      	bls.n	8001cf8 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001d1c:	bf00      	nop
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000c14 	.word	0x20000c14

08001d2c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	80bb      	strh	r3, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001d42:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001d44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d48:	461a      	mov	r2, r3
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001d58:	4619      	mov	r1, r3
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	88b9      	ldrh	r1, [r7, #4]
 8001d66:	88f8      	ldrh	r0, [r7, #6]
 8001d68:	f7ff febe 	bl	8001ae8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e041      	b.n	8001df6 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8001d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	3b20      	subs	r3, #32
 8001d78:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	440b      	add	r3, r1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e027      	b.n	8001de4 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00e      	beq.n	8001dc2 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001da4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	743b      	strb	r3, [r7, #16]
 8001dae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2102      	movs	r1, #2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fe06 	bl	80019cc <ST7789_WriteData>
 8001dc0:	e00d      	b.n	8001dde <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001dc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	733b      	strb	r3, [r7, #12]
 8001dcc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fdf7 	bl	80019cc <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001de8:	461a      	mov	r2, r3
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d3d1      	bcc.n	8001d94 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d3b7      	bcc.n	8001d72 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e0e:	b002      	add	sp, #8
 8001e10:	4770      	bx	lr

08001e12 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e12:	b082      	sub	sp, #8
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af04      	add	r7, sp, #16
 8001e1a:	603a      	str	r2, [r7, #0]
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001e26:	bf00      	nop
	while (*str) {
 8001e28:	e02e      	b.n	8001e88 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	7d3a      	ldrb	r2, [r7, #20]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2bef      	cmp	r3, #239	@ 0xef
 8001e32:	dd14      	ble.n	8001e5e <ST7789_WriteString+0x4c>
			x = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001e38:	7d7b      	ldrb	r3, [r7, #21]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	7d7a      	ldrb	r2, [r7, #21]
 8001e46:	4413      	add	r3, r2
 8001e48:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e4c:	da21      	bge.n	8001e92 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d103      	bne.n	8001e5e <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	603b      	str	r3, [r7, #0]
				continue;
 8001e5c:	e014      	b.n	8001e88 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	88b9      	ldrh	r1, [r7, #4]
 8001e64:	88f8      	ldrh	r0, [r7, #6]
 8001e66:	8c3b      	ldrh	r3, [r7, #32]
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	8bbb      	ldrh	r3, [r7, #28]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f7ff ff5a 	bl	8001d2c <ST7789_WriteChar>
		x += font.width;
 8001e78:	7d3b      	ldrb	r3, [r7, #20]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4413      	add	r3, r2
 8001e80:	80fb      	strh	r3, [r7, #6]
		str++;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1cc      	bne.n	8001e2a <ST7789_WriteString+0x18>
 8001e90:	e000      	b.n	8001e94 <ST7789_WriteString+0x82>
				break;
 8001e92:	bf00      	nop
	}
	ST7789_UnSelect();
 8001e94:	bf00      	nop
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6193      	str	r3, [r2, #24]
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_MspInit+0x5c>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_MspInit+0x60>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_MspInit+0x60>)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000

08001f08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a73      	ldr	r2, [pc, #460]	@ (80020f0 <HAL_SPI_MspInit+0x1e8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d152      	bne.n	8001fce <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f28:	4b72      	ldr	r3, [pc, #456]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a71      	ldr	r2, [pc, #452]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b6f      	ldr	r3, [pc, #444]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b6c      	ldr	r3, [pc, #432]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a6b      	ldr	r2, [pc, #428]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b69      	ldr	r3, [pc, #420]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f58:	23a0      	movs	r3, #160	@ 0xa0
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4863      	ldr	r0, [pc, #396]	@ (80020f8 <HAL_SPI_MspInit+0x1f0>)
 8001f6c:	f000 ff06 	bl	8002d7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001f70:	4b62      	ldr	r3, [pc, #392]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f72:	4a63      	ldr	r2, [pc, #396]	@ (8002100 <HAL_SPI_MspInit+0x1f8>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f76:	4b61      	ldr	r3, [pc, #388]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f78:	2210      	movs	r2, #16
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f82:	4b5e      	ldr	r3, [pc, #376]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f88:	4b5c      	ldr	r3, [pc, #368]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f94:	4b59      	ldr	r3, [pc, #356]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fa0:	4856      	ldr	r0, [pc, #344]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001fa2:	f000 fc49 	bl	8002838 <HAL_DMA_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001fac:	f7ff fcec 	bl	8001988 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001fb4:	649a      	str	r2, [r3, #72]	@ 0x48
 8001fb6:	4a51      	ldr	r2, [pc, #324]	@ (80020fc <HAL_SPI_MspInit+0x1f4>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2023      	movs	r0, #35	@ 0x23
 8001fc2:	f000 fc02 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fc6:	2023      	movs	r0, #35	@ 0x23
 8001fc8:	f000 fc1b 	bl	8002802 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fcc:	e08b      	b.n	80020e6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8002104 <HAL_SPI_MspInit+0x1fc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	f040 8086 	bne.w	80020e6 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fda:	4b46      	ldr	r3, [pc, #280]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a45      	ldr	r2, [pc, #276]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b40      	ldr	r3, [pc, #256]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_SPI_MspInit+0x1ec>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800200a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4619      	mov	r1, r3
 800201e:	483a      	ldr	r0, [pc, #232]	@ (8002108 <HAL_SPI_MspInit+0x200>)
 8002020:	f000 feac 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002024:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	4619      	mov	r1, r3
 8002038:	4833      	ldr	r0, [pc, #204]	@ (8002108 <HAL_SPI_MspInit+0x200>)
 800203a:	f000 fe9f 	bl	8002d7c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800203e:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002040:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <HAL_SPI_MspInit+0x208>)
 8002042:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800204a:	4b30      	ldr	r3, [pc, #192]	@ (800210c <HAL_SPI_MspInit+0x204>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002050:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205c:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <HAL_SPI_MspInit+0x204>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_SPI_MspInit+0x204>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800206e:	4827      	ldr	r0, [pc, #156]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002070:	f000 fbe2 	bl	8002838 <HAL_DMA_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_SPI_MspInit+0x176>
      Error_Handler();
 800207a:	f7ff fc85 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a22      	ldr	r2, [pc, #136]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002082:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002084:	4a21      	ldr	r2, [pc, #132]	@ (800210c <HAL_SPI_MspInit+0x204>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800208a:	4b22      	ldr	r3, [pc, #136]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 800208c:	4a22      	ldr	r2, [pc, #136]	@ (8002118 <HAL_SPI_MspInit+0x210>)
 800208e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 8002092:	2210      	movs	r2, #16
 8002094:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002096:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800209c:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 800209e:	2280      	movs	r2, #128	@ 0x80
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80020ba:	4816      	ldr	r0, [pc, #88]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020bc:	f000 fbbc 	bl	8002838 <HAL_DMA_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_SPI_MspInit+0x1c2>
      Error_Handler();
 80020c6:	f7ff fc5f 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a11      	ldr	r2, [pc, #68]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020ce:	649a      	str	r2, [r3, #72]	@ 0x48
 80020d0:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <HAL_SPI_MspInit+0x20c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2024      	movs	r0, #36	@ 0x24
 80020dc:	f000 fb75 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80020e0:	2024      	movs	r0, #36	@ 0x24
 80020e2:	f000 fb8e 	bl	8002802 <HAL_NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	@ 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40013000 	.word	0x40013000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	200002b4 	.word	0x200002b4
 8002100:	40020030 	.word	0x40020030
 8002104:	40003800 	.word	0x40003800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	200002f8 	.word	0x200002f8
 8002110:	40020044 	.word	0x40020044
 8002114:	2000033c 	.word	0x2000033c
 8002118:	40020058 	.word	0x40020058

0800211c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212c:	d113      	bne.n	8002156 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_TIM_Base_MspInit+0x44>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <HAL_TIM_Base_MspInit+0x44>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_TIM_Base_MspInit+0x44>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	201c      	movs	r0, #28
 800214c:	f000 fb3d 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002150:	201c      	movs	r0, #28
 8002152:	f000 fb56 	bl	8002802 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <HAL_UART_MspInit+0x9c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d139      	bne.n	80021f8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <HAL_UART_MspInit+0xa0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	4619      	mov	r1, r3
 80021c8:	480f      	ldr	r0, [pc, #60]	@ (8002208 <HAL_UART_MspInit+0xa4>)
 80021ca:	f000 fdd7 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	4809      	ldr	r0, [pc, #36]	@ (8002208 <HAL_UART_MspInit+0xa4>)
 80021e4:	f000 fdca 	bl	8002d7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2025      	movs	r0, #37	@ 0x25
 80021ee:	f000 faec 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f2:	2025      	movs	r0, #37	@ 0x25
 80021f4:	f000 fb05 	bl	8002802 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40013800 	.word	0x40013800
 8002204:	40021000 	.word	0x40021000
 8002208:	40010800 	.word	0x40010800

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <NMI_Handler+0x4>

08002214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <MemManage_Handler+0x4>

08002224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <UsageFault_Handler+0x4>

08002234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225c:	f000 f99e 	bl	800259c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0a0      	sub	sp, #128	@ 0x80
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	char message[128];

		strcpy(message, "here");
 800226a:	463b      	mov	r3, r7
 800226c:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <EXTI0_IRQHandler+0x3c>)
 800226e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002272:	6018      	str	r0, [r3, #0]
 8002274:	3304      	adds	r3, #4
 8002276:	7019      	strb	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8002278:	463b      	mov	r3, r7
 800227a:	4618      	mov	r0, r3
 800227c:	f7fd ff68 	bl	8000150 <strlen>
 8002280:	4603      	mov	r3, r0
 8002282:	b29a      	uxth	r2, r3
 8002284:	4639      	mov	r1, r7
 8002286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800228a:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <EXTI0_IRQHandler+0x40>)
 800228c:	f002 ff58 	bl	8005140 <HAL_UART_Transmit>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 ff0f 	bl	80030b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	3780      	adds	r7, #128	@ 0x80
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	08008cf8 	.word	0x08008cf8
 80022a4:	200003c8 	.word	0x200003c8

080022a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <DMA1_Channel3_IRQHandler+0x10>)
 80022ae:	f000 fc31 	bl	8002b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200002b4 	.word	0x200002b4

080022bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <DMA1_Channel4_IRQHandler+0x10>)
 80022c2:	f000 fc27 	bl	8002b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002f8 	.word	0x200002f8

080022d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80022d4:	4802      	ldr	r0, [pc, #8]	@ (80022e0 <DMA1_Channel5_IRQHandler+0x10>)
 80022d6:	f000 fc1d 	bl	8002b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000033c 	.word	0x2000033c

080022e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM2_IRQHandler+0x10>)
 80022ea:	f002 fb89 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000380 	.word	0x20000380

080022f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022fc:	4802      	ldr	r0, [pc, #8]	@ (8002308 <SPI1_IRQHandler+0x10>)
 80022fe:	f002 f83d 	bl	800437c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000204 	.word	0x20000204

0800230c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <SPI2_IRQHandler+0x10>)
 8002312:	f002 f833 	bl	800437c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000025c 	.word	0x2000025c

08002320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <USART1_IRQHandler+0x10>)
 8002326:	f002 ff97 	bl	8005258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200003c8 	.word	0x200003c8

08002334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_kill>:

int _kill(int pid, int sig)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800234c:	f004 fa92 	bl	8006874 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	2216      	movs	r2, #22
 8002354:	601a      	str	r2, [r3, #0]
  return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_exit>:

void _exit (int status)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800236a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffe7 	bl	8002342 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <_exit+0x12>

08002378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
  }

  return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
  }
  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002410:	605a      	str	r2, [r3, #4]
  return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <_isatty>:

int _isatty(int file)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f004 f9fa 	bl	8006874 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20005000 	.word	0x20005000
 80024ac:	00000200 	.word	0x00000200
 80024b0:	20001574 	.word	0x20001574
 80024b4:	200016c8 	.word	0x200016c8

080024b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c4:	f7ff fff8 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c8:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ca:	490c      	ldr	r1, [pc, #48]	@ (80024fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002500 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024e0:	4c09      	ldr	r4, [pc, #36]	@ (8002508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ee:	f004 f9c7 	bl	8006880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024f2:	f7ff f827 	bl	8001544 <main>
  bx lr
 80024f6:	4770      	bx	lr
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002500:	0800b168 	.word	0x0800b168
  ldr r2, =_sbss
 8002504:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002508:	200016c8 	.word	0x200016c8

0800250c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC1_2_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_Init+0x28>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <HAL_Init+0x28>)
 800251a:	f043 0310 	orr.w	r3, r3, #16
 800251e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002520:	2003      	movs	r0, #3
 8002522:	f000 f947 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002526:	200f      	movs	r0, #15
 8002528:	f000 f808 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800252c:	f7ff fcba 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_InitTick+0x54>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_InitTick+0x58>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002552:	fbb3 f3f1 	udiv	r3, r3, r1
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f95f 	bl	800281e <HAL_SYSTICK_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00e      	b.n	8002588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d80a      	bhi.n	8002586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002578:	f000 f927 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800257c:	4a06      	ldr	r2, [pc, #24]	@ (8002598 <HAL_InitTick+0x5c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000014 	.word	0x20000014
 8002594:	2000001c 	.word	0x2000001c
 8002598:	20000018 	.word	0x20000018

0800259c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_IncTick+0x1c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_IncTick+0x20>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <HAL_IncTick+0x20>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	2000001c 	.word	0x2000001c
 80025bc:	20001578 	.word	0x20001578

080025c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b02      	ldr	r3, [pc, #8]	@ (80025d0 <HAL_GetTick+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20001578 	.word	0x20001578

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fa:	bf00      	nop
 80025fc:	f7ff ffe0 	bl	80025c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000001c 	.word	0x2000001c

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	@ (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4906      	ldr	r1, [pc, #24]	@ (80026b4 <__NVIC_EnableIRQ+0x34>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	@ (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002794:	f7ff ff90 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff2d 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff42 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff90 	bl	800270c <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5f 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff35 	bl	8002680 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e043      	b.n	80028d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <HAL_DMA_Init+0xa8>)
 8002856:	4413      	add	r3, r2
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_DMA_Init+0xac>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <HAL_DMA_Init+0xb0>)
 800286a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002882:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	bffdfff8 	.word	0xbffdfff8
 80028e4:	cccccccd 	.word	0xcccccccd
 80028e8:	40020000 	.word	0x40020000

080028ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_DMA_Start_IT+0x20>
 8002908:	2302      	movs	r3, #2
 800290a:	e04b      	b.n	80029a4 <HAL_DMA_Start_IT+0xb8>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d13a      	bne.n	8002996 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9eb 	bl	8002d20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 020e 	orr.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00f      	b.n	8002984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 020a 	orr.w	r2, r2, #10
 8002982:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e005      	b.n	80029a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e020      	b.n	8002a18 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020e 	bic.w	r2, r2, #14
 80029e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d005      	beq.n	8002a48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e051      	b.n	8002aec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 020e 	bic.w	r2, r2, #14
 8002a56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a22      	ldr	r2, [pc, #136]	@ (8002af8 <HAL_DMA_Abort_IT+0xd4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d029      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a21      	ldr	r2, [pc, #132]	@ (8002afc <HAL_DMA_Abort_IT+0xd8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x9e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	@ (8002b00 <HAL_DMA_Abort_IT+0xdc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01a      	beq.n	8002abc <HAL_DMA_Abort_IT+0x98>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b04 <HAL_DMA_Abort_IT+0xe0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d012      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x92>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <HAL_DMA_Abort_IT+0xe4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00a      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x8c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b0c <HAL_DMA_Abort_IT+0xe8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d102      	bne.n	8002aaa <HAL_DMA_Abort_IT+0x86>
 8002aa4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002aa8:	e00e      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002aaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aae:	e00b      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ab4:	e008      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aba:	e005      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac0:	e002      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	e000      	b.n	8002ac8 <HAL_DMA_Abort_IT+0xa4>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_DMA_Abort_IT+0xec>)
 8002aca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
    } 
  }
  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40020008 	.word	0x40020008
 8002afc:	4002001c 	.word	0x4002001c
 8002b00:	40020030 	.word	0x40020030
 8002b04:	40020044 	.word	0x40020044
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	4002006c 	.word	0x4002006c
 8002b10:	40020000 	.word	0x40020000

08002b14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	2204      	movs	r2, #4
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04f      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xc8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a66      	ldr	r2, [pc, #408]	@ (8002d04 <HAL_DMA_IRQHandler+0x1f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d029      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0xae>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <HAL_DMA_IRQHandler+0x1f4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a63      	ldr	r2, [pc, #396]	@ (8002d0c <HAL_DMA_IRQHandler+0x1f8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0xa4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a62      	ldr	r2, [pc, #392]	@ (8002d10 <HAL_DMA_IRQHandler+0x1fc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d012      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x9e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a60      	ldr	r2, [pc, #384]	@ (8002d14 <HAL_DMA_IRQHandler+0x200>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00a      	beq.n	8002bac <HAL_DMA_IRQHandler+0x98>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002d18 <HAL_DMA_IRQHandler+0x204>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_DMA_IRQHandler+0x92>
 8002ba0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ba4:	e00e      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002ba6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002baa:	e00b      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002bac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bb0:	e008      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002bb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bb6:	e005      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bbc:	e002      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002bbe:	2340      	movs	r3, #64	@ 0x40
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb0>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	4a55      	ldr	r2, [pc, #340]	@ (8002d1c <HAL_DMA_IRQHandler+0x208>)
 8002bc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8094 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	e08e      	b.n	8002cfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2202      	movs	r2, #2
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d056      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x186>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d051      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 020a 	bic.w	r2, r2, #10
 8002c12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a38      	ldr	r2, [pc, #224]	@ (8002d04 <HAL_DMA_IRQHandler+0x1f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d029      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x166>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a37      	ldr	r2, [pc, #220]	@ (8002d08 <HAL_DMA_IRQHandler+0x1f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x162>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a35      	ldr	r2, [pc, #212]	@ (8002d0c <HAL_DMA_IRQHandler+0x1f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01a      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x15c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a34      	ldr	r2, [pc, #208]	@ (8002d10 <HAL_DMA_IRQHandler+0x1fc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d012      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x156>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a32      	ldr	r2, [pc, #200]	@ (8002d14 <HAL_DMA_IRQHandler+0x200>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00a      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x150>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <HAL_DMA_IRQHandler+0x204>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d102      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x14a>
 8002c58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c5c:	e00e      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	e00b      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c68:	e008      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6e:	e005      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c74:	e002      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c76:	2320      	movs	r3, #32
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_IRQHandler+0x168>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	4a27      	ldr	r2, [pc, #156]	@ (8002d1c <HAL_DMA_IRQHandler+0x208>)
 8002c7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d034      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c98:	e02f      	b.n	8002cfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d028      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x1e8>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d023      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020e 	bic.w	r2, r2, #14
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
    }
  }
  return;
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
}
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40020008 	.word	0x40020008
 8002d08:	4002001c 	.word	0x4002001c
 8002d0c:	40020030 	.word	0x40020030
 8002d10:	40020044 	.word	0x40020044
 8002d14:	40020058 	.word	0x40020058
 8002d18:	4002006c 	.word	0x4002006c
 8002d1c:	40020000 	.word	0x40020000

08002d20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d108      	bne.n	8002d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d5e:	e007      	b.n	8002d70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b08b      	sub	sp, #44	@ 0x2c
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8e:	e169      	b.n	8003064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d90:	2201      	movs	r2, #1
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8158 	bne.w	800305e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a9a      	ldr	r2, [pc, #616]	@ (800301c <HAL_GPIO_Init+0x2a0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d05e      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002db8:	4a98      	ldr	r2, [pc, #608]	@ (800301c <HAL_GPIO_Init+0x2a0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d875      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dbe:	4a98      	ldr	r2, [pc, #608]	@ (8003020 <HAL_GPIO_Init+0x2a4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d058      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a96      	ldr	r2, [pc, #600]	@ (8003020 <HAL_GPIO_Init+0x2a4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d86f      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dca:	4a96      	ldr	r2, [pc, #600]	@ (8003024 <HAL_GPIO_Init+0x2a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d052      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002dd0:	4a94      	ldr	r2, [pc, #592]	@ (8003024 <HAL_GPIO_Init+0x2a8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d869      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dd6:	4a94      	ldr	r2, [pc, #592]	@ (8003028 <HAL_GPIO_Init+0x2ac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04c      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002ddc:	4a92      	ldr	r2, [pc, #584]	@ (8003028 <HAL_GPIO_Init+0x2ac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d863      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002de2:	4a92      	ldr	r2, [pc, #584]	@ (800302c <HAL_GPIO_Init+0x2b0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d046      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002de8:	4a90      	ldr	r2, [pc, #576]	@ (800302c <HAL_GPIO_Init+0x2b0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d85d      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dee:	2b12      	cmp	r3, #18
 8002df0:	d82a      	bhi.n	8002e48 <HAL_GPIO_Init+0xcc>
 8002df2:	2b12      	cmp	r3, #18
 8002df4:	d859      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002df6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dfc <HAL_GPIO_Init+0x80>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e77 	.word	0x08002e77
 8002e00:	08002e51 	.word	0x08002e51
 8002e04:	08002e63 	.word	0x08002e63
 8002e08:	08002ea5 	.word	0x08002ea5
 8002e0c:	08002eab 	.word	0x08002eab
 8002e10:	08002eab 	.word	0x08002eab
 8002e14:	08002eab 	.word	0x08002eab
 8002e18:	08002eab 	.word	0x08002eab
 8002e1c:	08002eab 	.word	0x08002eab
 8002e20:	08002eab 	.word	0x08002eab
 8002e24:	08002eab 	.word	0x08002eab
 8002e28:	08002eab 	.word	0x08002eab
 8002e2c:	08002eab 	.word	0x08002eab
 8002e30:	08002eab 	.word	0x08002eab
 8002e34:	08002eab 	.word	0x08002eab
 8002e38:	08002eab 	.word	0x08002eab
 8002e3c:	08002eab 	.word	0x08002eab
 8002e40:	08002e59 	.word	0x08002e59
 8002e44:	08002e6d 	.word	0x08002e6d
 8002e48:	4a79      	ldr	r2, [pc, #484]	@ (8003030 <HAL_GPIO_Init+0x2b4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e4e:	e02c      	b.n	8002eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e029      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e024      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	3308      	adds	r3, #8
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e01f      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	330c      	adds	r3, #12
 8002e72:	623b      	str	r3, [r7, #32]
          break;
 8002e74:	e01a      	b.n	8002eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e013      	b.n	8002eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	611a      	str	r2, [r3, #16]
          break;
 8002e96:	e009      	b.n	8002eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	615a      	str	r2, [r3, #20]
          break;
 8002ea2:	e003      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x130>
          break;
 8002eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2bff      	cmp	r3, #255	@ 0xff
 8002eb0:	d801      	bhi.n	8002eb6 <HAL_GPIO_Init+0x13a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	e001      	b.n	8002eba <HAL_GPIO_Init+0x13e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2bff      	cmp	r3, #255	@ 0xff
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_GPIO_Init+0x14c>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	e002      	b.n	8002ece <HAL_GPIO_Init+0x152>
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	3b08      	subs	r3, #8
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	210f      	movs	r1, #15
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80b1 	beq.w	800305e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_GPIO_Init+0x2b8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a4c      	ldr	r2, [pc, #304]	@ (8003034 <HAL_GPIO_Init+0x2b8>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_GPIO_Init+0x2b8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f14:	4a48      	ldr	r2, [pc, #288]	@ (8003038 <HAL_GPIO_Init+0x2bc>)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a40      	ldr	r2, [pc, #256]	@ (800303c <HAL_GPIO_Init+0x2c0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_GPIO_Init+0x1ec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3f      	ldr	r2, [pc, #252]	@ (8003040 <HAL_GPIO_Init+0x2c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00d      	beq.n	8002f64 <HAL_GPIO_Init+0x1e8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003044 <HAL_GPIO_Init+0x2c8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	@ (8003048 <HAL_GPIO_Init+0x2cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_GPIO_Init+0x1e0>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	e004      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6c:	f002 0203 	and.w	r2, r2, #3
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	4093      	lsls	r3, r2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f7a:	492f      	ldr	r1, [pc, #188]	@ (8003038 <HAL_GPIO_Init+0x2bc>)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f94:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	492c      	ldr	r1, [pc, #176]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	4928      	ldr	r1, [pc, #160]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fbc:	4b23      	ldr	r3, [pc, #140]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4922      	ldr	r1, [pc, #136]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60cb      	str	r3, [r1, #12]
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fca:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	491e      	ldr	r1, [pc, #120]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4918      	ldr	r1, [pc, #96]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ff2:	4b16      	ldr	r3, [pc, #88]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4914      	ldr	r1, [pc, #80]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d021      	beq.n	8003050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	490e      	ldr	r1, [pc, #56]	@ (800304c <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e021      	b.n	800305e <HAL_GPIO_Init+0x2e2>
 800301a:	bf00      	nop
 800301c:	10320000 	.word	0x10320000
 8003020:	10310000 	.word	0x10310000
 8003024:	10220000 	.word	0x10220000
 8003028:	10210000 	.word	0x10210000
 800302c:	10120000 	.word	0x10120000
 8003030:	10110000 	.word	0x10110000
 8003034:	40021000 	.word	0x40021000
 8003038:	40010000 	.word	0x40010000
 800303c:	40010800 	.word	0x40010800
 8003040:	40010c00 	.word	0x40010c00
 8003044:	40011000 	.word	0x40011000
 8003048:	40011400 	.word	0x40011400
 800304c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_GPIO_Init+0x304>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	43db      	mvns	r3, r3
 8003058:	4909      	ldr	r1, [pc, #36]	@ (8003080 <HAL_GPIO_Init+0x304>)
 800305a:	4013      	ands	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	f47f ae8e 	bne.w	8002d90 <HAL_GPIO_Init+0x14>
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	372c      	adds	r7, #44	@ 0x2c
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	40010400 	.word	0x40010400

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	611a      	str	r2, [r3, #16]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030be:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f866 	bl	80011a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e272      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003104:	4b92      	ldr	r3, [pc, #584]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d00c      	beq.n	800312a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003110:	4b8f      	ldr	r3, [pc, #572]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d112      	bne.n	8003142 <HAL_RCC_OscConfig+0x5e>
 800311c:	4b8c      	ldr	r3, [pc, #560]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d10b      	bne.n	8003142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	4b89      	ldr	r3, [pc, #548]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d06c      	beq.n	8003210 <HAL_RCC_OscConfig+0x12c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d168      	bne.n	8003210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e24c      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x76>
 800314c:	4b80      	ldr	r3, [pc, #512]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7f      	ldr	r2, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e02e      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x98>
 8003162:	4b7b      	ldr	r3, [pc, #492]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7a      	ldr	r2, [pc, #488]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b78      	ldr	r3, [pc, #480]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a77      	ldr	r2, [pc, #476]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0xbc>
 8003186:	4b72      	ldr	r3, [pc, #456]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a71      	ldr	r2, [pc, #452]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 80031a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b68      	ldr	r3, [pc, #416]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a67      	ldr	r2, [pc, #412]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7ff f9fe 	bl	80025c0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff f9fa 	bl	80025c0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e200      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b5d      	ldr	r3, [pc, #372]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe4>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7ff f9ea 	bl	80025c0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7ff f9e6 	bl	80025c0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1ec      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x10c>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d063      	beq.n	80032e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b4c      	ldr	r3, [pc, #304]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800322a:	4b49      	ldr	r3, [pc, #292]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x18c>
 8003236:	4b46      	ldr	r3, [pc, #280]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x176>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1c0      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4939      	ldr	r1, [pc, #228]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e03a      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <HAL_RCC_OscConfig+0x270>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7ff f99f 	bl	80025c0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7ff f99b 	bl	80025c0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1a1      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4927      	ldr	r1, [pc, #156]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b26      	ldr	r3, [pc, #152]	@ (8003354 <HAL_RCC_OscConfig+0x270>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff f97e 	bl	80025c0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7ff f97a 	bl	80025c0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e180      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1d      	ldr	r3, [pc, #116]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03a      	beq.n	8003368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d019      	beq.n	800332e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_RCC_OscConfig+0x274>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7ff f95e 	bl	80025c0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003308:	f7ff f95a 	bl	80025c0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e160      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RCC_OscConfig+0x26c>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f000 face 	bl	80038c8 <RCC_Delay>
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <HAL_RCC_OscConfig+0x274>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7ff f944 	bl	80025c0 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333a:	e00f      	b.n	800335c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff f940 	bl	80025c0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d908      	bls.n	800335c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e146      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	42420000 	.word	0x42420000
 8003358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b92      	ldr	r3, [pc, #584]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e9      	bne.n	800333c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a6 	beq.w	80034c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b8b      	ldr	r3, [pc, #556]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b88      	ldr	r3, [pc, #544]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a87      	ldr	r2, [pc, #540]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003390:	61d3      	str	r3, [r2, #28]
 8003392:	4b85      	ldr	r3, [pc, #532]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b82      	ldr	r3, [pc, #520]	@ (80035ac <HAL_RCC_OscConfig+0x4c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <HAL_RCC_OscConfig+0x4c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ac <HAL_RCC_OscConfig+0x4c8>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7ff f901 	bl	80025c0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7ff f8fd 	bl	80025c0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	@ 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e103      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b75      	ldr	r3, [pc, #468]	@ (80035ac <HAL_RCC_OscConfig+0x4c8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x312>
 80033e8:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	e02d      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x334>
 80033fe:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a69      	ldr	r2, [pc, #420]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b67      	ldr	r3, [pc, #412]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a66      	ldr	r2, [pc, #408]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x356>
 8003420:	4b61      	ldr	r3, [pc, #388]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a60      	ldr	r2, [pc, #384]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	4b5e      	ldr	r3, [pc, #376]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a5d      	ldr	r2, [pc, #372]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6213      	str	r3, [r2, #32]
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a5a      	ldr	r2, [pc, #360]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6213      	str	r3, [r2, #32]
 8003446:	4b58      	ldr	r3, [pc, #352]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7ff f8b1 	bl	80025c0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7ff f8ad 	bl	80025c0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0b1      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x37e>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7ff f89b 	bl	80025c0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7ff f897 	bl	80025c0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e09b      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b3c      	ldr	r3, [pc, #240]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a3b      	ldr	r2, [pc, #236]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8087 	beq.w	80035da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	4b36      	ldr	r3, [pc, #216]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d061      	beq.n	800359c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d146      	bne.n	800356e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7ff f86b 	bl	80025c0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7ff f867 	bl	80025c0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e06d      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	4b29      	ldr	r3, [pc, #164]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003516:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4921      	ldr	r1, [pc, #132]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003528:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a19      	ldr	r1, [r3, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	430b      	orrs	r3, r1
 800353a:	491b      	ldr	r1, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7ff f83b 	bl	80025c0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7ff f837 	bl	80025c0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e03d      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x46a>
 800356c:	e035      	b.n	80035da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <HAL_RCC_OscConfig+0x4cc>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7ff f824 	bl	80025c0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7ff f820 	bl	80025c0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e026      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x498>
 800359a:	e01e      	b.n	80035da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e019      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_RCC_OscConfig+0x500>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000

080035e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0d0      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b6a      	ldr	r3, [pc, #424]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d910      	bls.n	800362c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b67      	ldr	r3, [pc, #412]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	4965      	ldr	r1, [pc, #404]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0b8      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a58      	ldr	r2, [pc, #352]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800364e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800365c:	4b53      	ldr	r3, [pc, #332]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a52      	ldr	r2, [pc, #328]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	494d      	ldr	r1, [pc, #308]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d040      	beq.n	8003708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d115      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e073      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4936      	ldr	r1, [pc, #216]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d8:	f7fe ff72 	bl	80025c0 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe ff6e 	bl	80025c0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e053      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d210      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0207 	bic.w	r2, r3, #7
 800371e:	4922      	ldr	r1, [pc, #136]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e032      	b.n	800379e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4916      	ldr	r1, [pc, #88]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003762:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003776:	f000 f821 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	490a      	ldr	r1, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	fa22 f303 	lsr.w	r3, r2, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fed0 	bl	800253c <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	0800ada8 	.word	0x0800ada8
 80037b4:	20000014 	.word	0x20000014
 80037b8:	20000018 	.word	0x20000018

080037bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x30>
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x36>
 80037ea:	e027      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ee:	613b      	str	r3, [r7, #16]
      break;
 80037f0:	e027      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0c9b      	lsrs	r3, r3, #18
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	4a17      	ldr	r2, [pc, #92]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d010      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800380a:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x94>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0c5b      	lsrs	r3, r3, #17
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	4a11      	ldr	r2, [pc, #68]	@ (800385c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a0d      	ldr	r2, [pc, #52]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x98>)
 800381e:	fb03 f202 	mul.w	r2, r3, r2
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e004      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0c      	ldr	r2, [pc, #48]	@ (8003860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	613b      	str	r3, [r7, #16]
      break;
 800383a:	e002      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x98>)
 800383e:	613b      	str	r3, [r7, #16]
      break;
 8003840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003842:	693b      	ldr	r3, [r7, #16]
}
 8003844:	4618      	mov	r0, r3
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	007a1200 	.word	0x007a1200
 8003858:	0800adc0 	.word	0x0800adc0
 800385c:	0800add0 	.word	0x0800add0
 8003860:	003d0900 	.word	0x003d0900

08003864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <HAL_RCC_GetHCLKFreq+0x10>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	20000014 	.word	0x20000014

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800387c:	f7ff fff2 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	@ (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	0800adb8 	.word	0x0800adb8

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038a4:	f7ff ffde 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0adb      	lsrs	r3, r3, #11
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800adb8 	.word	0x0800adb8

080038c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <RCC_Delay+0x34>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <RCC_Delay+0x38>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0a5b      	lsrs	r3, r3, #9
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038e4:	bf00      	nop
  }
  while (Delay --);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	60fa      	str	r2, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <RCC_Delay+0x1c>
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000014 	.word	0x20000014
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e076      	b.n	8003a04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fad6 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	0c1a      	lsrs	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f002 0204 	and.w	r2, r2, #4
 80039e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fdd0 	bl	80025c0 <HAL_GetTick>
 8003a20:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	e12a      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0x36>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e122      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_SPI_Transmit+0x48>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e11b      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d007      	beq.n	8003ae2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aea:	d152      	bne.n	8003b92 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_SPI_Transmit+0xee>
 8003af4:	8b7b      	ldrh	r3, [r7, #26]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d145      	bne.n	8003b86 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1e:	e032      	b.n	8003b86 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d112      	bne.n	8003b54 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b52:	e018      	b.n	8003b86 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b54:	f7fe fd34 	bl	80025c0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d803      	bhi.n	8003b6c <HAL_SPI_Transmit+0x160>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_Transmit+0x166>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e082      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1c7      	bne.n	8003b20 <HAL_SPI_Transmit+0x114>
 8003b90:	e053      	b.n	8003c3a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x194>
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d147      	bne.n	8003c30 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bc6:	e033      	b.n	8003c30 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d113      	bne.n	8003bfe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bfc:	e018      	b.n	8003c30 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfe:	f7fe fcdf 	bl	80025c0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d803      	bhi.n	8003c16 <HAL_SPI_Transmit+0x20a>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_Transmit+0x210>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e02d      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1c6      	bne.n	8003bc8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fe0c 	bl	800485c <SPI_EndRxTxTransaction>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e104      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cbc:	d112      	bne.n	8003ce4 <HAL_SPI_Receive+0x50>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8f3 	bl	8003ec6 <HAL_SPI_TransmitReceive>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	e0ec      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce4:	f7fe fc6c 	bl	80025c0 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_Receive+0x62>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0e1      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_SPI_Receive+0x74>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0da      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2204      	movs	r2, #4
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d56:	d10f      	bne.n	8003d78 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b40      	cmp	r3, #64	@ 0x40
 8003d84:	d007      	beq.n	8003d96 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d170      	bne.n	8003e80 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d9e:	e035      	b.n	8003e0c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d115      	bne.n	8003dda <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f103 020c 	add.w	r2, r3, #12
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd8:	e018      	b.n	8003e0c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dda:	f7fe fbf1 	bl	80025c0 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d803      	bhi.n	8003df2 <HAL_SPI_Receive+0x15e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df0:	d102      	bne.n	8003df8 <HAL_SPI_Receive+0x164>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e058      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1c4      	bne.n	8003da0 <HAL_SPI_Receive+0x10c>
 8003e16:	e038      	b.n	8003e8a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d113      	bne.n	8003e4e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	b292      	uxth	r2, r2
 8003e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e4c:	e018      	b.n	8003e80 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4e:	f7fe fbb7 	bl	80025c0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d803      	bhi.n	8003e66 <HAL_SPI_Receive+0x1d2>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e64:	d102      	bne.n	8003e6c <HAL_SPI_Receive+0x1d8>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e01e      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1c6      	bne.n	8003e18 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fc92 	bl	80047b8 <SPI_EndRxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	@ 0x28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed8:	f7fe fb72 	bl	80025c0 <HAL_GetTick>
 8003edc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ee4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ef0:	7ffb      	ldrb	r3, [r7, #31]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d00c      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x4a>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003efc:	d106      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x46>
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d001      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e17f      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x5c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x5c>
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e174      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x6e>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e16d      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d003      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d007      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fac:	d17e      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0xf6>
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d16c      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe0:	e059      	b.n	8004096 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11b      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x162>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x162>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d113      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d119      	bne.n	800406a <HAL_SPI_TransmitReceive+0x1a4>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	b292      	uxth	r2, r2
 800404c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004066:	2301      	movs	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800406a:	f7fe faa9 	bl	80025c0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004076:	429a      	cmp	r2, r3
 8004078:	d80d      	bhi.n	8004096 <HAL_SPI_TransmitReceive+0x1d0>
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004080:	d009      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0bc      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1a0      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x11c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d19b      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x11c>
 80040aa:	e082      	b.n	80041b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x1f4>
 80040b4:	8afb      	ldrh	r3, [r7, #22]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d171      	bne.n	800419e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e0:	e05d      	b.n	800419e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d11c      	bne.n	800412a <HAL_SPI_TransmitReceive+0x264>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <HAL_SPI_TransmitReceive+0x264>
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d114      	bne.n	800412a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d119      	bne.n	800416c <HAL_SPI_TransmitReceive+0x2a6>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d014      	beq.n	800416c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004168:	2301      	movs	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800416c:	f7fe fa28 	bl	80025c0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004178:	429a      	cmp	r2, r3
 800417a:	d803      	bhi.n	8004184 <HAL_SPI_TransmitReceive+0x2be>
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004182:	d102      	bne.n	800418a <HAL_SPI_TransmitReceive+0x2c4>
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e038      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d19c      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x21c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d197      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fb50 	bl	800485c <SPI_EndRxTxTransaction>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e01d      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800420e:	2300      	movs	r3, #0
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	@ 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e097      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Transmit_DMA+0x2a>
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e08f      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_SPI_Transmit_DMA+0x3c>
 8004250:	2302      	movs	r3, #2
 8004252:	e088      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a2:	d10f      	bne.n	80042c4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	4a29      	ldr	r2, [pc, #164]	@ (8004370 <HAL_SPI_Transmit_DMA+0x158>)
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	4a28      	ldr	r2, [pc, #160]	@ (8004374 <HAL_SPI_Transmit_DMA+0x15c>)
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	4a27      	ldr	r2, [pc, #156]	@ (8004378 <HAL_SPI_Transmit_DMA+0x160>)
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	2200      	movs	r2, #0
 80042e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4619      	mov	r1, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042fc:	f7fe faf6 	bl	80028ec <HAL_DMA_Start_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e023      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d007      	beq.n	800433c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0220 	orr.w	r2, r2, #32
 8004352:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0202 	orr.w	r2, r2, #2
 8004362:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	08004625 	.word	0x08004625
 8004374:	0800457f 	.word	0x0800457f
 8004378:	08004641 	.word	0x08004641

0800437c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10f      	bne.n	80043c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
    return;
 80043be:	e0be      	b.n	800453e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x66>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
    return;
 80043e0:	e0ad      	b.n	800453e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_IRQHandler+0x80>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a1 	beq.w	800453e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 809a 	beq.w	800453e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d023      	beq.n	800445e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d011      	beq.n	8004446 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	e00b      	b.n	800445e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]
        return;
 800445c:	e06f      	b.n	800453e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d014      	beq.n	8004494 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d04f      	beq.n	800453c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_SPI_IRQHandler+0x14c>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d034      	beq.n	8004532 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0203 	bic.w	r2, r2, #3
 80044d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d011      	beq.n	8004504 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_SPI_IRQHandler+0x1c8>)
 80044e6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fa99 	bl	8002a24 <HAL_DMA_Abort_IT>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004510:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <HAL_SPI_IRQHandler+0x1c8>)
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe fa83 	bl	8002a24 <HAL_DMA_Abort_IT>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004530:	e003      	b.n	800453a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f81a 	bl	800456c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004538:	e000      	b.n	800453c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800453a:	bf00      	nop
    return;
 800453c:	bf00      	nop
  }
}
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	08004681 	.word	0x08004681

08004548 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458c:	f7fe f818 	bl	80025c0 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b20      	cmp	r3, #32
 800459e:	d03b      	beq.n	8004618 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0220 	bic.w	r2, r2, #32
 80045ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0202 	bic.w	r2, r2, #2
 80045be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	2164      	movs	r1, #100	@ 0x64
 80045c4:	6978      	ldr	r0, [r7, #20]
 80045c6:	f000 f949 	bl	800485c <SPI_EndRxTxTransaction>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7ff ffab 	bl	800456c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004616:	e002      	b.n	800461e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f7ff ff95 	bl	8004548 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff ff91 	bl	800455a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0203 	bic.w	r2, r2, #3
 800465c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f043 0210 	orr.w	r2, r3, #16
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff ff7a 	bl	800456c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff ff66 	bl	800456c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b8:	f7fd ff82 	bl	80025c0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c8:	f7fd ff7a 	bl	80025c0 <HAL_GetTick>
 80046cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ce:	4b39      	ldr	r3, [pc, #228]	@ (80047b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	015b      	lsls	r3, r3, #5
 80046d4:	0d1b      	lsrs	r3, r3, #20
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046de:	e054      	b.n	800478a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046e6:	d050      	beq.n	800478a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e8:	f7fd ff6a 	bl	80025c0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d902      	bls.n	80046fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d13d      	bne.n	800477a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800470c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004716:	d111      	bne.n	800473c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004720:	d004      	beq.n	800472c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472a:	d107      	bne.n	800473c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004744:	d10f      	bne.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004764:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e017      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3b01      	subs	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4013      	ands	r3, r2
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d19b      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000014 	.word	0x20000014

080047b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047cc:	d111      	bne.n	80047f2 <SPI_EndRxTransaction+0x3a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d6:	d004      	beq.n	80047e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e0:	d107      	bne.n	80047f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047fa:	d117      	bne.n	800482c <SPI_EndRxTransaction+0x74>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004804:	d112      	bne.n	800482c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	2101      	movs	r1, #1
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ff49 	bl	80046a8 <SPI_WaitFlagStateUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e013      	b.n	8004854 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	@ 0x80
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ff36 	bl	80046a8 <SPI_WaitFlagStateUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e000      	b.n	8004854 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2201      	movs	r2, #1
 8004870:	2102      	movs	r1, #2
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff18 	bl	80046a8 <SPI_WaitFlagStateUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e013      	b.n	80048b6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	@ 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff ff05 	bl	80046a8 <SPI_WaitFlagStateUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e000      	b.n	80048b6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e041      	b.n	8004954 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fd fc19 	bl	800211c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fa5b 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e03a      	b.n	80049ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x58>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499e:	d009      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x58>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a14      	ldr	r2, [pc, #80]	@ (80049f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x58>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <HAL_TIM_Base_Start_IT+0xa0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d111      	bne.n	80049d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d010      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	e007      	b.n	80049e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800

08004a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01b      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0202 	mvn.w	r2, #2
 8004a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f998 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f98b 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f99a 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f972 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f965 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f974 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0208 	mvn.w	r2, #8
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f94c 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f93f 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f94e 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f926 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f919 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f928 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0201 	mvn.w	r2, #1
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fb60 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa7f 	bl	800508e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8f8 	bl	8004da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0220 	mvn.w	r2, #32
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa52 	bl	800507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0b4      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x186>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c34:	d03e      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3a:	f200 8087 	bhi.w	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x172>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	d87f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b70      	cmp	r3, #112	@ 0x70
 8004c4e:	d01a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xa6>
 8004c50:	2b70      	cmp	r3, #112	@ 0x70
 8004c52:	d87b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b60      	cmp	r3, #96	@ 0x60
 8004c56:	d050      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x11a>
 8004c58:	2b60      	cmp	r3, #96	@ 0x60
 8004c5a:	d877      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d03c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xfa>
 8004c60:	2b50      	cmp	r3, #80	@ 0x50
 8004c62:	d873      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d058      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x13a>
 8004c68:	2b40      	cmp	r3, #64	@ 0x40
 8004c6a:	d86f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b30      	cmp	r3, #48	@ 0x30
 8004c6e:	d064      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b30      	cmp	r3, #48	@ 0x30
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d867      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d05a      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	e062      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	f000 f974 	bl	8004f82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
      break;
 8004cb2:	e04f      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	f000 f95d 	bl	8004f82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f000 f8d4 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	@ 0x50
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f92b 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 f8f2 	bl	8004ef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	@ 0x60
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f91b 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f8b4 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	@ 0x40
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f90b 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f000 f902 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e003      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
	...

08004db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2f      	ldr	r2, [pc, #188]	@ (8004e88 <TIM_Base_SetConfig+0xd0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x30>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x30>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <TIM_Base_SetConfig+0xd4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x30>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e90 <TIM_Base_SetConfig+0xd8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <TIM_Base_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <TIM_Base_SetConfig+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e08:	d007      	beq.n	8004e1a <TIM_Base_SetConfig+0x62>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <TIM_Base_SetConfig+0xd4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_Base_SetConfig+0x62>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <TIM_Base_SetConfig+0xd8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d108      	bne.n	8004e2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0d      	ldr	r2, [pc, #52]	@ (8004e88 <TIM_Base_SetConfig+0xd0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800

08004e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 030a 	bic.w	r3, r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	031b      	lsls	r3, r3, #12
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	021a      	lsls	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e046      	b.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005024:	d009      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a10      	ldr	r2, [pc, #64]	@ (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10c      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4313      	orrs	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800

0800507c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e042      	b.n	8005138 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd f84c 	bl	8002164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	@ 0x24
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fd63 	bl	8005bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	@ 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b20      	cmp	r3, #32
 800515e:	d175      	bne.n	800524c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Transmit+0x2c>
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e06e      	b.n	800524e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2221      	movs	r2, #33	@ 0x21
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517e:	f7fd fa1f 	bl	80025c0 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005198:	d108      	bne.n	80051ac <HAL_UART_Transmit+0x6c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e003      	b.n	80051b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b4:	e02e      	b.n	8005214 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fb01 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e03a      	b.n	800524e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	3302      	adds	r3, #2
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e007      	b.n	8005206 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1cb      	bne.n	80051b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	2140      	movs	r1, #64	@ 0x40
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 facd 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e006      	b.n	800524e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b0ba      	sub	sp, #232	@ 0xe8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10f      	bne.n	80052be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
 80052aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fbbc 	bl	8005a34 <UART_Receive_IT>
      return;
 80052bc:	e25b      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80de 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
 80052c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80d1 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
 8005312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f043 0202 	orr.w	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d105      	bne.n	8005372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 81f2 	beq.w	800576c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb47 	bl	8005a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <HAL_UART_IRQHandler+0x17a>
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04f      	beq.n	8005472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa51 	bl	800587a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d041      	beq.n	800546a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800541e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800542a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d9      	bne.n	80053e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d013      	beq.n	8005462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	4a7e      	ldr	r2, [pc, #504]	@ (8005638 <HAL_UART_IRQHandler+0x3e0>)
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd faec 	bl	8002a24 <HAL_DMA_Abort_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005460:	e00e      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f99c 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	e00a      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f998 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	e006      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f994 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800547e:	e175      	b.n	800576c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	bf00      	nop
    return;
 8005482:	e173      	b.n	800576c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 814f 	bne.w	800572c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8148 	beq.w	800572c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8141 	beq.w	800572c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80b6 	beq.w	800563c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8145 	beq.w	8005770 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ee:	429a      	cmp	r2, r3
 80054f0:	f080 813e 	bcs.w	8005770 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b20      	cmp	r3, #32
 8005504:	f000 8088 	beq.w	8005618 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800551e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005526:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005534:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005540:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800554c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1d9      	bne.n	8005508 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005564:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005578:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800557c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005580:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800558a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e1      	bne.n	8005554 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e3      	bne.n	8005590 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd f9ca 	bl	80029ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005626:	b29b      	uxth	r3, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8bf 	bl	80057b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005634:	e09c      	b.n	8005770 <HAL_UART_IRQHandler+0x518>
 8005636:	bf00      	nop
 8005638:	0800593f 	.word	0x0800593f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005644:	b29b      	uxth	r3, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 808e 	beq.w	8005774 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8089 	beq.w	8005774 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005686:	647a      	str	r2, [r7, #68]	@ 0x44
 8005688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800568c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e3      	bne.n	8005662 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	623b      	str	r3, [r7, #32]
   return(result);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056be:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e3      	bne.n	800569a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0310 	bic.w	r3, r3, #16
 80056f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	617b      	str	r3, [r7, #20]
   return(result);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e3      	bne.n	80056e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800571e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f844 	bl	80057b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572a:	e023      	b.n	8005774 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_UART_IRQHandler+0x4f4>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f90e 	bl	8005966 <UART_Transmit_IT>
    return;
 800574a:	e014      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <HAL_UART_IRQHandler+0x51e>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f94d 	bl	8005a04 <UART_EndTransmit_IT>
    return;
 800576a:	e004      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
    return;
 800576c:	bf00      	nop
 800576e:	e002      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
      return;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
      return;
 8005774:	bf00      	nop
  }
}
 8005776:	37e8      	adds	r7, #232	@ 0xe8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d8:	e03b      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e0:	d037      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fc feed 	bl	80025c0 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6a3a      	ldr	r2, [r7, #32]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e03a      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d023      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d020      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b40      	cmp	r3, #64	@ 0x40
 8005814:	d01d      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d116      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f81d 	bl	800587a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2208      	movs	r2, #8
 8005844:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e00f      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	429a      	cmp	r2, r3
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	429a      	cmp	r2, r3
 800586e:	d0b4      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800587a:	b480      	push	{r7}
 800587c:	b095      	sub	sp, #84	@ 0x54
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d119      	bne.n	8005926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60bb      	str	r3, [r7, #8]
   return(result);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	647b      	str	r3, [r7, #68]	@ 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005912:	61ba      	str	r2, [r7, #24]
 8005914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	613b      	str	r3, [r7, #16]
   return(result);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005934:	bf00      	nop
 8005936:	3754      	adds	r7, #84	@ 0x54
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff ff21 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b21      	cmp	r3, #33	@ 0x21
 8005978:	d13e      	bne.n	80059f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005982:	d114      	bne.n	80059ae <UART_Transmit_IT+0x48>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]
 80059ac:	e008      	b.n	80059c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6211      	str	r1, [r2, #32]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fea9 	bl	800577c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b22      	cmp	r3, #34	@ 0x22
 8005a46:	f040 80ae 	bne.w	8005ba6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a52:	d117      	bne.n	8005a84 <UART_Receive_IT+0x50>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d113      	bne.n	8005a84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a82:	e026      	b.n	8005ad2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a96:	d007      	beq.n	8005aa8 <UART_Receive_IT+0x74>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <UART_Receive_IT+0x82>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d15d      	bne.n	8005ba2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0220 	bic.w	r2, r2, #32
 8005af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d135      	bne.n	8005b98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b52:	623a      	str	r2, [r7, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d10a      	bne.n	8005b8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff fe0e 	bl	80057b2 <HAL_UARTEx_RxEventCallback>
 8005b96:	e002      	b.n	8005b9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fdf8 	bl	800578e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e002      	b.n	8005ba8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	@ 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bea:	f023 030c 	bic.w	r3, r3, #12
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <UART_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d103      	bne.n	8005c20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fd fe42 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	e002      	b.n	8005c26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7fd fe2a 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8005c24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009a      	lsls	r2, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	4a22      	ldr	r2, [pc, #136]	@ (8005cc8 <UART_SetConfig+0x118>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	0119      	lsls	r1, r3, #4
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009a      	lsls	r2, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc8 <UART_SetConfig+0x118>)
 8005c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2064      	movs	r0, #100	@ 0x64
 8005c66:	fb00 f303 	mul.w	r3, r0, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	@ 0x32
 8005c70:	4a15      	ldr	r2, [pc, #84]	@ (8005cc8 <UART_SetConfig+0x118>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c7c:	4419      	add	r1, r3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c94:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <UART_SetConfig+0x118>)
 8005c96:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2064      	movs	r0, #100	@ 0x64
 8005c9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	@ 0x32
 8005ca8:	4a07      	ldr	r2, [pc, #28]	@ (8005cc8 <UART_SetConfig+0x118>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	440a      	add	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <__cvt>:
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	bfbb      	ittet	lt
 8005cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	461d      	movlt	r5, r3
 8005cdc:	2300      	movge	r3, #0
 8005cde:	232d      	movlt	r3, #45	@ 0x2d
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	bfb8      	it	lt
 8005ce6:	4614      	movlt	r4, r2
 8005ce8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005cec:	7013      	strb	r3, [r2, #0]
 8005cee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005cf4:	f023 0820 	bic.w	r8, r3, #32
 8005cf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cfc:	d005      	beq.n	8005d0a <__cvt+0x3e>
 8005cfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d02:	d100      	bne.n	8005d06 <__cvt+0x3a>
 8005d04:	3601      	adds	r6, #1
 8005d06:	2302      	movs	r3, #2
 8005d08:	e000      	b.n	8005d0c <__cvt+0x40>
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	aa07      	add	r2, sp, #28
 8005d0e:	9204      	str	r2, [sp, #16]
 8005d10:	aa06      	add	r2, sp, #24
 8005d12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d16:	e9cd 3600 	strd	r3, r6, [sp]
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	f000 fe6f 	bl	8006a00 <_dtoa_r>
 8005d22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d26:	4607      	mov	r7, r0
 8005d28:	d119      	bne.n	8005d5e <__cvt+0x92>
 8005d2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d2c:	07db      	lsls	r3, r3, #31
 8005d2e:	d50e      	bpl.n	8005d4e <__cvt+0x82>
 8005d30:	eb00 0906 	add.w	r9, r0, r6
 8005d34:	2200      	movs	r2, #0
 8005d36:	2300      	movs	r3, #0
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f7fa fee8 	bl	8000b10 <__aeabi_dcmpeq>
 8005d40:	b108      	cbz	r0, 8005d46 <__cvt+0x7a>
 8005d42:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d46:	2230      	movs	r2, #48	@ 0x30
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	454b      	cmp	r3, r9
 8005d4c:	d31e      	bcc.n	8005d8c <__cvt+0xc0>
 8005d4e:	4638      	mov	r0, r7
 8005d50:	9b07      	ldr	r3, [sp, #28]
 8005d52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d54:	1bdb      	subs	r3, r3, r7
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	b008      	add	sp, #32
 8005d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d62:	eb00 0906 	add.w	r9, r0, r6
 8005d66:	d1e5      	bne.n	8005d34 <__cvt+0x68>
 8005d68:	7803      	ldrb	r3, [r0, #0]
 8005d6a:	2b30      	cmp	r3, #48	@ 0x30
 8005d6c:	d10a      	bne.n	8005d84 <__cvt+0xb8>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa fecb 	bl	8000b10 <__aeabi_dcmpeq>
 8005d7a:	b918      	cbnz	r0, 8005d84 <__cvt+0xb8>
 8005d7c:	f1c6 0601 	rsb	r6, r6, #1
 8005d80:	f8ca 6000 	str.w	r6, [sl]
 8005d84:	f8da 3000 	ldr.w	r3, [sl]
 8005d88:	4499      	add	r9, r3
 8005d8a:	e7d3      	b.n	8005d34 <__cvt+0x68>
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	9107      	str	r1, [sp, #28]
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e7d9      	b.n	8005d48 <__cvt+0x7c>

08005d94 <__exponent>:
 8005d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d96:	2900      	cmp	r1, #0
 8005d98:	bfb6      	itet	lt
 8005d9a:	232d      	movlt	r3, #45	@ 0x2d
 8005d9c:	232b      	movge	r3, #43	@ 0x2b
 8005d9e:	4249      	neglt	r1, r1
 8005da0:	2909      	cmp	r1, #9
 8005da2:	7002      	strb	r2, [r0, #0]
 8005da4:	7043      	strb	r3, [r0, #1]
 8005da6:	dd29      	ble.n	8005dfc <__exponent+0x68>
 8005da8:	f10d 0307 	add.w	r3, sp, #7
 8005dac:	461d      	mov	r5, r3
 8005dae:	270a      	movs	r7, #10
 8005db0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005db4:	461a      	mov	r2, r3
 8005db6:	fb07 1416 	mls	r4, r7, r6, r1
 8005dba:	3430      	adds	r4, #48	@ 0x30
 8005dbc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	2c63      	cmp	r4, #99	@ 0x63
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005dca:	dcf1      	bgt.n	8005db0 <__exponent+0x1c>
 8005dcc:	3130      	adds	r1, #48	@ 0x30
 8005dce:	1e94      	subs	r4, r2, #2
 8005dd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	1c41      	adds	r1, r0, #1
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	d30a      	bcc.n	8005df2 <__exponent+0x5e>
 8005ddc:	f10d 0309 	add.w	r3, sp, #9
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	42ac      	cmp	r4, r5
 8005de4:	bf88      	it	hi
 8005de6:	2300      	movhi	r3, #0
 8005de8:	3302      	adds	r3, #2
 8005dea:	4403      	add	r3, r0
 8005dec:	1a18      	subs	r0, r3, r0
 8005dee:	b003      	add	sp, #12
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005df6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005dfa:	e7ed      	b.n	8005dd8 <__exponent+0x44>
 8005dfc:	2330      	movs	r3, #48	@ 0x30
 8005dfe:	3130      	adds	r1, #48	@ 0x30
 8005e00:	7083      	strb	r3, [r0, #2]
 8005e02:	70c1      	strb	r1, [r0, #3]
 8005e04:	1d03      	adds	r3, r0, #4
 8005e06:	e7f1      	b.n	8005dec <__exponent+0x58>

08005e08 <_printf_float>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	b091      	sub	sp, #68	@ 0x44
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005e14:	4616      	mov	r6, r2
 8005e16:	461f      	mov	r7, r3
 8005e18:	4605      	mov	r5, r0
 8005e1a:	f000 fce1 	bl	80067e0 <_localeconv_r>
 8005e1e:	6803      	ldr	r3, [r0, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	9308      	str	r3, [sp, #32]
 8005e24:	f7fa f994 	bl	8000150 <strlen>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e30:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e32:	3307      	adds	r3, #7
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	f103 0208 	add.w	r2, r3, #8
 8005e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e40:	f8d4 b000 	ldr.w	fp, [r4]
 8005e44:	f8c8 2000 	str.w	r2, [r8]
 8005e48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e62:	4b9c      	ldr	r3, [pc, #624]	@ (80060d4 <_printf_float+0x2cc>)
 8005e64:	f7fa fe86 	bl	8000b74 <__aeabi_dcmpun>
 8005e68:	bb70      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e72:	4b98      	ldr	r3, [pc, #608]	@ (80060d4 <_printf_float+0x2cc>)
 8005e74:	f7fa fe60 	bl	8000b38 <__aeabi_dcmple>
 8005e78:	bb30      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fe4f 	bl	8000b24 <__aeabi_dcmplt>
 8005e86:	b110      	cbz	r0, 8005e8e <_printf_float+0x86>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8e:	4a92      	ldr	r2, [pc, #584]	@ (80060d8 <_printf_float+0x2d0>)
 8005e90:	4b92      	ldr	r3, [pc, #584]	@ (80060dc <_printf_float+0x2d4>)
 8005e92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e96:	bf8c      	ite	hi
 8005e98:	4690      	movhi	r8, r2
 8005e9a:	4698      	movls	r8, r3
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	f04f 0900 	mov.w	r9, #0
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	f02b 0304 	bic.w	r3, fp, #4
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	4633      	mov	r3, r6
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9700      	str	r7, [sp, #0]
 8005eb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005eb4:	f000 f9d4 	bl	8006260 <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f040 8090 	bne.w	8005fde <_printf_float+0x1d6>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ec2:	b011      	add	sp, #68	@ 0x44
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f7fa fe50 	bl	8000b74 <__aeabi_dcmpun>
 8005ed4:	b148      	cbz	r0, 8005eea <_printf_float+0xe2>
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bfb8      	it	lt
 8005edc:	232d      	movlt	r3, #45	@ 0x2d
 8005ede:	4a80      	ldr	r2, [pc, #512]	@ (80060e0 <_printf_float+0x2d8>)
 8005ee0:	bfb8      	it	lt
 8005ee2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80060e4 <_printf_float+0x2dc>)
 8005ee8:	e7d3      	b.n	8005e92 <_printf_float+0x8a>
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	d13f      	bne.n	8005f74 <_printf_float+0x16c>
 8005ef4:	2306      	movs	r3, #6
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	9206      	str	r2, [sp, #24]
 8005f02:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f08:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f0a:	9203      	str	r2, [sp, #12]
 8005f0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005f10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	4642      	mov	r2, r8
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f20:	f7ff fed4 	bl	8005ccc <__cvt>
 8005f24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f26:	4680      	mov	r8, r0
 8005f28:	2947      	cmp	r1, #71	@ 0x47
 8005f2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f2c:	d128      	bne.n	8005f80 <_printf_float+0x178>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x130>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd40      	ble.n	8005fba <_printf_float+0x1b2>
 8005f38:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f40:	4652      	mov	r2, sl
 8005f42:	3901      	subs	r1, #1
 8005f44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f48:	910d      	str	r1, [sp, #52]	@ 0x34
 8005f4a:	f7ff ff23 	bl	8005d94 <__exponent>
 8005f4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f50:	4681      	mov	r9, r0
 8005f52:	1813      	adds	r3, r2, r0
 8005f54:	2a01      	cmp	r2, #1
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	dc02      	bgt.n	8005f60 <_printf_float+0x158>
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	07d2      	lsls	r2, r2, #31
 8005f5e:	d501      	bpl.n	8005f64 <_printf_float+0x15c>
 8005f60:	3301      	adds	r3, #1
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d09e      	beq.n	8005eaa <_printf_float+0xa2>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f72:	e79a      	b.n	8005eaa <_printf_float+0xa2>
 8005f74:	2947      	cmp	r1, #71	@ 0x47
 8005f76:	d1bf      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1bd      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e7ba      	b.n	8005ef6 <_printf_float+0xee>
 8005f80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f84:	d9dc      	bls.n	8005f40 <_printf_float+0x138>
 8005f86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f8a:	d118      	bne.n	8005fbe <_printf_float+0x1b6>
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	dd0b      	ble.n	8005faa <_printf_float+0x1a2>
 8005f92:	6121      	str	r1, [r4, #16]
 8005f94:	b913      	cbnz	r3, 8005f9c <_printf_float+0x194>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d502      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	440b      	add	r3, r1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	f04f 0900 	mov.w	r9, #0
 8005fa6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fa8:	e7dc      	b.n	8005f64 <_printf_float+0x15c>
 8005faa:	b913      	cbnz	r3, 8005fb2 <_printf_float+0x1aa>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	07d2      	lsls	r2, r2, #31
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_float+0x1ae>
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	e7f4      	b.n	8005fa0 <_printf_float+0x198>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7f2      	b.n	8005fa0 <_printf_float+0x198>
 8005fba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	db05      	blt.n	8005fd0 <_printf_float+0x1c8>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	6121      	str	r1, [r4, #16]
 8005fc8:	07d8      	lsls	r0, r3, #31
 8005fca:	d5ea      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005fcc:	1c4b      	adds	r3, r1, #1
 8005fce:	e7e7      	b.n	8005fa0 <_printf_float+0x198>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	bfcc      	ite	gt
 8005fd4:	2201      	movgt	r2, #1
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	e7e0      	b.n	8005fa0 <_printf_float+0x198>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	055a      	lsls	r2, r3, #21
 8005fe2:	d407      	bmi.n	8005ff4 <_printf_float+0x1ec>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d12b      	bne.n	800604a <_printf_float+0x242>
 8005ff2:	e764      	b.n	8005ebe <_printf_float+0xb6>
 8005ff4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff8:	f240 80dc 	bls.w	80061b4 <_printf_float+0x3ac>
 8005ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	f7fa fd84 	bl	8000b10 <__aeabi_dcmpeq>
 8006008:	2800      	cmp	r0, #0
 800600a:	d033      	beq.n	8006074 <_printf_float+0x26c>
 800600c:	2301      	movs	r3, #1
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	4a35      	ldr	r2, [pc, #212]	@ (80060e8 <_printf_float+0x2e0>)
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af51 	beq.w	8005ebe <_printf_float+0xb6>
 800601c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006020:	4543      	cmp	r3, r8
 8006022:	db02      	blt.n	800602a <_printf_float+0x222>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07d8      	lsls	r0, r3, #31
 8006028:	d50f      	bpl.n	800604a <_printf_float+0x242>
 800602a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af42 	beq.w	8005ebe <_printf_float+0xb6>
 800603a:	f04f 0900 	mov.w	r9, #0
 800603e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006042:	f104 0a1a 	add.w	sl, r4, #26
 8006046:	45c8      	cmp	r8, r9
 8006048:	dc09      	bgt.n	800605e <_printf_float+0x256>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	f100 8102 	bmi.w	8006256 <_printf_float+0x44e>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e731      	b.n	8005ec2 <_printf_float+0xba>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f af28 	beq.w	8005ebe <_printf_float+0xb6>
 800606e:	f109 0901 	add.w	r9, r9, #1
 8006072:	e7e8      	b.n	8006046 <_printf_float+0x23e>
 8006074:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc38      	bgt.n	80060ec <_printf_float+0x2e4>
 800607a:	2301      	movs	r3, #1
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <_printf_float+0x2e0>)
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af1a 	beq.w	8005ebe <_printf_float+0xb6>
 800608a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800608e:	ea59 0303 	orrs.w	r3, r9, r3
 8006092:	d102      	bne.n	800609a <_printf_float+0x292>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d5d7      	bpl.n	800604a <_printf_float+0x242>
 800609a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f af0a 	beq.w	8005ebe <_printf_float+0xb6>
 80060aa:	f04f 0a00 	mov.w	sl, #0
 80060ae:	f104 0b1a 	add.w	fp, r4, #26
 80060b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060b4:	425b      	negs	r3, r3
 80060b6:	4553      	cmp	r3, sl
 80060b8:	dc01      	bgt.n	80060be <_printf_float+0x2b6>
 80060ba:	464b      	mov	r3, r9
 80060bc:	e793      	b.n	8005fe6 <_printf_float+0x1de>
 80060be:	2301      	movs	r3, #1
 80060c0:	465a      	mov	r2, fp
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f aef8 	beq.w	8005ebe <_printf_float+0xb6>
 80060ce:	f10a 0a01 	add.w	sl, sl, #1
 80060d2:	e7ee      	b.n	80060b2 <_printf_float+0x2aa>
 80060d4:	7fefffff 	.word	0x7fefffff
 80060d8:	0800add6 	.word	0x0800add6
 80060dc:	0800add2 	.word	0x0800add2
 80060e0:	0800adde 	.word	0x0800adde
 80060e4:	0800adda 	.word	0x0800adda
 80060e8:	0800ade2 	.word	0x0800ade2
 80060ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80060f2:	4553      	cmp	r3, sl
 80060f4:	bfa8      	it	ge
 80060f6:	4653      	movge	r3, sl
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	4699      	mov	r9, r3
 80060fc:	dc36      	bgt.n	800616c <_printf_float+0x364>
 80060fe:	f04f 0b00 	mov.w	fp, #0
 8006102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006106:	f104 021a 	add.w	r2, r4, #26
 800610a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800610c:	930a      	str	r3, [sp, #40]	@ 0x28
 800610e:	eba3 0309 	sub.w	r3, r3, r9
 8006112:	455b      	cmp	r3, fp
 8006114:	dc31      	bgt.n	800617a <_printf_float+0x372>
 8006116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006118:	459a      	cmp	sl, r3
 800611a:	dc3a      	bgt.n	8006192 <_printf_float+0x38a>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07da      	lsls	r2, r3, #31
 8006120:	d437      	bmi.n	8006192 <_printf_float+0x38a>
 8006122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006124:	ebaa 0903 	sub.w	r9, sl, r3
 8006128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612a:	ebaa 0303 	sub.w	r3, sl, r3
 800612e:	4599      	cmp	r9, r3
 8006130:	bfa8      	it	ge
 8006132:	4699      	movge	r9, r3
 8006134:	f1b9 0f00 	cmp.w	r9, #0
 8006138:	dc33      	bgt.n	80061a2 <_printf_float+0x39a>
 800613a:	f04f 0800 	mov.w	r8, #0
 800613e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006142:	f104 0b1a 	add.w	fp, r4, #26
 8006146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006148:	ebaa 0303 	sub.w	r3, sl, r3
 800614c:	eba3 0309 	sub.w	r3, r3, r9
 8006150:	4543      	cmp	r3, r8
 8006152:	f77f af7a 	ble.w	800604a <_printf_float+0x242>
 8006156:	2301      	movs	r3, #1
 8006158:	465a      	mov	r2, fp
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f aeac 	beq.w	8005ebe <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	e7ec      	b.n	8006146 <_printf_float+0x33e>
 800616c:	4642      	mov	r2, r8
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	d1c2      	bne.n	80060fe <_printf_float+0x2f6>
 8006178:	e6a1      	b.n	8005ebe <_printf_float+0xb6>
 800617a:	2301      	movs	r3, #1
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	920a      	str	r2, [sp, #40]	@ 0x28
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae9a 	beq.w	8005ebe <_printf_float+0xb6>
 800618a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800618c:	f10b 0b01 	add.w	fp, fp, #1
 8006190:	e7bb      	b.n	800610a <_printf_float+0x302>
 8006192:	4631      	mov	r1, r6
 8006194:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	d1c0      	bne.n	8006122 <_printf_float+0x31a>
 80061a0:	e68d      	b.n	8005ebe <_printf_float+0xb6>
 80061a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061a4:	464b      	mov	r3, r9
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	4442      	add	r2, r8
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	d1c3      	bne.n	800613a <_printf_float+0x332>
 80061b2:	e684      	b.n	8005ebe <_printf_float+0xb6>
 80061b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80061b8:	f1ba 0f01 	cmp.w	sl, #1
 80061bc:	dc01      	bgt.n	80061c2 <_printf_float+0x3ba>
 80061be:	07db      	lsls	r3, r3, #31
 80061c0:	d536      	bpl.n	8006230 <_printf_float+0x428>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4642      	mov	r2, r8
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f ae76 	beq.w	8005ebe <_printf_float+0xb6>
 80061d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae6e 	beq.w	8005ebe <_printf_float+0xb6>
 80061e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061e6:	2200      	movs	r2, #0
 80061e8:	2300      	movs	r3, #0
 80061ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80061ee:	f7fa fc8f 	bl	8000b10 <__aeabi_dcmpeq>
 80061f2:	b9c0      	cbnz	r0, 8006226 <_printf_float+0x41e>
 80061f4:	4653      	mov	r3, sl
 80061f6:	f108 0201 	add.w	r2, r8, #1
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	d10c      	bne.n	800621e <_printf_float+0x416>
 8006204:	e65b      	b.n	8005ebe <_printf_float+0xb6>
 8006206:	2301      	movs	r3, #1
 8006208:	465a      	mov	r2, fp
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	f43f ae54 	beq.w	8005ebe <_printf_float+0xb6>
 8006216:	f108 0801 	add.w	r8, r8, #1
 800621a:	45d0      	cmp	r8, sl
 800621c:	dbf3      	blt.n	8006206 <_printf_float+0x3fe>
 800621e:	464b      	mov	r3, r9
 8006220:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006224:	e6e0      	b.n	8005fe8 <_printf_float+0x1e0>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 0b1a 	add.w	fp, r4, #26
 800622e:	e7f4      	b.n	800621a <_printf_float+0x412>
 8006230:	2301      	movs	r3, #1
 8006232:	4642      	mov	r2, r8
 8006234:	e7e1      	b.n	80061fa <_printf_float+0x3f2>
 8006236:	2301      	movs	r3, #1
 8006238:	464a      	mov	r2, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae3c 	beq.w	8005ebe <_printf_float+0xb6>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800624e:	1a5b      	subs	r3, r3, r1
 8006250:	4543      	cmp	r3, r8
 8006252:	dcf0      	bgt.n	8006236 <_printf_float+0x42e>
 8006254:	e6fd      	b.n	8006052 <_printf_float+0x24a>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	f104 0919 	add.w	r9, r4, #25
 800625e:	e7f4      	b.n	800624a <_printf_float+0x442>

08006260 <_printf_common>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	4698      	mov	r8, r3
 8006268:	688a      	ldr	r2, [r1, #8]
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4607      	mov	r7, r0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfb8      	it	lt
 8006272:	4613      	movlt	r3, r2
 8006274:	6033      	str	r3, [r6, #0]
 8006276:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800627a:	460c      	mov	r4, r1
 800627c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006280:	b10a      	cbz	r2, 8006286 <_printf_common+0x26>
 8006282:	3301      	adds	r3, #1
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	6833      	ldrmi	r3, [r6, #0]
 800628e:	3302      	addmi	r3, #2
 8006290:	6033      	strmi	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f015 0506 	ands.w	r5, r5, #6
 8006298:	d106      	bne.n	80062a8 <_printf_common+0x48>
 800629a:	f104 0a19 	add.w	sl, r4, #25
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc2b      	bgt.n	8006300 <_printf_common+0xa0>
 80062a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	3b00      	subs	r3, #0
 80062b0:	bf18      	it	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d430      	bmi.n	800631a <_printf_common+0xba>
 80062b8:	4641      	mov	r1, r8
 80062ba:	4638      	mov	r0, r7
 80062bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062c0:	47c8      	blx	r9
 80062c2:	3001      	adds	r0, #1
 80062c4:	d023      	beq.n	800630e <_printf_common+0xae>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	6922      	ldr	r2, [r4, #16]
 80062ca:	f003 0306 	and.w	r3, r3, #6
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	bf14      	ite	ne
 80062d2:	2500      	movne	r5, #0
 80062d4:	6833      	ldreq	r3, [r6, #0]
 80062d6:	f04f 0600 	mov.w	r6, #0
 80062da:	bf08      	it	eq
 80062dc:	68e5      	ldreq	r5, [r4, #12]
 80062de:	f104 041a 	add.w	r4, r4, #26
 80062e2:	bf08      	it	eq
 80062e4:	1aed      	subeq	r5, r5, r3
 80062e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062ea:	bf08      	it	eq
 80062ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f0:	4293      	cmp	r3, r2
 80062f2:	bfc4      	itt	gt
 80062f4:	1a9b      	subgt	r3, r3, r2
 80062f6:	18ed      	addgt	r5, r5, r3
 80062f8:	42b5      	cmp	r5, r6
 80062fa:	d11a      	bne.n	8006332 <_printf_common+0xd2>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e008      	b.n	8006312 <_printf_common+0xb2>
 8006300:	2301      	movs	r3, #1
 8006302:	4652      	mov	r2, sl
 8006304:	4641      	mov	r1, r8
 8006306:	4638      	mov	r0, r7
 8006308:	47c8      	blx	r9
 800630a:	3001      	adds	r0, #1
 800630c:	d103      	bne.n	8006316 <_printf_common+0xb6>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	3501      	adds	r5, #1
 8006318:	e7c1      	b.n	800629e <_printf_common+0x3e>
 800631a:	2030      	movs	r0, #48	@ 0x30
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006328:	4422      	add	r2, r4
 800632a:	3302      	adds	r3, #2
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006330:	e7c2      	b.n	80062b8 <_printf_common+0x58>
 8006332:	2301      	movs	r3, #1
 8006334:	4622      	mov	r2, r4
 8006336:	4641      	mov	r1, r8
 8006338:	4638      	mov	r0, r7
 800633a:	47c8      	blx	r9
 800633c:	3001      	adds	r0, #1
 800633e:	d0e6      	beq.n	800630e <_printf_common+0xae>
 8006340:	3601      	adds	r6, #1
 8006342:	e7d9      	b.n	80062f8 <_printf_common+0x98>

08006344 <_printf_i>:
 8006344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	7e0f      	ldrb	r7, [r1, #24]
 800634a:	4691      	mov	r9, r2
 800634c:	2f78      	cmp	r7, #120	@ 0x78
 800634e:	4680      	mov	r8, r0
 8006350:	460c      	mov	r4, r1
 8006352:	469a      	mov	sl, r3
 8006354:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800635a:	d807      	bhi.n	800636c <_printf_i+0x28>
 800635c:	2f62      	cmp	r7, #98	@ 0x62
 800635e:	d80a      	bhi.n	8006376 <_printf_i+0x32>
 8006360:	2f00      	cmp	r7, #0
 8006362:	f000 80d1 	beq.w	8006508 <_printf_i+0x1c4>
 8006366:	2f58      	cmp	r7, #88	@ 0x58
 8006368:	f000 80b8 	beq.w	80064dc <_printf_i+0x198>
 800636c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006374:	e03a      	b.n	80063ec <_printf_i+0xa8>
 8006376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800637a:	2b15      	cmp	r3, #21
 800637c:	d8f6      	bhi.n	800636c <_printf_i+0x28>
 800637e:	a101      	add	r1, pc, #4	@ (adr r1, 8006384 <_printf_i+0x40>)
 8006380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063f1 	.word	0x080063f1
 800638c:	0800636d 	.word	0x0800636d
 8006390:	0800636d 	.word	0x0800636d
 8006394:	0800636d 	.word	0x0800636d
 8006398:	0800636d 	.word	0x0800636d
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	0800636d 	.word	0x0800636d
 80063a4:	0800636d 	.word	0x0800636d
 80063a8:	0800636d 	.word	0x0800636d
 80063ac:	0800636d 	.word	0x0800636d
 80063b0:	080064ef 	.word	0x080064ef
 80063b4:	0800641b 	.word	0x0800641b
 80063b8:	080064a9 	.word	0x080064a9
 80063bc:	0800636d 	.word	0x0800636d
 80063c0:	0800636d 	.word	0x0800636d
 80063c4:	08006511 	.word	0x08006511
 80063c8:	0800636d 	.word	0x0800636d
 80063cc:	0800641b 	.word	0x0800641b
 80063d0:	0800636d 	.word	0x0800636d
 80063d4:	0800636d 	.word	0x0800636d
 80063d8:	080064b1 	.word	0x080064b1
 80063dc:	6833      	ldr	r3, [r6, #0]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6032      	str	r2, [r6, #0]
 80063e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063ec:	2301      	movs	r3, #1
 80063ee:	e09c      	b.n	800652a <_printf_i+0x1e6>
 80063f0:	6833      	ldr	r3, [r6, #0]
 80063f2:	6820      	ldr	r0, [r4, #0]
 80063f4:	1d19      	adds	r1, r3, #4
 80063f6:	6031      	str	r1, [r6, #0]
 80063f8:	0606      	lsls	r6, r0, #24
 80063fa:	d501      	bpl.n	8006400 <_printf_i+0xbc>
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	e003      	b.n	8006408 <_printf_i+0xc4>
 8006400:	0645      	lsls	r5, r0, #25
 8006402:	d5fb      	bpl.n	80063fc <_printf_i+0xb8>
 8006404:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006408:	2d00      	cmp	r5, #0
 800640a:	da03      	bge.n	8006414 <_printf_i+0xd0>
 800640c:	232d      	movs	r3, #45	@ 0x2d
 800640e:	426d      	negs	r5, r5
 8006410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006414:	230a      	movs	r3, #10
 8006416:	4858      	ldr	r0, [pc, #352]	@ (8006578 <_printf_i+0x234>)
 8006418:	e011      	b.n	800643e <_printf_i+0xfa>
 800641a:	6821      	ldr	r1, [r4, #0]
 800641c:	6833      	ldr	r3, [r6, #0]
 800641e:	0608      	lsls	r0, r1, #24
 8006420:	f853 5b04 	ldr.w	r5, [r3], #4
 8006424:	d402      	bmi.n	800642c <_printf_i+0xe8>
 8006426:	0649      	lsls	r1, r1, #25
 8006428:	bf48      	it	mi
 800642a:	b2ad      	uxthmi	r5, r5
 800642c:	2f6f      	cmp	r7, #111	@ 0x6f
 800642e:	6033      	str	r3, [r6, #0]
 8006430:	bf14      	ite	ne
 8006432:	230a      	movne	r3, #10
 8006434:	2308      	moveq	r3, #8
 8006436:	4850      	ldr	r0, [pc, #320]	@ (8006578 <_printf_i+0x234>)
 8006438:	2100      	movs	r1, #0
 800643a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800643e:	6866      	ldr	r6, [r4, #4]
 8006440:	2e00      	cmp	r6, #0
 8006442:	60a6      	str	r6, [r4, #8]
 8006444:	db05      	blt.n	8006452 <_printf_i+0x10e>
 8006446:	6821      	ldr	r1, [r4, #0]
 8006448:	432e      	orrs	r6, r5
 800644a:	f021 0104 	bic.w	r1, r1, #4
 800644e:	6021      	str	r1, [r4, #0]
 8006450:	d04b      	beq.n	80064ea <_printf_i+0x1a6>
 8006452:	4616      	mov	r6, r2
 8006454:	fbb5 f1f3 	udiv	r1, r5, r3
 8006458:	fb03 5711 	mls	r7, r3, r1, r5
 800645c:	5dc7      	ldrb	r7, [r0, r7]
 800645e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006462:	462f      	mov	r7, r5
 8006464:	42bb      	cmp	r3, r7
 8006466:	460d      	mov	r5, r1
 8006468:	d9f4      	bls.n	8006454 <_printf_i+0x110>
 800646a:	2b08      	cmp	r3, #8
 800646c:	d10b      	bne.n	8006486 <_printf_i+0x142>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	07df      	lsls	r7, r3, #31
 8006472:	d508      	bpl.n	8006486 <_printf_i+0x142>
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	6861      	ldr	r1, [r4, #4]
 8006478:	4299      	cmp	r1, r3
 800647a:	bfde      	ittt	le
 800647c:	2330      	movle	r3, #48	@ 0x30
 800647e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006482:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006486:	1b92      	subs	r2, r2, r6
 8006488:	6122      	str	r2, [r4, #16]
 800648a:	464b      	mov	r3, r9
 800648c:	4621      	mov	r1, r4
 800648e:	4640      	mov	r0, r8
 8006490:	f8cd a000 	str.w	sl, [sp]
 8006494:	aa03      	add	r2, sp, #12
 8006496:	f7ff fee3 	bl	8006260 <_printf_common>
 800649a:	3001      	adds	r0, #1
 800649c:	d14a      	bne.n	8006534 <_printf_i+0x1f0>
 800649e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064a2:	b004      	add	sp, #16
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	f043 0320 	orr.w	r3, r3, #32
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	2778      	movs	r7, #120	@ 0x78
 80064b2:	4832      	ldr	r0, [pc, #200]	@ (800657c <_printf_i+0x238>)
 80064b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	6831      	ldr	r1, [r6, #0]
 80064bc:	061f      	lsls	r7, r3, #24
 80064be:	f851 5b04 	ldr.w	r5, [r1], #4
 80064c2:	d402      	bmi.n	80064ca <_printf_i+0x186>
 80064c4:	065f      	lsls	r7, r3, #25
 80064c6:	bf48      	it	mi
 80064c8:	b2ad      	uxthmi	r5, r5
 80064ca:	6031      	str	r1, [r6, #0]
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	bf44      	itt	mi
 80064d0:	f043 0320 	orrmi.w	r3, r3, #32
 80064d4:	6023      	strmi	r3, [r4, #0]
 80064d6:	b11d      	cbz	r5, 80064e0 <_printf_i+0x19c>
 80064d8:	2310      	movs	r3, #16
 80064da:	e7ad      	b.n	8006438 <_printf_i+0xf4>
 80064dc:	4826      	ldr	r0, [pc, #152]	@ (8006578 <_printf_i+0x234>)
 80064de:	e7e9      	b.n	80064b4 <_printf_i+0x170>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	f023 0320 	bic.w	r3, r3, #32
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	e7f6      	b.n	80064d8 <_printf_i+0x194>
 80064ea:	4616      	mov	r6, r2
 80064ec:	e7bd      	b.n	800646a <_printf_i+0x126>
 80064ee:	6833      	ldr	r3, [r6, #0]
 80064f0:	6825      	ldr	r5, [r4, #0]
 80064f2:	1d18      	adds	r0, r3, #4
 80064f4:	6961      	ldr	r1, [r4, #20]
 80064f6:	6030      	str	r0, [r6, #0]
 80064f8:	062e      	lsls	r6, r5, #24
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	d501      	bpl.n	8006502 <_printf_i+0x1be>
 80064fe:	6019      	str	r1, [r3, #0]
 8006500:	e002      	b.n	8006508 <_printf_i+0x1c4>
 8006502:	0668      	lsls	r0, r5, #25
 8006504:	d5fb      	bpl.n	80064fe <_printf_i+0x1ba>
 8006506:	8019      	strh	r1, [r3, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	4616      	mov	r6, r2
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	e7bc      	b.n	800648a <_printf_i+0x146>
 8006510:	6833      	ldr	r3, [r6, #0]
 8006512:	2100      	movs	r1, #0
 8006514:	1d1a      	adds	r2, r3, #4
 8006516:	6032      	str	r2, [r6, #0]
 8006518:	681e      	ldr	r6, [r3, #0]
 800651a:	6862      	ldr	r2, [r4, #4]
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f9d6 	bl	80068ce <memchr>
 8006522:	b108      	cbz	r0, 8006528 <_printf_i+0x1e4>
 8006524:	1b80      	subs	r0, r0, r6
 8006526:	6060      	str	r0, [r4, #4]
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	2300      	movs	r3, #0
 800652e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006532:	e7aa      	b.n	800648a <_printf_i+0x146>
 8006534:	4632      	mov	r2, r6
 8006536:	4649      	mov	r1, r9
 8006538:	4640      	mov	r0, r8
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	47d0      	blx	sl
 800653e:	3001      	adds	r0, #1
 8006540:	d0ad      	beq.n	800649e <_printf_i+0x15a>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	079b      	lsls	r3, r3, #30
 8006546:	d413      	bmi.n	8006570 <_printf_i+0x22c>
 8006548:	68e0      	ldr	r0, [r4, #12]
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	4298      	cmp	r0, r3
 800654e:	bfb8      	it	lt
 8006550:	4618      	movlt	r0, r3
 8006552:	e7a6      	b.n	80064a2 <_printf_i+0x15e>
 8006554:	2301      	movs	r3, #1
 8006556:	4632      	mov	r2, r6
 8006558:	4649      	mov	r1, r9
 800655a:	4640      	mov	r0, r8
 800655c:	47d0      	blx	sl
 800655e:	3001      	adds	r0, #1
 8006560:	d09d      	beq.n	800649e <_printf_i+0x15a>
 8006562:	3501      	adds	r5, #1
 8006564:	68e3      	ldr	r3, [r4, #12]
 8006566:	9903      	ldr	r1, [sp, #12]
 8006568:	1a5b      	subs	r3, r3, r1
 800656a:	42ab      	cmp	r3, r5
 800656c:	dcf2      	bgt.n	8006554 <_printf_i+0x210>
 800656e:	e7eb      	b.n	8006548 <_printf_i+0x204>
 8006570:	2500      	movs	r5, #0
 8006572:	f104 0619 	add.w	r6, r4, #25
 8006576:	e7f5      	b.n	8006564 <_printf_i+0x220>
 8006578:	0800ade4 	.word	0x0800ade4
 800657c:	0800adf5 	.word	0x0800adf5

08006580 <std>:
 8006580:	2300      	movs	r3, #0
 8006582:	b510      	push	{r4, lr}
 8006584:	4604      	mov	r4, r0
 8006586:	e9c0 3300 	strd	r3, r3, [r0]
 800658a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658e:	6083      	str	r3, [r0, #8]
 8006590:	8181      	strh	r1, [r0, #12]
 8006592:	6643      	str	r3, [r0, #100]	@ 0x64
 8006594:	81c2      	strh	r2, [r0, #14]
 8006596:	6183      	str	r3, [r0, #24]
 8006598:	4619      	mov	r1, r3
 800659a:	2208      	movs	r2, #8
 800659c:	305c      	adds	r0, #92	@ 0x5c
 800659e:	f000 f916 	bl	80067ce <memset>
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <std+0x58>)
 80065a4:	6224      	str	r4, [r4, #32]
 80065a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80065a8:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <std+0x5c>)
 80065aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065ac:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <std+0x60>)
 80065ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065b0:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <std+0x64>)
 80065b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80065b4:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <std+0x68>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d006      	beq.n	80065c8 <std+0x48>
 80065ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065be:	4294      	cmp	r4, r2
 80065c0:	d002      	beq.n	80065c8 <std+0x48>
 80065c2:	33d0      	adds	r3, #208	@ 0xd0
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d105      	bne.n	80065d4 <std+0x54>
 80065c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d0:	f000 b97a 	b.w	80068c8 <__retarget_lock_init_recursive>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	bf00      	nop
 80065d8:	08006749 	.word	0x08006749
 80065dc:	0800676b 	.word	0x0800676b
 80065e0:	080067a3 	.word	0x080067a3
 80065e4:	080067c7 	.word	0x080067c7
 80065e8:	2000157c 	.word	0x2000157c

080065ec <stdio_exit_handler>:
 80065ec:	4a02      	ldr	r2, [pc, #8]	@ (80065f8 <stdio_exit_handler+0xc>)
 80065ee:	4903      	ldr	r1, [pc, #12]	@ (80065fc <stdio_exit_handler+0x10>)
 80065f0:	4803      	ldr	r0, [pc, #12]	@ (8006600 <stdio_exit_handler+0x14>)
 80065f2:	f000 b869 	b.w	80066c8 <_fwalk_sglue>
 80065f6:	bf00      	nop
 80065f8:	20000020 	.word	0x20000020
 80065fc:	08008249 	.word	0x08008249
 8006600:	20000030 	.word	0x20000030

08006604 <cleanup_stdio>:
 8006604:	6841      	ldr	r1, [r0, #4]
 8006606:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <cleanup_stdio+0x34>)
 8006608:	b510      	push	{r4, lr}
 800660a:	4299      	cmp	r1, r3
 800660c:	4604      	mov	r4, r0
 800660e:	d001      	beq.n	8006614 <cleanup_stdio+0x10>
 8006610:	f001 fe1a 	bl	8008248 <_fflush_r>
 8006614:	68a1      	ldr	r1, [r4, #8]
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <cleanup_stdio+0x38>)
 8006618:	4299      	cmp	r1, r3
 800661a:	d002      	beq.n	8006622 <cleanup_stdio+0x1e>
 800661c:	4620      	mov	r0, r4
 800661e:	f001 fe13 	bl	8008248 <_fflush_r>
 8006622:	68e1      	ldr	r1, [r4, #12]
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <cleanup_stdio+0x3c>)
 8006626:	4299      	cmp	r1, r3
 8006628:	d004      	beq.n	8006634 <cleanup_stdio+0x30>
 800662a:	4620      	mov	r0, r4
 800662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006630:	f001 be0a 	b.w	8008248 <_fflush_r>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop
 8006638:	2000157c 	.word	0x2000157c
 800663c:	200015e4 	.word	0x200015e4
 8006640:	2000164c 	.word	0x2000164c

08006644 <global_stdio_init.part.0>:
 8006644:	b510      	push	{r4, lr}
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <global_stdio_init.part.0+0x30>)
 8006648:	4c0b      	ldr	r4, [pc, #44]	@ (8006678 <global_stdio_init.part.0+0x34>)
 800664a:	4a0c      	ldr	r2, [pc, #48]	@ (800667c <global_stdio_init.part.0+0x38>)
 800664c:	4620      	mov	r0, r4
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	2104      	movs	r1, #4
 8006652:	2200      	movs	r2, #0
 8006654:	f7ff ff94 	bl	8006580 <std>
 8006658:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800665c:	2201      	movs	r2, #1
 800665e:	2109      	movs	r1, #9
 8006660:	f7ff ff8e 	bl	8006580 <std>
 8006664:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006668:	2202      	movs	r2, #2
 800666a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666e:	2112      	movs	r1, #18
 8006670:	f7ff bf86 	b.w	8006580 <std>
 8006674:	200016b4 	.word	0x200016b4
 8006678:	2000157c 	.word	0x2000157c
 800667c:	080065ed 	.word	0x080065ed

08006680 <__sfp_lock_acquire>:
 8006680:	4801      	ldr	r0, [pc, #4]	@ (8006688 <__sfp_lock_acquire+0x8>)
 8006682:	f000 b922 	b.w	80068ca <__retarget_lock_acquire_recursive>
 8006686:	bf00      	nop
 8006688:	200016bd 	.word	0x200016bd

0800668c <__sfp_lock_release>:
 800668c:	4801      	ldr	r0, [pc, #4]	@ (8006694 <__sfp_lock_release+0x8>)
 800668e:	f000 b91d 	b.w	80068cc <__retarget_lock_release_recursive>
 8006692:	bf00      	nop
 8006694:	200016bd 	.word	0x200016bd

08006698 <__sinit>:
 8006698:	b510      	push	{r4, lr}
 800669a:	4604      	mov	r4, r0
 800669c:	f7ff fff0 	bl	8006680 <__sfp_lock_acquire>
 80066a0:	6a23      	ldr	r3, [r4, #32]
 80066a2:	b11b      	cbz	r3, 80066ac <__sinit+0x14>
 80066a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a8:	f7ff bff0 	b.w	800668c <__sfp_lock_release>
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <__sinit+0x28>)
 80066ae:	6223      	str	r3, [r4, #32]
 80066b0:	4b04      	ldr	r3, [pc, #16]	@ (80066c4 <__sinit+0x2c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f5      	bne.n	80066a4 <__sinit+0xc>
 80066b8:	f7ff ffc4 	bl	8006644 <global_stdio_init.part.0>
 80066bc:	e7f2      	b.n	80066a4 <__sinit+0xc>
 80066be:	bf00      	nop
 80066c0:	08006605 	.word	0x08006605
 80066c4:	200016b4 	.word	0x200016b4

080066c8 <_fwalk_sglue>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4607      	mov	r7, r0
 80066ce:	4688      	mov	r8, r1
 80066d0:	4614      	mov	r4, r2
 80066d2:	2600      	movs	r6, #0
 80066d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d8:	f1b9 0901 	subs.w	r9, r9, #1
 80066dc:	d505      	bpl.n	80066ea <_fwalk_sglue+0x22>
 80066de:	6824      	ldr	r4, [r4, #0]
 80066e0:	2c00      	cmp	r4, #0
 80066e2:	d1f7      	bne.n	80066d4 <_fwalk_sglue+0xc>
 80066e4:	4630      	mov	r0, r6
 80066e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d907      	bls.n	8006700 <_fwalk_sglue+0x38>
 80066f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f4:	3301      	adds	r3, #1
 80066f6:	d003      	beq.n	8006700 <_fwalk_sglue+0x38>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c0      	blx	r8
 80066fe:	4306      	orrs	r6, r0
 8006700:	3568      	adds	r5, #104	@ 0x68
 8006702:	e7e9      	b.n	80066d8 <_fwalk_sglue+0x10>

08006704 <siprintf>:
 8006704:	b40e      	push	{r1, r2, r3}
 8006706:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800670a:	b510      	push	{r4, lr}
 800670c:	2400      	movs	r4, #0
 800670e:	b09d      	sub	sp, #116	@ 0x74
 8006710:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006712:	9002      	str	r0, [sp, #8]
 8006714:	9006      	str	r0, [sp, #24]
 8006716:	9107      	str	r1, [sp, #28]
 8006718:	9104      	str	r1, [sp, #16]
 800671a:	4809      	ldr	r0, [pc, #36]	@ (8006740 <siprintf+0x3c>)
 800671c:	4909      	ldr	r1, [pc, #36]	@ (8006744 <siprintf+0x40>)
 800671e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006722:	9105      	str	r1, [sp, #20]
 8006724:	6800      	ldr	r0, [r0, #0]
 8006726:	a902      	add	r1, sp, #8
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800672c:	f001 fc10 	bl	8007f50 <_svfiprintf_r>
 8006730:	9b02      	ldr	r3, [sp, #8]
 8006732:	701c      	strb	r4, [r3, #0]
 8006734:	b01d      	add	sp, #116	@ 0x74
 8006736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673a:	b003      	add	sp, #12
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	2000002c 	.word	0x2000002c
 8006744:	ffff0208 	.word	0xffff0208

08006748 <__sread>:
 8006748:	b510      	push	{r4, lr}
 800674a:	460c      	mov	r4, r1
 800674c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006750:	f000 f86c 	bl	800682c <_read_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	bfab      	itete	ge
 8006758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800675a:	89a3      	ldrhlt	r3, [r4, #12]
 800675c:	181b      	addge	r3, r3, r0
 800675e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006762:	bfac      	ite	ge
 8006764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006766:	81a3      	strhlt	r3, [r4, #12]
 8006768:	bd10      	pop	{r4, pc}

0800676a <__swrite>:
 800676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	461f      	mov	r7, r3
 8006770:	898b      	ldrh	r3, [r1, #12]
 8006772:	4605      	mov	r5, r0
 8006774:	05db      	lsls	r3, r3, #23
 8006776:	460c      	mov	r4, r1
 8006778:	4616      	mov	r6, r2
 800677a:	d505      	bpl.n	8006788 <__swrite+0x1e>
 800677c:	2302      	movs	r3, #2
 800677e:	2200      	movs	r2, #0
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	f000 f840 	bl	8006808 <_lseek_r>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	4632      	mov	r2, r6
 800678c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006790:	81a3      	strh	r3, [r4, #12]
 8006792:	4628      	mov	r0, r5
 8006794:	463b      	mov	r3, r7
 8006796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800679e:	f000 b857 	b.w	8006850 <_write_r>

080067a2 <__sseek>:
 80067a2:	b510      	push	{r4, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067aa:	f000 f82d 	bl	8006808 <_lseek_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	bf15      	itete	ne
 80067b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067be:	81a3      	strheq	r3, [r4, #12]
 80067c0:	bf18      	it	ne
 80067c2:	81a3      	strhne	r3, [r4, #12]
 80067c4:	bd10      	pop	{r4, pc}

080067c6 <__sclose>:
 80067c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ca:	f000 b80d 	b.w	80067e8 <_close_r>

080067ce <memset>:
 80067ce:	4603      	mov	r3, r0
 80067d0:	4402      	add	r2, r0
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d100      	bne.n	80067d8 <memset+0xa>
 80067d6:	4770      	bx	lr
 80067d8:	f803 1b01 	strb.w	r1, [r3], #1
 80067dc:	e7f9      	b.n	80067d2 <memset+0x4>
	...

080067e0 <_localeconv_r>:
 80067e0:	4800      	ldr	r0, [pc, #0]	@ (80067e4 <_localeconv_r+0x4>)
 80067e2:	4770      	bx	lr
 80067e4:	2000016c 	.word	0x2000016c

080067e8 <_close_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	2300      	movs	r3, #0
 80067ec:	4d05      	ldr	r5, [pc, #20]	@ (8006804 <_close_r+0x1c>)
 80067ee:	4604      	mov	r4, r0
 80067f0:	4608      	mov	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fb fdf9 	bl	80023ea <_close>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_close_r+0x1a>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_close_r+0x1a>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	200016b8 	.word	0x200016b8

08006808 <_lseek_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	4611      	mov	r1, r2
 8006810:	2200      	movs	r2, #0
 8006812:	4d05      	ldr	r5, [pc, #20]	@ (8006828 <_lseek_r+0x20>)
 8006814:	602a      	str	r2, [r5, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	f7fb fe0b 	bl	8002432 <_lseek>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_lseek_r+0x1e>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_lseek_r+0x1e>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	200016b8 	.word	0x200016b8

0800682c <_read_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	2200      	movs	r2, #0
 8006836:	4d05      	ldr	r5, [pc, #20]	@ (800684c <_read_r+0x20>)
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f7fb fd9c 	bl	8002378 <_read>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_read_r+0x1e>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_read_r+0x1e>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	200016b8 	.word	0x200016b8

08006850 <_write_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	2200      	movs	r2, #0
 800685a:	4d05      	ldr	r5, [pc, #20]	@ (8006870 <_write_r+0x20>)
 800685c:	602a      	str	r2, [r5, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	f7fb fda7 	bl	80023b2 <_write>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_write_r+0x1e>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_write_r+0x1e>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	200016b8 	.word	0x200016b8

08006874 <__errno>:
 8006874:	4b01      	ldr	r3, [pc, #4]	@ (800687c <__errno+0x8>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000002c 	.word	0x2000002c

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	2600      	movs	r6, #0
 8006884:	4d0c      	ldr	r5, [pc, #48]	@ (80068b8 <__libc_init_array+0x38>)
 8006886:	4c0d      	ldr	r4, [pc, #52]	@ (80068bc <__libc_init_array+0x3c>)
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	f002 f96c 	bl	8008b6c <_init>
 8006894:	2600      	movs	r6, #0
 8006896:	4d0a      	ldr	r5, [pc, #40]	@ (80068c0 <__libc_init_array+0x40>)
 8006898:	4c0a      	ldr	r4, [pc, #40]	@ (80068c4 <__libc_init_array+0x44>)
 800689a:	1b64      	subs	r4, r4, r5
 800689c:	10a4      	asrs	r4, r4, #2
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	0800b160 	.word	0x0800b160
 80068bc:	0800b160 	.word	0x0800b160
 80068c0:	0800b160 	.word	0x0800b160
 80068c4:	0800b164 	.word	0x0800b164

080068c8 <__retarget_lock_init_recursive>:
 80068c8:	4770      	bx	lr

080068ca <__retarget_lock_acquire_recursive>:
 80068ca:	4770      	bx	lr

080068cc <__retarget_lock_release_recursive>:
 80068cc:	4770      	bx	lr

080068ce <memchr>:
 80068ce:	4603      	mov	r3, r0
 80068d0:	b510      	push	{r4, lr}
 80068d2:	b2c9      	uxtb	r1, r1
 80068d4:	4402      	add	r2, r0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	d101      	bne.n	80068e0 <memchr+0x12>
 80068dc:	2000      	movs	r0, #0
 80068de:	e003      	b.n	80068e8 <memchr+0x1a>
 80068e0:	7804      	ldrb	r4, [r0, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	428c      	cmp	r4, r1
 80068e6:	d1f6      	bne.n	80068d6 <memchr+0x8>
 80068e8:	bd10      	pop	{r4, pc}

080068ea <quorem>:
 80068ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ee:	6903      	ldr	r3, [r0, #16]
 80068f0:	690c      	ldr	r4, [r1, #16]
 80068f2:	4607      	mov	r7, r0
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	db7e      	blt.n	80069f6 <quorem+0x10c>
 80068f8:	3c01      	subs	r4, #1
 80068fa:	00a3      	lsls	r3, r4, #2
 80068fc:	f100 0514 	add.w	r5, r0, #20
 8006900:	f101 0814 	add.w	r8, r1, #20
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006914:	3301      	adds	r3, #1
 8006916:	429a      	cmp	r2, r3
 8006918:	fbb2 f6f3 	udiv	r6, r2, r3
 800691c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006920:	d32e      	bcc.n	8006980 <quorem+0x96>
 8006922:	f04f 0a00 	mov.w	sl, #0
 8006926:	46c4      	mov	ip, r8
 8006928:	46ae      	mov	lr, r5
 800692a:	46d3      	mov	fp, sl
 800692c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006930:	b298      	uxth	r0, r3
 8006932:	fb06 a000 	mla	r0, r6, r0, sl
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	0c02      	lsrs	r2, r0, #16
 800693a:	fb06 2303 	mla	r3, r6, r3, r2
 800693e:	f8de 2000 	ldr.w	r2, [lr]
 8006942:	b280      	uxth	r0, r0
 8006944:	b292      	uxth	r2, r2
 8006946:	1a12      	subs	r2, r2, r0
 8006948:	445a      	add	r2, fp
 800694a:	f8de 0000 	ldr.w	r0, [lr]
 800694e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006952:	b29b      	uxth	r3, r3
 8006954:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006958:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800695c:	b292      	uxth	r2, r2
 800695e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006962:	45e1      	cmp	r9, ip
 8006964:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006968:	f84e 2b04 	str.w	r2, [lr], #4
 800696c:	d2de      	bcs.n	800692c <quorem+0x42>
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	58eb      	ldr	r3, [r5, r3]
 8006972:	b92b      	cbnz	r3, 8006980 <quorem+0x96>
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	3b04      	subs	r3, #4
 8006978:	429d      	cmp	r5, r3
 800697a:	461a      	mov	r2, r3
 800697c:	d32f      	bcc.n	80069de <quorem+0xf4>
 800697e:	613c      	str	r4, [r7, #16]
 8006980:	4638      	mov	r0, r7
 8006982:	f001 f981 	bl	8007c88 <__mcmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	db25      	blt.n	80069d6 <quorem+0xec>
 800698a:	4629      	mov	r1, r5
 800698c:	2000      	movs	r0, #0
 800698e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006992:	f8d1 c000 	ldr.w	ip, [r1]
 8006996:	fa1f fe82 	uxth.w	lr, r2
 800699a:	fa1f f38c 	uxth.w	r3, ip
 800699e:	eba3 030e 	sub.w	r3, r3, lr
 80069a2:	4403      	add	r3, r0
 80069a4:	0c12      	lsrs	r2, r2, #16
 80069a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b4:	45c1      	cmp	r9, r8
 80069b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ba:	f841 3b04 	str.w	r3, [r1], #4
 80069be:	d2e6      	bcs.n	800698e <quorem+0xa4>
 80069c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069c8:	b922      	cbnz	r2, 80069d4 <quorem+0xea>
 80069ca:	3b04      	subs	r3, #4
 80069cc:	429d      	cmp	r5, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	d30b      	bcc.n	80069ea <quorem+0x100>
 80069d2:	613c      	str	r4, [r7, #16]
 80069d4:	3601      	adds	r6, #1
 80069d6:	4630      	mov	r0, r6
 80069d8:	b003      	add	sp, #12
 80069da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d1cb      	bne.n	800697e <quorem+0x94>
 80069e6:	3c01      	subs	r4, #1
 80069e8:	e7c6      	b.n	8006978 <quorem+0x8e>
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	3b04      	subs	r3, #4
 80069ee:	2a00      	cmp	r2, #0
 80069f0:	d1ef      	bne.n	80069d2 <quorem+0xe8>
 80069f2:	3c01      	subs	r4, #1
 80069f4:	e7ea      	b.n	80069cc <quorem+0xe2>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e7ee      	b.n	80069d8 <quorem+0xee>
 80069fa:	0000      	movs	r0, r0
 80069fc:	0000      	movs	r0, r0
	...

08006a00 <_dtoa_r>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	69c7      	ldr	r7, [r0, #28]
 8006a0a:	b097      	sub	sp, #92	@ 0x5c
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006a14:	b97f      	cbnz	r7, 8006a36 <_dtoa_r+0x36>
 8006a16:	2010      	movs	r0, #16
 8006a18:	f000 fe0e 	bl	8007638 <malloc>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a22:	b920      	cbnz	r0, 8006a2e <_dtoa_r+0x2e>
 8006a24:	21ef      	movs	r1, #239	@ 0xef
 8006a26:	4bac      	ldr	r3, [pc, #688]	@ (8006cd8 <_dtoa_r+0x2d8>)
 8006a28:	48ac      	ldr	r0, [pc, #688]	@ (8006cdc <_dtoa_r+0x2dc>)
 8006a2a:	f001 fc6d 	bl	8008308 <__assert_func>
 8006a2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a32:	6007      	str	r7, [r0, #0]
 8006a34:	60c7      	str	r7, [r0, #12]
 8006a36:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	b159      	cbz	r1, 8006a56 <_dtoa_r+0x56>
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	2301      	movs	r3, #1
 8006a42:	4093      	lsls	r3, r2
 8006a44:	604a      	str	r2, [r1, #4]
 8006a46:	608b      	str	r3, [r1, #8]
 8006a48:	4648      	mov	r0, r9
 8006a4a:	f000 feeb 	bl	8007824 <_Bfree>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	1e2b      	subs	r3, r5, #0
 8006a58:	bfaf      	iteee	ge
 8006a5a:	2300      	movge	r3, #0
 8006a5c:	2201      	movlt	r2, #1
 8006a5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a62:	9307      	strlt	r3, [sp, #28]
 8006a64:	bfa8      	it	ge
 8006a66:	6033      	strge	r3, [r6, #0]
 8006a68:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ce0 <_dtoa_r+0x2e0>)
 8006a6e:	bfb8      	it	lt
 8006a70:	6032      	strlt	r2, [r6, #0]
 8006a72:	ea33 0308 	bics.w	r3, r3, r8
 8006a76:	d112      	bne.n	8006a9e <_dtoa_r+0x9e>
 8006a78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a84:	4323      	orrs	r3, r4
 8006a86:	f000 855e 	beq.w	8007546 <_dtoa_r+0xb46>
 8006a8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ce4 <_dtoa_r+0x2e4>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8560 	beq.w	8007556 <_dtoa_r+0xb56>
 8006a96:	f10a 0303 	add.w	r3, sl, #3
 8006a9a:	f000 bd5a 	b.w	8007552 <_dtoa_r+0xb52>
 8006a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aa2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	f7fa f82f 	bl	8000b10 <__aeabi_dcmpeq>
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	b158      	cbz	r0, 8006ace <_dtoa_r+0xce>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006abe:	b113      	cbz	r3, 8006ac6 <_dtoa_r+0xc6>
 8006ac0:	4b89      	ldr	r3, [pc, #548]	@ (8006ce8 <_dtoa_r+0x2e8>)
 8006ac2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006cec <_dtoa_r+0x2ec>
 8006aca:	f000 bd44 	b.w	8007556 <_dtoa_r+0xb56>
 8006ace:	ab14      	add	r3, sp, #80	@ 0x50
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4648      	mov	r0, r9
 8006ad8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006adc:	f001 f984 	bl	8007de8 <__d2b>
 8006ae0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006ae4:	9003      	str	r0, [sp, #12]
 8006ae6:	2e00      	cmp	r6, #0
 8006ae8:	d078      	beq.n	8006bdc <_dtoa_r+0x1dc>
 8006aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006afc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b00:	9712      	str	r7, [sp, #72]	@ 0x48
 8006b02:	4619      	mov	r1, r3
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b7a      	ldr	r3, [pc, #488]	@ (8006cf0 <_dtoa_r+0x2f0>)
 8006b08:	f7f9 fbe2 	bl	80002d0 <__aeabi_dsub>
 8006b0c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006cc0 <_dtoa_r+0x2c0>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 fd95 	bl	8000640 <__aeabi_dmul>
 8006b16:	a36c      	add	r3, pc, #432	@ (adr r3, 8006cc8 <_dtoa_r+0x2c8>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 fbda 	bl	80002d4 <__adddf3>
 8006b20:	4604      	mov	r4, r0
 8006b22:	4630      	mov	r0, r6
 8006b24:	460d      	mov	r5, r1
 8006b26:	f7f9 fd21 	bl	800056c <__aeabi_i2d>
 8006b2a:	a369      	add	r3, pc, #420	@ (adr r3, 8006cd0 <_dtoa_r+0x2d0>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f7f9 fd86 	bl	8000640 <__aeabi_dmul>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 fbca 	bl	80002d4 <__adddf3>
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	f7fa f82c 	bl	8000ba0 <__aeabi_d2iz>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7f9 ffe7 	bl	8000b24 <__aeabi_dcmplt>
 8006b56:	b140      	cbz	r0, 8006b6a <_dtoa_r+0x16a>
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7f9 fd07 	bl	800056c <__aeabi_i2d>
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	f7f9 ffd5 	bl	8000b10 <__aeabi_dcmpeq>
 8006b66:	b900      	cbnz	r0, 8006b6a <_dtoa_r+0x16a>
 8006b68:	3f01      	subs	r7, #1
 8006b6a:	2f16      	cmp	r7, #22
 8006b6c:	d854      	bhi.n	8006c18 <_dtoa_r+0x218>
 8006b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b72:	4b60      	ldr	r3, [pc, #384]	@ (8006cf4 <_dtoa_r+0x2f4>)
 8006b74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7f9 ffd2 	bl	8000b24 <__aeabi_dcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d04b      	beq.n	8006c1c <_dtoa_r+0x21c>
 8006b84:	2300      	movs	r3, #0
 8006b86:	3f01      	subs	r7, #1
 8006b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b8c:	1b9b      	subs	r3, r3, r6
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	bf49      	itett	mi
 8006b92:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b96:	2300      	movpl	r3, #0
 8006b98:	9304      	strmi	r3, [sp, #16]
 8006b9a:	2300      	movmi	r3, #0
 8006b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b9e:	bf54      	ite	pl
 8006ba0:	9304      	strpl	r3, [sp, #16]
 8006ba2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	db3b      	blt.n	8006c20 <_dtoa_r+0x220>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	970e      	str	r7, [sp, #56]	@ 0x38
 8006bac:	443b      	add	r3, r7
 8006bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d865      	bhi.n	8006c86 <_dtoa_r+0x286>
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	bfc4      	itt	gt
 8006bbe:	3b04      	subgt	r3, #4
 8006bc0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bc4:	bfc8      	it	gt
 8006bc6:	2400      	movgt	r4, #0
 8006bc8:	f1a3 0302 	sub.w	r3, r3, #2
 8006bcc:	bfd8      	it	le
 8006bce:	2401      	movle	r4, #1
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d864      	bhi.n	8006c9e <_dtoa_r+0x29e>
 8006bd4:	e8df f003 	tbb	[pc, r3]
 8006bd8:	2c385553 	.word	0x2c385553
 8006bdc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006be0:	441e      	add	r6, r3
 8006be2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	bfc1      	itttt	gt
 8006bea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bee:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bfa:	bfd6      	itet	le
 8006bfc:	f1c3 0320 	rsble	r3, r3, #32
 8006c00:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c04:	fa04 f003 	lslle.w	r0, r4, r3
 8006c08:	f7f9 fca0 	bl	800054c <__aeabi_ui2d>
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c12:	3e01      	subs	r6, #1
 8006c14:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c16:	e774      	b.n	8006b02 <_dtoa_r+0x102>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7b5      	b.n	8006b88 <_dtoa_r+0x188>
 8006c1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c1e:	e7b4      	b.n	8006b8a <_dtoa_r+0x18a>
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	1bdb      	subs	r3, r3, r7
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	427b      	negs	r3, r7
 8006c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c2e:	e7c1      	b.n	8006bb4 <_dtoa_r+0x1b4>
 8006c30:	2301      	movs	r3, #1
 8006c32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c36:	eb07 0b03 	add.w	fp, r7, r3
 8006c3a:	f10b 0301 	add.w	r3, fp, #1
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	bfb8      	it	lt
 8006c44:	2301      	movlt	r3, #1
 8006c46:	e006      	b.n	8006c56 <_dtoa_r+0x256>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dd28      	ble.n	8006ca4 <_dtoa_r+0x2a4>
 8006c52:	469b      	mov	fp, r3
 8006c54:	9308      	str	r3, [sp, #32]
 8006c56:	2100      	movs	r1, #0
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c5e:	f102 0514 	add.w	r5, r2, #20
 8006c62:	429d      	cmp	r5, r3
 8006c64:	d926      	bls.n	8006cb4 <_dtoa_r+0x2b4>
 8006c66:	6041      	str	r1, [r0, #4]
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f000 fd9b 	bl	80077a4 <_Balloc>
 8006c6e:	4682      	mov	sl, r0
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d143      	bne.n	8006cfc <_dtoa_r+0x2fc>
 8006c74:	4602      	mov	r2, r0
 8006c76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf8 <_dtoa_r+0x2f8>)
 8006c7c:	e6d4      	b.n	8006a28 <_dtoa_r+0x28>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e7e3      	b.n	8006c4a <_dtoa_r+0x24a>
 8006c82:	2300      	movs	r3, #0
 8006c84:	e7d5      	b.n	8006c32 <_dtoa_r+0x232>
 8006c86:	2401      	movs	r4, #1
 8006c88:	2300      	movs	r3, #0
 8006c8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006c8e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006c92:	2200      	movs	r2, #0
 8006c94:	2312      	movs	r3, #18
 8006c96:	f8cd b020 	str.w	fp, [sp, #32]
 8006c9a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c9c:	e7db      	b.n	8006c56 <_dtoa_r+0x256>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca2:	e7f4      	b.n	8006c8e <_dtoa_r+0x28e>
 8006ca4:	f04f 0b01 	mov.w	fp, #1
 8006ca8:	465b      	mov	r3, fp
 8006caa:	f8cd b020 	str.w	fp, [sp, #32]
 8006cae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006cb2:	e7d0      	b.n	8006c56 <_dtoa_r+0x256>
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	0052      	lsls	r2, r2, #1
 8006cb8:	e7d1      	b.n	8006c5e <_dtoa_r+0x25e>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	636f4361 	.word	0x636f4361
 8006cc4:	3fd287a7 	.word	0x3fd287a7
 8006cc8:	8b60c8b3 	.word	0x8b60c8b3
 8006ccc:	3fc68a28 	.word	0x3fc68a28
 8006cd0:	509f79fb 	.word	0x509f79fb
 8006cd4:	3fd34413 	.word	0x3fd34413
 8006cd8:	0800ae13 	.word	0x0800ae13
 8006cdc:	0800ae2a 	.word	0x0800ae2a
 8006ce0:	7ff00000 	.word	0x7ff00000
 8006ce4:	0800ae0f 	.word	0x0800ae0f
 8006ce8:	0800ade3 	.word	0x0800ade3
 8006cec:	0800ade2 	.word	0x0800ade2
 8006cf0:	3ff80000 	.word	0x3ff80000
 8006cf4:	0800af78 	.word	0x0800af78
 8006cf8:	0800ae82 	.word	0x0800ae82
 8006cfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d00:	6018      	str	r0, [r3, #0]
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	2b0e      	cmp	r3, #14
 8006d06:	f200 80a1 	bhi.w	8006e4c <_dtoa_r+0x44c>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	f000 809e 	beq.w	8006e4c <_dtoa_r+0x44c>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	dd33      	ble.n	8006d7c <_dtoa_r+0x37c>
 8006d14:	4b9c      	ldr	r3, [pc, #624]	@ (8006f88 <_dtoa_r+0x588>)
 8006d16:	f007 020f 	and.w	r2, r7, #15
 8006d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1e:	05f8      	lsls	r0, r7, #23
 8006d20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d24:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d2c:	d516      	bpl.n	8006d5c <_dtoa_r+0x35c>
 8006d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d32:	4b96      	ldr	r3, [pc, #600]	@ (8006f8c <_dtoa_r+0x58c>)
 8006d34:	2603      	movs	r6, #3
 8006d36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d3a:	f7f9 fdab 	bl	8000894 <__aeabi_ddiv>
 8006d3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d42:	f004 040f 	and.w	r4, r4, #15
 8006d46:	4d91      	ldr	r5, [pc, #580]	@ (8006f8c <_dtoa_r+0x58c>)
 8006d48:	b954      	cbnz	r4, 8006d60 <_dtoa_r+0x360>
 8006d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d52:	f7f9 fd9f 	bl	8000894 <__aeabi_ddiv>
 8006d56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d5a:	e028      	b.n	8006dae <_dtoa_r+0x3ae>
 8006d5c:	2602      	movs	r6, #2
 8006d5e:	e7f2      	b.n	8006d46 <_dtoa_r+0x346>
 8006d60:	07e1      	lsls	r1, r4, #31
 8006d62:	d508      	bpl.n	8006d76 <_dtoa_r+0x376>
 8006d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d6c:	f7f9 fc68 	bl	8000640 <__aeabi_dmul>
 8006d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d74:	3601      	adds	r6, #1
 8006d76:	1064      	asrs	r4, r4, #1
 8006d78:	3508      	adds	r5, #8
 8006d7a:	e7e5      	b.n	8006d48 <_dtoa_r+0x348>
 8006d7c:	f000 80af 	beq.w	8006ede <_dtoa_r+0x4de>
 8006d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d84:	427c      	negs	r4, r7
 8006d86:	4b80      	ldr	r3, [pc, #512]	@ (8006f88 <_dtoa_r+0x588>)
 8006d88:	f004 020f 	and.w	r2, r4, #15
 8006d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fc54 	bl	8000640 <__aeabi_dmul>
 8006d98:	2602      	movs	r6, #2
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006da0:	4d7a      	ldr	r5, [pc, #488]	@ (8006f8c <_dtoa_r+0x58c>)
 8006da2:	1124      	asrs	r4, r4, #4
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	f040 808f 	bne.w	8006ec8 <_dtoa_r+0x4c8>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1d3      	bne.n	8006d56 <_dtoa_r+0x356>
 8006dae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8094 	beq.w	8006ee2 <_dtoa_r+0x4e2>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4b73      	ldr	r3, [pc, #460]	@ (8006f90 <_dtoa_r+0x590>)
 8006dc2:	f7f9 feaf 	bl	8000b24 <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f000 808b 	beq.w	8006ee2 <_dtoa_r+0x4e2>
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8087 	beq.w	8006ee2 <_dtoa_r+0x4e2>
 8006dd4:	f1bb 0f00 	cmp.w	fp, #0
 8006dd8:	dd34      	ble.n	8006e44 <_dtoa_r+0x444>
 8006dda:	4620      	mov	r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4629      	mov	r1, r5
 8006de0:	4b6c      	ldr	r3, [pc, #432]	@ (8006f94 <_dtoa_r+0x594>)
 8006de2:	f7f9 fc2d 	bl	8000640 <__aeabi_dmul>
 8006de6:	465c      	mov	r4, fp
 8006de8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006dec:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006df0:	3601      	adds	r6, #1
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7f9 fbba 	bl	800056c <__aeabi_i2d>
 8006df8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dfc:	f7f9 fc20 	bl	8000640 <__aeabi_dmul>
 8006e00:	2200      	movs	r2, #0
 8006e02:	4b65      	ldr	r3, [pc, #404]	@ (8006f98 <_dtoa_r+0x598>)
 8006e04:	f7f9 fa66 	bl	80002d4 <__adddf3>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	d16a      	bne.n	8006ee8 <_dtoa_r+0x4e8>
 8006e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e16:	2200      	movs	r2, #0
 8006e18:	4b60      	ldr	r3, [pc, #384]	@ (8006f9c <_dtoa_r+0x59c>)
 8006e1a:	f7f9 fa59 	bl	80002d0 <__aeabi_dsub>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e26:	462a      	mov	r2, r5
 8006e28:	4633      	mov	r3, r6
 8006e2a:	f7f9 fe99 	bl	8000b60 <__aeabi_dcmpgt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f040 8298 	bne.w	8007364 <_dtoa_r+0x964>
 8006e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e3e:	f7f9 fe71 	bl	8000b24 <__aeabi_dcmplt>
 8006e42:	bb38      	cbnz	r0, 8006e94 <_dtoa_r+0x494>
 8006e44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f2c0 8157 	blt.w	8007102 <_dtoa_r+0x702>
 8006e54:	2f0e      	cmp	r7, #14
 8006e56:	f300 8154 	bgt.w	8007102 <_dtoa_r+0x702>
 8006e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f88 <_dtoa_r+0x588>)
 8006e5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f280 80e5 	bge.w	800703a <_dtoa_r+0x63a>
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f300 80e1 	bgt.w	800703a <_dtoa_r+0x63a>
 8006e78:	d10c      	bne.n	8006e94 <_dtoa_r+0x494>
 8006e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b46      	ldr	r3, [pc, #280]	@ (8006f9c <_dtoa_r+0x59c>)
 8006e82:	f7f9 fbdd 	bl	8000640 <__aeabi_dmul>
 8006e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e8a:	f7f9 fe5f 	bl	8000b4c <__aeabi_dcmpge>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f000 8266 	beq.w	8007360 <_dtoa_r+0x960>
 8006e94:	2400      	movs	r4, #0
 8006e96:	4625      	mov	r5, r4
 8006e98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e9a:	4656      	mov	r6, sl
 8006e9c:	ea6f 0803 	mvn.w	r8, r3
 8006ea0:	2700      	movs	r7, #0
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4648      	mov	r0, r9
 8006ea6:	f000 fcbd 	bl	8007824 <_Bfree>
 8006eaa:	2d00      	cmp	r5, #0
 8006eac:	f000 80bd 	beq.w	800702a <_dtoa_r+0x62a>
 8006eb0:	b12f      	cbz	r7, 8006ebe <_dtoa_r+0x4be>
 8006eb2:	42af      	cmp	r7, r5
 8006eb4:	d003      	beq.n	8006ebe <_dtoa_r+0x4be>
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	4648      	mov	r0, r9
 8006eba:	f000 fcb3 	bl	8007824 <_Bfree>
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4648      	mov	r0, r9
 8006ec2:	f000 fcaf 	bl	8007824 <_Bfree>
 8006ec6:	e0b0      	b.n	800702a <_dtoa_r+0x62a>
 8006ec8:	07e2      	lsls	r2, r4, #31
 8006eca:	d505      	bpl.n	8006ed8 <_dtoa_r+0x4d8>
 8006ecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ed0:	f7f9 fbb6 	bl	8000640 <__aeabi_dmul>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	1064      	asrs	r4, r4, #1
 8006eda:	3508      	adds	r5, #8
 8006edc:	e762      	b.n	8006da4 <_dtoa_r+0x3a4>
 8006ede:	2602      	movs	r6, #2
 8006ee0:	e765      	b.n	8006dae <_dtoa_r+0x3ae>
 8006ee2:	46b8      	mov	r8, r7
 8006ee4:	9c08      	ldr	r4, [sp, #32]
 8006ee6:	e784      	b.n	8006df2 <_dtoa_r+0x3f2>
 8006ee8:	4b27      	ldr	r3, [pc, #156]	@ (8006f88 <_dtoa_r+0x588>)
 8006eea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ef4:	4454      	add	r4, sl
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	d054      	beq.n	8006fa4 <_dtoa_r+0x5a4>
 8006efa:	2000      	movs	r0, #0
 8006efc:	4928      	ldr	r1, [pc, #160]	@ (8006fa0 <_dtoa_r+0x5a0>)
 8006efe:	f7f9 fcc9 	bl	8000894 <__aeabi_ddiv>
 8006f02:	4633      	mov	r3, r6
 8006f04:	462a      	mov	r2, r5
 8006f06:	f7f9 f9e3 	bl	80002d0 <__aeabi_dsub>
 8006f0a:	4656      	mov	r6, sl
 8006f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f14:	f7f9 fe44 	bl	8000ba0 <__aeabi_d2iz>
 8006f18:	4605      	mov	r5, r0
 8006f1a:	f7f9 fb27 	bl	800056c <__aeabi_i2d>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f26:	f7f9 f9d3 	bl	80002d0 <__aeabi_dsub>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	3530      	adds	r5, #48	@ 0x30
 8006f30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f38:	f806 5b01 	strb.w	r5, [r6], #1
 8006f3c:	f7f9 fdf2 	bl	8000b24 <__aeabi_dcmplt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d172      	bne.n	800702a <_dtoa_r+0x62a>
 8006f44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f48:	2000      	movs	r0, #0
 8006f4a:	4911      	ldr	r1, [pc, #68]	@ (8006f90 <_dtoa_r+0x590>)
 8006f4c:	f7f9 f9c0 	bl	80002d0 <__aeabi_dsub>
 8006f50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f54:	f7f9 fde6 	bl	8000b24 <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f040 80b4 	bne.w	80070c6 <_dtoa_r+0x6c6>
 8006f5e:	42a6      	cmp	r6, r4
 8006f60:	f43f af70 	beq.w	8006e44 <_dtoa_r+0x444>
 8006f64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <_dtoa_r+0x594>)
 8006f6c:	f7f9 fb68 	bl	8000640 <__aeabi_dmul>
 8006f70:	2200      	movs	r2, #0
 8006f72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7a:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <_dtoa_r+0x594>)
 8006f7c:	f7f9 fb60 	bl	8000640 <__aeabi_dmul>
 8006f80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f84:	e7c4      	b.n	8006f10 <_dtoa_r+0x510>
 8006f86:	bf00      	nop
 8006f88:	0800af78 	.word	0x0800af78
 8006f8c:	0800af50 	.word	0x0800af50
 8006f90:	3ff00000 	.word	0x3ff00000
 8006f94:	40240000 	.word	0x40240000
 8006f98:	401c0000 	.word	0x401c0000
 8006f9c:	40140000 	.word	0x40140000
 8006fa0:	3fe00000 	.word	0x3fe00000
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7f9 fb4a 	bl	8000640 <__aeabi_dmul>
 8006fac:	4656      	mov	r6, sl
 8006fae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb8:	f7f9 fdf2 	bl	8000ba0 <__aeabi_d2iz>
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	f7f9 fad5 	bl	800056c <__aeabi_i2d>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fca:	f7f9 f981 	bl	80002d0 <__aeabi_dsub>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	3530      	adds	r5, #48	@ 0x30
 8006fd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006fd8:	42a6      	cmp	r6, r4
 8006fda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	d124      	bne.n	800702e <_dtoa_r+0x62e>
 8006fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fe8:	4bae      	ldr	r3, [pc, #696]	@ (80072a4 <_dtoa_r+0x8a4>)
 8006fea:	f7f9 f973 	bl	80002d4 <__adddf3>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ff6:	f7f9 fdb3 	bl	8000b60 <__aeabi_dcmpgt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d163      	bne.n	80070c6 <_dtoa_r+0x6c6>
 8006ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007002:	2000      	movs	r0, #0
 8007004:	49a7      	ldr	r1, [pc, #668]	@ (80072a4 <_dtoa_r+0x8a4>)
 8007006:	f7f9 f963 	bl	80002d0 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007012:	f7f9 fd87 	bl	8000b24 <__aeabi_dcmplt>
 8007016:	2800      	cmp	r0, #0
 8007018:	f43f af14 	beq.w	8006e44 <_dtoa_r+0x444>
 800701c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800701e:	1e73      	subs	r3, r6, #1
 8007020:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007026:	2b30      	cmp	r3, #48	@ 0x30
 8007028:	d0f8      	beq.n	800701c <_dtoa_r+0x61c>
 800702a:	4647      	mov	r7, r8
 800702c:	e03b      	b.n	80070a6 <_dtoa_r+0x6a6>
 800702e:	4b9e      	ldr	r3, [pc, #632]	@ (80072a8 <_dtoa_r+0x8a8>)
 8007030:	f7f9 fb06 	bl	8000640 <__aeabi_dmul>
 8007034:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007038:	e7bc      	b.n	8006fb4 <_dtoa_r+0x5b4>
 800703a:	4656      	mov	r6, sl
 800703c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fc24 	bl	8000894 <__aeabi_ddiv>
 800704c:	f7f9 fda8 	bl	8000ba0 <__aeabi_d2iz>
 8007050:	4680      	mov	r8, r0
 8007052:	f7f9 fa8b 	bl	800056c <__aeabi_i2d>
 8007056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800705a:	f7f9 faf1 	bl	8000640 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 f933 	bl	80002d0 <__aeabi_dsub>
 800706a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800706e:	9d08      	ldr	r5, [sp, #32]
 8007070:	f806 4b01 	strb.w	r4, [r6], #1
 8007074:	eba6 040a 	sub.w	r4, r6, sl
 8007078:	42a5      	cmp	r5, r4
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	d133      	bne.n	80070e8 <_dtoa_r+0x6e8>
 8007080:	f7f9 f928 	bl	80002d4 <__adddf3>
 8007084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	f7f9 fd68 	bl	8000b60 <__aeabi_dcmpgt>
 8007090:	b9c0      	cbnz	r0, 80070c4 <_dtoa_r+0x6c4>
 8007092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fd39 	bl	8000b10 <__aeabi_dcmpeq>
 800709e:	b110      	cbz	r0, 80070a6 <_dtoa_r+0x6a6>
 80070a0:	f018 0f01 	tst.w	r8, #1
 80070a4:	d10e      	bne.n	80070c4 <_dtoa_r+0x6c4>
 80070a6:	4648      	mov	r0, r9
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	f000 fbbb 	bl	8007824 <_Bfree>
 80070ae:	2300      	movs	r3, #0
 80070b0:	7033      	strb	r3, [r6, #0]
 80070b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80070b4:	3701      	adds	r7, #1
 80070b6:	601f      	str	r7, [r3, #0]
 80070b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 824b 	beq.w	8007556 <_dtoa_r+0xb56>
 80070c0:	601e      	str	r6, [r3, #0]
 80070c2:	e248      	b.n	8007556 <_dtoa_r+0xb56>
 80070c4:	46b8      	mov	r8, r7
 80070c6:	4633      	mov	r3, r6
 80070c8:	461e      	mov	r6, r3
 80070ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ce:	2a39      	cmp	r2, #57	@ 0x39
 80070d0:	d106      	bne.n	80070e0 <_dtoa_r+0x6e0>
 80070d2:	459a      	cmp	sl, r3
 80070d4:	d1f8      	bne.n	80070c8 <_dtoa_r+0x6c8>
 80070d6:	2230      	movs	r2, #48	@ 0x30
 80070d8:	f108 0801 	add.w	r8, r8, #1
 80070dc:	f88a 2000 	strb.w	r2, [sl]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	3201      	adds	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e7a0      	b.n	800702a <_dtoa_r+0x62a>
 80070e8:	2200      	movs	r2, #0
 80070ea:	4b6f      	ldr	r3, [pc, #444]	@ (80072a8 <_dtoa_r+0x8a8>)
 80070ec:	f7f9 faa8 	bl	8000640 <__aeabi_dmul>
 80070f0:	2200      	movs	r2, #0
 80070f2:	2300      	movs	r3, #0
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	f7f9 fd0a 	bl	8000b10 <__aeabi_dcmpeq>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d09f      	beq.n	8007040 <_dtoa_r+0x640>
 8007100:	e7d1      	b.n	80070a6 <_dtoa_r+0x6a6>
 8007102:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007104:	2a00      	cmp	r2, #0
 8007106:	f000 80ea 	beq.w	80072de <_dtoa_r+0x8de>
 800710a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800710c:	2a01      	cmp	r2, #1
 800710e:	f300 80cd 	bgt.w	80072ac <_dtoa_r+0x8ac>
 8007112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007114:	2a00      	cmp	r2, #0
 8007116:	f000 80c1 	beq.w	800729c <_dtoa_r+0x89c>
 800711a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800711e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007120:	9e04      	ldr	r6, [sp, #16]
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	2101      	movs	r1, #1
 8007126:	441a      	add	r2, r3
 8007128:	9204      	str	r2, [sp, #16]
 800712a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800712c:	4648      	mov	r0, r9
 800712e:	441a      	add	r2, r3
 8007130:	9209      	str	r2, [sp, #36]	@ 0x24
 8007132:	f000 fc2b 	bl	800798c <__i2b>
 8007136:	4605      	mov	r5, r0
 8007138:	b166      	cbz	r6, 8007154 <_dtoa_r+0x754>
 800713a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	dd09      	ble.n	8007154 <_dtoa_r+0x754>
 8007140:	42b3      	cmp	r3, r6
 8007142:	bfa8      	it	ge
 8007144:	4633      	movge	r3, r6
 8007146:	9a04      	ldr	r2, [sp, #16]
 8007148:	1af6      	subs	r6, r6, r3
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	9204      	str	r2, [sp, #16]
 800714e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	9309      	str	r3, [sp, #36]	@ 0x24
 8007154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007156:	b30b      	cbz	r3, 800719c <_dtoa_r+0x79c>
 8007158:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80c6 	beq.w	80072ec <_dtoa_r+0x8ec>
 8007160:	2c00      	cmp	r4, #0
 8007162:	f000 80c0 	beq.w	80072e6 <_dtoa_r+0x8e6>
 8007166:	4629      	mov	r1, r5
 8007168:	4622      	mov	r2, r4
 800716a:	4648      	mov	r0, r9
 800716c:	f000 fcc6 	bl	8007afc <__pow5mult>
 8007170:	9a03      	ldr	r2, [sp, #12]
 8007172:	4601      	mov	r1, r0
 8007174:	4605      	mov	r5, r0
 8007176:	4648      	mov	r0, r9
 8007178:	f000 fc1e 	bl	80079b8 <__multiply>
 800717c:	9903      	ldr	r1, [sp, #12]
 800717e:	4680      	mov	r8, r0
 8007180:	4648      	mov	r0, r9
 8007182:	f000 fb4f 	bl	8007824 <_Bfree>
 8007186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007188:	1b1b      	subs	r3, r3, r4
 800718a:	930a      	str	r3, [sp, #40]	@ 0x28
 800718c:	f000 80b1 	beq.w	80072f2 <_dtoa_r+0x8f2>
 8007190:	4641      	mov	r1, r8
 8007192:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007194:	4648      	mov	r0, r9
 8007196:	f000 fcb1 	bl	8007afc <__pow5mult>
 800719a:	9003      	str	r0, [sp, #12]
 800719c:	2101      	movs	r1, #1
 800719e:	4648      	mov	r0, r9
 80071a0:	f000 fbf4 	bl	800798c <__i2b>
 80071a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071a6:	4604      	mov	r4, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 81d8 	beq.w	800755e <_dtoa_r+0xb5e>
 80071ae:	461a      	mov	r2, r3
 80071b0:	4601      	mov	r1, r0
 80071b2:	4648      	mov	r0, r9
 80071b4:	f000 fca2 	bl	8007afc <__pow5mult>
 80071b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071ba:	4604      	mov	r4, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f300 809f 	bgt.w	8007300 <_dtoa_r+0x900>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 8097 	bne.w	80072f8 <_dtoa_r+0x8f8>
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8093 	bne.w	80072fc <_dtoa_r+0x8fc>
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071dc:	0d1b      	lsrs	r3, r3, #20
 80071de:	051b      	lsls	r3, r3, #20
 80071e0:	b133      	cbz	r3, 80071f0 <_dtoa_r+0x7f0>
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	3301      	adds	r3, #1
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ea:	3301      	adds	r3, #1
 80071ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ee:	2301      	movs	r3, #1
 80071f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 81b8 	beq.w	800756a <_dtoa_r+0xb6a>
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007200:	6918      	ldr	r0, [r3, #16]
 8007202:	f000 fb77 	bl	80078f4 <__hi0bits>
 8007206:	f1c0 0020 	rsb	r0, r0, #32
 800720a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720c:	4418      	add	r0, r3
 800720e:	f010 001f 	ands.w	r0, r0, #31
 8007212:	f000 8082 	beq.w	800731a <_dtoa_r+0x91a>
 8007216:	f1c0 0320 	rsb	r3, r0, #32
 800721a:	2b04      	cmp	r3, #4
 800721c:	dd73      	ble.n	8007306 <_dtoa_r+0x906>
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	f1c0 001c 	rsb	r0, r0, #28
 8007224:	4403      	add	r3, r0
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722a:	4406      	add	r6, r0
 800722c:	4403      	add	r3, r0
 800722e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd05      	ble.n	8007242 <_dtoa_r+0x842>
 8007236:	461a      	mov	r2, r3
 8007238:	4648      	mov	r0, r9
 800723a:	9903      	ldr	r1, [sp, #12]
 800723c:	f000 fcb8 	bl	8007bb0 <__lshift>
 8007240:	9003      	str	r0, [sp, #12]
 8007242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd05      	ble.n	8007254 <_dtoa_r+0x854>
 8007248:	4621      	mov	r1, r4
 800724a:	461a      	mov	r2, r3
 800724c:	4648      	mov	r0, r9
 800724e:	f000 fcaf 	bl	8007bb0 <__lshift>
 8007252:	4604      	mov	r4, r0
 8007254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d061      	beq.n	800731e <_dtoa_r+0x91e>
 800725a:	4621      	mov	r1, r4
 800725c:	9803      	ldr	r0, [sp, #12]
 800725e:	f000 fd13 	bl	8007c88 <__mcmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	da5b      	bge.n	800731e <_dtoa_r+0x91e>
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4648      	mov	r0, r9
 800726c:	9903      	ldr	r1, [sp, #12]
 800726e:	f000 fafb 	bl	8007868 <__multadd>
 8007272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007274:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007278:	9003      	str	r0, [sp, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8177 	beq.w	800756e <_dtoa_r+0xb6e>
 8007280:	4629      	mov	r1, r5
 8007282:	2300      	movs	r3, #0
 8007284:	220a      	movs	r2, #10
 8007286:	4648      	mov	r0, r9
 8007288:	f000 faee 	bl	8007868 <__multadd>
 800728c:	f1bb 0f00 	cmp.w	fp, #0
 8007290:	4605      	mov	r5, r0
 8007292:	dc6f      	bgt.n	8007374 <_dtoa_r+0x974>
 8007294:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007296:	2b02      	cmp	r3, #2
 8007298:	dc49      	bgt.n	800732e <_dtoa_r+0x92e>
 800729a:	e06b      	b.n	8007374 <_dtoa_r+0x974>
 800729c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800729e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072a2:	e73c      	b.n	800711e <_dtoa_r+0x71e>
 80072a4:	3fe00000 	.word	0x3fe00000
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	1e5c      	subs	r4, r3, #1
 80072b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	db09      	blt.n	80072ca <_dtoa_r+0x8ca>
 80072b6:	1b1c      	subs	r4, r3, r4
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f6bf af30 	bge.w	8007120 <_dtoa_r+0x720>
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	9a08      	ldr	r2, [sp, #32]
 80072c4:	1a9e      	subs	r6, r3, r2
 80072c6:	2300      	movs	r3, #0
 80072c8:	e72b      	b.n	8007122 <_dtoa_r+0x722>
 80072ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072ce:	1ae3      	subs	r3, r4, r3
 80072d0:	441a      	add	r2, r3
 80072d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80072d4:	9e04      	ldr	r6, [sp, #16]
 80072d6:	2400      	movs	r4, #0
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	920e      	str	r2, [sp, #56]	@ 0x38
 80072dc:	e721      	b.n	8007122 <_dtoa_r+0x722>
 80072de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072e0:	9e04      	ldr	r6, [sp, #16]
 80072e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072e4:	e728      	b.n	8007138 <_dtoa_r+0x738>
 80072e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072ea:	e751      	b.n	8007190 <_dtoa_r+0x790>
 80072ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072ee:	9903      	ldr	r1, [sp, #12]
 80072f0:	e750      	b.n	8007194 <_dtoa_r+0x794>
 80072f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f6:	e751      	b.n	800719c <_dtoa_r+0x79c>
 80072f8:	2300      	movs	r3, #0
 80072fa:	e779      	b.n	80071f0 <_dtoa_r+0x7f0>
 80072fc:	9b06      	ldr	r3, [sp, #24]
 80072fe:	e777      	b.n	80071f0 <_dtoa_r+0x7f0>
 8007300:	2300      	movs	r3, #0
 8007302:	930a      	str	r3, [sp, #40]	@ 0x28
 8007304:	e779      	b.n	80071fa <_dtoa_r+0x7fa>
 8007306:	d093      	beq.n	8007230 <_dtoa_r+0x830>
 8007308:	9a04      	ldr	r2, [sp, #16]
 800730a:	331c      	adds	r3, #28
 800730c:	441a      	add	r2, r3
 800730e:	9204      	str	r2, [sp, #16]
 8007310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007312:	441e      	add	r6, r3
 8007314:	441a      	add	r2, r3
 8007316:	9209      	str	r2, [sp, #36]	@ 0x24
 8007318:	e78a      	b.n	8007230 <_dtoa_r+0x830>
 800731a:	4603      	mov	r3, r0
 800731c:	e7f4      	b.n	8007308 <_dtoa_r+0x908>
 800731e:	9b08      	ldr	r3, [sp, #32]
 8007320:	46b8      	mov	r8, r7
 8007322:	2b00      	cmp	r3, #0
 8007324:	dc20      	bgt.n	8007368 <_dtoa_r+0x968>
 8007326:	469b      	mov	fp, r3
 8007328:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800732a:	2b02      	cmp	r3, #2
 800732c:	dd1e      	ble.n	800736c <_dtoa_r+0x96c>
 800732e:	f1bb 0f00 	cmp.w	fp, #0
 8007332:	f47f adb1 	bne.w	8006e98 <_dtoa_r+0x498>
 8007336:	4621      	mov	r1, r4
 8007338:	465b      	mov	r3, fp
 800733a:	2205      	movs	r2, #5
 800733c:	4648      	mov	r0, r9
 800733e:	f000 fa93 	bl	8007868 <__multadd>
 8007342:	4601      	mov	r1, r0
 8007344:	4604      	mov	r4, r0
 8007346:	9803      	ldr	r0, [sp, #12]
 8007348:	f000 fc9e 	bl	8007c88 <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	f77f ada3 	ble.w	8006e98 <_dtoa_r+0x498>
 8007352:	4656      	mov	r6, sl
 8007354:	2331      	movs	r3, #49	@ 0x31
 8007356:	f108 0801 	add.w	r8, r8, #1
 800735a:	f806 3b01 	strb.w	r3, [r6], #1
 800735e:	e59f      	b.n	8006ea0 <_dtoa_r+0x4a0>
 8007360:	46b8      	mov	r8, r7
 8007362:	9c08      	ldr	r4, [sp, #32]
 8007364:	4625      	mov	r5, r4
 8007366:	e7f4      	b.n	8007352 <_dtoa_r+0x952>
 8007368:	f8dd b020 	ldr.w	fp, [sp, #32]
 800736c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8101 	beq.w	8007576 <_dtoa_r+0xb76>
 8007374:	2e00      	cmp	r6, #0
 8007376:	dd05      	ble.n	8007384 <_dtoa_r+0x984>
 8007378:	4629      	mov	r1, r5
 800737a:	4632      	mov	r2, r6
 800737c:	4648      	mov	r0, r9
 800737e:	f000 fc17 	bl	8007bb0 <__lshift>
 8007382:	4605      	mov	r5, r0
 8007384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d05c      	beq.n	8007444 <_dtoa_r+0xa44>
 800738a:	4648      	mov	r0, r9
 800738c:	6869      	ldr	r1, [r5, #4]
 800738e:	f000 fa09 	bl	80077a4 <_Balloc>
 8007392:	4606      	mov	r6, r0
 8007394:	b928      	cbnz	r0, 80073a2 <_dtoa_r+0x9a2>
 8007396:	4602      	mov	r2, r0
 8007398:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800739c:	4b80      	ldr	r3, [pc, #512]	@ (80075a0 <_dtoa_r+0xba0>)
 800739e:	f7ff bb43 	b.w	8006a28 <_dtoa_r+0x28>
 80073a2:	692a      	ldr	r2, [r5, #16]
 80073a4:	f105 010c 	add.w	r1, r5, #12
 80073a8:	3202      	adds	r2, #2
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	300c      	adds	r0, #12
 80073ae:	f000 ff9d 	bl	80082ec <memcpy>
 80073b2:	2201      	movs	r2, #1
 80073b4:	4631      	mov	r1, r6
 80073b6:	4648      	mov	r0, r9
 80073b8:	f000 fbfa 	bl	8007bb0 <__lshift>
 80073bc:	462f      	mov	r7, r5
 80073be:	4605      	mov	r5, r0
 80073c0:	f10a 0301 	add.w	r3, sl, #1
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	eb0a 030b 	add.w	r3, sl, fp
 80073ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	4621      	mov	r1, r4
 80073d8:	9803      	ldr	r0, [sp, #12]
 80073da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80073de:	f7ff fa84 	bl	80068ea <quorem>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4639      	mov	r1, r7
 80073e6:	3330      	adds	r3, #48	@ 0x30
 80073e8:	9006      	str	r0, [sp, #24]
 80073ea:	9803      	ldr	r0, [sp, #12]
 80073ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ee:	f000 fc4b 	bl	8007c88 <__mcmp>
 80073f2:	462a      	mov	r2, r5
 80073f4:	9008      	str	r0, [sp, #32]
 80073f6:	4621      	mov	r1, r4
 80073f8:	4648      	mov	r0, r9
 80073fa:	f000 fc61 	bl	8007cc0 <__mdiff>
 80073fe:	68c2      	ldr	r2, [r0, #12]
 8007400:	4606      	mov	r6, r0
 8007402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007404:	bb02      	cbnz	r2, 8007448 <_dtoa_r+0xa48>
 8007406:	4601      	mov	r1, r0
 8007408:	9803      	ldr	r0, [sp, #12]
 800740a:	f000 fc3d 	bl	8007c88 <__mcmp>
 800740e:	4602      	mov	r2, r0
 8007410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007412:	4631      	mov	r1, r6
 8007414:	4648      	mov	r0, r9
 8007416:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800741a:	f000 fa03 	bl	8007824 <_Bfree>
 800741e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007422:	9e04      	ldr	r6, [sp, #16]
 8007424:	ea42 0103 	orr.w	r1, r2, r3
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	4319      	orrs	r1, r3
 800742c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800742e:	d10d      	bne.n	800744c <_dtoa_r+0xa4c>
 8007430:	2b39      	cmp	r3, #57	@ 0x39
 8007432:	d027      	beq.n	8007484 <_dtoa_r+0xa84>
 8007434:	9a08      	ldr	r2, [sp, #32]
 8007436:	2a00      	cmp	r2, #0
 8007438:	dd01      	ble.n	800743e <_dtoa_r+0xa3e>
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	3331      	adds	r3, #49	@ 0x31
 800743e:	f88b 3000 	strb.w	r3, [fp]
 8007442:	e52e      	b.n	8006ea2 <_dtoa_r+0x4a2>
 8007444:	4628      	mov	r0, r5
 8007446:	e7b9      	b.n	80073bc <_dtoa_r+0x9bc>
 8007448:	2201      	movs	r2, #1
 800744a:	e7e2      	b.n	8007412 <_dtoa_r+0xa12>
 800744c:	9908      	ldr	r1, [sp, #32]
 800744e:	2900      	cmp	r1, #0
 8007450:	db04      	blt.n	800745c <_dtoa_r+0xa5c>
 8007452:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007454:	4301      	orrs	r1, r0
 8007456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007458:	4301      	orrs	r1, r0
 800745a:	d120      	bne.n	800749e <_dtoa_r+0xa9e>
 800745c:	2a00      	cmp	r2, #0
 800745e:	ddee      	ble.n	800743e <_dtoa_r+0xa3e>
 8007460:	2201      	movs	r2, #1
 8007462:	9903      	ldr	r1, [sp, #12]
 8007464:	4648      	mov	r0, r9
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	f000 fba2 	bl	8007bb0 <__lshift>
 800746c:	4621      	mov	r1, r4
 800746e:	9003      	str	r0, [sp, #12]
 8007470:	f000 fc0a 	bl	8007c88 <__mcmp>
 8007474:	2800      	cmp	r0, #0
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	dc02      	bgt.n	8007480 <_dtoa_r+0xa80>
 800747a:	d1e0      	bne.n	800743e <_dtoa_r+0xa3e>
 800747c:	07da      	lsls	r2, r3, #31
 800747e:	d5de      	bpl.n	800743e <_dtoa_r+0xa3e>
 8007480:	2b39      	cmp	r3, #57	@ 0x39
 8007482:	d1da      	bne.n	800743a <_dtoa_r+0xa3a>
 8007484:	2339      	movs	r3, #57	@ 0x39
 8007486:	f88b 3000 	strb.w	r3, [fp]
 800748a:	4633      	mov	r3, r6
 800748c:	461e      	mov	r6, r3
 800748e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007492:	3b01      	subs	r3, #1
 8007494:	2a39      	cmp	r2, #57	@ 0x39
 8007496:	d04e      	beq.n	8007536 <_dtoa_r+0xb36>
 8007498:	3201      	adds	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	e501      	b.n	8006ea2 <_dtoa_r+0x4a2>
 800749e:	2a00      	cmp	r2, #0
 80074a0:	dd03      	ble.n	80074aa <_dtoa_r+0xaaa>
 80074a2:	2b39      	cmp	r3, #57	@ 0x39
 80074a4:	d0ee      	beq.n	8007484 <_dtoa_r+0xa84>
 80074a6:	3301      	adds	r3, #1
 80074a8:	e7c9      	b.n	800743e <_dtoa_r+0xa3e>
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074b2:	428a      	cmp	r2, r1
 80074b4:	d028      	beq.n	8007508 <_dtoa_r+0xb08>
 80074b6:	2300      	movs	r3, #0
 80074b8:	220a      	movs	r2, #10
 80074ba:	9903      	ldr	r1, [sp, #12]
 80074bc:	4648      	mov	r0, r9
 80074be:	f000 f9d3 	bl	8007868 <__multadd>
 80074c2:	42af      	cmp	r7, r5
 80074c4:	9003      	str	r0, [sp, #12]
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	f04f 020a 	mov.w	r2, #10
 80074ce:	4639      	mov	r1, r7
 80074d0:	4648      	mov	r0, r9
 80074d2:	d107      	bne.n	80074e4 <_dtoa_r+0xae4>
 80074d4:	f000 f9c8 	bl	8007868 <__multadd>
 80074d8:	4607      	mov	r7, r0
 80074da:	4605      	mov	r5, r0
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	3301      	adds	r3, #1
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	e777      	b.n	80073d4 <_dtoa_r+0x9d4>
 80074e4:	f000 f9c0 	bl	8007868 <__multadd>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4607      	mov	r7, r0
 80074ec:	2300      	movs	r3, #0
 80074ee:	220a      	movs	r2, #10
 80074f0:	4648      	mov	r0, r9
 80074f2:	f000 f9b9 	bl	8007868 <__multadd>
 80074f6:	4605      	mov	r5, r0
 80074f8:	e7f0      	b.n	80074dc <_dtoa_r+0xadc>
 80074fa:	f1bb 0f00 	cmp.w	fp, #0
 80074fe:	bfcc      	ite	gt
 8007500:	465e      	movgt	r6, fp
 8007502:	2601      	movle	r6, #1
 8007504:	2700      	movs	r7, #0
 8007506:	4456      	add	r6, sl
 8007508:	2201      	movs	r2, #1
 800750a:	9903      	ldr	r1, [sp, #12]
 800750c:	4648      	mov	r0, r9
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	f000 fb4e 	bl	8007bb0 <__lshift>
 8007514:	4621      	mov	r1, r4
 8007516:	9003      	str	r0, [sp, #12]
 8007518:	f000 fbb6 	bl	8007c88 <__mcmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	dcb4      	bgt.n	800748a <_dtoa_r+0xa8a>
 8007520:	d102      	bne.n	8007528 <_dtoa_r+0xb28>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	07db      	lsls	r3, r3, #31
 8007526:	d4b0      	bmi.n	800748a <_dtoa_r+0xa8a>
 8007528:	4633      	mov	r3, r6
 800752a:	461e      	mov	r6, r3
 800752c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007530:	2a30      	cmp	r2, #48	@ 0x30
 8007532:	d0fa      	beq.n	800752a <_dtoa_r+0xb2a>
 8007534:	e4b5      	b.n	8006ea2 <_dtoa_r+0x4a2>
 8007536:	459a      	cmp	sl, r3
 8007538:	d1a8      	bne.n	800748c <_dtoa_r+0xa8c>
 800753a:	2331      	movs	r3, #49	@ 0x31
 800753c:	f108 0801 	add.w	r8, r8, #1
 8007540:	f88a 3000 	strb.w	r3, [sl]
 8007544:	e4ad      	b.n	8006ea2 <_dtoa_r+0x4a2>
 8007546:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075a4 <_dtoa_r+0xba4>
 800754c:	b11b      	cbz	r3, 8007556 <_dtoa_r+0xb56>
 800754e:	f10a 0308 	add.w	r3, sl, #8
 8007552:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	4650      	mov	r0, sl
 8007558:	b017      	add	sp, #92	@ 0x5c
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007560:	2b01      	cmp	r3, #1
 8007562:	f77f ae2e 	ble.w	80071c2 <_dtoa_r+0x7c2>
 8007566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007568:	930a      	str	r3, [sp, #40]	@ 0x28
 800756a:	2001      	movs	r0, #1
 800756c:	e64d      	b.n	800720a <_dtoa_r+0x80a>
 800756e:	f1bb 0f00 	cmp.w	fp, #0
 8007572:	f77f aed9 	ble.w	8007328 <_dtoa_r+0x928>
 8007576:	4656      	mov	r6, sl
 8007578:	4621      	mov	r1, r4
 800757a:	9803      	ldr	r0, [sp, #12]
 800757c:	f7ff f9b5 	bl	80068ea <quorem>
 8007580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007584:	f806 3b01 	strb.w	r3, [r6], #1
 8007588:	eba6 020a 	sub.w	r2, r6, sl
 800758c:	4593      	cmp	fp, r2
 800758e:	ddb4      	ble.n	80074fa <_dtoa_r+0xafa>
 8007590:	2300      	movs	r3, #0
 8007592:	220a      	movs	r2, #10
 8007594:	4648      	mov	r0, r9
 8007596:	9903      	ldr	r1, [sp, #12]
 8007598:	f000 f966 	bl	8007868 <__multadd>
 800759c:	9003      	str	r0, [sp, #12]
 800759e:	e7eb      	b.n	8007578 <_dtoa_r+0xb78>
 80075a0:	0800ae82 	.word	0x0800ae82
 80075a4:	0800ae06 	.word	0x0800ae06

080075a8 <_free_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4605      	mov	r5, r0
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d040      	beq.n	8007632 <_free_r+0x8a>
 80075b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b4:	1f0c      	subs	r4, r1, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bfb8      	it	lt
 80075ba:	18e4      	addlt	r4, r4, r3
 80075bc:	f000 f8e6 	bl	800778c <__malloc_lock>
 80075c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007634 <_free_r+0x8c>)
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x2c>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	4628      	mov	r0, r5
 80075cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d0:	f000 b8e2 	b.w	8007798 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x42>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	1821      	adds	r1, r4, r0
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1809      	addeq	r1, r1, r0
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x1e>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x4c>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x42>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1850      	adds	r0, r2, r1
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x6c>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	4401      	add	r1, r0
 8007600:	1850      	adds	r0, r2, r1
 8007602:	4283      	cmp	r3, r0
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x22>
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4408      	add	r0, r1
 800760e:	6010      	str	r0, [r2, #0]
 8007610:	6053      	str	r3, [r2, #4]
 8007612:	e7da      	b.n	80075ca <_free_r+0x22>
 8007614:	d902      	bls.n	800761c <_free_r+0x74>
 8007616:	230c      	movs	r3, #12
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x22>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	1821      	adds	r1, r4, r0
 8007620:	428b      	cmp	r3, r1
 8007622:	bf01      	itttt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	1809      	addeq	r1, r1, r0
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	6063      	str	r3, [r4, #4]
 800762e:	6054      	str	r4, [r2, #4]
 8007630:	e7cb      	b.n	80075ca <_free_r+0x22>
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	200016c4 	.word	0x200016c4

08007638 <malloc>:
 8007638:	4b02      	ldr	r3, [pc, #8]	@ (8007644 <malloc+0xc>)
 800763a:	4601      	mov	r1, r0
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f000 b825 	b.w	800768c <_malloc_r>
 8007642:	bf00      	nop
 8007644:	2000002c 	.word	0x2000002c

08007648 <sbrk_aligned>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4e0f      	ldr	r6, [pc, #60]	@ (8007688 <sbrk_aligned+0x40>)
 800764c:	460c      	mov	r4, r1
 800764e:	6831      	ldr	r1, [r6, #0]
 8007650:	4605      	mov	r5, r0
 8007652:	b911      	cbnz	r1, 800765a <sbrk_aligned+0x12>
 8007654:	f000 fe3a 	bl	80082cc <_sbrk_r>
 8007658:	6030      	str	r0, [r6, #0]
 800765a:	4621      	mov	r1, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f000 fe35 	bl	80082cc <_sbrk_r>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d103      	bne.n	800766e <sbrk_aligned+0x26>
 8007666:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800766a:	4620      	mov	r0, r4
 800766c:	bd70      	pop	{r4, r5, r6, pc}
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d0f8      	beq.n	800766a <sbrk_aligned+0x22>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4628      	mov	r0, r5
 800767c:	f000 fe26 	bl	80082cc <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d1f2      	bne.n	800766a <sbrk_aligned+0x22>
 8007684:	e7ef      	b.n	8007666 <sbrk_aligned+0x1e>
 8007686:	bf00      	nop
 8007688:	200016c0 	.word	0x200016c0

0800768c <_malloc_r>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	1ccd      	adds	r5, r1, #3
 8007692:	f025 0503 	bic.w	r5, r5, #3
 8007696:	3508      	adds	r5, #8
 8007698:	2d0c      	cmp	r5, #12
 800769a:	bf38      	it	cc
 800769c:	250c      	movcc	r5, #12
 800769e:	2d00      	cmp	r5, #0
 80076a0:	4606      	mov	r6, r0
 80076a2:	db01      	blt.n	80076a8 <_malloc_r+0x1c>
 80076a4:	42a9      	cmp	r1, r5
 80076a6:	d904      	bls.n	80076b2 <_malloc_r+0x26>
 80076a8:	230c      	movs	r3, #12
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	2000      	movs	r0, #0
 80076ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007788 <_malloc_r+0xfc>
 80076b6:	f000 f869 	bl	800778c <__malloc_lock>
 80076ba:	f8d8 3000 	ldr.w	r3, [r8]
 80076be:	461c      	mov	r4, r3
 80076c0:	bb44      	cbnz	r4, 8007714 <_malloc_r+0x88>
 80076c2:	4629      	mov	r1, r5
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff ffbf 	bl	8007648 <sbrk_aligned>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	4604      	mov	r4, r0
 80076ce:	d158      	bne.n	8007782 <_malloc_r+0xf6>
 80076d0:	f8d8 4000 	ldr.w	r4, [r8]
 80076d4:	4627      	mov	r7, r4
 80076d6:	2f00      	cmp	r7, #0
 80076d8:	d143      	bne.n	8007762 <_malloc_r+0xd6>
 80076da:	2c00      	cmp	r4, #0
 80076dc:	d04b      	beq.n	8007776 <_malloc_r+0xea>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	4639      	mov	r1, r7
 80076e2:	4630      	mov	r0, r6
 80076e4:	eb04 0903 	add.w	r9, r4, r3
 80076e8:	f000 fdf0 	bl	80082cc <_sbrk_r>
 80076ec:	4581      	cmp	r9, r0
 80076ee:	d142      	bne.n	8007776 <_malloc_r+0xea>
 80076f0:	6821      	ldr	r1, [r4, #0]
 80076f2:	4630      	mov	r0, r6
 80076f4:	1a6d      	subs	r5, r5, r1
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7ff ffa6 	bl	8007648 <sbrk_aligned>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d03a      	beq.n	8007776 <_malloc_r+0xea>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	442b      	add	r3, r5
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	f8d8 3000 	ldr.w	r3, [r8]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	bb62      	cbnz	r2, 8007768 <_malloc_r+0xdc>
 800770e:	f8c8 7000 	str.w	r7, [r8]
 8007712:	e00f      	b.n	8007734 <_malloc_r+0xa8>
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	1b52      	subs	r2, r2, r5
 8007718:	d420      	bmi.n	800775c <_malloc_r+0xd0>
 800771a:	2a0b      	cmp	r2, #11
 800771c:	d917      	bls.n	800774e <_malloc_r+0xc2>
 800771e:	1961      	adds	r1, r4, r5
 8007720:	42a3      	cmp	r3, r4
 8007722:	6025      	str	r5, [r4, #0]
 8007724:	bf18      	it	ne
 8007726:	6059      	strne	r1, [r3, #4]
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	bf08      	it	eq
 800772c:	f8c8 1000 	streq.w	r1, [r8]
 8007730:	5162      	str	r2, [r4, r5]
 8007732:	604b      	str	r3, [r1, #4]
 8007734:	4630      	mov	r0, r6
 8007736:	f000 f82f 	bl	8007798 <__malloc_unlock>
 800773a:	f104 000b 	add.w	r0, r4, #11
 800773e:	1d23      	adds	r3, r4, #4
 8007740:	f020 0007 	bic.w	r0, r0, #7
 8007744:	1ac2      	subs	r2, r0, r3
 8007746:	bf1c      	itt	ne
 8007748:	1a1b      	subne	r3, r3, r0
 800774a:	50a3      	strne	r3, [r4, r2]
 800774c:	e7af      	b.n	80076ae <_malloc_r+0x22>
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	42a3      	cmp	r3, r4
 8007752:	bf0c      	ite	eq
 8007754:	f8c8 2000 	streq.w	r2, [r8]
 8007758:	605a      	strne	r2, [r3, #4]
 800775a:	e7eb      	b.n	8007734 <_malloc_r+0xa8>
 800775c:	4623      	mov	r3, r4
 800775e:	6864      	ldr	r4, [r4, #4]
 8007760:	e7ae      	b.n	80076c0 <_malloc_r+0x34>
 8007762:	463c      	mov	r4, r7
 8007764:	687f      	ldr	r7, [r7, #4]
 8007766:	e7b6      	b.n	80076d6 <_malloc_r+0x4a>
 8007768:	461a      	mov	r2, r3
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	42a3      	cmp	r3, r4
 800776e:	d1fb      	bne.n	8007768 <_malloc_r+0xdc>
 8007770:	2300      	movs	r3, #0
 8007772:	6053      	str	r3, [r2, #4]
 8007774:	e7de      	b.n	8007734 <_malloc_r+0xa8>
 8007776:	230c      	movs	r3, #12
 8007778:	4630      	mov	r0, r6
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	f000 f80c 	bl	8007798 <__malloc_unlock>
 8007780:	e794      	b.n	80076ac <_malloc_r+0x20>
 8007782:	6005      	str	r5, [r0, #0]
 8007784:	e7d6      	b.n	8007734 <_malloc_r+0xa8>
 8007786:	bf00      	nop
 8007788:	200016c4 	.word	0x200016c4

0800778c <__malloc_lock>:
 800778c:	4801      	ldr	r0, [pc, #4]	@ (8007794 <__malloc_lock+0x8>)
 800778e:	f7ff b89c 	b.w	80068ca <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	200016bc 	.word	0x200016bc

08007798 <__malloc_unlock>:
 8007798:	4801      	ldr	r0, [pc, #4]	@ (80077a0 <__malloc_unlock+0x8>)
 800779a:	f7ff b897 	b.w	80068cc <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	200016bc 	.word	0x200016bc

080077a4 <_Balloc>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	69c6      	ldr	r6, [r0, #28]
 80077a8:	4604      	mov	r4, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	b976      	cbnz	r6, 80077cc <_Balloc+0x28>
 80077ae:	2010      	movs	r0, #16
 80077b0:	f7ff ff42 	bl	8007638 <malloc>
 80077b4:	4602      	mov	r2, r0
 80077b6:	61e0      	str	r0, [r4, #28]
 80077b8:	b920      	cbnz	r0, 80077c4 <_Balloc+0x20>
 80077ba:	216b      	movs	r1, #107	@ 0x6b
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <_Balloc+0x78>)
 80077be:	4818      	ldr	r0, [pc, #96]	@ (8007820 <_Balloc+0x7c>)
 80077c0:	f000 fda2 	bl	8008308 <__assert_func>
 80077c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c8:	6006      	str	r6, [r0, #0]
 80077ca:	60c6      	str	r6, [r0, #12]
 80077cc:	69e6      	ldr	r6, [r4, #28]
 80077ce:	68f3      	ldr	r3, [r6, #12]
 80077d0:	b183      	cbz	r3, 80077f4 <_Balloc+0x50>
 80077d2:	69e3      	ldr	r3, [r4, #28]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077da:	b9b8      	cbnz	r0, 800780c <_Balloc+0x68>
 80077dc:	2101      	movs	r1, #1
 80077de:	fa01 f605 	lsl.w	r6, r1, r5
 80077e2:	1d72      	adds	r2, r6, #5
 80077e4:	4620      	mov	r0, r4
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	f000 fdac 	bl	8008344 <_calloc_r>
 80077ec:	b160      	cbz	r0, 8007808 <_Balloc+0x64>
 80077ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077f2:	e00e      	b.n	8007812 <_Balloc+0x6e>
 80077f4:	2221      	movs	r2, #33	@ 0x21
 80077f6:	2104      	movs	r1, #4
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fda3 	bl	8008344 <_calloc_r>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	60f0      	str	r0, [r6, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e4      	bne.n	80077d2 <_Balloc+0x2e>
 8007808:	2000      	movs	r0, #0
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	6802      	ldr	r2, [r0, #0]
 800780e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007812:	2300      	movs	r3, #0
 8007814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007818:	e7f7      	b.n	800780a <_Balloc+0x66>
 800781a:	bf00      	nop
 800781c:	0800ae13 	.word	0x0800ae13
 8007820:	0800ae93 	.word	0x0800ae93

08007824 <_Bfree>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	69c6      	ldr	r6, [r0, #28]
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b976      	cbnz	r6, 800784c <_Bfree+0x28>
 800782e:	2010      	movs	r0, #16
 8007830:	f7ff ff02 	bl	8007638 <malloc>
 8007834:	4602      	mov	r2, r0
 8007836:	61e8      	str	r0, [r5, #28]
 8007838:	b920      	cbnz	r0, 8007844 <_Bfree+0x20>
 800783a:	218f      	movs	r1, #143	@ 0x8f
 800783c:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <_Bfree+0x3c>)
 800783e:	4809      	ldr	r0, [pc, #36]	@ (8007864 <_Bfree+0x40>)
 8007840:	f000 fd62 	bl	8008308 <__assert_func>
 8007844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007848:	6006      	str	r6, [r0, #0]
 800784a:	60c6      	str	r6, [r0, #12]
 800784c:	b13c      	cbz	r4, 800785e <_Bfree+0x3a>
 800784e:	69eb      	ldr	r3, [r5, #28]
 8007850:	6862      	ldr	r2, [r4, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007858:	6021      	str	r1, [r4, #0]
 800785a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	0800ae13 	.word	0x0800ae13
 8007864:	0800ae93 	.word	0x0800ae93

08007868 <__multadd>:
 8007868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786c:	4607      	mov	r7, r0
 800786e:	460c      	mov	r4, r1
 8007870:	461e      	mov	r6, r3
 8007872:	2000      	movs	r0, #0
 8007874:	690d      	ldr	r5, [r1, #16]
 8007876:	f101 0c14 	add.w	ip, r1, #20
 800787a:	f8dc 3000 	ldr.w	r3, [ip]
 800787e:	3001      	adds	r0, #1
 8007880:	b299      	uxth	r1, r3
 8007882:	fb02 6101 	mla	r1, r2, r1, r6
 8007886:	0c1e      	lsrs	r6, r3, #16
 8007888:	0c0b      	lsrs	r3, r1, #16
 800788a:	fb02 3306 	mla	r3, r2, r6, r3
 800788e:	b289      	uxth	r1, r1
 8007890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007894:	4285      	cmp	r5, r0
 8007896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800789a:	f84c 1b04 	str.w	r1, [ip], #4
 800789e:	dcec      	bgt.n	800787a <__multadd+0x12>
 80078a0:	b30e      	cbz	r6, 80078e6 <__multadd+0x7e>
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc19      	bgt.n	80078dc <__multadd+0x74>
 80078a8:	6861      	ldr	r1, [r4, #4]
 80078aa:	4638      	mov	r0, r7
 80078ac:	3101      	adds	r1, #1
 80078ae:	f7ff ff79 	bl	80077a4 <_Balloc>
 80078b2:	4680      	mov	r8, r0
 80078b4:	b928      	cbnz	r0, 80078c2 <__multadd+0x5a>
 80078b6:	4602      	mov	r2, r0
 80078b8:	21ba      	movs	r1, #186	@ 0xba
 80078ba:	4b0c      	ldr	r3, [pc, #48]	@ (80078ec <__multadd+0x84>)
 80078bc:	480c      	ldr	r0, [pc, #48]	@ (80078f0 <__multadd+0x88>)
 80078be:	f000 fd23 	bl	8008308 <__assert_func>
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	f104 010c 	add.w	r1, r4, #12
 80078c8:	3202      	adds	r2, #2
 80078ca:	0092      	lsls	r2, r2, #2
 80078cc:	300c      	adds	r0, #12
 80078ce:	f000 fd0d 	bl	80082ec <memcpy>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ffa5 	bl	8007824 <_Bfree>
 80078da:	4644      	mov	r4, r8
 80078dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078e0:	3501      	adds	r5, #1
 80078e2:	615e      	str	r6, [r3, #20]
 80078e4:	6125      	str	r5, [r4, #16]
 80078e6:	4620      	mov	r0, r4
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	0800ae82 	.word	0x0800ae82
 80078f0:	0800ae93 	.word	0x0800ae93

080078f4 <__hi0bits>:
 80078f4:	4603      	mov	r3, r0
 80078f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078fa:	bf3a      	itte	cc
 80078fc:	0403      	lslcc	r3, r0, #16
 80078fe:	2010      	movcc	r0, #16
 8007900:	2000      	movcs	r0, #0
 8007902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007906:	bf3c      	itt	cc
 8007908:	021b      	lslcc	r3, r3, #8
 800790a:	3008      	addcc	r0, #8
 800790c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007910:	bf3c      	itt	cc
 8007912:	011b      	lslcc	r3, r3, #4
 8007914:	3004      	addcc	r0, #4
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791a:	bf3c      	itt	cc
 800791c:	009b      	lslcc	r3, r3, #2
 800791e:	3002      	addcc	r0, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	db05      	blt.n	8007930 <__hi0bits+0x3c>
 8007924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007928:	f100 0001 	add.w	r0, r0, #1
 800792c:	bf08      	it	eq
 800792e:	2020      	moveq	r0, #32
 8007930:	4770      	bx	lr

08007932 <__lo0bits>:
 8007932:	6803      	ldr	r3, [r0, #0]
 8007934:	4602      	mov	r2, r0
 8007936:	f013 0007 	ands.w	r0, r3, #7
 800793a:	d00b      	beq.n	8007954 <__lo0bits+0x22>
 800793c:	07d9      	lsls	r1, r3, #31
 800793e:	d421      	bmi.n	8007984 <__lo0bits+0x52>
 8007940:	0798      	lsls	r0, r3, #30
 8007942:	bf49      	itett	mi
 8007944:	085b      	lsrmi	r3, r3, #1
 8007946:	089b      	lsrpl	r3, r3, #2
 8007948:	2001      	movmi	r0, #1
 800794a:	6013      	strmi	r3, [r2, #0]
 800794c:	bf5c      	itt	pl
 800794e:	2002      	movpl	r0, #2
 8007950:	6013      	strpl	r3, [r2, #0]
 8007952:	4770      	bx	lr
 8007954:	b299      	uxth	r1, r3
 8007956:	b909      	cbnz	r1, 800795c <__lo0bits+0x2a>
 8007958:	2010      	movs	r0, #16
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	b2d9      	uxtb	r1, r3
 800795e:	b909      	cbnz	r1, 8007964 <__lo0bits+0x32>
 8007960:	3008      	adds	r0, #8
 8007962:	0a1b      	lsrs	r3, r3, #8
 8007964:	0719      	lsls	r1, r3, #28
 8007966:	bf04      	itt	eq
 8007968:	091b      	lsreq	r3, r3, #4
 800796a:	3004      	addeq	r0, #4
 800796c:	0799      	lsls	r1, r3, #30
 800796e:	bf04      	itt	eq
 8007970:	089b      	lsreq	r3, r3, #2
 8007972:	3002      	addeq	r0, #2
 8007974:	07d9      	lsls	r1, r3, #31
 8007976:	d403      	bmi.n	8007980 <__lo0bits+0x4e>
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	f100 0001 	add.w	r0, r0, #1
 800797e:	d003      	beq.n	8007988 <__lo0bits+0x56>
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	4770      	bx	lr
 8007984:	2000      	movs	r0, #0
 8007986:	4770      	bx	lr
 8007988:	2020      	movs	r0, #32
 800798a:	4770      	bx	lr

0800798c <__i2b>:
 800798c:	b510      	push	{r4, lr}
 800798e:	460c      	mov	r4, r1
 8007990:	2101      	movs	r1, #1
 8007992:	f7ff ff07 	bl	80077a4 <_Balloc>
 8007996:	4602      	mov	r2, r0
 8007998:	b928      	cbnz	r0, 80079a6 <__i2b+0x1a>
 800799a:	f240 1145 	movw	r1, #325	@ 0x145
 800799e:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <__i2b+0x24>)
 80079a0:	4804      	ldr	r0, [pc, #16]	@ (80079b4 <__i2b+0x28>)
 80079a2:	f000 fcb1 	bl	8008308 <__assert_func>
 80079a6:	2301      	movs	r3, #1
 80079a8:	6144      	str	r4, [r0, #20]
 80079aa:	6103      	str	r3, [r0, #16]
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	bf00      	nop
 80079b0:	0800ae82 	.word	0x0800ae82
 80079b4:	0800ae93 	.word	0x0800ae93

080079b8 <__multiply>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	4617      	mov	r7, r2
 80079be:	690a      	ldr	r2, [r1, #16]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4689      	mov	r9, r1
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bfa2      	ittt	ge
 80079c8:	463b      	movge	r3, r7
 80079ca:	460f      	movge	r7, r1
 80079cc:	4699      	movge	r9, r3
 80079ce:	693d      	ldr	r5, [r7, #16]
 80079d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	eb05 060a 	add.w	r6, r5, sl
 80079dc:	42b3      	cmp	r3, r6
 80079de:	b085      	sub	sp, #20
 80079e0:	bfb8      	it	lt
 80079e2:	3101      	addlt	r1, #1
 80079e4:	f7ff fede 	bl	80077a4 <_Balloc>
 80079e8:	b930      	cbnz	r0, 80079f8 <__multiply+0x40>
 80079ea:	4602      	mov	r2, r0
 80079ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079f0:	4b40      	ldr	r3, [pc, #256]	@ (8007af4 <__multiply+0x13c>)
 80079f2:	4841      	ldr	r0, [pc, #260]	@ (8007af8 <__multiply+0x140>)
 80079f4:	f000 fc88 	bl	8008308 <__assert_func>
 80079f8:	f100 0414 	add.w	r4, r0, #20
 80079fc:	4623      	mov	r3, r4
 80079fe:	2200      	movs	r2, #0
 8007a00:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a04:	4573      	cmp	r3, lr
 8007a06:	d320      	bcc.n	8007a4a <__multiply+0x92>
 8007a08:	f107 0814 	add.w	r8, r7, #20
 8007a0c:	f109 0114 	add.w	r1, r9, #20
 8007a10:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a14:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	1beb      	subs	r3, r5, r7
 8007a1c:	3b15      	subs	r3, #21
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	3304      	adds	r3, #4
 8007a24:	3715      	adds	r7, #21
 8007a26:	42bd      	cmp	r5, r7
 8007a28:	bf38      	it	cc
 8007a2a:	2304      	movcc	r3, #4
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	9b02      	ldr	r3, [sp, #8]
 8007a30:	9103      	str	r1, [sp, #12]
 8007a32:	428b      	cmp	r3, r1
 8007a34:	d80c      	bhi.n	8007a50 <__multiply+0x98>
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	dd03      	ble.n	8007a42 <__multiply+0x8a>
 8007a3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d055      	beq.n	8007aee <__multiply+0x136>
 8007a42:	6106      	str	r6, [r0, #16]
 8007a44:	b005      	add	sp, #20
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	f843 2b04 	str.w	r2, [r3], #4
 8007a4e:	e7d9      	b.n	8007a04 <__multiply+0x4c>
 8007a50:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a54:	f1ba 0f00 	cmp.w	sl, #0
 8007a58:	d01f      	beq.n	8007a9a <__multiply+0xe2>
 8007a5a:	46c4      	mov	ip, r8
 8007a5c:	46a1      	mov	r9, r4
 8007a5e:	2700      	movs	r7, #0
 8007a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a64:	f8d9 3000 	ldr.w	r3, [r9]
 8007a68:	fa1f fb82 	uxth.w	fp, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a72:	443b      	add	r3, r7
 8007a74:	f8d9 7000 	ldr.w	r7, [r9]
 8007a78:	0c12      	lsrs	r2, r2, #16
 8007a7a:	0c3f      	lsrs	r7, r7, #16
 8007a7c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007a80:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8a:	4565      	cmp	r5, ip
 8007a8c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007a90:	f849 3b04 	str.w	r3, [r9], #4
 8007a94:	d8e4      	bhi.n	8007a60 <__multiply+0xa8>
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	50e7      	str	r7, [r4, r3]
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	3104      	adds	r1, #4
 8007a9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	d020      	beq.n	8007aea <__multiply+0x132>
 8007aa8:	4647      	mov	r7, r8
 8007aaa:	46a4      	mov	ip, r4
 8007aac:	f04f 0a00 	mov.w	sl, #0
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ab6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	fb09 220b 	mla	r2, r9, fp, r2
 8007ac0:	4452      	add	r2, sl
 8007ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac6:	f84c 3b04 	str.w	r3, [ip], #4
 8007aca:	f857 3b04 	ldr.w	r3, [r7], #4
 8007ace:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ad2:	f8bc 3000 	ldrh.w	r3, [ip]
 8007ad6:	42bd      	cmp	r5, r7
 8007ad8:	fb09 330a 	mla	r3, r9, sl, r3
 8007adc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ae4:	d8e5      	bhi.n	8007ab2 <__multiply+0xfa>
 8007ae6:	9a01      	ldr	r2, [sp, #4]
 8007ae8:	50a3      	str	r3, [r4, r2]
 8007aea:	3404      	adds	r4, #4
 8007aec:	e79f      	b.n	8007a2e <__multiply+0x76>
 8007aee:	3e01      	subs	r6, #1
 8007af0:	e7a1      	b.n	8007a36 <__multiply+0x7e>
 8007af2:	bf00      	nop
 8007af4:	0800ae82 	.word	0x0800ae82
 8007af8:	0800ae93 	.word	0x0800ae93

08007afc <__pow5mult>:
 8007afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b00:	4615      	mov	r5, r2
 8007b02:	f012 0203 	ands.w	r2, r2, #3
 8007b06:	4607      	mov	r7, r0
 8007b08:	460e      	mov	r6, r1
 8007b0a:	d007      	beq.n	8007b1c <__pow5mult+0x20>
 8007b0c:	4c25      	ldr	r4, [pc, #148]	@ (8007ba4 <__pow5mult+0xa8>)
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	2300      	movs	r3, #0
 8007b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b16:	f7ff fea7 	bl	8007868 <__multadd>
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	10ad      	asrs	r5, r5, #2
 8007b1e:	d03d      	beq.n	8007b9c <__pow5mult+0xa0>
 8007b20:	69fc      	ldr	r4, [r7, #28]
 8007b22:	b97c      	cbnz	r4, 8007b44 <__pow5mult+0x48>
 8007b24:	2010      	movs	r0, #16
 8007b26:	f7ff fd87 	bl	8007638 <malloc>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	61f8      	str	r0, [r7, #28]
 8007b2e:	b928      	cbnz	r0, 8007b3c <__pow5mult+0x40>
 8007b30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b34:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba8 <__pow5mult+0xac>)
 8007b36:	481d      	ldr	r0, [pc, #116]	@ (8007bac <__pow5mult+0xb0>)
 8007b38:	f000 fbe6 	bl	8008308 <__assert_func>
 8007b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b40:	6004      	str	r4, [r0, #0]
 8007b42:	60c4      	str	r4, [r0, #12]
 8007b44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b4c:	b94c      	cbnz	r4, 8007b62 <__pow5mult+0x66>
 8007b4e:	f240 2171 	movw	r1, #625	@ 0x271
 8007b52:	4638      	mov	r0, r7
 8007b54:	f7ff ff1a 	bl	800798c <__i2b>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	f04f 0900 	mov.w	r9, #0
 8007b66:	07eb      	lsls	r3, r5, #31
 8007b68:	d50a      	bpl.n	8007b80 <__pow5mult+0x84>
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f7ff ff22 	bl	80079b8 <__multiply>
 8007b74:	4680      	mov	r8, r0
 8007b76:	4631      	mov	r1, r6
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff fe53 	bl	8007824 <_Bfree>
 8007b7e:	4646      	mov	r6, r8
 8007b80:	106d      	asrs	r5, r5, #1
 8007b82:	d00b      	beq.n	8007b9c <__pow5mult+0xa0>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	b938      	cbnz	r0, 8007b98 <__pow5mult+0x9c>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff ff13 	bl	80079b8 <__multiply>
 8007b92:	6020      	str	r0, [r4, #0]
 8007b94:	f8c0 9000 	str.w	r9, [r0]
 8007b98:	4604      	mov	r4, r0
 8007b9a:	e7e4      	b.n	8007b66 <__pow5mult+0x6a>
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800af44 	.word	0x0800af44
 8007ba8:	0800ae13 	.word	0x0800ae13
 8007bac:	0800ae93 	.word	0x0800ae93

08007bb0 <__lshift>:
 8007bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	4691      	mov	r9, r2
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	6849      	ldr	r1, [r1, #4]
 8007bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bc8:	f108 0601 	add.w	r6, r8, #1
 8007bcc:	42b3      	cmp	r3, r6
 8007bce:	db0b      	blt.n	8007be8 <__lshift+0x38>
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff fde7 	bl	80077a4 <_Balloc>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b948      	cbnz	r0, 8007bee <__lshift+0x3e>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007be0:	4b27      	ldr	r3, [pc, #156]	@ (8007c80 <__lshift+0xd0>)
 8007be2:	4828      	ldr	r0, [pc, #160]	@ (8007c84 <__lshift+0xd4>)
 8007be4:	f000 fb90 	bl	8008308 <__assert_func>
 8007be8:	3101      	adds	r1, #1
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	e7ee      	b.n	8007bcc <__lshift+0x1c>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f100 0114 	add.w	r1, r0, #20
 8007bf4:	f100 0210 	add.w	r2, r0, #16
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	4553      	cmp	r3, sl
 8007bfc:	db33      	blt.n	8007c66 <__lshift+0xb6>
 8007bfe:	6920      	ldr	r0, [r4, #16]
 8007c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c04:	f104 0314 	add.w	r3, r4, #20
 8007c08:	f019 091f 	ands.w	r9, r9, #31
 8007c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c14:	d02b      	beq.n	8007c6e <__lshift+0xbe>
 8007c16:	468a      	mov	sl, r1
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	fa00 f009 	lsl.w	r0, r0, r9
 8007c24:	4310      	orrs	r0, r2
 8007c26:	f84a 0b04 	str.w	r0, [sl], #4
 8007c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2e:	459c      	cmp	ip, r3
 8007c30:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c34:	d8f3      	bhi.n	8007c1e <__lshift+0x6e>
 8007c36:	ebac 0304 	sub.w	r3, ip, r4
 8007c3a:	3b15      	subs	r3, #21
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	3304      	adds	r3, #4
 8007c42:	f104 0015 	add.w	r0, r4, #21
 8007c46:	4560      	cmp	r0, ip
 8007c48:	bf88      	it	hi
 8007c4a:	2304      	movhi	r3, #4
 8007c4c:	50ca      	str	r2, [r1, r3]
 8007c4e:	b10a      	cbz	r2, 8007c54 <__lshift+0xa4>
 8007c50:	f108 0602 	add.w	r6, r8, #2
 8007c54:	3e01      	subs	r6, #1
 8007c56:	4638      	mov	r0, r7
 8007c58:	4621      	mov	r1, r4
 8007c5a:	612e      	str	r6, [r5, #16]
 8007c5c:	f7ff fde2 	bl	8007824 <_Bfree>
 8007c60:	4628      	mov	r0, r5
 8007c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c66:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	e7c5      	b.n	8007bfa <__lshift+0x4a>
 8007c6e:	3904      	subs	r1, #4
 8007c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c74:	459c      	cmp	ip, r3
 8007c76:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c7a:	d8f9      	bhi.n	8007c70 <__lshift+0xc0>
 8007c7c:	e7ea      	b.n	8007c54 <__lshift+0xa4>
 8007c7e:	bf00      	nop
 8007c80:	0800ae82 	.word	0x0800ae82
 8007c84:	0800ae93 	.word	0x0800ae93

08007c88 <__mcmp>:
 8007c88:	4603      	mov	r3, r0
 8007c8a:	690a      	ldr	r2, [r1, #16]
 8007c8c:	6900      	ldr	r0, [r0, #16]
 8007c8e:	b530      	push	{r4, r5, lr}
 8007c90:	1a80      	subs	r0, r0, r2
 8007c92:	d10e      	bne.n	8007cb2 <__mcmp+0x2a>
 8007c94:	3314      	adds	r3, #20
 8007c96:	3114      	adds	r1, #20
 8007c98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ca0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ca4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ca8:	4295      	cmp	r5, r2
 8007caa:	d003      	beq.n	8007cb4 <__mcmp+0x2c>
 8007cac:	d205      	bcs.n	8007cba <__mcmp+0x32>
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cb2:	bd30      	pop	{r4, r5, pc}
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	d3f3      	bcc.n	8007ca0 <__mcmp+0x18>
 8007cb8:	e7fb      	b.n	8007cb2 <__mcmp+0x2a>
 8007cba:	2001      	movs	r0, #1
 8007cbc:	e7f9      	b.n	8007cb2 <__mcmp+0x2a>
	...

08007cc0 <__mdiff>:
 8007cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	4689      	mov	r9, r1
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4648      	mov	r0, r9
 8007ccc:	4614      	mov	r4, r2
 8007cce:	f7ff ffdb 	bl	8007c88 <__mcmp>
 8007cd2:	1e05      	subs	r5, r0, #0
 8007cd4:	d112      	bne.n	8007cfc <__mdiff+0x3c>
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff fd63 	bl	80077a4 <_Balloc>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	b928      	cbnz	r0, 8007cee <__mdiff+0x2e>
 8007ce2:	f240 2137 	movw	r1, #567	@ 0x237
 8007ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8007de0 <__mdiff+0x120>)
 8007ce8:	483e      	ldr	r0, [pc, #248]	@ (8007de4 <__mdiff+0x124>)
 8007cea:	f000 fb0d 	bl	8008308 <__assert_func>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	b003      	add	sp, #12
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	bfbc      	itt	lt
 8007cfe:	464b      	movlt	r3, r9
 8007d00:	46a1      	movlt	r9, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d08:	bfba      	itte	lt
 8007d0a:	461c      	movlt	r4, r3
 8007d0c:	2501      	movlt	r5, #1
 8007d0e:	2500      	movge	r5, #0
 8007d10:	f7ff fd48 	bl	80077a4 <_Balloc>
 8007d14:	4602      	mov	r2, r0
 8007d16:	b918      	cbnz	r0, 8007d20 <__mdiff+0x60>
 8007d18:	f240 2145 	movw	r1, #581	@ 0x245
 8007d1c:	4b30      	ldr	r3, [pc, #192]	@ (8007de0 <__mdiff+0x120>)
 8007d1e:	e7e3      	b.n	8007ce8 <__mdiff+0x28>
 8007d20:	f100 0b14 	add.w	fp, r0, #20
 8007d24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d28:	f109 0310 	add.w	r3, r9, #16
 8007d2c:	60c5      	str	r5, [r0, #12]
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	f109 0514 	add.w	r5, r9, #20
 8007d36:	46d9      	mov	r9, fp
 8007d38:	6926      	ldr	r6, [r4, #16]
 8007d3a:	f104 0e14 	add.w	lr, r4, #20
 8007d3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	9b01      	ldr	r3, [sp, #4]
 8007d4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d52:	b281      	uxth	r1, r0
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	fa1f f38a 	uxth.w	r3, sl
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	0c00      	lsrs	r0, r0, #16
 8007d5e:	4463      	add	r3, ip
 8007d60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d6e:	4576      	cmp	r6, lr
 8007d70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d74:	f849 3b04 	str.w	r3, [r9], #4
 8007d78:	d8e6      	bhi.n	8007d48 <__mdiff+0x88>
 8007d7a:	1b33      	subs	r3, r6, r4
 8007d7c:	3b15      	subs	r3, #21
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	3415      	adds	r4, #21
 8007d84:	3304      	adds	r3, #4
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	bf38      	it	cc
 8007d8a:	2304      	movcc	r3, #4
 8007d8c:	441d      	add	r5, r3
 8007d8e:	445b      	add	r3, fp
 8007d90:	461e      	mov	r6, r3
 8007d92:	462c      	mov	r4, r5
 8007d94:	4544      	cmp	r4, r8
 8007d96:	d30e      	bcc.n	8007db6 <__mdiff+0xf6>
 8007d98:	f108 0103 	add.w	r1, r8, #3
 8007d9c:	1b49      	subs	r1, r1, r5
 8007d9e:	f021 0103 	bic.w	r1, r1, #3
 8007da2:	3d03      	subs	r5, #3
 8007da4:	45a8      	cmp	r8, r5
 8007da6:	bf38      	it	cc
 8007da8:	2100      	movcc	r1, #0
 8007daa:	440b      	add	r3, r1
 8007dac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007db0:	b199      	cbz	r1, 8007dda <__mdiff+0x11a>
 8007db2:	6117      	str	r7, [r2, #16]
 8007db4:	e79e      	b.n	8007cf4 <__mdiff+0x34>
 8007db6:	46e6      	mov	lr, ip
 8007db8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dbc:	fa1f fc81 	uxth.w	ip, r1
 8007dc0:	44f4      	add	ip, lr
 8007dc2:	0c08      	lsrs	r0, r1, #16
 8007dc4:	4471      	add	r1, lr
 8007dc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dca:	b289      	uxth	r1, r1
 8007dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007dd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dd4:	f846 1b04 	str.w	r1, [r6], #4
 8007dd8:	e7dc      	b.n	8007d94 <__mdiff+0xd4>
 8007dda:	3f01      	subs	r7, #1
 8007ddc:	e7e6      	b.n	8007dac <__mdiff+0xec>
 8007dde:	bf00      	nop
 8007de0:	0800ae82 	.word	0x0800ae82
 8007de4:	0800ae93 	.word	0x0800ae93

08007de8 <__d2b>:
 8007de8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007dec:	2101      	movs	r1, #1
 8007dee:	4690      	mov	r8, r2
 8007df0:	4699      	mov	r9, r3
 8007df2:	9e08      	ldr	r6, [sp, #32]
 8007df4:	f7ff fcd6 	bl	80077a4 <_Balloc>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	b930      	cbnz	r0, 8007e0a <__d2b+0x22>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <__d2b+0xa8>)
 8007e04:	4823      	ldr	r0, [pc, #140]	@ (8007e94 <__d2b+0xac>)
 8007e06:	f000 fa7f 	bl	8008308 <__assert_func>
 8007e0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e12:	b10d      	cbz	r5, 8007e18 <__d2b+0x30>
 8007e14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f1b8 0300 	subs.w	r3, r8, #0
 8007e1e:	d024      	beq.n	8007e6a <__d2b+0x82>
 8007e20:	4668      	mov	r0, sp
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	f7ff fd85 	bl	8007932 <__lo0bits>
 8007e28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e2c:	b1d8      	cbz	r0, 8007e66 <__d2b+0x7e>
 8007e2e:	f1c0 0320 	rsb	r3, r0, #32
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	430b      	orrs	r3, r1
 8007e38:	40c2      	lsrs	r2, r0
 8007e3a:	6163      	str	r3, [r4, #20]
 8007e3c:	9201      	str	r2, [sp, #4]
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bf0c      	ite	eq
 8007e44:	2201      	moveq	r2, #1
 8007e46:	2202      	movne	r2, #2
 8007e48:	61a3      	str	r3, [r4, #24]
 8007e4a:	6122      	str	r2, [r4, #16]
 8007e4c:	b1ad      	cbz	r5, 8007e7a <__d2b+0x92>
 8007e4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e52:	4405      	add	r5, r0
 8007e54:	6035      	str	r5, [r6, #0]
 8007e56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5c:	6018      	str	r0, [r3, #0]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	b002      	add	sp, #8
 8007e62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007e66:	6161      	str	r1, [r4, #20]
 8007e68:	e7e9      	b.n	8007e3e <__d2b+0x56>
 8007e6a:	a801      	add	r0, sp, #4
 8007e6c:	f7ff fd61 	bl	8007932 <__lo0bits>
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	3020      	adds	r0, #32
 8007e78:	e7e7      	b.n	8007e4a <__d2b+0x62>
 8007e7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e82:	6030      	str	r0, [r6, #0]
 8007e84:	6918      	ldr	r0, [r3, #16]
 8007e86:	f7ff fd35 	bl	80078f4 <__hi0bits>
 8007e8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e8e:	e7e4      	b.n	8007e5a <__d2b+0x72>
 8007e90:	0800ae82 	.word	0x0800ae82
 8007e94:	0800ae93 	.word	0x0800ae93

08007e98 <__ssputs_r>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	461f      	mov	r7, r3
 8007e9e:	688e      	ldr	r6, [r1, #8]
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	42be      	cmp	r6, r7
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	4690      	mov	r8, r2
 8007ea8:	680b      	ldr	r3, [r1, #0]
 8007eaa:	d82d      	bhi.n	8007f08 <__ssputs_r+0x70>
 8007eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007eb4:	d026      	beq.n	8007f04 <__ssputs_r+0x6c>
 8007eb6:	6965      	ldr	r5, [r4, #20]
 8007eb8:	6909      	ldr	r1, [r1, #16]
 8007eba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ebe:	eba3 0901 	sub.w	r9, r3, r1
 8007ec2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec6:	1c7b      	adds	r3, r7, #1
 8007ec8:	444b      	add	r3, r9
 8007eca:	106d      	asrs	r5, r5, #1
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	bf38      	it	cc
 8007ed0:	461d      	movcc	r5, r3
 8007ed2:	0553      	lsls	r3, r2, #21
 8007ed4:	d527      	bpl.n	8007f26 <__ssputs_r+0x8e>
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7ff fbd8 	bl	800768c <_malloc_r>
 8007edc:	4606      	mov	r6, r0
 8007ede:	b360      	cbz	r0, 8007f3a <__ssputs_r+0xa2>
 8007ee0:	464a      	mov	r2, r9
 8007ee2:	6921      	ldr	r1, [r4, #16]
 8007ee4:	f000 fa02 	bl	80082ec <memcpy>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	6126      	str	r6, [r4, #16]
 8007ef6:	444e      	add	r6, r9
 8007ef8:	6026      	str	r6, [r4, #0]
 8007efa:	463e      	mov	r6, r7
 8007efc:	6165      	str	r5, [r4, #20]
 8007efe:	eba5 0509 	sub.w	r5, r5, r9
 8007f02:	60a5      	str	r5, [r4, #8]
 8007f04:	42be      	cmp	r6, r7
 8007f06:	d900      	bls.n	8007f0a <__ssputs_r+0x72>
 8007f08:	463e      	mov	r6, r7
 8007f0a:	4632      	mov	r2, r6
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	f000 f9c2 	bl	8008298 <memmove>
 8007f14:	2000      	movs	r0, #0
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	1b9b      	subs	r3, r3, r6
 8007f1a:	60a3      	str	r3, [r4, #8]
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	4433      	add	r3, r6
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f26:	462a      	mov	r2, r5
 8007f28:	f000 fa32 	bl	8008390 <_realloc_r>
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d1e0      	bne.n	8007ef4 <__ssputs_r+0x5c>
 8007f32:	4650      	mov	r0, sl
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	f7ff fb37 	bl	80075a8 <_free_r>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	f8ca 3000 	str.w	r3, [sl]
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	e7e9      	b.n	8007f22 <__ssputs_r+0x8a>
	...

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4698      	mov	r8, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	4607      	mov	r7, r0
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	4614      	mov	r4, r2
 8007f60:	b09d      	sub	sp, #116	@ 0x74
 8007f62:	d510      	bpl.n	8007f86 <_svfiprintf_r+0x36>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b973      	cbnz	r3, 8007f86 <_svfiprintf_r+0x36>
 8007f68:	2140      	movs	r1, #64	@ 0x40
 8007f6a:	f7ff fb8f 	bl	800768c <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b930      	cbnz	r0, 8007f82 <_svfiprintf_r+0x32>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f7c:	b01d      	add	sp, #116	@ 0x74
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	2340      	movs	r3, #64	@ 0x40
 8007f84:	616b      	str	r3, [r5, #20]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8a:	2320      	movs	r3, #32
 8007f8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f90:	2330      	movs	r3, #48	@ 0x30
 8007f92:	f04f 0901 	mov.w	r9, #1
 8007f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008134 <_svfiprintf_r+0x1e4>
 8007f9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	469a      	mov	sl, r3
 8007fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007faa:	b10a      	cbz	r2, 8007fb0 <_svfiprintf_r+0x60>
 8007fac:	2a25      	cmp	r2, #37	@ 0x25
 8007fae:	d1f9      	bne.n	8007fa4 <_svfiprintf_r+0x54>
 8007fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb4:	d00b      	beq.n	8007fce <_svfiprintf_r+0x7e>
 8007fb6:	465b      	mov	r3, fp
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff ff6b 	bl	8007e98 <__ssputs_r>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f000 80a7 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fca:	445a      	add	r2, fp
 8007fcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 809f 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe2:	f10a 0a01 	add.w	sl, sl, #1
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ff0:	4654      	mov	r4, sl
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	484e      	ldr	r0, [pc, #312]	@ (8008134 <_svfiprintf_r+0x1e4>)
 8007ffa:	f7fe fc68 	bl	80068ce <memchr>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	b9d8      	cbnz	r0, 800803a <_svfiprintf_r+0xea>
 8008002:	06d0      	lsls	r0, r2, #27
 8008004:	bf44      	itt	mi
 8008006:	2320      	movmi	r3, #32
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800800c:	0711      	lsls	r1, r2, #28
 800800e:	bf44      	itt	mi
 8008010:	232b      	movmi	r3, #43	@ 0x2b
 8008012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008016:	f89a 3000 	ldrb.w	r3, [sl]
 800801a:	2b2a      	cmp	r3, #42	@ 0x2a
 800801c:	d015      	beq.n	800804a <_svfiprintf_r+0xfa>
 800801e:	4654      	mov	r4, sl
 8008020:	2000      	movs	r0, #0
 8008022:	f04f 0c0a 	mov.w	ip, #10
 8008026:	9a07      	ldr	r2, [sp, #28]
 8008028:	4621      	mov	r1, r4
 800802a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802e:	3b30      	subs	r3, #48	@ 0x30
 8008030:	2b09      	cmp	r3, #9
 8008032:	d94b      	bls.n	80080cc <_svfiprintf_r+0x17c>
 8008034:	b1b0      	cbz	r0, 8008064 <_svfiprintf_r+0x114>
 8008036:	9207      	str	r2, [sp, #28]
 8008038:	e014      	b.n	8008064 <_svfiprintf_r+0x114>
 800803a:	eba0 0308 	sub.w	r3, r0, r8
 800803e:	fa09 f303 	lsl.w	r3, r9, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	46a2      	mov	sl, r4
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	e7d2      	b.n	8007ff0 <_svfiprintf_r+0xa0>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	1d19      	adds	r1, r3, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	9103      	str	r1, [sp, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	bfbb      	ittet	lt
 8008056:	425b      	neglt	r3, r3
 8008058:	f042 0202 	orrlt.w	r2, r2, #2
 800805c:	9307      	strge	r3, [sp, #28]
 800805e:	9307      	strlt	r3, [sp, #28]
 8008060:	bfb8      	it	lt
 8008062:	9204      	strlt	r2, [sp, #16]
 8008064:	7823      	ldrb	r3, [r4, #0]
 8008066:	2b2e      	cmp	r3, #46	@ 0x2e
 8008068:	d10a      	bne.n	8008080 <_svfiprintf_r+0x130>
 800806a:	7863      	ldrb	r3, [r4, #1]
 800806c:	2b2a      	cmp	r3, #42	@ 0x2a
 800806e:	d132      	bne.n	80080d6 <_svfiprintf_r+0x186>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	3402      	adds	r4, #2
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	9203      	str	r2, [sp, #12]
 800807a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008138 <_svfiprintf_r+0x1e8>
 8008084:	2203      	movs	r2, #3
 8008086:	4650      	mov	r0, sl
 8008088:	7821      	ldrb	r1, [r4, #0]
 800808a:	f7fe fc20 	bl	80068ce <memchr>
 800808e:	b138      	cbz	r0, 80080a0 <_svfiprintf_r+0x150>
 8008090:	2240      	movs	r2, #64	@ 0x40
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	eba0 000a 	sub.w	r0, r0, sl
 8008098:	4082      	lsls	r2, r0
 800809a:	4313      	orrs	r3, r2
 800809c:	3401      	adds	r4, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	2206      	movs	r2, #6
 80080a6:	4825      	ldr	r0, [pc, #148]	@ (800813c <_svfiprintf_r+0x1ec>)
 80080a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ac:	f7fe fc0f 	bl	80068ce <memchr>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d036      	beq.n	8008122 <_svfiprintf_r+0x1d2>
 80080b4:	4b22      	ldr	r3, [pc, #136]	@ (8008140 <_svfiprintf_r+0x1f0>)
 80080b6:	bb1b      	cbnz	r3, 8008100 <_svfiprintf_r+0x1b0>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	3307      	adds	r3, #7
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	3308      	adds	r3, #8
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c6:	4433      	add	r3, r6
 80080c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ca:	e76a      	b.n	8007fa2 <_svfiprintf_r+0x52>
 80080cc:	460c      	mov	r4, r1
 80080ce:	2001      	movs	r0, #1
 80080d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d4:	e7a8      	b.n	8008028 <_svfiprintf_r+0xd8>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f04f 0c0a 	mov.w	ip, #10
 80080dc:	4619      	mov	r1, r3
 80080de:	3401      	adds	r4, #1
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	3a30      	subs	r2, #48	@ 0x30
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d903      	bls.n	80080f6 <_svfiprintf_r+0x1a6>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c6      	beq.n	8008080 <_svfiprintf_r+0x130>
 80080f2:	9105      	str	r1, [sp, #20]
 80080f4:	e7c4      	b.n	8008080 <_svfiprintf_r+0x130>
 80080f6:	4604      	mov	r4, r0
 80080f8:	2301      	movs	r3, #1
 80080fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fe:	e7f0      	b.n	80080e2 <_svfiprintf_r+0x192>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4638      	mov	r0, r7
 8008108:	4b0e      	ldr	r3, [pc, #56]	@ (8008144 <_svfiprintf_r+0x1f4>)
 800810a:	a904      	add	r1, sp, #16
 800810c:	f7fd fe7c 	bl	8005e08 <_printf_float>
 8008110:	1c42      	adds	r2, r0, #1
 8008112:	4606      	mov	r6, r0
 8008114:	d1d6      	bne.n	80080c4 <_svfiprintf_r+0x174>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	065b      	lsls	r3, r3, #25
 800811a:	f53f af2d 	bmi.w	8007f78 <_svfiprintf_r+0x28>
 800811e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008120:	e72c      	b.n	8007f7c <_svfiprintf_r+0x2c>
 8008122:	ab03      	add	r3, sp, #12
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	462a      	mov	r2, r5
 8008128:	4638      	mov	r0, r7
 800812a:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <_svfiprintf_r+0x1f4>)
 800812c:	a904      	add	r1, sp, #16
 800812e:	f7fe f909 	bl	8006344 <_printf_i>
 8008132:	e7ed      	b.n	8008110 <_svfiprintf_r+0x1c0>
 8008134:	0800aeec 	.word	0x0800aeec
 8008138:	0800aef2 	.word	0x0800aef2
 800813c:	0800aef6 	.word	0x0800aef6
 8008140:	08005e09 	.word	0x08005e09
 8008144:	08007e99 	.word	0x08007e99

08008148 <__sflush_r>:
 8008148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	0716      	lsls	r6, r2, #28
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
 8008154:	d454      	bmi.n	8008200 <__sflush_r+0xb8>
 8008156:	684b      	ldr	r3, [r1, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	dc02      	bgt.n	8008162 <__sflush_r+0x1a>
 800815c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	dd48      	ble.n	80081f4 <__sflush_r+0xac>
 8008162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008164:	2e00      	cmp	r6, #0
 8008166:	d045      	beq.n	80081f4 <__sflush_r+0xac>
 8008168:	2300      	movs	r3, #0
 800816a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800816e:	682f      	ldr	r7, [r5, #0]
 8008170:	6a21      	ldr	r1, [r4, #32]
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	d030      	beq.n	80081d8 <__sflush_r+0x90>
 8008176:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	0759      	lsls	r1, r3, #29
 800817c:	d505      	bpl.n	800818a <__sflush_r+0x42>
 800817e:	6863      	ldr	r3, [r4, #4]
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008184:	b10b      	cbz	r3, 800818a <__sflush_r+0x42>
 8008186:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	4628      	mov	r0, r5
 800818e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008190:	6a21      	ldr	r1, [r4, #32]
 8008192:	47b0      	blx	r6
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	d106      	bne.n	80081a8 <__sflush_r+0x60>
 800819a:	6829      	ldr	r1, [r5, #0]
 800819c:	291d      	cmp	r1, #29
 800819e:	d82b      	bhi.n	80081f8 <__sflush_r+0xb0>
 80081a0:	4a28      	ldr	r2, [pc, #160]	@ (8008244 <__sflush_r+0xfc>)
 80081a2:	40ca      	lsrs	r2, r1
 80081a4:	07d6      	lsls	r6, r2, #31
 80081a6:	d527      	bpl.n	80081f8 <__sflush_r+0xb0>
 80081a8:	2200      	movs	r2, #0
 80081aa:	6062      	str	r2, [r4, #4]
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	04d9      	lsls	r1, r3, #19
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	d504      	bpl.n	80081be <__sflush_r+0x76>
 80081b4:	1c42      	adds	r2, r0, #1
 80081b6:	d101      	bne.n	80081bc <__sflush_r+0x74>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b903      	cbnz	r3, 80081be <__sflush_r+0x76>
 80081bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80081be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081c0:	602f      	str	r7, [r5, #0]
 80081c2:	b1b9      	cbz	r1, 80081f4 <__sflush_r+0xac>
 80081c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d002      	beq.n	80081d2 <__sflush_r+0x8a>
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff f9eb 	bl	80075a8 <_free_r>
 80081d2:	2300      	movs	r3, #0
 80081d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d6:	e00d      	b.n	80081f4 <__sflush_r+0xac>
 80081d8:	2301      	movs	r3, #1
 80081da:	4628      	mov	r0, r5
 80081dc:	47b0      	blx	r6
 80081de:	4602      	mov	r2, r0
 80081e0:	1c50      	adds	r0, r2, #1
 80081e2:	d1c9      	bne.n	8008178 <__sflush_r+0x30>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0c6      	beq.n	8008178 <__sflush_r+0x30>
 80081ea:	2b1d      	cmp	r3, #29
 80081ec:	d001      	beq.n	80081f2 <__sflush_r+0xaa>
 80081ee:	2b16      	cmp	r3, #22
 80081f0:	d11d      	bne.n	800822e <__sflush_r+0xe6>
 80081f2:	602f      	str	r7, [r5, #0]
 80081f4:	2000      	movs	r0, #0
 80081f6:	e021      	b.n	800823c <__sflush_r+0xf4>
 80081f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	e01a      	b.n	8008236 <__sflush_r+0xee>
 8008200:	690f      	ldr	r7, [r1, #16]
 8008202:	2f00      	cmp	r7, #0
 8008204:	d0f6      	beq.n	80081f4 <__sflush_r+0xac>
 8008206:	0793      	lsls	r3, r2, #30
 8008208:	bf18      	it	ne
 800820a:	2300      	movne	r3, #0
 800820c:	680e      	ldr	r6, [r1, #0]
 800820e:	bf08      	it	eq
 8008210:	694b      	ldreq	r3, [r1, #20]
 8008212:	1bf6      	subs	r6, r6, r7
 8008214:	600f      	str	r7, [r1, #0]
 8008216:	608b      	str	r3, [r1, #8]
 8008218:	2e00      	cmp	r6, #0
 800821a:	ddeb      	ble.n	80081f4 <__sflush_r+0xac>
 800821c:	4633      	mov	r3, r6
 800821e:	463a      	mov	r2, r7
 8008220:	4628      	mov	r0, r5
 8008222:	6a21      	ldr	r1, [r4, #32]
 8008224:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008228:	47e0      	blx	ip
 800822a:	2800      	cmp	r0, #0
 800822c:	dc07      	bgt.n	800823e <__sflush_r+0xf6>
 800822e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823e:	4407      	add	r7, r0
 8008240:	1a36      	subs	r6, r6, r0
 8008242:	e7e9      	b.n	8008218 <__sflush_r+0xd0>
 8008244:	20400001 	.word	0x20400001

08008248 <_fflush_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b913      	cbnz	r3, 8008258 <_fflush_r+0x10>
 8008252:	2500      	movs	r5, #0
 8008254:	4628      	mov	r0, r5
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	b118      	cbz	r0, 8008262 <_fflush_r+0x1a>
 800825a:	6a03      	ldr	r3, [r0, #32]
 800825c:	b90b      	cbnz	r3, 8008262 <_fflush_r+0x1a>
 800825e:	f7fe fa1b 	bl	8006698 <__sinit>
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f3      	beq.n	8008252 <_fflush_r+0xa>
 800826a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800826c:	07d0      	lsls	r0, r2, #31
 800826e:	d404      	bmi.n	800827a <_fflush_r+0x32>
 8008270:	0599      	lsls	r1, r3, #22
 8008272:	d402      	bmi.n	800827a <_fflush_r+0x32>
 8008274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008276:	f7fe fb28 	bl	80068ca <__retarget_lock_acquire_recursive>
 800827a:	4628      	mov	r0, r5
 800827c:	4621      	mov	r1, r4
 800827e:	f7ff ff63 	bl	8008148 <__sflush_r>
 8008282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008284:	4605      	mov	r5, r0
 8008286:	07da      	lsls	r2, r3, #31
 8008288:	d4e4      	bmi.n	8008254 <_fflush_r+0xc>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	059b      	lsls	r3, r3, #22
 800828e:	d4e1      	bmi.n	8008254 <_fflush_r+0xc>
 8008290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008292:	f7fe fb1b 	bl	80068cc <__retarget_lock_release_recursive>
 8008296:	e7dd      	b.n	8008254 <_fflush_r+0xc>

08008298 <memmove>:
 8008298:	4288      	cmp	r0, r1
 800829a:	b510      	push	{r4, lr}
 800829c:	eb01 0402 	add.w	r4, r1, r2
 80082a0:	d902      	bls.n	80082a8 <memmove+0x10>
 80082a2:	4284      	cmp	r4, r0
 80082a4:	4623      	mov	r3, r4
 80082a6:	d807      	bhi.n	80082b8 <memmove+0x20>
 80082a8:	1e43      	subs	r3, r0, #1
 80082aa:	42a1      	cmp	r1, r4
 80082ac:	d008      	beq.n	80082c0 <memmove+0x28>
 80082ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082b6:	e7f8      	b.n	80082aa <memmove+0x12>
 80082b8:	4601      	mov	r1, r0
 80082ba:	4402      	add	r2, r0
 80082bc:	428a      	cmp	r2, r1
 80082be:	d100      	bne.n	80082c2 <memmove+0x2a>
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ca:	e7f7      	b.n	80082bc <memmove+0x24>

080082cc <_sbrk_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	2300      	movs	r3, #0
 80082d0:	4d05      	ldr	r5, [pc, #20]	@ (80082e8 <_sbrk_r+0x1c>)
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7fa f8b8 	bl	800244c <_sbrk>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_sbrk_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_sbrk_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200016b8 	.word	0x200016b8

080082ec <memcpy>:
 80082ec:	440a      	add	r2, r1
 80082ee:	4291      	cmp	r1, r2
 80082f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082f4:	d100      	bne.n	80082f8 <memcpy+0xc>
 80082f6:	4770      	bx	lr
 80082f8:	b510      	push	{r4, lr}
 80082fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fe:	4291      	cmp	r1, r2
 8008300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008304:	d1f9      	bne.n	80082fa <memcpy+0xe>
 8008306:	bd10      	pop	{r4, pc}

08008308 <__assert_func>:
 8008308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800830a:	4614      	mov	r4, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4b09      	ldr	r3, [pc, #36]	@ (8008334 <__assert_func+0x2c>)
 8008310:	4605      	mov	r5, r0
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68d8      	ldr	r0, [r3, #12]
 8008316:	b14c      	cbz	r4, 800832c <__assert_func+0x24>
 8008318:	4b07      	ldr	r3, [pc, #28]	@ (8008338 <__assert_func+0x30>)
 800831a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800831e:	9100      	str	r1, [sp, #0]
 8008320:	462b      	mov	r3, r5
 8008322:	4906      	ldr	r1, [pc, #24]	@ (800833c <__assert_func+0x34>)
 8008324:	f000 f870 	bl	8008408 <fiprintf>
 8008328:	f000 f880 	bl	800842c <abort>
 800832c:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <__assert_func+0x38>)
 800832e:	461c      	mov	r4, r3
 8008330:	e7f3      	b.n	800831a <__assert_func+0x12>
 8008332:	bf00      	nop
 8008334:	2000002c 	.word	0x2000002c
 8008338:	0800af07 	.word	0x0800af07
 800833c:	0800af14 	.word	0x0800af14
 8008340:	0800af42 	.word	0x0800af42

08008344 <_calloc_r>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	fba1 5402 	umull	r5, r4, r1, r2
 800834a:	b934      	cbnz	r4, 800835a <_calloc_r+0x16>
 800834c:	4629      	mov	r1, r5
 800834e:	f7ff f99d 	bl	800768c <_malloc_r>
 8008352:	4606      	mov	r6, r0
 8008354:	b928      	cbnz	r0, 8008362 <_calloc_r+0x1e>
 8008356:	4630      	mov	r0, r6
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	220c      	movs	r2, #12
 800835c:	2600      	movs	r6, #0
 800835e:	6002      	str	r2, [r0, #0]
 8008360:	e7f9      	b.n	8008356 <_calloc_r+0x12>
 8008362:	462a      	mov	r2, r5
 8008364:	4621      	mov	r1, r4
 8008366:	f7fe fa32 	bl	80067ce <memset>
 800836a:	e7f4      	b.n	8008356 <_calloc_r+0x12>

0800836c <__ascii_mbtowc>:
 800836c:	b082      	sub	sp, #8
 800836e:	b901      	cbnz	r1, 8008372 <__ascii_mbtowc+0x6>
 8008370:	a901      	add	r1, sp, #4
 8008372:	b142      	cbz	r2, 8008386 <__ascii_mbtowc+0x1a>
 8008374:	b14b      	cbz	r3, 800838a <__ascii_mbtowc+0x1e>
 8008376:	7813      	ldrb	r3, [r2, #0]
 8008378:	600b      	str	r3, [r1, #0]
 800837a:	7812      	ldrb	r2, [r2, #0]
 800837c:	1e10      	subs	r0, r2, #0
 800837e:	bf18      	it	ne
 8008380:	2001      	movne	r0, #1
 8008382:	b002      	add	sp, #8
 8008384:	4770      	bx	lr
 8008386:	4610      	mov	r0, r2
 8008388:	e7fb      	b.n	8008382 <__ascii_mbtowc+0x16>
 800838a:	f06f 0001 	mvn.w	r0, #1
 800838e:	e7f8      	b.n	8008382 <__ascii_mbtowc+0x16>

08008390 <_realloc_r>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	4607      	mov	r7, r0
 8008396:	4614      	mov	r4, r2
 8008398:	460d      	mov	r5, r1
 800839a:	b921      	cbnz	r1, 80083a6 <_realloc_r+0x16>
 800839c:	4611      	mov	r1, r2
 800839e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a2:	f7ff b973 	b.w	800768c <_malloc_r>
 80083a6:	b92a      	cbnz	r2, 80083b4 <_realloc_r+0x24>
 80083a8:	f7ff f8fe 	bl	80075a8 <_free_r>
 80083ac:	4625      	mov	r5, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b4:	f000 f841 	bl	800843a <_malloc_usable_size_r>
 80083b8:	4284      	cmp	r4, r0
 80083ba:	4606      	mov	r6, r0
 80083bc:	d802      	bhi.n	80083c4 <_realloc_r+0x34>
 80083be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083c2:	d8f4      	bhi.n	80083ae <_realloc_r+0x1e>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7ff f960 	bl	800768c <_malloc_r>
 80083cc:	4680      	mov	r8, r0
 80083ce:	b908      	cbnz	r0, 80083d4 <_realloc_r+0x44>
 80083d0:	4645      	mov	r5, r8
 80083d2:	e7ec      	b.n	80083ae <_realloc_r+0x1e>
 80083d4:	42b4      	cmp	r4, r6
 80083d6:	4622      	mov	r2, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	bf28      	it	cs
 80083dc:	4632      	movcs	r2, r6
 80083de:	f7ff ff85 	bl	80082ec <memcpy>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff f8df 	bl	80075a8 <_free_r>
 80083ea:	e7f1      	b.n	80083d0 <_realloc_r+0x40>

080083ec <__ascii_wctomb>:
 80083ec:	4603      	mov	r3, r0
 80083ee:	4608      	mov	r0, r1
 80083f0:	b141      	cbz	r1, 8008404 <__ascii_wctomb+0x18>
 80083f2:	2aff      	cmp	r2, #255	@ 0xff
 80083f4:	d904      	bls.n	8008400 <__ascii_wctomb+0x14>
 80083f6:	228a      	movs	r2, #138	@ 0x8a
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	4770      	bx	lr
 8008400:	2001      	movs	r0, #1
 8008402:	700a      	strb	r2, [r1, #0]
 8008404:	4770      	bx	lr
	...

08008408 <fiprintf>:
 8008408:	b40e      	push	{r1, r2, r3}
 800840a:	b503      	push	{r0, r1, lr}
 800840c:	4601      	mov	r1, r0
 800840e:	ab03      	add	r3, sp, #12
 8008410:	4805      	ldr	r0, [pc, #20]	@ (8008428 <fiprintf+0x20>)
 8008412:	f853 2b04 	ldr.w	r2, [r3], #4
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	f000 f83d 	bl	8008498 <_vfiprintf_r>
 800841e:	b002      	add	sp, #8
 8008420:	f85d eb04 	ldr.w	lr, [sp], #4
 8008424:	b003      	add	sp, #12
 8008426:	4770      	bx	lr
 8008428:	2000002c 	.word	0x2000002c

0800842c <abort>:
 800842c:	2006      	movs	r0, #6
 800842e:	b508      	push	{r3, lr}
 8008430:	f000 fa06 	bl	8008840 <raise>
 8008434:	2001      	movs	r0, #1
 8008436:	f7f9 ff94 	bl	8002362 <_exit>

0800843a <_malloc_usable_size_r>:
 800843a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843e:	1f18      	subs	r0, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	bfbc      	itt	lt
 8008444:	580b      	ldrlt	r3, [r1, r0]
 8008446:	18c0      	addlt	r0, r0, r3
 8008448:	4770      	bx	lr

0800844a <__sfputc_r>:
 800844a:	6893      	ldr	r3, [r2, #8]
 800844c:	b410      	push	{r4}
 800844e:	3b01      	subs	r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	6093      	str	r3, [r2, #8]
 8008454:	da07      	bge.n	8008466 <__sfputc_r+0x1c>
 8008456:	6994      	ldr	r4, [r2, #24]
 8008458:	42a3      	cmp	r3, r4
 800845a:	db01      	blt.n	8008460 <__sfputc_r+0x16>
 800845c:	290a      	cmp	r1, #10
 800845e:	d102      	bne.n	8008466 <__sfputc_r+0x1c>
 8008460:	bc10      	pop	{r4}
 8008462:	f000 b931 	b.w	80086c8 <__swbuf_r>
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	1c58      	adds	r0, r3, #1
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	7019      	strb	r1, [r3, #0]
 800846e:	4608      	mov	r0, r1
 8008470:	bc10      	pop	{r4}
 8008472:	4770      	bx	lr

08008474 <__sfputs_r>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	4614      	mov	r4, r2
 800847c:	18d5      	adds	r5, r2, r3
 800847e:	42ac      	cmp	r4, r5
 8008480:	d101      	bne.n	8008486 <__sfputs_r+0x12>
 8008482:	2000      	movs	r0, #0
 8008484:	e007      	b.n	8008496 <__sfputs_r+0x22>
 8008486:	463a      	mov	r2, r7
 8008488:	4630      	mov	r0, r6
 800848a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848e:	f7ff ffdc 	bl	800844a <__sfputc_r>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d1f3      	bne.n	800847e <__sfputs_r+0xa>
 8008496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008498 <_vfiprintf_r>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	460d      	mov	r5, r1
 800849e:	4614      	mov	r4, r2
 80084a0:	4698      	mov	r8, r3
 80084a2:	4606      	mov	r6, r0
 80084a4:	b09d      	sub	sp, #116	@ 0x74
 80084a6:	b118      	cbz	r0, 80084b0 <_vfiprintf_r+0x18>
 80084a8:	6a03      	ldr	r3, [r0, #32]
 80084aa:	b90b      	cbnz	r3, 80084b0 <_vfiprintf_r+0x18>
 80084ac:	f7fe f8f4 	bl	8006698 <__sinit>
 80084b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	d405      	bmi.n	80084c2 <_vfiprintf_r+0x2a>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	059a      	lsls	r2, r3, #22
 80084ba:	d402      	bmi.n	80084c2 <_vfiprintf_r+0x2a>
 80084bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084be:	f7fe fa04 	bl	80068ca <__retarget_lock_acquire_recursive>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	071b      	lsls	r3, r3, #28
 80084c6:	d501      	bpl.n	80084cc <_vfiprintf_r+0x34>
 80084c8:	692b      	ldr	r3, [r5, #16]
 80084ca:	b99b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x5c>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4630      	mov	r0, r6
 80084d0:	f000 f938 	bl	8008744 <__swsetup_r>
 80084d4:	b170      	cbz	r0, 80084f4 <_vfiprintf_r+0x5c>
 80084d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084d8:	07dc      	lsls	r4, r3, #31
 80084da:	d504      	bpl.n	80084e6 <_vfiprintf_r+0x4e>
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084e0:	b01d      	add	sp, #116	@ 0x74
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	0598      	lsls	r0, r3, #22
 80084ea:	d4f7      	bmi.n	80084dc <_vfiprintf_r+0x44>
 80084ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ee:	f7fe f9ed 	bl	80068cc <__retarget_lock_release_recursive>
 80084f2:	e7f3      	b.n	80084dc <_vfiprintf_r+0x44>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f8:	2320      	movs	r3, #32
 80084fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084fe:	2330      	movs	r3, #48	@ 0x30
 8008500:	f04f 0901 	mov.w	r9, #1
 8008504:	f8cd 800c 	str.w	r8, [sp, #12]
 8008508:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80086b4 <_vfiprintf_r+0x21c>
 800850c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008510:	4623      	mov	r3, r4
 8008512:	469a      	mov	sl, r3
 8008514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008518:	b10a      	cbz	r2, 800851e <_vfiprintf_r+0x86>
 800851a:	2a25      	cmp	r2, #37	@ 0x25
 800851c:	d1f9      	bne.n	8008512 <_vfiprintf_r+0x7a>
 800851e:	ebba 0b04 	subs.w	fp, sl, r4
 8008522:	d00b      	beq.n	800853c <_vfiprintf_r+0xa4>
 8008524:	465b      	mov	r3, fp
 8008526:	4622      	mov	r2, r4
 8008528:	4629      	mov	r1, r5
 800852a:	4630      	mov	r0, r6
 800852c:	f7ff ffa2 	bl	8008474 <__sfputs_r>
 8008530:	3001      	adds	r0, #1
 8008532:	f000 80a7 	beq.w	8008684 <_vfiprintf_r+0x1ec>
 8008536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008538:	445a      	add	r2, fp
 800853a:	9209      	str	r2, [sp, #36]	@ 0x24
 800853c:	f89a 3000 	ldrb.w	r3, [sl]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 809f 	beq.w	8008684 <_vfiprintf_r+0x1ec>
 8008546:	2300      	movs	r3, #0
 8008548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800854c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008550:	f10a 0a01 	add.w	sl, sl, #1
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	9307      	str	r3, [sp, #28]
 8008558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800855c:	931a      	str	r3, [sp, #104]	@ 0x68
 800855e:	4654      	mov	r4, sl
 8008560:	2205      	movs	r2, #5
 8008562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008566:	4853      	ldr	r0, [pc, #332]	@ (80086b4 <_vfiprintf_r+0x21c>)
 8008568:	f7fe f9b1 	bl	80068ce <memchr>
 800856c:	9a04      	ldr	r2, [sp, #16]
 800856e:	b9d8      	cbnz	r0, 80085a8 <_vfiprintf_r+0x110>
 8008570:	06d1      	lsls	r1, r2, #27
 8008572:	bf44      	itt	mi
 8008574:	2320      	movmi	r3, #32
 8008576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800857a:	0713      	lsls	r3, r2, #28
 800857c:	bf44      	itt	mi
 800857e:	232b      	movmi	r3, #43	@ 0x2b
 8008580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b2a      	cmp	r3, #42	@ 0x2a
 800858a:	d015      	beq.n	80085b8 <_vfiprintf_r+0x120>
 800858c:	4654      	mov	r4, sl
 800858e:	2000      	movs	r0, #0
 8008590:	f04f 0c0a 	mov.w	ip, #10
 8008594:	9a07      	ldr	r2, [sp, #28]
 8008596:	4621      	mov	r1, r4
 8008598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800859c:	3b30      	subs	r3, #48	@ 0x30
 800859e:	2b09      	cmp	r3, #9
 80085a0:	d94b      	bls.n	800863a <_vfiprintf_r+0x1a2>
 80085a2:	b1b0      	cbz	r0, 80085d2 <_vfiprintf_r+0x13a>
 80085a4:	9207      	str	r2, [sp, #28]
 80085a6:	e014      	b.n	80085d2 <_vfiprintf_r+0x13a>
 80085a8:	eba0 0308 	sub.w	r3, r0, r8
 80085ac:	fa09 f303 	lsl.w	r3, r9, r3
 80085b0:	4313      	orrs	r3, r2
 80085b2:	46a2      	mov	sl, r4
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	e7d2      	b.n	800855e <_vfiprintf_r+0xc6>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	1d19      	adds	r1, r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	9103      	str	r1, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bfbb      	ittet	lt
 80085c4:	425b      	neglt	r3, r3
 80085c6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ca:	9307      	strge	r3, [sp, #28]
 80085cc:	9307      	strlt	r3, [sp, #28]
 80085ce:	bfb8      	it	lt
 80085d0:	9204      	strlt	r2, [sp, #16]
 80085d2:	7823      	ldrb	r3, [r4, #0]
 80085d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80085d6:	d10a      	bne.n	80085ee <_vfiprintf_r+0x156>
 80085d8:	7863      	ldrb	r3, [r4, #1]
 80085da:	2b2a      	cmp	r3, #42	@ 0x2a
 80085dc:	d132      	bne.n	8008644 <_vfiprintf_r+0x1ac>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	3402      	adds	r4, #2
 80085e2:	1d1a      	adds	r2, r3, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	9203      	str	r2, [sp, #12]
 80085e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80086b8 <_vfiprintf_r+0x220>
 80085f2:	2203      	movs	r2, #3
 80085f4:	4650      	mov	r0, sl
 80085f6:	7821      	ldrb	r1, [r4, #0]
 80085f8:	f7fe f969 	bl	80068ce <memchr>
 80085fc:	b138      	cbz	r0, 800860e <_vfiprintf_r+0x176>
 80085fe:	2240      	movs	r2, #64	@ 0x40
 8008600:	9b04      	ldr	r3, [sp, #16]
 8008602:	eba0 000a 	sub.w	r0, r0, sl
 8008606:	4082      	lsls	r2, r0
 8008608:	4313      	orrs	r3, r2
 800860a:	3401      	adds	r4, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008612:	2206      	movs	r2, #6
 8008614:	4829      	ldr	r0, [pc, #164]	@ (80086bc <_vfiprintf_r+0x224>)
 8008616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800861a:	f7fe f958 	bl	80068ce <memchr>
 800861e:	2800      	cmp	r0, #0
 8008620:	d03f      	beq.n	80086a2 <_vfiprintf_r+0x20a>
 8008622:	4b27      	ldr	r3, [pc, #156]	@ (80086c0 <_vfiprintf_r+0x228>)
 8008624:	bb1b      	cbnz	r3, 800866e <_vfiprintf_r+0x1d6>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	3307      	adds	r3, #7
 800862a:	f023 0307 	bic.w	r3, r3, #7
 800862e:	3308      	adds	r3, #8
 8008630:	9303      	str	r3, [sp, #12]
 8008632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008634:	443b      	add	r3, r7
 8008636:	9309      	str	r3, [sp, #36]	@ 0x24
 8008638:	e76a      	b.n	8008510 <_vfiprintf_r+0x78>
 800863a:	460c      	mov	r4, r1
 800863c:	2001      	movs	r0, #1
 800863e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008642:	e7a8      	b.n	8008596 <_vfiprintf_r+0xfe>
 8008644:	2300      	movs	r3, #0
 8008646:	f04f 0c0a 	mov.w	ip, #10
 800864a:	4619      	mov	r1, r3
 800864c:	3401      	adds	r4, #1
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	4620      	mov	r0, r4
 8008652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008656:	3a30      	subs	r2, #48	@ 0x30
 8008658:	2a09      	cmp	r2, #9
 800865a:	d903      	bls.n	8008664 <_vfiprintf_r+0x1cc>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0c6      	beq.n	80085ee <_vfiprintf_r+0x156>
 8008660:	9105      	str	r1, [sp, #20]
 8008662:	e7c4      	b.n	80085ee <_vfiprintf_r+0x156>
 8008664:	4604      	mov	r4, r0
 8008666:	2301      	movs	r3, #1
 8008668:	fb0c 2101 	mla	r1, ip, r1, r2
 800866c:	e7f0      	b.n	8008650 <_vfiprintf_r+0x1b8>
 800866e:	ab03      	add	r3, sp, #12
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	462a      	mov	r2, r5
 8008674:	4630      	mov	r0, r6
 8008676:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <_vfiprintf_r+0x22c>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	f7fd fbc5 	bl	8005e08 <_printf_float>
 800867e:	4607      	mov	r7, r0
 8008680:	1c78      	adds	r0, r7, #1
 8008682:	d1d6      	bne.n	8008632 <_vfiprintf_r+0x19a>
 8008684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008686:	07d9      	lsls	r1, r3, #31
 8008688:	d405      	bmi.n	8008696 <_vfiprintf_r+0x1fe>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	059a      	lsls	r2, r3, #22
 800868e:	d402      	bmi.n	8008696 <_vfiprintf_r+0x1fe>
 8008690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008692:	f7fe f91b 	bl	80068cc <__retarget_lock_release_recursive>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	065b      	lsls	r3, r3, #25
 800869a:	f53f af1f 	bmi.w	80084dc <_vfiprintf_r+0x44>
 800869e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086a0:	e71e      	b.n	80084e0 <_vfiprintf_r+0x48>
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	462a      	mov	r2, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <_vfiprintf_r+0x22c>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	f7fd fe49 	bl	8006344 <_printf_i>
 80086b2:	e7e4      	b.n	800867e <_vfiprintf_r+0x1e6>
 80086b4:	0800aeec 	.word	0x0800aeec
 80086b8:	0800aef2 	.word	0x0800aef2
 80086bc:	0800aef6 	.word	0x0800aef6
 80086c0:	08005e09 	.word	0x08005e09
 80086c4:	08008475 	.word	0x08008475

080086c8 <__swbuf_r>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	460e      	mov	r6, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	4605      	mov	r5, r0
 80086d0:	b118      	cbz	r0, 80086da <__swbuf_r+0x12>
 80086d2:	6a03      	ldr	r3, [r0, #32]
 80086d4:	b90b      	cbnz	r3, 80086da <__swbuf_r+0x12>
 80086d6:	f7fd ffdf 	bl	8006698 <__sinit>
 80086da:	69a3      	ldr	r3, [r4, #24]
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	d501      	bpl.n	80086e8 <__swbuf_r+0x20>
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	b943      	cbnz	r3, 80086fa <__swbuf_r+0x32>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f82a 	bl	8008744 <__swsetup_r>
 80086f0:	b118      	cbz	r0, 80086fa <__swbuf_r+0x32>
 80086f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80086f6:	4638      	mov	r0, r7
 80086f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	b2f6      	uxtb	r6, r6
 8008700:	1a98      	subs	r0, r3, r2
 8008702:	6963      	ldr	r3, [r4, #20]
 8008704:	4637      	mov	r7, r6
 8008706:	4283      	cmp	r3, r0
 8008708:	dc05      	bgt.n	8008716 <__swbuf_r+0x4e>
 800870a:	4621      	mov	r1, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff fd9b 	bl	8008248 <_fflush_r>
 8008712:	2800      	cmp	r0, #0
 8008714:	d1ed      	bne.n	80086f2 <__swbuf_r+0x2a>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	3b01      	subs	r3, #1
 800871a:	60a3      	str	r3, [r4, #8]
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	701e      	strb	r6, [r3, #0]
 8008724:	6962      	ldr	r2, [r4, #20]
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	429a      	cmp	r2, r3
 800872a:	d004      	beq.n	8008736 <__swbuf_r+0x6e>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	07db      	lsls	r3, r3, #31
 8008730:	d5e1      	bpl.n	80086f6 <__swbuf_r+0x2e>
 8008732:	2e0a      	cmp	r6, #10
 8008734:	d1df      	bne.n	80086f6 <__swbuf_r+0x2e>
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fd85 	bl	8008248 <_fflush_r>
 800873e:	2800      	cmp	r0, #0
 8008740:	d0d9      	beq.n	80086f6 <__swbuf_r+0x2e>
 8008742:	e7d6      	b.n	80086f2 <__swbuf_r+0x2a>

08008744 <__swsetup_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <__swsetup_r+0xa8>)
 8008748:	4605      	mov	r5, r0
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	460c      	mov	r4, r1
 800874e:	b118      	cbz	r0, 8008758 <__swsetup_r+0x14>
 8008750:	6a03      	ldr	r3, [r0, #32]
 8008752:	b90b      	cbnz	r3, 8008758 <__swsetup_r+0x14>
 8008754:	f7fd ffa0 	bl	8006698 <__sinit>
 8008758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875c:	0719      	lsls	r1, r3, #28
 800875e:	d422      	bmi.n	80087a6 <__swsetup_r+0x62>
 8008760:	06da      	lsls	r2, r3, #27
 8008762:	d407      	bmi.n	8008774 <__swsetup_r+0x30>
 8008764:	2209      	movs	r2, #9
 8008766:	602a      	str	r2, [r5, #0]
 8008768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	e033      	b.n	80087dc <__swsetup_r+0x98>
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	d512      	bpl.n	800879e <__swsetup_r+0x5a>
 8008778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800877a:	b141      	cbz	r1, 800878e <__swsetup_r+0x4a>
 800877c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__swsetup_r+0x46>
 8008784:	4628      	mov	r0, r5
 8008786:	f7fe ff0f 	bl	80075a8 <_free_r>
 800878a:	2300      	movs	r3, #0
 800878c:	6363      	str	r3, [r4, #52]	@ 0x34
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b94b      	cbnz	r3, 80087be <__swsetup_r+0x7a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b4:	d003      	beq.n	80087be <__swsetup_r+0x7a>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 f882 	bl	80088c2 <__smakebuf_r>
 80087be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c2:	f013 0201 	ands.w	r2, r3, #1
 80087c6:	d00a      	beq.n	80087de <__swsetup_r+0x9a>
 80087c8:	2200      	movs	r2, #0
 80087ca:	60a2      	str	r2, [r4, #8]
 80087cc:	6962      	ldr	r2, [r4, #20]
 80087ce:	4252      	negs	r2, r2
 80087d0:	61a2      	str	r2, [r4, #24]
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	b942      	cbnz	r2, 80087e8 <__swsetup_r+0xa4>
 80087d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087da:	d1c5      	bne.n	8008768 <__swsetup_r+0x24>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	0799      	lsls	r1, r3, #30
 80087e0:	bf58      	it	pl
 80087e2:	6962      	ldrpl	r2, [r4, #20]
 80087e4:	60a2      	str	r2, [r4, #8]
 80087e6:	e7f4      	b.n	80087d2 <__swsetup_r+0x8e>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7f7      	b.n	80087dc <__swsetup_r+0x98>
 80087ec:	2000002c 	.word	0x2000002c

080087f0 <_raise_r>:
 80087f0:	291f      	cmp	r1, #31
 80087f2:	b538      	push	{r3, r4, r5, lr}
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	d904      	bls.n	8008804 <_raise_r+0x14>
 80087fa:	2316      	movs	r3, #22
 80087fc:	6003      	str	r3, [r0, #0]
 80087fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008806:	b112      	cbz	r2, 800880e <_raise_r+0x1e>
 8008808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800880c:	b94b      	cbnz	r3, 8008822 <_raise_r+0x32>
 800880e:	4628      	mov	r0, r5
 8008810:	f000 f830 	bl	8008874 <_getpid_r>
 8008814:	4622      	mov	r2, r4
 8008816:	4601      	mov	r1, r0
 8008818:	4628      	mov	r0, r5
 800881a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800881e:	f000 b817 	b.w	8008850 <_kill_r>
 8008822:	2b01      	cmp	r3, #1
 8008824:	d00a      	beq.n	800883c <_raise_r+0x4c>
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	d103      	bne.n	8008832 <_raise_r+0x42>
 800882a:	2316      	movs	r3, #22
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	2001      	movs	r0, #1
 8008830:	e7e7      	b.n	8008802 <_raise_r+0x12>
 8008832:	2100      	movs	r1, #0
 8008834:	4620      	mov	r0, r4
 8008836:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800883a:	4798      	blx	r3
 800883c:	2000      	movs	r0, #0
 800883e:	e7e0      	b.n	8008802 <_raise_r+0x12>

08008840 <raise>:
 8008840:	4b02      	ldr	r3, [pc, #8]	@ (800884c <raise+0xc>)
 8008842:	4601      	mov	r1, r0
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f7ff bfd3 	b.w	80087f0 <_raise_r>
 800884a:	bf00      	nop
 800884c:	2000002c 	.word	0x2000002c

08008850 <_kill_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	2300      	movs	r3, #0
 8008854:	4d06      	ldr	r5, [pc, #24]	@ (8008870 <_kill_r+0x20>)
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	4611      	mov	r1, r2
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	f7f9 fd70 	bl	8002342 <_kill>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d102      	bne.n	800886c <_kill_r+0x1c>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	b103      	cbz	r3, 800886c <_kill_r+0x1c>
 800886a:	6023      	str	r3, [r4, #0]
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	200016b8 	.word	0x200016b8

08008874 <_getpid_r>:
 8008874:	f7f9 bd5e 	b.w	8002334 <_getpid>

08008878 <__swhatbuf_r>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	460c      	mov	r4, r1
 800887c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008880:	4615      	mov	r5, r2
 8008882:	2900      	cmp	r1, #0
 8008884:	461e      	mov	r6, r3
 8008886:	b096      	sub	sp, #88	@ 0x58
 8008888:	da0c      	bge.n	80088a4 <__swhatbuf_r+0x2c>
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	2100      	movs	r1, #0
 800888e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008892:	bf14      	ite	ne
 8008894:	2340      	movne	r3, #64	@ 0x40
 8008896:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800889a:	2000      	movs	r0, #0
 800889c:	6031      	str	r1, [r6, #0]
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	b016      	add	sp, #88	@ 0x58
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	466a      	mov	r2, sp
 80088a6:	f000 f849 	bl	800893c <_fstat_r>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dbed      	blt.n	800888a <__swhatbuf_r+0x12>
 80088ae:	9901      	ldr	r1, [sp, #4]
 80088b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088b8:	4259      	negs	r1, r3
 80088ba:	4159      	adcs	r1, r3
 80088bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088c0:	e7eb      	b.n	800889a <__swhatbuf_r+0x22>

080088c2 <__smakebuf_r>:
 80088c2:	898b      	ldrh	r3, [r1, #12]
 80088c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c6:	079d      	lsls	r5, r3, #30
 80088c8:	4606      	mov	r6, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	d507      	bpl.n	80088de <__smakebuf_r+0x1c>
 80088ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	2301      	movs	r3, #1
 80088d8:	6163      	str	r3, [r4, #20]
 80088da:	b003      	add	sp, #12
 80088dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088de:	466a      	mov	r2, sp
 80088e0:	ab01      	add	r3, sp, #4
 80088e2:	f7ff ffc9 	bl	8008878 <__swhatbuf_r>
 80088e6:	9f00      	ldr	r7, [sp, #0]
 80088e8:	4605      	mov	r5, r0
 80088ea:	4639      	mov	r1, r7
 80088ec:	4630      	mov	r0, r6
 80088ee:	f7fe fecd 	bl	800768c <_malloc_r>
 80088f2:	b948      	cbnz	r0, 8008908 <__smakebuf_r+0x46>
 80088f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f8:	059a      	lsls	r2, r3, #22
 80088fa:	d4ee      	bmi.n	80088da <__smakebuf_r+0x18>
 80088fc:	f023 0303 	bic.w	r3, r3, #3
 8008900:	f043 0302 	orr.w	r3, r3, #2
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	e7e2      	b.n	80088ce <__smakebuf_r+0xc>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800890e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	6020      	str	r0, [r4, #0]
 8008918:	b15b      	cbz	r3, 8008932 <__smakebuf_r+0x70>
 800891a:	4630      	mov	r0, r6
 800891c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008920:	f000 f81e 	bl	8008960 <_isatty_r>
 8008924:	b128      	cbz	r0, 8008932 <__smakebuf_r+0x70>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f023 0303 	bic.w	r3, r3, #3
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	431d      	orrs	r5, r3
 8008936:	81a5      	strh	r5, [r4, #12]
 8008938:	e7cf      	b.n	80088da <__smakebuf_r+0x18>
	...

0800893c <_fstat_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	2300      	movs	r3, #0
 8008940:	4d06      	ldr	r5, [pc, #24]	@ (800895c <_fstat_r+0x20>)
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	f7f9 fd59 	bl	8002400 <_fstat>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d102      	bne.n	8008958 <_fstat_r+0x1c>
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	b103      	cbz	r3, 8008958 <_fstat_r+0x1c>
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	bf00      	nop
 800895c:	200016b8 	.word	0x200016b8

08008960 <_isatty_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	2300      	movs	r3, #0
 8008964:	4d05      	ldr	r5, [pc, #20]	@ (800897c <_isatty_r+0x1c>)
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f9 fd57 	bl	800241e <_isatty>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_isatty_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_isatty_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	200016b8 	.word	0x200016b8

08008980 <sqrt>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	4606      	mov	r6, r0
 8008984:	460f      	mov	r7, r1
 8008986:	f000 f81f 	bl	80089c8 <__ieee754_sqrt>
 800898a:	4632      	mov	r2, r6
 800898c:	4604      	mov	r4, r0
 800898e:	460d      	mov	r5, r1
 8008990:	463b      	mov	r3, r7
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 f8ed 	bl	8000b74 <__aeabi_dcmpun>
 800899a:	b990      	cbnz	r0, 80089c2 <sqrt+0x42>
 800899c:	2200      	movs	r2, #0
 800899e:	2300      	movs	r3, #0
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f8 f8be 	bl	8000b24 <__aeabi_dcmplt>
 80089a8:	b158      	cbz	r0, 80089c2 <sqrt+0x42>
 80089aa:	f7fd ff63 	bl	8006874 <__errno>
 80089ae:	2321      	movs	r3, #33	@ 0x21
 80089b0:	2200      	movs	r2, #0
 80089b2:	6003      	str	r3, [r0, #0]
 80089b4:	2300      	movs	r3, #0
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7f7 ff6b 	bl	8000894 <__aeabi_ddiv>
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089c8 <__ieee754_sqrt>:
 80089c8:	4a65      	ldr	r2, [pc, #404]	@ (8008b60 <__ieee754_sqrt+0x198>)
 80089ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ce:	438a      	bics	r2, r1
 80089d0:	4606      	mov	r6, r0
 80089d2:	460f      	mov	r7, r1
 80089d4:	460b      	mov	r3, r1
 80089d6:	4604      	mov	r4, r0
 80089d8:	d10e      	bne.n	80089f8 <__ieee754_sqrt+0x30>
 80089da:	4602      	mov	r2, r0
 80089dc:	f7f7 fe30 	bl	8000640 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f7 fc74 	bl	80002d4 <__adddf3>
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	2900      	cmp	r1, #0
 80089fa:	dc0c      	bgt.n	8008a16 <__ieee754_sqrt+0x4e>
 80089fc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008a00:	4302      	orrs	r2, r0
 8008a02:	d0f5      	beq.n	80089f0 <__ieee754_sqrt+0x28>
 8008a04:	b189      	cbz	r1, 8008a2a <__ieee754_sqrt+0x62>
 8008a06:	4602      	mov	r2, r0
 8008a08:	f7f7 fc62 	bl	80002d0 <__aeabi_dsub>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	f7f7 ff40 	bl	8000894 <__aeabi_ddiv>
 8008a14:	e7ea      	b.n	80089ec <__ieee754_sqrt+0x24>
 8008a16:	150a      	asrs	r2, r1, #20
 8008a18:	d115      	bne.n	8008a46 <__ieee754_sqrt+0x7e>
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	e009      	b.n	8008a32 <__ieee754_sqrt+0x6a>
 8008a1e:	0ae3      	lsrs	r3, r4, #11
 8008a20:	3a15      	subs	r2, #21
 8008a22:	0564      	lsls	r4, r4, #21
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0fa      	beq.n	8008a1e <__ieee754_sqrt+0x56>
 8008a28:	e7f7      	b.n	8008a1a <__ieee754_sqrt+0x52>
 8008a2a:	460a      	mov	r2, r1
 8008a2c:	e7fa      	b.n	8008a24 <__ieee754_sqrt+0x5c>
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	3101      	adds	r1, #1
 8008a32:	02d8      	lsls	r0, r3, #11
 8008a34:	d5fb      	bpl.n	8008a2e <__ieee754_sqrt+0x66>
 8008a36:	1e48      	subs	r0, r1, #1
 8008a38:	1a12      	subs	r2, r2, r0
 8008a3a:	f1c1 0020 	rsb	r0, r1, #32
 8008a3e:	fa24 f000 	lsr.w	r0, r4, r0
 8008a42:	4303      	orrs	r3, r0
 8008a44:	408c      	lsls	r4, r1
 8008a46:	2700      	movs	r7, #0
 8008a48:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008a4c:	2116      	movs	r1, #22
 8008a4e:	07d2      	lsls	r2, r2, #31
 8008a50:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008a54:	463a      	mov	r2, r7
 8008a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a5e:	bf5c      	itt	pl
 8008a60:	005b      	lslpl	r3, r3, #1
 8008a62:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008a66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a6a:	bf58      	it	pl
 8008a6c:	0064      	lslpl	r4, r4, #1
 8008a6e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008a72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a76:	0064      	lsls	r4, r4, #1
 8008a78:	1815      	adds	r5, r2, r0
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	bfde      	ittt	le
 8008a7e:	182a      	addle	r2, r5, r0
 8008a80:	1b5b      	suble	r3, r3, r5
 8008a82:	183f      	addle	r7, r7, r0
 8008a84:	0fe5      	lsrs	r5, r4, #31
 8008a86:	3901      	subs	r1, #1
 8008a88:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008a8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008a90:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008a94:	d1f0      	bne.n	8008a78 <__ieee754_sqrt+0xb0>
 8008a96:	460d      	mov	r5, r1
 8008a98:	2620      	movs	r6, #32
 8008a9a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	eb00 0c01 	add.w	ip, r0, r1
 8008aa4:	dc02      	bgt.n	8008aac <__ieee754_sqrt+0xe4>
 8008aa6:	d113      	bne.n	8008ad0 <__ieee754_sqrt+0x108>
 8008aa8:	45a4      	cmp	ip, r4
 8008aaa:	d811      	bhi.n	8008ad0 <__ieee754_sqrt+0x108>
 8008aac:	f1bc 0f00 	cmp.w	ip, #0
 8008ab0:	eb0c 0100 	add.w	r1, ip, r0
 8008ab4:	da3e      	bge.n	8008b34 <__ieee754_sqrt+0x16c>
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	db3c      	blt.n	8008b34 <__ieee754_sqrt+0x16c>
 8008aba:	f102 0e01 	add.w	lr, r2, #1
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	4672      	mov	r2, lr
 8008ac2:	45a4      	cmp	ip, r4
 8008ac4:	bf88      	it	hi
 8008ac6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008aca:	eba4 040c 	sub.w	r4, r4, ip
 8008ace:	4405      	add	r5, r0
 8008ad0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008ad4:	3e01      	subs	r6, #1
 8008ad6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008ada:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008ade:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008ae2:	d1dc      	bne.n	8008a9e <__ieee754_sqrt+0xd6>
 8008ae4:	431c      	orrs	r4, r3
 8008ae6:	d01a      	beq.n	8008b1e <__ieee754_sqrt+0x156>
 8008ae8:	4c1e      	ldr	r4, [pc, #120]	@ (8008b64 <__ieee754_sqrt+0x19c>)
 8008aea:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8008b68 <__ieee754_sqrt+0x1a0>
 8008aee:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008af2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008af6:	f7f7 fbeb 	bl	80002d0 <__aeabi_dsub>
 8008afa:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4650      	mov	r0, sl
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f8 f817 	bl	8000b38 <__aeabi_dcmple>
 8008b0a:	b140      	cbz	r0, 8008b1e <__ieee754_sqrt+0x156>
 8008b0c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b10:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b14:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008b18:	d10e      	bne.n	8008b38 <__ieee754_sqrt+0x170>
 8008b1a:	4635      	mov	r5, r6
 8008b1c:	3701      	adds	r7, #1
 8008b1e:	107b      	asrs	r3, r7, #1
 8008b20:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b24:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008b28:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008b2c:	086b      	lsrs	r3, r5, #1
 8008b2e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8008b32:	e75b      	b.n	80089ec <__ieee754_sqrt+0x24>
 8008b34:	4696      	mov	lr, r2
 8008b36:	e7c2      	b.n	8008abe <__ieee754_sqrt+0xf6>
 8008b38:	f7f7 fbcc 	bl	80002d4 <__adddf3>
 8008b3c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4650      	mov	r0, sl
 8008b46:	4659      	mov	r1, fp
 8008b48:	f7f7 ffec 	bl	8000b24 <__aeabi_dcmplt>
 8008b4c:	b120      	cbz	r0, 8008b58 <__ieee754_sqrt+0x190>
 8008b4e:	1cab      	adds	r3, r5, #2
 8008b50:	bf08      	it	eq
 8008b52:	3701      	addeq	r7, #1
 8008b54:	3502      	adds	r5, #2
 8008b56:	e7e2      	b.n	8008b1e <__ieee754_sqrt+0x156>
 8008b58:	1c6b      	adds	r3, r5, #1
 8008b5a:	f023 0501 	bic.w	r5, r3, #1
 8008b5e:	e7de      	b.n	8008b1e <__ieee754_sqrt+0x156>
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	0800b150 	.word	0x0800b150
 8008b68:	0800b148 	.word	0x0800b148

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
