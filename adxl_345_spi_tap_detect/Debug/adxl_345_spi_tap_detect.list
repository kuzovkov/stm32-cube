
adxl_345_spi_tap_detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c14  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001878  08008d28  08008d28  00009d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a0  0800a5a0  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a8  0800a5a8  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a8  0800a5a8  0000b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a5b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001560  200001e0  0800a790  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001740  0800a790  0000c740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b1  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290c  00000000  00000000  0001c3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  0001fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0fd  00000000  00000000  000209f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112dc  00000000  00000000  0003aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905fb  00000000  00000000  0004bdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc3c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057dc  00000000  00000000  000dc40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e1be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d0c 	.word	0x08008d0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008d0c 	.word	0x08008d0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <trace_printf>:

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 8000f98:	b40f      	push	{r0, r1, r2, r3}
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  int ret;
  va_list ap;

  va_start (ap, format);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	603b      	str	r3, [r7, #0]
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <trace_printf+0x40>)
 8000fae:	f005 fcd1 	bl	8006954 <vsniprintf>
 8000fb2:	6078      	str	r0, [r7, #4]
  if (ret > 0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dd05      	ble.n	8000fc6 <trace_printf+0x2e>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <trace_printf+0x40>)
 8000fc0:	f000 f80c 	bl	8000fdc <trace_write>
 8000fc4:	6078      	str	r0, [r7, #4]
    }

  va_end (ap);
  return ret;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd2:	b004      	add	sp, #16
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200001fc 	.word	0x200001fc

08000fdc <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f805 	bl	8000ff8 <_trace_write_semihosting_debug>
 8000fee:	4603      	mov	r3, r0
#endif

  return -1;
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_trace_write_semihosting_debug>:

#define OS_INTEGER_TRACE_TMP_ARRAY_SIZE  (16)

static ssize_t
_trace_write_semihosting_debug (const char* buf, size_t nbyte)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b090      	sub	sp, #64	@ 0x40
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  // Since the single character debug channel is quite slow, try to
  // optimise and send a null terminated string, if possible.
  if (buf[nbyte] == '\0')
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10b      	bne.n	8001026 <_trace_write_semihosting_debug+0x2e>
 800100e:	2304      	movs	r3, #4
 8001010:	633b      	str	r3, [r7, #48]	@ 0x30
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
static inline int
__attribute__ ((always_inline))
call_host (int reason, void* arg)
{
  int value;
  asm volatile (
 8001016:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001018:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	beab      	bkpt	0x00ab
 8001020:	4604      	mov	r4, r0
 8001022:	62bc      	str	r4, [r7, #40]	@ 0x28
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
 8001024:	e036      	b.n	8001094 <_trace_write_semihosting_debug+0x9c>
    }
  else
    {
      // If not, use a local buffer to speed things up
      char tmp[OS_INTEGER_TRACE_TMP_ARRAY_SIZE];
      size_t togo = nbyte;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (togo > 0)
 800102a:	e030      	b.n	800108e <_trace_write_semihosting_debug+0x96>
        {
          unsigned int n = ((togo < sizeof(tmp)) ? togo : sizeof(tmp));
 800102c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800102e:	2b10      	cmp	r3, #16
 8001030:	bf28      	it	cs
 8001032:	2310      	movcs	r3, #16
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34
          unsigned int i = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	63bb      	str	r3, [r7, #56]	@ 0x38
          for (; i < n; ++i, ++buf)
 800103a:	e00d      	b.n	8001058 <_trace_write_semihosting_debug+0x60>
            {
              tmp[i] = *buf;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7819      	ldrb	r1, [r3, #0]
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001046:	4413      	add	r3, r2
 8001048:	460a      	mov	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
          for (; i < n; ++i, ++buf)
 800104c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104e:	3301      	adds	r3, #1
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800105a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105c:	429a      	cmp	r2, r3
 800105e:	d3ed      	bcc.n	800103c <_trace_write_semihosting_debug+0x44>
            }
          tmp[i] = '\0';
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001066:	4413      	add	r3, r2
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	2304      	movs	r3, #4
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	623b      	str	r3, [r7, #32]
  asm volatile (
 8001076:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8001078:	6a3d      	ldr	r5, [r7, #32]
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	beab      	bkpt	0x00ab
 8001080:	4604      	mov	r4, r0
 8001082:	61fc      	str	r4, [r7, #28]
  return value;
 8001084:	bf00      	nop

          call_host (SEMIHOSTING_SYS_WRITE0, (void*) tmp);

          togo -= n;
 8001086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (togo > 0)
 800108e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1cb      	bne.n	800102c <_trace_write_semihosting_debug+0x34>
        }
    }

  // All bytes written
  return (ssize_t) nbyte;
 8001094:	683b      	ldr	r3, [r7, #0]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3740      	adds	r7, #64	@ 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010a0 <ADXL345_CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Функции работы с CS
void ADXL345_CS_Select()   { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET); }
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010aa:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <ADXL345_CS_Select+0x14>)
 80010ac:	f002 f87e 	bl	80031ac <HAL_GPIO_WritePin>
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <ADXL345_CS_Deselect>:
void ADXL345_CS_Deselect() { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); }
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c2:	4802      	ldr	r0, [pc, #8]	@ (80010cc <ADXL345_CS_Deselect+0x14>)
 80010c4:	f002 f872 	bl	80031ac <HAL_GPIO_WritePin>
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <ADXL345_WriteReg>:

// Функции SPI записи/чтения
void ADXL345_WriteReg(uint8_t reg, uint8_t data) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg & 0x3F, data};  // MSB=0 для записи
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	733b      	strb	r3, [r7, #12]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	737b      	strb	r3, [r7, #13]
    ADXL345_CS_Select();
 80010ee:	f7ff ffd7 	bl	80010a0 <ADXL345_CS_Select>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	2202      	movs	r2, #2
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <ADXL345_WriteReg+0x40>)
 80010fe:	f002 fd19 	bl	8003b34 <HAL_SPI_Transmit>
    ADXL345_CS_Deselect();
 8001102:	f7ff ffd9 	bl	80010b8 <ADXL345_CS_Deselect>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200002d4 	.word	0x200002d4

08001114 <ADXL345_ReadAxes>:
    HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, HAL_MAX_DELAY);
    ADXL345_CS_Deselect();
    return rx;
}

void ADXL345_ReadAxes(int16_t* x, int16_t* y, int16_t* z) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af02      	add	r7, sp, #8
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
    uint8_t tx[7];
    uint8_t rx[7];
    tx[0] = 0x80 | 0x40 | 0x32; // чтение многобайтно с DATAX0
 8001120:	23f2      	movs	r3, #242	@ 0xf2
 8001122:	773b      	strb	r3, [r7, #28]
    for(int i=1; i<7; i++) tx[i]=0x00;
 8001124:	2301      	movs	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	e008      	b.n	800113c <ADXL345_ReadAxes+0x28>
 800112a:	f107 021c 	add.w	r2, r7, #28
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	3301      	adds	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	2b06      	cmp	r3, #6
 8001140:	ddf3      	ble.n	800112a <ADXL345_ReadAxes+0x16>

    ADXL345_CS_Select();
 8001142:	f7ff ffad 	bl	80010a0 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 7, HAL_MAX_DELAY);
 8001146:	f107 0214 	add.w	r2, r7, #20
 800114a:	f107 011c 	add.w	r1, r7, #28
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2307      	movs	r3, #7
 8001156:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <ADXL345_ReadAxes+0x90>)
 8001158:	f002 ff49 	bl	8003fee <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 800115c:	f7ff ffac 	bl	80010b8 <ADXL345_CS_Deselect>

    *x = (int16_t)((rx[2]<<8)|rx[1]);
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	b21b      	sxth	r3, r3
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((rx[4]<<8)|rx[3]);
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	b21b      	sxth	r3, r3
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((rx[6]<<8)|rx[5]);
 8001188:	7ebb      	ldrb	r3, [r7, #26]
 800118a:	b21b      	sxth	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7e7b      	ldrb	r3, [r7, #25]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	801a      	strh	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200002d4 	.word	0x200002d4

080011a8 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | 0x80; // R/W=1
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS LOW
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c6:	480f      	ldr	r0, [pc, #60]	@ (8001204 <ADXL_ReadReg+0x5c>)
 80011c8:	f001 fff0 	bl	80031ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx, 1, HAL_MAX_DELAY);       // отправили адрес
 80011cc:	f107 010f 	add.w	r1, r7, #15
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d4:	2201      	movs	r2, #1
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <ADXL_ReadReg+0x60>)
 80011d8:	f002 fcac 	bl	8003b34 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx, 1, HAL_MAX_DELAY);        // читаем 1 байт
 80011dc:	f107 010e 	add.w	r1, r7, #14
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e4:	2201      	movs	r2, #1
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <ADXL_ReadReg+0x60>)
 80011e8:	f002 fde8 	bl	8003dbc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // CS HIGH
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f2:	4804      	ldr	r0, [pc, #16]	@ (8001204 <ADXL_ReadReg+0x5c>)
 80011f4:	f001 ffda 	bl	80031ac <HAL_GPIO_WritePin>

    return rx;
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010c00 	.word	0x40010c00
 8001208:	200002d4 	.word	0x200002d4

0800120c <ADXL_TestLoop>:

void ADXL_TestLoop(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a2      	sub	sp, #136	@ 0x88
 8001210:	af00      	add	r7, sp, #0
    char message[128];
	while (1)
    {
        uint8_t int_enable = ADXL_ReadReg(0x2E);
 8001212:	202e      	movs	r0, #46	@ 0x2e
 8001214:	f7ff ffc8 	bl	80011a8 <ADXL_ReadReg>
 8001218:	4603      	mov	r3, r0
 800121a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        uint8_t int_map    = ADXL_ReadReg(0x2F);
 800121e:	202f      	movs	r0, #47	@ 0x2f
 8001220:	f7ff ffc2 	bl	80011a8 <ADXL_ReadReg>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
        uint8_t int_src    = ADXL_ReadReg(0x30);
 800122a:	2030      	movs	r0, #48	@ 0x30
 800122c:	f7ff ffbc 	bl	80011a8 <ADXL_ReadReg>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

        //sprintf(message, "INT_ENABLE=0x%02X, INT_MAP=0x%02X, INT_SOURCE=0x%02X", int_enable, int_map, int_src);
        //HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
        trace_printf("INT_ENABLE=0x%02X, INT_MAP=0x%02X, INT_SOURCE=0x%02X\n", int_enable, int_map, int_src);
 8001236:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 800123a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800123e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <ADXL_TestLoop+0x48>)
 8001244:	f7ff fea8 	bl	8000f98 <trace_printf>
        HAL_Delay(500);
 8001248:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800124c:	f001 fa56 	bl	80026fc <HAL_Delay>
    {
 8001250:	bf00      	nop
 8001252:	e7de      	b.n	8001212 <ADXL_TestLoop+0x6>
 8001254:	08008d28 	.word	0x08008d28

08001258 <ADXL345_Init>:
// Инициализация ADXL345
/* Инициализация ADXL345 */
/* Примечание: здесь устанавливаем full resolution и диапазон ±16g (DATA_FORMAT = 0x0B),
   включаем измерения POWER_CTL = 0x08.
   При желании можно настроить частоту в регистре BW_RATE (0x2C) */
void ADXL345_Init(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f001 fa4d 	bl	80026fc <HAL_Delay>
    ADXL345_WriteReg(0x2D, 0x00); // сброс POWER_CTL чтобы быть уверенным
 8001262:	2100      	movs	r1, #0
 8001264:	202d      	movs	r0, #45	@ 0x2d
 8001266:	f7ff ff33 	bl	80010d0 <ADXL345_WriteReg>
    HAL_Delay(5);
 800126a:	2005      	movs	r0, #5
 800126c:	f001 fa46 	bl	80026fc <HAL_Delay>
    ADXL345_WriteReg(0x31, 0x0B); // DATA_FORMAT: FULL_RES=1, range=11 (±16g)
 8001270:	210b      	movs	r1, #11
 8001272:	2031      	movs	r0, #49	@ 0x31
 8001274:	f7ff ff2c 	bl	80010d0 <ADXL345_WriteReg>
    HAL_Delay(2);
 8001278:	2002      	movs	r0, #2
 800127a:	f001 fa3f 	bl	80026fc <HAL_Delay>
    // опционально: установить скорость выборки (BW_RATE). По умолчанию 100 Hz.
    ADXL345_WriteReg(0x2C, 0x0D); // пример: установить 100 Hz (см. datasheet для нужного значения)
 800127e:	210d      	movs	r1, #13
 8001280:	202c      	movs	r0, #44	@ 0x2c
 8001282:	f7ff ff25 	bl	80010d0 <ADXL345_WriteReg>
    ADXL345_WriteReg(0x2D, 0x08); // POWER_CTL: Measure = 1
 8001286:	2108      	movs	r1, #8
 8001288:	202d      	movs	r0, #45	@ 0x2d
 800128a:	f7ff ff21 	bl	80010d0 <ADXL345_WriteReg>
    HAL_Delay(5);
 800128e:	2005      	movs	r0, #5
 8001290:	f001 fa34 	bl	80026fc <HAL_Delay>

    // --- Настройка Tap ---
	ADXL345_WriteReg(0x1D, 0x10); // THRESH_TAP ~ 3g (48*62.5mg)
 8001294:	2110      	movs	r1, #16
 8001296:	201d      	movs	r0, #29
 8001298:	f7ff ff1a 	bl	80010d0 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x21, 0x10); // DUR ~ 6.25ms
 800129c:	2110      	movs	r1, #16
 800129e:	2021      	movs	r0, #33	@ 0x21
 80012a0:	f7ff ff16 	bl	80010d0 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x2A, 0x07); // TAP_AXES: X,Y,Z
 80012a4:	2107      	movs	r1, #7
 80012a6:	202a      	movs	r0, #42	@ 0x2a
 80012a8:	f7ff ff12 	bl	80010d0 <ADXL345_WriteReg>

	// --- Настройка прерываний ---
	ADXL345_WriteReg(0x2E, 0x40); // INT_ENABLE: bit6=SingleTap
 80012ac:	2140      	movs	r1, #64	@ 0x40
 80012ae:	202e      	movs	r0, #46	@ 0x2e
 80012b0:	f7ff ff0e 	bl	80010d0 <ADXL345_WriteReg>
	ADXL345_WriteReg(0x2F, 0x00); // INT_MAP: SingleTap → INT1
 80012b4:	2100      	movs	r1, #0
 80012b6:	202f      	movs	r0, #47	@ 0x2f
 80012b8:	f7ff ff0a 	bl	80010d0 <ADXL345_WriteReg>

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <ADXL345_ReadID>:
#define IMPACT_THRESHOLD_G 6.0f     // порог в g (пример: 6g — подбери экспериментально)
#define IMPACT_DEBOUNCE_MS 200      // окно, в течение которого игнорируем новые пики (ms)
#define SAMPLE_PERIOD_MS 10          // период опроса в ms (зависит от BW_RATE)

//Получение ID устройства, должно вывести 0xE5 (проверка устройства)
uint8_t ADXL345_ReadID() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
    uint8_t tx[2] = {0x80 | 0x00, 0x00}; // запрос регистра 0x00
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	80bb      	strh	r3, [r7, #4]
    uint8_t rx[2] = {0};
 80012ca:	2300      	movs	r3, #0
 80012cc:	803b      	strh	r3, [r7, #0]
    ADXL345_CS_Select();
 80012ce:	f7ff fee7 	bl	80010a0 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 2, HAL_MAX_DELAY);
 80012d2:	463a      	mov	r2, r7
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <ADXL345_ReadID+0x34>)
 80012e0:	f002 fe85 	bl	8003fee <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 80012e4:	f7ff fee8 	bl	80010b8 <ADXL345_CS_Deselect>
    return rx[1]; // второй байт = ответ
 80012e8:	787b      	ldrb	r3, [r7, #1]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002d4 	.word	0x200002d4

080012f8 <HAL_GPIO_EXTI_Callback>:
//           gx, gy, gz, ax_ms2, ay_ms2, az_ms2, peaks.max_g_x, peaks.max_g_y, peaks.max_g_z);
//    HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b0a4      	sub	sp, #144	@ 0x90
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	int16_t rx, ry, rz;
	char message[128];

	strcpy(message, "HAL_GPIO_EXTI_Callback");
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_GPIO_EXTI_Callback+0x78>)
 8001308:	461c      	mov	r4, r3
 800130a:	4615      	mov	r5, r2
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001314:	6020      	str	r0, [r4, #0]
 8001316:	3404      	adds	r4, #4
 8001318:	8021      	strh	r1, [r4, #0]
 800131a:	3402      	adds	r4, #2
 800131c:	0c0b      	lsrs	r3, r1, #16
 800131e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff13 	bl	8000150 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f107 010c 	add.w	r1, r7, #12
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001336:	480f      	ldr	r0, [pc, #60]	@ (8001374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001338:	f003 ff96 	bl	8005268 <HAL_UART_Transmit>
	if (GPIO_Pin == GPIO_PIN_0) {
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d111      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x6e>
        // Чтение INT_SOURCE для сброса флага
        uint8_t src = ADXL_ReadReg(0x30);
 8001342:	2030      	movs	r0, #48	@ 0x30
 8001344:	f7ff ff30 	bl	80011a8 <ADXL_ReadReg>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (src & 0x40) { // bit6 = SINGLE_TAP
 800134e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_EXTI_Callback+0x6e>
        	recording = 1;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <HAL_GPIO_EXTI_Callback+0x80>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
            sample_index = 0;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_GPIO_EXTI_Callback+0x84>)
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8001366:	bf00      	nop
 8001368:	3790      	adds	r7, #144	@ 0x90
 800136a:	46bd      	mov	sp, r7
 800136c:	bdb0      	pop	{r4, r5, r7, pc}
 800136e:	bf00      	nop
 8001370:	08008da8 	.word	0x08008da8
 8001374:	20000440 	.word	0x20000440
 8001378:	20000488 	.word	0x20000488
 800137c:	2000048a 	.word	0x2000048a

08001380 <HAL_TIM_PeriodElapsedCallback>:

// --- таймер для дискретизации ---
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b0d4      	sub	sp, #336	@ 0x150
 8001384:	af04      	add	r7, sp, #16
 8001386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800138a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800138e:	6018      	str	r0, [r3, #0]
    char message[128];
    char message_display[128];

	if (htim->Instance == TIM2) {
 8001390:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001394:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a0:	f040 815f 	bne.w	8001662 <HAL_TIM_PeriodElapsedCallback+0x2e2>
        if (recording && sample_index < SAMPLE_COUNT) {
 80013a4:	4bb1      	ldr	r3, [pc, #708]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8159 	beq.w	8001662 <HAL_TIM_PeriodElapsedCallback+0x2e2>
 80013b0:	4baf      	ldr	r3, [pc, #700]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2bff      	cmp	r3, #255	@ 0xff
 80013b8:	f200 8153 	bhi.w	8001662 <HAL_TIM_PeriodElapsedCallback+0x2e2>
            int16_t x, y, z;
            ADXL345_ReadAxes(&x, &y, &z);
 80013bc:	f107 020e 	add.w	r2, r7, #14
 80013c0:	f107 0110 	add.w	r1, r7, #16
 80013c4:	f107 0312 	add.w	r3, r7, #18
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fea3 	bl	8001114 <ADXL345_ReadAxes>
            // Преобразование raw -> g -> m/s^2
			float gx = (float)x * ADXL_SCALE_G;
 80013ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fd12 	bl	8000e04 <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	49a4      	ldr	r1, [pc, #656]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe febb 	bl	8000160 <__aeabi_fmul>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			float gy = (float)y * ADXL_SCALE_G;
 80013f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd01 	bl	8000e04 <__aeabi_i2f>
 8001402:	4603      	mov	r3, r0
 8001404:	499b      	ldr	r1, [pc, #620]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe feaa 	bl	8000160 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			float gz = (float)z * ADXL_SCALE_G;
 8001412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001416:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fcf0 	bl	8000e04 <__aeabi_i2f>
 8001424:	4603      	mov	r3, r0
 8001426:	4993      	ldr	r1, [pc, #588]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fe99 	bl	8000160 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
			float abs_gx = fabsf(gx), abs_gy = fabsf(gy), abs_gz = fabsf(gz);
 8001434:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800143c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001448:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800144c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001454:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			float abs_g = sqrt(gx*gx + gy*gy + gz*gz);
 8001458:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800145c:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001460:	f7fe fe7e 	bl	8000160 <__aeabi_fmul>
 8001464:	4603      	mov	r3, r0
 8001466:	461c      	mov	r4, r3
 8001468:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800146c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001470:	f7fe fe76 	bl	8000160 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fc0f 	bl	8000c9c <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461c      	mov	r4, r3
 8001482:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001486:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800148a:	f7fe fe69 	bl	8000160 <__aeabi_fmul>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff fc02 	bl	8000c9c <__addsf3>
 8001498:	4603      	mov	r3, r0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f878 	bl	8000590 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f007 fb3a 	bl	8008b20 <sqrt>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb9c 	bl	8000bf0 <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
			float a_ms2 = abs_g * G_TO_MS2;
 80014be:	496e      	ldr	r1, [pc, #440]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014c0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80014c4:	f7fe fe4c 	bl	8000160 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

            samples[sample_index].g = abs_g;
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	4a69      	ldr	r2, [pc, #420]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014dc:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
            samples[sample_index].a = a_ms2;
 80014e0:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4a65      	ldr	r2, [pc, #404]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80014f0:	605a      	str	r2, [r3, #4]

            sample_index++;
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014fe:	801a      	strh	r2, [r3, #0]
            if (sample_index >= SAMPLE_COUNT) {
 8001500:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	f240 80ab 	bls.w	8001662 <HAL_TIM_PeriodElapsedCallback+0x2e2>
                recording = 0;
 800150c:	4b57      	ldr	r3, [pc, #348]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
                sprintf(message, "Recording finished!\r\n");
 8001512:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001516:	495a      	ldr	r1, [pc, #360]	@ (8001680 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001518:	4618      	mov	r0, r3
 800151a:	f005 f987 	bl	800682c <siprintf>
                HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800151e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fe14 	bl	8000150 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001534:	4853      	ldr	r0, [pc, #332]	@ (8001684 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001536:	f003 fe97 	bl	8005268 <HAL_UART_Transmit>
                // выводим в UART для графика
                float g_max, a_max = 0.0;
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                for (int i = 0; i < SAMPLE_COUNT; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001548:	e02e      	b.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x228>
                    if (samples[i].g > g_max)
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800154c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001550:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001554:	4619      	mov	r1, r3
 8001556:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800155a:	f7ff fcf5 	bl	8000f48 <__aeabi_fcmplt>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x1f2>
                    	g_max = samples[i].g;
 8001564:	4a45      	ldr	r2, [pc, #276]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001566:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800156a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800156e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    if (samples[i].a > a_max)
 8001572:	4a42      	ldr	r2, [pc, #264]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001574:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4619      	mov	r1, r3
 8001580:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001584:	f7ff fce0 	bl	8000f48 <__aeabi_fcmplt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_TIM_PeriodElapsedCallback+0x21e>
                    	a_max = samples[i].a;
 800158e:	4a3b      	ldr	r2, [pc, #236]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001590:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                for (int i = 0; i < SAMPLE_COUNT; i++) {
 800159e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80015a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80015ac:	2bff      	cmp	r3, #255	@ 0xff
 80015ae:	ddcc      	ble.n	800154a <HAL_TIM_PeriodElapsedCallback+0x1ca>
                }
                sprintf(message, "%.2f g, %.2f m/s2\r\n", g_max, a_max);
 80015b0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80015b4:	f7fe ffec 	bl	8000590 <__aeabi_f2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80015c0:	f7fe ffe6 	bl	8000590 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80015cc:	e9cd 2300 	strd	r2, r3, [sp]
 80015d0:	4622      	mov	r2, r4
 80015d2:	462b      	mov	r3, r5
 80015d4:	492c      	ldr	r1, [pc, #176]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015d6:	f005 f929 	bl	800682c <siprintf>
                HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80015da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdb6 	bl	8000150 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f0:	4824      	ldr	r0, [pc, #144]	@ (8001684 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015f2:	f003 fe39 	bl	8005268 <HAL_UART_Transmit>
                sprintf(message_display, "%.2f g", abs_g);
 80015f6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80015fa:	f7fe ffc9 	bl	8000590 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	f107 0014 	add.w	r0, r7, #20
 8001606:	4921      	ldr	r1, [pc, #132]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001608:	f005 f910 	bl	800682c <siprintf>
				ST7789_WriteString(20, 80, message_display, Font_16x26, GRED, BLACK);
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	2200      	movs	r2, #0
 8001614:	9202      	str	r2, [sp, #8]
 8001616:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800161a:	9201      	str	r2, [sp, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	460a      	mov	r2, r1
 8001624:	2150      	movs	r1, #80	@ 0x50
 8001626:	2014      	movs	r0, #20
 8001628:	f000 fc81 	bl	8001f2e <ST7789_WriteString>
				sprintf(message_display, "%.2fg m/s2", a_ms2);
 800162c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001630:	f7fe ffae 	bl	8000590 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	f107 0014 	add.w	r0, r7, #20
 800163c:	4915      	ldr	r1, [pc, #84]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800163e:	f005 f8f5 	bl	800682c <siprintf>
				ST7789_WriteString(20, 120, message_display, Font_16x26, GREEN, BLACK);
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001644:	f107 0114 	add.w	r1, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	9202      	str	r2, [sp, #8]
 800164c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	9200      	str	r2, [sp, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	460a      	mov	r2, r1
 800165a:	2178      	movs	r1, #120	@ 0x78
 800165c:	2014      	movs	r0, #20
 800165e:	f000 fc66 	bl	8001f2e <ST7789_WriteString>
            }
        }
    }
}
 8001662:	bf00      	nop
 8001664:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001668:	46bd      	mov	sp, r7
 800166a:	bdb0      	pop	{r4, r5, r7, pc}
 800166c:	20000488 	.word	0x20000488
 8001670:	2000048a 	.word	0x2000048a
 8001674:	3b7f9724 	.word	0x3b7f9724
 8001678:	411ce80a 	.word	0x411ce80a
 800167c:	2000048c 	.word	0x2000048c
 8001680:	08008dc0 	.word	0x08008dc0
 8001684:	20000440 	.word	0x20000440
 8001688:	08008dd8 	.word	0x08008dd8
 800168c:	08008d94 	.word	0x08008d94
 8001690:	20000000 	.word	0x20000000
 8001694:	08008d9c 	.word	0x08008d9c

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0c0      	sub	sp, #256	@ 0x100
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800169e:	f000 fed7 	bl	8002450 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 ffc9 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f831 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f000 f985 	bl	80019b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ae:	f000 f955 	bl	800195c <MX_DMA_Init>
  MX_SPI1_Init();
 80016b2:	f000 f871 	bl	8001798 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016b6:	f000 f8a5 	bl	8001804 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80016ba:	f000 f925 	bl	8001908 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016be:	f000 f8d7 	bl	8001870 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016c2:	480f      	ldr	r0, [pc, #60]	@ (8001700 <main+0x68>)
 80016c4:	f003 f9de 	bl	8004a84 <HAL_TIM_Base_Start_IT>
  ADXL345_Init();
 80016c8:	f7ff fdc6 	bl	8001258 <ADXL345_Init>
  //init display
  ST7789_Init();
 80016cc:	f000 faec 	bl	8001ca8 <ST7789_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2108      	movs	r1, #8
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <main+0x6c>)
 80016d6:	f001 fd69 	bl	80031ac <HAL_GPIO_WritePin>
  ST7789_Fill_Color(BLACK);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 fb8a 	bl	8001df4 <ST7789_Fill_Color>

  // Быстрый тест: прочитать ID
  uint8_t id = ADXL345_ReadID();
 80016e0:	f7ff fdee 	bl	80012c0 <ADXL345_ReadID>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
  //sprintf(message, "ADXL345 ID = 0x%02X", id);
  //HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
  //ST7789_WriteString(20, 20, message, Font_11x18, GBLUE, BLACK);
  trace_printf("ADXL345 ID = 0x%02X\n", id);
 80016ea:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <main+0x70>)
 80016f2:	f7ff fc51 	bl	8000f98 <trace_printf>

  ADXL_TestLoop();
 80016f6:	f7ff fd89 	bl	800120c <ADXL_TestLoop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80016fa:	bf00      	nop
 80016fc:	e7fd      	b.n	80016fa <main+0x62>
 80016fe:	bf00      	nop
 8001700:	200003f8 	.word	0x200003f8
 8001704:	40010800 	.word	0x40010800
 8001708:	08008dec 	.word	0x08008dec

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b090      	sub	sp, #64	@ 0x40
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	2228      	movs	r2, #40	@ 0x28
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f005 f928 	bl	8006970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800174a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fd59 	bl	800320c <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001760:	f000 f9a0 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f001 ffc6 	bl	8003710 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800178a:	f000 f98b 	bl	8001aa4 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3740      	adds	r7, #64	@ 0x40
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_SPI1_Init+0x64>)
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <MX_SPI1_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017be:	2201      	movs	r2, #1
 80017c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017cc:	2210      	movs	r2, #16
 80017ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017e4:	220a      	movs	r2, #10
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_SPI1_Init+0x64>)
 80017ea:	f002 f91f 	bl	8003a2c <HAL_SPI_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f4:	f000 f956 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000027c 	.word	0x2000027c
 8001800:	40013000 	.word	0x40013000

08001804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <MX_SPI2_Init+0x64>)
 800180a:	4a18      	ldr	r2, [pc, #96]	@ (800186c <MX_SPI2_Init+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <MX_SPI2_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001824:	2202      	movs	r2, #2
 8001826:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <MX_SPI2_Init+0x64>)
 800182a:	2201      	movs	r2, #1
 800182c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001834:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <MX_SPI2_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <MX_SPI2_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001850:	220a      	movs	r2, #10
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_SPI2_Init+0x64>)
 8001856:	f002 f8e9 	bl	8003a2c <HAL_SPI_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001860:	f000 f920 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002d4 	.word	0x200002d4
 800186c:	40003800 	.word	0x40003800

08001870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_TIM2_Init+0x94>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <MX_TIM2_Init+0x94>)
 8001896:	2247      	movs	r2, #71	@ 0x47
 8001898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <MX_TIM2_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1249;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018a2:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80018a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018b4:	4813      	ldr	r0, [pc, #76]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018b6:	f003 f896 	bl	80049e6 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018c0:	f000 f8f0 	bl	8001aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018d2:	f003 fa19 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018dc:	f000 f8e2 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_TIM2_Init+0x94>)
 80018ee:	f003 fbfb 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018f8:	f000 f8d4 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200003f8 	.word	0x200003f8

08001908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <MX_USART1_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USART1_UART_Init+0x4c>)
 8001940:	f003 fc42 	bl	80051c8 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f000 f8ab 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000440 	.word	0x20000440
 8001958:	40013800 	.word	0x40013800

0800195c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_DMA_Init+0x58>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <MX_DMA_Init+0x58>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_DMA_Init+0x58>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200d      	movs	r0, #13
 8001980:	f000 ffb7 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001984:	200d      	movs	r0, #13
 8001986:	f000 ffd0 	bl	800292a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	200e      	movs	r0, #14
 8001990:	f000 ffaf 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001994:	200e      	movs	r0, #14
 8001996:	f000 ffc8 	bl	800292a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	200f      	movs	r0, #15
 80019a0:	f000 ffa7 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019a4:	200f      	movs	r0, #15
 80019a6:	f000 ffc0 	bl	800292a <HAL_NVIC_EnableIRQ>

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a24      	ldr	r2, [pc, #144]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <MX_GPIO_Init+0xdc>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	210e      	movs	r1, #14
 8001a18:	481f      	ldr	r0, [pc, #124]	@ (8001a98 <MX_GPIO_Init+0xe0>)
 8001a1a:	f001 fbc7 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a24:	481d      	ldr	r0, [pc, #116]	@ (8001a9c <MX_GPIO_Init+0xe4>)
 8001a26:	f001 fbc1 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4816      	ldr	r0, [pc, #88]	@ (8001a98 <MX_GPIO_Init+0xe0>)
 8001a3e:	f001 fa31 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a42:	230e      	movs	r3, #14
 8001a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4619      	mov	r1, r3
 8001a58:	480f      	ldr	r0, [pc, #60]	@ (8001a98 <MX_GPIO_Init+0xe0>)
 8001a5a:	f001 fa23 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <MX_GPIO_Init+0xe4>)
 8001a78:	f001 fa14 	bl	8002ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2006      	movs	r0, #6
 8001a82:	f000 ff36 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a86:	2006      	movs	r0, #6
 8001a88:	f000 ff4f 	bl	800292a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	10110000 	.word	0x10110000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001aba:	bf00      	nop
	ST7789_DC_Clr();
 8001abc:	2200      	movs	r2, #0
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <ST7789_WriteCommand+0x30>)
 8001ac2:	f001 fb73 	bl	80031ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001ac6:	1df9      	adds	r1, r7, #7
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001acc:	2201      	movs	r2, #1
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <ST7789_WriteCommand+0x34>)
 8001ad0:	f002 f830 	bl	8003b34 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001ad4:	bf00      	nop
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	2000027c 	.word	0x2000027c

08001ae8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001af2:	bf00      	nop
	ST7789_DC_Set();
 8001af4:	2201      	movs	r2, #1
 8001af6:	2104      	movs	r1, #4
 8001af8:	481b      	ldr	r0, [pc, #108]	@ (8001b68 <ST7789_WriteData+0x80>)
 8001afa:	f001 fb57 	bl	80031ac <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001afe:	e02a      	b.n	8001b56 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b06:	4293      	cmp	r3, r2
 8001b08:	bf28      	it	cs
 8001b0a:	4613      	movcs	r3, r2
 8001b0c:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <ST7789_WriteData+0x84>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d30e      	bcc.n	8001b38 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <ST7789_WriteData+0x88>)
 8001b22:	f002 fc0d 	bl	8004340 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001b26:	bf00      	nop
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <ST7789_WriteData+0x88>)
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d1f8      	bne.n	8001b28 <ST7789_WriteData+0x40>
 8001b36:	e006      	b.n	8001b46 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001b38:	89fa      	ldrh	r2, [r7, #14]
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <ST7789_WriteData+0x88>)
 8001b42:	f001 fff7 	bl	8003b34 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1d1      	bne.n	8001b00 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 8001b5c:	bf00      	nop
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	2000027c 	.word	0x2000027c

08001b74 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001b7e:	bf00      	nop
	ST7789_DC_Set();
 8001b80:	2201      	movs	r2, #1
 8001b82:	2104      	movs	r1, #4
 8001b84:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <ST7789_WriteSmallData+0x30>)
 8001b86:	f001 fb11 	bl	80031ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001b8a:	1df9      	adds	r1, r7, #7
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b90:	2201      	movs	r2, #1
 8001b92:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <ST7789_WriteSmallData+0x34>)
 8001b94:	f001 ffce 	bl	8003b34 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001b98:	bf00      	nop
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40010800 	.word	0x40010800
 8001ba8:	2000027c 	.word	0x2000027c

08001bac <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001bb6:	2036      	movs	r0, #54	@ 0x36
 8001bb8:	f7ff ff7a 	bl	8001ab0 <ST7789_WriteCommand>
	switch (m) {
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d81a      	bhi.n	8001bf8 <ST7789_SetRotation+0x4c>
 8001bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <ST7789_SetRotation+0x1c>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001be1 	.word	0x08001be1
 8001bd0:	08001be9 	.word	0x08001be9
 8001bd4:	08001bf1 	.word	0x08001bf1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001bd8:	20c0      	movs	r0, #192	@ 0xc0
 8001bda:	f7ff ffcb 	bl	8001b74 <ST7789_WriteSmallData>
		break;
 8001bde:	e00c      	b.n	8001bfa <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001be0:	20a0      	movs	r0, #160	@ 0xa0
 8001be2:	f7ff ffc7 	bl	8001b74 <ST7789_WriteSmallData>
		break;
 8001be6:	e008      	b.n	8001bfa <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ffc3 	bl	8001b74 <ST7789_WriteSmallData>
		break;
 8001bee:	e004      	b.n	8001bfa <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001bf0:	2060      	movs	r0, #96	@ 0x60
 8001bf2:	f7ff ffbf 	bl	8001b74 <ST7789_WriteSmallData>
		break;
 8001bf6:	e000      	b.n	8001bfa <ST7789_SetRotation+0x4e>
	default:
		break;
 8001bf8:	bf00      	nop
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop

08001c04 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	80fb      	strh	r3, [r7, #6]
 8001c16:	4603      	mov	r3, r0
 8001c18:	80bb      	strh	r3, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001c22:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	82fb      	strh	r3, [r7, #22]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001c2c:	88bb      	ldrh	r3, [r7, #4]
 8001c2e:	827b      	strh	r3, [r7, #18]
 8001c30:	883b      	ldrh	r3, [r7, #0]
 8001c32:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001c34:	202a      	movs	r0, #42	@ 0x2a
 8001c36:	f7ff ff3b 	bl	8001ab0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001c3a:	8afb      	ldrh	r3, [r7, #22]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	733b      	strb	r3, [r7, #12]
 8001c44:	8afb      	ldrh	r3, [r7, #22]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	737b      	strb	r3, [r7, #13]
 8001c4a:	8abb      	ldrh	r3, [r7, #20]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]
 8001c54:	8abb      	ldrh	r3, [r7, #20]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	2104      	movs	r1, #4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff41 	bl	8001ae8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001c66:	202b      	movs	r0, #43	@ 0x2b
 8001c68:	f7ff ff22 	bl	8001ab0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001c6c:	8a7b      	ldrh	r3, [r7, #18]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	723b      	strb	r3, [r7, #8]
 8001c76:	8a7b      	ldrh	r3, [r7, #18]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	727b      	strb	r3, [r7, #9]
 8001c7c:	8a3b      	ldrh	r3, [r7, #16]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	72bb      	strb	r3, [r7, #10]
 8001c86:	8a3b      	ldrh	r3, [r7, #16]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	2104      	movs	r1, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff28 	bl	8001ae8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001c98:	202c      	movs	r0, #44	@ 0x2c
 8001c9a:	f7ff ff09 	bl	8001ab0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001c9e:	bf00      	nop
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}

08001ca8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b08b      	sub	sp, #44	@ 0x2c
 8001cac:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8001cae:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	484a      	ldr	r0, [pc, #296]	@ (8001de0 <ST7789_Init+0x138>)
 8001cb6:	f004 fe5b 	bl	8006970 <memset>
	#endif
	HAL_Delay(10);
 8001cba:	200a      	movs	r0, #10
 8001cbc:	f000 fd1e 	bl	80026fc <HAL_Delay>
    ST7789_RST_Clr();
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4847      	ldr	r0, [pc, #284]	@ (8001de4 <ST7789_Init+0x13c>)
 8001cc6:	f001 fa71 	bl	80031ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f000 fd16 	bl	80026fc <HAL_Delay>
    ST7789_RST_Set();
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4843      	ldr	r0, [pc, #268]	@ (8001de4 <ST7789_Init+0x13c>)
 8001cd6:	f001 fa69 	bl	80031ac <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001cda:	2014      	movs	r0, #20
 8001cdc:	f000 fd0e 	bl	80026fc <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001ce0:	203a      	movs	r0, #58	@ 0x3a
 8001ce2:	f7ff fee5 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001ce6:	2055      	movs	r0, #85	@ 0x55
 8001ce8:	f7ff ff44 	bl	8001b74 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001cec:	20b2      	movs	r0, #178	@ 0xb2
 8001cee:	f7ff fedf 	bl	8001ab0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8001de8 <ST7789_Init+0x140>)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfc:	6018      	str	r0, [r3, #0]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2105      	movs	r1, #5
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff feed 	bl	8001ae8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7ff ff4c 	bl	8001bac <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001d14:	20b7      	movs	r0, #183	@ 0xb7
 8001d16:	f7ff fecb 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001d1a:	2035      	movs	r0, #53	@ 0x35
 8001d1c:	f7ff ff2a 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001d20:	20bb      	movs	r0, #187	@ 0xbb
 8001d22:	f7ff fec5 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001d26:	2019      	movs	r0, #25
 8001d28:	f7ff ff24 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001d2c:	20c0      	movs	r0, #192	@ 0xc0
 8001d2e:	f7ff febf 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001d32:	202c      	movs	r0, #44	@ 0x2c
 8001d34:	f7ff ff1e 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001d38:	20c2      	movs	r0, #194	@ 0xc2
 8001d3a:	f7ff feb9 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff ff18 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001d44:	20c3      	movs	r0, #195	@ 0xc3
 8001d46:	f7ff feb3 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001d4a:	2012      	movs	r0, #18
 8001d4c:	f7ff ff12 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001d50:	20c4      	movs	r0, #196	@ 0xc4
 8001d52:	f7ff fead 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001d56:	2020      	movs	r0, #32
 8001d58:	f7ff ff0c 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001d5c:	20c6      	movs	r0, #198	@ 0xc6
 8001d5e:	f7ff fea7 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001d62:	200f      	movs	r0, #15
 8001d64:	f7ff ff06 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001d68:	20d0      	movs	r0, #208	@ 0xd0
 8001d6a:	f7ff fea1 	bl	8001ab0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001d6e:	20a4      	movs	r0, #164	@ 0xa4
 8001d70:	f7ff ff00 	bl	8001b74 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001d74:	20a1      	movs	r0, #161	@ 0xa1
 8001d76:	f7ff fefd 	bl	8001b74 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001d7a:	20e0      	movs	r0, #224	@ 0xe0
 8001d7c:	f7ff fe98 	bl	8001ab0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <ST7789_Init+0x144>)
 8001d82:	f107 0410 	add.w	r4, r7, #16
 8001d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d88:	c407      	stmia	r4!, {r0, r1, r2}
 8001d8a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	210e      	movs	r1, #14
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fea8 	bl	8001ae8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001d98:	20e1      	movs	r0, #225	@ 0xe1
 8001d9a:	f7ff fe89 	bl	8001ab0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001d9e:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <ST7789_Init+0x148>)
 8001da0:	463c      	mov	r4, r7
 8001da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da4:	c407      	stmia	r4!, {r0, r1, r2}
 8001da6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001da8:	463b      	mov	r3, r7
 8001daa:	210e      	movs	r1, #14
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe9b 	bl	8001ae8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001db2:	2021      	movs	r0, #33	@ 0x21
 8001db4:	f7ff fe7c 	bl	8001ab0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001db8:	2011      	movs	r0, #17
 8001dba:	f7ff fe79 	bl	8001ab0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001dbe:	2013      	movs	r0, #19
 8001dc0:	f7ff fe76 	bl	8001ab0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001dc4:	2029      	movs	r0, #41	@ 0x29
 8001dc6:	f7ff fe73 	bl	8001ab0 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001dca:	2032      	movs	r0, #50	@ 0x32
 8001dcc:	f000 fc96 	bl	80026fc <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f000 f80f 	bl	8001df4 <ST7789_Fill_Color>
}
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	@ 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000c8c 	.word	0x20000c8c
 8001de4:	40010800 	.word	0x40010800
 8001de8:	08008e04 	.word	0x08008e04
 8001dec:	08008e0c 	.word	0x08008e0c
 8001df0:	08008e1c 	.word	0x08008e1c

08001df4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001dfe:	f240 133f 	movw	r3, #319	@ 0x13f
 8001e02:	22ef      	movs	r2, #239	@ 0xef
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fefc 	bl	8001c04 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001e0c:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	81fb      	strh	r3, [r7, #14]
 8001e12:	e00e      	b.n	8001e32 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <ST7789_Fill_Color+0x50>)
 8001e1e:	f004 fda7 	bl	8006970 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001e22:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <ST7789_Fill_Color+0x50>)
 8001e28:	f7ff fe5e 	bl	8001ae8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	81fb      	strh	r3, [r7, #14]
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e36:	d9ed      	bls.n	8001e14 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001e38:	bf00      	nop
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000c8c 	.word	0x20000c8c

08001e48 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e48:	b082      	sub	sp, #8
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
 8001e56:	460b      	mov	r3, r1
 8001e58:	80bb      	strh	r3, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001e5e:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e64:	461a      	mov	r2, r3
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e74:	4619      	mov	r1, r3
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	440b      	add	r3, r1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	88b9      	ldrh	r1, [r7, #4]
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	f7ff febe 	bl	8001c04 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	e041      	b.n	8001f12 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8001e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	3b20      	subs	r3, #32
 8001e94:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	e027      	b.n	8001f00 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00e      	beq.n	8001ede <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001ec0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	743b      	strb	r3, [r7, #16]
 8001eca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fe06 	bl	8001ae8 <ST7789_WriteData>
 8001edc:	e00d      	b.n	8001efa <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001ede:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	733b      	strb	r3, [r7, #12]
 8001ee8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fdf7 	bl	8001ae8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f04:	461a      	mov	r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d3d1      	bcc.n	8001eb0 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f16:	461a      	mov	r2, r3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d3b7      	bcc.n	8001e8e <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8001f1e:	bf00      	nop
}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f2a:	b002      	add	sp, #8
 8001f2c:	4770      	bx	lr

08001f2e <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f2e:	b082      	sub	sp, #8
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	603a      	str	r2, [r7, #0]
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001f42:	bf00      	nop
	while (*str) {
 8001f44:	e02e      	b.n	8001fa4 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	7d3a      	ldrb	r2, [r7, #20]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2bef      	cmp	r3, #239	@ 0xef
 8001f4e:	dd14      	ble.n	8001f7a <ST7789_WriteString+0x4c>
			x = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001f54:	7d7b      	ldrb	r3, [r7, #21]
 8001f56:	461a      	mov	r2, r3
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001f5e:	88bb      	ldrh	r3, [r7, #4]
 8001f60:	7d7a      	ldrb	r2, [r7, #21]
 8001f62:	4413      	add	r3, r2
 8001f64:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f68:	da21      	bge.n	8001fae <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d103      	bne.n	8001f7a <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	603b      	str	r3, [r7, #0]
				continue;
 8001f78:	e014      	b.n	8001fa4 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	88b9      	ldrh	r1, [r7, #4]
 8001f80:	88f8      	ldrh	r0, [r7, #6]
 8001f82:	8c3b      	ldrh	r3, [r7, #32]
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	8bbb      	ldrh	r3, [r7, #28]
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f7ff ff5a 	bl	8001e48 <ST7789_WriteChar>
		x += font.width;
 8001f94:	7d3b      	ldrb	r3, [r7, #20]
 8001f96:	461a      	mov	r2, r3
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
		str++;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1cc      	bne.n	8001f46 <ST7789_WriteString+0x18>
 8001fac:	e000      	b.n	8001fb0 <ST7789_WriteString+0x82>
				break;
 8001fae:	bf00      	nop
	}
	ST7789_UnSelect();
 8001fb0:	bf00      	nop
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_MspInit+0x5c>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_MspInit+0x5c>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6193      	str	r3, [r2, #24]
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_MspInit+0x5c>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_MspInit+0x5c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <HAL_MspInit+0x5c>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <HAL_MspInit+0x5c>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_MspInit+0x60>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_MspInit+0x60>)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000

08002024 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a73      	ldr	r2, [pc, #460]	@ (800220c <HAL_SPI_MspInit+0x1e8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d152      	bne.n	80020ea <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002044:	4b72      	ldr	r3, [pc, #456]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a71      	ldr	r2, [pc, #452]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 800204a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b6f      	ldr	r3, [pc, #444]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a6b      	ldr	r2, [pc, #428]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b69      	ldr	r3, [pc, #420]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002074:	23a0      	movs	r3, #160	@ 0xa0
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	4619      	mov	r1, r3
 8002086:	4863      	ldr	r0, [pc, #396]	@ (8002214 <HAL_SPI_MspInit+0x1f0>)
 8002088:	f000 ff0c 	bl	8002ea4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800208c:	4b62      	ldr	r3, [pc, #392]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 800208e:	4a63      	ldr	r2, [pc, #396]	@ (800221c <HAL_SPI_MspInit+0x1f8>)
 8002090:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002092:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 8002094:	2210      	movs	r2, #16
 8002096:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b5e      	ldr	r3, [pc, #376]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b6:	4b58      	ldr	r3, [pc, #352]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020bc:	4856      	ldr	r0, [pc, #344]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020be:	f000 fc4f 	bl	8002960 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80020c8:	f7ff fcec 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020d0:	649a      	str	r2, [r3, #72]	@ 0x48
 80020d2:	4a51      	ldr	r2, [pc, #324]	@ (8002218 <HAL_SPI_MspInit+0x1f4>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2023      	movs	r0, #35	@ 0x23
 80020de:	f000 fc08 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020e2:	2023      	movs	r0, #35	@ 0x23
 80020e4:	f000 fc21 	bl	800292a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020e8:	e08b      	b.n	8002202 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002220 <HAL_SPI_MspInit+0x1fc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f040 8086 	bne.w	8002202 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020f6:	4b46      	ldr	r3, [pc, #280]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a45      	ldr	r2, [pc, #276]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b40      	ldr	r3, [pc, #256]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a3f      	ldr	r2, [pc, #252]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <HAL_SPI_MspInit+0x1ec>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002126:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	4619      	mov	r1, r3
 800213a:	483a      	ldr	r0, [pc, #232]	@ (8002224 <HAL_SPI_MspInit+0x200>)
 800213c:	f000 feb2 	bl	8002ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002140:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4619      	mov	r1, r3
 8002154:	4833      	ldr	r0, [pc, #204]	@ (8002224 <HAL_SPI_MspInit+0x200>)
 8002156:	f000 fea5 	bl	8002ea4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 800215c:	4a33      	ldr	r2, [pc, #204]	@ (800222c <HAL_SPI_MspInit+0x208>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800217e:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002184:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800218a:	4827      	ldr	r0, [pc, #156]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 800218c:	f000 fbe8 	bl	8002960 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_SPI_MspInit+0x176>
      Error_Handler();
 8002196:	f7ff fc85 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 800219e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021a0:	4a21      	ldr	r2, [pc, #132]	@ (8002228 <HAL_SPI_MspInit+0x204>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80021a6:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021a8:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <HAL_SPI_MspInit+0x210>)
 80021aa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021ae:	2210      	movs	r2, #16
 80021b0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80021d6:	4816      	ldr	r0, [pc, #88]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021d8:	f000 fbc2 	bl	8002960 <HAL_DMA_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_SPI_MspInit+0x1c2>
      Error_Handler();
 80021e2:	f7ff fc5f 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021ea:	649a      	str	r2, [r3, #72]	@ 0x48
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_SPI_MspInit+0x20c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2024      	movs	r0, #36	@ 0x24
 80021f8:	f000 fb7b 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80021fc:	2024      	movs	r0, #36	@ 0x24
 80021fe:	f000 fb94 	bl	800292a <HAL_NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40013000 	.word	0x40013000
 8002210:	40021000 	.word	0x40021000
 8002214:	40010800 	.word	0x40010800
 8002218:	2000032c 	.word	0x2000032c
 800221c:	40020030 	.word	0x40020030
 8002220:	40003800 	.word	0x40003800
 8002224:	40010c00 	.word	0x40010c00
 8002228:	20000370 	.word	0x20000370
 800222c:	40020044 	.word	0x40020044
 8002230:	200003b4 	.word	0x200003b4
 8002234:	40020058 	.word	0x40020058

08002238 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d113      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224a:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <HAL_TIM_Base_MspInit+0x44>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a0b      	ldr	r2, [pc, #44]	@ (800227c <HAL_TIM_Base_MspInit+0x44>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_TIM_Base_MspInit+0x44>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	201c      	movs	r0, #28
 8002268:	f000 fb43 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800226c:	201c      	movs	r0, #28
 800226e:	f000 fb5c 	bl	800292a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a20      	ldr	r2, [pc, #128]	@ (800231c <HAL_UART_MspInit+0x9c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d139      	bne.n	8002314 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_UART_MspInit+0xa0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4619      	mov	r1, r3
 80022e4:	480f      	ldr	r0, [pc, #60]	@ (8002324 <HAL_UART_MspInit+0xa4>)
 80022e6:	f000 fddd 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	4619      	mov	r1, r3
 80022fe:	4809      	ldr	r0, [pc, #36]	@ (8002324 <HAL_UART_MspInit+0xa4>)
 8002300:	f000 fdd0 	bl	8002ea4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2025      	movs	r0, #37	@ 0x25
 800230a:	f000 faf2 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800230e:	2025      	movs	r0, #37	@ 0x25
 8002310:	f000 fb0b 	bl	800292a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40013800 	.word	0x40013800
 8002320:	40021000 	.word	0x40021000
 8002324:	40010800 	.word	0x40010800

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <NMI_Handler+0x4>

08002330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <MemManage_Handler+0x4>

08002340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <UsageFault_Handler+0x4>

08002350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002378:	f000 f9a4 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}

08002380 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0a0      	sub	sp, #128	@ 0x80
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	char message[128];

		strcpy(message, "here");
 8002386:	463b      	mov	r3, r7
 8002388:	4a0c      	ldr	r2, [pc, #48]	@ (80023bc <EXTI0_IRQHandler+0x3c>)
 800238a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238e:	6018      	str	r0, [r3, #0]
 8002390:	3304      	adds	r3, #4
 8002392:	7019      	strb	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8002394:	463b      	mov	r3, r7
 8002396:	4618      	mov	r0, r3
 8002398:	f7fd feda 	bl	8000150 <strlen>
 800239c:	4603      	mov	r3, r0
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4639      	mov	r1, r7
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023a6:	4806      	ldr	r0, [pc, #24]	@ (80023c0 <EXTI0_IRQHandler+0x40>)
 80023a8:	f002 ff5e 	bl	8005268 <HAL_UART_Transmit>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 ff15 	bl	80031dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	3780      	adds	r7, #128	@ 0x80
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	08008e9c 	.word	0x08008e9c
 80023c0:	20000440 	.word	0x20000440

080023c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <DMA1_Channel3_IRQHandler+0x10>)
 80023ca:	f000 fc37 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000032c 	.word	0x2000032c

080023d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <DMA1_Channel4_IRQHandler+0x10>)
 80023de:	f000 fc2d 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000370 	.word	0x20000370

080023ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <DMA1_Channel5_IRQHandler+0x10>)
 80023f2:	f000 fc23 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200003b4 	.word	0x200003b4

08002400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <TIM2_IRQHandler+0x10>)
 8002406:	f002 fb8f 	bl	8004b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200003f8 	.word	0x200003f8

08002414 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <SPI1_IRQHandler+0x10>)
 800241a:	f002 f843 	bl	80044a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000027c 	.word	0x2000027c

08002428 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <SPI2_IRQHandler+0x10>)
 800242e:	f002 f839 	bl	80044a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200002d4 	.word	0x200002d4

0800243c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <USART1_IRQHandler+0x10>)
 8002442:	f002 ff9d 	bl	8005380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000440 	.word	0x20000440

08002450 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <_getpid>:

int _getpid(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return 1;
 8002460:	2301      	movs	r3, #1
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <_kill>:

int _kill(int pid, int sig)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002474:	f004 face 	bl	8006a14 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	2216      	movs	r2, #22
 800247c:	601a      	str	r2, [r3, #0]
  return -1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_exit>:

void _exit (int status)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002492:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffe7 	bl	800246a <_kill>
  while (1) {}    /* Make sure we hang here */
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <_exit+0x12>

080024a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e00a      	b.n	80024c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b2:	f3af 8000 	nop.w
 80024b6:	4601      	mov	r1, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	60ba      	str	r2, [r7, #8]
 80024be:	b2ca      	uxtb	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf0      	blt.n	80024b2 <_read+0x12>
  }

  return len;
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e009      	b.n	8002500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf1      	blt.n	80024ec <_write+0x12>
  }
  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_close>:

int _close(int file)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002538:	605a      	str	r2, [r3, #4]
  return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
	...

08002574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800257c:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <_sbrk+0x5c>)
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <_sbrk+0x60>)
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002588:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <_sbrk+0x64>)
 8002592:	4a12      	ldr	r2, [pc, #72]	@ (80025dc <_sbrk+0x68>)
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d207      	bcs.n	80025b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a4:	f004 fa36 	bl	8006a14 <__errno>
 80025a8:	4603      	mov	r3, r0
 80025aa:	220c      	movs	r2, #12
 80025ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025b2:	e009      	b.n	80025c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <_sbrk+0x64>)
 80025c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20005000 	.word	0x20005000
 80025d4:	00000200 	.word	0x00000200
 80025d8:	200015ec 	.word	0x200015ec
 80025dc:	20001740 	.word	0x20001740

080025e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff fff8 	bl	80025e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	@ (8002620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025f2:	490c      	ldr	r1, [pc, #48]	@ (8002624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002608:	4c09      	ldr	r4, [pc, #36]	@ (8002630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f004 fa03 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7ff f83d 	bl	8001698 <main>
  bx lr
 800261e:	4770      	bx	lr
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002628:	0800a5b0 	.word	0x0800a5b0
  ldr r2, =_sbss
 800262c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002630:	20001740 	.word	0x20001740

08002634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_2_IRQHandler>
	...

08002638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_Init+0x28>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <HAL_Init+0x28>)
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 f947 	bl	80028dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	200f      	movs	r0, #15
 8002650:	f000 f808 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002654:	f7ff fcb4 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f95f 	bl	8002946 <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a0:	f000 f927 	bl	80028f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	@ (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	20000014 	.word	0x20000014
 80026c0:	20000010 	.word	0x20000010

080026c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_IncTick+0x1c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_IncTick+0x20>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a03      	ldr	r2, [pc, #12]	@ (80026e4 <HAL_IncTick+0x20>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000014 	.word	0x20000014
 80026e4:	200015f0 	.word	0x200015f0

080026e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b02      	ldr	r3, [pc, #8]	@ (80026f8 <HAL_GetTick+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	200015f0 	.word	0x200015f0

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff fff0 	bl	80026e8 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffe0 	bl	80026e8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000014 	.word	0x20000014

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4906      	ldr	r1, [pc, #24]	@ (80027dc <__NVIC_EnableIRQ+0x34>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	@ (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	@ (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a8:	d301      	bcc.n	80028ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00f      	b.n	80028ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <SysTick_Config+0x40>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b6:	210f      	movs	r1, #15
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028bc:	f7ff ff90 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <SysTick_Config+0x40>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <SysTick_Config+0x40>)
 80028c8:	2207      	movs	r2, #7
 80028ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e010 	.word	0xe000e010

080028dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff2d 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff42 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff90 	bl	8002834 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5f 	bl	80027e0 <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff35 	bl	80027a8 <__NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffa2 	bl	8002898 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e043      	b.n	80029fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <HAL_DMA_Init+0xa8>)
 800297e:	4413      	add	r3, r2
 8002980:	4a22      	ldr	r2, [pc, #136]	@ (8002a0c <HAL_DMA_Init+0xac>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1f      	ldr	r2, [pc, #124]	@ (8002a10 <HAL_DMA_Init+0xb0>)
 8002992:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	bffdfff8 	.word	0xbffdfff8
 8002a0c:	cccccccd 	.word	0xcccccccd
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Start_IT+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e04b      	b.n	8002acc <HAL_DMA_Start_IT+0xb8>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d13a      	bne.n	8002abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f9eb 	bl	8002e48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 020e 	orr.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e00f      	b.n	8002aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 020a 	orr.w	r2, r2, #10
 8002aaa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e005      	b.n	8002aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e020      	b.n	8002b40 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 020e 	bic.w	r2, r2, #14
 8002b0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d005      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e051      	b.n	8002c14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020e 	bic.w	r2, r2, #14
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <HAL_DMA_Abort_IT+0xd4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d029      	beq.n	8002bee <HAL_DMA_Abort_IT+0xa2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	@ (8002c24 <HAL_DMA_Abort_IT+0xd8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_Abort_IT+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <HAL_DMA_Abort_IT+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x98>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c2c <HAL_DMA_Abort_IT+0xe0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_Abort_IT+0x92>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <HAL_DMA_Abort_IT+0xe4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <HAL_DMA_Abort_IT+0xe8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <HAL_DMA_Abort_IT+0x86>
 8002bcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bd0:	e00e      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd6:	e00b      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bdc:	e008      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be2:	e005      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be8:	e002      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bea:	2310      	movs	r3, #16
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_DMA_Abort_IT+0xec>)
 8002bf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
    } 
  }
  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020008 	.word	0x40020008
 8002c24:	4002001c 	.word	0x4002001c
 8002c28:	40020030 	.word	0x40020030
 8002c2c:	40020044 	.word	0x40020044
 8002c30:	40020058 	.word	0x40020058
 8002c34:	4002006c 	.word	0x4002006c
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	2204      	movs	r2, #4
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d04f      	beq.n	8002d04 <HAL_DMA_IRQHandler+0xc8>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04a      	beq.n	8002d04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a66      	ldr	r2, [pc, #408]	@ (8002e2c <HAL_DMA_IRQHandler+0x1f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d029      	beq.n	8002cea <HAL_DMA_IRQHandler+0xae>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a65      	ldr	r2, [pc, #404]	@ (8002e30 <HAL_DMA_IRQHandler+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xaa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a63      	ldr	r2, [pc, #396]	@ (8002e34 <HAL_DMA_IRQHandler+0x1f8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0xa4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a62      	ldr	r2, [pc, #392]	@ (8002e38 <HAL_DMA_IRQHandler+0x1fc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d012      	beq.n	8002cda <HAL_DMA_IRQHandler+0x9e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a60      	ldr	r2, [pc, #384]	@ (8002e3c <HAL_DMA_IRQHandler+0x200>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x98>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e40 <HAL_DMA_IRQHandler+0x204>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_DMA_IRQHandler+0x92>
 8002cc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ccc:	e00e      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002cce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cd2:	e00b      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002cd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cd8:	e008      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002cda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cde:	e005      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ce4:	e002      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002ce6:	2340      	movs	r3, #64	@ 0x40
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_IRQHandler+0xb0>
 8002cea:	2304      	movs	r3, #4
 8002cec:	4a55      	ldr	r2, [pc, #340]	@ (8002e44 <HAL_DMA_IRQHandler+0x208>)
 8002cee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8094 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d02:	e08e      	b.n	8002e22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	2202      	movs	r2, #2
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d056      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x186>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d051      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 020a 	bic.w	r2, r2, #10
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a38      	ldr	r2, [pc, #224]	@ (8002e2c <HAL_DMA_IRQHandler+0x1f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d029      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x166>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a37      	ldr	r2, [pc, #220]	@ (8002e30 <HAL_DMA_IRQHandler+0x1f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x162>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <HAL_DMA_IRQHandler+0x1f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x15c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_DMA_IRQHandler+0x1fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d012      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x156>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a32      	ldr	r2, [pc, #200]	@ (8002e3c <HAL_DMA_IRQHandler+0x200>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x150>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_DMA_IRQHandler+0x204>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x14a>
 8002d80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d84:	e00e      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d8a:	e00b      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d90:	e008      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d9c:	e002      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_IRQHandler+0x168>
 8002da2:	2302      	movs	r3, #2
 8002da4:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_DMA_IRQHandler+0x208>)
 8002da6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d034      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dc0:	e02f      	b.n	8002e22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x1e8>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d023      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 020e 	bic.w	r2, r2, #14
 8002dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    }
  }
  return;
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
}
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40020008 	.word	0x40020008
 8002e30:	4002001c 	.word	0x4002001c
 8002e34:	40020030 	.word	0x40020030
 8002e38:	40020044 	.word	0x40020044
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	4002006c 	.word	0x4002006c
 8002e44:	40020000 	.word	0x40020000

08002e48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d108      	bne.n	8002e88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e86:	e007      	b.n	8002e98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b08b      	sub	sp, #44	@ 0x2c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e169      	b.n	800318c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8158 	bne.w	8003186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a9a      	ldr	r2, [pc, #616]	@ (8003144 <HAL_GPIO_Init+0x2a0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d05e      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002ee0:	4a98      	ldr	r2, [pc, #608]	@ (8003144 <HAL_GPIO_Init+0x2a0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d875      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002ee6:	4a98      	ldr	r2, [pc, #608]	@ (8003148 <HAL_GPIO_Init+0x2a4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d058      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002eec:	4a96      	ldr	r2, [pc, #600]	@ (8003148 <HAL_GPIO_Init+0x2a4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d86f      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002ef2:	4a96      	ldr	r2, [pc, #600]	@ (800314c <HAL_GPIO_Init+0x2a8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d052      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002ef8:	4a94      	ldr	r2, [pc, #592]	@ (800314c <HAL_GPIO_Init+0x2a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d869      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002efe:	4a94      	ldr	r2, [pc, #592]	@ (8003150 <HAL_GPIO_Init+0x2ac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04c      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002f04:	4a92      	ldr	r2, [pc, #584]	@ (8003150 <HAL_GPIO_Init+0x2ac>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d863      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f0a:	4a92      	ldr	r2, [pc, #584]	@ (8003154 <HAL_GPIO_Init+0x2b0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d046      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002f10:	4a90      	ldr	r2, [pc, #576]	@ (8003154 <HAL_GPIO_Init+0x2b0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d85d      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f16:	2b12      	cmp	r3, #18
 8002f18:	d82a      	bhi.n	8002f70 <HAL_GPIO_Init+0xcc>
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d859      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <HAL_GPIO_Init+0x80>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f9f 	.word	0x08002f9f
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f8b 	.word	0x08002f8b
 8002f30:	08002fcd 	.word	0x08002fcd
 8002f34:	08002fd3 	.word	0x08002fd3
 8002f38:	08002fd3 	.word	0x08002fd3
 8002f3c:	08002fd3 	.word	0x08002fd3
 8002f40:	08002fd3 	.word	0x08002fd3
 8002f44:	08002fd3 	.word	0x08002fd3
 8002f48:	08002fd3 	.word	0x08002fd3
 8002f4c:	08002fd3 	.word	0x08002fd3
 8002f50:	08002fd3 	.word	0x08002fd3
 8002f54:	08002fd3 	.word	0x08002fd3
 8002f58:	08002fd3 	.word	0x08002fd3
 8002f5c:	08002fd3 	.word	0x08002fd3
 8002f60:	08002fd3 	.word	0x08002fd3
 8002f64:	08002fd3 	.word	0x08002fd3
 8002f68:	08002f81 	.word	0x08002f81
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	4a79      	ldr	r2, [pc, #484]	@ (8003158 <HAL_GPIO_Init+0x2b4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f76:	e02c      	b.n	8002fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	623b      	str	r3, [r7, #32]
          break;
 8002f7e:	e029      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	3304      	adds	r3, #4
 8002f86:	623b      	str	r3, [r7, #32]
          break;
 8002f88:	e024      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	3308      	adds	r3, #8
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e01f      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e01a      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e013      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	611a      	str	r2, [r3, #16]
          break;
 8002fbe:	e009      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	615a      	str	r2, [r3, #20]
          break;
 8002fca:	e003      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          break;
 8002fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2bff      	cmp	r3, #255	@ 0xff
 8002fd8:	d801      	bhi.n	8002fde <HAL_GPIO_Init+0x13a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	e001      	b.n	8002fe2 <HAL_GPIO_Init+0x13e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2bff      	cmp	r3, #255	@ 0xff
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_GPIO_Init+0x14c>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	e002      	b.n	8002ff6 <HAL_GPIO_Init+0x152>
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	401a      	ands	r2, r3
 8003008:	6a39      	ldr	r1, [r7, #32]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80b1 	beq.w	8003186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003024:	4b4d      	ldr	r3, [pc, #308]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4a4c      	ldr	r2, [pc, #304]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6193      	str	r3, [r2, #24]
 8003030:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_GPIO_Init+0x2bc>)
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	3302      	adds	r3, #2
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a40      	ldr	r2, [pc, #256]	@ (8003164 <HAL_GPIO_Init+0x2c0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_Init+0x1ec>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3f      	ldr	r2, [pc, #252]	@ (8003168 <HAL_GPIO_Init+0x2c4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00d      	beq.n	800308c <HAL_GPIO_Init+0x1e8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3e      	ldr	r2, [pc, #248]	@ (800316c <HAL_GPIO_Init+0x2c8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x1e4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3d      	ldr	r2, [pc, #244]	@ (8003170 <HAL_GPIO_Init+0x2cc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_GPIO_Init+0x1e0>
 8003080:	2303      	movs	r3, #3
 8003082:	e006      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003084:	2304      	movs	r3, #4
 8003086:	e004      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003088:	2302      	movs	r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003090:	2300      	movs	r3, #0
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	f002 0203 	and.w	r2, r2, #3
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4093      	lsls	r3, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030a2:	492f      	ldr	r1, [pc, #188]	@ (8003160 <HAL_GPIO_Init+0x2bc>)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	492c      	ldr	r1, [pc, #176]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	4928      	ldr	r1, [pc, #160]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030e4:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4922      	ldr	r1, [pc, #136]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030f2:	4b20      	ldr	r3, [pc, #128]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	491e      	ldr	r1, [pc, #120]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4918      	ldr	r1, [pc, #96]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	43db      	mvns	r3, r3
 8003122:	4914      	ldr	r1, [pc, #80]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003124:	4013      	ands	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d021      	beq.n	8003178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003134:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	490e      	ldr	r1, [pc, #56]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e021      	b.n	8003186 <HAL_GPIO_Init+0x2e2>
 8003142:	bf00      	nop
 8003144:	10320000 	.word	0x10320000
 8003148:	10310000 	.word	0x10310000
 800314c:	10220000 	.word	0x10220000
 8003150:	10210000 	.word	0x10210000
 8003154:	10120000 	.word	0x10120000
 8003158:	10110000 	.word	0x10110000
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	40010800 	.word	0x40010800
 8003168:	40010c00 	.word	0x40010c00
 800316c:	40011000 	.word	0x40011000
 8003170:	40011400 	.word	0x40011400
 8003174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	43db      	mvns	r3, r3
 8003180:	4909      	ldr	r1, [pc, #36]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003182:	4013      	ands	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	3301      	adds	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	f47f ae8e 	bne.w	8002eb8 <HAL_GPIO_Init+0x14>
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	372c      	adds	r7, #44	@ 0x2c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
 80031b8:	4613      	mov	r3, r2
 80031ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031bc:	787b      	ldrb	r3, [r7, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031c8:	e003      	b.n	80031d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031f2:	4a05      	ldr	r2, [pc, #20]	@ (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe f87c 	bl	80012f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e272      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8087 	beq.w	800333a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800322c:	4b92      	ldr	r3, [pc, #584]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00c      	beq.n	8003252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003238:	4b8f      	ldr	r3, [pc, #572]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d112      	bne.n	800326a <HAL_RCC_OscConfig+0x5e>
 8003244:	4b8c      	ldr	r3, [pc, #560]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d10b      	bne.n	800326a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003252:	4b89      	ldr	r3, [pc, #548]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d06c      	beq.n	8003338 <HAL_RCC_OscConfig+0x12c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d168      	bne.n	8003338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e24c      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x76>
 8003274:	4b80      	ldr	r3, [pc, #512]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a7f      	ldr	r2, [pc, #508]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e02e      	b.n	80032e0 <HAL_RCC_OscConfig+0xd4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x98>
 800328a:	4b7b      	ldr	r3, [pc, #492]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7a      	ldr	r2, [pc, #488]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b78      	ldr	r3, [pc, #480]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a77      	ldr	r2, [pc, #476]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0xd4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0xbc>
 80032ae:	4b72      	ldr	r3, [pc, #456]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a71      	ldr	r2, [pc, #452]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0xd4>
 80032c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b68      	ldr	r3, [pc, #416]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a67      	ldr	r2, [pc, #412]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff f9fe 	bl	80026e8 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff f9fa 	bl	80026e8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e200      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xe4>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f9ea 	bl	80026e8 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f9e6 	bl	80026e8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1ec      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x10c>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003346:	4b4c      	ldr	r3, [pc, #304]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003352:	4b49      	ldr	r3, [pc, #292]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d11c      	bne.n	8003398 <HAL_RCC_OscConfig+0x18c>
 800335e:	4b46      	ldr	r3, [pc, #280]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	4b43      	ldr	r3, [pc, #268]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x176>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e1c0      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4939      	ldr	r1, [pc, #228]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	e03a      	b.n	800340e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	4b36      	ldr	r3, [pc, #216]	@ (800347c <HAL_RCC_OscConfig+0x270>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7ff f99f 	bl	80026e8 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7ff f99b 	bl	80026e8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1a1      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4927      	ldr	r1, [pc, #156]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b26      	ldr	r3, [pc, #152]	@ (800347c <HAL_RCC_OscConfig+0x270>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f97e 	bl	80026e8 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f0:	f7ff f97a 	bl	80026e8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e180      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d03a      	beq.n	8003490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d019      	beq.n	8003456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7ff f95e 	bl	80026e8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003430:	f7ff f95a 	bl	80026e8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e160      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <HAL_RCC_OscConfig+0x26c>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800344e:	2001      	movs	r0, #1
 8003450:	f000 face 	bl	80039f0 <RCC_Delay>
 8003454:	e01c      	b.n	8003490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345c:	f7ff f944 	bl	80026e8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003462:	e00f      	b.n	8003484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003464:	f7ff f940 	bl	80026e8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d908      	bls.n	8003484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e146      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	42420000 	.word	0x42420000
 8003480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	4b92      	ldr	r3, [pc, #584]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e9      	bne.n	8003464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80a6 	beq.w	80035ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a2:	4b8b      	ldr	r3, [pc, #556]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ae:	4b88      	ldr	r3, [pc, #544]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a87      	ldr	r2, [pc, #540]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	61d3      	str	r3, [r2, #28]
 80034ba:	4b85      	ldr	r3, [pc, #532]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4b82      	ldr	r3, [pc, #520]	@ (80036d4 <HAL_RCC_OscConfig+0x4c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	4b7f      	ldr	r3, [pc, #508]	@ (80036d4 <HAL_RCC_OscConfig+0x4c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7ff f901 	bl	80026e8 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7ff f8fd 	bl	80026e8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b64      	cmp	r3, #100	@ 0x64
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e103      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <HAL_RCC_OscConfig+0x4c8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x312>
 8003510:	4b6f      	ldr	r3, [pc, #444]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4a6e      	ldr	r2, [pc, #440]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6213      	str	r3, [r2, #32]
 800351c:	e02d      	b.n	800357a <HAL_RCC_OscConfig+0x36e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x334>
 8003526:	4b6a      	ldr	r3, [pc, #424]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a69      	ldr	r2, [pc, #420]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6213      	str	r3, [r2, #32]
 8003532:	4b67      	ldr	r3, [pc, #412]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a66      	ldr	r2, [pc, #408]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	e01c      	b.n	800357a <HAL_RCC_OscConfig+0x36e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d10c      	bne.n	8003562 <HAL_RCC_OscConfig+0x356>
 8003548:	4b61      	ldr	r3, [pc, #388]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a60      	ldr	r2, [pc, #384]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	6213      	str	r3, [r2, #32]
 8003554:	4b5e      	ldr	r3, [pc, #376]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4a5d      	ldr	r2, [pc, #372]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6213      	str	r3, [r2, #32]
 8003560:	e00b      	b.n	800357a <HAL_RCC_OscConfig+0x36e>
 8003562:	4b5b      	ldr	r3, [pc, #364]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4a5a      	ldr	r2, [pc, #360]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6213      	str	r3, [r2, #32]
 800356e:	4b58      	ldr	r3, [pc, #352]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4a57      	ldr	r2, [pc, #348]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d015      	beq.n	80035ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7ff f8b1 	bl	80026e8 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7ff f8ad 	bl	80026e8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0b1      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	4b4b      	ldr	r3, [pc, #300]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RCC_OscConfig+0x37e>
 80035ac:	e014      	b.n	80035d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7ff f89b 	bl	80026e8 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7ff f897 	bl	80026e8 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e09b      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	4b40      	ldr	r3, [pc, #256]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ee      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b3c      	ldr	r3, [pc, #240]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4a3b      	ldr	r2, [pc, #236]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8087 	beq.w	8003702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f4:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d061      	beq.n	80036c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d146      	bne.n	8003696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <HAL_RCC_OscConfig+0x4cc>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7ff f86b 	bl	80026e8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7ff f867 	bl	80026e8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e06d      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363c:	d108      	bne.n	8003650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4921      	ldr	r1, [pc, #132]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003650:	4b1f      	ldr	r3, [pc, #124]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a19      	ldr	r1, [r3, #32]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	430b      	orrs	r3, r1
 8003662:	491b      	ldr	r1, [pc, #108]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003668:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7ff f83b 	bl	80026e8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7ff f837 	bl	80026e8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e03d      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x46a>
 8003694:	e035      	b.n	8003702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <HAL_RCC_OscConfig+0x4cc>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff f824 	bl	80026e8 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7ff f820 	bl	80026e8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e026      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x498>
 80036c2:	e01e      	b.n	8003702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e019      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
 80036d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x500>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4965      	ldr	r1, [pc, #404]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a58      	ldr	r2, [pc, #352]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800378e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fe ff72 	bl	80026e8 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fe ff6e 	bl	80026e8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4922      	ldr	r1, [pc, #136]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fed0 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	0800a1f0 	.word	0x0800a1f0
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	20000010 	.word	0x20000010

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x94>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x30>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x36>
 8003912:	e027      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	e027      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003932:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x94>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0c5b      	lsrs	r3, r3, #17
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	4a11      	ldr	r2, [pc, #68]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xa0>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 8003946:	fb03 f202 	mul.w	r2, r3, r2
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e004      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0c      	ldr	r2, [pc, #48]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	613b      	str	r3, [r7, #16]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 8003966:	613b      	str	r3, [r7, #16]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	693b      	ldr	r3, [r7, #16]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	0800a208 	.word	0x0800a208
 8003984:	0800a218 	.word	0x0800a218
 8003988:	003d0900 	.word	0x003d0900

0800398c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b02      	ldr	r3, [pc, #8]	@ (800399c <HAL_RCC_GetHCLKFreq+0x10>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	2000000c 	.word	0x2000000c

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff2 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800a200 	.word	0x0800a200

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffde 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0adb      	lsrs	r3, r3, #11
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	0800a200 	.word	0x0800a200

080039f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <RCC_Delay+0x34>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003a28 <RCC_Delay+0x38>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0a5b      	lsrs	r3, r3, #9
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a0c:	bf00      	nop
  }
  while (Delay --);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	60fa      	str	r2, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f9      	bne.n	8003a0c <RCC_Delay+0x1c>
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	10624dd3 	.word	0x10624dd3

08003a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e076      	b.n	8003b2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4e:	d009      	beq.n	8003a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fe fad0 	bl	8002024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	0c1a      	lsrs	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f002 0204 	and.w	r2, r2, #4
 8003b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b44:	f7fe fdd0 	bl	80026e8 <HAL_GetTick>
 8003b48:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e12a      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Transmit+0x36>
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e122      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_SPI_Transmit+0x48>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e11b      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2203      	movs	r2, #3
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bca:	d10f      	bne.n	8003bec <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c12:	d152      	bne.n	8003cba <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_SPI_Transmit+0xee>
 8003c1c:	8b7b      	ldrh	r3, [r7, #26]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d145      	bne.n	8003cae <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	881a      	ldrh	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	1c9a      	adds	r2, r3, #2
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c46:	e032      	b.n	8003cae <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d112      	bne.n	8003c7c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c7a:	e018      	b.n	8003cae <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c7c:	f7fe fd34 	bl	80026e8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d803      	bhi.n	8003c94 <HAL_SPI_Transmit+0x160>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c92:	d102      	bne.n	8003c9a <HAL_SPI_Transmit+0x166>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e082      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1c7      	bne.n	8003c48 <HAL_SPI_Transmit+0x114>
 8003cb8:	e053      	b.n	8003d62 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Transmit+0x194>
 8003cc2:	8b7b      	ldrh	r3, [r7, #26]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d147      	bne.n	8003d58 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cee:	e033      	b.n	8003d58 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d113      	bne.n	8003d26 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d24:	e018      	b.n	8003d58 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d26:	f7fe fcdf 	bl	80026e8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d803      	bhi.n	8003d3e <HAL_SPI_Transmit+0x20a>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_Transmit+0x210>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e02d      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1c6      	bne.n	8003cf0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fe0c 	bl	8004984 <SPI_EndRxTxTransaction>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e104      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de4:	d112      	bne.n	8003e0c <HAL_SPI_Receive+0x50>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10e      	bne.n	8003e0c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2204      	movs	r2, #4
 8003df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f8f3 	bl	8003fee <HAL_SPI_TransmitReceive>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	e0ec      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0c:	f7fe fc6c 	bl	80026e8 <HAL_GetTick>
 8003e10:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_Receive+0x62>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0e1      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_Receive+0x74>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0da      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7e:	d10f      	bne.n	8003ea0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b40      	cmp	r3, #64	@ 0x40
 8003eac:	d007      	beq.n	8003ebe <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d170      	bne.n	8003fa8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ec6:	e035      	b.n	8003f34 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d115      	bne.n	8003f02 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f103 020c 	add.w	r2, r3, #12
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f00:	e018      	b.n	8003f34 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f02:	f7fe fbf1 	bl	80026e8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_Receive+0x15e>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Receive+0x164>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e058      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1c4      	bne.n	8003ec8 <HAL_SPI_Receive+0x10c>
 8003f3e:	e038      	b.n	8003fb2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d113      	bne.n	8003f76 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f74:	e018      	b.n	8003fa8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f76:	f7fe fbb7 	bl	80026e8 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d803      	bhi.n	8003f8e <HAL_SPI_Receive+0x1d2>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Receive+0x1d8>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e01e      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1c6      	bne.n	8003f40 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fc92 	bl	80048e0 <SPI_EndRxTransaction>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08a      	sub	sp, #40	@ 0x28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004000:	f7fe fb72 	bl	80026e8 <HAL_GetTick>
 8004004:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800400c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004018:	7ffb      	ldrb	r3, [r7, #31]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00c      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x4a>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004024:	d106      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x46>
 800402e:	7ffb      	ldrb	r3, [r7, #31]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d001      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
 8004036:	e17f      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_SPI_TransmitReceive+0x5c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x5c>
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e174      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_SPI_TransmitReceive+0x6e>
 8004058:	2302      	movs	r3, #2
 800405a:	e16d      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b04      	cmp	r3, #4
 800406e:	d003      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2205      	movs	r2, #5
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	d007      	beq.n	80040cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d4:	d17e      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0xf6>
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d16c      	bne.n	80041be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004108:	e059      	b.n	80041be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x162>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x162>
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d113      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	881a      	ldrh	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d119      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x1a4>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d014      	beq.n	8004192 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	b292      	uxth	r2, r2
 8004174:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004192:	f7fe faa9 	bl	80026e8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800419e:	429a      	cmp	r2, r3
 80041a0:	d80d      	bhi.n	80041be <HAL_SPI_TransmitReceive+0x1d0>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041a8:	d009      	beq.n	80041be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0bc      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1a0      	bne.n	800410a <HAL_SPI_TransmitReceive+0x11c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d19b      	bne.n	800410a <HAL_SPI_TransmitReceive+0x11c>
 80041d2:	e082      	b.n	80042da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x1f4>
 80041dc:	8afb      	ldrh	r3, [r7, #22]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d171      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004208:	e05d      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d11c      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x264>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x264>
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	2b01      	cmp	r3, #1
 8004226:	d114      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	7812      	ldrb	r2, [r2, #0]
 8004234:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d119      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x2a6>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d014      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004294:	f7fe fa28 	bl	80026e8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d803      	bhi.n	80042ac <HAL_SPI_TransmitReceive+0x2be>
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042aa:	d102      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2c4>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e038      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d19c      	bne.n	800420a <HAL_SPI_TransmitReceive+0x21c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d197      	bne.n	800420a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fb50 	bl	8004984 <SPI_EndRxTxTransaction>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e01d      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004336:	2300      	movs	r3, #0
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	@ 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	e097      	b.n	800448e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_Transmit_DMA+0x2a>
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08f      	b.n	800448e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_SPI_Transmit_DMA+0x3c>
 8004378:	2302      	movs	r3, #2
 800437a:	e088      	b.n	800448e <HAL_SPI_Transmit_DMA+0x14e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2203      	movs	r2, #3
 8004388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ca:	d10f      	bne.n	80043ec <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f0:	4a29      	ldr	r2, [pc, #164]	@ (8004498 <HAL_SPI_Transmit_DMA+0x158>)
 80043f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	4a28      	ldr	r2, [pc, #160]	@ (800449c <HAL_SPI_Transmit_DMA+0x15c>)
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004400:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <HAL_SPI_Transmit_DMA+0x160>)
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	4619      	mov	r1, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004422:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004424:	f7fe faf6 	bl	8002a14 <HAL_DMA_Start_IT>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	f043 0210 	orr.w	r2, r3, #16
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e023      	b.n	800448e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d007      	beq.n	8004464 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004462:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0220 	orr.w	r2, r2, #32
 800447a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0202 	orr.w	r2, r2, #2
 800448a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	0800474d 	.word	0x0800474d
 800449c:	080046a7 	.word	0x080046a7
 80044a0:	08004769 	.word	0x08004769

080044a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
    return;
 80044e6:	e0be      	b.n	8004666 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_SPI_IRQHandler+0x66>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	09db      	lsrs	r3, r3, #7
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
    return;
 8004508:	e0ad      	b.n	8004666 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_SPI_IRQHandler+0x80>
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80a1 	beq.w	8004666 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 809a 	beq.w	8004666 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d023      	beq.n	8004586 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d011      	beq.n	800456e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	e00b      	b.n	8004586 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	693b      	ldr	r3, [r7, #16]
        return;
 8004584:	e06f      	b.n	8004666 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d014      	beq.n	80045bc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04f      	beq.n	8004664 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <HAL_SPI_IRQHandler+0x14c>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d034      	beq.n	800465a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0203 	bic.w	r2, r2, #3
 80045fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d011      	beq.n	800462c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	4a17      	ldr	r2, [pc, #92]	@ (800466c <HAL_SPI_IRQHandler+0x1c8>)
 800460e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fa99 	bl	8002b4c <HAL_DMA_Abort_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004630:	2b00      	cmp	r3, #0
 8004632:	d016      	beq.n	8004662 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004638:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <HAL_SPI_IRQHandler+0x1c8>)
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fa83 	bl	8002b4c <HAL_DMA_Abort_IT>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004658:	e003      	b.n	8004662 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f81a 	bl	8004694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004660:	e000      	b.n	8004664 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004662:	bf00      	nop
    return;
 8004664:	bf00      	nop
  }
}
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	080047a9 	.word	0x080047a9

08004670 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b4:	f7fe f818 	bl	80026e8 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d03b      	beq.n	8004740 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0202 	bic.w	r2, r2, #2
 80046e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	2164      	movs	r1, #100	@ 0x64
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f000 f949 	bl	8004984 <SPI_EndRxTxTransaction>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f7ff ffab 	bl	8004694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800473e:	e002      	b.n	8004746 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f7ff ff95 	bl	8004670 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff ff91 	bl	8004682 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0203 	bic.w	r2, r2, #3
 8004784:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f043 0210 	orr.w	r2, r3, #16
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff ff7a 	bl	8004694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff ff66 	bl	8004694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e0:	f7fd ff82 	bl	80026e8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f0:	f7fd ff7a 	bl	80026e8 <HAL_GetTick>
 80047f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f6:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	015b      	lsls	r3, r3, #5
 80047fc:	0d1b      	lsrs	r3, r3, #20
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004806:	e054      	b.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800480e:	d050      	beq.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004810:	f7fd ff6a 	bl	80026e8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	429a      	cmp	r2, r3
 800481e:	d902      	bls.n	8004826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d13d      	bne.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800483e:	d111      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004848:	d004      	beq.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d107      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486c:	d10f      	bne.n	800488e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800488c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e017      	b.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d19b      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048f4:	d111      	bne.n	800491a <SPI_EndRxTransaction+0x3a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fe:	d004      	beq.n	800490a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004908:	d107      	bne.n	800491a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004918:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004922:	d117      	bne.n	8004954 <SPI_EndRxTransaction+0x74>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492c:	d112      	bne.n	8004954 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	2101      	movs	r1, #1
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ff49 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e013      	b.n	800497c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ff36 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e000      	b.n	800497c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2201      	movs	r2, #1
 8004998:	2102      	movs	r1, #2
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff ff18 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e013      	b.n	80049de <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff ff05 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e000      	b.n	80049de <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e041      	b.n	8004a7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fd fc13 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f000 fa5b 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e03a      	b.n	8004b12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a18      	ldr	r2, [pc, #96]	@ (8004b1c <HAL_TIM_Base_Start_IT+0x98>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x58>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac6:	d009      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x58>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a14      	ldr	r2, [pc, #80]	@ (8004b20 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x58>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d111      	bne.n	8004b00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d010      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	e007      	b.n	8004b10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800

08004b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0202 	mvn.w	r2, #2
 8004b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f998 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f98b 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f99a 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0204 	mvn.w	r2, #4
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f972 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f965 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f974 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f94c 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f93f 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f94e 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0210 	mvn.w	r2, #16
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f926 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f919 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f928 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0201 	mvn.w	r2, #1
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc fb76 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa7f 	bl	80051b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8f8 	bl	8004ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0220 	mvn.w	r2, #32
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa52 	bl	80051a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_ConfigClockSource+0x1c>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0b4      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x186>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5c:	d03e      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0xd4>
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d62:	f200 8087 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	f000 8086 	beq.w	8004e7a <HAL_TIM_ConfigClockSource+0x172>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d72:	d87f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b70      	cmp	r3, #112	@ 0x70
 8004d76:	d01a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xa6>
 8004d78:	2b70      	cmp	r3, #112	@ 0x70
 8004d7a:	d87b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b60      	cmp	r3, #96	@ 0x60
 8004d7e:	d050      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x11a>
 8004d80:	2b60      	cmp	r3, #96	@ 0x60
 8004d82:	d877      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b50      	cmp	r3, #80	@ 0x50
 8004d86:	d03c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0xfa>
 8004d88:	2b50      	cmp	r3, #80	@ 0x50
 8004d8a:	d873      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d058      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x13a>
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d86f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b30      	cmp	r3, #48	@ 0x30
 8004d96:	d064      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b30      	cmp	r3, #48	@ 0x30
 8004d9a:	d86b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d060      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d867      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d05c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d05a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	e062      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dbe:	f000 f974 	bl	80050aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
      break;
 8004dda:	e04f      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dec:	f000 f95d 	bl	80050aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e03c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 f8d4 	bl	8004fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2150      	movs	r1, #80	@ 0x50
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f92b 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e02c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 f8f2 	bl	8005018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2160      	movs	r1, #96	@ 0x60
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f91b 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e01c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 f8b4 	bl	8004fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2140      	movs	r1, #64	@ 0x40
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f90b 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e00c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 f902 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004e72:	e003      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e000      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
	...

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb0 <TIM_Base_SetConfig+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <TIM_Base_SetConfig+0x30>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efe:	d007      	beq.n	8004f10 <TIM_Base_SetConfig+0x30>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <TIM_Base_SetConfig+0xd4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0x30>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <TIM_Base_SetConfig+0xd8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d108      	bne.n	8004f22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a22      	ldr	r2, [pc, #136]	@ (8004fb0 <TIM_Base_SetConfig+0xd0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_Base_SetConfig+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d007      	beq.n	8004f42 <TIM_Base_SetConfig+0x62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <TIM_Base_SetConfig+0xd4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_Base_SetConfig+0x62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <TIM_Base_SetConfig+0xd8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <TIM_Base_SetConfig+0xd0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800

08004fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 030a 	bic.w	r3, r3, #10
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0210 	bic.w	r2, r3, #16
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	031b      	lsls	r3, r3, #12
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005054:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	f043 0307 	orr.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	609a      	str	r2, [r3, #8]
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	021a      	lsls	r2, r3, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	609a      	str	r2, [r3, #8]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e046      	b.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a16      	ldr	r2, [pc, #88]	@ (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514c:	d009      	beq.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a12      	ldr	r2, [pc, #72]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a10      	ldr	r2, [pc, #64]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10c      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4313      	orrs	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800

080051a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e042      	b.n	8005260 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd f846 	bl	8002280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2224      	movs	r2, #36	@ 0x24
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800520a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fd63 	bl	8005cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	@ 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b20      	cmp	r3, #32
 8005286:	d175      	bne.n	8005374 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Transmit+0x2c>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e06e      	b.n	8005376 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2221      	movs	r2, #33	@ 0x21
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a6:	f7fd fa1f 	bl	80026e8 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c0:	d108      	bne.n	80052d4 <HAL_UART_Transmit+0x6c>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e003      	b.n	80052dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052dc:	e02e      	b.n	800533c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fb01 	bl	80058f0 <UART_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e03a      	b.n	8005376 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	3302      	adds	r3, #2
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e007      	b.n	800532e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1cb      	bne.n	80052de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	2140      	movs	r1, #64	@ 0x40
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 facd 	bl	80058f0 <UART_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e006      	b.n	8005376 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b0ba      	sub	sp, #232	@ 0xe8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_UART_IRQHandler+0x66>
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fbbc 	bl	8005b5c <UART_Receive_IT>
      return;
 80053e4:	e25b      	b.n	800589e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80de 	beq.w	80055ac <HAL_UART_IRQHandler+0x22c>
 80053f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005400:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80d1 	beq.w	80055ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00b      	beq.n	800542e <HAL_UART_IRQHandler+0xae>
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800541a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HAL_UART_IRQHandler+0xd2>
 800543a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f043 0202 	orr.w	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xf6>
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f043 0204 	orr.w	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d011      	beq.n	80054a6 <HAL_UART_IRQHandler+0x126>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	f043 0208 	orr.w	r2, r3, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 81f2 	beq.w	8005894 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_UART_IRQHandler+0x14e>
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb47 	bl	8005b5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <HAL_UART_IRQHandler+0x17a>
 80054f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d04f      	beq.n	800559a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa51 	bl	80059a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d041      	beq.n	8005592 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800552c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800553a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800553e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1d9      	bne.n	800550e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d013      	beq.n	800558a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005566:	4a7e      	ldr	r2, [pc, #504]	@ (8005760 <HAL_UART_IRQHandler+0x3e0>)
 8005568:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	4618      	mov	r0, r3
 8005570:	f7fd faec 	bl	8002b4c <HAL_DMA_Abort_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00e      	b.n	80055a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f99c 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e00a      	b.n	80055a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f998 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	e006      	b.n	80055a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f994 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055a6:	e175      	b.n	8005894 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	bf00      	nop
    return;
 80055aa:	e173      	b.n	8005894 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f040 814f 	bne.w	8005854 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8148 	beq.w	8005854 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8141 	beq.w	8005854 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80b6 	beq.w	8005764 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8145 	beq.w	8005898 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005616:	429a      	cmp	r2, r3
 8005618:	f080 813e 	bcs.w	8005898 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005622:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b20      	cmp	r3, #32
 800562c:	f000 8088 	beq.w	8005740 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800564a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800565c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005660:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005668:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1d9      	bne.n	8005630 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800568c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e1      	bne.n	800567c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e3      	bne.n	80056b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800570e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005722:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005724:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e3      	bne.n	80056fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd f9ca 	bl	8002ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574e:	b29b      	uxth	r3, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8bf 	bl	80058da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575c:	e09c      	b.n	8005898 <HAL_UART_IRQHandler+0x518>
 800575e:	bf00      	nop
 8005760:	08005a67 	.word	0x08005a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800576c:	b29b      	uxth	r3, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 808e 	beq.w	800589c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8089 	beq.w	800589c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80057b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e3      	bne.n	800578a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	623b      	str	r3, [r7, #32]
   return(result);
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e3      	bne.n	80057c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	60fb      	str	r3, [r7, #12]
   return(result);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0310 	bic.w	r3, r3, #16
 800581e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800582c:	61fa      	str	r2, [r7, #28]
 800582e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	617b      	str	r3, [r7, #20]
   return(result);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e3      	bne.n	8005808 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005846:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f844 	bl	80058da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005852:	e023      	b.n	800589c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <HAL_UART_IRQHandler+0x4f4>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f90e 	bl	8005a8e <UART_Transmit_IT>
    return;
 8005872:	e014      	b.n	800589e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00e      	beq.n	800589e <HAL_UART_IRQHandler+0x51e>
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f94d 	bl	8005b2c <UART_EndTransmit_IT>
    return;
 8005892:	e004      	b.n	800589e <HAL_UART_IRQHandler+0x51e>
    return;
 8005894:	bf00      	nop
 8005896:	e002      	b.n	800589e <HAL_UART_IRQHandler+0x51e>
      return;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <HAL_UART_IRQHandler+0x51e>
      return;
 800589c:	bf00      	nop
  }
}
 800589e:	37e8      	adds	r7, #232	@ 0xe8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005900:	e03b      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005908:	d037      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fc feed 	bl	80026e8 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <UART_WaitOnFlagUntilTimeout+0x30>
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e03a      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d023      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b80      	cmp	r3, #128	@ 0x80
 8005936:	d020      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	d01d      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b08      	cmp	r3, #8
 800594a:	d116      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f81d 	bl	80059a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2208      	movs	r2, #8
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e00f      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	bf0c      	ite	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	2300      	movne	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	429a      	cmp	r2, r3
 8005996:	d0b4      	beq.n	8005902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b095      	sub	sp, #84	@ 0x54
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80059cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d119      	bne.n	8005a4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f023 0310 	bic.w	r3, r3, #16
 8005a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3a:	61ba      	str	r2, [r7, #24]
 8005a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a5c:	bf00      	nop
 8005a5e:	3754      	adds	r7, #84	@ 0x54
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff ff21 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b21      	cmp	r3, #33	@ 0x21
 8005aa0:	d13e      	bne.n	8005b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aaa:	d114      	bne.n	8005ad6 <UART_Transmit_IT+0x48>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d110      	bne.n	8005ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]
 8005ad4:	e008      	b.n	8005ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6211      	str	r1, [r2, #32]
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4619      	mov	r1, r3
 8005af6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10f      	bne.n	8005b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff fea9 	bl	80058a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08c      	sub	sp, #48	@ 0x30
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b22      	cmp	r3, #34	@ 0x22
 8005b6e:	f040 80ae 	bne.w	8005cce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7a:	d117      	bne.n	8005bac <UART_Receive_IT+0x50>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d113      	bne.n	8005bac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005baa:	e026      	b.n	8005bfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbe:	d007      	beq.n	8005bd0 <UART_Receive_IT+0x74>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <UART_Receive_IT+0x82>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e008      	b.n	8005bf0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4619      	mov	r1, r3
 8005c08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d15d      	bne.n	8005cca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0220 	bic.w	r2, r2, #32
 8005c1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d135      	bne.n	8005cc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7a:	623a      	str	r2, [r7, #32]
 8005c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	69f9      	ldr	r1, [r7, #28]
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d10a      	bne.n	8005cb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fe0e 	bl	80058da <HAL_UARTEx_RxEventCallback>
 8005cbe:	e002      	b.n	8005cc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fdf8 	bl	80058b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e002      	b.n	8005cd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3730      	adds	r7, #48	@ 0x30
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005d12:	f023 030c 	bic.w	r3, r3, #12
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <UART_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d103      	bne.n	8005d48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fd fe42 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	e002      	b.n	8005d4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d48:	f7fd fe2a 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	4a22      	ldr	r2, [pc, #136]	@ (8005df0 <UART_SetConfig+0x118>)
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	0119      	lsls	r1, r3, #4
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009a      	lsls	r2, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d84:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <UART_SetConfig+0x118>)
 8005d86:	fba3 0302 	umull	r0, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	2064      	movs	r0, #100	@ 0x64
 8005d8e:	fb00 f303 	mul.w	r3, r0, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	3332      	adds	r3, #50	@ 0x32
 8005d98:	4a15      	ldr	r2, [pc, #84]	@ (8005df0 <UART_SetConfig+0x118>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da4:	4419      	add	r1, r3
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009a      	lsls	r2, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <UART_SetConfig+0x118>)
 8005dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	2064      	movs	r0, #100	@ 0x64
 8005dc6:	fb00 f303 	mul.w	r3, r0, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	3332      	adds	r3, #50	@ 0x32
 8005dd0:	4a07      	ldr	r2, [pc, #28]	@ (8005df0 <UART_SetConfig+0x118>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	440a      	add	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40013800 	.word	0x40013800
 8005df0:	51eb851f 	.word	0x51eb851f

08005df4 <__cvt>:
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	bfbb      	ittet	lt
 8005dfe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005e02:	461d      	movlt	r5, r3
 8005e04:	2300      	movge	r3, #0
 8005e06:	232d      	movlt	r3, #45	@ 0x2d
 8005e08:	b088      	sub	sp, #32
 8005e0a:	4614      	mov	r4, r2
 8005e0c:	bfb8      	it	lt
 8005e0e:	4614      	movlt	r4, r2
 8005e10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e12:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005e14:	7013      	strb	r3, [r2, #0]
 8005e16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e18:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005e1c:	f023 0820 	bic.w	r8, r3, #32
 8005e20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e24:	d005      	beq.n	8005e32 <__cvt+0x3e>
 8005e26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e2a:	d100      	bne.n	8005e2e <__cvt+0x3a>
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e000      	b.n	8005e34 <__cvt+0x40>
 8005e32:	2303      	movs	r3, #3
 8005e34:	aa07      	add	r2, sp, #28
 8005e36:	9204      	str	r2, [sp, #16]
 8005e38:	aa06      	add	r2, sp, #24
 8005e3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e3e:	e9cd 3600 	strd	r3, r6, [sp]
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f000 feab 	bl	8006ba0 <_dtoa_r>
 8005e4a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e4e:	4607      	mov	r7, r0
 8005e50:	d119      	bne.n	8005e86 <__cvt+0x92>
 8005e52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e54:	07db      	lsls	r3, r3, #31
 8005e56:	d50e      	bpl.n	8005e76 <__cvt+0x82>
 8005e58:	eb00 0906 	add.w	r9, r0, r6
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fe54 	bl	8000b10 <__aeabi_dcmpeq>
 8005e68:	b108      	cbz	r0, 8005e6e <__cvt+0x7a>
 8005e6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e6e:	2230      	movs	r2, #48	@ 0x30
 8005e70:	9b07      	ldr	r3, [sp, #28]
 8005e72:	454b      	cmp	r3, r9
 8005e74:	d31e      	bcc.n	8005eb4 <__cvt+0xc0>
 8005e76:	4638      	mov	r0, r7
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005e7c:	1bdb      	subs	r3, r3, r7
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	b008      	add	sp, #32
 8005e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e86:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e8a:	eb00 0906 	add.w	r9, r0, r6
 8005e8e:	d1e5      	bne.n	8005e5c <__cvt+0x68>
 8005e90:	7803      	ldrb	r3, [r0, #0]
 8005e92:	2b30      	cmp	r3, #48	@ 0x30
 8005e94:	d10a      	bne.n	8005eac <__cvt+0xb8>
 8005e96:	2200      	movs	r2, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa fe37 	bl	8000b10 <__aeabi_dcmpeq>
 8005ea2:	b918      	cbnz	r0, 8005eac <__cvt+0xb8>
 8005ea4:	f1c6 0601 	rsb	r6, r6, #1
 8005ea8:	f8ca 6000 	str.w	r6, [sl]
 8005eac:	f8da 3000 	ldr.w	r3, [sl]
 8005eb0:	4499      	add	r9, r3
 8005eb2:	e7d3      	b.n	8005e5c <__cvt+0x68>
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	9107      	str	r1, [sp, #28]
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e7d9      	b.n	8005e70 <__cvt+0x7c>

08005ebc <__exponent>:
 8005ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	bfb6      	itet	lt
 8005ec2:	232d      	movlt	r3, #45	@ 0x2d
 8005ec4:	232b      	movge	r3, #43	@ 0x2b
 8005ec6:	4249      	neglt	r1, r1
 8005ec8:	2909      	cmp	r1, #9
 8005eca:	7002      	strb	r2, [r0, #0]
 8005ecc:	7043      	strb	r3, [r0, #1]
 8005ece:	dd29      	ble.n	8005f24 <__exponent+0x68>
 8005ed0:	f10d 0307 	add.w	r3, sp, #7
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	270a      	movs	r7, #10
 8005ed8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005edc:	461a      	mov	r2, r3
 8005ede:	fb07 1416 	mls	r4, r7, r6, r1
 8005ee2:	3430      	adds	r4, #48	@ 0x30
 8005ee4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ee8:	460c      	mov	r4, r1
 8005eea:	2c63      	cmp	r4, #99	@ 0x63
 8005eec:	4631      	mov	r1, r6
 8005eee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005ef2:	dcf1      	bgt.n	8005ed8 <__exponent+0x1c>
 8005ef4:	3130      	adds	r1, #48	@ 0x30
 8005ef6:	1e94      	subs	r4, r2, #2
 8005ef8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005efc:	4623      	mov	r3, r4
 8005efe:	1c41      	adds	r1, r0, #1
 8005f00:	42ab      	cmp	r3, r5
 8005f02:	d30a      	bcc.n	8005f1a <__exponent+0x5e>
 8005f04:	f10d 0309 	add.w	r3, sp, #9
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	42ac      	cmp	r4, r5
 8005f0c:	bf88      	it	hi
 8005f0e:	2300      	movhi	r3, #0
 8005f10:	3302      	adds	r3, #2
 8005f12:	4403      	add	r3, r0
 8005f14:	1a18      	subs	r0, r3, r0
 8005f16:	b003      	add	sp, #12
 8005f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f22:	e7ed      	b.n	8005f00 <__exponent+0x44>
 8005f24:	2330      	movs	r3, #48	@ 0x30
 8005f26:	3130      	adds	r1, #48	@ 0x30
 8005f28:	7083      	strb	r3, [r0, #2]
 8005f2a:	70c1      	strb	r1, [r0, #3]
 8005f2c:	1d03      	adds	r3, r0, #4
 8005f2e:	e7f1      	b.n	8005f14 <__exponent+0x58>

08005f30 <_printf_float>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	b091      	sub	sp, #68	@ 0x44
 8005f36:	460c      	mov	r4, r1
 8005f38:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	461f      	mov	r7, r3
 8005f40:	4605      	mov	r5, r0
 8005f42:	f000 fd1d 	bl	8006980 <_localeconv_r>
 8005f46:	6803      	ldr	r3, [r0, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	9308      	str	r3, [sp, #32]
 8005f4c:	f7fa f900 	bl	8000150 <strlen>
 8005f50:	2300      	movs	r3, #0
 8005f52:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f54:	f8d8 3000 	ldr.w	r3, [r8]
 8005f58:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f5a:	3307      	adds	r3, #7
 8005f5c:	f023 0307 	bic.w	r3, r3, #7
 8005f60:	f103 0208 	add.w	r2, r3, #8
 8005f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f68:	f8d4 b000 	ldr.w	fp, [r4]
 8005f6c:	f8c8 2000 	str.w	r2, [r8]
 8005f70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f7a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f8a:	4b9c      	ldr	r3, [pc, #624]	@ (80061fc <_printf_float+0x2cc>)
 8005f8c:	f7fa fdf2 	bl	8000b74 <__aeabi_dcmpun>
 8005f90:	bb70      	cbnz	r0, 8005ff0 <_printf_float+0xc0>
 8005f92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f9a:	4b98      	ldr	r3, [pc, #608]	@ (80061fc <_printf_float+0x2cc>)
 8005f9c:	f7fa fdcc 	bl	8000b38 <__aeabi_dcmple>
 8005fa0:	bb30      	cbnz	r0, 8005ff0 <_printf_float+0xc0>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa fdbb 	bl	8000b24 <__aeabi_dcmplt>
 8005fae:	b110      	cbz	r0, 8005fb6 <_printf_float+0x86>
 8005fb0:	232d      	movs	r3, #45	@ 0x2d
 8005fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb6:	4a92      	ldr	r2, [pc, #584]	@ (8006200 <_printf_float+0x2d0>)
 8005fb8:	4b92      	ldr	r3, [pc, #584]	@ (8006204 <_printf_float+0x2d4>)
 8005fba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fbe:	bf8c      	ite	hi
 8005fc0:	4690      	movhi	r8, r2
 8005fc2:	4698      	movls	r8, r3
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	f02b 0304 	bic.w	r3, fp, #4
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	4633      	mov	r3, r6
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	9700      	str	r7, [sp, #0]
 8005fda:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005fdc:	f000 f9d4 	bl	8006388 <_printf_common>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f040 8090 	bne.w	8006106 <_printf_float+0x1d6>
 8005fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fea:	b011      	add	sp, #68	@ 0x44
 8005fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	f7fa fdbc 	bl	8000b74 <__aeabi_dcmpun>
 8005ffc:	b148      	cbz	r0, 8006012 <_printf_float+0xe2>
 8005ffe:	464b      	mov	r3, r9
 8006000:	2b00      	cmp	r3, #0
 8006002:	bfb8      	it	lt
 8006004:	232d      	movlt	r3, #45	@ 0x2d
 8006006:	4a80      	ldr	r2, [pc, #512]	@ (8006208 <_printf_float+0x2d8>)
 8006008:	bfb8      	it	lt
 800600a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800600e:	4b7f      	ldr	r3, [pc, #508]	@ (800620c <_printf_float+0x2dc>)
 8006010:	e7d3      	b.n	8005fba <_printf_float+0x8a>
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	d13f      	bne.n	800609c <_printf_float+0x16c>
 800601c:	2306      	movs	r3, #6
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	9206      	str	r2, [sp, #24]
 800602a:	aa0e      	add	r2, sp, #56	@ 0x38
 800602c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006030:	aa0d      	add	r2, sp, #52	@ 0x34
 8006032:	9203      	str	r2, [sp, #12]
 8006034:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006038:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	4642      	mov	r2, r8
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	4628      	mov	r0, r5
 8006044:	464b      	mov	r3, r9
 8006046:	910a      	str	r1, [sp, #40]	@ 0x28
 8006048:	f7ff fed4 	bl	8005df4 <__cvt>
 800604c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800604e:	4680      	mov	r8, r0
 8006050:	2947      	cmp	r1, #71	@ 0x47
 8006052:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006054:	d128      	bne.n	80060a8 <_printf_float+0x178>
 8006056:	1cc8      	adds	r0, r1, #3
 8006058:	db02      	blt.n	8006060 <_printf_float+0x130>
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	4299      	cmp	r1, r3
 800605e:	dd40      	ble.n	80060e2 <_printf_float+0x1b2>
 8006060:	f1aa 0a02 	sub.w	sl, sl, #2
 8006064:	fa5f fa8a 	uxtb.w	sl, sl
 8006068:	4652      	mov	r2, sl
 800606a:	3901      	subs	r1, #1
 800606c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006070:	910d      	str	r1, [sp, #52]	@ 0x34
 8006072:	f7ff ff23 	bl	8005ebc <__exponent>
 8006076:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006078:	4681      	mov	r9, r0
 800607a:	1813      	adds	r3, r2, r0
 800607c:	2a01      	cmp	r2, #1
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	dc02      	bgt.n	8006088 <_printf_float+0x158>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	07d2      	lsls	r2, r2, #31
 8006086:	d501      	bpl.n	800608c <_printf_float+0x15c>
 8006088:	3301      	adds	r3, #1
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006090:	2b00      	cmp	r3, #0
 8006092:	d09e      	beq.n	8005fd2 <_printf_float+0xa2>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609a:	e79a      	b.n	8005fd2 <_printf_float+0xa2>
 800609c:	2947      	cmp	r1, #71	@ 0x47
 800609e:	d1bf      	bne.n	8006020 <_printf_float+0xf0>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1bd      	bne.n	8006020 <_printf_float+0xf0>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e7ba      	b.n	800601e <_printf_float+0xee>
 80060a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ac:	d9dc      	bls.n	8006068 <_printf_float+0x138>
 80060ae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060b2:	d118      	bne.n	80060e6 <_printf_float+0x1b6>
 80060b4:	2900      	cmp	r1, #0
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	dd0b      	ble.n	80060d2 <_printf_float+0x1a2>
 80060ba:	6121      	str	r1, [r4, #16]
 80060bc:	b913      	cbnz	r3, 80060c4 <_printf_float+0x194>
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	07d0      	lsls	r0, r2, #31
 80060c2:	d502      	bpl.n	80060ca <_printf_float+0x19a>
 80060c4:	3301      	adds	r3, #1
 80060c6:	440b      	add	r3, r1
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	f04f 0900 	mov.w	r9, #0
 80060ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060d0:	e7dc      	b.n	800608c <_printf_float+0x15c>
 80060d2:	b913      	cbnz	r3, 80060da <_printf_float+0x1aa>
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	07d2      	lsls	r2, r2, #31
 80060d8:	d501      	bpl.n	80060de <_printf_float+0x1ae>
 80060da:	3302      	adds	r3, #2
 80060dc:	e7f4      	b.n	80060c8 <_printf_float+0x198>
 80060de:	2301      	movs	r3, #1
 80060e0:	e7f2      	b.n	80060c8 <_printf_float+0x198>
 80060e2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e8:	4299      	cmp	r1, r3
 80060ea:	db05      	blt.n	80060f8 <_printf_float+0x1c8>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	6121      	str	r1, [r4, #16]
 80060f0:	07d8      	lsls	r0, r3, #31
 80060f2:	d5ea      	bpl.n	80060ca <_printf_float+0x19a>
 80060f4:	1c4b      	adds	r3, r1, #1
 80060f6:	e7e7      	b.n	80060c8 <_printf_float+0x198>
 80060f8:	2900      	cmp	r1, #0
 80060fa:	bfcc      	ite	gt
 80060fc:	2201      	movgt	r2, #1
 80060fe:	f1c1 0202 	rsble	r2, r1, #2
 8006102:	4413      	add	r3, r2
 8006104:	e7e0      	b.n	80060c8 <_printf_float+0x198>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	055a      	lsls	r2, r3, #21
 800610a:	d407      	bmi.n	800611c <_printf_float+0x1ec>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	4642      	mov	r2, r8
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	d12b      	bne.n	8006172 <_printf_float+0x242>
 800611a:	e764      	b.n	8005fe6 <_printf_float+0xb6>
 800611c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006120:	f240 80dc 	bls.w	80062dc <_printf_float+0x3ac>
 8006124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006128:	2200      	movs	r2, #0
 800612a:	2300      	movs	r3, #0
 800612c:	f7fa fcf0 	bl	8000b10 <__aeabi_dcmpeq>
 8006130:	2800      	cmp	r0, #0
 8006132:	d033      	beq.n	800619c <_printf_float+0x26c>
 8006134:	2301      	movs	r3, #1
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	4a35      	ldr	r2, [pc, #212]	@ (8006210 <_printf_float+0x2e0>)
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af51 	beq.w	8005fe6 <_printf_float+0xb6>
 8006144:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006148:	4543      	cmp	r3, r8
 800614a:	db02      	blt.n	8006152 <_printf_float+0x222>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07d8      	lsls	r0, r3, #31
 8006150:	d50f      	bpl.n	8006172 <_printf_float+0x242>
 8006152:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f af42 	beq.w	8005fe6 <_printf_float+0xb6>
 8006162:	f04f 0900 	mov.w	r9, #0
 8006166:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800616a:	f104 0a1a 	add.w	sl, r4, #26
 800616e:	45c8      	cmp	r8, r9
 8006170:	dc09      	bgt.n	8006186 <_printf_float+0x256>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	079b      	lsls	r3, r3, #30
 8006176:	f100 8102 	bmi.w	800637e <_printf_float+0x44e>
 800617a:	68e0      	ldr	r0, [r4, #12]
 800617c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800617e:	4298      	cmp	r0, r3
 8006180:	bfb8      	it	lt
 8006182:	4618      	movlt	r0, r3
 8006184:	e731      	b.n	8005fea <_printf_float+0xba>
 8006186:	2301      	movs	r3, #1
 8006188:	4652      	mov	r2, sl
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f af28 	beq.w	8005fe6 <_printf_float+0xb6>
 8006196:	f109 0901 	add.w	r9, r9, #1
 800619a:	e7e8      	b.n	800616e <_printf_float+0x23e>
 800619c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dc38      	bgt.n	8006214 <_printf_float+0x2e4>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <_printf_float+0x2e0>)
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	f43f af1a 	beq.w	8005fe6 <_printf_float+0xb6>
 80061b2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80061b6:	ea59 0303 	orrs.w	r3, r9, r3
 80061ba:	d102      	bne.n	80061c2 <_printf_float+0x292>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07d9      	lsls	r1, r3, #31
 80061c0:	d5d7      	bpl.n	8006172 <_printf_float+0x242>
 80061c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f af0a 	beq.w	8005fe6 <_printf_float+0xb6>
 80061d2:	f04f 0a00 	mov.w	sl, #0
 80061d6:	f104 0b1a 	add.w	fp, r4, #26
 80061da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061dc:	425b      	negs	r3, r3
 80061de:	4553      	cmp	r3, sl
 80061e0:	dc01      	bgt.n	80061e6 <_printf_float+0x2b6>
 80061e2:	464b      	mov	r3, r9
 80061e4:	e793      	b.n	800610e <_printf_float+0x1de>
 80061e6:	2301      	movs	r3, #1
 80061e8:	465a      	mov	r2, fp
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f aef8 	beq.w	8005fe6 <_printf_float+0xb6>
 80061f6:	f10a 0a01 	add.w	sl, sl, #1
 80061fa:	e7ee      	b.n	80061da <_printf_float+0x2aa>
 80061fc:	7fefffff 	.word	0x7fefffff
 8006200:	0800a21e 	.word	0x0800a21e
 8006204:	0800a21a 	.word	0x0800a21a
 8006208:	0800a226 	.word	0x0800a226
 800620c:	0800a222 	.word	0x0800a222
 8006210:	0800a22a 	.word	0x0800a22a
 8006214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006216:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800621a:	4553      	cmp	r3, sl
 800621c:	bfa8      	it	ge
 800621e:	4653      	movge	r3, sl
 8006220:	2b00      	cmp	r3, #0
 8006222:	4699      	mov	r9, r3
 8006224:	dc36      	bgt.n	8006294 <_printf_float+0x364>
 8006226:	f04f 0b00 	mov.w	fp, #0
 800622a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622e:	f104 021a 	add.w	r2, r4, #26
 8006232:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006234:	930a      	str	r3, [sp, #40]	@ 0x28
 8006236:	eba3 0309 	sub.w	r3, r3, r9
 800623a:	455b      	cmp	r3, fp
 800623c:	dc31      	bgt.n	80062a2 <_printf_float+0x372>
 800623e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006240:	459a      	cmp	sl, r3
 8006242:	dc3a      	bgt.n	80062ba <_printf_float+0x38a>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	07da      	lsls	r2, r3, #31
 8006248:	d437      	bmi.n	80062ba <_printf_float+0x38a>
 800624a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800624c:	ebaa 0903 	sub.w	r9, sl, r3
 8006250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006252:	ebaa 0303 	sub.w	r3, sl, r3
 8006256:	4599      	cmp	r9, r3
 8006258:	bfa8      	it	ge
 800625a:	4699      	movge	r9, r3
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	dc33      	bgt.n	80062ca <_printf_float+0x39a>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800626a:	f104 0b1a 	add.w	fp, r4, #26
 800626e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006270:	ebaa 0303 	sub.w	r3, sl, r3
 8006274:	eba3 0309 	sub.w	r3, r3, r9
 8006278:	4543      	cmp	r3, r8
 800627a:	f77f af7a 	ble.w	8006172 <_printf_float+0x242>
 800627e:	2301      	movs	r3, #1
 8006280:	465a      	mov	r2, fp
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f aeac 	beq.w	8005fe6 <_printf_float+0xb6>
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	e7ec      	b.n	800626e <_printf_float+0x33e>
 8006294:	4642      	mov	r2, r8
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	d1c2      	bne.n	8006226 <_printf_float+0x2f6>
 80062a0:	e6a1      	b.n	8005fe6 <_printf_float+0xb6>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4631      	mov	r1, r6
 80062a6:	4628      	mov	r0, r5
 80062a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f ae9a 	beq.w	8005fe6 <_printf_float+0xb6>
 80062b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062b4:	f10b 0b01 	add.w	fp, fp, #1
 80062b8:	e7bb      	b.n	8006232 <_printf_float+0x302>
 80062ba:	4631      	mov	r1, r6
 80062bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1c0      	bne.n	800624a <_printf_float+0x31a>
 80062c8:	e68d      	b.n	8005fe6 <_printf_float+0xb6>
 80062ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062cc:	464b      	mov	r3, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	4442      	add	r2, r8
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	d1c3      	bne.n	8006262 <_printf_float+0x332>
 80062da:	e684      	b.n	8005fe6 <_printf_float+0xb6>
 80062dc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80062e0:	f1ba 0f01 	cmp.w	sl, #1
 80062e4:	dc01      	bgt.n	80062ea <_printf_float+0x3ba>
 80062e6:	07db      	lsls	r3, r3, #31
 80062e8:	d536      	bpl.n	8006358 <_printf_float+0x428>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4642      	mov	r2, r8
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f ae76 	beq.w	8005fe6 <_printf_float+0xb6>
 80062fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f ae6e 	beq.w	8005fe6 <_printf_float+0xb6>
 800630a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006316:	f7fa fbfb 	bl	8000b10 <__aeabi_dcmpeq>
 800631a:	b9c0      	cbnz	r0, 800634e <_printf_float+0x41e>
 800631c:	4653      	mov	r3, sl
 800631e:	f108 0201 	add.w	r2, r8, #1
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	d10c      	bne.n	8006346 <_printf_float+0x416>
 800632c:	e65b      	b.n	8005fe6 <_printf_float+0xb6>
 800632e:	2301      	movs	r3, #1
 8006330:	465a      	mov	r2, fp
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f ae54 	beq.w	8005fe6 <_printf_float+0xb6>
 800633e:	f108 0801 	add.w	r8, r8, #1
 8006342:	45d0      	cmp	r8, sl
 8006344:	dbf3      	blt.n	800632e <_printf_float+0x3fe>
 8006346:	464b      	mov	r3, r9
 8006348:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800634c:	e6e0      	b.n	8006110 <_printf_float+0x1e0>
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	f104 0b1a 	add.w	fp, r4, #26
 8006356:	e7f4      	b.n	8006342 <_printf_float+0x412>
 8006358:	2301      	movs	r3, #1
 800635a:	4642      	mov	r2, r8
 800635c:	e7e1      	b.n	8006322 <_printf_float+0x3f2>
 800635e:	2301      	movs	r3, #1
 8006360:	464a      	mov	r2, r9
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae3c 	beq.w	8005fe6 <_printf_float+0xb6>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006376:	1a5b      	subs	r3, r3, r1
 8006378:	4543      	cmp	r3, r8
 800637a:	dcf0      	bgt.n	800635e <_printf_float+0x42e>
 800637c:	e6fd      	b.n	800617a <_printf_float+0x24a>
 800637e:	f04f 0800 	mov.w	r8, #0
 8006382:	f104 0919 	add.w	r9, r4, #25
 8006386:	e7f4      	b.n	8006372 <_printf_float+0x442>

08006388 <_printf_common>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	4616      	mov	r6, r2
 800638e:	4698      	mov	r8, r3
 8006390:	688a      	ldr	r2, [r1, #8]
 8006392:	690b      	ldr	r3, [r1, #16]
 8006394:	4607      	mov	r7, r0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfb8      	it	lt
 800639a:	4613      	movlt	r3, r2
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063a2:	460c      	mov	r4, r1
 80063a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a8:	b10a      	cbz	r2, 80063ae <_printf_common+0x26>
 80063aa:	3301      	adds	r3, #1
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	0699      	lsls	r1, r3, #26
 80063b2:	bf42      	ittt	mi
 80063b4:	6833      	ldrmi	r3, [r6, #0]
 80063b6:	3302      	addmi	r3, #2
 80063b8:	6033      	strmi	r3, [r6, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	f015 0506 	ands.w	r5, r5, #6
 80063c0:	d106      	bne.n	80063d0 <_printf_common+0x48>
 80063c2:	f104 0a19 	add.w	sl, r4, #25
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	6832      	ldr	r2, [r6, #0]
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dc2b      	bgt.n	8006428 <_printf_common+0xa0>
 80063d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	3b00      	subs	r3, #0
 80063d8:	bf18      	it	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	0692      	lsls	r2, r2, #26
 80063de:	d430      	bmi.n	8006442 <_printf_common+0xba>
 80063e0:	4641      	mov	r1, r8
 80063e2:	4638      	mov	r0, r7
 80063e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063e8:	47c8      	blx	r9
 80063ea:	3001      	adds	r0, #1
 80063ec:	d023      	beq.n	8006436 <_printf_common+0xae>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	6922      	ldr	r2, [r4, #16]
 80063f2:	f003 0306 	and.w	r3, r3, #6
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	bf14      	ite	ne
 80063fa:	2500      	movne	r5, #0
 80063fc:	6833      	ldreq	r3, [r6, #0]
 80063fe:	f04f 0600 	mov.w	r6, #0
 8006402:	bf08      	it	eq
 8006404:	68e5      	ldreq	r5, [r4, #12]
 8006406:	f104 041a 	add.w	r4, r4, #26
 800640a:	bf08      	it	eq
 800640c:	1aed      	subeq	r5, r5, r3
 800640e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006412:	bf08      	it	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	4293      	cmp	r3, r2
 800641a:	bfc4      	itt	gt
 800641c:	1a9b      	subgt	r3, r3, r2
 800641e:	18ed      	addgt	r5, r5, r3
 8006420:	42b5      	cmp	r5, r6
 8006422:	d11a      	bne.n	800645a <_printf_common+0xd2>
 8006424:	2000      	movs	r0, #0
 8006426:	e008      	b.n	800643a <_printf_common+0xb2>
 8006428:	2301      	movs	r3, #1
 800642a:	4652      	mov	r2, sl
 800642c:	4641      	mov	r1, r8
 800642e:	4638      	mov	r0, r7
 8006430:	47c8      	blx	r9
 8006432:	3001      	adds	r0, #1
 8006434:	d103      	bne.n	800643e <_printf_common+0xb6>
 8006436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	3501      	adds	r5, #1
 8006440:	e7c1      	b.n	80063c6 <_printf_common+0x3e>
 8006442:	2030      	movs	r0, #48	@ 0x30
 8006444:	18e1      	adds	r1, r4, r3
 8006446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006450:	4422      	add	r2, r4
 8006452:	3302      	adds	r3, #2
 8006454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006458:	e7c2      	b.n	80063e0 <_printf_common+0x58>
 800645a:	2301      	movs	r3, #1
 800645c:	4622      	mov	r2, r4
 800645e:	4641      	mov	r1, r8
 8006460:	4638      	mov	r0, r7
 8006462:	47c8      	blx	r9
 8006464:	3001      	adds	r0, #1
 8006466:	d0e6      	beq.n	8006436 <_printf_common+0xae>
 8006468:	3601      	adds	r6, #1
 800646a:	e7d9      	b.n	8006420 <_printf_common+0x98>

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	4691      	mov	r9, r2
 8006474:	2f78      	cmp	r7, #120	@ 0x78
 8006476:	4680      	mov	r8, r0
 8006478:	460c      	mov	r4, r1
 800647a:	469a      	mov	sl, r3
 800647c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800647e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	@ 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d1 	beq.w	8006630 <_printf_i+0x1c4>
 800648e:	2f58      	cmp	r7, #88	@ 0x58
 8006490:	f000 80b8 	beq.w	8006604 <_printf_i+0x198>
 8006494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	@ (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006617 	.word	0x08006617
 80064dc:	08006543 	.word	0x08006543
 80064e0:	080065d1 	.word	0x080065d1
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	08006639 	.word	0x08006639
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006543 	.word	0x08006543
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065d9 	.word	0x080065d9
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e09c      	b.n	8006652 <_printf_i+0x1e6>
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	6031      	str	r1, [r6, #0]
 8006520:	0606      	lsls	r6, r0, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0xbc>
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	e003      	b.n	8006530 <_printf_i+0xc4>
 8006528:	0645      	lsls	r5, r0, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0xb8>
 800652c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006530:	2d00      	cmp	r5, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xd0>
 8006534:	232d      	movs	r3, #45	@ 0x2d
 8006536:	426d      	negs	r5, r5
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	230a      	movs	r3, #10
 800653e:	4858      	ldr	r0, [pc, #352]	@ (80066a0 <_printf_i+0x234>)
 8006540:	e011      	b.n	8006566 <_printf_i+0xfa>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	0608      	lsls	r0, r1, #24
 8006548:	f853 5b04 	ldr.w	r5, [r3], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0xe8>
 800654e:	0649      	lsls	r1, r1, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	2f6f      	cmp	r7, #111	@ 0x6f
 8006556:	6033      	str	r3, [r6, #0]
 8006558:	bf14      	ite	ne
 800655a:	230a      	movne	r3, #10
 800655c:	2308      	moveq	r3, #8
 800655e:	4850      	ldr	r0, [pc, #320]	@ (80066a0 <_printf_i+0x234>)
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006566:	6866      	ldr	r6, [r4, #4]
 8006568:	2e00      	cmp	r6, #0
 800656a:	60a6      	str	r6, [r4, #8]
 800656c:	db05      	blt.n	800657a <_printf_i+0x10e>
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	432e      	orrs	r6, r5
 8006572:	f021 0104 	bic.w	r1, r1, #4
 8006576:	6021      	str	r1, [r4, #0]
 8006578:	d04b      	beq.n	8006612 <_printf_i+0x1a6>
 800657a:	4616      	mov	r6, r2
 800657c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006580:	fb03 5711 	mls	r7, r3, r1, r5
 8006584:	5dc7      	ldrb	r7, [r0, r7]
 8006586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658a:	462f      	mov	r7, r5
 800658c:	42bb      	cmp	r3, r7
 800658e:	460d      	mov	r5, r1
 8006590:	d9f4      	bls.n	800657c <_printf_i+0x110>
 8006592:	2b08      	cmp	r3, #8
 8006594:	d10b      	bne.n	80065ae <_printf_i+0x142>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	07df      	lsls	r7, r3, #31
 800659a:	d508      	bpl.n	80065ae <_printf_i+0x142>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	6861      	ldr	r1, [r4, #4]
 80065a0:	4299      	cmp	r1, r3
 80065a2:	bfde      	ittt	le
 80065a4:	2330      	movle	r3, #48	@ 0x30
 80065a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065aa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065ae:	1b92      	subs	r2, r2, r6
 80065b0:	6122      	str	r2, [r4, #16]
 80065b2:	464b      	mov	r3, r9
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f8cd a000 	str.w	sl, [sp]
 80065bc:	aa03      	add	r2, sp, #12
 80065be:	f7ff fee3 	bl	8006388 <_printf_common>
 80065c2:	3001      	adds	r0, #1
 80065c4:	d14a      	bne.n	800665c <_printf_i+0x1f0>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065ca:	b004      	add	sp, #16
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2778      	movs	r7, #120	@ 0x78
 80065da:	4832      	ldr	r0, [pc, #200]	@ (80066a4 <_printf_i+0x238>)
 80065dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	061f      	lsls	r7, r3, #24
 80065e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ea:	d402      	bmi.n	80065f2 <_printf_i+0x186>
 80065ec:	065f      	lsls	r7, r3, #25
 80065ee:	bf48      	it	mi
 80065f0:	b2ad      	uxthmi	r5, r5
 80065f2:	6031      	str	r1, [r6, #0]
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	bf44      	itt	mi
 80065f8:	f043 0320 	orrmi.w	r3, r3, #32
 80065fc:	6023      	strmi	r3, [r4, #0]
 80065fe:	b11d      	cbz	r5, 8006608 <_printf_i+0x19c>
 8006600:	2310      	movs	r3, #16
 8006602:	e7ad      	b.n	8006560 <_printf_i+0xf4>
 8006604:	4826      	ldr	r0, [pc, #152]	@ (80066a0 <_printf_i+0x234>)
 8006606:	e7e9      	b.n	80065dc <_printf_i+0x170>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	f023 0320 	bic.w	r3, r3, #32
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	e7f6      	b.n	8006600 <_printf_i+0x194>
 8006612:	4616      	mov	r6, r2
 8006614:	e7bd      	b.n	8006592 <_printf_i+0x126>
 8006616:	6833      	ldr	r3, [r6, #0]
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6961      	ldr	r1, [r4, #20]
 800661e:	6030      	str	r0, [r6, #0]
 8006620:	062e      	lsls	r6, r5, #24
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	d501      	bpl.n	800662a <_printf_i+0x1be>
 8006626:	6019      	str	r1, [r3, #0]
 8006628:	e002      	b.n	8006630 <_printf_i+0x1c4>
 800662a:	0668      	lsls	r0, r5, #25
 800662c:	d5fb      	bpl.n	8006626 <_printf_i+0x1ba>
 800662e:	8019      	strh	r1, [r3, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	4616      	mov	r6, r2
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	e7bc      	b.n	80065b2 <_printf_i+0x146>
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	2100      	movs	r1, #0
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	6032      	str	r2, [r6, #0]
 8006640:	681e      	ldr	r6, [r3, #0]
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	4630      	mov	r0, r6
 8006646:	f000 fa12 	bl	8006a6e <memchr>
 800664a:	b108      	cbz	r0, 8006650 <_printf_i+0x1e4>
 800664c:	1b80      	subs	r0, r0, r6
 800664e:	6060      	str	r0, [r4, #4]
 8006650:	6863      	ldr	r3, [r4, #4]
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	2300      	movs	r3, #0
 8006656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665a:	e7aa      	b.n	80065b2 <_printf_i+0x146>
 800665c:	4632      	mov	r2, r6
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	47d0      	blx	sl
 8006666:	3001      	adds	r0, #1
 8006668:	d0ad      	beq.n	80065c6 <_printf_i+0x15a>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	079b      	lsls	r3, r3, #30
 800666e:	d413      	bmi.n	8006698 <_printf_i+0x22c>
 8006670:	68e0      	ldr	r0, [r4, #12]
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	4298      	cmp	r0, r3
 8006676:	bfb8      	it	lt
 8006678:	4618      	movlt	r0, r3
 800667a:	e7a6      	b.n	80065ca <_printf_i+0x15e>
 800667c:	2301      	movs	r3, #1
 800667e:	4632      	mov	r2, r6
 8006680:	4649      	mov	r1, r9
 8006682:	4640      	mov	r0, r8
 8006684:	47d0      	blx	sl
 8006686:	3001      	adds	r0, #1
 8006688:	d09d      	beq.n	80065c6 <_printf_i+0x15a>
 800668a:	3501      	adds	r5, #1
 800668c:	68e3      	ldr	r3, [r4, #12]
 800668e:	9903      	ldr	r1, [sp, #12]
 8006690:	1a5b      	subs	r3, r3, r1
 8006692:	42ab      	cmp	r3, r5
 8006694:	dcf2      	bgt.n	800667c <_printf_i+0x210>
 8006696:	e7eb      	b.n	8006670 <_printf_i+0x204>
 8006698:	2500      	movs	r5, #0
 800669a:	f104 0619 	add.w	r6, r4, #25
 800669e:	e7f5      	b.n	800668c <_printf_i+0x220>
 80066a0:	0800a22c 	.word	0x0800a22c
 80066a4:	0800a23d 	.word	0x0800a23d

080066a8 <std>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	e9c0 3300 	strd	r3, r3, [r0]
 80066b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	2208      	movs	r2, #8
 80066c4:	305c      	adds	r0, #92	@ 0x5c
 80066c6:	f000 f953 	bl	8006970 <memset>
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x58>)
 80066cc:	6224      	str	r4, [r4, #32]
 80066ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <std+0x5c>)
 80066d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <std+0x60>)
 80066d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066d8:	4b0c      	ldr	r3, [pc, #48]	@ (800670c <std+0x64>)
 80066da:	6323      	str	r3, [r4, #48]	@ 0x30
 80066dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006710 <std+0x68>)
 80066de:	429c      	cmp	r4, r3
 80066e0:	d006      	beq.n	80066f0 <std+0x48>
 80066e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066e6:	4294      	cmp	r4, r2
 80066e8:	d002      	beq.n	80066f0 <std+0x48>
 80066ea:	33d0      	adds	r3, #208	@ 0xd0
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d105      	bne.n	80066fc <std+0x54>
 80066f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f000 b9b6 	b.w	8006a68 <__retarget_lock_init_recursive>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	bf00      	nop
 8006700:	08006871 	.word	0x08006871
 8006704:	08006893 	.word	0x08006893
 8006708:	080068cb 	.word	0x080068cb
 800670c:	080068ef 	.word	0x080068ef
 8006710:	200015f4 	.word	0x200015f4

08006714 <stdio_exit_handler>:
 8006714:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <stdio_exit_handler+0xc>)
 8006716:	4903      	ldr	r1, [pc, #12]	@ (8006724 <stdio_exit_handler+0x10>)
 8006718:	4803      	ldr	r0, [pc, #12]	@ (8006728 <stdio_exit_handler+0x14>)
 800671a:	f000 b869 	b.w	80067f0 <_fwalk_sglue>
 800671e:	bf00      	nop
 8006720:	20000018 	.word	0x20000018
 8006724:	080083e9 	.word	0x080083e9
 8006728:	20000028 	.word	0x20000028

0800672c <cleanup_stdio>:
 800672c:	6841      	ldr	r1, [r0, #4]
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <cleanup_stdio+0x34>)
 8006730:	b510      	push	{r4, lr}
 8006732:	4299      	cmp	r1, r3
 8006734:	4604      	mov	r4, r0
 8006736:	d001      	beq.n	800673c <cleanup_stdio+0x10>
 8006738:	f001 fe56 	bl	80083e8 <_fflush_r>
 800673c:	68a1      	ldr	r1, [r4, #8]
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <cleanup_stdio+0x38>)
 8006740:	4299      	cmp	r1, r3
 8006742:	d002      	beq.n	800674a <cleanup_stdio+0x1e>
 8006744:	4620      	mov	r0, r4
 8006746:	f001 fe4f 	bl	80083e8 <_fflush_r>
 800674a:	68e1      	ldr	r1, [r4, #12]
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <cleanup_stdio+0x3c>)
 800674e:	4299      	cmp	r1, r3
 8006750:	d004      	beq.n	800675c <cleanup_stdio+0x30>
 8006752:	4620      	mov	r0, r4
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	f001 be46 	b.w	80083e8 <_fflush_r>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	200015f4 	.word	0x200015f4
 8006764:	2000165c 	.word	0x2000165c
 8006768:	200016c4 	.word	0x200016c4

0800676c <global_stdio_init.part.0>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <global_stdio_init.part.0+0x30>)
 8006770:	4c0b      	ldr	r4, [pc, #44]	@ (80067a0 <global_stdio_init.part.0+0x34>)
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <global_stdio_init.part.0+0x38>)
 8006774:	4620      	mov	r0, r4
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	2104      	movs	r1, #4
 800677a:	2200      	movs	r2, #0
 800677c:	f7ff ff94 	bl	80066a8 <std>
 8006780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006784:	2201      	movs	r2, #1
 8006786:	2109      	movs	r1, #9
 8006788:	f7ff ff8e 	bl	80066a8 <std>
 800678c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006790:	2202      	movs	r2, #2
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	2112      	movs	r1, #18
 8006798:	f7ff bf86 	b.w	80066a8 <std>
 800679c:	2000172c 	.word	0x2000172c
 80067a0:	200015f4 	.word	0x200015f4
 80067a4:	08006715 	.word	0x08006715

080067a8 <__sfp_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__sfp_lock_acquire+0x8>)
 80067aa:	f000 b95e 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	20001735 	.word	0x20001735

080067b4 <__sfp_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_release+0x8>)
 80067b6:	f000 b959 	b.w	8006a6c <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	20001735 	.word	0x20001735

080067c0 <__sinit>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	f7ff fff0 	bl	80067a8 <__sfp_lock_acquire>
 80067c8:	6a23      	ldr	r3, [r4, #32]
 80067ca:	b11b      	cbz	r3, 80067d4 <__sinit+0x14>
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bff0 	b.w	80067b4 <__sfp_lock_release>
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <__sinit+0x28>)
 80067d6:	6223      	str	r3, [r4, #32]
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <__sinit+0x2c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f5      	bne.n	80067cc <__sinit+0xc>
 80067e0:	f7ff ffc4 	bl	800676c <global_stdio_init.part.0>
 80067e4:	e7f2      	b.n	80067cc <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	0800672d 	.word	0x0800672d
 80067ec:	2000172c 	.word	0x2000172c

080067f0 <_fwalk_sglue>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	4607      	mov	r7, r0
 80067f6:	4688      	mov	r8, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	2600      	movs	r6, #0
 80067fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006800:	f1b9 0901 	subs.w	r9, r9, #1
 8006804:	d505      	bpl.n	8006812 <_fwalk_sglue+0x22>
 8006806:	6824      	ldr	r4, [r4, #0]
 8006808:	2c00      	cmp	r4, #0
 800680a:	d1f7      	bne.n	80067fc <_fwalk_sglue+0xc>
 800680c:	4630      	mov	r0, r6
 800680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d907      	bls.n	8006828 <_fwalk_sglue+0x38>
 8006818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800681c:	3301      	adds	r3, #1
 800681e:	d003      	beq.n	8006828 <_fwalk_sglue+0x38>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	4306      	orrs	r6, r0
 8006828:	3568      	adds	r5, #104	@ 0x68
 800682a:	e7e9      	b.n	8006800 <_fwalk_sglue+0x10>

0800682c <siprintf>:
 800682c:	b40e      	push	{r1, r2, r3}
 800682e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006832:	b510      	push	{r4, lr}
 8006834:	2400      	movs	r4, #0
 8006836:	b09d      	sub	sp, #116	@ 0x74
 8006838:	ab1f      	add	r3, sp, #124	@ 0x7c
 800683a:	9002      	str	r0, [sp, #8]
 800683c:	9006      	str	r0, [sp, #24]
 800683e:	9107      	str	r1, [sp, #28]
 8006840:	9104      	str	r1, [sp, #16]
 8006842:	4809      	ldr	r0, [pc, #36]	@ (8006868 <siprintf+0x3c>)
 8006844:	4909      	ldr	r1, [pc, #36]	@ (800686c <siprintf+0x40>)
 8006846:	f853 2b04 	ldr.w	r2, [r3], #4
 800684a:	9105      	str	r1, [sp, #20]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	a902      	add	r1, sp, #8
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006854:	f001 fc4c 	bl	80080f0 <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	701c      	strb	r4, [r3, #0]
 800685c:	b01d      	add	sp, #116	@ 0x74
 800685e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006862:	b003      	add	sp, #12
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20000024 	.word	0x20000024
 800686c:	ffff0208 	.word	0xffff0208

08006870 <__sread>:
 8006870:	b510      	push	{r4, lr}
 8006872:	460c      	mov	r4, r1
 8006874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006878:	f000 f8a8 	bl	80069cc <_read_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	bfab      	itete	ge
 8006880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006882:	89a3      	ldrhlt	r3, [r4, #12]
 8006884:	181b      	addge	r3, r3, r0
 8006886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800688a:	bfac      	ite	ge
 800688c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800688e:	81a3      	strhlt	r3, [r4, #12]
 8006890:	bd10      	pop	{r4, pc}

08006892 <__swrite>:
 8006892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	461f      	mov	r7, r3
 8006898:	898b      	ldrh	r3, [r1, #12]
 800689a:	4605      	mov	r5, r0
 800689c:	05db      	lsls	r3, r3, #23
 800689e:	460c      	mov	r4, r1
 80068a0:	4616      	mov	r6, r2
 80068a2:	d505      	bpl.n	80068b0 <__swrite+0x1e>
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ac:	f000 f87c 	bl	80069a8 <_lseek_r>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	4632      	mov	r2, r6
 80068b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	4628      	mov	r0, r5
 80068bc:	463b      	mov	r3, r7
 80068be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	f000 b893 	b.w	80069f0 <_write_r>

080068ca <__sseek>:
 80068ca:	b510      	push	{r4, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d2:	f000 f869 	bl	80069a8 <_lseek_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	bf15      	itete	ne
 80068dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068e6:	81a3      	strheq	r3, [r4, #12]
 80068e8:	bf18      	it	ne
 80068ea:	81a3      	strhne	r3, [r4, #12]
 80068ec:	bd10      	pop	{r4, pc}

080068ee <__sclose>:
 80068ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f2:	f000 b849 	b.w	8006988 <_close_r>

080068f6 <_vsniprintf_r>:
 80068f6:	b530      	push	{r4, r5, lr}
 80068f8:	4614      	mov	r4, r2
 80068fa:	2c00      	cmp	r4, #0
 80068fc:	4605      	mov	r5, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	b09b      	sub	sp, #108	@ 0x6c
 8006902:	da05      	bge.n	8006910 <_vsniprintf_r+0x1a>
 8006904:	238b      	movs	r3, #139	@ 0x8b
 8006906:	6003      	str	r3, [r0, #0]
 8006908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800690c:	b01b      	add	sp, #108	@ 0x6c
 800690e:	bd30      	pop	{r4, r5, pc}
 8006910:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006914:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	9319      	str	r3, [sp, #100]	@ 0x64
 800691e:	bf0c      	ite	eq
 8006920:	4623      	moveq	r3, r4
 8006922:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006926:	9302      	str	r3, [sp, #8]
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800692e:	9100      	str	r1, [sp, #0]
 8006930:	9104      	str	r1, [sp, #16]
 8006932:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006936:	4669      	mov	r1, sp
 8006938:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800693a:	f001 fbd9 	bl	80080f0 <_svfiprintf_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	bfbc      	itt	lt
 8006942:	238b      	movlt	r3, #139	@ 0x8b
 8006944:	602b      	strlt	r3, [r5, #0]
 8006946:	2c00      	cmp	r4, #0
 8006948:	d0e0      	beq.n	800690c <_vsniprintf_r+0x16>
 800694a:	2200      	movs	r2, #0
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e7dc      	b.n	800690c <_vsniprintf_r+0x16>
	...

08006954 <vsniprintf>:
 8006954:	b507      	push	{r0, r1, r2, lr}
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	460a      	mov	r2, r1
 800695c:	4601      	mov	r1, r0
 800695e:	4803      	ldr	r0, [pc, #12]	@ (800696c <vsniprintf+0x18>)
 8006960:	6800      	ldr	r0, [r0, #0]
 8006962:	f7ff ffc8 	bl	80068f6 <_vsniprintf_r>
 8006966:	b003      	add	sp, #12
 8006968:	f85d fb04 	ldr.w	pc, [sp], #4
 800696c:	20000024 	.word	0x20000024

08006970 <memset>:
 8006970:	4603      	mov	r3, r0
 8006972:	4402      	add	r2, r0
 8006974:	4293      	cmp	r3, r2
 8006976:	d100      	bne.n	800697a <memset+0xa>
 8006978:	4770      	bx	lr
 800697a:	f803 1b01 	strb.w	r1, [r3], #1
 800697e:	e7f9      	b.n	8006974 <memset+0x4>

08006980 <_localeconv_r>:
 8006980:	4800      	ldr	r0, [pc, #0]	@ (8006984 <_localeconv_r+0x4>)
 8006982:	4770      	bx	lr
 8006984:	20000164 	.word	0x20000164

08006988 <_close_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	2300      	movs	r3, #0
 800698c:	4d05      	ldr	r5, [pc, #20]	@ (80069a4 <_close_r+0x1c>)
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fb fdbd 	bl	8002512 <_close>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_close_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_close_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20001730 	.word	0x20001730

080069a8 <_lseek_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4604      	mov	r4, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	2200      	movs	r2, #0
 80069b2:	4d05      	ldr	r5, [pc, #20]	@ (80069c8 <_lseek_r+0x20>)
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f7fb fdcf 	bl	800255a <_lseek>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_lseek_r+0x1e>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_lseek_r+0x1e>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20001730 	.word	0x20001730

080069cc <_read_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	2200      	movs	r2, #0
 80069d6:	4d05      	ldr	r5, [pc, #20]	@ (80069ec <_read_r+0x20>)
 80069d8:	602a      	str	r2, [r5, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7fb fd60 	bl	80024a0 <_read>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_read_r+0x1e>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_read_r+0x1e>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20001730 	.word	0x20001730

080069f0 <_write_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	2200      	movs	r2, #0
 80069fa:	4d05      	ldr	r5, [pc, #20]	@ (8006a10 <_write_r+0x20>)
 80069fc:	602a      	str	r2, [r5, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f7fb fd6b 	bl	80024da <_write>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_write_r+0x1e>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_write_r+0x1e>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	20001730 	.word	0x20001730

08006a14 <__errno>:
 8006a14:	4b01      	ldr	r3, [pc, #4]	@ (8006a1c <__errno+0x8>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000024 	.word	0x20000024

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	2600      	movs	r6, #0
 8006a24:	4d0c      	ldr	r5, [pc, #48]	@ (8006a58 <__libc_init_array+0x38>)
 8006a26:	4c0d      	ldr	r4, [pc, #52]	@ (8006a5c <__libc_init_array+0x3c>)
 8006a28:	1b64      	subs	r4, r4, r5
 8006a2a:	10a4      	asrs	r4, r4, #2
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	f002 f96c 	bl	8008d0c <_init>
 8006a34:	2600      	movs	r6, #0
 8006a36:	4d0a      	ldr	r5, [pc, #40]	@ (8006a60 <__libc_init_array+0x40>)
 8006a38:	4c0a      	ldr	r4, [pc, #40]	@ (8006a64 <__libc_init_array+0x44>)
 8006a3a:	1b64      	subs	r4, r4, r5
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	0800a5a8 	.word	0x0800a5a8
 8006a5c:	0800a5a8 	.word	0x0800a5a8
 8006a60:	0800a5a8 	.word	0x0800a5a8
 8006a64:	0800a5ac 	.word	0x0800a5ac

08006a68 <__retarget_lock_init_recursive>:
 8006a68:	4770      	bx	lr

08006a6a <__retarget_lock_acquire_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <__retarget_lock_release_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <memchr>:
 8006a6e:	4603      	mov	r3, r0
 8006a70:	b510      	push	{r4, lr}
 8006a72:	b2c9      	uxtb	r1, r1
 8006a74:	4402      	add	r2, r0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	d101      	bne.n	8006a80 <memchr+0x12>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e003      	b.n	8006a88 <memchr+0x1a>
 8006a80:	7804      	ldrb	r4, [r0, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	428c      	cmp	r4, r1
 8006a86:	d1f6      	bne.n	8006a76 <memchr+0x8>
 8006a88:	bd10      	pop	{r4, pc}

08006a8a <quorem>:
 8006a8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8e:	6903      	ldr	r3, [r0, #16]
 8006a90:	690c      	ldr	r4, [r1, #16]
 8006a92:	4607      	mov	r7, r0
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	db7e      	blt.n	8006b96 <quorem+0x10c>
 8006a98:	3c01      	subs	r4, #1
 8006a9a:	00a3      	lsls	r3, r4, #2
 8006a9c:	f100 0514 	add.w	r5, r0, #20
 8006aa0:	f101 0814 	add.w	r8, r1, #20
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ac0:	d32e      	bcc.n	8006b20 <quorem+0x96>
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	46c4      	mov	ip, r8
 8006ac8:	46ae      	mov	lr, r5
 8006aca:	46d3      	mov	fp, sl
 8006acc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ad0:	b298      	uxth	r0, r3
 8006ad2:	fb06 a000 	mla	r0, r6, r0, sl
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	0c02      	lsrs	r2, r0, #16
 8006ada:	fb06 2303 	mla	r3, r6, r3, r2
 8006ade:	f8de 2000 	ldr.w	r2, [lr]
 8006ae2:	b280      	uxth	r0, r0
 8006ae4:	b292      	uxth	r2, r2
 8006ae6:	1a12      	subs	r2, r2, r0
 8006ae8:	445a      	add	r2, fp
 8006aea:	f8de 0000 	ldr.w	r0, [lr]
 8006aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006af8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006afc:	b292      	uxth	r2, r2
 8006afe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b02:	45e1      	cmp	r9, ip
 8006b04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b08:	f84e 2b04 	str.w	r2, [lr], #4
 8006b0c:	d2de      	bcs.n	8006acc <quorem+0x42>
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	58eb      	ldr	r3, [r5, r3]
 8006b12:	b92b      	cbnz	r3, 8006b20 <quorem+0x96>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	3b04      	subs	r3, #4
 8006b18:	429d      	cmp	r5, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	d32f      	bcc.n	8006b7e <quorem+0xf4>
 8006b1e:	613c      	str	r4, [r7, #16]
 8006b20:	4638      	mov	r0, r7
 8006b22:	f001 f981 	bl	8007e28 <__mcmp>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	db25      	blt.n	8006b76 <quorem+0xec>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b32:	f8d1 c000 	ldr.w	ip, [r1]
 8006b36:	fa1f fe82 	uxth.w	lr, r2
 8006b3a:	fa1f f38c 	uxth.w	r3, ip
 8006b3e:	eba3 030e 	sub.w	r3, r3, lr
 8006b42:	4403      	add	r3, r0
 8006b44:	0c12      	lsrs	r2, r2, #16
 8006b46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b54:	45c1      	cmp	r9, r8
 8006b56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b5a:	f841 3b04 	str.w	r3, [r1], #4
 8006b5e:	d2e6      	bcs.n	8006b2e <quorem+0xa4>
 8006b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b68:	b922      	cbnz	r2, 8006b74 <quorem+0xea>
 8006b6a:	3b04      	subs	r3, #4
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	d30b      	bcc.n	8006b8a <quorem+0x100>
 8006b72:	613c      	str	r4, [r7, #16]
 8006b74:	3601      	adds	r6, #1
 8006b76:	4630      	mov	r0, r6
 8006b78:	b003      	add	sp, #12
 8006b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1cb      	bne.n	8006b1e <quorem+0x94>
 8006b86:	3c01      	subs	r4, #1
 8006b88:	e7c6      	b.n	8006b18 <quorem+0x8e>
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d1ef      	bne.n	8006b72 <quorem+0xe8>
 8006b92:	3c01      	subs	r4, #1
 8006b94:	e7ea      	b.n	8006b6c <quorem+0xe2>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e7ee      	b.n	8006b78 <quorem+0xee>
 8006b9a:	0000      	movs	r0, r0
 8006b9c:	0000      	movs	r0, r0
	...

08006ba0 <_dtoa_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	461d      	mov	r5, r3
 8006ba8:	69c7      	ldr	r7, [r0, #28]
 8006baa:	b097      	sub	sp, #92	@ 0x5c
 8006bac:	4681      	mov	r9, r0
 8006bae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006bb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006bb4:	b97f      	cbnz	r7, 8006bd6 <_dtoa_r+0x36>
 8006bb6:	2010      	movs	r0, #16
 8006bb8:	f000 fe0e 	bl	80077d8 <malloc>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f8c9 001c 	str.w	r0, [r9, #28]
 8006bc2:	b920      	cbnz	r0, 8006bce <_dtoa_r+0x2e>
 8006bc4:	21ef      	movs	r1, #239	@ 0xef
 8006bc6:	4bac      	ldr	r3, [pc, #688]	@ (8006e78 <_dtoa_r+0x2d8>)
 8006bc8:	48ac      	ldr	r0, [pc, #688]	@ (8006e7c <_dtoa_r+0x2dc>)
 8006bca:	f001 fc6d 	bl	80084a8 <__assert_func>
 8006bce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006bd2:	6007      	str	r7, [r0, #0]
 8006bd4:	60c7      	str	r7, [r0, #12]
 8006bd6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	b159      	cbz	r1, 8006bf6 <_dtoa_r+0x56>
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	2301      	movs	r3, #1
 8006be2:	4093      	lsls	r3, r2
 8006be4:	604a      	str	r2, [r1, #4]
 8006be6:	608b      	str	r3, [r1, #8]
 8006be8:	4648      	mov	r0, r9
 8006bea:	f000 feeb 	bl	80079c4 <_Bfree>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	1e2b      	subs	r3, r5, #0
 8006bf8:	bfaf      	iteee	ge
 8006bfa:	2300      	movge	r3, #0
 8006bfc:	2201      	movlt	r2, #1
 8006bfe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c02:	9307      	strlt	r3, [sp, #28]
 8006c04:	bfa8      	it	ge
 8006c06:	6033      	strge	r3, [r6, #0]
 8006c08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8006e80 <_dtoa_r+0x2e0>)
 8006c0e:	bfb8      	it	lt
 8006c10:	6032      	strlt	r2, [r6, #0]
 8006c12:	ea33 0308 	bics.w	r3, r3, r8
 8006c16:	d112      	bne.n	8006c3e <_dtoa_r+0x9e>
 8006c18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c24:	4323      	orrs	r3, r4
 8006c26:	f000 855e 	beq.w	80076e6 <_dtoa_r+0xb46>
 8006c2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e84 <_dtoa_r+0x2e4>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8560 	beq.w	80076f6 <_dtoa_r+0xb56>
 8006c36:	f10a 0303 	add.w	r3, sl, #3
 8006c3a:	f000 bd5a 	b.w	80076f2 <_dtoa_r+0xb52>
 8006c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f7f9 ff5f 	bl	8000b10 <__aeabi_dcmpeq>
 8006c52:	4607      	mov	r7, r0
 8006c54:	b158      	cbz	r0, 8006c6e <_dtoa_r+0xce>
 8006c56:	2301      	movs	r3, #1
 8006c58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c5e:	b113      	cbz	r3, 8006c66 <_dtoa_r+0xc6>
 8006c60:	4b89      	ldr	r3, [pc, #548]	@ (8006e88 <_dtoa_r+0x2e8>)
 8006c62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006e8c <_dtoa_r+0x2ec>
 8006c6a:	f000 bd44 	b.w	80076f6 <_dtoa_r+0xb56>
 8006c6e:	ab14      	add	r3, sp, #80	@ 0x50
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	ab15      	add	r3, sp, #84	@ 0x54
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	4648      	mov	r0, r9
 8006c78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c7c:	f001 f984 	bl	8007f88 <__d2b>
 8006c80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006c84:	9003      	str	r0, [sp, #12]
 8006c86:	2e00      	cmp	r6, #0
 8006c88:	d078      	beq.n	8006d7c <_dtoa_r+0x1dc>
 8006c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ca0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8006e90 <_dtoa_r+0x2f0>)
 8006ca8:	f7f9 fb12 	bl	80002d0 <__aeabi_dsub>
 8006cac:	a36c      	add	r3, pc, #432	@ (adr r3, 8006e60 <_dtoa_r+0x2c0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 fcc5 	bl	8000640 <__aeabi_dmul>
 8006cb6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006e68 <_dtoa_r+0x2c8>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7f9 fb0a 	bl	80002d4 <__adddf3>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	f7f9 fc51 	bl	800056c <__aeabi_i2d>
 8006cca:	a369      	add	r3, pc, #420	@ (adr r3, 8006e70 <_dtoa_r+0x2d0>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fcb6 	bl	8000640 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fafa 	bl	80002d4 <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	f7f9 ff5c 	bl	8000ba0 <__aeabi_d2iz>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4607      	mov	r7, r0
 8006cec:	2300      	movs	r3, #0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 ff17 	bl	8000b24 <__aeabi_dcmplt>
 8006cf6:	b140      	cbz	r0, 8006d0a <_dtoa_r+0x16a>
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7f9 fc37 	bl	800056c <__aeabi_i2d>
 8006cfe:	4622      	mov	r2, r4
 8006d00:	462b      	mov	r3, r5
 8006d02:	f7f9 ff05 	bl	8000b10 <__aeabi_dcmpeq>
 8006d06:	b900      	cbnz	r0, 8006d0a <_dtoa_r+0x16a>
 8006d08:	3f01      	subs	r7, #1
 8006d0a:	2f16      	cmp	r7, #22
 8006d0c:	d854      	bhi.n	8006db8 <_dtoa_r+0x218>
 8006d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d12:	4b60      	ldr	r3, [pc, #384]	@ (8006e94 <_dtoa_r+0x2f4>)
 8006d14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 ff02 	bl	8000b24 <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d04b      	beq.n	8006dbc <_dtoa_r+0x21c>
 8006d24:	2300      	movs	r3, #0
 8006d26:	3f01      	subs	r7, #1
 8006d28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d2c:	1b9b      	subs	r3, r3, r6
 8006d2e:	1e5a      	subs	r2, r3, #1
 8006d30:	bf49      	itett	mi
 8006d32:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d36:	2300      	movpl	r3, #0
 8006d38:	9304      	strmi	r3, [sp, #16]
 8006d3a:	2300      	movmi	r3, #0
 8006d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d3e:	bf54      	ite	pl
 8006d40:	9304      	strpl	r3, [sp, #16]
 8006d42:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	db3b      	blt.n	8006dc0 <_dtoa_r+0x220>
 8006d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006d4c:	443b      	add	r3, r7
 8006d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d50:	2300      	movs	r3, #0
 8006d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d865      	bhi.n	8006e26 <_dtoa_r+0x286>
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	bfc4      	itt	gt
 8006d5e:	3b04      	subgt	r3, #4
 8006d60:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006d62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d64:	bfc8      	it	gt
 8006d66:	2400      	movgt	r4, #0
 8006d68:	f1a3 0302 	sub.w	r3, r3, #2
 8006d6c:	bfd8      	it	le
 8006d6e:	2401      	movle	r4, #1
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d864      	bhi.n	8006e3e <_dtoa_r+0x29e>
 8006d74:	e8df f003 	tbb	[pc, r3]
 8006d78:	2c385553 	.word	0x2c385553
 8006d7c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d80:	441e      	add	r6, r3
 8006d82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	bfc1      	itttt	gt
 8006d8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d8e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d9a:	bfd6      	itet	le
 8006d9c:	f1c3 0320 	rsble	r3, r3, #32
 8006da0:	ea48 0003 	orrgt.w	r0, r8, r3
 8006da4:	fa04 f003 	lslle.w	r0, r4, r3
 8006da8:	f7f9 fbd0 	bl	800054c <__aeabi_ui2d>
 8006dac:	2201      	movs	r2, #1
 8006dae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006db2:	3e01      	subs	r6, #1
 8006db4:	9212      	str	r2, [sp, #72]	@ 0x48
 8006db6:	e774      	b.n	8006ca2 <_dtoa_r+0x102>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e7b5      	b.n	8006d28 <_dtoa_r+0x188>
 8006dbc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006dbe:	e7b4      	b.n	8006d2a <_dtoa_r+0x18a>
 8006dc0:	9b04      	ldr	r3, [sp, #16]
 8006dc2:	1bdb      	subs	r3, r3, r7
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	427b      	negs	r3, r7
 8006dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dca:	2300      	movs	r3, #0
 8006dcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dce:	e7c1      	b.n	8006d54 <_dtoa_r+0x1b4>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dd6:	eb07 0b03 	add.w	fp, r7, r3
 8006dda:	f10b 0301 	add.w	r3, fp, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	9308      	str	r3, [sp, #32]
 8006de2:	bfb8      	it	lt
 8006de4:	2301      	movlt	r3, #1
 8006de6:	e006      	b.n	8006df6 <_dtoa_r+0x256>
 8006de8:	2301      	movs	r3, #1
 8006dea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd28      	ble.n	8006e44 <_dtoa_r+0x2a4>
 8006df2:	469b      	mov	fp, r3
 8006df4:	9308      	str	r3, [sp, #32]
 8006df6:	2100      	movs	r1, #0
 8006df8:	2204      	movs	r2, #4
 8006dfa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006dfe:	f102 0514 	add.w	r5, r2, #20
 8006e02:	429d      	cmp	r5, r3
 8006e04:	d926      	bls.n	8006e54 <_dtoa_r+0x2b4>
 8006e06:	6041      	str	r1, [r0, #4]
 8006e08:	4648      	mov	r0, r9
 8006e0a:	f000 fd9b 	bl	8007944 <_Balloc>
 8006e0e:	4682      	mov	sl, r0
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d143      	bne.n	8006e9c <_dtoa_r+0x2fc>
 8006e14:	4602      	mov	r2, r0
 8006e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <_dtoa_r+0x2f8>)
 8006e1c:	e6d4      	b.n	8006bc8 <_dtoa_r+0x28>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e7e3      	b.n	8006dea <_dtoa_r+0x24a>
 8006e22:	2300      	movs	r3, #0
 8006e24:	e7d5      	b.n	8006dd2 <_dtoa_r+0x232>
 8006e26:	2401      	movs	r4, #1
 8006e28:	2300      	movs	r3, #0
 8006e2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e2e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006e32:	2200      	movs	r2, #0
 8006e34:	2312      	movs	r3, #18
 8006e36:	f8cd b020 	str.w	fp, [sp, #32]
 8006e3a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006e3c:	e7db      	b.n	8006df6 <_dtoa_r+0x256>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e42:	e7f4      	b.n	8006e2e <_dtoa_r+0x28e>
 8006e44:	f04f 0b01 	mov.w	fp, #1
 8006e48:	465b      	mov	r3, fp
 8006e4a:	f8cd b020 	str.w	fp, [sp, #32]
 8006e4e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006e52:	e7d0      	b.n	8006df6 <_dtoa_r+0x256>
 8006e54:	3101      	adds	r1, #1
 8006e56:	0052      	lsls	r2, r2, #1
 8006e58:	e7d1      	b.n	8006dfe <_dtoa_r+0x25e>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	0800a25b 	.word	0x0800a25b
 8006e7c:	0800a272 	.word	0x0800a272
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	0800a257 	.word	0x0800a257
 8006e88:	0800a22b 	.word	0x0800a22b
 8006e8c:	0800a22a 	.word	0x0800a22a
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	0800a3c0 	.word	0x0800a3c0
 8006e98:	0800a2ca 	.word	0x0800a2ca
 8006e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	2b0e      	cmp	r3, #14
 8006ea6:	f200 80a1 	bhi.w	8006fec <_dtoa_r+0x44c>
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	f000 809e 	beq.w	8006fec <_dtoa_r+0x44c>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	dd33      	ble.n	8006f1c <_dtoa_r+0x37c>
 8006eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8007128 <_dtoa_r+0x588>)
 8006eb6:	f007 020f 	and.w	r2, r7, #15
 8006eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebe:	05f8      	lsls	r0, r7, #23
 8006ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ec4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ecc:	d516      	bpl.n	8006efc <_dtoa_r+0x35c>
 8006ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed2:	4b96      	ldr	r3, [pc, #600]	@ (800712c <_dtoa_r+0x58c>)
 8006ed4:	2603      	movs	r6, #3
 8006ed6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eda:	f7f9 fcdb 	bl	8000894 <__aeabi_ddiv>
 8006ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ee2:	f004 040f 	and.w	r4, r4, #15
 8006ee6:	4d91      	ldr	r5, [pc, #580]	@ (800712c <_dtoa_r+0x58c>)
 8006ee8:	b954      	cbnz	r4, 8006f00 <_dtoa_r+0x360>
 8006eea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ef2:	f7f9 fccf 	bl	8000894 <__aeabi_ddiv>
 8006ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006efa:	e028      	b.n	8006f4e <_dtoa_r+0x3ae>
 8006efc:	2602      	movs	r6, #2
 8006efe:	e7f2      	b.n	8006ee6 <_dtoa_r+0x346>
 8006f00:	07e1      	lsls	r1, r4, #31
 8006f02:	d508      	bpl.n	8006f16 <_dtoa_r+0x376>
 8006f04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f0c:	f7f9 fb98 	bl	8000640 <__aeabi_dmul>
 8006f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f14:	3601      	adds	r6, #1
 8006f16:	1064      	asrs	r4, r4, #1
 8006f18:	3508      	adds	r5, #8
 8006f1a:	e7e5      	b.n	8006ee8 <_dtoa_r+0x348>
 8006f1c:	f000 80af 	beq.w	800707e <_dtoa_r+0x4de>
 8006f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f24:	427c      	negs	r4, r7
 8006f26:	4b80      	ldr	r3, [pc, #512]	@ (8007128 <_dtoa_r+0x588>)
 8006f28:	f004 020f 	and.w	r2, r4, #15
 8006f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 fb84 	bl	8000640 <__aeabi_dmul>
 8006f38:	2602      	movs	r6, #2
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f40:	4d7a      	ldr	r5, [pc, #488]	@ (800712c <_dtoa_r+0x58c>)
 8006f42:	1124      	asrs	r4, r4, #4
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	f040 808f 	bne.w	8007068 <_dtoa_r+0x4c8>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1d3      	bne.n	8006ef6 <_dtoa_r+0x356>
 8006f4e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8094 	beq.w	8007082 <_dtoa_r+0x4e2>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4b73      	ldr	r3, [pc, #460]	@ (8007130 <_dtoa_r+0x590>)
 8006f62:	f7f9 fddf 	bl	8000b24 <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f000 808b 	beq.w	8007082 <_dtoa_r+0x4e2>
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8087 	beq.w	8007082 <_dtoa_r+0x4e2>
 8006f74:	f1bb 0f00 	cmp.w	fp, #0
 8006f78:	dd34      	ble.n	8006fe4 <_dtoa_r+0x444>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4b6c      	ldr	r3, [pc, #432]	@ (8007134 <_dtoa_r+0x594>)
 8006f82:	f7f9 fb5d 	bl	8000640 <__aeabi_dmul>
 8006f86:	465c      	mov	r4, fp
 8006f88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f8c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006f90:	3601      	adds	r6, #1
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 faea 	bl	800056c <__aeabi_i2d>
 8006f98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f9c:	f7f9 fb50 	bl	8000640 <__aeabi_dmul>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b65      	ldr	r3, [pc, #404]	@ (8007138 <_dtoa_r+0x598>)
 8006fa4:	f7f9 f996 	bl	80002d4 <__adddf3>
 8006fa8:	4605      	mov	r5, r0
 8006faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	d16a      	bne.n	8007088 <_dtoa_r+0x4e8>
 8006fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4b60      	ldr	r3, [pc, #384]	@ (800713c <_dtoa_r+0x59c>)
 8006fba:	f7f9 f989 	bl	80002d0 <__aeabi_dsub>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4633      	mov	r3, r6
 8006fca:	f7f9 fdc9 	bl	8000b60 <__aeabi_dcmpgt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f040 8298 	bne.w	8007504 <_dtoa_r+0x964>
 8006fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fd8:	462a      	mov	r2, r5
 8006fda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fde:	f7f9 fda1 	bl	8000b24 <__aeabi_dcmplt>
 8006fe2:	bb38      	cbnz	r0, 8007034 <_dtoa_r+0x494>
 8006fe4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fe8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006fec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f2c0 8157 	blt.w	80072a2 <_dtoa_r+0x702>
 8006ff4:	2f0e      	cmp	r7, #14
 8006ff6:	f300 8154 	bgt.w	80072a2 <_dtoa_r+0x702>
 8006ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8007128 <_dtoa_r+0x588>)
 8006ffc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007000:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007004:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007008:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800700a:	2b00      	cmp	r3, #0
 800700c:	f280 80e5 	bge.w	80071da <_dtoa_r+0x63a>
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f300 80e1 	bgt.w	80071da <_dtoa_r+0x63a>
 8007018:	d10c      	bne.n	8007034 <_dtoa_r+0x494>
 800701a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800701e:	2200      	movs	r2, #0
 8007020:	4b46      	ldr	r3, [pc, #280]	@ (800713c <_dtoa_r+0x59c>)
 8007022:	f7f9 fb0d 	bl	8000640 <__aeabi_dmul>
 8007026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800702a:	f7f9 fd8f 	bl	8000b4c <__aeabi_dcmpge>
 800702e:	2800      	cmp	r0, #0
 8007030:	f000 8266 	beq.w	8007500 <_dtoa_r+0x960>
 8007034:	2400      	movs	r4, #0
 8007036:	4625      	mov	r5, r4
 8007038:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800703a:	4656      	mov	r6, sl
 800703c:	ea6f 0803 	mvn.w	r8, r3
 8007040:	2700      	movs	r7, #0
 8007042:	4621      	mov	r1, r4
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fcbd 	bl	80079c4 <_Bfree>
 800704a:	2d00      	cmp	r5, #0
 800704c:	f000 80bd 	beq.w	80071ca <_dtoa_r+0x62a>
 8007050:	b12f      	cbz	r7, 800705e <_dtoa_r+0x4be>
 8007052:	42af      	cmp	r7, r5
 8007054:	d003      	beq.n	800705e <_dtoa_r+0x4be>
 8007056:	4639      	mov	r1, r7
 8007058:	4648      	mov	r0, r9
 800705a:	f000 fcb3 	bl	80079c4 <_Bfree>
 800705e:	4629      	mov	r1, r5
 8007060:	4648      	mov	r0, r9
 8007062:	f000 fcaf 	bl	80079c4 <_Bfree>
 8007066:	e0b0      	b.n	80071ca <_dtoa_r+0x62a>
 8007068:	07e2      	lsls	r2, r4, #31
 800706a:	d505      	bpl.n	8007078 <_dtoa_r+0x4d8>
 800706c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007070:	f7f9 fae6 	bl	8000640 <__aeabi_dmul>
 8007074:	2301      	movs	r3, #1
 8007076:	3601      	adds	r6, #1
 8007078:	1064      	asrs	r4, r4, #1
 800707a:	3508      	adds	r5, #8
 800707c:	e762      	b.n	8006f44 <_dtoa_r+0x3a4>
 800707e:	2602      	movs	r6, #2
 8007080:	e765      	b.n	8006f4e <_dtoa_r+0x3ae>
 8007082:	46b8      	mov	r8, r7
 8007084:	9c08      	ldr	r4, [sp, #32]
 8007086:	e784      	b.n	8006f92 <_dtoa_r+0x3f2>
 8007088:	4b27      	ldr	r3, [pc, #156]	@ (8007128 <_dtoa_r+0x588>)
 800708a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800708c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007094:	4454      	add	r4, sl
 8007096:	2900      	cmp	r1, #0
 8007098:	d054      	beq.n	8007144 <_dtoa_r+0x5a4>
 800709a:	2000      	movs	r0, #0
 800709c:	4928      	ldr	r1, [pc, #160]	@ (8007140 <_dtoa_r+0x5a0>)
 800709e:	f7f9 fbf9 	bl	8000894 <__aeabi_ddiv>
 80070a2:	4633      	mov	r3, r6
 80070a4:	462a      	mov	r2, r5
 80070a6:	f7f9 f913 	bl	80002d0 <__aeabi_dsub>
 80070aa:	4656      	mov	r6, sl
 80070ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b4:	f7f9 fd74 	bl	8000ba0 <__aeabi_d2iz>
 80070b8:	4605      	mov	r5, r0
 80070ba:	f7f9 fa57 	bl	800056c <__aeabi_i2d>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c6:	f7f9 f903 	bl	80002d0 <__aeabi_dsub>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	3530      	adds	r5, #48	@ 0x30
 80070d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070d8:	f806 5b01 	strb.w	r5, [r6], #1
 80070dc:	f7f9 fd22 	bl	8000b24 <__aeabi_dcmplt>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d172      	bne.n	80071ca <_dtoa_r+0x62a>
 80070e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070e8:	2000      	movs	r0, #0
 80070ea:	4911      	ldr	r1, [pc, #68]	@ (8007130 <_dtoa_r+0x590>)
 80070ec:	f7f9 f8f0 	bl	80002d0 <__aeabi_dsub>
 80070f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070f4:	f7f9 fd16 	bl	8000b24 <__aeabi_dcmplt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f040 80b4 	bne.w	8007266 <_dtoa_r+0x6c6>
 80070fe:	42a6      	cmp	r6, r4
 8007100:	f43f af70 	beq.w	8006fe4 <_dtoa_r+0x444>
 8007104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007108:	2200      	movs	r2, #0
 800710a:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <_dtoa_r+0x594>)
 800710c:	f7f9 fa98 	bl	8000640 <__aeabi_dmul>
 8007110:	2200      	movs	r2, #0
 8007112:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800711a:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <_dtoa_r+0x594>)
 800711c:	f7f9 fa90 	bl	8000640 <__aeabi_dmul>
 8007120:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007124:	e7c4      	b.n	80070b0 <_dtoa_r+0x510>
 8007126:	bf00      	nop
 8007128:	0800a3c0 	.word	0x0800a3c0
 800712c:	0800a398 	.word	0x0800a398
 8007130:	3ff00000 	.word	0x3ff00000
 8007134:	40240000 	.word	0x40240000
 8007138:	401c0000 	.word	0x401c0000
 800713c:	40140000 	.word	0x40140000
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	f7f9 fa7a 	bl	8000640 <__aeabi_dmul>
 800714c:	4656      	mov	r6, sl
 800714e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007152:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007158:	f7f9 fd22 	bl	8000ba0 <__aeabi_d2iz>
 800715c:	4605      	mov	r5, r0
 800715e:	f7f9 fa05 	bl	800056c <__aeabi_i2d>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800716a:	f7f9 f8b1 	bl	80002d0 <__aeabi_dsub>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	3530      	adds	r5, #48	@ 0x30
 8007174:	f806 5b01 	strb.w	r5, [r6], #1
 8007178:	42a6      	cmp	r6, r4
 800717a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	d124      	bne.n	80071ce <_dtoa_r+0x62e>
 8007184:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007188:	4bae      	ldr	r3, [pc, #696]	@ (8007444 <_dtoa_r+0x8a4>)
 800718a:	f7f9 f8a3 	bl	80002d4 <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007196:	f7f9 fce3 	bl	8000b60 <__aeabi_dcmpgt>
 800719a:	2800      	cmp	r0, #0
 800719c:	d163      	bne.n	8007266 <_dtoa_r+0x6c6>
 800719e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071a2:	2000      	movs	r0, #0
 80071a4:	49a7      	ldr	r1, [pc, #668]	@ (8007444 <_dtoa_r+0x8a4>)
 80071a6:	f7f9 f893 	bl	80002d0 <__aeabi_dsub>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071b2:	f7f9 fcb7 	bl	8000b24 <__aeabi_dcmplt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f43f af14 	beq.w	8006fe4 <_dtoa_r+0x444>
 80071bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071be:	1e73      	subs	r3, r6, #1
 80071c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071c6:	2b30      	cmp	r3, #48	@ 0x30
 80071c8:	d0f8      	beq.n	80071bc <_dtoa_r+0x61c>
 80071ca:	4647      	mov	r7, r8
 80071cc:	e03b      	b.n	8007246 <_dtoa_r+0x6a6>
 80071ce:	4b9e      	ldr	r3, [pc, #632]	@ (8007448 <_dtoa_r+0x8a8>)
 80071d0:	f7f9 fa36 	bl	8000640 <__aeabi_dmul>
 80071d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071d8:	e7bc      	b.n	8007154 <_dtoa_r+0x5b4>
 80071da:	4656      	mov	r6, sl
 80071dc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80071e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 fb54 	bl	8000894 <__aeabi_ddiv>
 80071ec:	f7f9 fcd8 	bl	8000ba0 <__aeabi_d2iz>
 80071f0:	4680      	mov	r8, r0
 80071f2:	f7f9 f9bb 	bl	800056c <__aeabi_i2d>
 80071f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071fa:	f7f9 fa21 	bl	8000640 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 f863 	bl	80002d0 <__aeabi_dsub>
 800720a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800720e:	9d08      	ldr	r5, [sp, #32]
 8007210:	f806 4b01 	strb.w	r4, [r6], #1
 8007214:	eba6 040a 	sub.w	r4, r6, sl
 8007218:	42a5      	cmp	r5, r4
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	d133      	bne.n	8007288 <_dtoa_r+0x6e8>
 8007220:	f7f9 f858 	bl	80002d4 <__adddf3>
 8007224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	f7f9 fc98 	bl	8000b60 <__aeabi_dcmpgt>
 8007230:	b9c0      	cbnz	r0, 8007264 <_dtoa_r+0x6c4>
 8007232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fc69 	bl	8000b10 <__aeabi_dcmpeq>
 800723e:	b110      	cbz	r0, 8007246 <_dtoa_r+0x6a6>
 8007240:	f018 0f01 	tst.w	r8, #1
 8007244:	d10e      	bne.n	8007264 <_dtoa_r+0x6c4>
 8007246:	4648      	mov	r0, r9
 8007248:	9903      	ldr	r1, [sp, #12]
 800724a:	f000 fbbb 	bl	80079c4 <_Bfree>
 800724e:	2300      	movs	r3, #0
 8007250:	7033      	strb	r3, [r6, #0]
 8007252:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007254:	3701      	adds	r7, #1
 8007256:	601f      	str	r7, [r3, #0]
 8007258:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 824b 	beq.w	80076f6 <_dtoa_r+0xb56>
 8007260:	601e      	str	r6, [r3, #0]
 8007262:	e248      	b.n	80076f6 <_dtoa_r+0xb56>
 8007264:	46b8      	mov	r8, r7
 8007266:	4633      	mov	r3, r6
 8007268:	461e      	mov	r6, r3
 800726a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800726e:	2a39      	cmp	r2, #57	@ 0x39
 8007270:	d106      	bne.n	8007280 <_dtoa_r+0x6e0>
 8007272:	459a      	cmp	sl, r3
 8007274:	d1f8      	bne.n	8007268 <_dtoa_r+0x6c8>
 8007276:	2230      	movs	r2, #48	@ 0x30
 8007278:	f108 0801 	add.w	r8, r8, #1
 800727c:	f88a 2000 	strb.w	r2, [sl]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	3201      	adds	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e7a0      	b.n	80071ca <_dtoa_r+0x62a>
 8007288:	2200      	movs	r2, #0
 800728a:	4b6f      	ldr	r3, [pc, #444]	@ (8007448 <_dtoa_r+0x8a8>)
 800728c:	f7f9 f9d8 	bl	8000640 <__aeabi_dmul>
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	f7f9 fc3a 	bl	8000b10 <__aeabi_dcmpeq>
 800729c:	2800      	cmp	r0, #0
 800729e:	d09f      	beq.n	80071e0 <_dtoa_r+0x640>
 80072a0:	e7d1      	b.n	8007246 <_dtoa_r+0x6a6>
 80072a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	f000 80ea 	beq.w	800747e <_dtoa_r+0x8de>
 80072aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072ac:	2a01      	cmp	r2, #1
 80072ae:	f300 80cd 	bgt.w	800744c <_dtoa_r+0x8ac>
 80072b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	f000 80c1 	beq.w	800743c <_dtoa_r+0x89c>
 80072ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072c0:	9e04      	ldr	r6, [sp, #16]
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	2101      	movs	r1, #1
 80072c6:	441a      	add	r2, r3
 80072c8:	9204      	str	r2, [sp, #16]
 80072ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072cc:	4648      	mov	r0, r9
 80072ce:	441a      	add	r2, r3
 80072d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d2:	f000 fc2b 	bl	8007b2c <__i2b>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b166      	cbz	r6, 80072f4 <_dtoa_r+0x754>
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dd09      	ble.n	80072f4 <_dtoa_r+0x754>
 80072e0:	42b3      	cmp	r3, r6
 80072e2:	bfa8      	it	ge
 80072e4:	4633      	movge	r3, r6
 80072e6:	9a04      	ldr	r2, [sp, #16]
 80072e8:	1af6      	subs	r6, r6, r3
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	9204      	str	r2, [sp, #16]
 80072ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f6:	b30b      	cbz	r3, 800733c <_dtoa_r+0x79c>
 80072f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80c6 	beq.w	800748c <_dtoa_r+0x8ec>
 8007300:	2c00      	cmp	r4, #0
 8007302:	f000 80c0 	beq.w	8007486 <_dtoa_r+0x8e6>
 8007306:	4629      	mov	r1, r5
 8007308:	4622      	mov	r2, r4
 800730a:	4648      	mov	r0, r9
 800730c:	f000 fcc6 	bl	8007c9c <__pow5mult>
 8007310:	9a03      	ldr	r2, [sp, #12]
 8007312:	4601      	mov	r1, r0
 8007314:	4605      	mov	r5, r0
 8007316:	4648      	mov	r0, r9
 8007318:	f000 fc1e 	bl	8007b58 <__multiply>
 800731c:	9903      	ldr	r1, [sp, #12]
 800731e:	4680      	mov	r8, r0
 8007320:	4648      	mov	r0, r9
 8007322:	f000 fb4f 	bl	80079c4 <_Bfree>
 8007326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007328:	1b1b      	subs	r3, r3, r4
 800732a:	930a      	str	r3, [sp, #40]	@ 0x28
 800732c:	f000 80b1 	beq.w	8007492 <_dtoa_r+0x8f2>
 8007330:	4641      	mov	r1, r8
 8007332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007334:	4648      	mov	r0, r9
 8007336:	f000 fcb1 	bl	8007c9c <__pow5mult>
 800733a:	9003      	str	r0, [sp, #12]
 800733c:	2101      	movs	r1, #1
 800733e:	4648      	mov	r0, r9
 8007340:	f000 fbf4 	bl	8007b2c <__i2b>
 8007344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007346:	4604      	mov	r4, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 81d8 	beq.w	80076fe <_dtoa_r+0xb5e>
 800734e:	461a      	mov	r2, r3
 8007350:	4601      	mov	r1, r0
 8007352:	4648      	mov	r0, r9
 8007354:	f000 fca2 	bl	8007c9c <__pow5mult>
 8007358:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800735a:	4604      	mov	r4, r0
 800735c:	2b01      	cmp	r3, #1
 800735e:	f300 809f 	bgt.w	80074a0 <_dtoa_r+0x900>
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 8097 	bne.w	8007498 <_dtoa_r+0x8f8>
 800736a:	9b07      	ldr	r3, [sp, #28]
 800736c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007370:	2b00      	cmp	r3, #0
 8007372:	f040 8093 	bne.w	800749c <_dtoa_r+0x8fc>
 8007376:	9b07      	ldr	r3, [sp, #28]
 8007378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800737c:	0d1b      	lsrs	r3, r3, #20
 800737e:	051b      	lsls	r3, r3, #20
 8007380:	b133      	cbz	r3, 8007390 <_dtoa_r+0x7f0>
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	3301      	adds	r3, #1
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	3301      	adds	r3, #1
 800738c:	9309      	str	r3, [sp, #36]	@ 0x24
 800738e:	2301      	movs	r3, #1
 8007390:	930a      	str	r3, [sp, #40]	@ 0x28
 8007392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 81b8 	beq.w	800770a <_dtoa_r+0xb6a>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073a0:	6918      	ldr	r0, [r3, #16]
 80073a2:	f000 fb77 	bl	8007a94 <__hi0bits>
 80073a6:	f1c0 0020 	rsb	r0, r0, #32
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	4418      	add	r0, r3
 80073ae:	f010 001f 	ands.w	r0, r0, #31
 80073b2:	f000 8082 	beq.w	80074ba <_dtoa_r+0x91a>
 80073b6:	f1c0 0320 	rsb	r3, r0, #32
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	dd73      	ble.n	80074a6 <_dtoa_r+0x906>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	f1c0 001c 	rsb	r0, r0, #28
 80073c4:	4403      	add	r3, r0
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	4406      	add	r6, r0
 80073cc:	4403      	add	r3, r0
 80073ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	dd05      	ble.n	80073e2 <_dtoa_r+0x842>
 80073d6:	461a      	mov	r2, r3
 80073d8:	4648      	mov	r0, r9
 80073da:	9903      	ldr	r1, [sp, #12]
 80073dc:	f000 fcb8 	bl	8007d50 <__lshift>
 80073e0:	9003      	str	r0, [sp, #12]
 80073e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x854>
 80073e8:	4621      	mov	r1, r4
 80073ea:	461a      	mov	r2, r3
 80073ec:	4648      	mov	r0, r9
 80073ee:	f000 fcaf 	bl	8007d50 <__lshift>
 80073f2:	4604      	mov	r4, r0
 80073f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d061      	beq.n	80074be <_dtoa_r+0x91e>
 80073fa:	4621      	mov	r1, r4
 80073fc:	9803      	ldr	r0, [sp, #12]
 80073fe:	f000 fd13 	bl	8007e28 <__mcmp>
 8007402:	2800      	cmp	r0, #0
 8007404:	da5b      	bge.n	80074be <_dtoa_r+0x91e>
 8007406:	2300      	movs	r3, #0
 8007408:	220a      	movs	r2, #10
 800740a:	4648      	mov	r0, r9
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	f000 fafb 	bl	8007a08 <__multadd>
 8007412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007414:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007418:	9003      	str	r0, [sp, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8177 	beq.w	800770e <_dtoa_r+0xb6e>
 8007420:	4629      	mov	r1, r5
 8007422:	2300      	movs	r3, #0
 8007424:	220a      	movs	r2, #10
 8007426:	4648      	mov	r0, r9
 8007428:	f000 faee 	bl	8007a08 <__multadd>
 800742c:	f1bb 0f00 	cmp.w	fp, #0
 8007430:	4605      	mov	r5, r0
 8007432:	dc6f      	bgt.n	8007514 <_dtoa_r+0x974>
 8007434:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007436:	2b02      	cmp	r3, #2
 8007438:	dc49      	bgt.n	80074ce <_dtoa_r+0x92e>
 800743a:	e06b      	b.n	8007514 <_dtoa_r+0x974>
 800743c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800743e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007442:	e73c      	b.n	80072be <_dtoa_r+0x71e>
 8007444:	3fe00000 	.word	0x3fe00000
 8007448:	40240000 	.word	0x40240000
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	1e5c      	subs	r4, r3, #1
 8007450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007452:	42a3      	cmp	r3, r4
 8007454:	db09      	blt.n	800746a <_dtoa_r+0x8ca>
 8007456:	1b1c      	subs	r4, r3, r4
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f6bf af30 	bge.w	80072c0 <_dtoa_r+0x720>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	9a08      	ldr	r2, [sp, #32]
 8007464:	1a9e      	subs	r6, r3, r2
 8007466:	2300      	movs	r3, #0
 8007468:	e72b      	b.n	80072c2 <_dtoa_r+0x722>
 800746a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800746e:	1ae3      	subs	r3, r4, r3
 8007470:	441a      	add	r2, r3
 8007472:	940a      	str	r4, [sp, #40]	@ 0x28
 8007474:	9e04      	ldr	r6, [sp, #16]
 8007476:	2400      	movs	r4, #0
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	920e      	str	r2, [sp, #56]	@ 0x38
 800747c:	e721      	b.n	80072c2 <_dtoa_r+0x722>
 800747e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007480:	9e04      	ldr	r6, [sp, #16]
 8007482:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007484:	e728      	b.n	80072d8 <_dtoa_r+0x738>
 8007486:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800748a:	e751      	b.n	8007330 <_dtoa_r+0x790>
 800748c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800748e:	9903      	ldr	r1, [sp, #12]
 8007490:	e750      	b.n	8007334 <_dtoa_r+0x794>
 8007492:	f8cd 800c 	str.w	r8, [sp, #12]
 8007496:	e751      	b.n	800733c <_dtoa_r+0x79c>
 8007498:	2300      	movs	r3, #0
 800749a:	e779      	b.n	8007390 <_dtoa_r+0x7f0>
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	e777      	b.n	8007390 <_dtoa_r+0x7f0>
 80074a0:	2300      	movs	r3, #0
 80074a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a4:	e779      	b.n	800739a <_dtoa_r+0x7fa>
 80074a6:	d093      	beq.n	80073d0 <_dtoa_r+0x830>
 80074a8:	9a04      	ldr	r2, [sp, #16]
 80074aa:	331c      	adds	r3, #28
 80074ac:	441a      	add	r2, r3
 80074ae:	9204      	str	r2, [sp, #16]
 80074b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074b2:	441e      	add	r6, r3
 80074b4:	441a      	add	r2, r3
 80074b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074b8:	e78a      	b.n	80073d0 <_dtoa_r+0x830>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e7f4      	b.n	80074a8 <_dtoa_r+0x908>
 80074be:	9b08      	ldr	r3, [sp, #32]
 80074c0:	46b8      	mov	r8, r7
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dc20      	bgt.n	8007508 <_dtoa_r+0x968>
 80074c6:	469b      	mov	fp, r3
 80074c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	dd1e      	ble.n	800750c <_dtoa_r+0x96c>
 80074ce:	f1bb 0f00 	cmp.w	fp, #0
 80074d2:	f47f adb1 	bne.w	8007038 <_dtoa_r+0x498>
 80074d6:	4621      	mov	r1, r4
 80074d8:	465b      	mov	r3, fp
 80074da:	2205      	movs	r2, #5
 80074dc:	4648      	mov	r0, r9
 80074de:	f000 fa93 	bl	8007a08 <__multadd>
 80074e2:	4601      	mov	r1, r0
 80074e4:	4604      	mov	r4, r0
 80074e6:	9803      	ldr	r0, [sp, #12]
 80074e8:	f000 fc9e 	bl	8007e28 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f77f ada3 	ble.w	8007038 <_dtoa_r+0x498>
 80074f2:	4656      	mov	r6, sl
 80074f4:	2331      	movs	r3, #49	@ 0x31
 80074f6:	f108 0801 	add.w	r8, r8, #1
 80074fa:	f806 3b01 	strb.w	r3, [r6], #1
 80074fe:	e59f      	b.n	8007040 <_dtoa_r+0x4a0>
 8007500:	46b8      	mov	r8, r7
 8007502:	9c08      	ldr	r4, [sp, #32]
 8007504:	4625      	mov	r5, r4
 8007506:	e7f4      	b.n	80074f2 <_dtoa_r+0x952>
 8007508:	f8dd b020 	ldr.w	fp, [sp, #32]
 800750c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8101 	beq.w	8007716 <_dtoa_r+0xb76>
 8007514:	2e00      	cmp	r6, #0
 8007516:	dd05      	ble.n	8007524 <_dtoa_r+0x984>
 8007518:	4629      	mov	r1, r5
 800751a:	4632      	mov	r2, r6
 800751c:	4648      	mov	r0, r9
 800751e:	f000 fc17 	bl	8007d50 <__lshift>
 8007522:	4605      	mov	r5, r0
 8007524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d05c      	beq.n	80075e4 <_dtoa_r+0xa44>
 800752a:	4648      	mov	r0, r9
 800752c:	6869      	ldr	r1, [r5, #4]
 800752e:	f000 fa09 	bl	8007944 <_Balloc>
 8007532:	4606      	mov	r6, r0
 8007534:	b928      	cbnz	r0, 8007542 <_dtoa_r+0x9a2>
 8007536:	4602      	mov	r2, r0
 8007538:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800753c:	4b80      	ldr	r3, [pc, #512]	@ (8007740 <_dtoa_r+0xba0>)
 800753e:	f7ff bb43 	b.w	8006bc8 <_dtoa_r+0x28>
 8007542:	692a      	ldr	r2, [r5, #16]
 8007544:	f105 010c 	add.w	r1, r5, #12
 8007548:	3202      	adds	r2, #2
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	300c      	adds	r0, #12
 800754e:	f000 ff9d 	bl	800848c <memcpy>
 8007552:	2201      	movs	r2, #1
 8007554:	4631      	mov	r1, r6
 8007556:	4648      	mov	r0, r9
 8007558:	f000 fbfa 	bl	8007d50 <__lshift>
 800755c:	462f      	mov	r7, r5
 800755e:	4605      	mov	r5, r0
 8007560:	f10a 0301 	add.w	r3, sl, #1
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	eb0a 030b 	add.w	r3, sl, fp
 800756a:	930a      	str	r3, [sp, #40]	@ 0x28
 800756c:	9b06      	ldr	r3, [sp, #24]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	9309      	str	r3, [sp, #36]	@ 0x24
 8007574:	9b04      	ldr	r3, [sp, #16]
 8007576:	4621      	mov	r1, r4
 8007578:	9803      	ldr	r0, [sp, #12]
 800757a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800757e:	f7ff fa84 	bl	8006a8a <quorem>
 8007582:	4603      	mov	r3, r0
 8007584:	4639      	mov	r1, r7
 8007586:	3330      	adds	r3, #48	@ 0x30
 8007588:	9006      	str	r0, [sp, #24]
 800758a:	9803      	ldr	r0, [sp, #12]
 800758c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800758e:	f000 fc4b 	bl	8007e28 <__mcmp>
 8007592:	462a      	mov	r2, r5
 8007594:	9008      	str	r0, [sp, #32]
 8007596:	4621      	mov	r1, r4
 8007598:	4648      	mov	r0, r9
 800759a:	f000 fc61 	bl	8007e60 <__mdiff>
 800759e:	68c2      	ldr	r2, [r0, #12]
 80075a0:	4606      	mov	r6, r0
 80075a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a4:	bb02      	cbnz	r2, 80075e8 <_dtoa_r+0xa48>
 80075a6:	4601      	mov	r1, r0
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f000 fc3d 	bl	8007e28 <__mcmp>
 80075ae:	4602      	mov	r2, r0
 80075b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075b2:	4631      	mov	r1, r6
 80075b4:	4648      	mov	r0, r9
 80075b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80075ba:	f000 fa03 	bl	80079c4 <_Bfree>
 80075be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075c2:	9e04      	ldr	r6, [sp, #16]
 80075c4:	ea42 0103 	orr.w	r1, r2, r3
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	4319      	orrs	r1, r3
 80075cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075ce:	d10d      	bne.n	80075ec <_dtoa_r+0xa4c>
 80075d0:	2b39      	cmp	r3, #57	@ 0x39
 80075d2:	d027      	beq.n	8007624 <_dtoa_r+0xa84>
 80075d4:	9a08      	ldr	r2, [sp, #32]
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	dd01      	ble.n	80075de <_dtoa_r+0xa3e>
 80075da:	9b06      	ldr	r3, [sp, #24]
 80075dc:	3331      	adds	r3, #49	@ 0x31
 80075de:	f88b 3000 	strb.w	r3, [fp]
 80075e2:	e52e      	b.n	8007042 <_dtoa_r+0x4a2>
 80075e4:	4628      	mov	r0, r5
 80075e6:	e7b9      	b.n	800755c <_dtoa_r+0x9bc>
 80075e8:	2201      	movs	r2, #1
 80075ea:	e7e2      	b.n	80075b2 <_dtoa_r+0xa12>
 80075ec:	9908      	ldr	r1, [sp, #32]
 80075ee:	2900      	cmp	r1, #0
 80075f0:	db04      	blt.n	80075fc <_dtoa_r+0xa5c>
 80075f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80075f4:	4301      	orrs	r1, r0
 80075f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f8:	4301      	orrs	r1, r0
 80075fa:	d120      	bne.n	800763e <_dtoa_r+0xa9e>
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	ddee      	ble.n	80075de <_dtoa_r+0xa3e>
 8007600:	2201      	movs	r2, #1
 8007602:	9903      	ldr	r1, [sp, #12]
 8007604:	4648      	mov	r0, r9
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	f000 fba2 	bl	8007d50 <__lshift>
 800760c:	4621      	mov	r1, r4
 800760e:	9003      	str	r0, [sp, #12]
 8007610:	f000 fc0a 	bl	8007e28 <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	dc02      	bgt.n	8007620 <_dtoa_r+0xa80>
 800761a:	d1e0      	bne.n	80075de <_dtoa_r+0xa3e>
 800761c:	07da      	lsls	r2, r3, #31
 800761e:	d5de      	bpl.n	80075de <_dtoa_r+0xa3e>
 8007620:	2b39      	cmp	r3, #57	@ 0x39
 8007622:	d1da      	bne.n	80075da <_dtoa_r+0xa3a>
 8007624:	2339      	movs	r3, #57	@ 0x39
 8007626:	f88b 3000 	strb.w	r3, [fp]
 800762a:	4633      	mov	r3, r6
 800762c:	461e      	mov	r6, r3
 800762e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007632:	3b01      	subs	r3, #1
 8007634:	2a39      	cmp	r2, #57	@ 0x39
 8007636:	d04e      	beq.n	80076d6 <_dtoa_r+0xb36>
 8007638:	3201      	adds	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e501      	b.n	8007042 <_dtoa_r+0x4a2>
 800763e:	2a00      	cmp	r2, #0
 8007640:	dd03      	ble.n	800764a <_dtoa_r+0xaaa>
 8007642:	2b39      	cmp	r3, #57	@ 0x39
 8007644:	d0ee      	beq.n	8007624 <_dtoa_r+0xa84>
 8007646:	3301      	adds	r3, #1
 8007648:	e7c9      	b.n	80075de <_dtoa_r+0xa3e>
 800764a:	9a04      	ldr	r2, [sp, #16]
 800764c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800764e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007652:	428a      	cmp	r2, r1
 8007654:	d028      	beq.n	80076a8 <_dtoa_r+0xb08>
 8007656:	2300      	movs	r3, #0
 8007658:	220a      	movs	r2, #10
 800765a:	9903      	ldr	r1, [sp, #12]
 800765c:	4648      	mov	r0, r9
 800765e:	f000 f9d3 	bl	8007a08 <__multadd>
 8007662:	42af      	cmp	r7, r5
 8007664:	9003      	str	r0, [sp, #12]
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	f04f 020a 	mov.w	r2, #10
 800766e:	4639      	mov	r1, r7
 8007670:	4648      	mov	r0, r9
 8007672:	d107      	bne.n	8007684 <_dtoa_r+0xae4>
 8007674:	f000 f9c8 	bl	8007a08 <__multadd>
 8007678:	4607      	mov	r7, r0
 800767a:	4605      	mov	r5, r0
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	3301      	adds	r3, #1
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	e777      	b.n	8007574 <_dtoa_r+0x9d4>
 8007684:	f000 f9c0 	bl	8007a08 <__multadd>
 8007688:	4629      	mov	r1, r5
 800768a:	4607      	mov	r7, r0
 800768c:	2300      	movs	r3, #0
 800768e:	220a      	movs	r2, #10
 8007690:	4648      	mov	r0, r9
 8007692:	f000 f9b9 	bl	8007a08 <__multadd>
 8007696:	4605      	mov	r5, r0
 8007698:	e7f0      	b.n	800767c <_dtoa_r+0xadc>
 800769a:	f1bb 0f00 	cmp.w	fp, #0
 800769e:	bfcc      	ite	gt
 80076a0:	465e      	movgt	r6, fp
 80076a2:	2601      	movle	r6, #1
 80076a4:	2700      	movs	r7, #0
 80076a6:	4456      	add	r6, sl
 80076a8:	2201      	movs	r2, #1
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	4648      	mov	r0, r9
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	f000 fb4e 	bl	8007d50 <__lshift>
 80076b4:	4621      	mov	r1, r4
 80076b6:	9003      	str	r0, [sp, #12]
 80076b8:	f000 fbb6 	bl	8007e28 <__mcmp>
 80076bc:	2800      	cmp	r0, #0
 80076be:	dcb4      	bgt.n	800762a <_dtoa_r+0xa8a>
 80076c0:	d102      	bne.n	80076c8 <_dtoa_r+0xb28>
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	07db      	lsls	r3, r3, #31
 80076c6:	d4b0      	bmi.n	800762a <_dtoa_r+0xa8a>
 80076c8:	4633      	mov	r3, r6
 80076ca:	461e      	mov	r6, r3
 80076cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d0:	2a30      	cmp	r2, #48	@ 0x30
 80076d2:	d0fa      	beq.n	80076ca <_dtoa_r+0xb2a>
 80076d4:	e4b5      	b.n	8007042 <_dtoa_r+0x4a2>
 80076d6:	459a      	cmp	sl, r3
 80076d8:	d1a8      	bne.n	800762c <_dtoa_r+0xa8c>
 80076da:	2331      	movs	r3, #49	@ 0x31
 80076dc:	f108 0801 	add.w	r8, r8, #1
 80076e0:	f88a 3000 	strb.w	r3, [sl]
 80076e4:	e4ad      	b.n	8007042 <_dtoa_r+0x4a2>
 80076e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007744 <_dtoa_r+0xba4>
 80076ec:	b11b      	cbz	r3, 80076f6 <_dtoa_r+0xb56>
 80076ee:	f10a 0308 	add.w	r3, sl, #8
 80076f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4650      	mov	r0, sl
 80076f8:	b017      	add	sp, #92	@ 0x5c
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007700:	2b01      	cmp	r3, #1
 8007702:	f77f ae2e 	ble.w	8007362 <_dtoa_r+0x7c2>
 8007706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007708:	930a      	str	r3, [sp, #40]	@ 0x28
 800770a:	2001      	movs	r0, #1
 800770c:	e64d      	b.n	80073aa <_dtoa_r+0x80a>
 800770e:	f1bb 0f00 	cmp.w	fp, #0
 8007712:	f77f aed9 	ble.w	80074c8 <_dtoa_r+0x928>
 8007716:	4656      	mov	r6, sl
 8007718:	4621      	mov	r1, r4
 800771a:	9803      	ldr	r0, [sp, #12]
 800771c:	f7ff f9b5 	bl	8006a8a <quorem>
 8007720:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007724:	f806 3b01 	strb.w	r3, [r6], #1
 8007728:	eba6 020a 	sub.w	r2, r6, sl
 800772c:	4593      	cmp	fp, r2
 800772e:	ddb4      	ble.n	800769a <_dtoa_r+0xafa>
 8007730:	2300      	movs	r3, #0
 8007732:	220a      	movs	r2, #10
 8007734:	4648      	mov	r0, r9
 8007736:	9903      	ldr	r1, [sp, #12]
 8007738:	f000 f966 	bl	8007a08 <__multadd>
 800773c:	9003      	str	r0, [sp, #12]
 800773e:	e7eb      	b.n	8007718 <_dtoa_r+0xb78>
 8007740:	0800a2ca 	.word	0x0800a2ca
 8007744:	0800a24e 	.word	0x0800a24e

08007748 <_free_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4605      	mov	r5, r0
 800774c:	2900      	cmp	r1, #0
 800774e:	d040      	beq.n	80077d2 <_free_r+0x8a>
 8007750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007754:	1f0c      	subs	r4, r1, #4
 8007756:	2b00      	cmp	r3, #0
 8007758:	bfb8      	it	lt
 800775a:	18e4      	addlt	r4, r4, r3
 800775c:	f000 f8e6 	bl	800792c <__malloc_lock>
 8007760:	4a1c      	ldr	r2, [pc, #112]	@ (80077d4 <_free_r+0x8c>)
 8007762:	6813      	ldr	r3, [r2, #0]
 8007764:	b933      	cbnz	r3, 8007774 <_free_r+0x2c>
 8007766:	6063      	str	r3, [r4, #4]
 8007768:	6014      	str	r4, [r2, #0]
 800776a:	4628      	mov	r0, r5
 800776c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007770:	f000 b8e2 	b.w	8007938 <__malloc_unlock>
 8007774:	42a3      	cmp	r3, r4
 8007776:	d908      	bls.n	800778a <_free_r+0x42>
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	1821      	adds	r1, r4, r0
 800777c:	428b      	cmp	r3, r1
 800777e:	bf01      	itttt	eq
 8007780:	6819      	ldreq	r1, [r3, #0]
 8007782:	685b      	ldreq	r3, [r3, #4]
 8007784:	1809      	addeq	r1, r1, r0
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	e7ed      	b.n	8007766 <_free_r+0x1e>
 800778a:	461a      	mov	r2, r3
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	b10b      	cbz	r3, 8007794 <_free_r+0x4c>
 8007790:	42a3      	cmp	r3, r4
 8007792:	d9fa      	bls.n	800778a <_free_r+0x42>
 8007794:	6811      	ldr	r1, [r2, #0]
 8007796:	1850      	adds	r0, r2, r1
 8007798:	42a0      	cmp	r0, r4
 800779a:	d10b      	bne.n	80077b4 <_free_r+0x6c>
 800779c:	6820      	ldr	r0, [r4, #0]
 800779e:	4401      	add	r1, r0
 80077a0:	1850      	adds	r0, r2, r1
 80077a2:	4283      	cmp	r3, r0
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	d1e0      	bne.n	800776a <_free_r+0x22>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4408      	add	r0, r1
 80077ae:	6010      	str	r0, [r2, #0]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	e7da      	b.n	800776a <_free_r+0x22>
 80077b4:	d902      	bls.n	80077bc <_free_r+0x74>
 80077b6:	230c      	movs	r3, #12
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	e7d6      	b.n	800776a <_free_r+0x22>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	1821      	adds	r1, r4, r0
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1809      	addeq	r1, r1, r0
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	6054      	str	r4, [r2, #4]
 80077d0:	e7cb      	b.n	800776a <_free_r+0x22>
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	2000173c 	.word	0x2000173c

080077d8 <malloc>:
 80077d8:	4b02      	ldr	r3, [pc, #8]	@ (80077e4 <malloc+0xc>)
 80077da:	4601      	mov	r1, r0
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f000 b825 	b.w	800782c <_malloc_r>
 80077e2:	bf00      	nop
 80077e4:	20000024 	.word	0x20000024

080077e8 <sbrk_aligned>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007828 <sbrk_aligned+0x40>)
 80077ec:	460c      	mov	r4, r1
 80077ee:	6831      	ldr	r1, [r6, #0]
 80077f0:	4605      	mov	r5, r0
 80077f2:	b911      	cbnz	r1, 80077fa <sbrk_aligned+0x12>
 80077f4:	f000 fe3a 	bl	800846c <_sbrk_r>
 80077f8:	6030      	str	r0, [r6, #0]
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 fe35 	bl	800846c <_sbrk_r>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d103      	bne.n	800780e <sbrk_aligned+0x26>
 8007806:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800780a:	4620      	mov	r0, r4
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	1cc4      	adds	r4, r0, #3
 8007810:	f024 0403 	bic.w	r4, r4, #3
 8007814:	42a0      	cmp	r0, r4
 8007816:	d0f8      	beq.n	800780a <sbrk_aligned+0x22>
 8007818:	1a21      	subs	r1, r4, r0
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fe26 	bl	800846c <_sbrk_r>
 8007820:	3001      	adds	r0, #1
 8007822:	d1f2      	bne.n	800780a <sbrk_aligned+0x22>
 8007824:	e7ef      	b.n	8007806 <sbrk_aligned+0x1e>
 8007826:	bf00      	nop
 8007828:	20001738 	.word	0x20001738

0800782c <_malloc_r>:
 800782c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007830:	1ccd      	adds	r5, r1, #3
 8007832:	f025 0503 	bic.w	r5, r5, #3
 8007836:	3508      	adds	r5, #8
 8007838:	2d0c      	cmp	r5, #12
 800783a:	bf38      	it	cc
 800783c:	250c      	movcc	r5, #12
 800783e:	2d00      	cmp	r5, #0
 8007840:	4606      	mov	r6, r0
 8007842:	db01      	blt.n	8007848 <_malloc_r+0x1c>
 8007844:	42a9      	cmp	r1, r5
 8007846:	d904      	bls.n	8007852 <_malloc_r+0x26>
 8007848:	230c      	movs	r3, #12
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007928 <_malloc_r+0xfc>
 8007856:	f000 f869 	bl	800792c <__malloc_lock>
 800785a:	f8d8 3000 	ldr.w	r3, [r8]
 800785e:	461c      	mov	r4, r3
 8007860:	bb44      	cbnz	r4, 80078b4 <_malloc_r+0x88>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff ffbf 	bl	80077e8 <sbrk_aligned>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	4604      	mov	r4, r0
 800786e:	d158      	bne.n	8007922 <_malloc_r+0xf6>
 8007870:	f8d8 4000 	ldr.w	r4, [r8]
 8007874:	4627      	mov	r7, r4
 8007876:	2f00      	cmp	r7, #0
 8007878:	d143      	bne.n	8007902 <_malloc_r+0xd6>
 800787a:	2c00      	cmp	r4, #0
 800787c:	d04b      	beq.n	8007916 <_malloc_r+0xea>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	4639      	mov	r1, r7
 8007882:	4630      	mov	r0, r6
 8007884:	eb04 0903 	add.w	r9, r4, r3
 8007888:	f000 fdf0 	bl	800846c <_sbrk_r>
 800788c:	4581      	cmp	r9, r0
 800788e:	d142      	bne.n	8007916 <_malloc_r+0xea>
 8007890:	6821      	ldr	r1, [r4, #0]
 8007892:	4630      	mov	r0, r6
 8007894:	1a6d      	subs	r5, r5, r1
 8007896:	4629      	mov	r1, r5
 8007898:	f7ff ffa6 	bl	80077e8 <sbrk_aligned>
 800789c:	3001      	adds	r0, #1
 800789e:	d03a      	beq.n	8007916 <_malloc_r+0xea>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	442b      	add	r3, r5
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	bb62      	cbnz	r2, 8007908 <_malloc_r+0xdc>
 80078ae:	f8c8 7000 	str.w	r7, [r8]
 80078b2:	e00f      	b.n	80078d4 <_malloc_r+0xa8>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	1b52      	subs	r2, r2, r5
 80078b8:	d420      	bmi.n	80078fc <_malloc_r+0xd0>
 80078ba:	2a0b      	cmp	r2, #11
 80078bc:	d917      	bls.n	80078ee <_malloc_r+0xc2>
 80078be:	1961      	adds	r1, r4, r5
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	6025      	str	r5, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	6059      	strne	r1, [r3, #4]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	bf08      	it	eq
 80078cc:	f8c8 1000 	streq.w	r1, [r8]
 80078d0:	5162      	str	r2, [r4, r5]
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f82f 	bl	8007938 <__malloc_unlock>
 80078da:	f104 000b 	add.w	r0, r4, #11
 80078de:	1d23      	adds	r3, r4, #4
 80078e0:	f020 0007 	bic.w	r0, r0, #7
 80078e4:	1ac2      	subs	r2, r0, r3
 80078e6:	bf1c      	itt	ne
 80078e8:	1a1b      	subne	r3, r3, r0
 80078ea:	50a3      	strne	r3, [r4, r2]
 80078ec:	e7af      	b.n	800784e <_malloc_r+0x22>
 80078ee:	6862      	ldr	r2, [r4, #4]
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	bf0c      	ite	eq
 80078f4:	f8c8 2000 	streq.w	r2, [r8]
 80078f8:	605a      	strne	r2, [r3, #4]
 80078fa:	e7eb      	b.n	80078d4 <_malloc_r+0xa8>
 80078fc:	4623      	mov	r3, r4
 80078fe:	6864      	ldr	r4, [r4, #4]
 8007900:	e7ae      	b.n	8007860 <_malloc_r+0x34>
 8007902:	463c      	mov	r4, r7
 8007904:	687f      	ldr	r7, [r7, #4]
 8007906:	e7b6      	b.n	8007876 <_malloc_r+0x4a>
 8007908:	461a      	mov	r2, r3
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	42a3      	cmp	r3, r4
 800790e:	d1fb      	bne.n	8007908 <_malloc_r+0xdc>
 8007910:	2300      	movs	r3, #0
 8007912:	6053      	str	r3, [r2, #4]
 8007914:	e7de      	b.n	80078d4 <_malloc_r+0xa8>
 8007916:	230c      	movs	r3, #12
 8007918:	4630      	mov	r0, r6
 800791a:	6033      	str	r3, [r6, #0]
 800791c:	f000 f80c 	bl	8007938 <__malloc_unlock>
 8007920:	e794      	b.n	800784c <_malloc_r+0x20>
 8007922:	6005      	str	r5, [r0, #0]
 8007924:	e7d6      	b.n	80078d4 <_malloc_r+0xa8>
 8007926:	bf00      	nop
 8007928:	2000173c 	.word	0x2000173c

0800792c <__malloc_lock>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__malloc_lock+0x8>)
 800792e:	f7ff b89c 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	20001734 	.word	0x20001734

08007938 <__malloc_unlock>:
 8007938:	4801      	ldr	r0, [pc, #4]	@ (8007940 <__malloc_unlock+0x8>)
 800793a:	f7ff b897 	b.w	8006a6c <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	20001734 	.word	0x20001734

08007944 <_Balloc>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	69c6      	ldr	r6, [r0, #28]
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	b976      	cbnz	r6, 800796c <_Balloc+0x28>
 800794e:	2010      	movs	r0, #16
 8007950:	f7ff ff42 	bl	80077d8 <malloc>
 8007954:	4602      	mov	r2, r0
 8007956:	61e0      	str	r0, [r4, #28]
 8007958:	b920      	cbnz	r0, 8007964 <_Balloc+0x20>
 800795a:	216b      	movs	r1, #107	@ 0x6b
 800795c:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <_Balloc+0x78>)
 800795e:	4818      	ldr	r0, [pc, #96]	@ (80079c0 <_Balloc+0x7c>)
 8007960:	f000 fda2 	bl	80084a8 <__assert_func>
 8007964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007968:	6006      	str	r6, [r0, #0]
 800796a:	60c6      	str	r6, [r0, #12]
 800796c:	69e6      	ldr	r6, [r4, #28]
 800796e:	68f3      	ldr	r3, [r6, #12]
 8007970:	b183      	cbz	r3, 8007994 <_Balloc+0x50>
 8007972:	69e3      	ldr	r3, [r4, #28]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800797a:	b9b8      	cbnz	r0, 80079ac <_Balloc+0x68>
 800797c:	2101      	movs	r1, #1
 800797e:	fa01 f605 	lsl.w	r6, r1, r5
 8007982:	1d72      	adds	r2, r6, #5
 8007984:	4620      	mov	r0, r4
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	f000 fdac 	bl	80084e4 <_calloc_r>
 800798c:	b160      	cbz	r0, 80079a8 <_Balloc+0x64>
 800798e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007992:	e00e      	b.n	80079b2 <_Balloc+0x6e>
 8007994:	2221      	movs	r2, #33	@ 0x21
 8007996:	2104      	movs	r1, #4
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fda3 	bl	80084e4 <_calloc_r>
 800799e:	69e3      	ldr	r3, [r4, #28]
 80079a0:	60f0      	str	r0, [r6, #12]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e4      	bne.n	8007972 <_Balloc+0x2e>
 80079a8:	2000      	movs	r0, #0
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	6802      	ldr	r2, [r0, #0]
 80079ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079b2:	2300      	movs	r3, #0
 80079b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079b8:	e7f7      	b.n	80079aa <_Balloc+0x66>
 80079ba:	bf00      	nop
 80079bc:	0800a25b 	.word	0x0800a25b
 80079c0:	0800a2db 	.word	0x0800a2db

080079c4 <_Bfree>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	69c6      	ldr	r6, [r0, #28]
 80079c8:	4605      	mov	r5, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	b976      	cbnz	r6, 80079ec <_Bfree+0x28>
 80079ce:	2010      	movs	r0, #16
 80079d0:	f7ff ff02 	bl	80077d8 <malloc>
 80079d4:	4602      	mov	r2, r0
 80079d6:	61e8      	str	r0, [r5, #28]
 80079d8:	b920      	cbnz	r0, 80079e4 <_Bfree+0x20>
 80079da:	218f      	movs	r1, #143	@ 0x8f
 80079dc:	4b08      	ldr	r3, [pc, #32]	@ (8007a00 <_Bfree+0x3c>)
 80079de:	4809      	ldr	r0, [pc, #36]	@ (8007a04 <_Bfree+0x40>)
 80079e0:	f000 fd62 	bl	80084a8 <__assert_func>
 80079e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079e8:	6006      	str	r6, [r0, #0]
 80079ea:	60c6      	str	r6, [r0, #12]
 80079ec:	b13c      	cbz	r4, 80079fe <_Bfree+0x3a>
 80079ee:	69eb      	ldr	r3, [r5, #28]
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079f8:	6021      	str	r1, [r4, #0]
 80079fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	0800a25b 	.word	0x0800a25b
 8007a04:	0800a2db 	.word	0x0800a2db

08007a08 <__multadd>:
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	4607      	mov	r7, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	461e      	mov	r6, r3
 8007a12:	2000      	movs	r0, #0
 8007a14:	690d      	ldr	r5, [r1, #16]
 8007a16:	f101 0c14 	add.w	ip, r1, #20
 8007a1a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a1e:	3001      	adds	r0, #1
 8007a20:	b299      	uxth	r1, r3
 8007a22:	fb02 6101 	mla	r1, r2, r1, r6
 8007a26:	0c1e      	lsrs	r6, r3, #16
 8007a28:	0c0b      	lsrs	r3, r1, #16
 8007a2a:	fb02 3306 	mla	r3, r2, r6, r3
 8007a2e:	b289      	uxth	r1, r1
 8007a30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a34:	4285      	cmp	r5, r0
 8007a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a3a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a3e:	dcec      	bgt.n	8007a1a <__multadd+0x12>
 8007a40:	b30e      	cbz	r6, 8007a86 <__multadd+0x7e>
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	dc19      	bgt.n	8007a7c <__multadd+0x74>
 8007a48:	6861      	ldr	r1, [r4, #4]
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	3101      	adds	r1, #1
 8007a4e:	f7ff ff79 	bl	8007944 <_Balloc>
 8007a52:	4680      	mov	r8, r0
 8007a54:	b928      	cbnz	r0, 8007a62 <__multadd+0x5a>
 8007a56:	4602      	mov	r2, r0
 8007a58:	21ba      	movs	r1, #186	@ 0xba
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a8c <__multadd+0x84>)
 8007a5c:	480c      	ldr	r0, [pc, #48]	@ (8007a90 <__multadd+0x88>)
 8007a5e:	f000 fd23 	bl	80084a8 <__assert_func>
 8007a62:	6922      	ldr	r2, [r4, #16]
 8007a64:	f104 010c 	add.w	r1, r4, #12
 8007a68:	3202      	adds	r2, #2
 8007a6a:	0092      	lsls	r2, r2, #2
 8007a6c:	300c      	adds	r0, #12
 8007a6e:	f000 fd0d 	bl	800848c <memcpy>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4638      	mov	r0, r7
 8007a76:	f7ff ffa5 	bl	80079c4 <_Bfree>
 8007a7a:	4644      	mov	r4, r8
 8007a7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a80:	3501      	adds	r5, #1
 8007a82:	615e      	str	r6, [r3, #20]
 8007a84:	6125      	str	r5, [r4, #16]
 8007a86:	4620      	mov	r0, r4
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	0800a2ca 	.word	0x0800a2ca
 8007a90:	0800a2db 	.word	0x0800a2db

08007a94 <__hi0bits>:
 8007a94:	4603      	mov	r3, r0
 8007a96:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a9a:	bf3a      	itte	cc
 8007a9c:	0403      	lslcc	r3, r0, #16
 8007a9e:	2010      	movcc	r0, #16
 8007aa0:	2000      	movcs	r0, #0
 8007aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aa6:	bf3c      	itt	cc
 8007aa8:	021b      	lslcc	r3, r3, #8
 8007aaa:	3008      	addcc	r0, #8
 8007aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ab0:	bf3c      	itt	cc
 8007ab2:	011b      	lslcc	r3, r3, #4
 8007ab4:	3004      	addcc	r0, #4
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aba:	bf3c      	itt	cc
 8007abc:	009b      	lslcc	r3, r3, #2
 8007abe:	3002      	addcc	r0, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db05      	blt.n	8007ad0 <__hi0bits+0x3c>
 8007ac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ac8:	f100 0001 	add.w	r0, r0, #1
 8007acc:	bf08      	it	eq
 8007ace:	2020      	moveq	r0, #32
 8007ad0:	4770      	bx	lr

08007ad2 <__lo0bits>:
 8007ad2:	6803      	ldr	r3, [r0, #0]
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f013 0007 	ands.w	r0, r3, #7
 8007ada:	d00b      	beq.n	8007af4 <__lo0bits+0x22>
 8007adc:	07d9      	lsls	r1, r3, #31
 8007ade:	d421      	bmi.n	8007b24 <__lo0bits+0x52>
 8007ae0:	0798      	lsls	r0, r3, #30
 8007ae2:	bf49      	itett	mi
 8007ae4:	085b      	lsrmi	r3, r3, #1
 8007ae6:	089b      	lsrpl	r3, r3, #2
 8007ae8:	2001      	movmi	r0, #1
 8007aea:	6013      	strmi	r3, [r2, #0]
 8007aec:	bf5c      	itt	pl
 8007aee:	2002      	movpl	r0, #2
 8007af0:	6013      	strpl	r3, [r2, #0]
 8007af2:	4770      	bx	lr
 8007af4:	b299      	uxth	r1, r3
 8007af6:	b909      	cbnz	r1, 8007afc <__lo0bits+0x2a>
 8007af8:	2010      	movs	r0, #16
 8007afa:	0c1b      	lsrs	r3, r3, #16
 8007afc:	b2d9      	uxtb	r1, r3
 8007afe:	b909      	cbnz	r1, 8007b04 <__lo0bits+0x32>
 8007b00:	3008      	adds	r0, #8
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	0719      	lsls	r1, r3, #28
 8007b06:	bf04      	itt	eq
 8007b08:	091b      	lsreq	r3, r3, #4
 8007b0a:	3004      	addeq	r0, #4
 8007b0c:	0799      	lsls	r1, r3, #30
 8007b0e:	bf04      	itt	eq
 8007b10:	089b      	lsreq	r3, r3, #2
 8007b12:	3002      	addeq	r0, #2
 8007b14:	07d9      	lsls	r1, r3, #31
 8007b16:	d403      	bmi.n	8007b20 <__lo0bits+0x4e>
 8007b18:	085b      	lsrs	r3, r3, #1
 8007b1a:	f100 0001 	add.w	r0, r0, #1
 8007b1e:	d003      	beq.n	8007b28 <__lo0bits+0x56>
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	4770      	bx	lr
 8007b24:	2000      	movs	r0, #0
 8007b26:	4770      	bx	lr
 8007b28:	2020      	movs	r0, #32
 8007b2a:	4770      	bx	lr

08007b2c <__i2b>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2101      	movs	r1, #1
 8007b32:	f7ff ff07 	bl	8007944 <_Balloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__i2b+0x1a>
 8007b3a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b3e:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <__i2b+0x24>)
 8007b40:	4804      	ldr	r0, [pc, #16]	@ (8007b54 <__i2b+0x28>)
 8007b42:	f000 fcb1 	bl	80084a8 <__assert_func>
 8007b46:	2301      	movs	r3, #1
 8007b48:	6144      	str	r4, [r0, #20]
 8007b4a:	6103      	str	r3, [r0, #16]
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	0800a2ca 	.word	0x0800a2ca
 8007b54:	0800a2db 	.word	0x0800a2db

08007b58 <__multiply>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4617      	mov	r7, r2
 8007b5e:	690a      	ldr	r2, [r1, #16]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4689      	mov	r9, r1
 8007b64:	429a      	cmp	r2, r3
 8007b66:	bfa2      	ittt	ge
 8007b68:	463b      	movge	r3, r7
 8007b6a:	460f      	movge	r7, r1
 8007b6c:	4699      	movge	r9, r3
 8007b6e:	693d      	ldr	r5, [r7, #16]
 8007b70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	eb05 060a 	add.w	r6, r5, sl
 8007b7c:	42b3      	cmp	r3, r6
 8007b7e:	b085      	sub	sp, #20
 8007b80:	bfb8      	it	lt
 8007b82:	3101      	addlt	r1, #1
 8007b84:	f7ff fede 	bl	8007944 <_Balloc>
 8007b88:	b930      	cbnz	r0, 8007b98 <__multiply+0x40>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b90:	4b40      	ldr	r3, [pc, #256]	@ (8007c94 <__multiply+0x13c>)
 8007b92:	4841      	ldr	r0, [pc, #260]	@ (8007c98 <__multiply+0x140>)
 8007b94:	f000 fc88 	bl	80084a8 <__assert_func>
 8007b98:	f100 0414 	add.w	r4, r0, #20
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007ba4:	4573      	cmp	r3, lr
 8007ba6:	d320      	bcc.n	8007bea <__multiply+0x92>
 8007ba8:	f107 0814 	add.w	r8, r7, #20
 8007bac:	f109 0114 	add.w	r1, r9, #20
 8007bb0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007bb4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	1beb      	subs	r3, r5, r7
 8007bbc:	3b15      	subs	r3, #21
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	3715      	adds	r7, #21
 8007bc6:	42bd      	cmp	r5, r7
 8007bc8:	bf38      	it	cc
 8007bca:	2304      	movcc	r3, #4
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	428b      	cmp	r3, r1
 8007bd4:	d80c      	bhi.n	8007bf0 <__multiply+0x98>
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	dd03      	ble.n	8007be2 <__multiply+0x8a>
 8007bda:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d055      	beq.n	8007c8e <__multiply+0x136>
 8007be2:	6106      	str	r6, [r0, #16]
 8007be4:	b005      	add	sp, #20
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	f843 2b04 	str.w	r2, [r3], #4
 8007bee:	e7d9      	b.n	8007ba4 <__multiply+0x4c>
 8007bf0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007bf4:	f1ba 0f00 	cmp.w	sl, #0
 8007bf8:	d01f      	beq.n	8007c3a <__multiply+0xe2>
 8007bfa:	46c4      	mov	ip, r8
 8007bfc:	46a1      	mov	r9, r4
 8007bfe:	2700      	movs	r7, #0
 8007c00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c04:	f8d9 3000 	ldr.w	r3, [r9]
 8007c08:	fa1f fb82 	uxth.w	fp, r2
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c12:	443b      	add	r3, r7
 8007c14:	f8d9 7000 	ldr.w	r7, [r9]
 8007c18:	0c12      	lsrs	r2, r2, #16
 8007c1a:	0c3f      	lsrs	r7, r7, #16
 8007c1c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007c20:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c2a:	4565      	cmp	r5, ip
 8007c2c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007c30:	f849 3b04 	str.w	r3, [r9], #4
 8007c34:	d8e4      	bhi.n	8007c00 <__multiply+0xa8>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	50e7      	str	r7, [r4, r3]
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	3104      	adds	r1, #4
 8007c3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c42:	f1b9 0f00 	cmp.w	r9, #0
 8007c46:	d020      	beq.n	8007c8a <__multiply+0x132>
 8007c48:	4647      	mov	r7, r8
 8007c4a:	46a4      	mov	ip, r4
 8007c4c:	f04f 0a00 	mov.w	sl, #0
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	f8b7 b000 	ldrh.w	fp, [r7]
 8007c56:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	fb09 220b 	mla	r2, r9, fp, r2
 8007c60:	4452      	add	r2, sl
 8007c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c66:	f84c 3b04 	str.w	r3, [ip], #4
 8007c6a:	f857 3b04 	ldr.w	r3, [r7], #4
 8007c6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c72:	f8bc 3000 	ldrh.w	r3, [ip]
 8007c76:	42bd      	cmp	r5, r7
 8007c78:	fb09 330a 	mla	r3, r9, sl, r3
 8007c7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007c80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c84:	d8e5      	bhi.n	8007c52 <__multiply+0xfa>
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	50a3      	str	r3, [r4, r2]
 8007c8a:	3404      	adds	r4, #4
 8007c8c:	e79f      	b.n	8007bce <__multiply+0x76>
 8007c8e:	3e01      	subs	r6, #1
 8007c90:	e7a1      	b.n	8007bd6 <__multiply+0x7e>
 8007c92:	bf00      	nop
 8007c94:	0800a2ca 	.word	0x0800a2ca
 8007c98:	0800a2db 	.word	0x0800a2db

08007c9c <__pow5mult>:
 8007c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	f012 0203 	ands.w	r2, r2, #3
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	460e      	mov	r6, r1
 8007caa:	d007      	beq.n	8007cbc <__pow5mult+0x20>
 8007cac:	4c25      	ldr	r4, [pc, #148]	@ (8007d44 <__pow5mult+0xa8>)
 8007cae:	3a01      	subs	r2, #1
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cb6:	f7ff fea7 	bl	8007a08 <__multadd>
 8007cba:	4606      	mov	r6, r0
 8007cbc:	10ad      	asrs	r5, r5, #2
 8007cbe:	d03d      	beq.n	8007d3c <__pow5mult+0xa0>
 8007cc0:	69fc      	ldr	r4, [r7, #28]
 8007cc2:	b97c      	cbnz	r4, 8007ce4 <__pow5mult+0x48>
 8007cc4:	2010      	movs	r0, #16
 8007cc6:	f7ff fd87 	bl	80077d8 <malloc>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	61f8      	str	r0, [r7, #28]
 8007cce:	b928      	cbnz	r0, 8007cdc <__pow5mult+0x40>
 8007cd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d48 <__pow5mult+0xac>)
 8007cd6:	481d      	ldr	r0, [pc, #116]	@ (8007d4c <__pow5mult+0xb0>)
 8007cd8:	f000 fbe6 	bl	80084a8 <__assert_func>
 8007cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ce0:	6004      	str	r4, [r0, #0]
 8007ce2:	60c4      	str	r4, [r0, #12]
 8007ce4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cec:	b94c      	cbnz	r4, 8007d02 <__pow5mult+0x66>
 8007cee:	f240 2171 	movw	r1, #625	@ 0x271
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	f7ff ff1a 	bl	8007b2c <__i2b>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d00:	6003      	str	r3, [r0, #0]
 8007d02:	f04f 0900 	mov.w	r9, #0
 8007d06:	07eb      	lsls	r3, r5, #31
 8007d08:	d50a      	bpl.n	8007d20 <__pow5mult+0x84>
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f7ff ff22 	bl	8007b58 <__multiply>
 8007d14:	4680      	mov	r8, r0
 8007d16:	4631      	mov	r1, r6
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7ff fe53 	bl	80079c4 <_Bfree>
 8007d1e:	4646      	mov	r6, r8
 8007d20:	106d      	asrs	r5, r5, #1
 8007d22:	d00b      	beq.n	8007d3c <__pow5mult+0xa0>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	b938      	cbnz	r0, 8007d38 <__pow5mult+0x9c>
 8007d28:	4622      	mov	r2, r4
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f7ff ff13 	bl	8007b58 <__multiply>
 8007d32:	6020      	str	r0, [r4, #0]
 8007d34:	f8c0 9000 	str.w	r9, [r0]
 8007d38:	4604      	mov	r4, r0
 8007d3a:	e7e4      	b.n	8007d06 <__pow5mult+0x6a>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d42:	bf00      	nop
 8007d44:	0800a38c 	.word	0x0800a38c
 8007d48:	0800a25b 	.word	0x0800a25b
 8007d4c:	0800a2db 	.word	0x0800a2db

08007d50 <__lshift>:
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	4607      	mov	r7, r0
 8007d58:	4691      	mov	r9, r2
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	6849      	ldr	r1, [r1, #4]
 8007d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d68:	f108 0601 	add.w	r6, r8, #1
 8007d6c:	42b3      	cmp	r3, r6
 8007d6e:	db0b      	blt.n	8007d88 <__lshift+0x38>
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff fde7 	bl	8007944 <_Balloc>
 8007d76:	4605      	mov	r5, r0
 8007d78:	b948      	cbnz	r0, 8007d8e <__lshift+0x3e>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d80:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <__lshift+0xd0>)
 8007d82:	4828      	ldr	r0, [pc, #160]	@ (8007e24 <__lshift+0xd4>)
 8007d84:	f000 fb90 	bl	80084a8 <__assert_func>
 8007d88:	3101      	adds	r1, #1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	e7ee      	b.n	8007d6c <__lshift+0x1c>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f100 0114 	add.w	r1, r0, #20
 8007d94:	f100 0210 	add.w	r2, r0, #16
 8007d98:	4618      	mov	r0, r3
 8007d9a:	4553      	cmp	r3, sl
 8007d9c:	db33      	blt.n	8007e06 <__lshift+0xb6>
 8007d9e:	6920      	ldr	r0, [r4, #16]
 8007da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007da4:	f104 0314 	add.w	r3, r4, #20
 8007da8:	f019 091f 	ands.w	r9, r9, #31
 8007dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007db0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007db4:	d02b      	beq.n	8007e0e <__lshift+0xbe>
 8007db6:	468a      	mov	sl, r1
 8007db8:	2200      	movs	r2, #0
 8007dba:	f1c9 0e20 	rsb	lr, r9, #32
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	fa00 f009 	lsl.w	r0, r0, r9
 8007dc4:	4310      	orrs	r0, r2
 8007dc6:	f84a 0b04 	str.w	r0, [sl], #4
 8007dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dce:	459c      	cmp	ip, r3
 8007dd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dd4:	d8f3      	bhi.n	8007dbe <__lshift+0x6e>
 8007dd6:	ebac 0304 	sub.w	r3, ip, r4
 8007dda:	3b15      	subs	r3, #21
 8007ddc:	f023 0303 	bic.w	r3, r3, #3
 8007de0:	3304      	adds	r3, #4
 8007de2:	f104 0015 	add.w	r0, r4, #21
 8007de6:	4560      	cmp	r0, ip
 8007de8:	bf88      	it	hi
 8007dea:	2304      	movhi	r3, #4
 8007dec:	50ca      	str	r2, [r1, r3]
 8007dee:	b10a      	cbz	r2, 8007df4 <__lshift+0xa4>
 8007df0:	f108 0602 	add.w	r6, r8, #2
 8007df4:	3e01      	subs	r6, #1
 8007df6:	4638      	mov	r0, r7
 8007df8:	4621      	mov	r1, r4
 8007dfa:	612e      	str	r6, [r5, #16]
 8007dfc:	f7ff fde2 	bl	80079c4 <_Bfree>
 8007e00:	4628      	mov	r0, r5
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	e7c5      	b.n	8007d9a <__lshift+0x4a>
 8007e0e:	3904      	subs	r1, #4
 8007e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e14:	459c      	cmp	ip, r3
 8007e16:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e1a:	d8f9      	bhi.n	8007e10 <__lshift+0xc0>
 8007e1c:	e7ea      	b.n	8007df4 <__lshift+0xa4>
 8007e1e:	bf00      	nop
 8007e20:	0800a2ca 	.word	0x0800a2ca
 8007e24:	0800a2db 	.word	0x0800a2db

08007e28 <__mcmp>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	690a      	ldr	r2, [r1, #16]
 8007e2c:	6900      	ldr	r0, [r0, #16]
 8007e2e:	b530      	push	{r4, r5, lr}
 8007e30:	1a80      	subs	r0, r0, r2
 8007e32:	d10e      	bne.n	8007e52 <__mcmp+0x2a>
 8007e34:	3314      	adds	r3, #20
 8007e36:	3114      	adds	r1, #20
 8007e38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e48:	4295      	cmp	r5, r2
 8007e4a:	d003      	beq.n	8007e54 <__mcmp+0x2c>
 8007e4c:	d205      	bcs.n	8007e5a <__mcmp+0x32>
 8007e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e52:	bd30      	pop	{r4, r5, pc}
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d3f3      	bcc.n	8007e40 <__mcmp+0x18>
 8007e58:	e7fb      	b.n	8007e52 <__mcmp+0x2a>
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e7f9      	b.n	8007e52 <__mcmp+0x2a>
	...

08007e60 <__mdiff>:
 8007e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	4689      	mov	r9, r1
 8007e66:	4606      	mov	r6, r0
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4648      	mov	r0, r9
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	f7ff ffdb 	bl	8007e28 <__mcmp>
 8007e72:	1e05      	subs	r5, r0, #0
 8007e74:	d112      	bne.n	8007e9c <__mdiff+0x3c>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff fd63 	bl	8007944 <_Balloc>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	b928      	cbnz	r0, 8007e8e <__mdiff+0x2e>
 8007e82:	f240 2137 	movw	r1, #567	@ 0x237
 8007e86:	4b3e      	ldr	r3, [pc, #248]	@ (8007f80 <__mdiff+0x120>)
 8007e88:	483e      	ldr	r0, [pc, #248]	@ (8007f84 <__mdiff+0x124>)
 8007e8a:	f000 fb0d 	bl	80084a8 <__assert_func>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e94:	4610      	mov	r0, r2
 8007e96:	b003      	add	sp, #12
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	bfbc      	itt	lt
 8007e9e:	464b      	movlt	r3, r9
 8007ea0:	46a1      	movlt	r9, r4
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ea8:	bfba      	itte	lt
 8007eaa:	461c      	movlt	r4, r3
 8007eac:	2501      	movlt	r5, #1
 8007eae:	2500      	movge	r5, #0
 8007eb0:	f7ff fd48 	bl	8007944 <_Balloc>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	b918      	cbnz	r0, 8007ec0 <__mdiff+0x60>
 8007eb8:	f240 2145 	movw	r1, #581	@ 0x245
 8007ebc:	4b30      	ldr	r3, [pc, #192]	@ (8007f80 <__mdiff+0x120>)
 8007ebe:	e7e3      	b.n	8007e88 <__mdiff+0x28>
 8007ec0:	f100 0b14 	add.w	fp, r0, #20
 8007ec4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ec8:	f109 0310 	add.w	r3, r9, #16
 8007ecc:	60c5      	str	r5, [r0, #12]
 8007ece:	f04f 0c00 	mov.w	ip, #0
 8007ed2:	f109 0514 	add.w	r5, r9, #20
 8007ed6:	46d9      	mov	r9, fp
 8007ed8:	6926      	ldr	r6, [r4, #16]
 8007eda:	f104 0e14 	add.w	lr, r4, #20
 8007ede:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ee2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007eee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ef2:	b281      	uxth	r1, r0
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	fa1f f38a 	uxth.w	r3, sl
 8007efa:	1a5b      	subs	r3, r3, r1
 8007efc:	0c00      	lsrs	r0, r0, #16
 8007efe:	4463      	add	r3, ip
 8007f00:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f04:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f0e:	4576      	cmp	r6, lr
 8007f10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f14:	f849 3b04 	str.w	r3, [r9], #4
 8007f18:	d8e6      	bhi.n	8007ee8 <__mdiff+0x88>
 8007f1a:	1b33      	subs	r3, r6, r4
 8007f1c:	3b15      	subs	r3, #21
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	3415      	adds	r4, #21
 8007f24:	3304      	adds	r3, #4
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	bf38      	it	cc
 8007f2a:	2304      	movcc	r3, #4
 8007f2c:	441d      	add	r5, r3
 8007f2e:	445b      	add	r3, fp
 8007f30:	461e      	mov	r6, r3
 8007f32:	462c      	mov	r4, r5
 8007f34:	4544      	cmp	r4, r8
 8007f36:	d30e      	bcc.n	8007f56 <__mdiff+0xf6>
 8007f38:	f108 0103 	add.w	r1, r8, #3
 8007f3c:	1b49      	subs	r1, r1, r5
 8007f3e:	f021 0103 	bic.w	r1, r1, #3
 8007f42:	3d03      	subs	r5, #3
 8007f44:	45a8      	cmp	r8, r5
 8007f46:	bf38      	it	cc
 8007f48:	2100      	movcc	r1, #0
 8007f4a:	440b      	add	r3, r1
 8007f4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f50:	b199      	cbz	r1, 8007f7a <__mdiff+0x11a>
 8007f52:	6117      	str	r7, [r2, #16]
 8007f54:	e79e      	b.n	8007e94 <__mdiff+0x34>
 8007f56:	46e6      	mov	lr, ip
 8007f58:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f5c:	fa1f fc81 	uxth.w	ip, r1
 8007f60:	44f4      	add	ip, lr
 8007f62:	0c08      	lsrs	r0, r1, #16
 8007f64:	4471      	add	r1, lr
 8007f66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f74:	f846 1b04 	str.w	r1, [r6], #4
 8007f78:	e7dc      	b.n	8007f34 <__mdiff+0xd4>
 8007f7a:	3f01      	subs	r7, #1
 8007f7c:	e7e6      	b.n	8007f4c <__mdiff+0xec>
 8007f7e:	bf00      	nop
 8007f80:	0800a2ca 	.word	0x0800a2ca
 8007f84:	0800a2db 	.word	0x0800a2db

08007f88 <__d2b>:
 8007f88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	4690      	mov	r8, r2
 8007f90:	4699      	mov	r9, r3
 8007f92:	9e08      	ldr	r6, [sp, #32]
 8007f94:	f7ff fcd6 	bl	8007944 <_Balloc>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	b930      	cbnz	r0, 8007faa <__d2b+0x22>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fa2:	4b23      	ldr	r3, [pc, #140]	@ (8008030 <__d2b+0xa8>)
 8007fa4:	4823      	ldr	r0, [pc, #140]	@ (8008034 <__d2b+0xac>)
 8007fa6:	f000 fa7f 	bl	80084a8 <__assert_func>
 8007faa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fb2:	b10d      	cbz	r5, 8007fb8 <__d2b+0x30>
 8007fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	f1b8 0300 	subs.w	r3, r8, #0
 8007fbe:	d024      	beq.n	800800a <__d2b+0x82>
 8007fc0:	4668      	mov	r0, sp
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	f7ff fd85 	bl	8007ad2 <__lo0bits>
 8007fc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fcc:	b1d8      	cbz	r0, 8008006 <__d2b+0x7e>
 8007fce:	f1c0 0320 	rsb	r3, r0, #32
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	40c2      	lsrs	r2, r0
 8007fda:	6163      	str	r3, [r4, #20]
 8007fdc:	9201      	str	r2, [sp, #4]
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2201      	moveq	r2, #1
 8007fe6:	2202      	movne	r2, #2
 8007fe8:	61a3      	str	r3, [r4, #24]
 8007fea:	6122      	str	r2, [r4, #16]
 8007fec:	b1ad      	cbz	r5, 800801a <__d2b+0x92>
 8007fee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ff2:	4405      	add	r5, r0
 8007ff4:	6035      	str	r5, [r6, #0]
 8007ff6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffc:	6018      	str	r0, [r3, #0]
 8007ffe:	4620      	mov	r0, r4
 8008000:	b002      	add	sp, #8
 8008002:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008006:	6161      	str	r1, [r4, #20]
 8008008:	e7e9      	b.n	8007fde <__d2b+0x56>
 800800a:	a801      	add	r0, sp, #4
 800800c:	f7ff fd61 	bl	8007ad2 <__lo0bits>
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	3020      	adds	r0, #32
 8008018:	e7e7      	b.n	8007fea <__d2b+0x62>
 800801a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800801e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008022:	6030      	str	r0, [r6, #0]
 8008024:	6918      	ldr	r0, [r3, #16]
 8008026:	f7ff fd35 	bl	8007a94 <__hi0bits>
 800802a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800802e:	e7e4      	b.n	8007ffa <__d2b+0x72>
 8008030:	0800a2ca 	.word	0x0800a2ca
 8008034:	0800a2db 	.word	0x0800a2db

08008038 <__ssputs_r>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	461f      	mov	r7, r3
 800803e:	688e      	ldr	r6, [r1, #8]
 8008040:	4682      	mov	sl, r0
 8008042:	42be      	cmp	r6, r7
 8008044:	460c      	mov	r4, r1
 8008046:	4690      	mov	r8, r2
 8008048:	680b      	ldr	r3, [r1, #0]
 800804a:	d82d      	bhi.n	80080a8 <__ssputs_r+0x70>
 800804c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008050:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008054:	d026      	beq.n	80080a4 <__ssputs_r+0x6c>
 8008056:	6965      	ldr	r5, [r4, #20]
 8008058:	6909      	ldr	r1, [r1, #16]
 800805a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800805e:	eba3 0901 	sub.w	r9, r3, r1
 8008062:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008066:	1c7b      	adds	r3, r7, #1
 8008068:	444b      	add	r3, r9
 800806a:	106d      	asrs	r5, r5, #1
 800806c:	429d      	cmp	r5, r3
 800806e:	bf38      	it	cc
 8008070:	461d      	movcc	r5, r3
 8008072:	0553      	lsls	r3, r2, #21
 8008074:	d527      	bpl.n	80080c6 <__ssputs_r+0x8e>
 8008076:	4629      	mov	r1, r5
 8008078:	f7ff fbd8 	bl	800782c <_malloc_r>
 800807c:	4606      	mov	r6, r0
 800807e:	b360      	cbz	r0, 80080da <__ssputs_r+0xa2>
 8008080:	464a      	mov	r2, r9
 8008082:	6921      	ldr	r1, [r4, #16]
 8008084:	f000 fa02 	bl	800848c <memcpy>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800808e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	6126      	str	r6, [r4, #16]
 8008096:	444e      	add	r6, r9
 8008098:	6026      	str	r6, [r4, #0]
 800809a:	463e      	mov	r6, r7
 800809c:	6165      	str	r5, [r4, #20]
 800809e:	eba5 0509 	sub.w	r5, r5, r9
 80080a2:	60a5      	str	r5, [r4, #8]
 80080a4:	42be      	cmp	r6, r7
 80080a6:	d900      	bls.n	80080aa <__ssputs_r+0x72>
 80080a8:	463e      	mov	r6, r7
 80080aa:	4632      	mov	r2, r6
 80080ac:	4641      	mov	r1, r8
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	f000 f9c2 	bl	8008438 <memmove>
 80080b4:	2000      	movs	r0, #0
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	1b9b      	subs	r3, r3, r6
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	4433      	add	r3, r6
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c6:	462a      	mov	r2, r5
 80080c8:	f000 fa32 	bl	8008530 <_realloc_r>
 80080cc:	4606      	mov	r6, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d1e0      	bne.n	8008094 <__ssputs_r+0x5c>
 80080d2:	4650      	mov	r0, sl
 80080d4:	6921      	ldr	r1, [r4, #16]
 80080d6:	f7ff fb37 	bl	8007748 <_free_r>
 80080da:	230c      	movs	r3, #12
 80080dc:	f8ca 3000 	str.w	r3, [sl]
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	e7e9      	b.n	80080c2 <__ssputs_r+0x8a>
	...

080080f0 <_svfiprintf_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	4698      	mov	r8, r3
 80080f6:	898b      	ldrh	r3, [r1, #12]
 80080f8:	4607      	mov	r7, r0
 80080fa:	061b      	lsls	r3, r3, #24
 80080fc:	460d      	mov	r5, r1
 80080fe:	4614      	mov	r4, r2
 8008100:	b09d      	sub	sp, #116	@ 0x74
 8008102:	d510      	bpl.n	8008126 <_svfiprintf_r+0x36>
 8008104:	690b      	ldr	r3, [r1, #16]
 8008106:	b973      	cbnz	r3, 8008126 <_svfiprintf_r+0x36>
 8008108:	2140      	movs	r1, #64	@ 0x40
 800810a:	f7ff fb8f 	bl	800782c <_malloc_r>
 800810e:	6028      	str	r0, [r5, #0]
 8008110:	6128      	str	r0, [r5, #16]
 8008112:	b930      	cbnz	r0, 8008122 <_svfiprintf_r+0x32>
 8008114:	230c      	movs	r3, #12
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800811c:	b01d      	add	sp, #116	@ 0x74
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008122:	2340      	movs	r3, #64	@ 0x40
 8008124:	616b      	str	r3, [r5, #20]
 8008126:	2300      	movs	r3, #0
 8008128:	9309      	str	r3, [sp, #36]	@ 0x24
 800812a:	2320      	movs	r3, #32
 800812c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008130:	2330      	movs	r3, #48	@ 0x30
 8008132:	f04f 0901 	mov.w	r9, #1
 8008136:	f8cd 800c 	str.w	r8, [sp, #12]
 800813a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082d4 <_svfiprintf_r+0x1e4>
 800813e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008142:	4623      	mov	r3, r4
 8008144:	469a      	mov	sl, r3
 8008146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814a:	b10a      	cbz	r2, 8008150 <_svfiprintf_r+0x60>
 800814c:	2a25      	cmp	r2, #37	@ 0x25
 800814e:	d1f9      	bne.n	8008144 <_svfiprintf_r+0x54>
 8008150:	ebba 0b04 	subs.w	fp, sl, r4
 8008154:	d00b      	beq.n	800816e <_svfiprintf_r+0x7e>
 8008156:	465b      	mov	r3, fp
 8008158:	4622      	mov	r2, r4
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ff6b 	bl	8008038 <__ssputs_r>
 8008162:	3001      	adds	r0, #1
 8008164:	f000 80a7 	beq.w	80082b6 <_svfiprintf_r+0x1c6>
 8008168:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816a:	445a      	add	r2, fp
 800816c:	9209      	str	r2, [sp, #36]	@ 0x24
 800816e:	f89a 3000 	ldrb.w	r3, [sl]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 809f 	beq.w	80082b6 <_svfiprintf_r+0x1c6>
 8008178:	2300      	movs	r3, #0
 800817a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800817e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008182:	f10a 0a01 	add.w	sl, sl, #1
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800818e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008190:	4654      	mov	r4, sl
 8008192:	2205      	movs	r2, #5
 8008194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008198:	484e      	ldr	r0, [pc, #312]	@ (80082d4 <_svfiprintf_r+0x1e4>)
 800819a:	f7fe fc68 	bl	8006a6e <memchr>
 800819e:	9a04      	ldr	r2, [sp, #16]
 80081a0:	b9d8      	cbnz	r0, 80081da <_svfiprintf_r+0xea>
 80081a2:	06d0      	lsls	r0, r2, #27
 80081a4:	bf44      	itt	mi
 80081a6:	2320      	movmi	r3, #32
 80081a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ac:	0711      	lsls	r1, r2, #28
 80081ae:	bf44      	itt	mi
 80081b0:	232b      	movmi	r3, #43	@ 0x2b
 80081b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80081bc:	d015      	beq.n	80081ea <_svfiprintf_r+0xfa>
 80081be:	4654      	mov	r4, sl
 80081c0:	2000      	movs	r0, #0
 80081c2:	f04f 0c0a 	mov.w	ip, #10
 80081c6:	9a07      	ldr	r2, [sp, #28]
 80081c8:	4621      	mov	r1, r4
 80081ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ce:	3b30      	subs	r3, #48	@ 0x30
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d94b      	bls.n	800826c <_svfiprintf_r+0x17c>
 80081d4:	b1b0      	cbz	r0, 8008204 <_svfiprintf_r+0x114>
 80081d6:	9207      	str	r2, [sp, #28]
 80081d8:	e014      	b.n	8008204 <_svfiprintf_r+0x114>
 80081da:	eba0 0308 	sub.w	r3, r0, r8
 80081de:	fa09 f303 	lsl.w	r3, r9, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	46a2      	mov	sl, r4
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	e7d2      	b.n	8008190 <_svfiprintf_r+0xa0>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	9103      	str	r1, [sp, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfbb      	ittet	lt
 80081f6:	425b      	neglt	r3, r3
 80081f8:	f042 0202 	orrlt.w	r2, r2, #2
 80081fc:	9307      	strge	r3, [sp, #28]
 80081fe:	9307      	strlt	r3, [sp, #28]
 8008200:	bfb8      	it	lt
 8008202:	9204      	strlt	r2, [sp, #16]
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	2b2e      	cmp	r3, #46	@ 0x2e
 8008208:	d10a      	bne.n	8008220 <_svfiprintf_r+0x130>
 800820a:	7863      	ldrb	r3, [r4, #1]
 800820c:	2b2a      	cmp	r3, #42	@ 0x2a
 800820e:	d132      	bne.n	8008276 <_svfiprintf_r+0x186>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	3402      	adds	r4, #2
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082d8 <_svfiprintf_r+0x1e8>
 8008224:	2203      	movs	r2, #3
 8008226:	4650      	mov	r0, sl
 8008228:	7821      	ldrb	r1, [r4, #0]
 800822a:	f7fe fc20 	bl	8006a6e <memchr>
 800822e:	b138      	cbz	r0, 8008240 <_svfiprintf_r+0x150>
 8008230:	2240      	movs	r2, #64	@ 0x40
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	eba0 000a 	sub.w	r0, r0, sl
 8008238:	4082      	lsls	r2, r0
 800823a:	4313      	orrs	r3, r2
 800823c:	3401      	adds	r4, #1
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008244:	2206      	movs	r2, #6
 8008246:	4825      	ldr	r0, [pc, #148]	@ (80082dc <_svfiprintf_r+0x1ec>)
 8008248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800824c:	f7fe fc0f 	bl	8006a6e <memchr>
 8008250:	2800      	cmp	r0, #0
 8008252:	d036      	beq.n	80082c2 <_svfiprintf_r+0x1d2>
 8008254:	4b22      	ldr	r3, [pc, #136]	@ (80082e0 <_svfiprintf_r+0x1f0>)
 8008256:	bb1b      	cbnz	r3, 80082a0 <_svfiprintf_r+0x1b0>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	3307      	adds	r3, #7
 800825c:	f023 0307 	bic.w	r3, r3, #7
 8008260:	3308      	adds	r3, #8
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008266:	4433      	add	r3, r6
 8008268:	9309      	str	r3, [sp, #36]	@ 0x24
 800826a:	e76a      	b.n	8008142 <_svfiprintf_r+0x52>
 800826c:	460c      	mov	r4, r1
 800826e:	2001      	movs	r0, #1
 8008270:	fb0c 3202 	mla	r2, ip, r2, r3
 8008274:	e7a8      	b.n	80081c8 <_svfiprintf_r+0xd8>
 8008276:	2300      	movs	r3, #0
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4619      	mov	r1, r3
 800827e:	3401      	adds	r4, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4620      	mov	r0, r4
 8008284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008288:	3a30      	subs	r2, #48	@ 0x30
 800828a:	2a09      	cmp	r2, #9
 800828c:	d903      	bls.n	8008296 <_svfiprintf_r+0x1a6>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0c6      	beq.n	8008220 <_svfiprintf_r+0x130>
 8008292:	9105      	str	r1, [sp, #20]
 8008294:	e7c4      	b.n	8008220 <_svfiprintf_r+0x130>
 8008296:	4604      	mov	r4, r0
 8008298:	2301      	movs	r3, #1
 800829a:	fb0c 2101 	mla	r1, ip, r1, r2
 800829e:	e7f0      	b.n	8008282 <_svfiprintf_r+0x192>
 80082a0:	ab03      	add	r3, sp, #12
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	462a      	mov	r2, r5
 80082a6:	4638      	mov	r0, r7
 80082a8:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <_svfiprintf_r+0x1f4>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	f7fd fe40 	bl	8005f30 <_printf_float>
 80082b0:	1c42      	adds	r2, r0, #1
 80082b2:	4606      	mov	r6, r0
 80082b4:	d1d6      	bne.n	8008264 <_svfiprintf_r+0x174>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	065b      	lsls	r3, r3, #25
 80082ba:	f53f af2d 	bmi.w	8008118 <_svfiprintf_r+0x28>
 80082be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c0:	e72c      	b.n	800811c <_svfiprintf_r+0x2c>
 80082c2:	ab03      	add	r3, sp, #12
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	462a      	mov	r2, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <_svfiprintf_r+0x1f4>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	f7fe f8cd 	bl	800646c <_printf_i>
 80082d2:	e7ed      	b.n	80082b0 <_svfiprintf_r+0x1c0>
 80082d4:	0800a334 	.word	0x0800a334
 80082d8:	0800a33a 	.word	0x0800a33a
 80082dc:	0800a33e 	.word	0x0800a33e
 80082e0:	08005f31 	.word	0x08005f31
 80082e4:	08008039 	.word	0x08008039

080082e8 <__sflush_r>:
 80082e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	0716      	lsls	r6, r2, #28
 80082f0:	4605      	mov	r5, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	d454      	bmi.n	80083a0 <__sflush_r+0xb8>
 80082f6:	684b      	ldr	r3, [r1, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dc02      	bgt.n	8008302 <__sflush_r+0x1a>
 80082fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd48      	ble.n	8008394 <__sflush_r+0xac>
 8008302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008304:	2e00      	cmp	r6, #0
 8008306:	d045      	beq.n	8008394 <__sflush_r+0xac>
 8008308:	2300      	movs	r3, #0
 800830a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800830e:	682f      	ldr	r7, [r5, #0]
 8008310:	6a21      	ldr	r1, [r4, #32]
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	d030      	beq.n	8008378 <__sflush_r+0x90>
 8008316:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	0759      	lsls	r1, r3, #29
 800831c:	d505      	bpl.n	800832a <__sflush_r+0x42>
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008324:	b10b      	cbz	r3, 800832a <__sflush_r+0x42>
 8008326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008328:	1ad2      	subs	r2, r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	4628      	mov	r0, r5
 800832e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008330:	6a21      	ldr	r1, [r4, #32]
 8008332:	47b0      	blx	r6
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	d106      	bne.n	8008348 <__sflush_r+0x60>
 800833a:	6829      	ldr	r1, [r5, #0]
 800833c:	291d      	cmp	r1, #29
 800833e:	d82b      	bhi.n	8008398 <__sflush_r+0xb0>
 8008340:	4a28      	ldr	r2, [pc, #160]	@ (80083e4 <__sflush_r+0xfc>)
 8008342:	40ca      	lsrs	r2, r1
 8008344:	07d6      	lsls	r6, r2, #31
 8008346:	d527      	bpl.n	8008398 <__sflush_r+0xb0>
 8008348:	2200      	movs	r2, #0
 800834a:	6062      	str	r2, [r4, #4]
 800834c:	6922      	ldr	r2, [r4, #16]
 800834e:	04d9      	lsls	r1, r3, #19
 8008350:	6022      	str	r2, [r4, #0]
 8008352:	d504      	bpl.n	800835e <__sflush_r+0x76>
 8008354:	1c42      	adds	r2, r0, #1
 8008356:	d101      	bne.n	800835c <__sflush_r+0x74>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b903      	cbnz	r3, 800835e <__sflush_r+0x76>
 800835c:	6560      	str	r0, [r4, #84]	@ 0x54
 800835e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008360:	602f      	str	r7, [r5, #0]
 8008362:	b1b9      	cbz	r1, 8008394 <__sflush_r+0xac>
 8008364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008368:	4299      	cmp	r1, r3
 800836a:	d002      	beq.n	8008372 <__sflush_r+0x8a>
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff f9eb 	bl	8007748 <_free_r>
 8008372:	2300      	movs	r3, #0
 8008374:	6363      	str	r3, [r4, #52]	@ 0x34
 8008376:	e00d      	b.n	8008394 <__sflush_r+0xac>
 8008378:	2301      	movs	r3, #1
 800837a:	4628      	mov	r0, r5
 800837c:	47b0      	blx	r6
 800837e:	4602      	mov	r2, r0
 8008380:	1c50      	adds	r0, r2, #1
 8008382:	d1c9      	bne.n	8008318 <__sflush_r+0x30>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0c6      	beq.n	8008318 <__sflush_r+0x30>
 800838a:	2b1d      	cmp	r3, #29
 800838c:	d001      	beq.n	8008392 <__sflush_r+0xaa>
 800838e:	2b16      	cmp	r3, #22
 8008390:	d11d      	bne.n	80083ce <__sflush_r+0xe6>
 8008392:	602f      	str	r7, [r5, #0]
 8008394:	2000      	movs	r0, #0
 8008396:	e021      	b.n	80083dc <__sflush_r+0xf4>
 8008398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800839c:	b21b      	sxth	r3, r3
 800839e:	e01a      	b.n	80083d6 <__sflush_r+0xee>
 80083a0:	690f      	ldr	r7, [r1, #16]
 80083a2:	2f00      	cmp	r7, #0
 80083a4:	d0f6      	beq.n	8008394 <__sflush_r+0xac>
 80083a6:	0793      	lsls	r3, r2, #30
 80083a8:	bf18      	it	ne
 80083aa:	2300      	movne	r3, #0
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	1bf6      	subs	r6, r6, r7
 80083b4:	600f      	str	r7, [r1, #0]
 80083b6:	608b      	str	r3, [r1, #8]
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	ddeb      	ble.n	8008394 <__sflush_r+0xac>
 80083bc:	4633      	mov	r3, r6
 80083be:	463a      	mov	r2, r7
 80083c0:	4628      	mov	r0, r5
 80083c2:	6a21      	ldr	r1, [r4, #32]
 80083c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083c8:	47e0      	blx	ip
 80083ca:	2800      	cmp	r0, #0
 80083cc:	dc07      	bgt.n	80083de <__sflush_r+0xf6>
 80083ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083de:	4407      	add	r7, r0
 80083e0:	1a36      	subs	r6, r6, r0
 80083e2:	e7e9      	b.n	80083b8 <__sflush_r+0xd0>
 80083e4:	20400001 	.word	0x20400001

080083e8 <_fflush_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	690b      	ldr	r3, [r1, #16]
 80083ec:	4605      	mov	r5, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	b913      	cbnz	r3, 80083f8 <_fflush_r+0x10>
 80083f2:	2500      	movs	r5, #0
 80083f4:	4628      	mov	r0, r5
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	b118      	cbz	r0, 8008402 <_fflush_r+0x1a>
 80083fa:	6a03      	ldr	r3, [r0, #32]
 80083fc:	b90b      	cbnz	r3, 8008402 <_fflush_r+0x1a>
 80083fe:	f7fe f9df 	bl	80067c0 <__sinit>
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f3      	beq.n	80083f2 <_fflush_r+0xa>
 800840a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800840c:	07d0      	lsls	r0, r2, #31
 800840e:	d404      	bmi.n	800841a <_fflush_r+0x32>
 8008410:	0599      	lsls	r1, r3, #22
 8008412:	d402      	bmi.n	800841a <_fflush_r+0x32>
 8008414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008416:	f7fe fb28 	bl	8006a6a <__retarget_lock_acquire_recursive>
 800841a:	4628      	mov	r0, r5
 800841c:	4621      	mov	r1, r4
 800841e:	f7ff ff63 	bl	80082e8 <__sflush_r>
 8008422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008424:	4605      	mov	r5, r0
 8008426:	07da      	lsls	r2, r3, #31
 8008428:	d4e4      	bmi.n	80083f4 <_fflush_r+0xc>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	059b      	lsls	r3, r3, #22
 800842e:	d4e1      	bmi.n	80083f4 <_fflush_r+0xc>
 8008430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008432:	f7fe fb1b 	bl	8006a6c <__retarget_lock_release_recursive>
 8008436:	e7dd      	b.n	80083f4 <_fflush_r+0xc>

08008438 <memmove>:
 8008438:	4288      	cmp	r0, r1
 800843a:	b510      	push	{r4, lr}
 800843c:	eb01 0402 	add.w	r4, r1, r2
 8008440:	d902      	bls.n	8008448 <memmove+0x10>
 8008442:	4284      	cmp	r4, r0
 8008444:	4623      	mov	r3, r4
 8008446:	d807      	bhi.n	8008458 <memmove+0x20>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	42a1      	cmp	r1, r4
 800844c:	d008      	beq.n	8008460 <memmove+0x28>
 800844e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008456:	e7f8      	b.n	800844a <memmove+0x12>
 8008458:	4601      	mov	r1, r0
 800845a:	4402      	add	r2, r0
 800845c:	428a      	cmp	r2, r1
 800845e:	d100      	bne.n	8008462 <memmove+0x2a>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800846a:	e7f7      	b.n	800845c <memmove+0x24>

0800846c <_sbrk_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d05      	ldr	r5, [pc, #20]	@ (8008488 <_sbrk_r+0x1c>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7fa f87c 	bl	8002574 <_sbrk>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_sbrk_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_sbrk_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20001730 	.word	0x20001730

0800848c <memcpy>:
 800848c:	440a      	add	r2, r1
 800848e:	4291      	cmp	r1, r2
 8008490:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008494:	d100      	bne.n	8008498 <memcpy+0xc>
 8008496:	4770      	bx	lr
 8008498:	b510      	push	{r4, lr}
 800849a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a4:	d1f9      	bne.n	800849a <memcpy+0xe>
 80084a6:	bd10      	pop	{r4, pc}

080084a8 <__assert_func>:
 80084a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084aa:	4614      	mov	r4, r2
 80084ac:	461a      	mov	r2, r3
 80084ae:	4b09      	ldr	r3, [pc, #36]	@ (80084d4 <__assert_func+0x2c>)
 80084b0:	4605      	mov	r5, r0
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68d8      	ldr	r0, [r3, #12]
 80084b6:	b14c      	cbz	r4, 80084cc <__assert_func+0x24>
 80084b8:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <__assert_func+0x30>)
 80084ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084be:	9100      	str	r1, [sp, #0]
 80084c0:	462b      	mov	r3, r5
 80084c2:	4906      	ldr	r1, [pc, #24]	@ (80084dc <__assert_func+0x34>)
 80084c4:	f000 f870 	bl	80085a8 <fiprintf>
 80084c8:	f000 f880 	bl	80085cc <abort>
 80084cc:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <__assert_func+0x38>)
 80084ce:	461c      	mov	r4, r3
 80084d0:	e7f3      	b.n	80084ba <__assert_func+0x12>
 80084d2:	bf00      	nop
 80084d4:	20000024 	.word	0x20000024
 80084d8:	0800a34f 	.word	0x0800a34f
 80084dc:	0800a35c 	.word	0x0800a35c
 80084e0:	0800a38a 	.word	0x0800a38a

080084e4 <_calloc_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	fba1 5402 	umull	r5, r4, r1, r2
 80084ea:	b934      	cbnz	r4, 80084fa <_calloc_r+0x16>
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7ff f99d 	bl	800782c <_malloc_r>
 80084f2:	4606      	mov	r6, r0
 80084f4:	b928      	cbnz	r0, 8008502 <_calloc_r+0x1e>
 80084f6:	4630      	mov	r0, r6
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
 80084fa:	220c      	movs	r2, #12
 80084fc:	2600      	movs	r6, #0
 80084fe:	6002      	str	r2, [r0, #0]
 8008500:	e7f9      	b.n	80084f6 <_calloc_r+0x12>
 8008502:	462a      	mov	r2, r5
 8008504:	4621      	mov	r1, r4
 8008506:	f7fe fa33 	bl	8006970 <memset>
 800850a:	e7f4      	b.n	80084f6 <_calloc_r+0x12>

0800850c <__ascii_mbtowc>:
 800850c:	b082      	sub	sp, #8
 800850e:	b901      	cbnz	r1, 8008512 <__ascii_mbtowc+0x6>
 8008510:	a901      	add	r1, sp, #4
 8008512:	b142      	cbz	r2, 8008526 <__ascii_mbtowc+0x1a>
 8008514:	b14b      	cbz	r3, 800852a <__ascii_mbtowc+0x1e>
 8008516:	7813      	ldrb	r3, [r2, #0]
 8008518:	600b      	str	r3, [r1, #0]
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	1e10      	subs	r0, r2, #0
 800851e:	bf18      	it	ne
 8008520:	2001      	movne	r0, #1
 8008522:	b002      	add	sp, #8
 8008524:	4770      	bx	lr
 8008526:	4610      	mov	r0, r2
 8008528:	e7fb      	b.n	8008522 <__ascii_mbtowc+0x16>
 800852a:	f06f 0001 	mvn.w	r0, #1
 800852e:	e7f8      	b.n	8008522 <__ascii_mbtowc+0x16>

08008530 <_realloc_r>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4614      	mov	r4, r2
 8008538:	460d      	mov	r5, r1
 800853a:	b921      	cbnz	r1, 8008546 <_realloc_r+0x16>
 800853c:	4611      	mov	r1, r2
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f7ff b973 	b.w	800782c <_malloc_r>
 8008546:	b92a      	cbnz	r2, 8008554 <_realloc_r+0x24>
 8008548:	f7ff f8fe 	bl	8007748 <_free_r>
 800854c:	4625      	mov	r5, r4
 800854e:	4628      	mov	r0, r5
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	f000 f841 	bl	80085da <_malloc_usable_size_r>
 8008558:	4284      	cmp	r4, r0
 800855a:	4606      	mov	r6, r0
 800855c:	d802      	bhi.n	8008564 <_realloc_r+0x34>
 800855e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008562:	d8f4      	bhi.n	800854e <_realloc_r+0x1e>
 8008564:	4621      	mov	r1, r4
 8008566:	4638      	mov	r0, r7
 8008568:	f7ff f960 	bl	800782c <_malloc_r>
 800856c:	4680      	mov	r8, r0
 800856e:	b908      	cbnz	r0, 8008574 <_realloc_r+0x44>
 8008570:	4645      	mov	r5, r8
 8008572:	e7ec      	b.n	800854e <_realloc_r+0x1e>
 8008574:	42b4      	cmp	r4, r6
 8008576:	4622      	mov	r2, r4
 8008578:	4629      	mov	r1, r5
 800857a:	bf28      	it	cs
 800857c:	4632      	movcs	r2, r6
 800857e:	f7ff ff85 	bl	800848c <memcpy>
 8008582:	4629      	mov	r1, r5
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff f8df 	bl	8007748 <_free_r>
 800858a:	e7f1      	b.n	8008570 <_realloc_r+0x40>

0800858c <__ascii_wctomb>:
 800858c:	4603      	mov	r3, r0
 800858e:	4608      	mov	r0, r1
 8008590:	b141      	cbz	r1, 80085a4 <__ascii_wctomb+0x18>
 8008592:	2aff      	cmp	r2, #255	@ 0xff
 8008594:	d904      	bls.n	80085a0 <__ascii_wctomb+0x14>
 8008596:	228a      	movs	r2, #138	@ 0x8a
 8008598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	4770      	bx	lr
 80085a0:	2001      	movs	r0, #1
 80085a2:	700a      	strb	r2, [r1, #0]
 80085a4:	4770      	bx	lr
	...

080085a8 <fiprintf>:
 80085a8:	b40e      	push	{r1, r2, r3}
 80085aa:	b503      	push	{r0, r1, lr}
 80085ac:	4601      	mov	r1, r0
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <fiprintf+0x20>)
 80085b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b6:	6800      	ldr	r0, [r0, #0]
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	f000 f83d 	bl	8008638 <_vfiprintf_r>
 80085be:	b002      	add	sp, #8
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b003      	add	sp, #12
 80085c6:	4770      	bx	lr
 80085c8:	20000024 	.word	0x20000024

080085cc <abort>:
 80085cc:	2006      	movs	r0, #6
 80085ce:	b508      	push	{r3, lr}
 80085d0:	f000 fa06 	bl	80089e0 <raise>
 80085d4:	2001      	movs	r0, #1
 80085d6:	f7f9 ff58 	bl	800248a <_exit>

080085da <_malloc_usable_size_r>:
 80085da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085de:	1f18      	subs	r0, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbc      	itt	lt
 80085e4:	580b      	ldrlt	r3, [r1, r0]
 80085e6:	18c0      	addlt	r0, r0, r3
 80085e8:	4770      	bx	lr

080085ea <__sfputc_r>:
 80085ea:	6893      	ldr	r3, [r2, #8]
 80085ec:	b410      	push	{r4}
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	6093      	str	r3, [r2, #8]
 80085f4:	da07      	bge.n	8008606 <__sfputc_r+0x1c>
 80085f6:	6994      	ldr	r4, [r2, #24]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	db01      	blt.n	8008600 <__sfputc_r+0x16>
 80085fc:	290a      	cmp	r1, #10
 80085fe:	d102      	bne.n	8008606 <__sfputc_r+0x1c>
 8008600:	bc10      	pop	{r4}
 8008602:	f000 b931 	b.w	8008868 <__swbuf_r>
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	1c58      	adds	r0, r3, #1
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	7019      	strb	r1, [r3, #0]
 800860e:	4608      	mov	r0, r1
 8008610:	bc10      	pop	{r4}
 8008612:	4770      	bx	lr

08008614 <__sfputs_r>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	4614      	mov	r4, r2
 800861c:	18d5      	adds	r5, r2, r3
 800861e:	42ac      	cmp	r4, r5
 8008620:	d101      	bne.n	8008626 <__sfputs_r+0x12>
 8008622:	2000      	movs	r0, #0
 8008624:	e007      	b.n	8008636 <__sfputs_r+0x22>
 8008626:	463a      	mov	r2, r7
 8008628:	4630      	mov	r0, r6
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	f7ff ffdc 	bl	80085ea <__sfputc_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d1f3      	bne.n	800861e <__sfputs_r+0xa>
 8008636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008638 <_vfiprintf_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	460d      	mov	r5, r1
 800863e:	4614      	mov	r4, r2
 8008640:	4698      	mov	r8, r3
 8008642:	4606      	mov	r6, r0
 8008644:	b09d      	sub	sp, #116	@ 0x74
 8008646:	b118      	cbz	r0, 8008650 <_vfiprintf_r+0x18>
 8008648:	6a03      	ldr	r3, [r0, #32]
 800864a:	b90b      	cbnz	r3, 8008650 <_vfiprintf_r+0x18>
 800864c:	f7fe f8b8 	bl	80067c0 <__sinit>
 8008650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d405      	bmi.n	8008662 <_vfiprintf_r+0x2a>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	059a      	lsls	r2, r3, #22
 800865a:	d402      	bmi.n	8008662 <_vfiprintf_r+0x2a>
 800865c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800865e:	f7fe fa04 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	d501      	bpl.n	800866c <_vfiprintf_r+0x34>
 8008668:	692b      	ldr	r3, [r5, #16]
 800866a:	b99b      	cbnz	r3, 8008694 <_vfiprintf_r+0x5c>
 800866c:	4629      	mov	r1, r5
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f938 	bl	80088e4 <__swsetup_r>
 8008674:	b170      	cbz	r0, 8008694 <_vfiprintf_r+0x5c>
 8008676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008678:	07dc      	lsls	r4, r3, #31
 800867a:	d504      	bpl.n	8008686 <_vfiprintf_r+0x4e>
 800867c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008680:	b01d      	add	sp, #116	@ 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	0598      	lsls	r0, r3, #22
 800868a:	d4f7      	bmi.n	800867c <_vfiprintf_r+0x44>
 800868c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800868e:	f7fe f9ed 	bl	8006a6c <__retarget_lock_release_recursive>
 8008692:	e7f3      	b.n	800867c <_vfiprintf_r+0x44>
 8008694:	2300      	movs	r3, #0
 8008696:	9309      	str	r3, [sp, #36]	@ 0x24
 8008698:	2320      	movs	r3, #32
 800869a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800869e:	2330      	movs	r3, #48	@ 0x30
 80086a0:	f04f 0901 	mov.w	r9, #1
 80086a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008854 <_vfiprintf_r+0x21c>
 80086ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086b0:	4623      	mov	r3, r4
 80086b2:	469a      	mov	sl, r3
 80086b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b8:	b10a      	cbz	r2, 80086be <_vfiprintf_r+0x86>
 80086ba:	2a25      	cmp	r2, #37	@ 0x25
 80086bc:	d1f9      	bne.n	80086b2 <_vfiprintf_r+0x7a>
 80086be:	ebba 0b04 	subs.w	fp, sl, r4
 80086c2:	d00b      	beq.n	80086dc <_vfiprintf_r+0xa4>
 80086c4:	465b      	mov	r3, fp
 80086c6:	4622      	mov	r2, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ffa2 	bl	8008614 <__sfputs_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	f000 80a7 	beq.w	8008824 <_vfiprintf_r+0x1ec>
 80086d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d8:	445a      	add	r2, fp
 80086da:	9209      	str	r2, [sp, #36]	@ 0x24
 80086dc:	f89a 3000 	ldrb.w	r3, [sl]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 809f 	beq.w	8008824 <_vfiprintf_r+0x1ec>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f0:	f10a 0a01 	add.w	sl, sl, #1
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80086fe:	4654      	mov	r4, sl
 8008700:	2205      	movs	r2, #5
 8008702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008706:	4853      	ldr	r0, [pc, #332]	@ (8008854 <_vfiprintf_r+0x21c>)
 8008708:	f7fe f9b1 	bl	8006a6e <memchr>
 800870c:	9a04      	ldr	r2, [sp, #16]
 800870e:	b9d8      	cbnz	r0, 8008748 <_vfiprintf_r+0x110>
 8008710:	06d1      	lsls	r1, r2, #27
 8008712:	bf44      	itt	mi
 8008714:	2320      	movmi	r3, #32
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800871a:	0713      	lsls	r3, r2, #28
 800871c:	bf44      	itt	mi
 800871e:	232b      	movmi	r3, #43	@ 0x2b
 8008720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b2a      	cmp	r3, #42	@ 0x2a
 800872a:	d015      	beq.n	8008758 <_vfiprintf_r+0x120>
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	9a07      	ldr	r2, [sp, #28]
 8008736:	4621      	mov	r1, r4
 8008738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873c:	3b30      	subs	r3, #48	@ 0x30
 800873e:	2b09      	cmp	r3, #9
 8008740:	d94b      	bls.n	80087da <_vfiprintf_r+0x1a2>
 8008742:	b1b0      	cbz	r0, 8008772 <_vfiprintf_r+0x13a>
 8008744:	9207      	str	r2, [sp, #28]
 8008746:	e014      	b.n	8008772 <_vfiprintf_r+0x13a>
 8008748:	eba0 0308 	sub.w	r3, r0, r8
 800874c:	fa09 f303 	lsl.w	r3, r9, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	46a2      	mov	sl, r4
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	e7d2      	b.n	80086fe <_vfiprintf_r+0xc6>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	1d19      	adds	r1, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	9103      	str	r1, [sp, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfbb      	ittet	lt
 8008764:	425b      	neglt	r3, r3
 8008766:	f042 0202 	orrlt.w	r2, r2, #2
 800876a:	9307      	strge	r3, [sp, #28]
 800876c:	9307      	strlt	r3, [sp, #28]
 800876e:	bfb8      	it	lt
 8008770:	9204      	strlt	r2, [sp, #16]
 8008772:	7823      	ldrb	r3, [r4, #0]
 8008774:	2b2e      	cmp	r3, #46	@ 0x2e
 8008776:	d10a      	bne.n	800878e <_vfiprintf_r+0x156>
 8008778:	7863      	ldrb	r3, [r4, #1]
 800877a:	2b2a      	cmp	r3, #42	@ 0x2a
 800877c:	d132      	bne.n	80087e4 <_vfiprintf_r+0x1ac>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	3402      	adds	r4, #2
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9203      	str	r2, [sp, #12]
 8008788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800878c:	9305      	str	r3, [sp, #20]
 800878e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008858 <_vfiprintf_r+0x220>
 8008792:	2203      	movs	r2, #3
 8008794:	4650      	mov	r0, sl
 8008796:	7821      	ldrb	r1, [r4, #0]
 8008798:	f7fe f969 	bl	8006a6e <memchr>
 800879c:	b138      	cbz	r0, 80087ae <_vfiprintf_r+0x176>
 800879e:	2240      	movs	r2, #64	@ 0x40
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	eba0 000a 	sub.w	r0, r0, sl
 80087a6:	4082      	lsls	r2, r0
 80087a8:	4313      	orrs	r3, r2
 80087aa:	3401      	adds	r4, #1
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b2:	2206      	movs	r2, #6
 80087b4:	4829      	ldr	r0, [pc, #164]	@ (800885c <_vfiprintf_r+0x224>)
 80087b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087ba:	f7fe f958 	bl	8006a6e <memchr>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d03f      	beq.n	8008842 <_vfiprintf_r+0x20a>
 80087c2:	4b27      	ldr	r3, [pc, #156]	@ (8008860 <_vfiprintf_r+0x228>)
 80087c4:	bb1b      	cbnz	r3, 800880e <_vfiprintf_r+0x1d6>
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	3307      	adds	r3, #7
 80087ca:	f023 0307 	bic.w	r3, r3, #7
 80087ce:	3308      	adds	r3, #8
 80087d0:	9303      	str	r3, [sp, #12]
 80087d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d4:	443b      	add	r3, r7
 80087d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d8:	e76a      	b.n	80086b0 <_vfiprintf_r+0x78>
 80087da:	460c      	mov	r4, r1
 80087dc:	2001      	movs	r0, #1
 80087de:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e2:	e7a8      	b.n	8008736 <_vfiprintf_r+0xfe>
 80087e4:	2300      	movs	r3, #0
 80087e6:	f04f 0c0a 	mov.w	ip, #10
 80087ea:	4619      	mov	r1, r3
 80087ec:	3401      	adds	r4, #1
 80087ee:	9305      	str	r3, [sp, #20]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f6:	3a30      	subs	r2, #48	@ 0x30
 80087f8:	2a09      	cmp	r2, #9
 80087fa:	d903      	bls.n	8008804 <_vfiprintf_r+0x1cc>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0c6      	beq.n	800878e <_vfiprintf_r+0x156>
 8008800:	9105      	str	r1, [sp, #20]
 8008802:	e7c4      	b.n	800878e <_vfiprintf_r+0x156>
 8008804:	4604      	mov	r4, r0
 8008806:	2301      	movs	r3, #1
 8008808:	fb0c 2101 	mla	r1, ip, r1, r2
 800880c:	e7f0      	b.n	80087f0 <_vfiprintf_r+0x1b8>
 800880e:	ab03      	add	r3, sp, #12
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	462a      	mov	r2, r5
 8008814:	4630      	mov	r0, r6
 8008816:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <_vfiprintf_r+0x22c>)
 8008818:	a904      	add	r1, sp, #16
 800881a:	f7fd fb89 	bl	8005f30 <_printf_float>
 800881e:	4607      	mov	r7, r0
 8008820:	1c78      	adds	r0, r7, #1
 8008822:	d1d6      	bne.n	80087d2 <_vfiprintf_r+0x19a>
 8008824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008826:	07d9      	lsls	r1, r3, #31
 8008828:	d405      	bmi.n	8008836 <_vfiprintf_r+0x1fe>
 800882a:	89ab      	ldrh	r3, [r5, #12]
 800882c:	059a      	lsls	r2, r3, #22
 800882e:	d402      	bmi.n	8008836 <_vfiprintf_r+0x1fe>
 8008830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008832:	f7fe f91b 	bl	8006a6c <__retarget_lock_release_recursive>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	065b      	lsls	r3, r3, #25
 800883a:	f53f af1f 	bmi.w	800867c <_vfiprintf_r+0x44>
 800883e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008840:	e71e      	b.n	8008680 <_vfiprintf_r+0x48>
 8008842:	ab03      	add	r3, sp, #12
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	462a      	mov	r2, r5
 8008848:	4630      	mov	r0, r6
 800884a:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <_vfiprintf_r+0x22c>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	f7fd fe0d 	bl	800646c <_printf_i>
 8008852:	e7e4      	b.n	800881e <_vfiprintf_r+0x1e6>
 8008854:	0800a334 	.word	0x0800a334
 8008858:	0800a33a 	.word	0x0800a33a
 800885c:	0800a33e 	.word	0x0800a33e
 8008860:	08005f31 	.word	0x08005f31
 8008864:	08008615 	.word	0x08008615

08008868 <__swbuf_r>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	460e      	mov	r6, r1
 800886c:	4614      	mov	r4, r2
 800886e:	4605      	mov	r5, r0
 8008870:	b118      	cbz	r0, 800887a <__swbuf_r+0x12>
 8008872:	6a03      	ldr	r3, [r0, #32]
 8008874:	b90b      	cbnz	r3, 800887a <__swbuf_r+0x12>
 8008876:	f7fd ffa3 	bl	80067c0 <__sinit>
 800887a:	69a3      	ldr	r3, [r4, #24]
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	071a      	lsls	r2, r3, #28
 8008882:	d501      	bpl.n	8008888 <__swbuf_r+0x20>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	b943      	cbnz	r3, 800889a <__swbuf_r+0x32>
 8008888:	4621      	mov	r1, r4
 800888a:	4628      	mov	r0, r5
 800888c:	f000 f82a 	bl	80088e4 <__swsetup_r>
 8008890:	b118      	cbz	r0, 800889a <__swbuf_r+0x32>
 8008892:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008896:	4638      	mov	r0, r7
 8008898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	b2f6      	uxtb	r6, r6
 80088a0:	1a98      	subs	r0, r3, r2
 80088a2:	6963      	ldr	r3, [r4, #20]
 80088a4:	4637      	mov	r7, r6
 80088a6:	4283      	cmp	r3, r0
 80088a8:	dc05      	bgt.n	80088b6 <__swbuf_r+0x4e>
 80088aa:	4621      	mov	r1, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7ff fd9b 	bl	80083e8 <_fflush_r>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1ed      	bne.n	8008892 <__swbuf_r+0x2a>
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	701e      	strb	r6, [r3, #0]
 80088c4:	6962      	ldr	r2, [r4, #20]
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d004      	beq.n	80088d6 <__swbuf_r+0x6e>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d5e1      	bpl.n	8008896 <__swbuf_r+0x2e>
 80088d2:	2e0a      	cmp	r6, #10
 80088d4:	d1df      	bne.n	8008896 <__swbuf_r+0x2e>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f7ff fd85 	bl	80083e8 <_fflush_r>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d0d9      	beq.n	8008896 <__swbuf_r+0x2e>
 80088e2:	e7d6      	b.n	8008892 <__swbuf_r+0x2a>

080088e4 <__swsetup_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4b29      	ldr	r3, [pc, #164]	@ (800898c <__swsetup_r+0xa8>)
 80088e8:	4605      	mov	r5, r0
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	460c      	mov	r4, r1
 80088ee:	b118      	cbz	r0, 80088f8 <__swsetup_r+0x14>
 80088f0:	6a03      	ldr	r3, [r0, #32]
 80088f2:	b90b      	cbnz	r3, 80088f8 <__swsetup_r+0x14>
 80088f4:	f7fd ff64 	bl	80067c0 <__sinit>
 80088f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fc:	0719      	lsls	r1, r3, #28
 80088fe:	d422      	bmi.n	8008946 <__swsetup_r+0x62>
 8008900:	06da      	lsls	r2, r3, #27
 8008902:	d407      	bmi.n	8008914 <__swsetup_r+0x30>
 8008904:	2209      	movs	r2, #9
 8008906:	602a      	str	r2, [r5, #0]
 8008908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	e033      	b.n	800897c <__swsetup_r+0x98>
 8008914:	0758      	lsls	r0, r3, #29
 8008916:	d512      	bpl.n	800893e <__swsetup_r+0x5a>
 8008918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800891a:	b141      	cbz	r1, 800892e <__swsetup_r+0x4a>
 800891c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008920:	4299      	cmp	r1, r3
 8008922:	d002      	beq.n	800892a <__swsetup_r+0x46>
 8008924:	4628      	mov	r0, r5
 8008926:	f7fe ff0f 	bl	8007748 <_free_r>
 800892a:	2300      	movs	r3, #0
 800892c:	6363      	str	r3, [r4, #52]	@ 0x34
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	2300      	movs	r3, #0
 8008938:	6063      	str	r3, [r4, #4]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f043 0308 	orr.w	r3, r3, #8
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	b94b      	cbnz	r3, 800895e <__swsetup_r+0x7a>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008954:	d003      	beq.n	800895e <__swsetup_r+0x7a>
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 f882 	bl	8008a62 <__smakebuf_r>
 800895e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008962:	f013 0201 	ands.w	r2, r3, #1
 8008966:	d00a      	beq.n	800897e <__swsetup_r+0x9a>
 8008968:	2200      	movs	r2, #0
 800896a:	60a2      	str	r2, [r4, #8]
 800896c:	6962      	ldr	r2, [r4, #20]
 800896e:	4252      	negs	r2, r2
 8008970:	61a2      	str	r2, [r4, #24]
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	b942      	cbnz	r2, 8008988 <__swsetup_r+0xa4>
 8008976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800897a:	d1c5      	bne.n	8008908 <__swsetup_r+0x24>
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	0799      	lsls	r1, r3, #30
 8008980:	bf58      	it	pl
 8008982:	6962      	ldrpl	r2, [r4, #20]
 8008984:	60a2      	str	r2, [r4, #8]
 8008986:	e7f4      	b.n	8008972 <__swsetup_r+0x8e>
 8008988:	2000      	movs	r0, #0
 800898a:	e7f7      	b.n	800897c <__swsetup_r+0x98>
 800898c:	20000024 	.word	0x20000024

08008990 <_raise_r>:
 8008990:	291f      	cmp	r1, #31
 8008992:	b538      	push	{r3, r4, r5, lr}
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	d904      	bls.n	80089a4 <_raise_r+0x14>
 800899a:	2316      	movs	r3, #22
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089a6:	b112      	cbz	r2, 80089ae <_raise_r+0x1e>
 80089a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ac:	b94b      	cbnz	r3, 80089c2 <_raise_r+0x32>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f830 	bl	8008a14 <_getpid_r>
 80089b4:	4622      	mov	r2, r4
 80089b6:	4601      	mov	r1, r0
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089be:	f000 b817 	b.w	80089f0 <_kill_r>
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d00a      	beq.n	80089dc <_raise_r+0x4c>
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	d103      	bne.n	80089d2 <_raise_r+0x42>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	2001      	movs	r0, #1
 80089d0:	e7e7      	b.n	80089a2 <_raise_r+0x12>
 80089d2:	2100      	movs	r1, #0
 80089d4:	4620      	mov	r0, r4
 80089d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089da:	4798      	blx	r3
 80089dc:	2000      	movs	r0, #0
 80089de:	e7e0      	b.n	80089a2 <_raise_r+0x12>

080089e0 <raise>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <raise+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f7ff bfd3 	b.w	8008990 <_raise_r>
 80089ea:	bf00      	nop
 80089ec:	20000024 	.word	0x20000024

080089f0 <_kill_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	2300      	movs	r3, #0
 80089f4:	4d06      	ldr	r5, [pc, #24]	@ (8008a10 <_kill_r+0x20>)
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	f7f9 fd34 	bl	800246a <_kill>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d102      	bne.n	8008a0c <_kill_r+0x1c>
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	b103      	cbz	r3, 8008a0c <_kill_r+0x1c>
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	20001730 	.word	0x20001730

08008a14 <_getpid_r>:
 8008a14:	f7f9 bd22 	b.w	800245c <_getpid>

08008a18 <__swhatbuf_r>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	4615      	mov	r5, r2
 8008a22:	2900      	cmp	r1, #0
 8008a24:	461e      	mov	r6, r3
 8008a26:	b096      	sub	sp, #88	@ 0x58
 8008a28:	da0c      	bge.n	8008a44 <__swhatbuf_r+0x2c>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a32:	bf14      	ite	ne
 8008a34:	2340      	movne	r3, #64	@ 0x40
 8008a36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	6031      	str	r1, [r6, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	b016      	add	sp, #88	@ 0x58
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	466a      	mov	r2, sp
 8008a46:	f000 f849 	bl	8008adc <_fstat_r>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	dbed      	blt.n	8008a2a <__swhatbuf_r+0x12>
 8008a4e:	9901      	ldr	r1, [sp, #4]
 8008a50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a58:	4259      	negs	r1, r3
 8008a5a:	4159      	adcs	r1, r3
 8008a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a60:	e7eb      	b.n	8008a3a <__swhatbuf_r+0x22>

08008a62 <__smakebuf_r>:
 8008a62:	898b      	ldrh	r3, [r1, #12]
 8008a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a66:	079d      	lsls	r5, r3, #30
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	d507      	bpl.n	8008a7e <__smakebuf_r+0x1c>
 8008a6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	2301      	movs	r3, #1
 8008a78:	6163      	str	r3, [r4, #20]
 8008a7a:	b003      	add	sp, #12
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7e:	466a      	mov	r2, sp
 8008a80:	ab01      	add	r3, sp, #4
 8008a82:	f7ff ffc9 	bl	8008a18 <__swhatbuf_r>
 8008a86:	9f00      	ldr	r7, [sp, #0]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7fe fecd 	bl	800782c <_malloc_r>
 8008a92:	b948      	cbnz	r0, 8008aa8 <__smakebuf_r+0x46>
 8008a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a98:	059a      	lsls	r2, r3, #22
 8008a9a:	d4ee      	bmi.n	8008a7a <__smakebuf_r+0x18>
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	f043 0302 	orr.w	r3, r3, #2
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	e7e2      	b.n	8008a6e <__smakebuf_r+0xc>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	6020      	str	r0, [r4, #0]
 8008ab8:	b15b      	cbz	r3, 8008ad2 <__smakebuf_r+0x70>
 8008aba:	4630      	mov	r0, r6
 8008abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ac0:	f000 f81e 	bl	8008b00 <_isatty_r>
 8008ac4:	b128      	cbz	r0, 8008ad2 <__smakebuf_r+0x70>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	431d      	orrs	r5, r3
 8008ad6:	81a5      	strh	r5, [r4, #12]
 8008ad8:	e7cf      	b.n	8008a7a <__smakebuf_r+0x18>
	...

08008adc <_fstat_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4d06      	ldr	r5, [pc, #24]	@ (8008afc <_fstat_r+0x20>)
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f7f9 fd1d 	bl	8002528 <_fstat>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d102      	bne.n	8008af8 <_fstat_r+0x1c>
 8008af2:	682b      	ldr	r3, [r5, #0]
 8008af4:	b103      	cbz	r3, 8008af8 <_fstat_r+0x1c>
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	bd38      	pop	{r3, r4, r5, pc}
 8008afa:	bf00      	nop
 8008afc:	20001730 	.word	0x20001730

08008b00 <_isatty_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	2300      	movs	r3, #0
 8008b04:	4d05      	ldr	r5, [pc, #20]	@ (8008b1c <_isatty_r+0x1c>)
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f9 fd1b 	bl	8002546 <_isatty>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_isatty_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_isatty_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20001730 	.word	0x20001730

08008b20 <sqrt>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	f000 f81f 	bl	8008b68 <__ieee754_sqrt>
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	463b      	mov	r3, r7
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f8 f81d 	bl	8000b74 <__aeabi_dcmpun>
 8008b3a:	b990      	cbnz	r0, 8008b62 <sqrt+0x42>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4630      	mov	r0, r6
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 ffee 	bl	8000b24 <__aeabi_dcmplt>
 8008b48:	b158      	cbz	r0, 8008b62 <sqrt+0x42>
 8008b4a:	f7fd ff63 	bl	8006a14 <__errno>
 8008b4e:	2321      	movs	r3, #33	@ 0x21
 8008b50:	2200      	movs	r2, #0
 8008b52:	6003      	str	r3, [r0, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7f7 fe9b 	bl	8000894 <__aeabi_ddiv>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b68 <__ieee754_sqrt>:
 8008b68:	4a65      	ldr	r2, [pc, #404]	@ (8008d00 <__ieee754_sqrt+0x198>)
 8008b6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6e:	438a      	bics	r2, r1
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	460b      	mov	r3, r1
 8008b76:	4604      	mov	r4, r0
 8008b78:	d10e      	bne.n	8008b98 <__ieee754_sqrt+0x30>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	f7f7 fd60 	bl	8000640 <__aeabi_dmul>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4630      	mov	r0, r6
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 fba4 	bl	80002d4 <__adddf3>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	dc0c      	bgt.n	8008bb6 <__ieee754_sqrt+0x4e>
 8008b9c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008ba0:	4302      	orrs	r2, r0
 8008ba2:	d0f5      	beq.n	8008b90 <__ieee754_sqrt+0x28>
 8008ba4:	b189      	cbz	r1, 8008bca <__ieee754_sqrt+0x62>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	f7f7 fb92 	bl	80002d0 <__aeabi_dsub>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	f7f7 fe70 	bl	8000894 <__aeabi_ddiv>
 8008bb4:	e7ea      	b.n	8008b8c <__ieee754_sqrt+0x24>
 8008bb6:	150a      	asrs	r2, r1, #20
 8008bb8:	d115      	bne.n	8008be6 <__ieee754_sqrt+0x7e>
 8008bba:	2100      	movs	r1, #0
 8008bbc:	e009      	b.n	8008bd2 <__ieee754_sqrt+0x6a>
 8008bbe:	0ae3      	lsrs	r3, r4, #11
 8008bc0:	3a15      	subs	r2, #21
 8008bc2:	0564      	lsls	r4, r4, #21
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0fa      	beq.n	8008bbe <__ieee754_sqrt+0x56>
 8008bc8:	e7f7      	b.n	8008bba <__ieee754_sqrt+0x52>
 8008bca:	460a      	mov	r2, r1
 8008bcc:	e7fa      	b.n	8008bc4 <__ieee754_sqrt+0x5c>
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	3101      	adds	r1, #1
 8008bd2:	02d8      	lsls	r0, r3, #11
 8008bd4:	d5fb      	bpl.n	8008bce <__ieee754_sqrt+0x66>
 8008bd6:	1e48      	subs	r0, r1, #1
 8008bd8:	1a12      	subs	r2, r2, r0
 8008bda:	f1c1 0020 	rsb	r0, r1, #32
 8008bde:	fa24 f000 	lsr.w	r0, r4, r0
 8008be2:	4303      	orrs	r3, r0
 8008be4:	408c      	lsls	r4, r1
 8008be6:	2700      	movs	r7, #0
 8008be8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008bec:	2116      	movs	r1, #22
 8008bee:	07d2      	lsls	r2, r2, #31
 8008bf0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	bf5c      	itt	pl
 8008c00:	005b      	lslpl	r3, r3, #1
 8008c02:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c0a:	bf58      	it	pl
 8008c0c:	0064      	lslpl	r4, r4, #1
 8008c0e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c16:	0064      	lsls	r4, r4, #1
 8008c18:	1815      	adds	r5, r2, r0
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	bfde      	ittt	le
 8008c1e:	182a      	addle	r2, r5, r0
 8008c20:	1b5b      	suble	r3, r3, r5
 8008c22:	183f      	addle	r7, r7, r0
 8008c24:	0fe5      	lsrs	r5, r4, #31
 8008c26:	3901      	subs	r1, #1
 8008c28:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008c2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008c30:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008c34:	d1f0      	bne.n	8008c18 <__ieee754_sqrt+0xb0>
 8008c36:	460d      	mov	r5, r1
 8008c38:	2620      	movs	r6, #32
 8008c3a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	eb00 0c01 	add.w	ip, r0, r1
 8008c44:	dc02      	bgt.n	8008c4c <__ieee754_sqrt+0xe4>
 8008c46:	d113      	bne.n	8008c70 <__ieee754_sqrt+0x108>
 8008c48:	45a4      	cmp	ip, r4
 8008c4a:	d811      	bhi.n	8008c70 <__ieee754_sqrt+0x108>
 8008c4c:	f1bc 0f00 	cmp.w	ip, #0
 8008c50:	eb0c 0100 	add.w	r1, ip, r0
 8008c54:	da3e      	bge.n	8008cd4 <__ieee754_sqrt+0x16c>
 8008c56:	2900      	cmp	r1, #0
 8008c58:	db3c      	blt.n	8008cd4 <__ieee754_sqrt+0x16c>
 8008c5a:	f102 0e01 	add.w	lr, r2, #1
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	4672      	mov	r2, lr
 8008c62:	45a4      	cmp	ip, r4
 8008c64:	bf88      	it	hi
 8008c66:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008c6a:	eba4 040c 	sub.w	r4, r4, ip
 8008c6e:	4405      	add	r5, r0
 8008c70:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008c74:	3e01      	subs	r6, #1
 8008c76:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008c7a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008c7e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008c82:	d1dc      	bne.n	8008c3e <__ieee754_sqrt+0xd6>
 8008c84:	431c      	orrs	r4, r3
 8008c86:	d01a      	beq.n	8008cbe <__ieee754_sqrt+0x156>
 8008c88:	4c1e      	ldr	r4, [pc, #120]	@ (8008d04 <__ieee754_sqrt+0x19c>)
 8008c8a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8008d08 <__ieee754_sqrt+0x1a0>
 8008c8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008c92:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c96:	f7f7 fb1b 	bl	80002d0 <__aeabi_dsub>
 8008c9a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	4659      	mov	r1, fp
 8008ca6:	f7f7 ff47 	bl	8000b38 <__aeabi_dcmple>
 8008caa:	b140      	cbz	r0, 8008cbe <__ieee754_sqrt+0x156>
 8008cac:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008cb0:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008cb4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008cb8:	d10e      	bne.n	8008cd8 <__ieee754_sqrt+0x170>
 8008cba:	4635      	mov	r5, r6
 8008cbc:	3701      	adds	r7, #1
 8008cbe:	107b      	asrs	r3, r7, #1
 8008cc0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008cc4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008cc8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008ccc:	086b      	lsrs	r3, r5, #1
 8008cce:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8008cd2:	e75b      	b.n	8008b8c <__ieee754_sqrt+0x24>
 8008cd4:	4696      	mov	lr, r2
 8008cd6:	e7c2      	b.n	8008c5e <__ieee754_sqrt+0xf6>
 8008cd8:	f7f7 fafc 	bl	80002d4 <__adddf3>
 8008cdc:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4650      	mov	r0, sl
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	f7f7 ff1c 	bl	8000b24 <__aeabi_dcmplt>
 8008cec:	b120      	cbz	r0, 8008cf8 <__ieee754_sqrt+0x190>
 8008cee:	1cab      	adds	r3, r5, #2
 8008cf0:	bf08      	it	eq
 8008cf2:	3701      	addeq	r7, #1
 8008cf4:	3502      	adds	r5, #2
 8008cf6:	e7e2      	b.n	8008cbe <__ieee754_sqrt+0x156>
 8008cf8:	1c6b      	adds	r3, r5, #1
 8008cfa:	f023 0501 	bic.w	r5, r3, #1
 8008cfe:	e7de      	b.n	8008cbe <__ieee754_sqrt+0x156>
 8008d00:	7ff00000 	.word	0x7ff00000
 8008d04:	0800a598 	.word	0x0800a598
 8008d08:	0800a590 	.word	0x0800a590

08008d0c <_init>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr

08008d18 <_fini>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr
