
adxl_345_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  08007dd8  08007dd8  00008dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a328  0800a328  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a328  0800a328  0000b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a330  0800a330  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a330  0800a330  0000b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a338  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca4  200001e8  0800a520  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20000e8c  0800a520  0000ce8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af89  00000000  00000000  0000c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002007  00000000  00000000  0001719a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  000191a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001858e  00000000  00000000  00019c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b660  00000000  00000000  000321be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086d00  00000000  00000000  0003d81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c451e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000801  00000000  00000000  000c4561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d28  00000000  00000000  000c4d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c8a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dbc 	.word	0x08007dbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007dbc 	.word	0x08007dbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <ADXL345_CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Функции работы с CS
void ADXL345_CS_Select()   { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET); }
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa2:	4802      	ldr	r0, [pc, #8]	@ (8000fac <ADXL345_CS_Select+0x14>)
 8000fa4:	f001 ff0c 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <ADXL345_CS_Deselect>:
void ADXL345_CS_Deselect() { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); }
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fba:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <ADXL345_CS_Deselect+0x14>)
 8000fbc:	f001 ff00 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <ADXL345_WriteReg>:

// Функции SPI записи/чтения
void ADXL345_WriteReg(uint8_t reg, uint8_t data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg & 0x3F, data};  // MSB=0 для записи
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	733b      	strb	r3, [r7, #12]
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	737b      	strb	r3, [r7, #13]
    ADXL345_CS_Select();
 8000fe6:	f7ff ffd7 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <ADXL345_WriteReg+0x40>)
 8000ff6:	f002 fb8f 	bl	8003718 <HAL_SPI_Transmit>
    ADXL345_CS_Deselect();
 8000ffa:	f7ff ffd9 	bl	8000fb0 <ADXL345_CS_Deselect>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000025c 	.word	0x2000025c

0800100c <ADXL345_ReadAxes>:
    HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, HAL_MAX_DELAY);
    ADXL345_CS_Deselect();
    return rx;
}

void ADXL345_ReadAxes(int16_t* x, int16_t* y, int16_t* z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    uint8_t tx[7];
    uint8_t rx[7];
    tx[0] = 0x80 | 0x40 | 0x32; // чтение многобайтно с DATAX0
 8001018:	23f2      	movs	r3, #242	@ 0xf2
 800101a:	773b      	strb	r3, [r7, #28]
    for(int i=1; i<7; i++) tx[i]=0x00;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001020:	e008      	b.n	8001034 <ADXL345_ReadAxes+0x28>
 8001022:	f107 021c 	add.w	r2, r7, #28
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	2b06      	cmp	r3, #6
 8001038:	ddf3      	ble.n	8001022 <ADXL345_ReadAxes+0x16>

    ADXL345_CS_Select();
 800103a:	f7ff ffad 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 7, HAL_MAX_DELAY);
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	f107 011c 	add.w	r1, r7, #28
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2307      	movs	r3, #7
 800104e:	4813      	ldr	r0, [pc, #76]	@ (800109c <ADXL345_ReadAxes+0x90>)
 8001050:	f002 fca6 	bl	80039a0 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001054:	f7ff ffac 	bl	8000fb0 <ADXL345_CS_Deselect>

    *x = (int16_t)((rx[2]<<8)|rx[1]);
 8001058:	7dbb      	ldrb	r3, [r7, #22]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7d7b      	ldrb	r3, [r7, #21]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((rx[4]<<8)|rx[3]);
 800106c:	7e3b      	ldrb	r3, [r7, #24]
 800106e:	b21b      	sxth	r3, r3
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((rx[6]<<8)|rx[5]);
 8001080:	7ebb      	ldrb	r3, [r7, #26]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000025c 	.word	0x2000025c

080010a0 <ADXL345_Init>:
// Инициализация ADXL345
/* Инициализация ADXL345 */
/* Примечание: здесь устанавливаем full resolution и диапазон ±16g (DATA_FORMAT = 0x0B),
   включаем измерения POWER_CTL = 0x08.
   При желании можно настроить частоту в регистре BW_RATE (0x2C) */
void ADXL345_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f001 f933 	bl	8002310 <HAL_Delay>
    ADXL345_WriteReg(0x2D, 0x00); // сброс POWER_CTL чтобы быть уверенным
 80010aa:	2100      	movs	r1, #0
 80010ac:	202d      	movs	r0, #45	@ 0x2d
 80010ae:	f7ff ff8b 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f001 f92c 	bl	8002310 <HAL_Delay>
    ADXL345_WriteReg(0x31, 0x0B); // DATA_FORMAT: FULL_RES=1, range=11 (±16g)
 80010b8:	210b      	movs	r1, #11
 80010ba:	2031      	movs	r0, #49	@ 0x31
 80010bc:	f7ff ff84 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f001 f925 	bl	8002310 <HAL_Delay>
    // опционально: установить скорость выборки (BW_RATE). По умолчанию 100 Hz.
    ADXL345_WriteReg(0x2C, 0x0A); // пример: установить 100 Hz (см. datasheet для нужного значения)
 80010c6:	210a      	movs	r1, #10
 80010c8:	202c      	movs	r0, #44	@ 0x2c
 80010ca:	f7ff ff7d 	bl	8000fc8 <ADXL345_WriteReg>
    ADXL345_WriteReg(0x2D, 0x08); // POWER_CTL: Measure = 1
 80010ce:	2108      	movs	r1, #8
 80010d0:	202d      	movs	r0, #45	@ 0x2d
 80010d2:	f7ff ff79 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 f91a 	bl	8002310 <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ADXL345_ReadID>:
#define IMPACT_THRESHOLD_G 6.0f     // порог в g (пример: 6g — подбери экспериментально)
#define IMPACT_DEBOUNCE_MS 200      // окно, в течение которого игнорируем новые пики (ms)
#define SAMPLE_PERIOD_MS 10          // период опроса в ms (зависит от BW_RATE)

//Получение ID устройства, должно вывести 0xE5 (проверка устройства)
uint8_t ADXL345_ReadID() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
    uint8_t tx[2] = {0x80 | 0x00, 0x00}; // запрос регистра 0x00
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	80bb      	strh	r3, [r7, #4]
    uint8_t rx[2] = {0};
 80010ea:	2300      	movs	r3, #0
 80010ec:	803b      	strh	r3, [r7, #0]
    ADXL345_CS_Select();
 80010ee:	f7ff ff53 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 2, HAL_MAX_DELAY);
 80010f2:	463a      	mov	r2, r7
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <ADXL345_ReadID+0x34>)
 8001100:	f002 fc4e 	bl	80039a0 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001104:	f7ff ff54 	bl	8000fb0 <ADXL345_CS_Deselect>
    return rx[1]; // второй байт = ответ
 8001108:	787b      	ldrb	r3, [r7, #1]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000025c 	.word	0x2000025c

08001118 <process_sample_and_detect>:
    uint32_t last_impact_tick; // HAL_GetTick() временная метка
} PeakData;

PeakData peaks = {0};

void process_sample_and_detect(int16_t rx, int16_t ry, int16_t rz) {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0f0      	sub	sp, #448	@ 0x1c0
 800111c:	af04      	add	r7, sp, #16
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001128:	f5a3 73d5 	sub.w	r3, r3, #426	@ 0x1aa
 800112c:	4622      	mov	r2, r4
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001134:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001138:	4602      	mov	r2, r0
 800113a:	801a      	strh	r2, [r3, #0]
 800113c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001140:	f5a3 73d7 	sub.w	r3, r3, #430	@ 0x1ae
 8001144:	460a      	mov	r2, r1
 8001146:	801a      	strh	r2, [r3, #0]
	char message[255];
	char message_display[128];
	// Преобразование raw -> g -> m/s^2
    float gx = (float)rx * ADXL_SCALE_G;
 8001148:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800114c:	f5a3 73d5 	sub.w	r3, r3, #426	@ 0x1aa
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe55 	bl	8000e04 <__aeabi_i2f>
 800115a:	4603      	mov	r3, r0
 800115c:	498b      	ldr	r1, [pc, #556]	@ (800138c <process_sample_and_detect+0x274>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7fe fffe 	bl	8000160 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    float gy = (float)ry * ADXL_SCALE_G;
 800116a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800116e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe44 	bl	8000e04 <__aeabi_i2f>
 800117c:	4603      	mov	r3, r0
 800117e:	4983      	ldr	r1, [pc, #524]	@ (800138c <process_sample_and_detect+0x274>)
 8001180:	4618      	mov	r0, r3
 8001182:	f7fe ffed 	bl	8000160 <__aeabi_fmul>
 8001186:	4603      	mov	r3, r0
 8001188:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    float gz = (float)rz * ADXL_SCALE_G;
 800118c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001190:	f5a3 73d7 	sub.w	r3, r3, #430	@ 0x1ae
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe33 	bl	8000e04 <__aeabi_i2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	497a      	ldr	r1, [pc, #488]	@ (800138c <process_sample_and_detect+0x274>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7fe ffdc 	bl	8000160 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float abs_gx = fabsf(gx), abs_gy = fabsf(gy), abs_gz = fabsf(gz);
 80011ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80011b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80011ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80011be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011c2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80011c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80011ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011ce:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    float abs_g = sqrt(gx*gx + gy*gy + gz*gz);
 80011d2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80011d6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80011da:	f7fe ffc1 	bl	8000160 <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
 80011e0:	461c      	mov	r4, r3
 80011e2:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 80011e6:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 80011ea:	f7fe ffb9 	bl	8000160 <__aeabi_fmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fd52 	bl	8000c9c <__addsf3>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461c      	mov	r4, r3
 80011fc:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8001200:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001204:	f7fe ffac 	bl	8000160 <__aeabi_fmul>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fd45 	bl	8000c9c <__addsf3>
 8001212:	4603      	mov	r3, r0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f9bb 	bl	8000590 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f006 fcd5 	bl	8007bd0 <sqrt>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcdf 	bl	8000bf0 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    float a_ms2 = abs_g * G_TO_MS2;
 8001238:	4955      	ldr	r1, [pc, #340]	@ (8001390 <process_sample_and_detect+0x278>)
 800123a:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800123e:	f7fe ff8f 	bl	8000160 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Обновляем пики по осям (в g)
    if (abs_gx > peaks.max_g_x) peaks.max_g_x = abs_gx;
 8001248:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <process_sample_and_detect+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8001252:	f7ff fe97 	bl	8000f84 <__aeabi_fcmpgt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <process_sample_and_detect+0x14c>
 800125c:	4a4d      	ldr	r2, [pc, #308]	@ (8001394 <process_sample_and_detect+0x27c>)
 800125e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001262:	6013      	str	r3, [r2, #0]
    if (abs_gy > peaks.max_g_y) peaks.max_g_y = abs_gy;
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <process_sample_and_detect+0x27c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4619      	mov	r1, r3
 800126a:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800126e:	f7ff fe89 	bl	8000f84 <__aeabi_fcmpgt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <process_sample_and_detect+0x168>
 8001278:	4a46      	ldr	r2, [pc, #280]	@ (8001394 <process_sample_and_detect+0x27c>)
 800127a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800127e:	6053      	str	r3, [r2, #4]
    if (abs_gz > peaks.max_g_z) peaks.max_g_z = abs_gz;
 8001280:	4b44      	ldr	r3, [pc, #272]	@ (8001394 <process_sample_and_detect+0x27c>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4619      	mov	r1, r3
 8001286:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 800128a:	f7ff fe7b 	bl	8000f84 <__aeabi_fcmpgt>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <process_sample_and_detect+0x184>
 8001294:	4a3f      	ldr	r2, [pc, #252]	@ (8001394 <process_sample_and_detect+0x27c>)
 8001296:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800129a:	6093      	str	r3, [r2, #8]

    // Простая детекция удара: если любая ось превысила порог и прошло достаточно времени —
    // регистрируем событие.
    uint32_t now = HAL_GetTick();
 800129c:	f001 f82e 	bl	80022fc <HAL_GetTick>
 80012a0:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
    if ((abs_g >= IMPACT_THRESHOLD_G) && (now - peaks.last_impact_tick > IMPACT_DEBOUNCE_MS)) {
 80012a4:	493c      	ldr	r1, [pc, #240]	@ (8001398 <process_sample_and_detect+0x280>)
 80012a6:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80012aa:	f7ff fe61 	bl	8000f70 <__aeabi_fcmpge>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <process_sample_and_detect+0x19e>
//    float ay_ms2 = gy * G_TO_MS2;
//    float az_ms2 = gz * G_TO_MS2;
//    sprintf(message, "g: X=%.2f Y=%.2f Z=%.2f | m/s2: X=%.2f Y=%.2f Z=%.2f | peaks g(X/Y/Z)=%.2f/%.2f/%.2f\r\n",
//           gx, gy, gz, ax_ms2, ay_ms2, az_ms2, peaks.max_g_x, peaks.max_g_y, peaks.max_g_z);
//    HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
}
 80012b4:	e065      	b.n	8001382 <process_sample_and_detect+0x26a>
    if ((abs_g >= IMPACT_THRESHOLD_G) && (now - peaks.last_impact_tick > IMPACT_DEBOUNCE_MS)) {
 80012b6:	4b37      	ldr	r3, [pc, #220]	@ (8001394 <process_sample_and_detect+0x27c>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80012c2:	d95e      	bls.n	8001382 <process_sample_and_detect+0x26a>
        peaks.last_impact_tick = now;
 80012c4:	4a33      	ldr	r2, [pc, #204]	@ (8001394 <process_sample_and_detect+0x27c>)
 80012c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80012ca:	60d3      	str	r3, [r2, #12]
        sprintf(message, "! IMPACT detected at tick %lu: g=%.2fg m/s2=%.2fg\n",
 80012cc:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80012d0:	f7ff f95e 	bl	8000590 <__aeabi_f2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 80012dc:	f7ff f958 	bl	8000590 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80012e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ec:	e9cd 4500 	strd	r4, r5, [sp]
 80012f0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80012f4:	4929      	ldr	r1, [pc, #164]	@ (800139c <process_sample_and_detect+0x284>)
 80012f6:	f004 fb2f 	bl	8005958 <siprintf>
        sprintf(message_display, "%.2f g", abs_g);
 80012fa:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80012fe:	f7ff f947 	bl	8000590 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	f107 000c 	add.w	r0, r7, #12
 800130a:	4925      	ldr	r1, [pc, #148]	@ (80013a0 <process_sample_and_detect+0x288>)
 800130c:	f004 fb24 	bl	8005958 <siprintf>
        ST7789_WriteString(20, 80, message_display, Font_16x26, GRED, BLACK);
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <process_sample_and_detect+0x28c>)
 8001312:	f107 010c 	add.w	r1, r7, #12
 8001316:	2200      	movs	r2, #0
 8001318:	9202      	str	r2, [sp, #8]
 800131a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800131e:	9201      	str	r2, [sp, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	460a      	mov	r2, r1
 8001328:	2150      	movs	r1, #80	@ 0x50
 800132a:	2014      	movs	r0, #20
 800132c:	f000 fc5f 	bl	8001bee <ST7789_WriteString>
        sprintf(message_display, "%.2fg m/s2", a_ms2);
 8001330:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 8001334:	f7ff f92c 	bl	8000590 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	f107 000c 	add.w	r0, r7, #12
 8001340:	4919      	ldr	r1, [pc, #100]	@ (80013a8 <process_sample_and_detect+0x290>)
 8001342:	f004 fb09 	bl	8005958 <siprintf>
		ST7789_WriteString(20, 120, message_display, Font_16x26, GREEN, BLACK);
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <process_sample_and_detect+0x28c>)
 8001348:	f107 010c 	add.w	r1, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	9202      	str	r2, [sp, #8]
 8001350:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	460a      	mov	r2, r1
 800135e:	2178      	movs	r1, #120	@ 0x78
 8001360:	2014      	movs	r0, #20
 8001362:	f000 fc44 	bl	8001bee <ST7789_WriteString>
        HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001366:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe fef0 	bl	8000150 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <process_sample_and_detect+0x294>)
 800137e:	f003 f80a 	bl	8004396 <HAL_UART_Transmit>
}
 8001382:	bf00      	nop
 8001384:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8001388:	46bd      	mov	sp, r7
 800138a:	bdb0      	pop	{r4, r5, r7, pc}
 800138c:	3b7f9724 	.word	0x3b7f9724
 8001390:	411ce80a 	.word	0x411ce80a
 8001394:	200003c8 	.word	0x200003c8
 8001398:	40c00000 	.word	0x40c00000
 800139c:	08007dd8 	.word	0x08007dd8
 80013a0:	08007e0c 	.word	0x08007e0c
 80013a4:	20000008 	.word	0x20000008
 80013a8:	08007e14 	.word	0x08007e14
 80013ac:	20000380 	.word	0x20000380

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0c6      	sub	sp, #280	@ 0x118
 80013b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 ff49 	bl	800224c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f869 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 f971 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f000 f941 	bl	8001648 <MX_DMA_Init>
  MX_SPI1_Init();
 80013c6:	f000 f8a9 	bl	800151c <MX_SPI1_Init>
  MX_SPI2_Init();
 80013ca:	f000 f8dd 	bl	8001588 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80013ce:	f000 f911 	bl	80015f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 80013d2:	f7ff fe65 	bl	80010a0 <ADXL345_Init>
  //init display
  ST7789_Init();
 80013d6:	f000 fac7 	bl	8001968 <ST7789_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2108      	movs	r1, #8
 80013de:	4828      	ldr	r0, [pc, #160]	@ (8001480 <main+0xd0>)
 80013e0:	f001 fcee 	bl	8002dc0 <HAL_GPIO_WritePin>
  ST7789_Fill_Color(BLACK);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 fb65 	bl	8001ab4 <ST7789_Fill_Color>

  // Быстрый тест: прочитать ID
  uint8_t id = ADXL345_ReadID();
 80013ea:	f7ff fe79 	bl	80010e0 <ADXL345_ReadID>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
  sprintf(message, "ADXL345 ID = 0x%02X", id);
 80013f4:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4921      	ldr	r1, [pc, #132]	@ (8001484 <main+0xd4>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 faaa 	bl	8005958 <siprintf>
  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe fea1 	bl	8000150 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	f107 0108 	add.w	r1, r7, #8
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141a:	481b      	ldr	r0, [pc, #108]	@ (8001488 <main+0xd8>)
 800141c:	f002 ffbb 	bl	8004396 <HAL_UART_Transmit>
  ST7789_WriteString(20, 20, message, Font_11x18, GBLUE, BLACK);
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <main+0xdc>)
 8001422:	f107 0108 	add.w	r1, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	9202      	str	r2, [sp, #8]
 800142a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	460a      	mov	r2, r1
 8001438:	2114      	movs	r1, #20
 800143a:	2014      	movs	r0, #20
 800143c:	f000 fbd7 	bl	8001bee <ST7789_WriteString>
  /* USER CODE BEGIN WHILE */

  int16_t rx, ry, rz;
  while (1)
  {
	  ADXL345_ReadAxes(&rx, &ry, &rz);
 8001440:	1cba      	adds	r2, r7, #2
 8001442:	1d39      	adds	r1, r7, #4
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fde0 	bl	800100c <ADXL345_ReadAxes>
	  process_sample_and_detect(rx, ry, rz);
 800144c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001450:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001454:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800145c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001460:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001468:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	461a      	mov	r2, r3
 8001472:	f7ff fe51 	bl	8001118 <process_sample_and_detect>
	  HAL_Delay(SAMPLE_PERIOD_MS);
 8001476:	200a      	movs	r0, #10
 8001478:	f000 ff4a 	bl	8002310 <HAL_Delay>
	  ADXL345_ReadAxes(&rx, &ry, &rz);
 800147c:	bf00      	nop
 800147e:	e7df      	b.n	8001440 <main+0x90>
 8001480:	40010800 	.word	0x40010800
 8001484:	08007e20 	.word	0x08007e20
 8001488:	20000380 	.word	0x20000380
 800148c:	20000000 	.word	0x20000000

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b090      	sub	sp, #64	@ 0x40
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	2228      	movs	r2, #40	@ 0x28
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fabf 	bl	8005a22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fc89 	bl	8002df0 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014e4:	f000 f93e 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2102      	movs	r1, #2
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fef6 	bl	80032f4 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800150e:	f000 f929 	bl	8001764 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3740      	adds	r7, #64	@ 0x40
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <MX_SPI1_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_SPI1_Init+0x64>)
 800153c:	2202      	movs	r2, #2
 800153e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001550:	2210      	movs	r2, #16
 8001552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_SPI1_Init+0x64>)
 800156e:	f002 f84f 	bl	8003610 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001578:	f000 f8f4 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000204 	.word	0x20000204
 8001584:	40013000 	.word	0x40013000

08001588 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_SPI2_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <MX_SPI2_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <MX_SPI2_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_SPI2_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015da:	f002 f819 	bl	8003610 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015e4:	f000 f8be 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000025c 	.word	0x2000025c
 80015f0:	40003800 	.word	0x40003800

080015f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <MX_USART1_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_USART1_UART_Init+0x4c>)
 800162c:	f002 fe63 	bl	80042f6 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f000 f895 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000380 	.word	0x20000380
 8001644:	40013800 	.word	0x40013800

08001648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_DMA_Init+0x58>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <MX_DMA_Init+0x58>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_DMA_Init+0x58>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	200d      	movs	r0, #13
 800166c:	f000 ff4b 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001670:	200d      	movs	r0, #13
 8001672:	f000 ff64 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200e      	movs	r0, #14
 800167c:	f000 ff43 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001680:	200e      	movs	r0, #14
 8001682:	f000 ff5c 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200f      	movs	r0, #15
 800168c:	f000 ff3b 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001690:	200f      	movs	r0, #15
 8001692:	f000 ff54 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016be:	f043 0320 	orr.w	r3, r3, #32
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a20      	ldr	r2, [pc, #128]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_GPIO_Init+0xb4>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	210e      	movs	r1, #14
 8001704:	4815      	ldr	r0, [pc, #84]	@ (800175c <MX_GPIO_Init+0xb8>)
 8001706:	f001 fb5b 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_GPIO_Init+0xbc>)
 8001712:	f001 fb55 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001716:	230e      	movs	r3, #14
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2302      	movs	r3, #2
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <MX_GPIO_Init+0xb8>)
 800172e:	f001 f9c3 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2302      	movs	r3, #2
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_GPIO_Init+0xbc>)
 800174c:	f001 f9b4 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800177a:	bf00      	nop
	ST7789_DC_Clr();
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <ST7789_WriteCommand+0x30>)
 8001782:	f001 fb1d 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001786:	1df9      	adds	r1, r7, #7
 8001788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178c:	2201      	movs	r2, #1
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <ST7789_WriteCommand+0x34>)
 8001790:	f001 ffc2 	bl	8003718 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40010800 	.word	0x40010800
 80017a4:	20000204 	.word	0x20000204

080017a8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80017b2:	bf00      	nop
	ST7789_DC_Set();
 80017b4:	2201      	movs	r2, #1
 80017b6:	2104      	movs	r1, #4
 80017b8:	481b      	ldr	r0, [pc, #108]	@ (8001828 <ST7789_WriteData+0x80>)
 80017ba:	f001 fb01 	bl	8002dc0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80017be:	e02a      	b.n	8001816 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	4293      	cmp	r3, r2
 80017c8:	bf28      	it	cs
 80017ca:	4613      	movcs	r3, r2
 80017cc:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <ST7789_WriteData+0x84>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d30e      	bcc.n	80017f8 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	461a      	mov	r2, r3
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4813      	ldr	r0, [pc, #76]	@ (8001830 <ST7789_WriteData+0x88>)
 80017e2:	f002 fa87 	bl	8003cf4 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80017e6:	bf00      	nop
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <ST7789_WriteData+0x88>)
 80017ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d1f8      	bne.n	80017e8 <ST7789_WriteData+0x40>
 80017f6:	e006      	b.n	8001806 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80017f8:	89fa      	ldrh	r2, [r7, #14]
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	480b      	ldr	r0, [pc, #44]	@ (8001830 <ST7789_WriteData+0x88>)
 8001802:	f001 ff89 	bl	8003718 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1d1      	bne.n	80017c0 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 800181c:	bf00      	nop
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40010800 	.word	0x40010800
 800182c:	20000010 	.word	0x20000010
 8001830:	20000204 	.word	0x20000204

08001834 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800183e:	bf00      	nop
	ST7789_DC_Set();
 8001840:	2201      	movs	r2, #1
 8001842:	2104      	movs	r1, #4
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <ST7789_WriteSmallData+0x30>)
 8001846:	f001 fabb 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800184a:	1df9      	adds	r1, r7, #7
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001850:	2201      	movs	r2, #1
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <ST7789_WriteSmallData+0x34>)
 8001854:	f001 ff60 	bl	8003718 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001858:	bf00      	nop
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40010800 	.word	0x40010800
 8001868:	20000204 	.word	0x20000204

0800186c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001876:	2036      	movs	r0, #54	@ 0x36
 8001878:	f7ff ff7a 	bl	8001770 <ST7789_WriteCommand>
	switch (m) {
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d81a      	bhi.n	80018b8 <ST7789_SetRotation+0x4c>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ST7789_SetRotation+0x1c>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001899 	.word	0x08001899
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018b1 	.word	0x080018b1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001898:	20c0      	movs	r0, #192	@ 0xc0
 800189a:	f7ff ffcb 	bl	8001834 <ST7789_WriteSmallData>
		break;
 800189e:	e00c      	b.n	80018ba <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80018a0:	20a0      	movs	r0, #160	@ 0xa0
 80018a2:	f7ff ffc7 	bl	8001834 <ST7789_WriteSmallData>
		break;
 80018a6:	e008      	b.n	80018ba <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffc3 	bl	8001834 <ST7789_WriteSmallData>
		break;
 80018ae:	e004      	b.n	80018ba <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80018b0:	2060      	movs	r0, #96	@ 0x60
 80018b2:	f7ff ffbf 	bl	8001834 <ST7789_WriteSmallData>
		break;
 80018b6:	e000      	b.n	80018ba <ST7789_SetRotation+0x4e>
	default:
		break;
 80018b8:	bf00      	nop
	}
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop

080018c4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	80bb      	strh	r3, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80018e2:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	82fb      	strh	r3, [r7, #22]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80018ec:	88bb      	ldrh	r3, [r7, #4]
 80018ee:	827b      	strh	r3, [r7, #18]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80018f4:	202a      	movs	r0, #42	@ 0x2a
 80018f6:	f7ff ff3b 	bl	8001770 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	733b      	strb	r3, [r7, #12]
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	737b      	strb	r3, [r7, #13]
 800190a:	8abb      	ldrh	r3, [r7, #20]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	73bb      	strb	r3, [r7, #14]
 8001914:	8abb      	ldrh	r3, [r7, #20]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2104      	movs	r1, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff41 	bl	80017a8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001926:	202b      	movs	r0, #43	@ 0x2b
 8001928:	f7ff ff22 	bl	8001770 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800192c:	8a7b      	ldrh	r3, [r7, #18]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29b      	uxth	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	723b      	strb	r3, [r7, #8]
 8001936:	8a7b      	ldrh	r3, [r7, #18]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	727b      	strb	r3, [r7, #9]
 800193c:	8a3b      	ldrh	r3, [r7, #16]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	b29b      	uxth	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	72bb      	strb	r3, [r7, #10]
 8001946:	8a3b      	ldrh	r3, [r7, #16]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	2104      	movs	r1, #4
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff28 	bl	80017a8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001958:	202c      	movs	r0, #44	@ 0x2c
 800195a:	f7ff ff09 	bl	8001770 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800195e:	bf00      	nop
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08b      	sub	sp, #44	@ 0x2c
 800196c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800196e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001972:	2100      	movs	r1, #0
 8001974:	484a      	ldr	r0, [pc, #296]	@ (8001aa0 <ST7789_Init+0x138>)
 8001976:	f004 f854 	bl	8005a22 <memset>
	#endif
	HAL_Delay(10);
 800197a:	200a      	movs	r0, #10
 800197c:	f000 fcc8 	bl	8002310 <HAL_Delay>
    ST7789_RST_Clr();
 8001980:	2200      	movs	r2, #0
 8001982:	2102      	movs	r1, #2
 8001984:	4847      	ldr	r0, [pc, #284]	@ (8001aa4 <ST7789_Init+0x13c>)
 8001986:	f001 fa1b 	bl	8002dc0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800198a:	200a      	movs	r0, #10
 800198c:	f000 fcc0 	bl	8002310 <HAL_Delay>
    ST7789_RST_Set();
 8001990:	2201      	movs	r2, #1
 8001992:	2102      	movs	r1, #2
 8001994:	4843      	ldr	r0, [pc, #268]	@ (8001aa4 <ST7789_Init+0x13c>)
 8001996:	f001 fa13 	bl	8002dc0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800199a:	2014      	movs	r0, #20
 800199c:	f000 fcb8 	bl	8002310 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80019a0:	203a      	movs	r0, #58	@ 0x3a
 80019a2:	f7ff fee5 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80019a6:	2055      	movs	r0, #85	@ 0x55
 80019a8:	f7ff ff44 	bl	8001834 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80019ac:	20b2      	movs	r0, #178	@ 0xb2
 80019ae:	f7ff fedf 	bl	8001770 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80019b2:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa8 <ST7789_Init+0x140>)
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019bc:	6018      	str	r0, [r3, #0]
 80019be:	3304      	adds	r3, #4
 80019c0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2105      	movs	r1, #5
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff feed 	bl	80017a8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7ff ff4c 	bl	800186c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80019d4:	20b7      	movs	r0, #183	@ 0xb7
 80019d6:	f7ff fecb 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80019da:	2035      	movs	r0, #53	@ 0x35
 80019dc:	f7ff ff2a 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80019e0:	20bb      	movs	r0, #187	@ 0xbb
 80019e2:	f7ff fec5 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80019e6:	2019      	movs	r0, #25
 80019e8:	f7ff ff24 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80019ec:	20c0      	movs	r0, #192	@ 0xc0
 80019ee:	f7ff febf 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80019f2:	202c      	movs	r0, #44	@ 0x2c
 80019f4:	f7ff ff1e 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80019f8:	20c2      	movs	r0, #194	@ 0xc2
 80019fa:	f7ff feb9 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ff18 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001a04:	20c3      	movs	r0, #195	@ 0xc3
 8001a06:	f7ff feb3 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001a0a:	2012      	movs	r0, #18
 8001a0c:	f7ff ff12 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001a10:	20c4      	movs	r0, #196	@ 0xc4
 8001a12:	f7ff fead 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001a16:	2020      	movs	r0, #32
 8001a18:	f7ff ff0c 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001a1c:	20c6      	movs	r0, #198	@ 0xc6
 8001a1e:	f7ff fea7 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001a22:	200f      	movs	r0, #15
 8001a24:	f7ff ff06 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001a28:	20d0      	movs	r0, #208	@ 0xd0
 8001a2a:	f7ff fea1 	bl	8001770 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001a2e:	20a4      	movs	r0, #164	@ 0xa4
 8001a30:	f7ff ff00 	bl	8001834 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001a34:	20a1      	movs	r0, #161	@ 0xa1
 8001a36:	f7ff fefd 	bl	8001834 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001a3a:	20e0      	movs	r0, #224	@ 0xe0
 8001a3c:	f7ff fe98 	bl	8001770 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <ST7789_Init+0x144>)
 8001a42:	f107 0410 	add.w	r4, r7, #16
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	c407      	stmia	r4!, {r0, r1, r2}
 8001a4a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	210e      	movs	r1, #14
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fea8 	bl	80017a8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001a58:	20e1      	movs	r0, #225	@ 0xe1
 8001a5a:	f7ff fe89 	bl	8001770 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <ST7789_Init+0x148>)
 8001a60:	463c      	mov	r4, r7
 8001a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a64:	c407      	stmia	r4!, {r0, r1, r2}
 8001a66:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001a68:	463b      	mov	r3, r7
 8001a6a:	210e      	movs	r1, #14
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe9b 	bl	80017a8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001a72:	2021      	movs	r0, #33	@ 0x21
 8001a74:	f7ff fe7c 	bl	8001770 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001a78:	2011      	movs	r0, #17
 8001a7a:	f7ff fe79 	bl	8001770 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001a7e:	2013      	movs	r0, #19
 8001a80:	f7ff fe76 	bl	8001770 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001a84:	2029      	movs	r0, #41	@ 0x29
 8001a86:	f7ff fe73 	bl	8001770 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001a8a:	2032      	movs	r0, #50	@ 0x32
 8001a8c:	f000 fc40 	bl	8002310 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 f80f 	bl	8001ab4 <ST7789_Fill_Color>
}
 8001a96:	bf00      	nop
 8001a98:	372c      	adds	r7, #44	@ 0x2c
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200003d8 	.word	0x200003d8
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	08007e34 	.word	0x08007e34
 8001aac:	08007e3c 	.word	0x08007e3c
 8001ab0:	08007e4c 	.word	0x08007e4c

08001ab4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001abe:	f240 133f 	movw	r3, #319	@ 0x13f
 8001ac2:	22ef      	movs	r2, #239	@ 0xef
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fefc 	bl	80018c4 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001acc:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	81fb      	strh	r3, [r7, #14]
 8001ad2:	e00e      	b.n	8001af2 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <ST7789_Fill_Color+0x50>)
 8001ade:	f003 ffa0 	bl	8005a22 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001ae2:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001ae6:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <ST7789_Fill_Color+0x50>)
 8001ae8:	f7ff fe5e 	bl	80017a8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	3301      	adds	r3, #1
 8001af0:	81fb      	strh	r3, [r7, #14]
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001af6:	d9ed      	bls.n	8001ad4 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001af8:	bf00      	nop
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003d8 	.word	0x200003d8

08001b08 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001b08:	b082      	sub	sp, #8
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b088      	sub	sp, #32
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
 8001b16:	460b      	mov	r3, r1
 8001b18:	80bb      	strh	r3, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001b1e:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001b20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b24:	461a      	mov	r2, r3
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b34:	4619      	mov	r1, r3
 8001b36:	88bb      	ldrh	r3, [r7, #4]
 8001b38:	440b      	add	r3, r1
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	88b9      	ldrh	r1, [r7, #4]
 8001b42:	88f8      	ldrh	r0, [r7, #6]
 8001b44:	f7ff febe 	bl	80018c4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	e041      	b.n	8001bd2 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8001b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	3b20      	subs	r3, #32
 8001b54:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	440b      	add	r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	e027      	b.n	8001bc0 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001b80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	743b      	strb	r3, [r7, #16]
 8001b8a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2102      	movs	r1, #2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fe06 	bl	80017a8 <ST7789_WriteData>
 8001b9c:	e00d      	b.n	8001bba <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001b9e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	733b      	strb	r3, [r7, #12]
 8001ba8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdf7 	bl	80017a8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d3d1      	bcc.n	8001b70 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d3b7      	bcc.n	8001b4e <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8001bde:	bf00      	nop
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bea:	b002      	add	sp, #8
 8001bec:	4770      	bx	lr

08001bee <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001bee:	b082      	sub	sp, #8
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	603a      	str	r2, [r7, #0]
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001c02:	bf00      	nop
	while (*str) {
 8001c04:	e02e      	b.n	8001c64 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	7d3a      	ldrb	r2, [r7, #20]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2bef      	cmp	r3, #239	@ 0xef
 8001c0e:	dd14      	ble.n	8001c3a <ST7789_WriteString+0x4c>
			x = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001c14:	7d7b      	ldrb	r3, [r7, #21]
 8001c16:	461a      	mov	r2, r3
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	7d7a      	ldrb	r2, [r7, #21]
 8001c22:	4413      	add	r3, r2
 8001c24:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c28:	da21      	bge.n	8001c6e <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d103      	bne.n	8001c3a <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	603b      	str	r3, [r7, #0]
				continue;
 8001c38:	e014      	b.n	8001c64 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	88b9      	ldrh	r1, [r7, #4]
 8001c40:	88f8      	ldrh	r0, [r7, #6]
 8001c42:	8c3b      	ldrh	r3, [r7, #32]
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	8bbb      	ldrh	r3, [r7, #28]
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f7ff ff5a 	bl	8001b08 <ST7789_WriteChar>
		x += font.width;
 8001c54:	7d3b      	ldrb	r3, [r7, #20]
 8001c56:	461a      	mov	r2, r3
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	80fb      	strh	r3, [r7, #6]
		str++;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1cc      	bne.n	8001c06 <ST7789_WriteString+0x18>
 8001c6c:	e000      	b.n	8001c70 <ST7789_WriteString+0x82>
				break;
 8001c6e:	bf00      	nop
	}
	ST7789_UnSelect();
 8001c70:	bf00      	nop
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c7c:	b002      	add	sp, #8
 8001c7e:	4770      	bx	lr

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a73      	ldr	r2, [pc, #460]	@ (8001ecc <HAL_SPI_MspInit+0x1e8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d152      	bne.n	8001daa <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d04:	4b72      	ldr	r3, [pc, #456]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a71      	ldr	r2, [pc, #452]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b69      	ldr	r3, [pc, #420]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d34:	23a0      	movs	r3, #160	@ 0xa0
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4863      	ldr	r0, [pc, #396]	@ (8001ed4 <HAL_SPI_MspInit+0x1f0>)
 8001d48:	f000 feb6 	bl	8002ab8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d4c:	4b62      	ldr	r3, [pc, #392]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d4e:	4a63      	ldr	r2, [pc, #396]	@ (8001edc <HAL_SPI_MspInit+0x1f8>)
 8001d50:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d52:	4b61      	ldr	r3, [pc, #388]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d54:	2210      	movs	r2, #16
 8001d56:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d58:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d60:	2280      	movs	r2, #128	@ 0x80
 8001d62:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d64:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d70:	4b59      	ldr	r3, [pc, #356]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d7c:	4856      	ldr	r0, [pc, #344]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d7e:	f000 fbf9 	bl	8002574 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001d88:	f7ff fcec 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a52      	ldr	r2, [pc, #328]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d90:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d92:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <HAL_SPI_MspInit+0x1f4>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2023      	movs	r0, #35	@ 0x23
 8001d9e:	f000 fbb2 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001da2:	2023      	movs	r0, #35	@ 0x23
 8001da4:	f000 fbcb 	bl	800253e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da8:	e08b      	b.n	8001ec2 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee0 <HAL_SPI_MspInit+0x1fc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f040 8086 	bne.w	8001ec2 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db6:	4b46      	ldr	r3, [pc, #280]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	61d3      	str	r3, [r2, #28]
 8001dc2:	4b43      	ldr	r3, [pc, #268]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b40      	ldr	r3, [pc, #256]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6193      	str	r3, [r2, #24]
 8001dda:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <HAL_SPI_MspInit+0x1ec>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001de6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	483a      	ldr	r0, [pc, #232]	@ (8001ee4 <HAL_SPI_MspInit+0x200>)
 8001dfc:	f000 fe5c 	bl	8002ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	4619      	mov	r1, r3
 8001e14:	4833      	ldr	r0, [pc, #204]	@ (8001ee4 <HAL_SPI_MspInit+0x200>)
 8001e16:	f000 fe4f 	bl	8002ab8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e1c:	4a33      	ldr	r2, [pc, #204]	@ (8001eec <HAL_SPI_MspInit+0x208>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e20:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e26:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001e4a:	4827      	ldr	r0, [pc, #156]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e4c:	f000 fb92 	bl	8002574 <HAL_DMA_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_SPI_MspInit+0x176>
      Error_Handler();
 8001e56:	f7ff fc85 	bl	8001764 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_SPI_MspInit+0x204>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001e66:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e68:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <HAL_SPI_MspInit+0x210>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e6e:	2210      	movs	r2, #16
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e96:	4816      	ldr	r0, [pc, #88]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001e98:	f000 fb6c 	bl	8002574 <HAL_DMA_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_SPI_MspInit+0x1c2>
      Error_Handler();
 8001ea2:	f7ff fc5f 	bl	8001764 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001eaa:	649a      	str	r2, [r3, #72]	@ 0x48
 8001eac:	4a10      	ldr	r2, [pc, #64]	@ (8001ef0 <HAL_SPI_MspInit+0x20c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2024      	movs	r0, #36	@ 0x24
 8001eb8:	f000 fb25 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ebc:	2024      	movs	r0, #36	@ 0x24
 8001ebe:	f000 fb3e 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	@ 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013000 	.word	0x40013000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	200002b4 	.word	0x200002b4
 8001edc:	40020030 	.word	0x40020030
 8001ee0:	40003800 	.word	0x40003800
 8001ee4:	40010c00 	.word	0x40010c00
 8001ee8:	200002f8 	.word	0x200002f8
 8001eec:	40020044 	.word	0x40020044
 8001ef0:	2000033c 	.word	0x2000033c
 8001ef4:	40020058 	.word	0x40020058

08001ef8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <HAL_UART_MspInit+0x9c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d139      	bne.n	8001f8c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_UART_MspInit+0xa0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480f      	ldr	r0, [pc, #60]	@ (8001f9c <HAL_UART_MspInit+0xa4>)
 8001f5e:	f000 fdab 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <HAL_UART_MspInit+0xa4>)
 8001f78:	f000 fd9e 	bl	8002ab8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2025      	movs	r0, #37	@ 0x25
 8001f82:	f000 fac0 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f86:	2025      	movs	r0, #37	@ 0x25
 8001f88:	f000 fad9 	bl	800253e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f972 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <DMA1_Channel3_IRQHandler+0x10>)
 8001ffe:	f000 fc27 	bl	8002850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002b4 	.word	0x200002b4

0800200c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA1_Channel4_IRQHandler+0x10>)
 8002012:	f000 fc1d 	bl	8002850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002f8 	.word	0x200002f8

08002020 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Channel5_IRQHandler+0x10>)
 8002026:	f000 fc13 	bl	8002850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000033c 	.word	0x2000033c

08002034 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <SPI1_IRQHandler+0x10>)
 800203a:	f001 ff0d 	bl	8003e58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000204 	.word	0x20000204

08002048 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <SPI2_IRQHandler+0x10>)
 800204e:	f001 ff03 	bl	8003e58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000025c 	.word	0x2000025c

0800205c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <USART1_IRQHandler+0x10>)
 8002062:	f002 fa23 	bl	80044ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000380 	.word	0x20000380

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <_kill>:

int _kill(int pid, int sig)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002088:	f003 fd1e 	bl	8005ac8 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	2216      	movs	r2, #22
 8002090:	601a      	str	r2, [r3, #0]
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_exit>:

void _exit (int status)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffe7 	bl	800207e <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
  }

  return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
  }
  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214c:	605a      	str	r2, [r3, #4]
  return 0;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_isatty>:

int _isatty(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f003 fc86 	bl	8005ac8 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20005000 	.word	0x20005000
 80021e8:	00000200 	.word	0x00000200
 80021ec:	20000d38 	.word	0x20000d38
 80021f0:	20000e90 	.word	0x20000e90

080021f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002200:	f7ff fff8 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480b      	ldr	r0, [pc, #44]	@ (8002234 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002206:	490c      	ldr	r1, [pc, #48]	@ (8002238 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002208:	4a0c      	ldr	r2, [pc, #48]	@ (800223c <LoopFillZerobss+0x16>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800221c:	4c09      	ldr	r4, [pc, #36]	@ (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f003 fc53 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222e:	f7ff f8bf 	bl	80013b0 <main>
  bx lr
 8002232:	4770      	bx	lr
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800223c:	0800a338 	.word	0x0800a338
  ldr r2, =_sbss
 8002240:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002244:	20000e8c 	.word	0x20000e8c

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>
	...

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_Init+0x28>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_Init+0x28>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f947 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fd0a 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f95f 	bl	800255a <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022b4:	f000 f927 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	@ (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000014 	.word	0x20000014
 80022d0:	2000001c 	.word	0x2000001c
 80022d4:	20000018 	.word	0x20000018

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a03      	ldr	r2, [pc, #12]	@ (80022f8 <HAL_IncTick+0x20>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	2000001c 	.word	0x2000001c
 80022f8:	20000d3c 	.word	0x20000d3c

080022fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	@ (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000d3c 	.word	0x20000d3c

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff0 	bl	80022fc <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffe0 	bl	80022fc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000001c 	.word	0x2000001c

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4906      	ldr	r1, [pc, #24]	@ (80023f0 <__NVIC_EnableIRQ+0x34>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	@ (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024d0:	f7ff ff90 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff2d 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff42 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff90 	bl	8002448 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5f 	bl	80023f4 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff35 	bl	80023bc <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e043      	b.n	8002612 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <HAL_DMA_Init+0xa8>)
 8002592:	4413      	add	r3, r2
 8002594:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <HAL_DMA_Init+0xac>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	009a      	lsls	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <HAL_DMA_Init+0xb0>)
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	bffdfff8 	.word	0xbffdfff8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_DMA_Start_IT+0x20>
 8002644:	2302      	movs	r3, #2
 8002646:	e04b      	b.n	80026e0 <HAL_DMA_Start_IT+0xb8>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d13a      	bne.n	80026d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9eb 	bl	8002a5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 020e 	orr.w	r2, r2, #14
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e00f      	b.n	80026c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 020a 	orr.w	r2, r2, #10
 80026be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e005      	b.n	80026de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e020      	b.n	8002754 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 020e 	bic.w	r2, r2, #14
 8002720:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d005      	beq.n	8002784 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e051      	b.n	8002828 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020e 	bic.w	r2, r2, #14
 8002792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a22      	ldr	r2, [pc, #136]	@ (8002834 <HAL_DMA_Abort_IT+0xd4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d029      	beq.n	8002802 <HAL_DMA_Abort_IT+0xa2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_DMA_Abort_IT+0xd8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_Abort_IT+0x9e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_DMA_Abort_IT+0xdc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x98>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_DMA_Abort_IT+0xe0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d012      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x92>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_DMA_Abort_IT+0xe4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00a      	beq.n	80027ec <HAL_DMA_Abort_IT+0x8c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_DMA_Abort_IT+0xe8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d102      	bne.n	80027e6 <HAL_DMA_Abort_IT+0x86>
 80027e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027e4:	e00e      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ea:	e00b      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f0:	e008      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f6:	e005      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027fc:	e002      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027fe:	2310      	movs	r3, #16
 8002800:	e000      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 8002802:	2301      	movs	r3, #1
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_DMA_Abort_IT+0xec>)
 8002806:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
    } 
  }
  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	2204      	movs	r2, #4
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d04f      	beq.n	8002918 <HAL_DMA_IRQHandler+0xc8>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04a      	beq.n	8002918 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0204 	bic.w	r2, r2, #4
 800289e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a66      	ldr	r2, [pc, #408]	@ (8002a40 <HAL_DMA_IRQHandler+0x1f0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d029      	beq.n	80028fe <HAL_DMA_IRQHandler+0xae>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_DMA_IRQHandler+0x1f4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_DMA_IRQHandler+0xaa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a63      	ldr	r2, [pc, #396]	@ (8002a48 <HAL_DMA_IRQHandler+0x1f8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xa4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a62      	ldr	r2, [pc, #392]	@ (8002a4c <HAL_DMA_IRQHandler+0x1fc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d012      	beq.n	80028ee <HAL_DMA_IRQHandler+0x9e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a60      	ldr	r2, [pc, #384]	@ (8002a50 <HAL_DMA_IRQHandler+0x200>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x98>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a54 <HAL_DMA_IRQHandler+0x204>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d102      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x92>
 80028dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028e0:	e00e      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028e6:	e00b      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028ec:	e008      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028f2:	e005      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f8:	e002      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028fa:	2340      	movs	r3, #64	@ 0x40
 80028fc:	e000      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028fe:	2304      	movs	r3, #4
 8002900:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_DMA_IRQHandler+0x208>)
 8002902:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8094 	beq.w	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002916:	e08e      	b.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2202      	movs	r2, #2
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d056      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x186>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d051      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020a 	bic.w	r2, r2, #10
 800294e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	@ (8002a40 <HAL_DMA_IRQHandler+0x1f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d029      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x166>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <HAL_DMA_IRQHandler+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x162>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <HAL_DMA_IRQHandler+0x1f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x15c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a34      	ldr	r2, [pc, #208]	@ (8002a4c <HAL_DMA_IRQHandler+0x1fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d012      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x156>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a32      	ldr	r2, [pc, #200]	@ (8002a50 <HAL_DMA_IRQHandler+0x200>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x150>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a31      	ldr	r2, [pc, #196]	@ (8002a54 <HAL_DMA_IRQHandler+0x204>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_DMA_IRQHandler+0x14a>
 8002994:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002998:	e00e      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 800299a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800299e:	e00b      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a4:	e008      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029aa:	e005      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b0:	e002      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029b2:	2320      	movs	r3, #32
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029b6:	2302      	movs	r3, #2
 80029b8:	4a27      	ldr	r2, [pc, #156]	@ (8002a58 <HAL_DMA_IRQHandler+0x208>)
 80029ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d034      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029d4:	e02f      	b.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 020e 	bic.w	r2, r2, #14
 80029fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
    }
  }
  return;
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
}
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40020008 	.word	0x40020008
 8002a44:	4002001c 	.word	0x4002001c
 8002a48:	40020030 	.word	0x40020030
 8002a4c:	40020044 	.word	0x40020044
 8002a50:	40020058 	.word	0x40020058
 8002a54:	4002006c 	.word	0x4002006c
 8002a58:	40020000 	.word	0x40020000

08002a5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d108      	bne.n	8002a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a9a:	e007      	b.n	8002aac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b08b      	sub	sp, #44	@ 0x2c
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aca:	e169      	b.n	8002da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002acc:	2201      	movs	r2, #1
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 8158 	bne.w	8002d9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a9a      	ldr	r2, [pc, #616]	@ (8002d58 <HAL_GPIO_Init+0x2a0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d05e      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
 8002af4:	4a98      	ldr	r2, [pc, #608]	@ (8002d58 <HAL_GPIO_Init+0x2a0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d875      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002afa:	4a98      	ldr	r2, [pc, #608]	@ (8002d5c <HAL_GPIO_Init+0x2a4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d058      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
 8002b00:	4a96      	ldr	r2, [pc, #600]	@ (8002d5c <HAL_GPIO_Init+0x2a4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d86f      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002b06:	4a96      	ldr	r2, [pc, #600]	@ (8002d60 <HAL_GPIO_Init+0x2a8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d052      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
 8002b0c:	4a94      	ldr	r2, [pc, #592]	@ (8002d60 <HAL_GPIO_Init+0x2a8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d869      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002b12:	4a94      	ldr	r2, [pc, #592]	@ (8002d64 <HAL_GPIO_Init+0x2ac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d04c      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
 8002b18:	4a92      	ldr	r2, [pc, #584]	@ (8002d64 <HAL_GPIO_Init+0x2ac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d863      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002b1e:	4a92      	ldr	r2, [pc, #584]	@ (8002d68 <HAL_GPIO_Init+0x2b0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d046      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
 8002b24:	4a90      	ldr	r2, [pc, #576]	@ (8002d68 <HAL_GPIO_Init+0x2b0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d85d      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002b2a:	2b12      	cmp	r3, #18
 8002b2c:	d82a      	bhi.n	8002b84 <HAL_GPIO_Init+0xcc>
 8002b2e:	2b12      	cmp	r3, #18
 8002b30:	d859      	bhi.n	8002be6 <HAL_GPIO_Init+0x12e>
 8002b32:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <HAL_GPIO_Init+0x80>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002bb3 	.word	0x08002bb3
 8002b3c:	08002b8d 	.word	0x08002b8d
 8002b40:	08002b9f 	.word	0x08002b9f
 8002b44:	08002be1 	.word	0x08002be1
 8002b48:	08002be7 	.word	0x08002be7
 8002b4c:	08002be7 	.word	0x08002be7
 8002b50:	08002be7 	.word	0x08002be7
 8002b54:	08002be7 	.word	0x08002be7
 8002b58:	08002be7 	.word	0x08002be7
 8002b5c:	08002be7 	.word	0x08002be7
 8002b60:	08002be7 	.word	0x08002be7
 8002b64:	08002be7 	.word	0x08002be7
 8002b68:	08002be7 	.word	0x08002be7
 8002b6c:	08002be7 	.word	0x08002be7
 8002b70:	08002be7 	.word	0x08002be7
 8002b74:	08002be7 	.word	0x08002be7
 8002b78:	08002be7 	.word	0x08002be7
 8002b7c:	08002b95 	.word	0x08002b95
 8002b80:	08002ba9 	.word	0x08002ba9
 8002b84:	4a79      	ldr	r2, [pc, #484]	@ (8002d6c <HAL_GPIO_Init+0x2b4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b8a:	e02c      	b.n	8002be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	623b      	str	r3, [r7, #32]
          break;
 8002b92:	e029      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	623b      	str	r3, [r7, #32]
          break;
 8002b9c:	e024      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	623b      	str	r3, [r7, #32]
          break;
 8002ba6:	e01f      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	330c      	adds	r3, #12
 8002bae:	623b      	str	r3, [r7, #32]
          break;
 8002bb0:	e01a      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e013      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc8:	2308      	movs	r3, #8
 8002bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	611a      	str	r2, [r3, #16]
          break;
 8002bd2:	e009      	b.n	8002be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	615a      	str	r2, [r3, #20]
          break;
 8002bde:	e003      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
          break;
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_Init+0x130>
          break;
 8002be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2bff      	cmp	r3, #255	@ 0xff
 8002bec:	d801      	bhi.n	8002bf2 <HAL_GPIO_Init+0x13a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	e001      	b.n	8002bf6 <HAL_GPIO_Init+0x13e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2bff      	cmp	r3, #255	@ 0xff
 8002bfc:	d802      	bhi.n	8002c04 <HAL_GPIO_Init+0x14c>
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	e002      	b.n	8002c0a <HAL_GPIO_Init+0x152>
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	3b08      	subs	r3, #8
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	210f      	movs	r1, #15
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80b1 	beq.w	8002d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c38:	4b4d      	ldr	r3, [pc, #308]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6193      	str	r3, [r2, #24]
 8002c44:	4b4a      	ldr	r3, [pc, #296]	@ (8002d70 <HAL_GPIO_Init+0x2b8>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c50:	4a48      	ldr	r2, [pc, #288]	@ (8002d74 <HAL_GPIO_Init+0x2bc>)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a40      	ldr	r2, [pc, #256]	@ (8002d78 <HAL_GPIO_Init+0x2c0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_GPIO_Init+0x1ec>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d7c <HAL_GPIO_Init+0x2c4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_GPIO_Init+0x1e8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3e      	ldr	r2, [pc, #248]	@ (8002d80 <HAL_GPIO_Init+0x2c8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_Init+0x1e4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d84 <HAL_GPIO_Init+0x2cc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_GPIO_Init+0x1e0>
 8002c94:	2303      	movs	r3, #3
 8002c96:	e006      	b.n	8002ca6 <HAL_GPIO_Init+0x1ee>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e004      	b.n	8002ca6 <HAL_GPIO_Init+0x1ee>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e002      	b.n	8002ca6 <HAL_GPIO_Init+0x1ee>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_GPIO_Init+0x1ee>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	f002 0203 	and.w	r2, r2, #3
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cb6:	492f      	ldr	r1, [pc, #188]	@ (8002d74 <HAL_GPIO_Init+0x2bc>)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	492c      	ldr	r1, [pc, #176]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cde:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4928      	ldr	r1, [pc, #160]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cf8:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4922      	ldr	r1, [pc, #136]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	491e      	ldr	r1, [pc, #120]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4918      	ldr	r1, [pc, #96]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d2e:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4914      	ldr	r1, [pc, #80]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d021      	beq.n	8002d8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	490e      	ldr	r1, [pc, #56]	@ (8002d88 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e021      	b.n	8002d9a <HAL_GPIO_Init+0x2e2>
 8002d56:	bf00      	nop
 8002d58:	10320000 	.word	0x10320000
 8002d5c:	10310000 	.word	0x10310000
 8002d60:	10220000 	.word	0x10220000
 8002d64:	10210000 	.word	0x10210000
 8002d68:	10120000 	.word	0x10120000
 8002d6c:	10110000 	.word	0x10110000
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40010800 	.word	0x40010800
 8002d7c:	40010c00 	.word	0x40010c00
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40011400 	.word	0x40011400
 8002d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_GPIO_Init+0x304>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	4909      	ldr	r1, [pc, #36]	@ (8002dbc <HAL_GPIO_Init+0x304>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f47f ae8e 	bne.w	8002acc <HAL_GPIO_Init+0x14>
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	372c      	adds	r7, #44	@ 0x2c
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e272      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8087 	beq.w	8002f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e10:	4b92      	ldr	r3, [pc, #584]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d00c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d112      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
 8002e28:	4b8c      	ldr	r3, [pc, #560]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b89      	ldr	r3, [pc, #548]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x12c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d168      	bne.n	8002f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e24c      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x76>
 8002e58:	4b80      	ldr	r3, [pc, #512]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7f      	ldr	r2, [pc, #508]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x98>
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7a      	ldr	r2, [pc, #488]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b78      	ldr	r3, [pc, #480]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a77      	ldr	r2, [pc, #476]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xbc>
 8002e92:	4b72      	ldr	r3, [pc, #456]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a71      	ldr	r2, [pc, #452]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002eac:	4b6b      	ldr	r3, [pc, #428]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b68      	ldr	r3, [pc, #416]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff fa16 	bl	80022fc <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7ff fa12 	bl	80022fc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e200      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe4>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fa02 	bl	80022fc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff f9fe 	bl	80022fc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	@ 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1ec      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b53      	ldr	r3, [pc, #332]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x10c>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d063      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f36:	4b49      	ldr	r3, [pc, #292]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
 8002f42:	4b46      	ldr	r3, [pc, #280]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1c0      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4939      	ldr	r1, [pc, #228]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <HAL_RCC_OscConfig+0x270>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7ff f9b7 	bl	80022fc <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f92:	f7ff f9b3 	bl	80022fc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e1a1      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4927      	ldr	r1, [pc, #156]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff f996 	bl	80022fc <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7ff f992 	bl	80022fc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e180      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03a      	beq.n	8003074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <HAL_RCC_OscConfig+0x274>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7ff f976 	bl	80022fc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff f972 	bl	80022fc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e160      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_RCC_OscConfig+0x26c>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003032:	2001      	movs	r0, #1
 8003034:	f000 face 	bl	80035d4 <RCC_Delay>
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_RCC_OscConfig+0x274>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7ff f95c 	bl	80022fc <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003046:	e00f      	b.n	8003068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7ff f958 	bl	80022fc <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d908      	bls.n	8003068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e146      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	42420000 	.word	0x42420000
 8003064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b92      	ldr	r3, [pc, #584]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e9      	bne.n	8003048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a6 	beq.w	80031ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b8b      	ldr	r3, [pc, #556]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b88      	ldr	r3, [pc, #544]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a87      	ldr	r2, [pc, #540]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800309c:	61d3      	str	r3, [r2, #28]
 800309e:	4b85      	ldr	r3, [pc, #532]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b82      	ldr	r3, [pc, #520]	@ (80032b8 <HAL_RCC_OscConfig+0x4c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b7f      	ldr	r3, [pc, #508]	@ (80032b8 <HAL_RCC_OscConfig+0x4c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7e      	ldr	r2, [pc, #504]	@ (80032b8 <HAL_RCC_OscConfig+0x4c8>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7ff f919 	bl	80022fc <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7ff f915 	bl	80022fc <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	@ 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e103      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b75      	ldr	r3, [pc, #468]	@ (80032b8 <HAL_RCC_OscConfig+0x4c8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x312>
 80030f4:	4b6f      	ldr	r3, [pc, #444]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a6e      	ldr	r2, [pc, #440]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e02d      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x334>
 800310a:	4b6a      	ldr	r3, [pc, #424]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	4b67      	ldr	r3, [pc, #412]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a66      	ldr	r2, [pc, #408]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	e01c      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x356>
 800312c:	4b61      	ldr	r3, [pc, #388]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a60      	ldr	r2, [pc, #384]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	4b5e      	ldr	r3, [pc, #376]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a5d      	ldr	r2, [pc, #372]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e00b      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003146:	4b5b      	ldr	r3, [pc, #364]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a5a      	ldr	r2, [pc, #360]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6213      	str	r3, [r2, #32]
 8003152:	4b58      	ldr	r3, [pc, #352]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a57      	ldr	r2, [pc, #348]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7ff f8c9 	bl	80022fc <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7ff f8c5 	bl	80022fc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0b1      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCC_OscConfig+0x37e>
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff f8b3 	bl	80022fc <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7ff f8af 	bl	80022fc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e09b      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	4b40      	ldr	r3, [pc, #256]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b3c      	ldr	r3, [pc, #240]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a3b      	ldr	r2, [pc, #236]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8087 	beq.w	80032e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d8:	4b36      	ldr	r3, [pc, #216]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d061      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d146      	bne.n	800327a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7ff f883 	bl	80022fc <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7ff f87f 	bl	80022fc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e06d      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d108      	bne.n	8003234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003222:	4b24      	ldr	r3, [pc, #144]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4921      	ldr	r1, [pc, #132]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	4b1f      	ldr	r3, [pc, #124]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a19      	ldr	r1, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	430b      	orrs	r3, r1
 8003246:	491b      	ldr	r1, [pc, #108]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7ff f853 	bl	80022fc <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7ff f84f 	bl	80022fc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e03d      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x46a>
 8003278:	e035      	b.n	80032e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f83c 	bl	80022fc <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff f838 	bl	80022fc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e026      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x498>
 80032a6:	e01e      	b.n	80032e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e019      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
 80032bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_OscConfig+0x500>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0d0      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d910      	bls.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4965      	ldr	r1, [pc, #404]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800335a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d040      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d115      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b41      	ldr	r3, [pc, #260]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e073      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3d      	ldr	r3, [pc, #244]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06b      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4936      	ldr	r1, [pc, #216]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe ff8a 	bl	80022fc <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe ff86 	bl	80022fc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e053      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d210      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4922      	ldr	r1, [pc, #136]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	490a      	ldr	r1, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1cc>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_ClockConfig+0x1d0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fee8 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08009f74 	.word	0x08009f74
 80034c0:	20000014 	.word	0x20000014
 80034c4:	20000018 	.word	0x20000018

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	2300      	movs	r3, #0
 80034dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <HAL_RCC_GetSysClockFreq+0x94>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x30>
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x36>
 80034f6:	e027      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fa:	613b      	str	r3, [r7, #16]
      break;
 80034fc:	e027      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0c9b      	lsrs	r3, r3, #18
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003508:	5cd3      	ldrb	r3, [r2, r3]
 800350a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003516:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_RCC_GetSysClockFreq+0x94>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	0c5b      	lsrs	r3, r3, #17
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x98>)
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e004      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0c      	ldr	r2, [pc, #48]	@ (800356c <HAL_RCC_GetSysClockFreq+0xa4>)
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	613b      	str	r3, [r7, #16]
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x98>)
 800354a:	613b      	str	r3, [r7, #16]
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	693b      	ldr	r3, [r7, #16]
}
 8003550:	4618      	mov	r0, r3
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200
 8003564:	08009f8c 	.word	0x08009f8c
 8003568:	08009f9c 	.word	0x08009f9c
 800356c:	003d0900 	.word	0x003d0900

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b02      	ldr	r3, [pc, #8]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x10>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	20000014 	.word	0x20000014

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff2 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08009f84 	.word	0x08009f84

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffde 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	0adb      	lsrs	r3, r3, #11
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08009f84 	.word	0x08009f84

080035d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <RCC_Delay+0x34>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <RCC_Delay+0x38>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a5b      	lsrs	r3, r3, #9
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035f0:	bf00      	nop
  }
  while (Delay --);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	60fa      	str	r2, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <RCC_Delay+0x1c>
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	20000014 	.word	0x20000014
 800360c:	10624dd3 	.word	0x10624dd3

08003610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e076      	b.n	8003710 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003632:	d009      	beq.n	8003648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]
 800363a:	e005      	b.n	8003648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe fb3e 	bl	8001ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	ea42 0103 	orr.w	r1, r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	0c1a      	lsrs	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f002 0204 	and.w	r2, r2, #4
 80036ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003728:	f7fe fde8 	bl	80022fc <HAL_GetTick>
 800372c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e12a      	b.n	8003998 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit+0x36>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e122      	b.n	8003998 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_SPI_Transmit+0x48>
 800375c:	2302      	movs	r3, #2
 800375e:	e11b      	b.n	8003998 <HAL_SPI_Transmit+0x280>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2203      	movs	r2, #3
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ae:	d10f      	bne.n	80037d0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d007      	beq.n	80037ee <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f6:	d152      	bne.n	800389e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_Transmit+0xee>
 8003800:	8b7b      	ldrh	r3, [r7, #26]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d145      	bne.n	8003892 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800382a:	e032      	b.n	8003892 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d112      	bne.n	8003860 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	1c9a      	adds	r2, r3, #2
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800385e:	e018      	b.n	8003892 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003860:	f7fe fd4c 	bl	80022fc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d803      	bhi.n	8003878 <HAL_SPI_Transmit+0x160>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003876:	d102      	bne.n	800387e <HAL_SPI_Transmit+0x166>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e082      	b.n	8003998 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1c7      	bne.n	800382c <HAL_SPI_Transmit+0x114>
 800389c:	e053      	b.n	8003946 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Transmit+0x194>
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d147      	bne.n	800393c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038d2:	e033      	b.n	800393c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d113      	bne.n	800390a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003908:	e018      	b.n	800393c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800390a:	f7fe fcf7 	bl	80022fc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d803      	bhi.n	8003922 <HAL_SPI_Transmit+0x20a>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Transmit+0x210>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e02d      	b.n	8003998 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1c6      	bne.n	80038d4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fca2 	bl	8004294 <SPI_EndRxTxTransaction>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003996:	2300      	movs	r3, #0
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039ae:	2301      	movs	r3, #1
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b2:	f7fe fca3 	bl	80022fc <HAL_GetTick>
 80039b6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039be:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d00c      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x4a>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d6:	d106      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x46>
 80039e0:	7ffb      	ldrb	r3, [r7, #31]
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d001      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
 80039e8:	e17f      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x5c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x5c>
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e174      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x6e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e16d      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2205      	movs	r2, #5
 8003a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d007      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a86:	d17e      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0xf6>
 8003a90:	8afb      	ldrh	r3, [r7, #22]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d16c      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aba:	e059      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x162>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x162>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d113      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d119      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x1a4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	b292      	uxth	r2, r2
 8003b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b40:	2301      	movs	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b44:	f7fe fbda 	bl	80022fc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d80d      	bhi.n	8003b70 <HAL_SPI_TransmitReceive+0x1d0>
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b5a:	d009      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0bc      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1a0      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x11c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d19b      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x11c>
 8003b84:	e082      	b.n	8003c8c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x1f4>
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d171      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bba:	e05d      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d11c      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x264>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d017      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x264>
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d114      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d119      	bne.n	8003c46 <HAL_SPI_TransmitReceive+0x2a6>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d014      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c42:	2301      	movs	r3, #1
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c46:	f7fe fb59 	bl	80022fc <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_TransmitReceive+0x2be>
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x2c4>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e038      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d19c      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x21c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d197      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 faff 	bl	8004294 <SPI_EndRxTxTransaction>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e01d      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	@ 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e097      	b.n	8003e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_SPI_Transmit_DMA+0x2a>
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e08f      	b.n	8003e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_SPI_Transmit_DMA+0x3c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e088      	b.n	8003e42 <HAL_SPI_Transmit_DMA+0x14e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d7e:	d10f      	bne.n	8003da0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	4a29      	ldr	r2, [pc, #164]	@ (8003e4c <HAL_SPI_Transmit_DMA+0x158>)
 8003da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	4a28      	ldr	r2, [pc, #160]	@ (8003e50 <HAL_SPI_Transmit_DMA+0x15c>)
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	4a27      	ldr	r2, [pc, #156]	@ (8003e54 <HAL_SPI_Transmit_DMA+0x160>)
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	4619      	mov	r1, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dd8:	f7fe fc26 	bl	8002628 <HAL_DMA_Start_IT>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e023      	b.n	8003e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b40      	cmp	r3, #64	@ 0x40
 8003e06:	d007      	beq.n	8003e18 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0220 	orr.w	r2, r2, #32
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0202 	orr.w	r2, r2, #2
 8003e3e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08004101 	.word	0x08004101
 8003e50:	0800405b 	.word	0x0800405b
 8003e54:	0800411d 	.word	0x0800411d

08003e58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10f      	bne.n	8003e9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
    return;
 8003e9a:	e0be      	b.n	800401a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_SPI_IRQHandler+0x66>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	09db      	lsrs	r3, r3, #7
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
    return;
 8003ebc:	e0ad      	b.n	800401a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_IRQHandler+0x80>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80a1 	beq.w	800401a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 809a 	beq.w	800401a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d023      	beq.n	8003f3a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d011      	beq.n	8003f22 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e00b      	b.n	8003f3a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693b      	ldr	r3, [r7, #16]
        return;
 8003f38:	e06f      	b.n	800401a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d014      	beq.n	8003f70 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d04f      	beq.n	8004018 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f86:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_SPI_IRQHandler+0x14c>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d034      	beq.n	800400e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0203 	bic.w	r2, r2, #3
 8003fb2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc0:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <HAL_SPI_IRQHandler+0x1c8>)
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fbc9 	bl	8002760 <HAL_DMA_Abort_IT>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fec:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <HAL_SPI_IRQHandler+0x1c8>)
 8003fee:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fbb3 	bl	8002760 <HAL_DMA_Abort_IT>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800400c:	e003      	b.n	8004016 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f81a 	bl	8004048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004014:	e000      	b.n	8004018 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004016:	bf00      	nop
    return;
 8004018:	bf00      	nop
  }
}
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0800415d 	.word	0x0800415d

08004024 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004068:	f7fe f948 	bl	80022fc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b20      	cmp	r3, #32
 800407a:	d03b      	beq.n	80040f4 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0220 	bic.w	r2, r2, #32
 800408a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0202 	bic.w	r2, r2, #2
 800409a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	2164      	movs	r1, #100	@ 0x64
 80040a0:	6978      	ldr	r0, [r7, #20]
 80040a2:	f000 f8f7 	bl	8004294 <SPI_EndRxTxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f7ff ffab 	bl	8004048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040f2:	e002      	b.n	80040fa <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7ff ff95 	bl	8004024 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff91 	bl	8004036 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0203 	bic.w	r2, r2, #3
 8004138:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff ff7a 	bl	8004048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff66 	bl	8004048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004194:	f7fe f8b2 	bl	80022fc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041a4:	f7fe f8aa 	bl	80022fc <HAL_GetTick>
 80041a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	0d1b      	lsrs	r3, r3, #20
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ba:	e054      	b.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c2:	d050      	beq.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c4:	f7fe f89a 	bl	80022fc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d902      	bls.n	80041da <SPI_WaitFlagStateUntilTimeout+0x56>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d13d      	bne.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f2:	d111      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fc:	d004      	beq.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004206:	d107      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004220:	d10f      	bne.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e017      	b.n	8004286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3b01      	subs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	429a      	cmp	r2, r3
 8004282:	d19b      	bne.n	80041bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000014 	.word	0x20000014

08004294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2201      	movs	r2, #1
 80042a8:	2102      	movs	r1, #2
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff ff6a 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e013      	b.n	80042ee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2180      	movs	r1, #128	@ 0x80
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff ff57 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e000      	b.n	80042ee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e042      	b.n	800438e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd fdeb 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2224      	movs	r2, #36	@ 0x24
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004338:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fd62 	bl	8004e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800434e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800435e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800436e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08a      	sub	sp, #40	@ 0x28
 800439a:	af02      	add	r7, sp, #8
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d175      	bne.n	80044a2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_Transmit+0x2c>
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06e      	b.n	80044a4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2221      	movs	r2, #33	@ 0x21
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d4:	f7fd ff92 	bl	80022fc <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ee:	d108      	bne.n	8004402 <HAL_UART_Transmit+0x6c>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e003      	b.n	800440a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800440a:	e02e      	b.n	800446a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	2180      	movs	r1, #128	@ 0x80
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb00 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e03a      	b.n	80044a4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004442:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	3302      	adds	r3, #2
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e007      	b.n	800445c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3301      	adds	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1cb      	bne.n	800440c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2200      	movs	r2, #0
 800447c:	2140      	movs	r1, #64	@ 0x40
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 facc 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e006      	b.n	80044a4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b0ba      	sub	sp, #232	@ 0xe8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <HAL_UART_IRQHandler+0x66>
 80044fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fbbc 	bl	8004c88 <UART_Receive_IT>
      return;
 8004510:	e25b      	b.n	80049ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80de 	beq.w	80046d8 <HAL_UART_IRQHandler+0x22c>
 800451c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80d1 	beq.w	80046d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_UART_IRQHandler+0xae>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <HAL_UART_IRQHandler+0xd2>
 8004566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f043 0202 	orr.w	r2, r3, #2
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_UART_IRQHandler+0xf6>
 800458a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f043 0204 	orr.w	r2, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d011      	beq.n	80045d2 <HAL_UART_IRQHandler+0x126>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0208 	orr.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 81f2 	beq.w	80049c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_UART_IRQHandler+0x14e>
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fb47 	bl	8004c88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_UART_IRQHandler+0x17a>
 800461e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d04f      	beq.n	80046c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa51 	bl	8004ace <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d041      	beq.n	80046be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800466a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800467e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1d9      	bne.n	800463a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d013      	beq.n	80046b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	4a7e      	ldr	r2, [pc, #504]	@ (800488c <HAL_UART_IRQHandler+0x3e0>)
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f860 	bl	8002760 <HAL_DMA_Abort_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e00e      	b.n	80046d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f99c 	bl	80049f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e00a      	b.n	80046d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f998 	bl	80049f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e006      	b.n	80046d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f994 	bl	80049f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046d2:	e175      	b.n	80049c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	bf00      	nop
    return;
 80046d6:	e173      	b.n	80049c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 814f 	bne.w	8004980 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8148 	beq.w	8004980 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8141 	beq.w	8004980 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80b6 	beq.w	8004890 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8145 	beq.w	80049c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800473e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004742:	429a      	cmp	r2, r3
 8004744:	f080 813e 	bcs.w	80049c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800474e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b20      	cmp	r3, #32
 8004758:	f000 8088 	beq.w	800486c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800477a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004788:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800478c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004794:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1d9      	bne.n	800475c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e1      	bne.n	80047a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004808:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800480a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800480e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e3      	bne.n	80047e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800483a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800484e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004850:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800485c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e3      	bne.n	800482a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd ff3e 	bl	80026e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800487a:	b29b      	uxth	r3, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8bf 	bl	8004a06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004888:	e09c      	b.n	80049c4 <HAL_UART_IRQHandler+0x518>
 800488a:	bf00      	nop
 800488c:	08004b93 	.word	0x08004b93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004898:	b29b      	uxth	r3, r3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 808e 	beq.w	80049c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8089 	beq.w	80049c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048da:	647a      	str	r2, [r7, #68]	@ 0x44
 80048dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e3      	bne.n	80048b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	623b      	str	r3, [r7, #32]
   return(result);
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3314      	adds	r3, #20
 800490e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004912:	633a      	str	r2, [r7, #48]	@ 0x30
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e3      	bne.n	80048ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	60fb      	str	r3, [r7, #12]
   return(result);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0310 	bic.w	r3, r3, #16
 800494a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004958:	61fa      	str	r2, [r7, #28]
 800495a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69b9      	ldr	r1, [r7, #24]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	617b      	str	r3, [r7, #20]
   return(result);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e3      	bne.n	8004934 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f844 	bl	8004a06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497e:	e023      	b.n	80049c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_UART_IRQHandler+0x4f4>
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f90e 	bl	8004bba <UART_Transmit_IT>
    return;
 800499e:	e014      	b.n	80049ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00e      	beq.n	80049ca <HAL_UART_IRQHandler+0x51e>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f94d 	bl	8004c58 <UART_EndTransmit_IT>
    return;
 80049be:	e004      	b.n	80049ca <HAL_UART_IRQHandler+0x51e>
    return;
 80049c0:	bf00      	nop
 80049c2:	e002      	b.n	80049ca <HAL_UART_IRQHandler+0x51e>
      return;
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <HAL_UART_IRQHandler+0x51e>
      return;
 80049c8:	bf00      	nop
  }
}
 80049ca:	37e8      	adds	r7, #232	@ 0xe8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2c:	e03b      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a34:	d037      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fd fc61 	bl	80022fc <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e03a      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d023      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b80      	cmp	r3, #128	@ 0x80
 8004a62:	d020      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	d01d      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d116      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f81d 	bl	8004ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2208      	movs	r2, #8
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0b4      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b095      	sub	sp, #84	@ 0x54
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d119      	bne.n	8004b7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b66:	61ba      	str	r2, [r7, #24]
 8004b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	613b      	str	r3, [r7, #16]
   return(result);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b88:	bf00      	nop
 8004b8a:	3754      	adds	r7, #84	@ 0x54
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ff21 	bl	80049f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b21      	cmp	r3, #33	@ 0x21
 8004bcc:	d13e      	bne.n	8004c4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	d114      	bne.n	8004c02 <UART_Transmit_IT+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]
 8004c00:	e008      	b.n	8004c14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6211      	str	r1, [r2, #32]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fea9 	bl	80049d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	@ 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b22      	cmp	r3, #34	@ 0x22
 8004c9a:	f040 80ae 	bne.w	8004dfa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d117      	bne.n	8004cd8 <UART_Receive_IT+0x50>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d113      	bne.n	8004cd8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd6:	e026      	b.n	8004d26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d007      	beq.n	8004cfc <UART_Receive_IT+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <UART_Receive_IT+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4619      	mov	r1, r3
 8004d34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d15d      	bne.n	8004df6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0220 	bic.w	r2, r2, #32
 8004d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d135      	bne.n	8004dec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	613b      	str	r3, [r7, #16]
   return(result);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f023 0310 	bic.w	r3, r3, #16
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da6:	623a      	str	r2, [r7, #32]
 8004da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d10a      	bne.n	8004dde <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fe0e 	bl	8004a06 <HAL_UARTEx_RxEventCallback>
 8004dea:	e002      	b.n	8004df2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fdf8 	bl	80049e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e002      	b.n	8004dfc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3730      	adds	r7, #48	@ 0x30
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e3e:	f023 030c 	bic.w	r3, r3, #12
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <UART_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe fb9e 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	e002      	b.n	8004e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7fe fb86 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8004e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <UART_SetConfig+0x118>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	0119      	lsls	r1, r3, #4
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009a      	lsls	r2, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2064      	movs	r0, #100	@ 0x64
 8004eba:	fb00 f303 	mul.w	r3, r0, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	3332      	adds	r3, #50	@ 0x32
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <UART_SetConfig+0x118>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed0:	4419      	add	r1, r3
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eea:	fba3 0302 	umull	r0, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2064      	movs	r0, #100	@ 0x64
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <UART_SetConfig+0x118>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <__cvt>:
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f26:	461d      	mov	r5, r3
 8004f28:	bfbb      	ittet	lt
 8004f2a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004f2e:	461d      	movlt	r5, r3
 8004f30:	2300      	movge	r3, #0
 8004f32:	232d      	movlt	r3, #45	@ 0x2d
 8004f34:	b088      	sub	sp, #32
 8004f36:	4614      	mov	r4, r2
 8004f38:	bfb8      	it	lt
 8004f3a:	4614      	movlt	r4, r2
 8004f3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004f40:	7013      	strb	r3, [r2, #0]
 8004f42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004f48:	f023 0820 	bic.w	r8, r3, #32
 8004f4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f50:	d005      	beq.n	8004f5e <__cvt+0x3e>
 8004f52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f56:	d100      	bne.n	8004f5a <__cvt+0x3a>
 8004f58:	3601      	adds	r6, #1
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e000      	b.n	8004f60 <__cvt+0x40>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	aa07      	add	r2, sp, #28
 8004f62:	9204      	str	r2, [sp, #16]
 8004f64:	aa06      	add	r2, sp, #24
 8004f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f6a:	e9cd 3600 	strd	r3, r6, [sp]
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f000 fe6d 	bl	8005c50 <_dtoa_r>
 8004f76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f7a:	4607      	mov	r7, r0
 8004f7c:	d119      	bne.n	8004fb2 <__cvt+0x92>
 8004f7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004f80:	07db      	lsls	r3, r3, #31
 8004f82:	d50e      	bpl.n	8004fa2 <__cvt+0x82>
 8004f84:	eb00 0906 	add.w	r9, r0, r6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7fb fdbe 	bl	8000b10 <__aeabi_dcmpeq>
 8004f94:	b108      	cbz	r0, 8004f9a <__cvt+0x7a>
 8004f96:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f9a:	2230      	movs	r2, #48	@ 0x30
 8004f9c:	9b07      	ldr	r3, [sp, #28]
 8004f9e:	454b      	cmp	r3, r9
 8004fa0:	d31e      	bcc.n	8004fe0 <__cvt+0xc0>
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004fa8:	1bdb      	subs	r3, r3, r7
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	b008      	add	sp, #32
 8004fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fb6:	eb00 0906 	add.w	r9, r0, r6
 8004fba:	d1e5      	bne.n	8004f88 <__cvt+0x68>
 8004fbc:	7803      	ldrb	r3, [r0, #0]
 8004fbe:	2b30      	cmp	r3, #48	@ 0x30
 8004fc0:	d10a      	bne.n	8004fd8 <__cvt+0xb8>
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb fda1 	bl	8000b10 <__aeabi_dcmpeq>
 8004fce:	b918      	cbnz	r0, 8004fd8 <__cvt+0xb8>
 8004fd0:	f1c6 0601 	rsb	r6, r6, #1
 8004fd4:	f8ca 6000 	str.w	r6, [sl]
 8004fd8:	f8da 3000 	ldr.w	r3, [sl]
 8004fdc:	4499      	add	r9, r3
 8004fde:	e7d3      	b.n	8004f88 <__cvt+0x68>
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	9107      	str	r1, [sp, #28]
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e7d9      	b.n	8004f9c <__cvt+0x7c>

08004fe8 <__exponent>:
 8004fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fea:	2900      	cmp	r1, #0
 8004fec:	bfb6      	itet	lt
 8004fee:	232d      	movlt	r3, #45	@ 0x2d
 8004ff0:	232b      	movge	r3, #43	@ 0x2b
 8004ff2:	4249      	neglt	r1, r1
 8004ff4:	2909      	cmp	r1, #9
 8004ff6:	7002      	strb	r2, [r0, #0]
 8004ff8:	7043      	strb	r3, [r0, #1]
 8004ffa:	dd29      	ble.n	8005050 <__exponent+0x68>
 8004ffc:	f10d 0307 	add.w	r3, sp, #7
 8005000:	461d      	mov	r5, r3
 8005002:	270a      	movs	r7, #10
 8005004:	fbb1 f6f7 	udiv	r6, r1, r7
 8005008:	461a      	mov	r2, r3
 800500a:	fb07 1416 	mls	r4, r7, r6, r1
 800500e:	3430      	adds	r4, #48	@ 0x30
 8005010:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005014:	460c      	mov	r4, r1
 8005016:	2c63      	cmp	r4, #99	@ 0x63
 8005018:	4631      	mov	r1, r6
 800501a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800501e:	dcf1      	bgt.n	8005004 <__exponent+0x1c>
 8005020:	3130      	adds	r1, #48	@ 0x30
 8005022:	1e94      	subs	r4, r2, #2
 8005024:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005028:	4623      	mov	r3, r4
 800502a:	1c41      	adds	r1, r0, #1
 800502c:	42ab      	cmp	r3, r5
 800502e:	d30a      	bcc.n	8005046 <__exponent+0x5e>
 8005030:	f10d 0309 	add.w	r3, sp, #9
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	42ac      	cmp	r4, r5
 8005038:	bf88      	it	hi
 800503a:	2300      	movhi	r3, #0
 800503c:	3302      	adds	r3, #2
 800503e:	4403      	add	r3, r0
 8005040:	1a18      	subs	r0, r3, r0
 8005042:	b003      	add	sp, #12
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005046:	f813 6b01 	ldrb.w	r6, [r3], #1
 800504a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800504e:	e7ed      	b.n	800502c <__exponent+0x44>
 8005050:	2330      	movs	r3, #48	@ 0x30
 8005052:	3130      	adds	r1, #48	@ 0x30
 8005054:	7083      	strb	r3, [r0, #2]
 8005056:	70c1      	strb	r1, [r0, #3]
 8005058:	1d03      	adds	r3, r0, #4
 800505a:	e7f1      	b.n	8005040 <__exponent+0x58>

0800505c <_printf_float>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	b091      	sub	sp, #68	@ 0x44
 8005062:	460c      	mov	r4, r1
 8005064:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005068:	4616      	mov	r6, r2
 800506a:	461f      	mov	r7, r3
 800506c:	4605      	mov	r5, r0
 800506e:	f000 fce1 	bl	8005a34 <_localeconv_r>
 8005072:	6803      	ldr	r3, [r0, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	9308      	str	r3, [sp, #32]
 8005078:	f7fb f86a 	bl	8000150 <strlen>
 800507c:	2300      	movs	r3, #0
 800507e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005080:	f8d8 3000 	ldr.w	r3, [r8]
 8005084:	9009      	str	r0, [sp, #36]	@ 0x24
 8005086:	3307      	adds	r3, #7
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	f103 0208 	add.w	r2, r3, #8
 8005090:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005094:	f8d4 b000 	ldr.w	fp, [r4]
 8005098:	f8c8 2000 	str.w	r2, [r8]
 800509c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050b6:	4b9c      	ldr	r3, [pc, #624]	@ (8005328 <_printf_float+0x2cc>)
 80050b8:	f7fb fd5c 	bl	8000b74 <__aeabi_dcmpun>
 80050bc:	bb70      	cbnz	r0, 800511c <_printf_float+0xc0>
 80050be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050c6:	4b98      	ldr	r3, [pc, #608]	@ (8005328 <_printf_float+0x2cc>)
 80050c8:	f7fb fd36 	bl	8000b38 <__aeabi_dcmple>
 80050cc:	bb30      	cbnz	r0, 800511c <_printf_float+0xc0>
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb fd25 	bl	8000b24 <__aeabi_dcmplt>
 80050da:	b110      	cbz	r0, 80050e2 <_printf_float+0x86>
 80050dc:	232d      	movs	r3, #45	@ 0x2d
 80050de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050e2:	4a92      	ldr	r2, [pc, #584]	@ (800532c <_printf_float+0x2d0>)
 80050e4:	4b92      	ldr	r3, [pc, #584]	@ (8005330 <_printf_float+0x2d4>)
 80050e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050ea:	bf8c      	ite	hi
 80050ec:	4690      	movhi	r8, r2
 80050ee:	4698      	movls	r8, r3
 80050f0:	2303      	movs	r3, #3
 80050f2:	f04f 0900 	mov.w	r9, #0
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	f02b 0304 	bic.w	r3, fp, #4
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	4633      	mov	r3, r6
 8005100:	4621      	mov	r1, r4
 8005102:	4628      	mov	r0, r5
 8005104:	9700      	str	r7, [sp, #0]
 8005106:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005108:	f000 f9d4 	bl	80054b4 <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	f040 8090 	bne.w	8005232 <_printf_float+0x1d6>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005116:	b011      	add	sp, #68	@ 0x44
 8005118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb fd26 	bl	8000b74 <__aeabi_dcmpun>
 8005128:	b148      	cbz	r0, 800513e <_printf_float+0xe2>
 800512a:	464b      	mov	r3, r9
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	232d      	movlt	r3, #45	@ 0x2d
 8005132:	4a80      	ldr	r2, [pc, #512]	@ (8005334 <_printf_float+0x2d8>)
 8005134:	bfb8      	it	lt
 8005136:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800513a:	4b7f      	ldr	r3, [pc, #508]	@ (8005338 <_printf_float+0x2dc>)
 800513c:	e7d3      	b.n	80050e6 <_printf_float+0x8a>
 800513e:	6863      	ldr	r3, [r4, #4]
 8005140:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	d13f      	bne.n	80051c8 <_printf_float+0x16c>
 8005148:	2306      	movs	r3, #6
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	9206      	str	r2, [sp, #24]
 8005156:	aa0e      	add	r2, sp, #56	@ 0x38
 8005158:	e9cd a204 	strd	sl, r2, [sp, #16]
 800515c:	aa0d      	add	r2, sp, #52	@ 0x34
 800515e:	9203      	str	r2, [sp, #12]
 8005160:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005164:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	4642      	mov	r2, r8
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4628      	mov	r0, r5
 8005170:	464b      	mov	r3, r9
 8005172:	910a      	str	r1, [sp, #40]	@ 0x28
 8005174:	f7ff fed4 	bl	8004f20 <__cvt>
 8005178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800517a:	4680      	mov	r8, r0
 800517c:	2947      	cmp	r1, #71	@ 0x47
 800517e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005180:	d128      	bne.n	80051d4 <_printf_float+0x178>
 8005182:	1cc8      	adds	r0, r1, #3
 8005184:	db02      	blt.n	800518c <_printf_float+0x130>
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	4299      	cmp	r1, r3
 800518a:	dd40      	ble.n	800520e <_printf_float+0x1b2>
 800518c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005190:	fa5f fa8a 	uxtb.w	sl, sl
 8005194:	4652      	mov	r2, sl
 8005196:	3901      	subs	r1, #1
 8005198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800519c:	910d      	str	r1, [sp, #52]	@ 0x34
 800519e:	f7ff ff23 	bl	8004fe8 <__exponent>
 80051a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051a4:	4681      	mov	r9, r0
 80051a6:	1813      	adds	r3, r2, r0
 80051a8:	2a01      	cmp	r2, #1
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	dc02      	bgt.n	80051b4 <_printf_float+0x158>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d2      	lsls	r2, r2, #31
 80051b2:	d501      	bpl.n	80051b8 <_printf_float+0x15c>
 80051b4:	3301      	adds	r3, #1
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d09e      	beq.n	80050fe <_printf_float+0xa2>
 80051c0:	232d      	movs	r3, #45	@ 0x2d
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c6:	e79a      	b.n	80050fe <_printf_float+0xa2>
 80051c8:	2947      	cmp	r1, #71	@ 0x47
 80051ca:	d1bf      	bne.n	800514c <_printf_float+0xf0>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1bd      	bne.n	800514c <_printf_float+0xf0>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e7ba      	b.n	800514a <_printf_float+0xee>
 80051d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051d8:	d9dc      	bls.n	8005194 <_printf_float+0x138>
 80051da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051de:	d118      	bne.n	8005212 <_printf_float+0x1b6>
 80051e0:	2900      	cmp	r1, #0
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	dd0b      	ble.n	80051fe <_printf_float+0x1a2>
 80051e6:	6121      	str	r1, [r4, #16]
 80051e8:	b913      	cbnz	r3, 80051f0 <_printf_float+0x194>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	07d0      	lsls	r0, r2, #31
 80051ee:	d502      	bpl.n	80051f6 <_printf_float+0x19a>
 80051f0:	3301      	adds	r3, #1
 80051f2:	440b      	add	r3, r1
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	f04f 0900 	mov.w	r9, #0
 80051fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051fc:	e7dc      	b.n	80051b8 <_printf_float+0x15c>
 80051fe:	b913      	cbnz	r3, 8005206 <_printf_float+0x1aa>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	07d2      	lsls	r2, r2, #31
 8005204:	d501      	bpl.n	800520a <_printf_float+0x1ae>
 8005206:	3302      	adds	r3, #2
 8005208:	e7f4      	b.n	80051f4 <_printf_float+0x198>
 800520a:	2301      	movs	r3, #1
 800520c:	e7f2      	b.n	80051f4 <_printf_float+0x198>
 800520e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005214:	4299      	cmp	r1, r3
 8005216:	db05      	blt.n	8005224 <_printf_float+0x1c8>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	6121      	str	r1, [r4, #16]
 800521c:	07d8      	lsls	r0, r3, #31
 800521e:	d5ea      	bpl.n	80051f6 <_printf_float+0x19a>
 8005220:	1c4b      	adds	r3, r1, #1
 8005222:	e7e7      	b.n	80051f4 <_printf_float+0x198>
 8005224:	2900      	cmp	r1, #0
 8005226:	bfcc      	ite	gt
 8005228:	2201      	movgt	r2, #1
 800522a:	f1c1 0202 	rsble	r2, r1, #2
 800522e:	4413      	add	r3, r2
 8005230:	e7e0      	b.n	80051f4 <_printf_float+0x198>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	055a      	lsls	r2, r3, #21
 8005236:	d407      	bmi.n	8005248 <_printf_float+0x1ec>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	4642      	mov	r2, r8
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	d12b      	bne.n	800529e <_printf_float+0x242>
 8005246:	e764      	b.n	8005112 <_printf_float+0xb6>
 8005248:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800524c:	f240 80dc 	bls.w	8005408 <_printf_float+0x3ac>
 8005250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	f7fb fc5a 	bl	8000b10 <__aeabi_dcmpeq>
 800525c:	2800      	cmp	r0, #0
 800525e:	d033      	beq.n	80052c8 <_printf_float+0x26c>
 8005260:	2301      	movs	r3, #1
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	4a35      	ldr	r2, [pc, #212]	@ (800533c <_printf_float+0x2e0>)
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af51 	beq.w	8005112 <_printf_float+0xb6>
 8005270:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005274:	4543      	cmp	r3, r8
 8005276:	db02      	blt.n	800527e <_printf_float+0x222>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07d8      	lsls	r0, r3, #31
 800527c:	d50f      	bpl.n	800529e <_printf_float+0x242>
 800527e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f af42 	beq.w	8005112 <_printf_float+0xb6>
 800528e:	f04f 0900 	mov.w	r9, #0
 8005292:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005296:	f104 0a1a 	add.w	sl, r4, #26
 800529a:	45c8      	cmp	r8, r9
 800529c:	dc09      	bgt.n	80052b2 <_printf_float+0x256>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	079b      	lsls	r3, r3, #30
 80052a2:	f100 8102 	bmi.w	80054aa <_printf_float+0x44e>
 80052a6:	68e0      	ldr	r0, [r4, #12]
 80052a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052aa:	4298      	cmp	r0, r3
 80052ac:	bfb8      	it	lt
 80052ae:	4618      	movlt	r0, r3
 80052b0:	e731      	b.n	8005116 <_printf_float+0xba>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f af28 	beq.w	8005112 <_printf_float+0xb6>
 80052c2:	f109 0901 	add.w	r9, r9, #1
 80052c6:	e7e8      	b.n	800529a <_printf_float+0x23e>
 80052c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc38      	bgt.n	8005340 <_printf_float+0x2e4>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	4a19      	ldr	r2, [pc, #100]	@ (800533c <_printf_float+0x2e0>)
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f af1a 	beq.w	8005112 <_printf_float+0xb6>
 80052de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80052e2:	ea59 0303 	orrs.w	r3, r9, r3
 80052e6:	d102      	bne.n	80052ee <_printf_float+0x292>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d5d7      	bpl.n	800529e <_printf_float+0x242>
 80052ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f af0a 	beq.w	8005112 <_printf_float+0xb6>
 80052fe:	f04f 0a00 	mov.w	sl, #0
 8005302:	f104 0b1a 	add.w	fp, r4, #26
 8005306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005308:	425b      	negs	r3, r3
 800530a:	4553      	cmp	r3, sl
 800530c:	dc01      	bgt.n	8005312 <_printf_float+0x2b6>
 800530e:	464b      	mov	r3, r9
 8005310:	e793      	b.n	800523a <_printf_float+0x1de>
 8005312:	2301      	movs	r3, #1
 8005314:	465a      	mov	r2, fp
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f aef8 	beq.w	8005112 <_printf_float+0xb6>
 8005322:	f10a 0a01 	add.w	sl, sl, #1
 8005326:	e7ee      	b.n	8005306 <_printf_float+0x2aa>
 8005328:	7fefffff 	.word	0x7fefffff
 800532c:	08009fa2 	.word	0x08009fa2
 8005330:	08009f9e 	.word	0x08009f9e
 8005334:	08009faa 	.word	0x08009faa
 8005338:	08009fa6 	.word	0x08009fa6
 800533c:	08009fae 	.word	0x08009fae
 8005340:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005342:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005346:	4553      	cmp	r3, sl
 8005348:	bfa8      	it	ge
 800534a:	4653      	movge	r3, sl
 800534c:	2b00      	cmp	r3, #0
 800534e:	4699      	mov	r9, r3
 8005350:	dc36      	bgt.n	80053c0 <_printf_float+0x364>
 8005352:	f04f 0b00 	mov.w	fp, #0
 8005356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535a:	f104 021a 	add.w	r2, r4, #26
 800535e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005360:	930a      	str	r3, [sp, #40]	@ 0x28
 8005362:	eba3 0309 	sub.w	r3, r3, r9
 8005366:	455b      	cmp	r3, fp
 8005368:	dc31      	bgt.n	80053ce <_printf_float+0x372>
 800536a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800536c:	459a      	cmp	sl, r3
 800536e:	dc3a      	bgt.n	80053e6 <_printf_float+0x38a>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	07da      	lsls	r2, r3, #31
 8005374:	d437      	bmi.n	80053e6 <_printf_float+0x38a>
 8005376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005378:	ebaa 0903 	sub.w	r9, sl, r3
 800537c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800537e:	ebaa 0303 	sub.w	r3, sl, r3
 8005382:	4599      	cmp	r9, r3
 8005384:	bfa8      	it	ge
 8005386:	4699      	movge	r9, r3
 8005388:	f1b9 0f00 	cmp.w	r9, #0
 800538c:	dc33      	bgt.n	80053f6 <_printf_float+0x39a>
 800538e:	f04f 0800 	mov.w	r8, #0
 8005392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005396:	f104 0b1a 	add.w	fp, r4, #26
 800539a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800539c:	ebaa 0303 	sub.w	r3, sl, r3
 80053a0:	eba3 0309 	sub.w	r3, r3, r9
 80053a4:	4543      	cmp	r3, r8
 80053a6:	f77f af7a 	ble.w	800529e <_printf_float+0x242>
 80053aa:	2301      	movs	r3, #1
 80053ac:	465a      	mov	r2, fp
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f aeac 	beq.w	8005112 <_printf_float+0xb6>
 80053ba:	f108 0801 	add.w	r8, r8, #1
 80053be:	e7ec      	b.n	800539a <_printf_float+0x33e>
 80053c0:	4642      	mov	r2, r8
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1c2      	bne.n	8005352 <_printf_float+0x2f6>
 80053cc:	e6a1      	b.n	8005112 <_printf_float+0xb6>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f ae9a 	beq.w	8005112 <_printf_float+0xb6>
 80053de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053e0:	f10b 0b01 	add.w	fp, fp, #1
 80053e4:	e7bb      	b.n	800535e <_printf_float+0x302>
 80053e6:	4631      	mov	r1, r6
 80053e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	d1c0      	bne.n	8005376 <_printf_float+0x31a>
 80053f4:	e68d      	b.n	8005112 <_printf_float+0xb6>
 80053f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053f8:	464b      	mov	r3, r9
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	4442      	add	r2, r8
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	d1c3      	bne.n	800538e <_printf_float+0x332>
 8005406:	e684      	b.n	8005112 <_printf_float+0xb6>
 8005408:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800540c:	f1ba 0f01 	cmp.w	sl, #1
 8005410:	dc01      	bgt.n	8005416 <_printf_float+0x3ba>
 8005412:	07db      	lsls	r3, r3, #31
 8005414:	d536      	bpl.n	8005484 <_printf_float+0x428>
 8005416:	2301      	movs	r3, #1
 8005418:	4642      	mov	r2, r8
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f ae76 	beq.w	8005112 <_printf_float+0xb6>
 8005426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800542a:	4631      	mov	r1, r6
 800542c:	4628      	mov	r0, r5
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	f43f ae6e 	beq.w	8005112 <_printf_float+0xb6>
 8005436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005442:	f7fb fb65 	bl	8000b10 <__aeabi_dcmpeq>
 8005446:	b9c0      	cbnz	r0, 800547a <_printf_float+0x41e>
 8005448:	4653      	mov	r3, sl
 800544a:	f108 0201 	add.w	r2, r8, #1
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	d10c      	bne.n	8005472 <_printf_float+0x416>
 8005458:	e65b      	b.n	8005112 <_printf_float+0xb6>
 800545a:	2301      	movs	r3, #1
 800545c:	465a      	mov	r2, fp
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f ae54 	beq.w	8005112 <_printf_float+0xb6>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	45d0      	cmp	r8, sl
 8005470:	dbf3      	blt.n	800545a <_printf_float+0x3fe>
 8005472:	464b      	mov	r3, r9
 8005474:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005478:	e6e0      	b.n	800523c <_printf_float+0x1e0>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	f104 0b1a 	add.w	fp, r4, #26
 8005482:	e7f4      	b.n	800546e <_printf_float+0x412>
 8005484:	2301      	movs	r3, #1
 8005486:	4642      	mov	r2, r8
 8005488:	e7e1      	b.n	800544e <_printf_float+0x3f2>
 800548a:	2301      	movs	r3, #1
 800548c:	464a      	mov	r2, r9
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f ae3c 	beq.w	8005112 <_printf_float+0xb6>
 800549a:	f108 0801 	add.w	r8, r8, #1
 800549e:	68e3      	ldr	r3, [r4, #12]
 80054a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80054a2:	1a5b      	subs	r3, r3, r1
 80054a4:	4543      	cmp	r3, r8
 80054a6:	dcf0      	bgt.n	800548a <_printf_float+0x42e>
 80054a8:	e6fd      	b.n	80052a6 <_printf_float+0x24a>
 80054aa:	f04f 0800 	mov.w	r8, #0
 80054ae:	f104 0919 	add.w	r9, r4, #25
 80054b2:	e7f4      	b.n	800549e <_printf_float+0x442>

080054b4 <_printf_common>:
 80054b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	4616      	mov	r6, r2
 80054ba:	4698      	mov	r8, r3
 80054bc:	688a      	ldr	r2, [r1, #8]
 80054be:	690b      	ldr	r3, [r1, #16]
 80054c0:	4607      	mov	r7, r0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bfb8      	it	lt
 80054c6:	4613      	movlt	r3, r2
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054ce:	460c      	mov	r4, r1
 80054d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054d4:	b10a      	cbz	r2, 80054da <_printf_common+0x26>
 80054d6:	3301      	adds	r3, #1
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	0699      	lsls	r1, r3, #26
 80054de:	bf42      	ittt	mi
 80054e0:	6833      	ldrmi	r3, [r6, #0]
 80054e2:	3302      	addmi	r3, #2
 80054e4:	6033      	strmi	r3, [r6, #0]
 80054e6:	6825      	ldr	r5, [r4, #0]
 80054e8:	f015 0506 	ands.w	r5, r5, #6
 80054ec:	d106      	bne.n	80054fc <_printf_common+0x48>
 80054ee:	f104 0a19 	add.w	sl, r4, #25
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	6832      	ldr	r2, [r6, #0]
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dc2b      	bgt.n	8005554 <_printf_common+0xa0>
 80054fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	3b00      	subs	r3, #0
 8005504:	bf18      	it	ne
 8005506:	2301      	movne	r3, #1
 8005508:	0692      	lsls	r2, r2, #26
 800550a:	d430      	bmi.n	800556e <_printf_common+0xba>
 800550c:	4641      	mov	r1, r8
 800550e:	4638      	mov	r0, r7
 8005510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d023      	beq.n	8005562 <_printf_common+0xae>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	f003 0306 	and.w	r3, r3, #6
 8005522:	2b04      	cmp	r3, #4
 8005524:	bf14      	ite	ne
 8005526:	2500      	movne	r5, #0
 8005528:	6833      	ldreq	r3, [r6, #0]
 800552a:	f04f 0600 	mov.w	r6, #0
 800552e:	bf08      	it	eq
 8005530:	68e5      	ldreq	r5, [r4, #12]
 8005532:	f104 041a 	add.w	r4, r4, #26
 8005536:	bf08      	it	eq
 8005538:	1aed      	subeq	r5, r5, r3
 800553a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800553e:	bf08      	it	eq
 8005540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005544:	4293      	cmp	r3, r2
 8005546:	bfc4      	itt	gt
 8005548:	1a9b      	subgt	r3, r3, r2
 800554a:	18ed      	addgt	r5, r5, r3
 800554c:	42b5      	cmp	r5, r6
 800554e:	d11a      	bne.n	8005586 <_printf_common+0xd2>
 8005550:	2000      	movs	r0, #0
 8005552:	e008      	b.n	8005566 <_printf_common+0xb2>
 8005554:	2301      	movs	r3, #1
 8005556:	4652      	mov	r2, sl
 8005558:	4641      	mov	r1, r8
 800555a:	4638      	mov	r0, r7
 800555c:	47c8      	blx	r9
 800555e:	3001      	adds	r0, #1
 8005560:	d103      	bne.n	800556a <_printf_common+0xb6>
 8005562:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556a:	3501      	adds	r5, #1
 800556c:	e7c1      	b.n	80054f2 <_printf_common+0x3e>
 800556e:	2030      	movs	r0, #48	@ 0x30
 8005570:	18e1      	adds	r1, r4, r3
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800557c:	4422      	add	r2, r4
 800557e:	3302      	adds	r3, #2
 8005580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005584:	e7c2      	b.n	800550c <_printf_common+0x58>
 8005586:	2301      	movs	r3, #1
 8005588:	4622      	mov	r2, r4
 800558a:	4641      	mov	r1, r8
 800558c:	4638      	mov	r0, r7
 800558e:	47c8      	blx	r9
 8005590:	3001      	adds	r0, #1
 8005592:	d0e6      	beq.n	8005562 <_printf_common+0xae>
 8005594:	3601      	adds	r6, #1
 8005596:	e7d9      	b.n	800554c <_printf_common+0x98>

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	7e0f      	ldrb	r7, [r1, #24]
 800559e:	4691      	mov	r9, r2
 80055a0:	2f78      	cmp	r7, #120	@ 0x78
 80055a2:	4680      	mov	r8, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	469a      	mov	sl, r3
 80055a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	@ 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d1 	beq.w	800575c <_printf_i+0x1c4>
 80055ba:	2f58      	cmp	r7, #88	@ 0x58
 80055bc:	f000 80b8 	beq.w	8005730 <_printf_i+0x198>
 80055c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a101      	add	r1, pc, #4	@ (adr r1, 80055d8 <_printf_i+0x40>)
 80055d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005743 	.word	0x08005743
 8005608:	0800566f 	.word	0x0800566f
 800560c:	080056fd 	.word	0x080056fd
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005765 	.word	0x08005765
 800561c:	080055c1 	.word	0x080055c1
 8005620:	0800566f 	.word	0x0800566f
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	08005705 	.word	0x08005705
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6032      	str	r2, [r6, #0]
 8005638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e09c      	b.n	800577e <_printf_i+0x1e6>
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	6031      	str	r1, [r6, #0]
 800564c:	0606      	lsls	r6, r0, #24
 800564e:	d501      	bpl.n	8005654 <_printf_i+0xbc>
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	e003      	b.n	800565c <_printf_i+0xc4>
 8005654:	0645      	lsls	r5, r0, #25
 8005656:	d5fb      	bpl.n	8005650 <_printf_i+0xb8>
 8005658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800565c:	2d00      	cmp	r5, #0
 800565e:	da03      	bge.n	8005668 <_printf_i+0xd0>
 8005660:	232d      	movs	r3, #45	@ 0x2d
 8005662:	426d      	negs	r5, r5
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005668:	230a      	movs	r3, #10
 800566a:	4858      	ldr	r0, [pc, #352]	@ (80057cc <_printf_i+0x234>)
 800566c:	e011      	b.n	8005692 <_printf_i+0xfa>
 800566e:	6821      	ldr	r1, [r4, #0]
 8005670:	6833      	ldr	r3, [r6, #0]
 8005672:	0608      	lsls	r0, r1, #24
 8005674:	f853 5b04 	ldr.w	r5, [r3], #4
 8005678:	d402      	bmi.n	8005680 <_printf_i+0xe8>
 800567a:	0649      	lsls	r1, r1, #25
 800567c:	bf48      	it	mi
 800567e:	b2ad      	uxthmi	r5, r5
 8005680:	2f6f      	cmp	r7, #111	@ 0x6f
 8005682:	6033      	str	r3, [r6, #0]
 8005684:	bf14      	ite	ne
 8005686:	230a      	movne	r3, #10
 8005688:	2308      	moveq	r3, #8
 800568a:	4850      	ldr	r0, [pc, #320]	@ (80057cc <_printf_i+0x234>)
 800568c:	2100      	movs	r1, #0
 800568e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005692:	6866      	ldr	r6, [r4, #4]
 8005694:	2e00      	cmp	r6, #0
 8005696:	60a6      	str	r6, [r4, #8]
 8005698:	db05      	blt.n	80056a6 <_printf_i+0x10e>
 800569a:	6821      	ldr	r1, [r4, #0]
 800569c:	432e      	orrs	r6, r5
 800569e:	f021 0104 	bic.w	r1, r1, #4
 80056a2:	6021      	str	r1, [r4, #0]
 80056a4:	d04b      	beq.n	800573e <_printf_i+0x1a6>
 80056a6:	4616      	mov	r6, r2
 80056a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80056ac:	fb03 5711 	mls	r7, r3, r1, r5
 80056b0:	5dc7      	ldrb	r7, [r0, r7]
 80056b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b6:	462f      	mov	r7, r5
 80056b8:	42bb      	cmp	r3, r7
 80056ba:	460d      	mov	r5, r1
 80056bc:	d9f4      	bls.n	80056a8 <_printf_i+0x110>
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d10b      	bne.n	80056da <_printf_i+0x142>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	07df      	lsls	r7, r3, #31
 80056c6:	d508      	bpl.n	80056da <_printf_i+0x142>
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	6861      	ldr	r1, [r4, #4]
 80056cc:	4299      	cmp	r1, r3
 80056ce:	bfde      	ittt	le
 80056d0:	2330      	movle	r3, #48	@ 0x30
 80056d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056da:	1b92      	subs	r2, r2, r6
 80056dc:	6122      	str	r2, [r4, #16]
 80056de:	464b      	mov	r3, r9
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f8cd a000 	str.w	sl, [sp]
 80056e8:	aa03      	add	r2, sp, #12
 80056ea:	f7ff fee3 	bl	80054b4 <_printf_common>
 80056ee:	3001      	adds	r0, #1
 80056f0:	d14a      	bne.n	8005788 <_printf_i+0x1f0>
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056f6:	b004      	add	sp, #16
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	2778      	movs	r7, #120	@ 0x78
 8005706:	4832      	ldr	r0, [pc, #200]	@ (80057d0 <_printf_i+0x238>)
 8005708:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	6831      	ldr	r1, [r6, #0]
 8005710:	061f      	lsls	r7, r3, #24
 8005712:	f851 5b04 	ldr.w	r5, [r1], #4
 8005716:	d402      	bmi.n	800571e <_printf_i+0x186>
 8005718:	065f      	lsls	r7, r3, #25
 800571a:	bf48      	it	mi
 800571c:	b2ad      	uxthmi	r5, r5
 800571e:	6031      	str	r1, [r6, #0]
 8005720:	07d9      	lsls	r1, r3, #31
 8005722:	bf44      	itt	mi
 8005724:	f043 0320 	orrmi.w	r3, r3, #32
 8005728:	6023      	strmi	r3, [r4, #0]
 800572a:	b11d      	cbz	r5, 8005734 <_printf_i+0x19c>
 800572c:	2310      	movs	r3, #16
 800572e:	e7ad      	b.n	800568c <_printf_i+0xf4>
 8005730:	4826      	ldr	r0, [pc, #152]	@ (80057cc <_printf_i+0x234>)
 8005732:	e7e9      	b.n	8005708 <_printf_i+0x170>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	f023 0320 	bic.w	r3, r3, #32
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	e7f6      	b.n	800572c <_printf_i+0x194>
 800573e:	4616      	mov	r6, r2
 8005740:	e7bd      	b.n	80056be <_printf_i+0x126>
 8005742:	6833      	ldr	r3, [r6, #0]
 8005744:	6825      	ldr	r5, [r4, #0]
 8005746:	1d18      	adds	r0, r3, #4
 8005748:	6961      	ldr	r1, [r4, #20]
 800574a:	6030      	str	r0, [r6, #0]
 800574c:	062e      	lsls	r6, r5, #24
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	d501      	bpl.n	8005756 <_printf_i+0x1be>
 8005752:	6019      	str	r1, [r3, #0]
 8005754:	e002      	b.n	800575c <_printf_i+0x1c4>
 8005756:	0668      	lsls	r0, r5, #25
 8005758:	d5fb      	bpl.n	8005752 <_printf_i+0x1ba>
 800575a:	8019      	strh	r1, [r3, #0]
 800575c:	2300      	movs	r3, #0
 800575e:	4616      	mov	r6, r2
 8005760:	6123      	str	r3, [r4, #16]
 8005762:	e7bc      	b.n	80056de <_printf_i+0x146>
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	2100      	movs	r1, #0
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	681e      	ldr	r6, [r3, #0]
 800576e:	6862      	ldr	r2, [r4, #4]
 8005770:	4630      	mov	r0, r6
 8005772:	f000 f9d6 	bl	8005b22 <memchr>
 8005776:	b108      	cbz	r0, 800577c <_printf_i+0x1e4>
 8005778:	1b80      	subs	r0, r0, r6
 800577a:	6060      	str	r0, [r4, #4]
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	2300      	movs	r3, #0
 8005782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005786:	e7aa      	b.n	80056de <_printf_i+0x146>
 8005788:	4632      	mov	r2, r6
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	47d0      	blx	sl
 8005792:	3001      	adds	r0, #1
 8005794:	d0ad      	beq.n	80056f2 <_printf_i+0x15a>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	079b      	lsls	r3, r3, #30
 800579a:	d413      	bmi.n	80057c4 <_printf_i+0x22c>
 800579c:	68e0      	ldr	r0, [r4, #12]
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	4298      	cmp	r0, r3
 80057a2:	bfb8      	it	lt
 80057a4:	4618      	movlt	r0, r3
 80057a6:	e7a6      	b.n	80056f6 <_printf_i+0x15e>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4632      	mov	r2, r6
 80057ac:	4649      	mov	r1, r9
 80057ae:	4640      	mov	r0, r8
 80057b0:	47d0      	blx	sl
 80057b2:	3001      	adds	r0, #1
 80057b4:	d09d      	beq.n	80056f2 <_printf_i+0x15a>
 80057b6:	3501      	adds	r5, #1
 80057b8:	68e3      	ldr	r3, [r4, #12]
 80057ba:	9903      	ldr	r1, [sp, #12]
 80057bc:	1a5b      	subs	r3, r3, r1
 80057be:	42ab      	cmp	r3, r5
 80057c0:	dcf2      	bgt.n	80057a8 <_printf_i+0x210>
 80057c2:	e7eb      	b.n	800579c <_printf_i+0x204>
 80057c4:	2500      	movs	r5, #0
 80057c6:	f104 0619 	add.w	r6, r4, #25
 80057ca:	e7f5      	b.n	80057b8 <_printf_i+0x220>
 80057cc:	08009fb0 	.word	0x08009fb0
 80057d0:	08009fc1 	.word	0x08009fc1

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	@ 0x5c
 80057f2:	f000 f916 	bl	8005a22 <memset>
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <std+0x58>)
 80057f8:	6224      	str	r4, [r4, #32]
 80057fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <std+0x5c>)
 80057fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <std+0x60>)
 8005802:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <std+0x64>)
 8005806:	6323      	str	r3, [r4, #48]	@ 0x30
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <std+0x68>)
 800580a:	429c      	cmp	r4, r3
 800580c:	d006      	beq.n	800581c <std+0x48>
 800580e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005812:	4294      	cmp	r4, r2
 8005814:	d002      	beq.n	800581c <std+0x48>
 8005816:	33d0      	adds	r3, #208	@ 0xd0
 8005818:	429c      	cmp	r4, r3
 800581a:	d105      	bne.n	8005828 <std+0x54>
 800581c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f000 b97a 	b.w	8005b1c <__retarget_lock_init_recursive>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	0800599d 	.word	0x0800599d
 8005830:	080059bf 	.word	0x080059bf
 8005834:	080059f7 	.word	0x080059f7
 8005838:	08005a1b 	.word	0x08005a1b
 800583c:	20000d40 	.word	0x20000d40

08005840 <stdio_exit_handler>:
 8005840:	4a02      	ldr	r2, [pc, #8]	@ (800584c <stdio_exit_handler+0xc>)
 8005842:	4903      	ldr	r1, [pc, #12]	@ (8005850 <stdio_exit_handler+0x10>)
 8005844:	4803      	ldr	r0, [pc, #12]	@ (8005854 <stdio_exit_handler+0x14>)
 8005846:	f000 b869 	b.w	800591c <_fwalk_sglue>
 800584a:	bf00      	nop
 800584c:	20000020 	.word	0x20000020
 8005850:	08007499 	.word	0x08007499
 8005854:	20000030 	.word	0x20000030

08005858 <cleanup_stdio>:
 8005858:	6841      	ldr	r1, [r0, #4]
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <cleanup_stdio+0x34>)
 800585c:	b510      	push	{r4, lr}
 800585e:	4299      	cmp	r1, r3
 8005860:	4604      	mov	r4, r0
 8005862:	d001      	beq.n	8005868 <cleanup_stdio+0x10>
 8005864:	f001 fe18 	bl	8007498 <_fflush_r>
 8005868:	68a1      	ldr	r1, [r4, #8]
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <cleanup_stdio+0x38>)
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <cleanup_stdio+0x1e>
 8005870:	4620      	mov	r0, r4
 8005872:	f001 fe11 	bl	8007498 <_fflush_r>
 8005876:	68e1      	ldr	r1, [r4, #12]
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <cleanup_stdio+0x3c>)
 800587a:	4299      	cmp	r1, r3
 800587c:	d004      	beq.n	8005888 <cleanup_stdio+0x30>
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f001 be08 	b.w	8007498 <_fflush_r>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	20000d40 	.word	0x20000d40
 8005890:	20000da8 	.word	0x20000da8
 8005894:	20000e10 	.word	0x20000e10

08005898 <global_stdio_init.part.0>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <global_stdio_init.part.0+0x30>)
 800589c:	4c0b      	ldr	r4, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x34>)
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <global_stdio_init.part.0+0x38>)
 80058a0:	4620      	mov	r0, r4
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	2104      	movs	r1, #4
 80058a6:	2200      	movs	r2, #0
 80058a8:	f7ff ff94 	bl	80057d4 <std>
 80058ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b0:	2201      	movs	r2, #1
 80058b2:	2109      	movs	r1, #9
 80058b4:	f7ff ff8e 	bl	80057d4 <std>
 80058b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058bc:	2202      	movs	r2, #2
 80058be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff bf86 	b.w	80057d4 <std>
 80058c8:	20000e78 	.word	0x20000e78
 80058cc:	20000d40 	.word	0x20000d40
 80058d0:	08005841 	.word	0x08005841

080058d4 <__sfp_lock_acquire>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__sfp_lock_acquire+0x8>)
 80058d6:	f000 b922 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	20000e81 	.word	0x20000e81

080058e0 <__sfp_lock_release>:
 80058e0:	4801      	ldr	r0, [pc, #4]	@ (80058e8 <__sfp_lock_release+0x8>)
 80058e2:	f000 b91d 	b.w	8005b20 <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	20000e81 	.word	0x20000e81

080058ec <__sinit>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	f7ff fff0 	bl	80058d4 <__sfp_lock_acquire>
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	b11b      	cbz	r3, 8005900 <__sinit+0x14>
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fc:	f7ff bff0 	b.w	80058e0 <__sfp_lock_release>
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <__sinit+0x28>)
 8005902:	6223      	str	r3, [r4, #32]
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x2c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f5      	bne.n	80058f8 <__sinit+0xc>
 800590c:	f7ff ffc4 	bl	8005898 <global_stdio_init.part.0>
 8005910:	e7f2      	b.n	80058f8 <__sinit+0xc>
 8005912:	bf00      	nop
 8005914:	08005859 	.word	0x08005859
 8005918:	20000e78 	.word	0x20000e78

0800591c <_fwalk_sglue>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4607      	mov	r7, r0
 8005922:	4688      	mov	r8, r1
 8005924:	4614      	mov	r4, r2
 8005926:	2600      	movs	r6, #0
 8005928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800592c:	f1b9 0901 	subs.w	r9, r9, #1
 8005930:	d505      	bpl.n	800593e <_fwalk_sglue+0x22>
 8005932:	6824      	ldr	r4, [r4, #0]
 8005934:	2c00      	cmp	r4, #0
 8005936:	d1f7      	bne.n	8005928 <_fwalk_sglue+0xc>
 8005938:	4630      	mov	r0, r6
 800593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <_fwalk_sglue+0x38>
 8005944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	d003      	beq.n	8005954 <_fwalk_sglue+0x38>
 800594c:	4629      	mov	r1, r5
 800594e:	4638      	mov	r0, r7
 8005950:	47c0      	blx	r8
 8005952:	4306      	orrs	r6, r0
 8005954:	3568      	adds	r5, #104	@ 0x68
 8005956:	e7e9      	b.n	800592c <_fwalk_sglue+0x10>

08005958 <siprintf>:
 8005958:	b40e      	push	{r1, r2, r3}
 800595a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800595e:	b510      	push	{r4, lr}
 8005960:	2400      	movs	r4, #0
 8005962:	b09d      	sub	sp, #116	@ 0x74
 8005964:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005966:	9002      	str	r0, [sp, #8]
 8005968:	9006      	str	r0, [sp, #24]
 800596a:	9107      	str	r1, [sp, #28]
 800596c:	9104      	str	r1, [sp, #16]
 800596e:	4809      	ldr	r0, [pc, #36]	@ (8005994 <siprintf+0x3c>)
 8005970:	4909      	ldr	r1, [pc, #36]	@ (8005998 <siprintf+0x40>)
 8005972:	f853 2b04 	ldr.w	r2, [r3], #4
 8005976:	9105      	str	r1, [sp, #20]
 8005978:	6800      	ldr	r0, [r0, #0]
 800597a:	a902      	add	r1, sp, #8
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005980:	f001 fc0e 	bl	80071a0 <_svfiprintf_r>
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	701c      	strb	r4, [r3, #0]
 8005988:	b01d      	add	sp, #116	@ 0x74
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598e:	b003      	add	sp, #12
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000002c 	.word	0x2000002c
 8005998:	ffff0208 	.word	0xffff0208

0800599c <__sread>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	f000 f86c 	bl	8005a80 <_read_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bfab      	itete	ge
 80059ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ae:	89a3      	ldrhlt	r3, [r4, #12]
 80059b0:	181b      	addge	r3, r3, r0
 80059b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059b6:	bfac      	ite	ge
 80059b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ba:	81a3      	strhlt	r3, [r4, #12]
 80059bc:	bd10      	pop	{r4, pc}

080059be <__swrite>:
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	461f      	mov	r7, r3
 80059c4:	898b      	ldrh	r3, [r1, #12]
 80059c6:	4605      	mov	r5, r0
 80059c8:	05db      	lsls	r3, r3, #23
 80059ca:	460c      	mov	r4, r1
 80059cc:	4616      	mov	r6, r2
 80059ce:	d505      	bpl.n	80059dc <__swrite+0x1e>
 80059d0:	2302      	movs	r3, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	f000 f840 	bl	8005a5c <_lseek_r>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	4632      	mov	r2, r6
 80059e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	4628      	mov	r0, r5
 80059e8:	463b      	mov	r3, r7
 80059ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	f000 b857 	b.w	8005aa4 <_write_r>

080059f6 <__sseek>:
 80059f6:	b510      	push	{r4, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fe:	f000 f82d 	bl	8005a5c <_lseek_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	bf15      	itete	ne
 8005a08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a12:	81a3      	strheq	r3, [r4, #12]
 8005a14:	bf18      	it	ne
 8005a16:	81a3      	strhne	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__sclose>:
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 b80d 	b.w	8005a3c <_close_r>

08005a22 <memset>:
 8005a22:	4603      	mov	r3, r0
 8005a24:	4402      	add	r2, r0
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d100      	bne.n	8005a2c <memset+0xa>
 8005a2a:	4770      	bx	lr
 8005a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a30:	e7f9      	b.n	8005a26 <memset+0x4>
	...

08005a34 <_localeconv_r>:
 8005a34:	4800      	ldr	r0, [pc, #0]	@ (8005a38 <_localeconv_r+0x4>)
 8005a36:	4770      	bx	lr
 8005a38:	2000016c 	.word	0x2000016c

08005a3c <_close_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4d05      	ldr	r5, [pc, #20]	@ (8005a58 <_close_r+0x1c>)
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fc fb6d 	bl	8002126 <_close>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_close_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_close_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000e7c 	.word	0x20000e7c

08005a5c <_lseek_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	2200      	movs	r2, #0
 8005a66:	4d05      	ldr	r5, [pc, #20]	@ (8005a7c <_lseek_r+0x20>)
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fc fb7f 	bl	800216e <_lseek>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_lseek_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_lseek_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000e7c 	.word	0x20000e7c

08005a80 <_read_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4d05      	ldr	r5, [pc, #20]	@ (8005aa0 <_read_r+0x20>)
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fc fb10 	bl	80020b4 <_read>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_read_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_read_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000e7c 	.word	0x20000e7c

08005aa4 <_write_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	2200      	movs	r2, #0
 8005aae:	4d05      	ldr	r5, [pc, #20]	@ (8005ac4 <_write_r+0x20>)
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fc fb1b 	bl	80020ee <_write>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_write_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_write_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000e7c 	.word	0x20000e7c

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000002c 	.word	0x2000002c

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	4d0c      	ldr	r5, [pc, #48]	@ (8005b0c <__libc_init_array+0x38>)
 8005ada:	4c0d      	ldr	r4, [pc, #52]	@ (8005b10 <__libc_init_array+0x3c>)
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	f002 f96a 	bl	8007dbc <_init>
 8005ae8:	2600      	movs	r6, #0
 8005aea:	4d0a      	ldr	r5, [pc, #40]	@ (8005b14 <__libc_init_array+0x40>)
 8005aec:	4c0a      	ldr	r4, [pc, #40]	@ (8005b18 <__libc_init_array+0x44>)
 8005aee:	1b64      	subs	r4, r4, r5
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	0800a330 	.word	0x0800a330
 8005b10:	0800a330 	.word	0x0800a330
 8005b14:	0800a330 	.word	0x0800a330
 8005b18:	0800a334 	.word	0x0800a334

08005b1c <__retarget_lock_init_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_acquire_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_release_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <memchr>:
 8005b22:	4603      	mov	r3, r0
 8005b24:	b510      	push	{r4, lr}
 8005b26:	b2c9      	uxtb	r1, r1
 8005b28:	4402      	add	r2, r0
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	d101      	bne.n	8005b34 <memchr+0x12>
 8005b30:	2000      	movs	r0, #0
 8005b32:	e003      	b.n	8005b3c <memchr+0x1a>
 8005b34:	7804      	ldrb	r4, [r0, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	428c      	cmp	r4, r1
 8005b3a:	d1f6      	bne.n	8005b2a <memchr+0x8>
 8005b3c:	bd10      	pop	{r4, pc}

08005b3e <quorem>:
 8005b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b42:	6903      	ldr	r3, [r0, #16]
 8005b44:	690c      	ldr	r4, [r1, #16]
 8005b46:	4607      	mov	r7, r0
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	db7e      	blt.n	8005c4a <quorem+0x10c>
 8005b4c:	3c01      	subs	r4, #1
 8005b4e:	00a3      	lsls	r3, r4, #2
 8005b50:	f100 0514 	add.w	r5, r0, #20
 8005b54:	f101 0814 	add.w	r8, r1, #20
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b74:	d32e      	bcc.n	8005bd4 <quorem+0x96>
 8005b76:	f04f 0a00 	mov.w	sl, #0
 8005b7a:	46c4      	mov	ip, r8
 8005b7c:	46ae      	mov	lr, r5
 8005b7e:	46d3      	mov	fp, sl
 8005b80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b84:	b298      	uxth	r0, r3
 8005b86:	fb06 a000 	mla	r0, r6, r0, sl
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	0c02      	lsrs	r2, r0, #16
 8005b8e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b92:	f8de 2000 	ldr.w	r2, [lr]
 8005b96:	b280      	uxth	r0, r0
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	1a12      	subs	r2, r2, r0
 8005b9c:	445a      	add	r2, fp
 8005b9e:	f8de 0000 	ldr.w	r0, [lr]
 8005ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bb6:	45e1      	cmp	r9, ip
 8005bb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8005bc0:	d2de      	bcs.n	8005b80 <quorem+0x42>
 8005bc2:	9b00      	ldr	r3, [sp, #0]
 8005bc4:	58eb      	ldr	r3, [r5, r3]
 8005bc6:	b92b      	cbnz	r3, 8005bd4 <quorem+0x96>
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	429d      	cmp	r5, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	d32f      	bcc.n	8005c32 <quorem+0xf4>
 8005bd2:	613c      	str	r4, [r7, #16]
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f001 f97f 	bl	8006ed8 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	db25      	blt.n	8005c2a <quorem+0xec>
 8005bde:	4629      	mov	r1, r5
 8005be0:	2000      	movs	r0, #0
 8005be2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be6:	f8d1 c000 	ldr.w	ip, [r1]
 8005bea:	fa1f fe82 	uxth.w	lr, r2
 8005bee:	fa1f f38c 	uxth.w	r3, ip
 8005bf2:	eba3 030e 	sub.w	r3, r3, lr
 8005bf6:	4403      	add	r3, r0
 8005bf8:	0c12      	lsrs	r2, r2, #16
 8005bfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c08:	45c1      	cmp	r9, r8
 8005c0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c0e:	f841 3b04 	str.w	r3, [r1], #4
 8005c12:	d2e6      	bcs.n	8005be2 <quorem+0xa4>
 8005c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c1c:	b922      	cbnz	r2, 8005c28 <quorem+0xea>
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	429d      	cmp	r5, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	d30b      	bcc.n	8005c3e <quorem+0x100>
 8005c26:	613c      	str	r4, [r7, #16]
 8005c28:	3601      	adds	r6, #1
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	b003      	add	sp, #12
 8005c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	d1cb      	bne.n	8005bd2 <quorem+0x94>
 8005c3a:	3c01      	subs	r4, #1
 8005c3c:	e7c6      	b.n	8005bcc <quorem+0x8e>
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	d1ef      	bne.n	8005c26 <quorem+0xe8>
 8005c46:	3c01      	subs	r4, #1
 8005c48:	e7ea      	b.n	8005c20 <quorem+0xe2>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e7ee      	b.n	8005c2c <quorem+0xee>
	...

08005c50 <_dtoa_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4614      	mov	r4, r2
 8005c56:	461d      	mov	r5, r3
 8005c58:	69c7      	ldr	r7, [r0, #28]
 8005c5a:	b097      	sub	sp, #92	@ 0x5c
 8005c5c:	4681      	mov	r9, r0
 8005c5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005c62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c64:	b97f      	cbnz	r7, 8005c86 <_dtoa_r+0x36>
 8005c66:	2010      	movs	r0, #16
 8005c68:	f000 fe0e 	bl	8006888 <malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c72:	b920      	cbnz	r0, 8005c7e <_dtoa_r+0x2e>
 8005c74:	21ef      	movs	r1, #239	@ 0xef
 8005c76:	4bac      	ldr	r3, [pc, #688]	@ (8005f28 <_dtoa_r+0x2d8>)
 8005c78:	48ac      	ldr	r0, [pc, #688]	@ (8005f2c <_dtoa_r+0x2dc>)
 8005c7a:	f001 fc6d 	bl	8007558 <__assert_func>
 8005c7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c82:	6007      	str	r7, [r0, #0]
 8005c84:	60c7      	str	r7, [r0, #12]
 8005c86:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	b159      	cbz	r1, 8005ca6 <_dtoa_r+0x56>
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	2301      	movs	r3, #1
 8005c92:	4093      	lsls	r3, r2
 8005c94:	604a      	str	r2, [r1, #4]
 8005c96:	608b      	str	r3, [r1, #8]
 8005c98:	4648      	mov	r0, r9
 8005c9a:	f000 feeb 	bl	8006a74 <_Bfree>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	1e2b      	subs	r3, r5, #0
 8005ca8:	bfaf      	iteee	ge
 8005caa:	2300      	movge	r3, #0
 8005cac:	2201      	movlt	r2, #1
 8005cae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cb2:	9307      	strlt	r3, [sp, #28]
 8005cb4:	bfa8      	it	ge
 8005cb6:	6033      	strge	r3, [r6, #0]
 8005cb8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8005f30 <_dtoa_r+0x2e0>)
 8005cbe:	bfb8      	it	lt
 8005cc0:	6032      	strlt	r2, [r6, #0]
 8005cc2:	ea33 0308 	bics.w	r3, r3, r8
 8005cc6:	d112      	bne.n	8005cee <_dtoa_r+0x9e>
 8005cc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ccc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cd4:	4323      	orrs	r3, r4
 8005cd6:	f000 855e 	beq.w	8006796 <_dtoa_r+0xb46>
 8005cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f34 <_dtoa_r+0x2e4>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8560 	beq.w	80067a6 <_dtoa_r+0xb56>
 8005ce6:	f10a 0303 	add.w	r3, sl, #3
 8005cea:	f000 bd5a 	b.w	80067a2 <_dtoa_r+0xb52>
 8005cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f7fa ff07 	bl	8000b10 <__aeabi_dcmpeq>
 8005d02:	4607      	mov	r7, r0
 8005d04:	b158      	cbz	r0, 8005d1e <_dtoa_r+0xce>
 8005d06:	2301      	movs	r3, #1
 8005d08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d0e:	b113      	cbz	r3, 8005d16 <_dtoa_r+0xc6>
 8005d10:	4b89      	ldr	r3, [pc, #548]	@ (8005f38 <_dtoa_r+0x2e8>)
 8005d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005f3c <_dtoa_r+0x2ec>
 8005d1a:	f000 bd44 	b.w	80067a6 <_dtoa_r+0xb56>
 8005d1e:	ab14      	add	r3, sp, #80	@ 0x50
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	ab15      	add	r3, sp, #84	@ 0x54
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4648      	mov	r0, r9
 8005d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d2c:	f001 f984 	bl	8007038 <__d2b>
 8005d30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d34:	9003      	str	r0, [sp, #12]
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	d078      	beq.n	8005e2c <_dtoa_r+0x1dc>
 8005d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d50:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d52:	4619      	mov	r1, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	4b7a      	ldr	r3, [pc, #488]	@ (8005f40 <_dtoa_r+0x2f0>)
 8005d58:	f7fa faba 	bl	80002d0 <__aeabi_dsub>
 8005d5c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005f10 <_dtoa_r+0x2c0>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f7fa fc6d 	bl	8000640 <__aeabi_dmul>
 8005d66:	a36c      	add	r3, pc, #432	@ (adr r3, 8005f18 <_dtoa_r+0x2c8>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fab2 	bl	80002d4 <__adddf3>
 8005d70:	4604      	mov	r4, r0
 8005d72:	4630      	mov	r0, r6
 8005d74:	460d      	mov	r5, r1
 8005d76:	f7fa fbf9 	bl	800056c <__aeabi_i2d>
 8005d7a:	a369      	add	r3, pc, #420	@ (adr r3, 8005f20 <_dtoa_r+0x2d0>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fc5e 	bl	8000640 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4620      	mov	r0, r4
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f7fa faa2 	bl	80002d4 <__adddf3>
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	f7fa ff04 	bl	8000ba0 <__aeabi_d2iz>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa febf 	bl	8000b24 <__aeabi_dcmplt>
 8005da6:	b140      	cbz	r0, 8005dba <_dtoa_r+0x16a>
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7fa fbdf 	bl	800056c <__aeabi_i2d>
 8005dae:	4622      	mov	r2, r4
 8005db0:	462b      	mov	r3, r5
 8005db2:	f7fa fead 	bl	8000b10 <__aeabi_dcmpeq>
 8005db6:	b900      	cbnz	r0, 8005dba <_dtoa_r+0x16a>
 8005db8:	3f01      	subs	r7, #1
 8005dba:	2f16      	cmp	r7, #22
 8005dbc:	d854      	bhi.n	8005e68 <_dtoa_r+0x218>
 8005dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dc2:	4b60      	ldr	r3, [pc, #384]	@ (8005f44 <_dtoa_r+0x2f4>)
 8005dc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa feaa 	bl	8000b24 <__aeabi_dcmplt>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d04b      	beq.n	8005e6c <_dtoa_r+0x21c>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	3f01      	subs	r7, #1
 8005dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ddc:	1b9b      	subs	r3, r3, r6
 8005dde:	1e5a      	subs	r2, r3, #1
 8005de0:	bf49      	itett	mi
 8005de2:	f1c3 0301 	rsbmi	r3, r3, #1
 8005de6:	2300      	movpl	r3, #0
 8005de8:	9304      	strmi	r3, [sp, #16]
 8005dea:	2300      	movmi	r3, #0
 8005dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dee:	bf54      	ite	pl
 8005df0:	9304      	strpl	r3, [sp, #16]
 8005df2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005df4:	2f00      	cmp	r7, #0
 8005df6:	db3b      	blt.n	8005e70 <_dtoa_r+0x220>
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	970e      	str	r7, [sp, #56]	@ 0x38
 8005dfc:	443b      	add	r3, r7
 8005dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e00:	2300      	movs	r3, #0
 8005e02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d865      	bhi.n	8005ed6 <_dtoa_r+0x286>
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	bfc4      	itt	gt
 8005e0e:	3b04      	subgt	r3, #4
 8005e10:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005e12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e14:	bfc8      	it	gt
 8005e16:	2400      	movgt	r4, #0
 8005e18:	f1a3 0302 	sub.w	r3, r3, #2
 8005e1c:	bfd8      	it	le
 8005e1e:	2401      	movle	r4, #1
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d864      	bhi.n	8005eee <_dtoa_r+0x29e>
 8005e24:	e8df f003 	tbb	[pc, r3]
 8005e28:	2c385553 	.word	0x2c385553
 8005e2c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e30:	441e      	add	r6, r3
 8005e32:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	bfc1      	itttt	gt
 8005e3a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e3e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e4a:	bfd6      	itet	le
 8005e4c:	f1c3 0320 	rsble	r3, r3, #32
 8005e50:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e54:	fa04 f003 	lslle.w	r0, r4, r3
 8005e58:	f7fa fb78 	bl	800054c <__aeabi_ui2d>
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e62:	3e01      	subs	r6, #1
 8005e64:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e66:	e774      	b.n	8005d52 <_dtoa_r+0x102>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7b5      	b.n	8005dd8 <_dtoa_r+0x188>
 8005e6c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e6e:	e7b4      	b.n	8005dda <_dtoa_r+0x18a>
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	1bdb      	subs	r3, r3, r7
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	427b      	negs	r3, r7
 8005e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e7e:	e7c1      	b.n	8005e04 <_dtoa_r+0x1b4>
 8005e80:	2301      	movs	r3, #1
 8005e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e86:	eb07 0b03 	add.w	fp, r7, r3
 8005e8a:	f10b 0301 	add.w	r3, fp, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	9308      	str	r3, [sp, #32]
 8005e92:	bfb8      	it	lt
 8005e94:	2301      	movlt	r3, #1
 8005e96:	e006      	b.n	8005ea6 <_dtoa_r+0x256>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dd28      	ble.n	8005ef4 <_dtoa_r+0x2a4>
 8005ea2:	469b      	mov	fp, r3
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005eae:	f102 0514 	add.w	r5, r2, #20
 8005eb2:	429d      	cmp	r5, r3
 8005eb4:	d926      	bls.n	8005f04 <_dtoa_r+0x2b4>
 8005eb6:	6041      	str	r1, [r0, #4]
 8005eb8:	4648      	mov	r0, r9
 8005eba:	f000 fd9b 	bl	80069f4 <_Balloc>
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d143      	bne.n	8005f4c <_dtoa_r+0x2fc>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eca:	4b1f      	ldr	r3, [pc, #124]	@ (8005f48 <_dtoa_r+0x2f8>)
 8005ecc:	e6d4      	b.n	8005c78 <_dtoa_r+0x28>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e7e3      	b.n	8005e9a <_dtoa_r+0x24a>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e7d5      	b.n	8005e82 <_dtoa_r+0x232>
 8005ed6:	2401      	movs	r4, #1
 8005ed8:	2300      	movs	r3, #0
 8005eda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005edc:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ede:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2312      	movs	r3, #18
 8005ee6:	f8cd b020 	str.w	fp, [sp, #32]
 8005eea:	9221      	str	r2, [sp, #132]	@ 0x84
 8005eec:	e7db      	b.n	8005ea6 <_dtoa_r+0x256>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ef2:	e7f4      	b.n	8005ede <_dtoa_r+0x28e>
 8005ef4:	f04f 0b01 	mov.w	fp, #1
 8005ef8:	465b      	mov	r3, fp
 8005efa:	f8cd b020 	str.w	fp, [sp, #32]
 8005efe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005f02:	e7d0      	b.n	8005ea6 <_dtoa_r+0x256>
 8005f04:	3101      	adds	r1, #1
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	e7d1      	b.n	8005eae <_dtoa_r+0x25e>
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	636f4361 	.word	0x636f4361
 8005f14:	3fd287a7 	.word	0x3fd287a7
 8005f18:	8b60c8b3 	.word	0x8b60c8b3
 8005f1c:	3fc68a28 	.word	0x3fc68a28
 8005f20:	509f79fb 	.word	0x509f79fb
 8005f24:	3fd34413 	.word	0x3fd34413
 8005f28:	08009fdf 	.word	0x08009fdf
 8005f2c:	08009ff6 	.word	0x08009ff6
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	08009fdb 	.word	0x08009fdb
 8005f38:	08009faf 	.word	0x08009faf
 8005f3c:	08009fae 	.word	0x08009fae
 8005f40:	3ff80000 	.word	0x3ff80000
 8005f44:	0800a148 	.word	0x0800a148
 8005f48:	0800a04e 	.word	0x0800a04e
 8005f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f50:	6018      	str	r0, [r3, #0]
 8005f52:	9b08      	ldr	r3, [sp, #32]
 8005f54:	2b0e      	cmp	r3, #14
 8005f56:	f200 80a1 	bhi.w	800609c <_dtoa_r+0x44c>
 8005f5a:	2c00      	cmp	r4, #0
 8005f5c:	f000 809e 	beq.w	800609c <_dtoa_r+0x44c>
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	dd33      	ble.n	8005fcc <_dtoa_r+0x37c>
 8005f64:	4b9c      	ldr	r3, [pc, #624]	@ (80061d8 <_dtoa_r+0x588>)
 8005f66:	f007 020f 	and.w	r2, r7, #15
 8005f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f6e:	05f8      	lsls	r0, r7, #23
 8005f70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f74:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005f78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f7c:	d516      	bpl.n	8005fac <_dtoa_r+0x35c>
 8005f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f82:	4b96      	ldr	r3, [pc, #600]	@ (80061dc <_dtoa_r+0x58c>)
 8005f84:	2603      	movs	r6, #3
 8005f86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f8a:	f7fa fc83 	bl	8000894 <__aeabi_ddiv>
 8005f8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f92:	f004 040f 	and.w	r4, r4, #15
 8005f96:	4d91      	ldr	r5, [pc, #580]	@ (80061dc <_dtoa_r+0x58c>)
 8005f98:	b954      	cbnz	r4, 8005fb0 <_dtoa_r+0x360>
 8005f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa2:	f7fa fc77 	bl	8000894 <__aeabi_ddiv>
 8005fa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005faa:	e028      	b.n	8005ffe <_dtoa_r+0x3ae>
 8005fac:	2602      	movs	r6, #2
 8005fae:	e7f2      	b.n	8005f96 <_dtoa_r+0x346>
 8005fb0:	07e1      	lsls	r1, r4, #31
 8005fb2:	d508      	bpl.n	8005fc6 <_dtoa_r+0x376>
 8005fb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fbc:	f7fa fb40 	bl	8000640 <__aeabi_dmul>
 8005fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	1064      	asrs	r4, r4, #1
 8005fc8:	3508      	adds	r5, #8
 8005fca:	e7e5      	b.n	8005f98 <_dtoa_r+0x348>
 8005fcc:	f000 80af 	beq.w	800612e <_dtoa_r+0x4de>
 8005fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fd4:	427c      	negs	r4, r7
 8005fd6:	4b80      	ldr	r3, [pc, #512]	@ (80061d8 <_dtoa_r+0x588>)
 8005fd8:	f004 020f 	and.w	r2, r4, #15
 8005fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fb2c 	bl	8000640 <__aeabi_dmul>
 8005fe8:	2602      	movs	r6, #2
 8005fea:	2300      	movs	r3, #0
 8005fec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ff0:	4d7a      	ldr	r5, [pc, #488]	@ (80061dc <_dtoa_r+0x58c>)
 8005ff2:	1124      	asrs	r4, r4, #4
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	f040 808f 	bne.w	8006118 <_dtoa_r+0x4c8>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1d3      	bne.n	8005fa6 <_dtoa_r+0x356>
 8005ffe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8094 	beq.w	8006132 <_dtoa_r+0x4e2>
 800600a:	2200      	movs	r2, #0
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	4b73      	ldr	r3, [pc, #460]	@ (80061e0 <_dtoa_r+0x590>)
 8006012:	f7fa fd87 	bl	8000b24 <__aeabi_dcmplt>
 8006016:	2800      	cmp	r0, #0
 8006018:	f000 808b 	beq.w	8006132 <_dtoa_r+0x4e2>
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8087 	beq.w	8006132 <_dtoa_r+0x4e2>
 8006024:	f1bb 0f00 	cmp.w	fp, #0
 8006028:	dd34      	ble.n	8006094 <_dtoa_r+0x444>
 800602a:	4620      	mov	r0, r4
 800602c:	2200      	movs	r2, #0
 800602e:	4629      	mov	r1, r5
 8006030:	4b6c      	ldr	r3, [pc, #432]	@ (80061e4 <_dtoa_r+0x594>)
 8006032:	f7fa fb05 	bl	8000640 <__aeabi_dmul>
 8006036:	465c      	mov	r4, fp
 8006038:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800603c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006040:	3601      	adds	r6, #1
 8006042:	4630      	mov	r0, r6
 8006044:	f7fa fa92 	bl	800056c <__aeabi_i2d>
 8006048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800604c:	f7fa faf8 	bl	8000640 <__aeabi_dmul>
 8006050:	2200      	movs	r2, #0
 8006052:	4b65      	ldr	r3, [pc, #404]	@ (80061e8 <_dtoa_r+0x598>)
 8006054:	f7fa f93e 	bl	80002d4 <__adddf3>
 8006058:	4605      	mov	r5, r0
 800605a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800605e:	2c00      	cmp	r4, #0
 8006060:	d16a      	bne.n	8006138 <_dtoa_r+0x4e8>
 8006062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006066:	2200      	movs	r2, #0
 8006068:	4b60      	ldr	r3, [pc, #384]	@ (80061ec <_dtoa_r+0x59c>)
 800606a:	f7fa f931 	bl	80002d0 <__aeabi_dsub>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006076:	462a      	mov	r2, r5
 8006078:	4633      	mov	r3, r6
 800607a:	f7fa fd71 	bl	8000b60 <__aeabi_dcmpgt>
 800607e:	2800      	cmp	r0, #0
 8006080:	f040 8298 	bne.w	80065b4 <_dtoa_r+0x964>
 8006084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006088:	462a      	mov	r2, r5
 800608a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800608e:	f7fa fd49 	bl	8000b24 <__aeabi_dcmplt>
 8006092:	bb38      	cbnz	r0, 80060e4 <_dtoa_r+0x494>
 8006094:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006098:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800609c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f2c0 8157 	blt.w	8006352 <_dtoa_r+0x702>
 80060a4:	2f0e      	cmp	r7, #14
 80060a6:	f300 8154 	bgt.w	8006352 <_dtoa_r+0x702>
 80060aa:	4b4b      	ldr	r3, [pc, #300]	@ (80061d8 <_dtoa_r+0x588>)
 80060ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f280 80e5 	bge.w	800628a <_dtoa_r+0x63a>
 80060c0:	9b08      	ldr	r3, [sp, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f300 80e1 	bgt.w	800628a <_dtoa_r+0x63a>
 80060c8:	d10c      	bne.n	80060e4 <_dtoa_r+0x494>
 80060ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ce:	2200      	movs	r2, #0
 80060d0:	4b46      	ldr	r3, [pc, #280]	@ (80061ec <_dtoa_r+0x59c>)
 80060d2:	f7fa fab5 	bl	8000640 <__aeabi_dmul>
 80060d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060da:	f7fa fd37 	bl	8000b4c <__aeabi_dcmpge>
 80060de:	2800      	cmp	r0, #0
 80060e0:	f000 8266 	beq.w	80065b0 <_dtoa_r+0x960>
 80060e4:	2400      	movs	r4, #0
 80060e6:	4625      	mov	r5, r4
 80060e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ea:	4656      	mov	r6, sl
 80060ec:	ea6f 0803 	mvn.w	r8, r3
 80060f0:	2700      	movs	r7, #0
 80060f2:	4621      	mov	r1, r4
 80060f4:	4648      	mov	r0, r9
 80060f6:	f000 fcbd 	bl	8006a74 <_Bfree>
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	f000 80bd 	beq.w	800627a <_dtoa_r+0x62a>
 8006100:	b12f      	cbz	r7, 800610e <_dtoa_r+0x4be>
 8006102:	42af      	cmp	r7, r5
 8006104:	d003      	beq.n	800610e <_dtoa_r+0x4be>
 8006106:	4639      	mov	r1, r7
 8006108:	4648      	mov	r0, r9
 800610a:	f000 fcb3 	bl	8006a74 <_Bfree>
 800610e:	4629      	mov	r1, r5
 8006110:	4648      	mov	r0, r9
 8006112:	f000 fcaf 	bl	8006a74 <_Bfree>
 8006116:	e0b0      	b.n	800627a <_dtoa_r+0x62a>
 8006118:	07e2      	lsls	r2, r4, #31
 800611a:	d505      	bpl.n	8006128 <_dtoa_r+0x4d8>
 800611c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006120:	f7fa fa8e 	bl	8000640 <__aeabi_dmul>
 8006124:	2301      	movs	r3, #1
 8006126:	3601      	adds	r6, #1
 8006128:	1064      	asrs	r4, r4, #1
 800612a:	3508      	adds	r5, #8
 800612c:	e762      	b.n	8005ff4 <_dtoa_r+0x3a4>
 800612e:	2602      	movs	r6, #2
 8006130:	e765      	b.n	8005ffe <_dtoa_r+0x3ae>
 8006132:	46b8      	mov	r8, r7
 8006134:	9c08      	ldr	r4, [sp, #32]
 8006136:	e784      	b.n	8006042 <_dtoa_r+0x3f2>
 8006138:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <_dtoa_r+0x588>)
 800613a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800613c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006140:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006144:	4454      	add	r4, sl
 8006146:	2900      	cmp	r1, #0
 8006148:	d054      	beq.n	80061f4 <_dtoa_r+0x5a4>
 800614a:	2000      	movs	r0, #0
 800614c:	4928      	ldr	r1, [pc, #160]	@ (80061f0 <_dtoa_r+0x5a0>)
 800614e:	f7fa fba1 	bl	8000894 <__aeabi_ddiv>
 8006152:	4633      	mov	r3, r6
 8006154:	462a      	mov	r2, r5
 8006156:	f7fa f8bb 	bl	80002d0 <__aeabi_dsub>
 800615a:	4656      	mov	r6, sl
 800615c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006164:	f7fa fd1c 	bl	8000ba0 <__aeabi_d2iz>
 8006168:	4605      	mov	r5, r0
 800616a:	f7fa f9ff 	bl	800056c <__aeabi_i2d>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006176:	f7fa f8ab 	bl	80002d0 <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	3530      	adds	r5, #48	@ 0x30
 8006180:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006188:	f806 5b01 	strb.w	r5, [r6], #1
 800618c:	f7fa fcca 	bl	8000b24 <__aeabi_dcmplt>
 8006190:	2800      	cmp	r0, #0
 8006192:	d172      	bne.n	800627a <_dtoa_r+0x62a>
 8006194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006198:	2000      	movs	r0, #0
 800619a:	4911      	ldr	r1, [pc, #68]	@ (80061e0 <_dtoa_r+0x590>)
 800619c:	f7fa f898 	bl	80002d0 <__aeabi_dsub>
 80061a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a4:	f7fa fcbe 	bl	8000b24 <__aeabi_dcmplt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	f040 80b4 	bne.w	8006316 <_dtoa_r+0x6c6>
 80061ae:	42a6      	cmp	r6, r4
 80061b0:	f43f af70 	beq.w	8006094 <_dtoa_r+0x444>
 80061b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061b8:	2200      	movs	r2, #0
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <_dtoa_r+0x594>)
 80061bc:	f7fa fa40 	bl	8000640 <__aeabi_dmul>
 80061c0:	2200      	movs	r2, #0
 80061c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <_dtoa_r+0x594>)
 80061cc:	f7fa fa38 	bl	8000640 <__aeabi_dmul>
 80061d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061d4:	e7c4      	b.n	8006160 <_dtoa_r+0x510>
 80061d6:	bf00      	nop
 80061d8:	0800a148 	.word	0x0800a148
 80061dc:	0800a120 	.word	0x0800a120
 80061e0:	3ff00000 	.word	0x3ff00000
 80061e4:	40240000 	.word	0x40240000
 80061e8:	401c0000 	.word	0x401c0000
 80061ec:	40140000 	.word	0x40140000
 80061f0:	3fe00000 	.word	0x3fe00000
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7fa fa22 	bl	8000640 <__aeabi_dmul>
 80061fc:	4656      	mov	r6, sl
 80061fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006202:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006208:	f7fa fcca 	bl	8000ba0 <__aeabi_d2iz>
 800620c:	4605      	mov	r5, r0
 800620e:	f7fa f9ad 	bl	800056c <__aeabi_i2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800621a:	f7fa f859 	bl	80002d0 <__aeabi_dsub>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	3530      	adds	r5, #48	@ 0x30
 8006224:	f806 5b01 	strb.w	r5, [r6], #1
 8006228:	42a6      	cmp	r6, r4
 800622a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	d124      	bne.n	800627e <_dtoa_r+0x62e>
 8006234:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006238:	4bae      	ldr	r3, [pc, #696]	@ (80064f4 <_dtoa_r+0x8a4>)
 800623a:	f7fa f84b 	bl	80002d4 <__adddf3>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006246:	f7fa fc8b 	bl	8000b60 <__aeabi_dcmpgt>
 800624a:	2800      	cmp	r0, #0
 800624c:	d163      	bne.n	8006316 <_dtoa_r+0x6c6>
 800624e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006252:	2000      	movs	r0, #0
 8006254:	49a7      	ldr	r1, [pc, #668]	@ (80064f4 <_dtoa_r+0x8a4>)
 8006256:	f7fa f83b 	bl	80002d0 <__aeabi_dsub>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006262:	f7fa fc5f 	bl	8000b24 <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	f43f af14 	beq.w	8006094 <_dtoa_r+0x444>
 800626c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800626e:	1e73      	subs	r3, r6, #1
 8006270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006272:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006276:	2b30      	cmp	r3, #48	@ 0x30
 8006278:	d0f8      	beq.n	800626c <_dtoa_r+0x61c>
 800627a:	4647      	mov	r7, r8
 800627c:	e03b      	b.n	80062f6 <_dtoa_r+0x6a6>
 800627e:	4b9e      	ldr	r3, [pc, #632]	@ (80064f8 <_dtoa_r+0x8a8>)
 8006280:	f7fa f9de 	bl	8000640 <__aeabi_dmul>
 8006284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006288:	e7bc      	b.n	8006204 <_dtoa_r+0x5b4>
 800628a:	4656      	mov	r6, sl
 800628c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006294:	4620      	mov	r0, r4
 8006296:	4629      	mov	r1, r5
 8006298:	f7fa fafc 	bl	8000894 <__aeabi_ddiv>
 800629c:	f7fa fc80 	bl	8000ba0 <__aeabi_d2iz>
 80062a0:	4680      	mov	r8, r0
 80062a2:	f7fa f963 	bl	800056c <__aeabi_i2d>
 80062a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062aa:	f7fa f9c9 	bl	8000640 <__aeabi_dmul>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7fa f80b 	bl	80002d0 <__aeabi_dsub>
 80062ba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062be:	9d08      	ldr	r5, [sp, #32]
 80062c0:	f806 4b01 	strb.w	r4, [r6], #1
 80062c4:	eba6 040a 	sub.w	r4, r6, sl
 80062c8:	42a5      	cmp	r5, r4
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	d133      	bne.n	8006338 <_dtoa_r+0x6e8>
 80062d0:	f7fa f800 	bl	80002d4 <__adddf3>
 80062d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d8:	4604      	mov	r4, r0
 80062da:	460d      	mov	r5, r1
 80062dc:	f7fa fc40 	bl	8000b60 <__aeabi_dcmpgt>
 80062e0:	b9c0      	cbnz	r0, 8006314 <_dtoa_r+0x6c4>
 80062e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa fc11 	bl	8000b10 <__aeabi_dcmpeq>
 80062ee:	b110      	cbz	r0, 80062f6 <_dtoa_r+0x6a6>
 80062f0:	f018 0f01 	tst.w	r8, #1
 80062f4:	d10e      	bne.n	8006314 <_dtoa_r+0x6c4>
 80062f6:	4648      	mov	r0, r9
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	f000 fbbb 	bl	8006a74 <_Bfree>
 80062fe:	2300      	movs	r3, #0
 8006300:	7033      	strb	r3, [r6, #0]
 8006302:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006304:	3701      	adds	r7, #1
 8006306:	601f      	str	r7, [r3, #0]
 8006308:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 824b 	beq.w	80067a6 <_dtoa_r+0xb56>
 8006310:	601e      	str	r6, [r3, #0]
 8006312:	e248      	b.n	80067a6 <_dtoa_r+0xb56>
 8006314:	46b8      	mov	r8, r7
 8006316:	4633      	mov	r3, r6
 8006318:	461e      	mov	r6, r3
 800631a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631e:	2a39      	cmp	r2, #57	@ 0x39
 8006320:	d106      	bne.n	8006330 <_dtoa_r+0x6e0>
 8006322:	459a      	cmp	sl, r3
 8006324:	d1f8      	bne.n	8006318 <_dtoa_r+0x6c8>
 8006326:	2230      	movs	r2, #48	@ 0x30
 8006328:	f108 0801 	add.w	r8, r8, #1
 800632c:	f88a 2000 	strb.w	r2, [sl]
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	3201      	adds	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e7a0      	b.n	800627a <_dtoa_r+0x62a>
 8006338:	2200      	movs	r2, #0
 800633a:	4b6f      	ldr	r3, [pc, #444]	@ (80064f8 <_dtoa_r+0x8a8>)
 800633c:	f7fa f980 	bl	8000640 <__aeabi_dmul>
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4604      	mov	r4, r0
 8006346:	460d      	mov	r5, r1
 8006348:	f7fa fbe2 	bl	8000b10 <__aeabi_dcmpeq>
 800634c:	2800      	cmp	r0, #0
 800634e:	d09f      	beq.n	8006290 <_dtoa_r+0x640>
 8006350:	e7d1      	b.n	80062f6 <_dtoa_r+0x6a6>
 8006352:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006354:	2a00      	cmp	r2, #0
 8006356:	f000 80ea 	beq.w	800652e <_dtoa_r+0x8de>
 800635a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800635c:	2a01      	cmp	r2, #1
 800635e:	f300 80cd 	bgt.w	80064fc <_dtoa_r+0x8ac>
 8006362:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006364:	2a00      	cmp	r2, #0
 8006366:	f000 80c1 	beq.w	80064ec <_dtoa_r+0x89c>
 800636a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800636e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006370:	9e04      	ldr	r6, [sp, #16]
 8006372:	9a04      	ldr	r2, [sp, #16]
 8006374:	2101      	movs	r1, #1
 8006376:	441a      	add	r2, r3
 8006378:	9204      	str	r2, [sp, #16]
 800637a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800637c:	4648      	mov	r0, r9
 800637e:	441a      	add	r2, r3
 8006380:	9209      	str	r2, [sp, #36]	@ 0x24
 8006382:	f000 fc2b 	bl	8006bdc <__i2b>
 8006386:	4605      	mov	r5, r0
 8006388:	b166      	cbz	r6, 80063a4 <_dtoa_r+0x754>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	dd09      	ble.n	80063a4 <_dtoa_r+0x754>
 8006390:	42b3      	cmp	r3, r6
 8006392:	bfa8      	it	ge
 8006394:	4633      	movge	r3, r6
 8006396:	9a04      	ldr	r2, [sp, #16]
 8006398:	1af6      	subs	r6, r6, r3
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	9204      	str	r2, [sp, #16]
 800639e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a6:	b30b      	cbz	r3, 80063ec <_dtoa_r+0x79c>
 80063a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80c6 	beq.w	800653c <_dtoa_r+0x8ec>
 80063b0:	2c00      	cmp	r4, #0
 80063b2:	f000 80c0 	beq.w	8006536 <_dtoa_r+0x8e6>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4622      	mov	r2, r4
 80063ba:	4648      	mov	r0, r9
 80063bc:	f000 fcc6 	bl	8006d4c <__pow5mult>
 80063c0:	9a03      	ldr	r2, [sp, #12]
 80063c2:	4601      	mov	r1, r0
 80063c4:	4605      	mov	r5, r0
 80063c6:	4648      	mov	r0, r9
 80063c8:	f000 fc1e 	bl	8006c08 <__multiply>
 80063cc:	9903      	ldr	r1, [sp, #12]
 80063ce:	4680      	mov	r8, r0
 80063d0:	4648      	mov	r0, r9
 80063d2:	f000 fb4f 	bl	8006a74 <_Bfree>
 80063d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d8:	1b1b      	subs	r3, r3, r4
 80063da:	930a      	str	r3, [sp, #40]	@ 0x28
 80063dc:	f000 80b1 	beq.w	8006542 <_dtoa_r+0x8f2>
 80063e0:	4641      	mov	r1, r8
 80063e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063e4:	4648      	mov	r0, r9
 80063e6:	f000 fcb1 	bl	8006d4c <__pow5mult>
 80063ea:	9003      	str	r0, [sp, #12]
 80063ec:	2101      	movs	r1, #1
 80063ee:	4648      	mov	r0, r9
 80063f0:	f000 fbf4 	bl	8006bdc <__i2b>
 80063f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063f6:	4604      	mov	r4, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 81d8 	beq.w	80067ae <_dtoa_r+0xb5e>
 80063fe:	461a      	mov	r2, r3
 8006400:	4601      	mov	r1, r0
 8006402:	4648      	mov	r0, r9
 8006404:	f000 fca2 	bl	8006d4c <__pow5mult>
 8006408:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800640a:	4604      	mov	r4, r0
 800640c:	2b01      	cmp	r3, #1
 800640e:	f300 809f 	bgt.w	8006550 <_dtoa_r+0x900>
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 8097 	bne.w	8006548 <_dtoa_r+0x8f8>
 800641a:	9b07      	ldr	r3, [sp, #28]
 800641c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8093 	bne.w	800654c <_dtoa_r+0x8fc>
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	051b      	lsls	r3, r3, #20
 8006430:	b133      	cbz	r3, 8006440 <_dtoa_r+0x7f0>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	3301      	adds	r3, #1
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643a:	3301      	adds	r3, #1
 800643c:	9309      	str	r3, [sp, #36]	@ 0x24
 800643e:	2301      	movs	r3, #1
 8006440:	930a      	str	r3, [sp, #40]	@ 0x28
 8006442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 81b8 	beq.w	80067ba <_dtoa_r+0xb6a>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006450:	6918      	ldr	r0, [r3, #16]
 8006452:	f000 fb77 	bl	8006b44 <__hi0bits>
 8006456:	f1c0 0020 	rsb	r0, r0, #32
 800645a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800645c:	4418      	add	r0, r3
 800645e:	f010 001f 	ands.w	r0, r0, #31
 8006462:	f000 8082 	beq.w	800656a <_dtoa_r+0x91a>
 8006466:	f1c0 0320 	rsb	r3, r0, #32
 800646a:	2b04      	cmp	r3, #4
 800646c:	dd73      	ble.n	8006556 <_dtoa_r+0x906>
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	f1c0 001c 	rsb	r0, r0, #28
 8006474:	4403      	add	r3, r0
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647a:	4406      	add	r6, r0
 800647c:	4403      	add	r3, r0
 800647e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd05      	ble.n	8006492 <_dtoa_r+0x842>
 8006486:	461a      	mov	r2, r3
 8006488:	4648      	mov	r0, r9
 800648a:	9903      	ldr	r1, [sp, #12]
 800648c:	f000 fcb8 	bl	8006e00 <__lshift>
 8006490:	9003      	str	r0, [sp, #12]
 8006492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	dd05      	ble.n	80064a4 <_dtoa_r+0x854>
 8006498:	4621      	mov	r1, r4
 800649a:	461a      	mov	r2, r3
 800649c:	4648      	mov	r0, r9
 800649e:	f000 fcaf 	bl	8006e00 <__lshift>
 80064a2:	4604      	mov	r4, r0
 80064a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d061      	beq.n	800656e <_dtoa_r+0x91e>
 80064aa:	4621      	mov	r1, r4
 80064ac:	9803      	ldr	r0, [sp, #12]
 80064ae:	f000 fd13 	bl	8006ed8 <__mcmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	da5b      	bge.n	800656e <_dtoa_r+0x91e>
 80064b6:	2300      	movs	r3, #0
 80064b8:	220a      	movs	r2, #10
 80064ba:	4648      	mov	r0, r9
 80064bc:	9903      	ldr	r1, [sp, #12]
 80064be:	f000 fafb 	bl	8006ab8 <__multadd>
 80064c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80064c8:	9003      	str	r0, [sp, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8177 	beq.w	80067be <_dtoa_r+0xb6e>
 80064d0:	4629      	mov	r1, r5
 80064d2:	2300      	movs	r3, #0
 80064d4:	220a      	movs	r2, #10
 80064d6:	4648      	mov	r0, r9
 80064d8:	f000 faee 	bl	8006ab8 <__multadd>
 80064dc:	f1bb 0f00 	cmp.w	fp, #0
 80064e0:	4605      	mov	r5, r0
 80064e2:	dc6f      	bgt.n	80065c4 <_dtoa_r+0x974>
 80064e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	dc49      	bgt.n	800657e <_dtoa_r+0x92e>
 80064ea:	e06b      	b.n	80065c4 <_dtoa_r+0x974>
 80064ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064f2:	e73c      	b.n	800636e <_dtoa_r+0x71e>
 80064f4:	3fe00000 	.word	0x3fe00000
 80064f8:	40240000 	.word	0x40240000
 80064fc:	9b08      	ldr	r3, [sp, #32]
 80064fe:	1e5c      	subs	r4, r3, #1
 8006500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006502:	42a3      	cmp	r3, r4
 8006504:	db09      	blt.n	800651a <_dtoa_r+0x8ca>
 8006506:	1b1c      	subs	r4, r3, r4
 8006508:	9b08      	ldr	r3, [sp, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f6bf af30 	bge.w	8006370 <_dtoa_r+0x720>
 8006510:	9b04      	ldr	r3, [sp, #16]
 8006512:	9a08      	ldr	r2, [sp, #32]
 8006514:	1a9e      	subs	r6, r3, r2
 8006516:	2300      	movs	r3, #0
 8006518:	e72b      	b.n	8006372 <_dtoa_r+0x722>
 800651a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800651c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800651e:	1ae3      	subs	r3, r4, r3
 8006520:	441a      	add	r2, r3
 8006522:	940a      	str	r4, [sp, #40]	@ 0x28
 8006524:	9e04      	ldr	r6, [sp, #16]
 8006526:	2400      	movs	r4, #0
 8006528:	9b08      	ldr	r3, [sp, #32]
 800652a:	920e      	str	r2, [sp, #56]	@ 0x38
 800652c:	e721      	b.n	8006372 <_dtoa_r+0x722>
 800652e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006530:	9e04      	ldr	r6, [sp, #16]
 8006532:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006534:	e728      	b.n	8006388 <_dtoa_r+0x738>
 8006536:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800653a:	e751      	b.n	80063e0 <_dtoa_r+0x790>
 800653c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800653e:	9903      	ldr	r1, [sp, #12]
 8006540:	e750      	b.n	80063e4 <_dtoa_r+0x794>
 8006542:	f8cd 800c 	str.w	r8, [sp, #12]
 8006546:	e751      	b.n	80063ec <_dtoa_r+0x79c>
 8006548:	2300      	movs	r3, #0
 800654a:	e779      	b.n	8006440 <_dtoa_r+0x7f0>
 800654c:	9b06      	ldr	r3, [sp, #24]
 800654e:	e777      	b.n	8006440 <_dtoa_r+0x7f0>
 8006550:	2300      	movs	r3, #0
 8006552:	930a      	str	r3, [sp, #40]	@ 0x28
 8006554:	e779      	b.n	800644a <_dtoa_r+0x7fa>
 8006556:	d093      	beq.n	8006480 <_dtoa_r+0x830>
 8006558:	9a04      	ldr	r2, [sp, #16]
 800655a:	331c      	adds	r3, #28
 800655c:	441a      	add	r2, r3
 800655e:	9204      	str	r2, [sp, #16]
 8006560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006562:	441e      	add	r6, r3
 8006564:	441a      	add	r2, r3
 8006566:	9209      	str	r2, [sp, #36]	@ 0x24
 8006568:	e78a      	b.n	8006480 <_dtoa_r+0x830>
 800656a:	4603      	mov	r3, r0
 800656c:	e7f4      	b.n	8006558 <_dtoa_r+0x908>
 800656e:	9b08      	ldr	r3, [sp, #32]
 8006570:	46b8      	mov	r8, r7
 8006572:	2b00      	cmp	r3, #0
 8006574:	dc20      	bgt.n	80065b8 <_dtoa_r+0x968>
 8006576:	469b      	mov	fp, r3
 8006578:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800657a:	2b02      	cmp	r3, #2
 800657c:	dd1e      	ble.n	80065bc <_dtoa_r+0x96c>
 800657e:	f1bb 0f00 	cmp.w	fp, #0
 8006582:	f47f adb1 	bne.w	80060e8 <_dtoa_r+0x498>
 8006586:	4621      	mov	r1, r4
 8006588:	465b      	mov	r3, fp
 800658a:	2205      	movs	r2, #5
 800658c:	4648      	mov	r0, r9
 800658e:	f000 fa93 	bl	8006ab8 <__multadd>
 8006592:	4601      	mov	r1, r0
 8006594:	4604      	mov	r4, r0
 8006596:	9803      	ldr	r0, [sp, #12]
 8006598:	f000 fc9e 	bl	8006ed8 <__mcmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	f77f ada3 	ble.w	80060e8 <_dtoa_r+0x498>
 80065a2:	4656      	mov	r6, sl
 80065a4:	2331      	movs	r3, #49	@ 0x31
 80065a6:	f108 0801 	add.w	r8, r8, #1
 80065aa:	f806 3b01 	strb.w	r3, [r6], #1
 80065ae:	e59f      	b.n	80060f0 <_dtoa_r+0x4a0>
 80065b0:	46b8      	mov	r8, r7
 80065b2:	9c08      	ldr	r4, [sp, #32]
 80065b4:	4625      	mov	r5, r4
 80065b6:	e7f4      	b.n	80065a2 <_dtoa_r+0x952>
 80065b8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80065bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8101 	beq.w	80067c6 <_dtoa_r+0xb76>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	dd05      	ble.n	80065d4 <_dtoa_r+0x984>
 80065c8:	4629      	mov	r1, r5
 80065ca:	4632      	mov	r2, r6
 80065cc:	4648      	mov	r0, r9
 80065ce:	f000 fc17 	bl	8006e00 <__lshift>
 80065d2:	4605      	mov	r5, r0
 80065d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d05c      	beq.n	8006694 <_dtoa_r+0xa44>
 80065da:	4648      	mov	r0, r9
 80065dc:	6869      	ldr	r1, [r5, #4]
 80065de:	f000 fa09 	bl	80069f4 <_Balloc>
 80065e2:	4606      	mov	r6, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <_dtoa_r+0x9a2>
 80065e6:	4602      	mov	r2, r0
 80065e8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065ec:	4b80      	ldr	r3, [pc, #512]	@ (80067f0 <_dtoa_r+0xba0>)
 80065ee:	f7ff bb43 	b.w	8005c78 <_dtoa_r+0x28>
 80065f2:	692a      	ldr	r2, [r5, #16]
 80065f4:	f105 010c 	add.w	r1, r5, #12
 80065f8:	3202      	adds	r2, #2
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	300c      	adds	r0, #12
 80065fe:	f000 ff9d 	bl	800753c <memcpy>
 8006602:	2201      	movs	r2, #1
 8006604:	4631      	mov	r1, r6
 8006606:	4648      	mov	r0, r9
 8006608:	f000 fbfa 	bl	8006e00 <__lshift>
 800660c:	462f      	mov	r7, r5
 800660e:	4605      	mov	r5, r0
 8006610:	f10a 0301 	add.w	r3, sl, #1
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	eb0a 030b 	add.w	r3, sl, fp
 800661a:	930a      	str	r3, [sp, #40]	@ 0x28
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	9309      	str	r3, [sp, #36]	@ 0x24
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	4621      	mov	r1, r4
 8006628:	9803      	ldr	r0, [sp, #12]
 800662a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800662e:	f7ff fa86 	bl	8005b3e <quorem>
 8006632:	4603      	mov	r3, r0
 8006634:	4639      	mov	r1, r7
 8006636:	3330      	adds	r3, #48	@ 0x30
 8006638:	9006      	str	r0, [sp, #24]
 800663a:	9803      	ldr	r0, [sp, #12]
 800663c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800663e:	f000 fc4b 	bl	8006ed8 <__mcmp>
 8006642:	462a      	mov	r2, r5
 8006644:	9008      	str	r0, [sp, #32]
 8006646:	4621      	mov	r1, r4
 8006648:	4648      	mov	r0, r9
 800664a:	f000 fc61 	bl	8006f10 <__mdiff>
 800664e:	68c2      	ldr	r2, [r0, #12]
 8006650:	4606      	mov	r6, r0
 8006652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006654:	bb02      	cbnz	r2, 8006698 <_dtoa_r+0xa48>
 8006656:	4601      	mov	r1, r0
 8006658:	9803      	ldr	r0, [sp, #12]
 800665a:	f000 fc3d 	bl	8006ed8 <__mcmp>
 800665e:	4602      	mov	r2, r0
 8006660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006662:	4631      	mov	r1, r6
 8006664:	4648      	mov	r0, r9
 8006666:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800666a:	f000 fa03 	bl	8006a74 <_Bfree>
 800666e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006672:	9e04      	ldr	r6, [sp, #16]
 8006674:	ea42 0103 	orr.w	r1, r2, r3
 8006678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800667a:	4319      	orrs	r1, r3
 800667c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800667e:	d10d      	bne.n	800669c <_dtoa_r+0xa4c>
 8006680:	2b39      	cmp	r3, #57	@ 0x39
 8006682:	d027      	beq.n	80066d4 <_dtoa_r+0xa84>
 8006684:	9a08      	ldr	r2, [sp, #32]
 8006686:	2a00      	cmp	r2, #0
 8006688:	dd01      	ble.n	800668e <_dtoa_r+0xa3e>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	3331      	adds	r3, #49	@ 0x31
 800668e:	f88b 3000 	strb.w	r3, [fp]
 8006692:	e52e      	b.n	80060f2 <_dtoa_r+0x4a2>
 8006694:	4628      	mov	r0, r5
 8006696:	e7b9      	b.n	800660c <_dtoa_r+0x9bc>
 8006698:	2201      	movs	r2, #1
 800669a:	e7e2      	b.n	8006662 <_dtoa_r+0xa12>
 800669c:	9908      	ldr	r1, [sp, #32]
 800669e:	2900      	cmp	r1, #0
 80066a0:	db04      	blt.n	80066ac <_dtoa_r+0xa5c>
 80066a2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80066a4:	4301      	orrs	r1, r0
 80066a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066a8:	4301      	orrs	r1, r0
 80066aa:	d120      	bne.n	80066ee <_dtoa_r+0xa9e>
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	ddee      	ble.n	800668e <_dtoa_r+0xa3e>
 80066b0:	2201      	movs	r2, #1
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	4648      	mov	r0, r9
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	f000 fba2 	bl	8006e00 <__lshift>
 80066bc:	4621      	mov	r1, r4
 80066be:	9003      	str	r0, [sp, #12]
 80066c0:	f000 fc0a 	bl	8006ed8 <__mcmp>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	dc02      	bgt.n	80066d0 <_dtoa_r+0xa80>
 80066ca:	d1e0      	bne.n	800668e <_dtoa_r+0xa3e>
 80066cc:	07da      	lsls	r2, r3, #31
 80066ce:	d5de      	bpl.n	800668e <_dtoa_r+0xa3e>
 80066d0:	2b39      	cmp	r3, #57	@ 0x39
 80066d2:	d1da      	bne.n	800668a <_dtoa_r+0xa3a>
 80066d4:	2339      	movs	r3, #57	@ 0x39
 80066d6:	f88b 3000 	strb.w	r3, [fp]
 80066da:	4633      	mov	r3, r6
 80066dc:	461e      	mov	r6, r3
 80066de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	2a39      	cmp	r2, #57	@ 0x39
 80066e6:	d04e      	beq.n	8006786 <_dtoa_r+0xb36>
 80066e8:	3201      	adds	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e501      	b.n	80060f2 <_dtoa_r+0x4a2>
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	dd03      	ble.n	80066fa <_dtoa_r+0xaaa>
 80066f2:	2b39      	cmp	r3, #57	@ 0x39
 80066f4:	d0ee      	beq.n	80066d4 <_dtoa_r+0xa84>
 80066f6:	3301      	adds	r3, #1
 80066f8:	e7c9      	b.n	800668e <_dtoa_r+0xa3e>
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006702:	428a      	cmp	r2, r1
 8006704:	d028      	beq.n	8006758 <_dtoa_r+0xb08>
 8006706:	2300      	movs	r3, #0
 8006708:	220a      	movs	r2, #10
 800670a:	9903      	ldr	r1, [sp, #12]
 800670c:	4648      	mov	r0, r9
 800670e:	f000 f9d3 	bl	8006ab8 <__multadd>
 8006712:	42af      	cmp	r7, r5
 8006714:	9003      	str	r0, [sp, #12]
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	f04f 020a 	mov.w	r2, #10
 800671e:	4639      	mov	r1, r7
 8006720:	4648      	mov	r0, r9
 8006722:	d107      	bne.n	8006734 <_dtoa_r+0xae4>
 8006724:	f000 f9c8 	bl	8006ab8 <__multadd>
 8006728:	4607      	mov	r7, r0
 800672a:	4605      	mov	r5, r0
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	e777      	b.n	8006624 <_dtoa_r+0x9d4>
 8006734:	f000 f9c0 	bl	8006ab8 <__multadd>
 8006738:	4629      	mov	r1, r5
 800673a:	4607      	mov	r7, r0
 800673c:	2300      	movs	r3, #0
 800673e:	220a      	movs	r2, #10
 8006740:	4648      	mov	r0, r9
 8006742:	f000 f9b9 	bl	8006ab8 <__multadd>
 8006746:	4605      	mov	r5, r0
 8006748:	e7f0      	b.n	800672c <_dtoa_r+0xadc>
 800674a:	f1bb 0f00 	cmp.w	fp, #0
 800674e:	bfcc      	ite	gt
 8006750:	465e      	movgt	r6, fp
 8006752:	2601      	movle	r6, #1
 8006754:	2700      	movs	r7, #0
 8006756:	4456      	add	r6, sl
 8006758:	2201      	movs	r2, #1
 800675a:	9903      	ldr	r1, [sp, #12]
 800675c:	4648      	mov	r0, r9
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	f000 fb4e 	bl	8006e00 <__lshift>
 8006764:	4621      	mov	r1, r4
 8006766:	9003      	str	r0, [sp, #12]
 8006768:	f000 fbb6 	bl	8006ed8 <__mcmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	dcb4      	bgt.n	80066da <_dtoa_r+0xa8a>
 8006770:	d102      	bne.n	8006778 <_dtoa_r+0xb28>
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	07db      	lsls	r3, r3, #31
 8006776:	d4b0      	bmi.n	80066da <_dtoa_r+0xa8a>
 8006778:	4633      	mov	r3, r6
 800677a:	461e      	mov	r6, r3
 800677c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006780:	2a30      	cmp	r2, #48	@ 0x30
 8006782:	d0fa      	beq.n	800677a <_dtoa_r+0xb2a>
 8006784:	e4b5      	b.n	80060f2 <_dtoa_r+0x4a2>
 8006786:	459a      	cmp	sl, r3
 8006788:	d1a8      	bne.n	80066dc <_dtoa_r+0xa8c>
 800678a:	2331      	movs	r3, #49	@ 0x31
 800678c:	f108 0801 	add.w	r8, r8, #1
 8006790:	f88a 3000 	strb.w	r3, [sl]
 8006794:	e4ad      	b.n	80060f2 <_dtoa_r+0x4a2>
 8006796:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006798:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067f4 <_dtoa_r+0xba4>
 800679c:	b11b      	cbz	r3, 80067a6 <_dtoa_r+0xb56>
 800679e:	f10a 0308 	add.w	r3, sl, #8
 80067a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4650      	mov	r0, sl
 80067a8:	b017      	add	sp, #92	@ 0x5c
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f77f ae2e 	ble.w	8006412 <_dtoa_r+0x7c2>
 80067b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ba:	2001      	movs	r0, #1
 80067bc:	e64d      	b.n	800645a <_dtoa_r+0x80a>
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	f77f aed9 	ble.w	8006578 <_dtoa_r+0x928>
 80067c6:	4656      	mov	r6, sl
 80067c8:	4621      	mov	r1, r4
 80067ca:	9803      	ldr	r0, [sp, #12]
 80067cc:	f7ff f9b7 	bl	8005b3e <quorem>
 80067d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067d4:	f806 3b01 	strb.w	r3, [r6], #1
 80067d8:	eba6 020a 	sub.w	r2, r6, sl
 80067dc:	4593      	cmp	fp, r2
 80067de:	ddb4      	ble.n	800674a <_dtoa_r+0xafa>
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4648      	mov	r0, r9
 80067e6:	9903      	ldr	r1, [sp, #12]
 80067e8:	f000 f966 	bl	8006ab8 <__multadd>
 80067ec:	9003      	str	r0, [sp, #12]
 80067ee:	e7eb      	b.n	80067c8 <_dtoa_r+0xb78>
 80067f0:	0800a04e 	.word	0x0800a04e
 80067f4:	08009fd2 	.word	0x08009fd2

080067f8 <_free_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4605      	mov	r5, r0
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d040      	beq.n	8006882 <_free_r+0x8a>
 8006800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006804:	1f0c      	subs	r4, r1, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	bfb8      	it	lt
 800680a:	18e4      	addlt	r4, r4, r3
 800680c:	f000 f8e6 	bl	80069dc <__malloc_lock>
 8006810:	4a1c      	ldr	r2, [pc, #112]	@ (8006884 <_free_r+0x8c>)
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	b933      	cbnz	r3, 8006824 <_free_r+0x2c>
 8006816:	6063      	str	r3, [r4, #4]
 8006818:	6014      	str	r4, [r2, #0]
 800681a:	4628      	mov	r0, r5
 800681c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006820:	f000 b8e2 	b.w	80069e8 <__malloc_unlock>
 8006824:	42a3      	cmp	r3, r4
 8006826:	d908      	bls.n	800683a <_free_r+0x42>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	1821      	adds	r1, r4, r0
 800682c:	428b      	cmp	r3, r1
 800682e:	bf01      	itttt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	1809      	addeq	r1, r1, r0
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	e7ed      	b.n	8006816 <_free_r+0x1e>
 800683a:	461a      	mov	r2, r3
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	b10b      	cbz	r3, 8006844 <_free_r+0x4c>
 8006840:	42a3      	cmp	r3, r4
 8006842:	d9fa      	bls.n	800683a <_free_r+0x42>
 8006844:	6811      	ldr	r1, [r2, #0]
 8006846:	1850      	adds	r0, r2, r1
 8006848:	42a0      	cmp	r0, r4
 800684a:	d10b      	bne.n	8006864 <_free_r+0x6c>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	4401      	add	r1, r0
 8006850:	1850      	adds	r0, r2, r1
 8006852:	4283      	cmp	r3, r0
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	d1e0      	bne.n	800681a <_free_r+0x22>
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4408      	add	r0, r1
 800685e:	6010      	str	r0, [r2, #0]
 8006860:	6053      	str	r3, [r2, #4]
 8006862:	e7da      	b.n	800681a <_free_r+0x22>
 8006864:	d902      	bls.n	800686c <_free_r+0x74>
 8006866:	230c      	movs	r3, #12
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	e7d6      	b.n	800681a <_free_r+0x22>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	1821      	adds	r1, r4, r0
 8006870:	428b      	cmp	r3, r1
 8006872:	bf01      	itttt	eq
 8006874:	6819      	ldreq	r1, [r3, #0]
 8006876:	685b      	ldreq	r3, [r3, #4]
 8006878:	1809      	addeq	r1, r1, r0
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	6054      	str	r4, [r2, #4]
 8006880:	e7cb      	b.n	800681a <_free_r+0x22>
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20000e88 	.word	0x20000e88

08006888 <malloc>:
 8006888:	4b02      	ldr	r3, [pc, #8]	@ (8006894 <malloc+0xc>)
 800688a:	4601      	mov	r1, r0
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f000 b825 	b.w	80068dc <_malloc_r>
 8006892:	bf00      	nop
 8006894:	2000002c 	.word	0x2000002c

08006898 <sbrk_aligned>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4e0f      	ldr	r6, [pc, #60]	@ (80068d8 <sbrk_aligned+0x40>)
 800689c:	460c      	mov	r4, r1
 800689e:	6831      	ldr	r1, [r6, #0]
 80068a0:	4605      	mov	r5, r0
 80068a2:	b911      	cbnz	r1, 80068aa <sbrk_aligned+0x12>
 80068a4:	f000 fe3a 	bl	800751c <_sbrk_r>
 80068a8:	6030      	str	r0, [r6, #0]
 80068aa:	4621      	mov	r1, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 fe35 	bl	800751c <_sbrk_r>
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	d103      	bne.n	80068be <sbrk_aligned+0x26>
 80068b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068ba:	4620      	mov	r0, r4
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	1cc4      	adds	r4, r0, #3
 80068c0:	f024 0403 	bic.w	r4, r4, #3
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d0f8      	beq.n	80068ba <sbrk_aligned+0x22>
 80068c8:	1a21      	subs	r1, r4, r0
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 fe26 	bl	800751c <_sbrk_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1f2      	bne.n	80068ba <sbrk_aligned+0x22>
 80068d4:	e7ef      	b.n	80068b6 <sbrk_aligned+0x1e>
 80068d6:	bf00      	nop
 80068d8:	20000e84 	.word	0x20000e84

080068dc <_malloc_r>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	1ccd      	adds	r5, r1, #3
 80068e2:	f025 0503 	bic.w	r5, r5, #3
 80068e6:	3508      	adds	r5, #8
 80068e8:	2d0c      	cmp	r5, #12
 80068ea:	bf38      	it	cc
 80068ec:	250c      	movcc	r5, #12
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	4606      	mov	r6, r0
 80068f2:	db01      	blt.n	80068f8 <_malloc_r+0x1c>
 80068f4:	42a9      	cmp	r1, r5
 80068f6:	d904      	bls.n	8006902 <_malloc_r+0x26>
 80068f8:	230c      	movs	r3, #12
 80068fa:	6033      	str	r3, [r6, #0]
 80068fc:	2000      	movs	r0, #0
 80068fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069d8 <_malloc_r+0xfc>
 8006906:	f000 f869 	bl	80069dc <__malloc_lock>
 800690a:	f8d8 3000 	ldr.w	r3, [r8]
 800690e:	461c      	mov	r4, r3
 8006910:	bb44      	cbnz	r4, 8006964 <_malloc_r+0x88>
 8006912:	4629      	mov	r1, r5
 8006914:	4630      	mov	r0, r6
 8006916:	f7ff ffbf 	bl	8006898 <sbrk_aligned>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	4604      	mov	r4, r0
 800691e:	d158      	bne.n	80069d2 <_malloc_r+0xf6>
 8006920:	f8d8 4000 	ldr.w	r4, [r8]
 8006924:	4627      	mov	r7, r4
 8006926:	2f00      	cmp	r7, #0
 8006928:	d143      	bne.n	80069b2 <_malloc_r+0xd6>
 800692a:	2c00      	cmp	r4, #0
 800692c:	d04b      	beq.n	80069c6 <_malloc_r+0xea>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	4639      	mov	r1, r7
 8006932:	4630      	mov	r0, r6
 8006934:	eb04 0903 	add.w	r9, r4, r3
 8006938:	f000 fdf0 	bl	800751c <_sbrk_r>
 800693c:	4581      	cmp	r9, r0
 800693e:	d142      	bne.n	80069c6 <_malloc_r+0xea>
 8006940:	6821      	ldr	r1, [r4, #0]
 8006942:	4630      	mov	r0, r6
 8006944:	1a6d      	subs	r5, r5, r1
 8006946:	4629      	mov	r1, r5
 8006948:	f7ff ffa6 	bl	8006898 <sbrk_aligned>
 800694c:	3001      	adds	r0, #1
 800694e:	d03a      	beq.n	80069c6 <_malloc_r+0xea>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	442b      	add	r3, r5
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	f8d8 3000 	ldr.w	r3, [r8]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	bb62      	cbnz	r2, 80069b8 <_malloc_r+0xdc>
 800695e:	f8c8 7000 	str.w	r7, [r8]
 8006962:	e00f      	b.n	8006984 <_malloc_r+0xa8>
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	1b52      	subs	r2, r2, r5
 8006968:	d420      	bmi.n	80069ac <_malloc_r+0xd0>
 800696a:	2a0b      	cmp	r2, #11
 800696c:	d917      	bls.n	800699e <_malloc_r+0xc2>
 800696e:	1961      	adds	r1, r4, r5
 8006970:	42a3      	cmp	r3, r4
 8006972:	6025      	str	r5, [r4, #0]
 8006974:	bf18      	it	ne
 8006976:	6059      	strne	r1, [r3, #4]
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	bf08      	it	eq
 800697c:	f8c8 1000 	streq.w	r1, [r8]
 8006980:	5162      	str	r2, [r4, r5]
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	4630      	mov	r0, r6
 8006986:	f000 f82f 	bl	80069e8 <__malloc_unlock>
 800698a:	f104 000b 	add.w	r0, r4, #11
 800698e:	1d23      	adds	r3, r4, #4
 8006990:	f020 0007 	bic.w	r0, r0, #7
 8006994:	1ac2      	subs	r2, r0, r3
 8006996:	bf1c      	itt	ne
 8006998:	1a1b      	subne	r3, r3, r0
 800699a:	50a3      	strne	r3, [r4, r2]
 800699c:	e7af      	b.n	80068fe <_malloc_r+0x22>
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	bf0c      	ite	eq
 80069a4:	f8c8 2000 	streq.w	r2, [r8]
 80069a8:	605a      	strne	r2, [r3, #4]
 80069aa:	e7eb      	b.n	8006984 <_malloc_r+0xa8>
 80069ac:	4623      	mov	r3, r4
 80069ae:	6864      	ldr	r4, [r4, #4]
 80069b0:	e7ae      	b.n	8006910 <_malloc_r+0x34>
 80069b2:	463c      	mov	r4, r7
 80069b4:	687f      	ldr	r7, [r7, #4]
 80069b6:	e7b6      	b.n	8006926 <_malloc_r+0x4a>
 80069b8:	461a      	mov	r2, r3
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d1fb      	bne.n	80069b8 <_malloc_r+0xdc>
 80069c0:	2300      	movs	r3, #0
 80069c2:	6053      	str	r3, [r2, #4]
 80069c4:	e7de      	b.n	8006984 <_malloc_r+0xa8>
 80069c6:	230c      	movs	r3, #12
 80069c8:	4630      	mov	r0, r6
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	f000 f80c 	bl	80069e8 <__malloc_unlock>
 80069d0:	e794      	b.n	80068fc <_malloc_r+0x20>
 80069d2:	6005      	str	r5, [r0, #0]
 80069d4:	e7d6      	b.n	8006984 <_malloc_r+0xa8>
 80069d6:	bf00      	nop
 80069d8:	20000e88 	.word	0x20000e88

080069dc <__malloc_lock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	@ (80069e4 <__malloc_lock+0x8>)
 80069de:	f7ff b89e 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	20000e80 	.word	0x20000e80

080069e8 <__malloc_unlock>:
 80069e8:	4801      	ldr	r0, [pc, #4]	@ (80069f0 <__malloc_unlock+0x8>)
 80069ea:	f7ff b899 	b.w	8005b20 <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	20000e80 	.word	0x20000e80

080069f4 <_Balloc>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	69c6      	ldr	r6, [r0, #28]
 80069f8:	4604      	mov	r4, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	b976      	cbnz	r6, 8006a1c <_Balloc+0x28>
 80069fe:	2010      	movs	r0, #16
 8006a00:	f7ff ff42 	bl	8006888 <malloc>
 8006a04:	4602      	mov	r2, r0
 8006a06:	61e0      	str	r0, [r4, #28]
 8006a08:	b920      	cbnz	r0, 8006a14 <_Balloc+0x20>
 8006a0a:	216b      	movs	r1, #107	@ 0x6b
 8006a0c:	4b17      	ldr	r3, [pc, #92]	@ (8006a6c <_Balloc+0x78>)
 8006a0e:	4818      	ldr	r0, [pc, #96]	@ (8006a70 <_Balloc+0x7c>)
 8006a10:	f000 fda2 	bl	8007558 <__assert_func>
 8006a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a18:	6006      	str	r6, [r0, #0]
 8006a1a:	60c6      	str	r6, [r0, #12]
 8006a1c:	69e6      	ldr	r6, [r4, #28]
 8006a1e:	68f3      	ldr	r3, [r6, #12]
 8006a20:	b183      	cbz	r3, 8006a44 <_Balloc+0x50>
 8006a22:	69e3      	ldr	r3, [r4, #28]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a2a:	b9b8      	cbnz	r0, 8006a5c <_Balloc+0x68>
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a32:	1d72      	adds	r2, r6, #5
 8006a34:	4620      	mov	r0, r4
 8006a36:	0092      	lsls	r2, r2, #2
 8006a38:	f000 fdac 	bl	8007594 <_calloc_r>
 8006a3c:	b160      	cbz	r0, 8006a58 <_Balloc+0x64>
 8006a3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a42:	e00e      	b.n	8006a62 <_Balloc+0x6e>
 8006a44:	2221      	movs	r2, #33	@ 0x21
 8006a46:	2104      	movs	r1, #4
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fda3 	bl	8007594 <_calloc_r>
 8006a4e:	69e3      	ldr	r3, [r4, #28]
 8006a50:	60f0      	str	r0, [r6, #12]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e4      	bne.n	8006a22 <_Balloc+0x2e>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	6802      	ldr	r2, [r0, #0]
 8006a5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a62:	2300      	movs	r3, #0
 8006a64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a68:	e7f7      	b.n	8006a5a <_Balloc+0x66>
 8006a6a:	bf00      	nop
 8006a6c:	08009fdf 	.word	0x08009fdf
 8006a70:	0800a05f 	.word	0x0800a05f

08006a74 <_Bfree>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	69c6      	ldr	r6, [r0, #28]
 8006a78:	4605      	mov	r5, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	b976      	cbnz	r6, 8006a9c <_Bfree+0x28>
 8006a7e:	2010      	movs	r0, #16
 8006a80:	f7ff ff02 	bl	8006888 <malloc>
 8006a84:	4602      	mov	r2, r0
 8006a86:	61e8      	str	r0, [r5, #28]
 8006a88:	b920      	cbnz	r0, 8006a94 <_Bfree+0x20>
 8006a8a:	218f      	movs	r1, #143	@ 0x8f
 8006a8c:	4b08      	ldr	r3, [pc, #32]	@ (8006ab0 <_Bfree+0x3c>)
 8006a8e:	4809      	ldr	r0, [pc, #36]	@ (8006ab4 <_Bfree+0x40>)
 8006a90:	f000 fd62 	bl	8007558 <__assert_func>
 8006a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a98:	6006      	str	r6, [r0, #0]
 8006a9a:	60c6      	str	r6, [r0, #12]
 8006a9c:	b13c      	cbz	r4, 8006aae <_Bfree+0x3a>
 8006a9e:	69eb      	ldr	r3, [r5, #28]
 8006aa0:	6862      	ldr	r2, [r4, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006aa8:	6021      	str	r1, [r4, #0]
 8006aaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	08009fdf 	.word	0x08009fdf
 8006ab4:	0800a05f 	.word	0x0800a05f

08006ab8 <__multadd>:
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	4607      	mov	r7, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	461e      	mov	r6, r3
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	690d      	ldr	r5, [r1, #16]
 8006ac6:	f101 0c14 	add.w	ip, r1, #20
 8006aca:	f8dc 3000 	ldr.w	r3, [ip]
 8006ace:	3001      	adds	r0, #1
 8006ad0:	b299      	uxth	r1, r3
 8006ad2:	fb02 6101 	mla	r1, r2, r1, r6
 8006ad6:	0c1e      	lsrs	r6, r3, #16
 8006ad8:	0c0b      	lsrs	r3, r1, #16
 8006ada:	fb02 3306 	mla	r3, r2, r6, r3
 8006ade:	b289      	uxth	r1, r1
 8006ae0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ae4:	4285      	cmp	r5, r0
 8006ae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aea:	f84c 1b04 	str.w	r1, [ip], #4
 8006aee:	dcec      	bgt.n	8006aca <__multadd+0x12>
 8006af0:	b30e      	cbz	r6, 8006b36 <__multadd+0x7e>
 8006af2:	68a3      	ldr	r3, [r4, #8]
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	dc19      	bgt.n	8006b2c <__multadd+0x74>
 8006af8:	6861      	ldr	r1, [r4, #4]
 8006afa:	4638      	mov	r0, r7
 8006afc:	3101      	adds	r1, #1
 8006afe:	f7ff ff79 	bl	80069f4 <_Balloc>
 8006b02:	4680      	mov	r8, r0
 8006b04:	b928      	cbnz	r0, 8006b12 <__multadd+0x5a>
 8006b06:	4602      	mov	r2, r0
 8006b08:	21ba      	movs	r1, #186	@ 0xba
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <__multadd+0x84>)
 8006b0c:	480c      	ldr	r0, [pc, #48]	@ (8006b40 <__multadd+0x88>)
 8006b0e:	f000 fd23 	bl	8007558 <__assert_func>
 8006b12:	6922      	ldr	r2, [r4, #16]
 8006b14:	f104 010c 	add.w	r1, r4, #12
 8006b18:	3202      	adds	r2, #2
 8006b1a:	0092      	lsls	r2, r2, #2
 8006b1c:	300c      	adds	r0, #12
 8006b1e:	f000 fd0d 	bl	800753c <memcpy>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ffa5 	bl	8006a74 <_Bfree>
 8006b2a:	4644      	mov	r4, r8
 8006b2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b30:	3501      	adds	r5, #1
 8006b32:	615e      	str	r6, [r3, #20]
 8006b34:	6125      	str	r5, [r4, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b3c:	0800a04e 	.word	0x0800a04e
 8006b40:	0800a05f 	.word	0x0800a05f

08006b44 <__hi0bits>:
 8006b44:	4603      	mov	r3, r0
 8006b46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b4a:	bf3a      	itte	cc
 8006b4c:	0403      	lslcc	r3, r0, #16
 8006b4e:	2010      	movcc	r0, #16
 8006b50:	2000      	movcs	r0, #0
 8006b52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b56:	bf3c      	itt	cc
 8006b58:	021b      	lslcc	r3, r3, #8
 8006b5a:	3008      	addcc	r0, #8
 8006b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b60:	bf3c      	itt	cc
 8006b62:	011b      	lslcc	r3, r3, #4
 8006b64:	3004      	addcc	r0, #4
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6a:	bf3c      	itt	cc
 8006b6c:	009b      	lslcc	r3, r3, #2
 8006b6e:	3002      	addcc	r0, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db05      	blt.n	8006b80 <__hi0bits+0x3c>
 8006b74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b78:	f100 0001 	add.w	r0, r0, #1
 8006b7c:	bf08      	it	eq
 8006b7e:	2020      	moveq	r0, #32
 8006b80:	4770      	bx	lr

08006b82 <__lo0bits>:
 8006b82:	6803      	ldr	r3, [r0, #0]
 8006b84:	4602      	mov	r2, r0
 8006b86:	f013 0007 	ands.w	r0, r3, #7
 8006b8a:	d00b      	beq.n	8006ba4 <__lo0bits+0x22>
 8006b8c:	07d9      	lsls	r1, r3, #31
 8006b8e:	d421      	bmi.n	8006bd4 <__lo0bits+0x52>
 8006b90:	0798      	lsls	r0, r3, #30
 8006b92:	bf49      	itett	mi
 8006b94:	085b      	lsrmi	r3, r3, #1
 8006b96:	089b      	lsrpl	r3, r3, #2
 8006b98:	2001      	movmi	r0, #1
 8006b9a:	6013      	strmi	r3, [r2, #0]
 8006b9c:	bf5c      	itt	pl
 8006b9e:	2002      	movpl	r0, #2
 8006ba0:	6013      	strpl	r3, [r2, #0]
 8006ba2:	4770      	bx	lr
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	b909      	cbnz	r1, 8006bac <__lo0bits+0x2a>
 8006ba8:	2010      	movs	r0, #16
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	b2d9      	uxtb	r1, r3
 8006bae:	b909      	cbnz	r1, 8006bb4 <__lo0bits+0x32>
 8006bb0:	3008      	adds	r0, #8
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	0719      	lsls	r1, r3, #28
 8006bb6:	bf04      	itt	eq
 8006bb8:	091b      	lsreq	r3, r3, #4
 8006bba:	3004      	addeq	r0, #4
 8006bbc:	0799      	lsls	r1, r3, #30
 8006bbe:	bf04      	itt	eq
 8006bc0:	089b      	lsreq	r3, r3, #2
 8006bc2:	3002      	addeq	r0, #2
 8006bc4:	07d9      	lsls	r1, r3, #31
 8006bc6:	d403      	bmi.n	8006bd0 <__lo0bits+0x4e>
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	f100 0001 	add.w	r0, r0, #1
 8006bce:	d003      	beq.n	8006bd8 <__lo0bits+0x56>
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4770      	bx	lr
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4770      	bx	lr
 8006bd8:	2020      	movs	r0, #32
 8006bda:	4770      	bx	lr

08006bdc <__i2b>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	460c      	mov	r4, r1
 8006be0:	2101      	movs	r1, #1
 8006be2:	f7ff ff07 	bl	80069f4 <_Balloc>
 8006be6:	4602      	mov	r2, r0
 8006be8:	b928      	cbnz	r0, 8006bf6 <__i2b+0x1a>
 8006bea:	f240 1145 	movw	r1, #325	@ 0x145
 8006bee:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <__i2b+0x24>)
 8006bf0:	4804      	ldr	r0, [pc, #16]	@ (8006c04 <__i2b+0x28>)
 8006bf2:	f000 fcb1 	bl	8007558 <__assert_func>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	6144      	str	r4, [r0, #20]
 8006bfa:	6103      	str	r3, [r0, #16]
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	0800a04e 	.word	0x0800a04e
 8006c04:	0800a05f 	.word	0x0800a05f

08006c08 <__multiply>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4617      	mov	r7, r2
 8006c0e:	690a      	ldr	r2, [r1, #16]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4689      	mov	r9, r1
 8006c14:	429a      	cmp	r2, r3
 8006c16:	bfa2      	ittt	ge
 8006c18:	463b      	movge	r3, r7
 8006c1a:	460f      	movge	r7, r1
 8006c1c:	4699      	movge	r9, r3
 8006c1e:	693d      	ldr	r5, [r7, #16]
 8006c20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	eb05 060a 	add.w	r6, r5, sl
 8006c2c:	42b3      	cmp	r3, r6
 8006c2e:	b085      	sub	sp, #20
 8006c30:	bfb8      	it	lt
 8006c32:	3101      	addlt	r1, #1
 8006c34:	f7ff fede 	bl	80069f4 <_Balloc>
 8006c38:	b930      	cbnz	r0, 8006c48 <__multiply+0x40>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c40:	4b40      	ldr	r3, [pc, #256]	@ (8006d44 <__multiply+0x13c>)
 8006c42:	4841      	ldr	r0, [pc, #260]	@ (8006d48 <__multiply+0x140>)
 8006c44:	f000 fc88 	bl	8007558 <__assert_func>
 8006c48:	f100 0414 	add.w	r4, r0, #20
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c54:	4573      	cmp	r3, lr
 8006c56:	d320      	bcc.n	8006c9a <__multiply+0x92>
 8006c58:	f107 0814 	add.w	r8, r7, #20
 8006c5c:	f109 0114 	add.w	r1, r9, #20
 8006c60:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c64:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c68:	9302      	str	r3, [sp, #8]
 8006c6a:	1beb      	subs	r3, r5, r7
 8006c6c:	3b15      	subs	r3, #21
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	3304      	adds	r3, #4
 8006c74:	3715      	adds	r7, #21
 8006c76:	42bd      	cmp	r5, r7
 8006c78:	bf38      	it	cc
 8006c7a:	2304      	movcc	r3, #4
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	9103      	str	r1, [sp, #12]
 8006c82:	428b      	cmp	r3, r1
 8006c84:	d80c      	bhi.n	8006ca0 <__multiply+0x98>
 8006c86:	2e00      	cmp	r6, #0
 8006c88:	dd03      	ble.n	8006c92 <__multiply+0x8a>
 8006c8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d055      	beq.n	8006d3e <__multiply+0x136>
 8006c92:	6106      	str	r6, [r0, #16]
 8006c94:	b005      	add	sp, #20
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	f843 2b04 	str.w	r2, [r3], #4
 8006c9e:	e7d9      	b.n	8006c54 <__multiply+0x4c>
 8006ca0:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ca4:	f1ba 0f00 	cmp.w	sl, #0
 8006ca8:	d01f      	beq.n	8006cea <__multiply+0xe2>
 8006caa:	46c4      	mov	ip, r8
 8006cac:	46a1      	mov	r9, r4
 8006cae:	2700      	movs	r7, #0
 8006cb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cb4:	f8d9 3000 	ldr.w	r3, [r9]
 8006cb8:	fa1f fb82 	uxth.w	fp, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cc2:	443b      	add	r3, r7
 8006cc4:	f8d9 7000 	ldr.w	r7, [r9]
 8006cc8:	0c12      	lsrs	r2, r2, #16
 8006cca:	0c3f      	lsrs	r7, r7, #16
 8006ccc:	fb0a 7202 	mla	r2, sl, r2, r7
 8006cd0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cda:	4565      	cmp	r5, ip
 8006cdc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006ce0:	f849 3b04 	str.w	r3, [r9], #4
 8006ce4:	d8e4      	bhi.n	8006cb0 <__multiply+0xa8>
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	50e7      	str	r7, [r4, r3]
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	3104      	adds	r1, #4
 8006cee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cf2:	f1b9 0f00 	cmp.w	r9, #0
 8006cf6:	d020      	beq.n	8006d3a <__multiply+0x132>
 8006cf8:	4647      	mov	r7, r8
 8006cfa:	46a4      	mov	ip, r4
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d06:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d10:	4452      	add	r2, sl
 8006d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d16:	f84c 3b04 	str.w	r3, [ip], #4
 8006d1a:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d22:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d26:	42bd      	cmp	r5, r7
 8006d28:	fb09 330a 	mla	r3, r9, sl, r3
 8006d2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d34:	d8e5      	bhi.n	8006d02 <__multiply+0xfa>
 8006d36:	9a01      	ldr	r2, [sp, #4]
 8006d38:	50a3      	str	r3, [r4, r2]
 8006d3a:	3404      	adds	r4, #4
 8006d3c:	e79f      	b.n	8006c7e <__multiply+0x76>
 8006d3e:	3e01      	subs	r6, #1
 8006d40:	e7a1      	b.n	8006c86 <__multiply+0x7e>
 8006d42:	bf00      	nop
 8006d44:	0800a04e 	.word	0x0800a04e
 8006d48:	0800a05f 	.word	0x0800a05f

08006d4c <__pow5mult>:
 8006d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d50:	4615      	mov	r5, r2
 8006d52:	f012 0203 	ands.w	r2, r2, #3
 8006d56:	4607      	mov	r7, r0
 8006d58:	460e      	mov	r6, r1
 8006d5a:	d007      	beq.n	8006d6c <__pow5mult+0x20>
 8006d5c:	4c25      	ldr	r4, [pc, #148]	@ (8006df4 <__pow5mult+0xa8>)
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	2300      	movs	r3, #0
 8006d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d66:	f7ff fea7 	bl	8006ab8 <__multadd>
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	10ad      	asrs	r5, r5, #2
 8006d6e:	d03d      	beq.n	8006dec <__pow5mult+0xa0>
 8006d70:	69fc      	ldr	r4, [r7, #28]
 8006d72:	b97c      	cbnz	r4, 8006d94 <__pow5mult+0x48>
 8006d74:	2010      	movs	r0, #16
 8006d76:	f7ff fd87 	bl	8006888 <malloc>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	61f8      	str	r0, [r7, #28]
 8006d7e:	b928      	cbnz	r0, 8006d8c <__pow5mult+0x40>
 8006d80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d84:	4b1c      	ldr	r3, [pc, #112]	@ (8006df8 <__pow5mult+0xac>)
 8006d86:	481d      	ldr	r0, [pc, #116]	@ (8006dfc <__pow5mult+0xb0>)
 8006d88:	f000 fbe6 	bl	8007558 <__assert_func>
 8006d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d90:	6004      	str	r4, [r0, #0]
 8006d92:	60c4      	str	r4, [r0, #12]
 8006d94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d9c:	b94c      	cbnz	r4, 8006db2 <__pow5mult+0x66>
 8006d9e:	f240 2171 	movw	r1, #625	@ 0x271
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff ff1a 	bl	8006bdc <__i2b>
 8006da8:	2300      	movs	r3, #0
 8006daa:	4604      	mov	r4, r0
 8006dac:	f8c8 0008 	str.w	r0, [r8, #8]
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	f04f 0900 	mov.w	r9, #0
 8006db6:	07eb      	lsls	r3, r5, #31
 8006db8:	d50a      	bpl.n	8006dd0 <__pow5mult+0x84>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f7ff ff22 	bl	8006c08 <__multiply>
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff fe53 	bl	8006a74 <_Bfree>
 8006dce:	4646      	mov	r6, r8
 8006dd0:	106d      	asrs	r5, r5, #1
 8006dd2:	d00b      	beq.n	8006dec <__pow5mult+0xa0>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	b938      	cbnz	r0, 8006de8 <__pow5mult+0x9c>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ff13 	bl	8006c08 <__multiply>
 8006de2:	6020      	str	r0, [r4, #0]
 8006de4:	f8c0 9000 	str.w	r9, [r0]
 8006de8:	4604      	mov	r4, r0
 8006dea:	e7e4      	b.n	8006db6 <__pow5mult+0x6a>
 8006dec:	4630      	mov	r0, r6
 8006dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df2:	bf00      	nop
 8006df4:	0800a110 	.word	0x0800a110
 8006df8:	08009fdf 	.word	0x08009fdf
 8006dfc:	0800a05f 	.word	0x0800a05f

08006e00 <__lshift>:
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	460c      	mov	r4, r1
 8006e06:	4607      	mov	r7, r0
 8006e08:	4691      	mov	r9, r2
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	6849      	ldr	r1, [r1, #4]
 8006e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e18:	f108 0601 	add.w	r6, r8, #1
 8006e1c:	42b3      	cmp	r3, r6
 8006e1e:	db0b      	blt.n	8006e38 <__lshift+0x38>
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7ff fde7 	bl	80069f4 <_Balloc>
 8006e26:	4605      	mov	r5, r0
 8006e28:	b948      	cbnz	r0, 8006e3e <__lshift+0x3e>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e30:	4b27      	ldr	r3, [pc, #156]	@ (8006ed0 <__lshift+0xd0>)
 8006e32:	4828      	ldr	r0, [pc, #160]	@ (8006ed4 <__lshift+0xd4>)
 8006e34:	f000 fb90 	bl	8007558 <__assert_func>
 8006e38:	3101      	adds	r1, #1
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	e7ee      	b.n	8006e1c <__lshift+0x1c>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f100 0114 	add.w	r1, r0, #20
 8006e44:	f100 0210 	add.w	r2, r0, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	4553      	cmp	r3, sl
 8006e4c:	db33      	blt.n	8006eb6 <__lshift+0xb6>
 8006e4e:	6920      	ldr	r0, [r4, #16]
 8006e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e54:	f104 0314 	add.w	r3, r4, #20
 8006e58:	f019 091f 	ands.w	r9, r9, #31
 8006e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e64:	d02b      	beq.n	8006ebe <__lshift+0xbe>
 8006e66:	468a      	mov	sl, r1
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	fa00 f009 	lsl.w	r0, r0, r9
 8006e74:	4310      	orrs	r0, r2
 8006e76:	f84a 0b04 	str.w	r0, [sl], #4
 8006e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7e:	459c      	cmp	ip, r3
 8006e80:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e84:	d8f3      	bhi.n	8006e6e <__lshift+0x6e>
 8006e86:	ebac 0304 	sub.w	r3, ip, r4
 8006e8a:	3b15      	subs	r3, #21
 8006e8c:	f023 0303 	bic.w	r3, r3, #3
 8006e90:	3304      	adds	r3, #4
 8006e92:	f104 0015 	add.w	r0, r4, #21
 8006e96:	4560      	cmp	r0, ip
 8006e98:	bf88      	it	hi
 8006e9a:	2304      	movhi	r3, #4
 8006e9c:	50ca      	str	r2, [r1, r3]
 8006e9e:	b10a      	cbz	r2, 8006ea4 <__lshift+0xa4>
 8006ea0:	f108 0602 	add.w	r6, r8, #2
 8006ea4:	3e01      	subs	r6, #1
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	612e      	str	r6, [r5, #16]
 8006eac:	f7ff fde2 	bl	8006a74 <_Bfree>
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eba:	3301      	adds	r3, #1
 8006ebc:	e7c5      	b.n	8006e4a <__lshift+0x4a>
 8006ebe:	3904      	subs	r1, #4
 8006ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec4:	459c      	cmp	ip, r3
 8006ec6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eca:	d8f9      	bhi.n	8006ec0 <__lshift+0xc0>
 8006ecc:	e7ea      	b.n	8006ea4 <__lshift+0xa4>
 8006ece:	bf00      	nop
 8006ed0:	0800a04e 	.word	0x0800a04e
 8006ed4:	0800a05f 	.word	0x0800a05f

08006ed8 <__mcmp>:
 8006ed8:	4603      	mov	r3, r0
 8006eda:	690a      	ldr	r2, [r1, #16]
 8006edc:	6900      	ldr	r0, [r0, #16]
 8006ede:	b530      	push	{r4, r5, lr}
 8006ee0:	1a80      	subs	r0, r0, r2
 8006ee2:	d10e      	bne.n	8006f02 <__mcmp+0x2a>
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	3114      	adds	r1, #20
 8006ee8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006eec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ef8:	4295      	cmp	r5, r2
 8006efa:	d003      	beq.n	8006f04 <__mcmp+0x2c>
 8006efc:	d205      	bcs.n	8006f0a <__mcmp+0x32>
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f02:	bd30      	pop	{r4, r5, pc}
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d3f3      	bcc.n	8006ef0 <__mcmp+0x18>
 8006f08:	e7fb      	b.n	8006f02 <__mcmp+0x2a>
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	e7f9      	b.n	8006f02 <__mcmp+0x2a>
	...

08006f10 <__mdiff>:
 8006f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4689      	mov	r9, r1
 8006f16:	4606      	mov	r6, r0
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	f7ff ffdb 	bl	8006ed8 <__mcmp>
 8006f22:	1e05      	subs	r5, r0, #0
 8006f24:	d112      	bne.n	8006f4c <__mdiff+0x3c>
 8006f26:	4629      	mov	r1, r5
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff fd63 	bl	80069f4 <_Balloc>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	b928      	cbnz	r0, 8006f3e <__mdiff+0x2e>
 8006f32:	f240 2137 	movw	r1, #567	@ 0x237
 8006f36:	4b3e      	ldr	r3, [pc, #248]	@ (8007030 <__mdiff+0x120>)
 8006f38:	483e      	ldr	r0, [pc, #248]	@ (8007034 <__mdiff+0x124>)
 8006f3a:	f000 fb0d 	bl	8007558 <__assert_func>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f44:	4610      	mov	r0, r2
 8006f46:	b003      	add	sp, #12
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	bfbc      	itt	lt
 8006f4e:	464b      	movlt	r3, r9
 8006f50:	46a1      	movlt	r9, r4
 8006f52:	4630      	mov	r0, r6
 8006f54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f58:	bfba      	itte	lt
 8006f5a:	461c      	movlt	r4, r3
 8006f5c:	2501      	movlt	r5, #1
 8006f5e:	2500      	movge	r5, #0
 8006f60:	f7ff fd48 	bl	80069f4 <_Balloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	b918      	cbnz	r0, 8006f70 <__mdiff+0x60>
 8006f68:	f240 2145 	movw	r1, #581	@ 0x245
 8006f6c:	4b30      	ldr	r3, [pc, #192]	@ (8007030 <__mdiff+0x120>)
 8006f6e:	e7e3      	b.n	8006f38 <__mdiff+0x28>
 8006f70:	f100 0b14 	add.w	fp, r0, #20
 8006f74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f78:	f109 0310 	add.w	r3, r9, #16
 8006f7c:	60c5      	str	r5, [r0, #12]
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	f109 0514 	add.w	r5, r9, #20
 8006f86:	46d9      	mov	r9, fp
 8006f88:	6926      	ldr	r6, [r4, #16]
 8006f8a:	f104 0e14 	add.w	lr, r4, #20
 8006f8e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f92:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fa2:	b281      	uxth	r1, r0
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	fa1f f38a 	uxth.w	r3, sl
 8006faa:	1a5b      	subs	r3, r3, r1
 8006fac:	0c00      	lsrs	r0, r0, #16
 8006fae:	4463      	add	r3, ip
 8006fb0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fb4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fbe:	4576      	cmp	r6, lr
 8006fc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fc4:	f849 3b04 	str.w	r3, [r9], #4
 8006fc8:	d8e6      	bhi.n	8006f98 <__mdiff+0x88>
 8006fca:	1b33      	subs	r3, r6, r4
 8006fcc:	3b15      	subs	r3, #21
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	3415      	adds	r4, #21
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	bf38      	it	cc
 8006fda:	2304      	movcc	r3, #4
 8006fdc:	441d      	add	r5, r3
 8006fde:	445b      	add	r3, fp
 8006fe0:	461e      	mov	r6, r3
 8006fe2:	462c      	mov	r4, r5
 8006fe4:	4544      	cmp	r4, r8
 8006fe6:	d30e      	bcc.n	8007006 <__mdiff+0xf6>
 8006fe8:	f108 0103 	add.w	r1, r8, #3
 8006fec:	1b49      	subs	r1, r1, r5
 8006fee:	f021 0103 	bic.w	r1, r1, #3
 8006ff2:	3d03      	subs	r5, #3
 8006ff4:	45a8      	cmp	r8, r5
 8006ff6:	bf38      	it	cc
 8006ff8:	2100      	movcc	r1, #0
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007000:	b199      	cbz	r1, 800702a <__mdiff+0x11a>
 8007002:	6117      	str	r7, [r2, #16]
 8007004:	e79e      	b.n	8006f44 <__mdiff+0x34>
 8007006:	46e6      	mov	lr, ip
 8007008:	f854 1b04 	ldr.w	r1, [r4], #4
 800700c:	fa1f fc81 	uxth.w	ip, r1
 8007010:	44f4      	add	ip, lr
 8007012:	0c08      	lsrs	r0, r1, #16
 8007014:	4471      	add	r1, lr
 8007016:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800701a:	b289      	uxth	r1, r1
 800701c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007024:	f846 1b04 	str.w	r1, [r6], #4
 8007028:	e7dc      	b.n	8006fe4 <__mdiff+0xd4>
 800702a:	3f01      	subs	r7, #1
 800702c:	e7e6      	b.n	8006ffc <__mdiff+0xec>
 800702e:	bf00      	nop
 8007030:	0800a04e 	.word	0x0800a04e
 8007034:	0800a05f 	.word	0x0800a05f

08007038 <__d2b>:
 8007038:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800703c:	2101      	movs	r1, #1
 800703e:	4690      	mov	r8, r2
 8007040:	4699      	mov	r9, r3
 8007042:	9e08      	ldr	r6, [sp, #32]
 8007044:	f7ff fcd6 	bl	80069f4 <_Balloc>
 8007048:	4604      	mov	r4, r0
 800704a:	b930      	cbnz	r0, 800705a <__d2b+0x22>
 800704c:	4602      	mov	r2, r0
 800704e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007052:	4b23      	ldr	r3, [pc, #140]	@ (80070e0 <__d2b+0xa8>)
 8007054:	4823      	ldr	r0, [pc, #140]	@ (80070e4 <__d2b+0xac>)
 8007056:	f000 fa7f 	bl	8007558 <__assert_func>
 800705a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800705e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007062:	b10d      	cbz	r5, 8007068 <__d2b+0x30>
 8007064:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	f1b8 0300 	subs.w	r3, r8, #0
 800706e:	d024      	beq.n	80070ba <__d2b+0x82>
 8007070:	4668      	mov	r0, sp
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	f7ff fd85 	bl	8006b82 <__lo0bits>
 8007078:	e9dd 1200 	ldrd	r1, r2, [sp]
 800707c:	b1d8      	cbz	r0, 80070b6 <__d2b+0x7e>
 800707e:	f1c0 0320 	rsb	r3, r0, #32
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	430b      	orrs	r3, r1
 8007088:	40c2      	lsrs	r2, r0
 800708a:	6163      	str	r3, [r4, #20]
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf0c      	ite	eq
 8007094:	2201      	moveq	r2, #1
 8007096:	2202      	movne	r2, #2
 8007098:	61a3      	str	r3, [r4, #24]
 800709a:	6122      	str	r2, [r4, #16]
 800709c:	b1ad      	cbz	r5, 80070ca <__d2b+0x92>
 800709e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070a2:	4405      	add	r5, r0
 80070a4:	6035      	str	r5, [r6, #0]
 80070a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ac:	6018      	str	r0, [r3, #0]
 80070ae:	4620      	mov	r0, r4
 80070b0:	b002      	add	sp, #8
 80070b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80070b6:	6161      	str	r1, [r4, #20]
 80070b8:	e7e9      	b.n	800708e <__d2b+0x56>
 80070ba:	a801      	add	r0, sp, #4
 80070bc:	f7ff fd61 	bl	8006b82 <__lo0bits>
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	6163      	str	r3, [r4, #20]
 80070c6:	3020      	adds	r0, #32
 80070c8:	e7e7      	b.n	800709a <__d2b+0x62>
 80070ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070d2:	6030      	str	r0, [r6, #0]
 80070d4:	6918      	ldr	r0, [r3, #16]
 80070d6:	f7ff fd35 	bl	8006b44 <__hi0bits>
 80070da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070de:	e7e4      	b.n	80070aa <__d2b+0x72>
 80070e0:	0800a04e 	.word	0x0800a04e
 80070e4:	0800a05f 	.word	0x0800a05f

080070e8 <__ssputs_r>:
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	461f      	mov	r7, r3
 80070ee:	688e      	ldr	r6, [r1, #8]
 80070f0:	4682      	mov	sl, r0
 80070f2:	42be      	cmp	r6, r7
 80070f4:	460c      	mov	r4, r1
 80070f6:	4690      	mov	r8, r2
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	d82d      	bhi.n	8007158 <__ssputs_r+0x70>
 80070fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007104:	d026      	beq.n	8007154 <__ssputs_r+0x6c>
 8007106:	6965      	ldr	r5, [r4, #20]
 8007108:	6909      	ldr	r1, [r1, #16]
 800710a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800710e:	eba3 0901 	sub.w	r9, r3, r1
 8007112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007116:	1c7b      	adds	r3, r7, #1
 8007118:	444b      	add	r3, r9
 800711a:	106d      	asrs	r5, r5, #1
 800711c:	429d      	cmp	r5, r3
 800711e:	bf38      	it	cc
 8007120:	461d      	movcc	r5, r3
 8007122:	0553      	lsls	r3, r2, #21
 8007124:	d527      	bpl.n	8007176 <__ssputs_r+0x8e>
 8007126:	4629      	mov	r1, r5
 8007128:	f7ff fbd8 	bl	80068dc <_malloc_r>
 800712c:	4606      	mov	r6, r0
 800712e:	b360      	cbz	r0, 800718a <__ssputs_r+0xa2>
 8007130:	464a      	mov	r2, r9
 8007132:	6921      	ldr	r1, [r4, #16]
 8007134:	f000 fa02 	bl	800753c <memcpy>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800713e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	6126      	str	r6, [r4, #16]
 8007146:	444e      	add	r6, r9
 8007148:	6026      	str	r6, [r4, #0]
 800714a:	463e      	mov	r6, r7
 800714c:	6165      	str	r5, [r4, #20]
 800714e:	eba5 0509 	sub.w	r5, r5, r9
 8007152:	60a5      	str	r5, [r4, #8]
 8007154:	42be      	cmp	r6, r7
 8007156:	d900      	bls.n	800715a <__ssputs_r+0x72>
 8007158:	463e      	mov	r6, r7
 800715a:	4632      	mov	r2, r6
 800715c:	4641      	mov	r1, r8
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	f000 f9c2 	bl	80074e8 <memmove>
 8007164:	2000      	movs	r0, #0
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	1b9b      	subs	r3, r3, r6
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	4433      	add	r3, r6
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	462a      	mov	r2, r5
 8007178:	f000 fa32 	bl	80075e0 <_realloc_r>
 800717c:	4606      	mov	r6, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	d1e0      	bne.n	8007144 <__ssputs_r+0x5c>
 8007182:	4650      	mov	r0, sl
 8007184:	6921      	ldr	r1, [r4, #16]
 8007186:	f7ff fb37 	bl	80067f8 <_free_r>
 800718a:	230c      	movs	r3, #12
 800718c:	f8ca 3000 	str.w	r3, [sl]
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	e7e9      	b.n	8007172 <__ssputs_r+0x8a>
	...

080071a0 <_svfiprintf_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	4698      	mov	r8, r3
 80071a6:	898b      	ldrh	r3, [r1, #12]
 80071a8:	4607      	mov	r7, r0
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	460d      	mov	r5, r1
 80071ae:	4614      	mov	r4, r2
 80071b0:	b09d      	sub	sp, #116	@ 0x74
 80071b2:	d510      	bpl.n	80071d6 <_svfiprintf_r+0x36>
 80071b4:	690b      	ldr	r3, [r1, #16]
 80071b6:	b973      	cbnz	r3, 80071d6 <_svfiprintf_r+0x36>
 80071b8:	2140      	movs	r1, #64	@ 0x40
 80071ba:	f7ff fb8f 	bl	80068dc <_malloc_r>
 80071be:	6028      	str	r0, [r5, #0]
 80071c0:	6128      	str	r0, [r5, #16]
 80071c2:	b930      	cbnz	r0, 80071d2 <_svfiprintf_r+0x32>
 80071c4:	230c      	movs	r3, #12
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071cc:	b01d      	add	sp, #116	@ 0x74
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	2340      	movs	r3, #64	@ 0x40
 80071d4:	616b      	str	r3, [r5, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071da:	2320      	movs	r3, #32
 80071dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e0:	2330      	movs	r3, #48	@ 0x30
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007384 <_svfiprintf_r+0x1e4>
 80071ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071f2:	4623      	mov	r3, r4
 80071f4:	469a      	mov	sl, r3
 80071f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fa:	b10a      	cbz	r2, 8007200 <_svfiprintf_r+0x60>
 80071fc:	2a25      	cmp	r2, #37	@ 0x25
 80071fe:	d1f9      	bne.n	80071f4 <_svfiprintf_r+0x54>
 8007200:	ebba 0b04 	subs.w	fp, sl, r4
 8007204:	d00b      	beq.n	800721e <_svfiprintf_r+0x7e>
 8007206:	465b      	mov	r3, fp
 8007208:	4622      	mov	r2, r4
 800720a:	4629      	mov	r1, r5
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff ff6b 	bl	80070e8 <__ssputs_r>
 8007212:	3001      	adds	r0, #1
 8007214:	f000 80a7 	beq.w	8007366 <_svfiprintf_r+0x1c6>
 8007218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721a:	445a      	add	r2, fp
 800721c:	9209      	str	r2, [sp, #36]	@ 0x24
 800721e:	f89a 3000 	ldrb.w	r3, [sl]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 809f 	beq.w	8007366 <_svfiprintf_r+0x1c6>
 8007228:	2300      	movs	r3, #0
 800722a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800722e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007232:	f10a 0a01 	add.w	sl, sl, #1
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800723e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007240:	4654      	mov	r4, sl
 8007242:	2205      	movs	r2, #5
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	484e      	ldr	r0, [pc, #312]	@ (8007384 <_svfiprintf_r+0x1e4>)
 800724a:	f7fe fc6a 	bl	8005b22 <memchr>
 800724e:	9a04      	ldr	r2, [sp, #16]
 8007250:	b9d8      	cbnz	r0, 800728a <_svfiprintf_r+0xea>
 8007252:	06d0      	lsls	r0, r2, #27
 8007254:	bf44      	itt	mi
 8007256:	2320      	movmi	r3, #32
 8007258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725c:	0711      	lsls	r1, r2, #28
 800725e:	bf44      	itt	mi
 8007260:	232b      	movmi	r3, #43	@ 0x2b
 8007262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b2a      	cmp	r3, #42	@ 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xfa>
 800726e:	4654      	mov	r4, sl
 8007270:	2000      	movs	r0, #0
 8007272:	f04f 0c0a 	mov.w	ip, #10
 8007276:	9a07      	ldr	r2, [sp, #28]
 8007278:	4621      	mov	r1, r4
 800727a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727e:	3b30      	subs	r3, #48	@ 0x30
 8007280:	2b09      	cmp	r3, #9
 8007282:	d94b      	bls.n	800731c <_svfiprintf_r+0x17c>
 8007284:	b1b0      	cbz	r0, 80072b4 <_svfiprintf_r+0x114>
 8007286:	9207      	str	r2, [sp, #28]
 8007288:	e014      	b.n	80072b4 <_svfiprintf_r+0x114>
 800728a:	eba0 0308 	sub.w	r3, r0, r8
 800728e:	fa09 f303 	lsl.w	r3, r9, r3
 8007292:	4313      	orrs	r3, r2
 8007294:	46a2      	mov	sl, r4
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	e7d2      	b.n	8007240 <_svfiprintf_r+0xa0>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bfbb      	ittet	lt
 80072a6:	425b      	neglt	r3, r3
 80072a8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ac:	9307      	strge	r3, [sp, #28]
 80072ae:	9307      	strlt	r3, [sp, #28]
 80072b0:	bfb8      	it	lt
 80072b2:	9204      	strlt	r2, [sp, #16]
 80072b4:	7823      	ldrb	r3, [r4, #0]
 80072b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b8:	d10a      	bne.n	80072d0 <_svfiprintf_r+0x130>
 80072ba:	7863      	ldrb	r3, [r4, #1]
 80072bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80072be:	d132      	bne.n	8007326 <_svfiprintf_r+0x186>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	3402      	adds	r4, #2
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	9203      	str	r2, [sp, #12]
 80072ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007388 <_svfiprintf_r+0x1e8>
 80072d4:	2203      	movs	r2, #3
 80072d6:	4650      	mov	r0, sl
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	f7fe fc22 	bl	8005b22 <memchr>
 80072de:	b138      	cbz	r0, 80072f0 <_svfiprintf_r+0x150>
 80072e0:	2240      	movs	r2, #64	@ 0x40
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	eba0 000a 	sub.w	r0, r0, sl
 80072e8:	4082      	lsls	r2, r0
 80072ea:	4313      	orrs	r3, r2
 80072ec:	3401      	adds	r4, #1
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f4:	2206      	movs	r2, #6
 80072f6:	4825      	ldr	r0, [pc, #148]	@ (800738c <_svfiprintf_r+0x1ec>)
 80072f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fc:	f7fe fc11 	bl	8005b22 <memchr>
 8007300:	2800      	cmp	r0, #0
 8007302:	d036      	beq.n	8007372 <_svfiprintf_r+0x1d2>
 8007304:	4b22      	ldr	r3, [pc, #136]	@ (8007390 <_svfiprintf_r+0x1f0>)
 8007306:	bb1b      	cbnz	r3, 8007350 <_svfiprintf_r+0x1b0>
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	3307      	adds	r3, #7
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	3308      	adds	r3, #8
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	4433      	add	r3, r6
 8007318:	9309      	str	r3, [sp, #36]	@ 0x24
 800731a:	e76a      	b.n	80071f2 <_svfiprintf_r+0x52>
 800731c:	460c      	mov	r4, r1
 800731e:	2001      	movs	r0, #1
 8007320:	fb0c 3202 	mla	r2, ip, r2, r3
 8007324:	e7a8      	b.n	8007278 <_svfiprintf_r+0xd8>
 8007326:	2300      	movs	r3, #0
 8007328:	f04f 0c0a 	mov.w	ip, #10
 800732c:	4619      	mov	r1, r3
 800732e:	3401      	adds	r4, #1
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	4620      	mov	r0, r4
 8007334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007338:	3a30      	subs	r2, #48	@ 0x30
 800733a:	2a09      	cmp	r2, #9
 800733c:	d903      	bls.n	8007346 <_svfiprintf_r+0x1a6>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c6      	beq.n	80072d0 <_svfiprintf_r+0x130>
 8007342:	9105      	str	r1, [sp, #20]
 8007344:	e7c4      	b.n	80072d0 <_svfiprintf_r+0x130>
 8007346:	4604      	mov	r4, r0
 8007348:	2301      	movs	r3, #1
 800734a:	fb0c 2101 	mla	r1, ip, r1, r2
 800734e:	e7f0      	b.n	8007332 <_svfiprintf_r+0x192>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	462a      	mov	r2, r5
 8007356:	4638      	mov	r0, r7
 8007358:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <_svfiprintf_r+0x1f4>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	f7fd fe7e 	bl	800505c <_printf_float>
 8007360:	1c42      	adds	r2, r0, #1
 8007362:	4606      	mov	r6, r0
 8007364:	d1d6      	bne.n	8007314 <_svfiprintf_r+0x174>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	065b      	lsls	r3, r3, #25
 800736a:	f53f af2d 	bmi.w	80071c8 <_svfiprintf_r+0x28>
 800736e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007370:	e72c      	b.n	80071cc <_svfiprintf_r+0x2c>
 8007372:	ab03      	add	r3, sp, #12
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	462a      	mov	r2, r5
 8007378:	4638      	mov	r0, r7
 800737a:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <_svfiprintf_r+0x1f4>)
 800737c:	a904      	add	r1, sp, #16
 800737e:	f7fe f90b 	bl	8005598 <_printf_i>
 8007382:	e7ed      	b.n	8007360 <_svfiprintf_r+0x1c0>
 8007384:	0800a0b8 	.word	0x0800a0b8
 8007388:	0800a0be 	.word	0x0800a0be
 800738c:	0800a0c2 	.word	0x0800a0c2
 8007390:	0800505d 	.word	0x0800505d
 8007394:	080070e9 	.word	0x080070e9

08007398 <__sflush_r>:
 8007398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	0716      	lsls	r6, r2, #28
 80073a0:	4605      	mov	r5, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	d454      	bmi.n	8007450 <__sflush_r+0xb8>
 80073a6:	684b      	ldr	r3, [r1, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dc02      	bgt.n	80073b2 <__sflush_r+0x1a>
 80073ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd48      	ble.n	8007444 <__sflush_r+0xac>
 80073b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	d045      	beq.n	8007444 <__sflush_r+0xac>
 80073b8:	2300      	movs	r3, #0
 80073ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073be:	682f      	ldr	r7, [r5, #0]
 80073c0:	6a21      	ldr	r1, [r4, #32]
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	d030      	beq.n	8007428 <__sflush_r+0x90>
 80073c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	0759      	lsls	r1, r3, #29
 80073cc:	d505      	bpl.n	80073da <__sflush_r+0x42>
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073d4:	b10b      	cbz	r3, 80073da <__sflush_r+0x42>
 80073d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	4628      	mov	r0, r5
 80073de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073e0:	6a21      	ldr	r1, [r4, #32]
 80073e2:	47b0      	blx	r6
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	d106      	bne.n	80073f8 <__sflush_r+0x60>
 80073ea:	6829      	ldr	r1, [r5, #0]
 80073ec:	291d      	cmp	r1, #29
 80073ee:	d82b      	bhi.n	8007448 <__sflush_r+0xb0>
 80073f0:	4a28      	ldr	r2, [pc, #160]	@ (8007494 <__sflush_r+0xfc>)
 80073f2:	40ca      	lsrs	r2, r1
 80073f4:	07d6      	lsls	r6, r2, #31
 80073f6:	d527      	bpl.n	8007448 <__sflush_r+0xb0>
 80073f8:	2200      	movs	r2, #0
 80073fa:	6062      	str	r2, [r4, #4]
 80073fc:	6922      	ldr	r2, [r4, #16]
 80073fe:	04d9      	lsls	r1, r3, #19
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	d504      	bpl.n	800740e <__sflush_r+0x76>
 8007404:	1c42      	adds	r2, r0, #1
 8007406:	d101      	bne.n	800740c <__sflush_r+0x74>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b903      	cbnz	r3, 800740e <__sflush_r+0x76>
 800740c:	6560      	str	r0, [r4, #84]	@ 0x54
 800740e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007410:	602f      	str	r7, [r5, #0]
 8007412:	b1b9      	cbz	r1, 8007444 <__sflush_r+0xac>
 8007414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007418:	4299      	cmp	r1, r3
 800741a:	d002      	beq.n	8007422 <__sflush_r+0x8a>
 800741c:	4628      	mov	r0, r5
 800741e:	f7ff f9eb 	bl	80067f8 <_free_r>
 8007422:	2300      	movs	r3, #0
 8007424:	6363      	str	r3, [r4, #52]	@ 0x34
 8007426:	e00d      	b.n	8007444 <__sflush_r+0xac>
 8007428:	2301      	movs	r3, #1
 800742a:	4628      	mov	r0, r5
 800742c:	47b0      	blx	r6
 800742e:	4602      	mov	r2, r0
 8007430:	1c50      	adds	r0, r2, #1
 8007432:	d1c9      	bne.n	80073c8 <__sflush_r+0x30>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0c6      	beq.n	80073c8 <__sflush_r+0x30>
 800743a:	2b1d      	cmp	r3, #29
 800743c:	d001      	beq.n	8007442 <__sflush_r+0xaa>
 800743e:	2b16      	cmp	r3, #22
 8007440:	d11d      	bne.n	800747e <__sflush_r+0xe6>
 8007442:	602f      	str	r7, [r5, #0]
 8007444:	2000      	movs	r0, #0
 8007446:	e021      	b.n	800748c <__sflush_r+0xf4>
 8007448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744c:	b21b      	sxth	r3, r3
 800744e:	e01a      	b.n	8007486 <__sflush_r+0xee>
 8007450:	690f      	ldr	r7, [r1, #16]
 8007452:	2f00      	cmp	r7, #0
 8007454:	d0f6      	beq.n	8007444 <__sflush_r+0xac>
 8007456:	0793      	lsls	r3, r2, #30
 8007458:	bf18      	it	ne
 800745a:	2300      	movne	r3, #0
 800745c:	680e      	ldr	r6, [r1, #0]
 800745e:	bf08      	it	eq
 8007460:	694b      	ldreq	r3, [r1, #20]
 8007462:	1bf6      	subs	r6, r6, r7
 8007464:	600f      	str	r7, [r1, #0]
 8007466:	608b      	str	r3, [r1, #8]
 8007468:	2e00      	cmp	r6, #0
 800746a:	ddeb      	ble.n	8007444 <__sflush_r+0xac>
 800746c:	4633      	mov	r3, r6
 800746e:	463a      	mov	r2, r7
 8007470:	4628      	mov	r0, r5
 8007472:	6a21      	ldr	r1, [r4, #32]
 8007474:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007478:	47e0      	blx	ip
 800747a:	2800      	cmp	r0, #0
 800747c:	dc07      	bgt.n	800748e <__sflush_r+0xf6>
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748e:	4407      	add	r7, r0
 8007490:	1a36      	subs	r6, r6, r0
 8007492:	e7e9      	b.n	8007468 <__sflush_r+0xd0>
 8007494:	20400001 	.word	0x20400001

08007498 <_fflush_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b913      	cbnz	r3, 80074a8 <_fflush_r+0x10>
 80074a2:	2500      	movs	r5, #0
 80074a4:	4628      	mov	r0, r5
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	b118      	cbz	r0, 80074b2 <_fflush_r+0x1a>
 80074aa:	6a03      	ldr	r3, [r0, #32]
 80074ac:	b90b      	cbnz	r3, 80074b2 <_fflush_r+0x1a>
 80074ae:	f7fe fa1d 	bl	80058ec <__sinit>
 80074b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f3      	beq.n	80074a2 <_fflush_r+0xa>
 80074ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074bc:	07d0      	lsls	r0, r2, #31
 80074be:	d404      	bmi.n	80074ca <_fflush_r+0x32>
 80074c0:	0599      	lsls	r1, r3, #22
 80074c2:	d402      	bmi.n	80074ca <_fflush_r+0x32>
 80074c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074c6:	f7fe fb2a 	bl	8005b1e <__retarget_lock_acquire_recursive>
 80074ca:	4628      	mov	r0, r5
 80074cc:	4621      	mov	r1, r4
 80074ce:	f7ff ff63 	bl	8007398 <__sflush_r>
 80074d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074d4:	4605      	mov	r5, r0
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	d4e4      	bmi.n	80074a4 <_fflush_r+0xc>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	059b      	lsls	r3, r3, #22
 80074de:	d4e1      	bmi.n	80074a4 <_fflush_r+0xc>
 80074e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074e2:	f7fe fb1d 	bl	8005b20 <__retarget_lock_release_recursive>
 80074e6:	e7dd      	b.n	80074a4 <_fflush_r+0xc>

080074e8 <memmove>:
 80074e8:	4288      	cmp	r0, r1
 80074ea:	b510      	push	{r4, lr}
 80074ec:	eb01 0402 	add.w	r4, r1, r2
 80074f0:	d902      	bls.n	80074f8 <memmove+0x10>
 80074f2:	4284      	cmp	r4, r0
 80074f4:	4623      	mov	r3, r4
 80074f6:	d807      	bhi.n	8007508 <memmove+0x20>
 80074f8:	1e43      	subs	r3, r0, #1
 80074fa:	42a1      	cmp	r1, r4
 80074fc:	d008      	beq.n	8007510 <memmove+0x28>
 80074fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007506:	e7f8      	b.n	80074fa <memmove+0x12>
 8007508:	4601      	mov	r1, r0
 800750a:	4402      	add	r2, r0
 800750c:	428a      	cmp	r2, r1
 800750e:	d100      	bne.n	8007512 <memmove+0x2a>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751a:	e7f7      	b.n	800750c <memmove+0x24>

0800751c <_sbrk_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	2300      	movs	r3, #0
 8007520:	4d05      	ldr	r5, [pc, #20]	@ (8007538 <_sbrk_r+0x1c>)
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fa fe2e 	bl	8002188 <_sbrk>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_sbrk_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_sbrk_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000e7c 	.word	0x20000e7c

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	4291      	cmp	r1, r2
 8007550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <__assert_func>:
 8007558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755a:	4614      	mov	r4, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <__assert_func+0x2c>)
 8007560:	4605      	mov	r5, r0
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68d8      	ldr	r0, [r3, #12]
 8007566:	b14c      	cbz	r4, 800757c <__assert_func+0x24>
 8007568:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <__assert_func+0x30>)
 800756a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800756e:	9100      	str	r1, [sp, #0]
 8007570:	462b      	mov	r3, r5
 8007572:	4906      	ldr	r1, [pc, #24]	@ (800758c <__assert_func+0x34>)
 8007574:	f000 f870 	bl	8007658 <fiprintf>
 8007578:	f000 f880 	bl	800767c <abort>
 800757c:	4b04      	ldr	r3, [pc, #16]	@ (8007590 <__assert_func+0x38>)
 800757e:	461c      	mov	r4, r3
 8007580:	e7f3      	b.n	800756a <__assert_func+0x12>
 8007582:	bf00      	nop
 8007584:	2000002c 	.word	0x2000002c
 8007588:	0800a0d3 	.word	0x0800a0d3
 800758c:	0800a0e0 	.word	0x0800a0e0
 8007590:	0800a10e 	.word	0x0800a10e

08007594 <_calloc_r>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	fba1 5402 	umull	r5, r4, r1, r2
 800759a:	b934      	cbnz	r4, 80075aa <_calloc_r+0x16>
 800759c:	4629      	mov	r1, r5
 800759e:	f7ff f99d 	bl	80068dc <_malloc_r>
 80075a2:	4606      	mov	r6, r0
 80075a4:	b928      	cbnz	r0, 80075b2 <_calloc_r+0x1e>
 80075a6:	4630      	mov	r0, r6
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	220c      	movs	r2, #12
 80075ac:	2600      	movs	r6, #0
 80075ae:	6002      	str	r2, [r0, #0]
 80075b0:	e7f9      	b.n	80075a6 <_calloc_r+0x12>
 80075b2:	462a      	mov	r2, r5
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7fe fa34 	bl	8005a22 <memset>
 80075ba:	e7f4      	b.n	80075a6 <_calloc_r+0x12>

080075bc <__ascii_mbtowc>:
 80075bc:	b082      	sub	sp, #8
 80075be:	b901      	cbnz	r1, 80075c2 <__ascii_mbtowc+0x6>
 80075c0:	a901      	add	r1, sp, #4
 80075c2:	b142      	cbz	r2, 80075d6 <__ascii_mbtowc+0x1a>
 80075c4:	b14b      	cbz	r3, 80075da <__ascii_mbtowc+0x1e>
 80075c6:	7813      	ldrb	r3, [r2, #0]
 80075c8:	600b      	str	r3, [r1, #0]
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	1e10      	subs	r0, r2, #0
 80075ce:	bf18      	it	ne
 80075d0:	2001      	movne	r0, #1
 80075d2:	b002      	add	sp, #8
 80075d4:	4770      	bx	lr
 80075d6:	4610      	mov	r0, r2
 80075d8:	e7fb      	b.n	80075d2 <__ascii_mbtowc+0x16>
 80075da:	f06f 0001 	mvn.w	r0, #1
 80075de:	e7f8      	b.n	80075d2 <__ascii_mbtowc+0x16>

080075e0 <_realloc_r>:
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4607      	mov	r7, r0
 80075e6:	4614      	mov	r4, r2
 80075e8:	460d      	mov	r5, r1
 80075ea:	b921      	cbnz	r1, 80075f6 <_realloc_r+0x16>
 80075ec:	4611      	mov	r1, r2
 80075ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	f7ff b973 	b.w	80068dc <_malloc_r>
 80075f6:	b92a      	cbnz	r2, 8007604 <_realloc_r+0x24>
 80075f8:	f7ff f8fe 	bl	80067f8 <_free_r>
 80075fc:	4625      	mov	r5, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	f000 f841 	bl	800768a <_malloc_usable_size_r>
 8007608:	4284      	cmp	r4, r0
 800760a:	4606      	mov	r6, r0
 800760c:	d802      	bhi.n	8007614 <_realloc_r+0x34>
 800760e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007612:	d8f4      	bhi.n	80075fe <_realloc_r+0x1e>
 8007614:	4621      	mov	r1, r4
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff f960 	bl	80068dc <_malloc_r>
 800761c:	4680      	mov	r8, r0
 800761e:	b908      	cbnz	r0, 8007624 <_realloc_r+0x44>
 8007620:	4645      	mov	r5, r8
 8007622:	e7ec      	b.n	80075fe <_realloc_r+0x1e>
 8007624:	42b4      	cmp	r4, r6
 8007626:	4622      	mov	r2, r4
 8007628:	4629      	mov	r1, r5
 800762a:	bf28      	it	cs
 800762c:	4632      	movcs	r2, r6
 800762e:	f7ff ff85 	bl	800753c <memcpy>
 8007632:	4629      	mov	r1, r5
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff f8df 	bl	80067f8 <_free_r>
 800763a:	e7f1      	b.n	8007620 <_realloc_r+0x40>

0800763c <__ascii_wctomb>:
 800763c:	4603      	mov	r3, r0
 800763e:	4608      	mov	r0, r1
 8007640:	b141      	cbz	r1, 8007654 <__ascii_wctomb+0x18>
 8007642:	2aff      	cmp	r2, #255	@ 0xff
 8007644:	d904      	bls.n	8007650 <__ascii_wctomb+0x14>
 8007646:	228a      	movs	r2, #138	@ 0x8a
 8007648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	4770      	bx	lr
 8007650:	2001      	movs	r0, #1
 8007652:	700a      	strb	r2, [r1, #0]
 8007654:	4770      	bx	lr
	...

08007658 <fiprintf>:
 8007658:	b40e      	push	{r1, r2, r3}
 800765a:	b503      	push	{r0, r1, lr}
 800765c:	4601      	mov	r1, r0
 800765e:	ab03      	add	r3, sp, #12
 8007660:	4805      	ldr	r0, [pc, #20]	@ (8007678 <fiprintf+0x20>)
 8007662:	f853 2b04 	ldr.w	r2, [r3], #4
 8007666:	6800      	ldr	r0, [r0, #0]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	f000 f83d 	bl	80076e8 <_vfiprintf_r>
 800766e:	b002      	add	sp, #8
 8007670:	f85d eb04 	ldr.w	lr, [sp], #4
 8007674:	b003      	add	sp, #12
 8007676:	4770      	bx	lr
 8007678:	2000002c 	.word	0x2000002c

0800767c <abort>:
 800767c:	2006      	movs	r0, #6
 800767e:	b508      	push	{r3, lr}
 8007680:	f000 fa06 	bl	8007a90 <raise>
 8007684:	2001      	movs	r0, #1
 8007686:	f7fa fd0a 	bl	800209e <_exit>

0800768a <_malloc_usable_size_r>:
 800768a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768e:	1f18      	subs	r0, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfbc      	itt	lt
 8007694:	580b      	ldrlt	r3, [r1, r0]
 8007696:	18c0      	addlt	r0, r0, r3
 8007698:	4770      	bx	lr

0800769a <__sfputc_r>:
 800769a:	6893      	ldr	r3, [r2, #8]
 800769c:	b410      	push	{r4}
 800769e:	3b01      	subs	r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	6093      	str	r3, [r2, #8]
 80076a4:	da07      	bge.n	80076b6 <__sfputc_r+0x1c>
 80076a6:	6994      	ldr	r4, [r2, #24]
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	db01      	blt.n	80076b0 <__sfputc_r+0x16>
 80076ac:	290a      	cmp	r1, #10
 80076ae:	d102      	bne.n	80076b6 <__sfputc_r+0x1c>
 80076b0:	bc10      	pop	{r4}
 80076b2:	f000 b931 	b.w	8007918 <__swbuf_r>
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	1c58      	adds	r0, r3, #1
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	7019      	strb	r1, [r3, #0]
 80076be:	4608      	mov	r0, r1
 80076c0:	bc10      	pop	{r4}
 80076c2:	4770      	bx	lr

080076c4 <__sfputs_r>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	4614      	mov	r4, r2
 80076cc:	18d5      	adds	r5, r2, r3
 80076ce:	42ac      	cmp	r4, r5
 80076d0:	d101      	bne.n	80076d6 <__sfputs_r+0x12>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e007      	b.n	80076e6 <__sfputs_r+0x22>
 80076d6:	463a      	mov	r2, r7
 80076d8:	4630      	mov	r0, r6
 80076da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076de:	f7ff ffdc 	bl	800769a <__sfputc_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d1f3      	bne.n	80076ce <__sfputs_r+0xa>
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076e8 <_vfiprintf_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	460d      	mov	r5, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	4698      	mov	r8, r3
 80076f2:	4606      	mov	r6, r0
 80076f4:	b09d      	sub	sp, #116	@ 0x74
 80076f6:	b118      	cbz	r0, 8007700 <_vfiprintf_r+0x18>
 80076f8:	6a03      	ldr	r3, [r0, #32]
 80076fa:	b90b      	cbnz	r3, 8007700 <_vfiprintf_r+0x18>
 80076fc:	f7fe f8f6 	bl	80058ec <__sinit>
 8007700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007702:	07d9      	lsls	r1, r3, #31
 8007704:	d405      	bmi.n	8007712 <_vfiprintf_r+0x2a>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	059a      	lsls	r2, r3, #22
 800770a:	d402      	bmi.n	8007712 <_vfiprintf_r+0x2a>
 800770c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800770e:	f7fe fa06 	bl	8005b1e <__retarget_lock_acquire_recursive>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	071b      	lsls	r3, r3, #28
 8007716:	d501      	bpl.n	800771c <_vfiprintf_r+0x34>
 8007718:	692b      	ldr	r3, [r5, #16]
 800771a:	b99b      	cbnz	r3, 8007744 <_vfiprintf_r+0x5c>
 800771c:	4629      	mov	r1, r5
 800771e:	4630      	mov	r0, r6
 8007720:	f000 f938 	bl	8007994 <__swsetup_r>
 8007724:	b170      	cbz	r0, 8007744 <_vfiprintf_r+0x5c>
 8007726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007728:	07dc      	lsls	r4, r3, #31
 800772a:	d504      	bpl.n	8007736 <_vfiprintf_r+0x4e>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007730:	b01d      	add	sp, #116	@ 0x74
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	0598      	lsls	r0, r3, #22
 800773a:	d4f7      	bmi.n	800772c <_vfiprintf_r+0x44>
 800773c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800773e:	f7fe f9ef 	bl	8005b20 <__retarget_lock_release_recursive>
 8007742:	e7f3      	b.n	800772c <_vfiprintf_r+0x44>
 8007744:	2300      	movs	r3, #0
 8007746:	9309      	str	r3, [sp, #36]	@ 0x24
 8007748:	2320      	movs	r3, #32
 800774a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800774e:	2330      	movs	r3, #48	@ 0x30
 8007750:	f04f 0901 	mov.w	r9, #1
 8007754:	f8cd 800c 	str.w	r8, [sp, #12]
 8007758:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007904 <_vfiprintf_r+0x21c>
 800775c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007760:	4623      	mov	r3, r4
 8007762:	469a      	mov	sl, r3
 8007764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007768:	b10a      	cbz	r2, 800776e <_vfiprintf_r+0x86>
 800776a:	2a25      	cmp	r2, #37	@ 0x25
 800776c:	d1f9      	bne.n	8007762 <_vfiprintf_r+0x7a>
 800776e:	ebba 0b04 	subs.w	fp, sl, r4
 8007772:	d00b      	beq.n	800778c <_vfiprintf_r+0xa4>
 8007774:	465b      	mov	r3, fp
 8007776:	4622      	mov	r2, r4
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff ffa2 	bl	80076c4 <__sfputs_r>
 8007780:	3001      	adds	r0, #1
 8007782:	f000 80a7 	beq.w	80078d4 <_vfiprintf_r+0x1ec>
 8007786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007788:	445a      	add	r2, fp
 800778a:	9209      	str	r2, [sp, #36]	@ 0x24
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 809f 	beq.w	80078d4 <_vfiprintf_r+0x1ec>
 8007796:	2300      	movs	r3, #0
 8007798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800779c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a0:	f10a 0a01 	add.w	sl, sl, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ae:	4654      	mov	r4, sl
 80077b0:	2205      	movs	r2, #5
 80077b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b6:	4853      	ldr	r0, [pc, #332]	@ (8007904 <_vfiprintf_r+0x21c>)
 80077b8:	f7fe f9b3 	bl	8005b22 <memchr>
 80077bc:	9a04      	ldr	r2, [sp, #16]
 80077be:	b9d8      	cbnz	r0, 80077f8 <_vfiprintf_r+0x110>
 80077c0:	06d1      	lsls	r1, r2, #27
 80077c2:	bf44      	itt	mi
 80077c4:	2320      	movmi	r3, #32
 80077c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ca:	0713      	lsls	r3, r2, #28
 80077cc:	bf44      	itt	mi
 80077ce:	232b      	movmi	r3, #43	@ 0x2b
 80077d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d4:	f89a 3000 	ldrb.w	r3, [sl]
 80077d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077da:	d015      	beq.n	8007808 <_vfiprintf_r+0x120>
 80077dc:	4654      	mov	r4, sl
 80077de:	2000      	movs	r0, #0
 80077e0:	f04f 0c0a 	mov.w	ip, #10
 80077e4:	9a07      	ldr	r2, [sp, #28]
 80077e6:	4621      	mov	r1, r4
 80077e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ec:	3b30      	subs	r3, #48	@ 0x30
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d94b      	bls.n	800788a <_vfiprintf_r+0x1a2>
 80077f2:	b1b0      	cbz	r0, 8007822 <_vfiprintf_r+0x13a>
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	e014      	b.n	8007822 <_vfiprintf_r+0x13a>
 80077f8:	eba0 0308 	sub.w	r3, r0, r8
 80077fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	46a2      	mov	sl, r4
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	e7d2      	b.n	80077ae <_vfiprintf_r+0xc6>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d19      	adds	r1, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfbb      	ittet	lt
 8007814:	425b      	neglt	r3, r3
 8007816:	f042 0202 	orrlt.w	r2, r2, #2
 800781a:	9307      	strge	r3, [sp, #28]
 800781c:	9307      	strlt	r3, [sp, #28]
 800781e:	bfb8      	it	lt
 8007820:	9204      	strlt	r2, [sp, #16]
 8007822:	7823      	ldrb	r3, [r4, #0]
 8007824:	2b2e      	cmp	r3, #46	@ 0x2e
 8007826:	d10a      	bne.n	800783e <_vfiprintf_r+0x156>
 8007828:	7863      	ldrb	r3, [r4, #1]
 800782a:	2b2a      	cmp	r3, #42	@ 0x2a
 800782c:	d132      	bne.n	8007894 <_vfiprintf_r+0x1ac>
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	3402      	adds	r4, #2
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	9203      	str	r2, [sp, #12]
 8007838:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800783c:	9305      	str	r3, [sp, #20]
 800783e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007908 <_vfiprintf_r+0x220>
 8007842:	2203      	movs	r2, #3
 8007844:	4650      	mov	r0, sl
 8007846:	7821      	ldrb	r1, [r4, #0]
 8007848:	f7fe f96b 	bl	8005b22 <memchr>
 800784c:	b138      	cbz	r0, 800785e <_vfiprintf_r+0x176>
 800784e:	2240      	movs	r2, #64	@ 0x40
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	eba0 000a 	sub.w	r0, r0, sl
 8007856:	4082      	lsls	r2, r0
 8007858:	4313      	orrs	r3, r2
 800785a:	3401      	adds	r4, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007862:	2206      	movs	r2, #6
 8007864:	4829      	ldr	r0, [pc, #164]	@ (800790c <_vfiprintf_r+0x224>)
 8007866:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800786a:	f7fe f95a 	bl	8005b22 <memchr>
 800786e:	2800      	cmp	r0, #0
 8007870:	d03f      	beq.n	80078f2 <_vfiprintf_r+0x20a>
 8007872:	4b27      	ldr	r3, [pc, #156]	@ (8007910 <_vfiprintf_r+0x228>)
 8007874:	bb1b      	cbnz	r3, 80078be <_vfiprintf_r+0x1d6>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	3307      	adds	r3, #7
 800787a:	f023 0307 	bic.w	r3, r3, #7
 800787e:	3308      	adds	r3, #8
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007884:	443b      	add	r3, r7
 8007886:	9309      	str	r3, [sp, #36]	@ 0x24
 8007888:	e76a      	b.n	8007760 <_vfiprintf_r+0x78>
 800788a:	460c      	mov	r4, r1
 800788c:	2001      	movs	r0, #1
 800788e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007892:	e7a8      	b.n	80077e6 <_vfiprintf_r+0xfe>
 8007894:	2300      	movs	r3, #0
 8007896:	f04f 0c0a 	mov.w	ip, #10
 800789a:	4619      	mov	r1, r3
 800789c:	3401      	adds	r4, #1
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a6:	3a30      	subs	r2, #48	@ 0x30
 80078a8:	2a09      	cmp	r2, #9
 80078aa:	d903      	bls.n	80078b4 <_vfiprintf_r+0x1cc>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0c6      	beq.n	800783e <_vfiprintf_r+0x156>
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	e7c4      	b.n	800783e <_vfiprintf_r+0x156>
 80078b4:	4604      	mov	r4, r0
 80078b6:	2301      	movs	r3, #1
 80078b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078bc:	e7f0      	b.n	80078a0 <_vfiprintf_r+0x1b8>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4630      	mov	r0, r6
 80078c6:	4b13      	ldr	r3, [pc, #76]	@ (8007914 <_vfiprintf_r+0x22c>)
 80078c8:	a904      	add	r1, sp, #16
 80078ca:	f7fd fbc7 	bl	800505c <_printf_float>
 80078ce:	4607      	mov	r7, r0
 80078d0:	1c78      	adds	r0, r7, #1
 80078d2:	d1d6      	bne.n	8007882 <_vfiprintf_r+0x19a>
 80078d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_vfiprintf_r+0x1fe>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	059a      	lsls	r2, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_vfiprintf_r+0x1fe>
 80078e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078e2:	f7fe f91d 	bl	8005b20 <__retarget_lock_release_recursive>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	065b      	lsls	r3, r3, #25
 80078ea:	f53f af1f 	bmi.w	800772c <_vfiprintf_r+0x44>
 80078ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078f0:	e71e      	b.n	8007730 <_vfiprintf_r+0x48>
 80078f2:	ab03      	add	r3, sp, #12
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	462a      	mov	r2, r5
 80078f8:	4630      	mov	r0, r6
 80078fa:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <_vfiprintf_r+0x22c>)
 80078fc:	a904      	add	r1, sp, #16
 80078fe:	f7fd fe4b 	bl	8005598 <_printf_i>
 8007902:	e7e4      	b.n	80078ce <_vfiprintf_r+0x1e6>
 8007904:	0800a0b8 	.word	0x0800a0b8
 8007908:	0800a0be 	.word	0x0800a0be
 800790c:	0800a0c2 	.word	0x0800a0c2
 8007910:	0800505d 	.word	0x0800505d
 8007914:	080076c5 	.word	0x080076c5

08007918 <__swbuf_r>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	460e      	mov	r6, r1
 800791c:	4614      	mov	r4, r2
 800791e:	4605      	mov	r5, r0
 8007920:	b118      	cbz	r0, 800792a <__swbuf_r+0x12>
 8007922:	6a03      	ldr	r3, [r0, #32]
 8007924:	b90b      	cbnz	r3, 800792a <__swbuf_r+0x12>
 8007926:	f7fd ffe1 	bl	80058ec <__sinit>
 800792a:	69a3      	ldr	r3, [r4, #24]
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	071a      	lsls	r2, r3, #28
 8007932:	d501      	bpl.n	8007938 <__swbuf_r+0x20>
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	b943      	cbnz	r3, 800794a <__swbuf_r+0x32>
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f82a 	bl	8007994 <__swsetup_r>
 8007940:	b118      	cbz	r0, 800794a <__swbuf_r+0x32>
 8007942:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007946:	4638      	mov	r0, r7
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	b2f6      	uxtb	r6, r6
 8007950:	1a98      	subs	r0, r3, r2
 8007952:	6963      	ldr	r3, [r4, #20]
 8007954:	4637      	mov	r7, r6
 8007956:	4283      	cmp	r3, r0
 8007958:	dc05      	bgt.n	8007966 <__swbuf_r+0x4e>
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f7ff fd9b 	bl	8007498 <_fflush_r>
 8007962:	2800      	cmp	r0, #0
 8007964:	d1ed      	bne.n	8007942 <__swbuf_r+0x2a>
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	3b01      	subs	r3, #1
 800796a:	60a3      	str	r3, [r4, #8]
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	701e      	strb	r6, [r3, #0]
 8007974:	6962      	ldr	r2, [r4, #20]
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	429a      	cmp	r2, r3
 800797a:	d004      	beq.n	8007986 <__swbuf_r+0x6e>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	07db      	lsls	r3, r3, #31
 8007980:	d5e1      	bpl.n	8007946 <__swbuf_r+0x2e>
 8007982:	2e0a      	cmp	r6, #10
 8007984:	d1df      	bne.n	8007946 <__swbuf_r+0x2e>
 8007986:	4621      	mov	r1, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff fd85 	bl	8007498 <_fflush_r>
 800798e:	2800      	cmp	r0, #0
 8007990:	d0d9      	beq.n	8007946 <__swbuf_r+0x2e>
 8007992:	e7d6      	b.n	8007942 <__swbuf_r+0x2a>

08007994 <__swsetup_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4b29      	ldr	r3, [pc, #164]	@ (8007a3c <__swsetup_r+0xa8>)
 8007998:	4605      	mov	r5, r0
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	460c      	mov	r4, r1
 800799e:	b118      	cbz	r0, 80079a8 <__swsetup_r+0x14>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <__swsetup_r+0x14>
 80079a4:	f7fd ffa2 	bl	80058ec <__sinit>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	d422      	bmi.n	80079f6 <__swsetup_r+0x62>
 80079b0:	06da      	lsls	r2, r3, #27
 80079b2:	d407      	bmi.n	80079c4 <__swsetup_r+0x30>
 80079b4:	2209      	movs	r2, #9
 80079b6:	602a      	str	r2, [r5, #0]
 80079b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	e033      	b.n	8007a2c <__swsetup_r+0x98>
 80079c4:	0758      	lsls	r0, r3, #29
 80079c6:	d512      	bpl.n	80079ee <__swsetup_r+0x5a>
 80079c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ca:	b141      	cbz	r1, 80079de <__swsetup_r+0x4a>
 80079cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <__swsetup_r+0x46>
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7fe ff0f 	bl	80067f8 <_free_r>
 80079da:	2300      	movs	r3, #0
 80079dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	2300      	movs	r3, #0
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f043 0308 	orr.w	r3, r3, #8
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	b94b      	cbnz	r3, 8007a0e <__swsetup_r+0x7a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a04:	d003      	beq.n	8007a0e <__swsetup_r+0x7a>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 f882 	bl	8007b12 <__smakebuf_r>
 8007a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a12:	f013 0201 	ands.w	r2, r3, #1
 8007a16:	d00a      	beq.n	8007a2e <__swsetup_r+0x9a>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	60a2      	str	r2, [r4, #8]
 8007a1c:	6962      	ldr	r2, [r4, #20]
 8007a1e:	4252      	negs	r2, r2
 8007a20:	61a2      	str	r2, [r4, #24]
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	b942      	cbnz	r2, 8007a38 <__swsetup_r+0xa4>
 8007a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a2a:	d1c5      	bne.n	80079b8 <__swsetup_r+0x24>
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	0799      	lsls	r1, r3, #30
 8007a30:	bf58      	it	pl
 8007a32:	6962      	ldrpl	r2, [r4, #20]
 8007a34:	60a2      	str	r2, [r4, #8]
 8007a36:	e7f4      	b.n	8007a22 <__swsetup_r+0x8e>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e7f7      	b.n	8007a2c <__swsetup_r+0x98>
 8007a3c:	2000002c 	.word	0x2000002c

08007a40 <_raise_r>:
 8007a40:	291f      	cmp	r1, #31
 8007a42:	b538      	push	{r3, r4, r5, lr}
 8007a44:	4605      	mov	r5, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	d904      	bls.n	8007a54 <_raise_r+0x14>
 8007a4a:	2316      	movs	r3, #22
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a56:	b112      	cbz	r2, 8007a5e <_raise_r+0x1e>
 8007a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a5c:	b94b      	cbnz	r3, 8007a72 <_raise_r+0x32>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f830 	bl	8007ac4 <_getpid_r>
 8007a64:	4622      	mov	r2, r4
 8007a66:	4601      	mov	r1, r0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6e:	f000 b817 	b.w	8007aa0 <_kill_r>
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d00a      	beq.n	8007a8c <_raise_r+0x4c>
 8007a76:	1c59      	adds	r1, r3, #1
 8007a78:	d103      	bne.n	8007a82 <_raise_r+0x42>
 8007a7a:	2316      	movs	r3, #22
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e7e7      	b.n	8007a52 <_raise_r+0x12>
 8007a82:	2100      	movs	r1, #0
 8007a84:	4620      	mov	r0, r4
 8007a86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a8a:	4798      	blx	r3
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7e0      	b.n	8007a52 <_raise_r+0x12>

08007a90 <raise>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	@ (8007a9c <raise+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f7ff bfd3 	b.w	8007a40 <_raise_r>
 8007a9a:	bf00      	nop
 8007a9c:	2000002c 	.word	0x2000002c

08007aa0 <_kill_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4d06      	ldr	r5, [pc, #24]	@ (8007ac0 <_kill_r+0x20>)
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	f7fa fae6 	bl	800207e <_kill>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d102      	bne.n	8007abc <_kill_r+0x1c>
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	b103      	cbz	r3, 8007abc <_kill_r+0x1c>
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000e7c 	.word	0x20000e7c

08007ac4 <_getpid_r>:
 8007ac4:	f7fa bad4 	b.w	8002070 <_getpid>

08007ac8 <__swhatbuf_r>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	2900      	cmp	r1, #0
 8007ad4:	461e      	mov	r6, r3
 8007ad6:	b096      	sub	sp, #88	@ 0x58
 8007ad8:	da0c      	bge.n	8007af4 <__swhatbuf_r+0x2c>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	2100      	movs	r1, #0
 8007ade:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ae2:	bf14      	ite	ne
 8007ae4:	2340      	movne	r3, #64	@ 0x40
 8007ae6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007aea:	2000      	movs	r0, #0
 8007aec:	6031      	str	r1, [r6, #0]
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	b016      	add	sp, #88	@ 0x58
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	466a      	mov	r2, sp
 8007af6:	f000 f849 	bl	8007b8c <_fstat_r>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	dbed      	blt.n	8007ada <__swhatbuf_r+0x12>
 8007afe:	9901      	ldr	r1, [sp, #4]
 8007b00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b08:	4259      	negs	r1, r3
 8007b0a:	4159      	adcs	r1, r3
 8007b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b10:	e7eb      	b.n	8007aea <__swhatbuf_r+0x22>

08007b12 <__smakebuf_r>:
 8007b12:	898b      	ldrh	r3, [r1, #12]
 8007b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b16:	079d      	lsls	r5, r3, #30
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	d507      	bpl.n	8007b2e <__smakebuf_r+0x1c>
 8007b1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	2301      	movs	r3, #1
 8007b28:	6163      	str	r3, [r4, #20]
 8007b2a:	b003      	add	sp, #12
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2e:	466a      	mov	r2, sp
 8007b30:	ab01      	add	r3, sp, #4
 8007b32:	f7ff ffc9 	bl	8007ac8 <__swhatbuf_r>
 8007b36:	9f00      	ldr	r7, [sp, #0]
 8007b38:	4605      	mov	r5, r0
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7fe fecd 	bl	80068dc <_malloc_r>
 8007b42:	b948      	cbnz	r0, 8007b58 <__smakebuf_r+0x46>
 8007b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d4ee      	bmi.n	8007b2a <__smakebuf_r+0x18>
 8007b4c:	f023 0303 	bic.w	r3, r3, #3
 8007b50:	f043 0302 	orr.w	r3, r3, #2
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	e7e2      	b.n	8007b1e <__smakebuf_r+0xc>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	6020      	str	r0, [r4, #0]
 8007b68:	b15b      	cbz	r3, 8007b82 <__smakebuf_r+0x70>
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b70:	f000 f81e 	bl	8007bb0 <_isatty_r>
 8007b74:	b128      	cbz	r0, 8007b82 <__smakebuf_r+0x70>
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	431d      	orrs	r5, r3
 8007b86:	81a5      	strh	r5, [r4, #12]
 8007b88:	e7cf      	b.n	8007b2a <__smakebuf_r+0x18>
	...

08007b8c <_fstat_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4d06      	ldr	r5, [pc, #24]	@ (8007bac <_fstat_r+0x20>)
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	f7fa facf 	bl	800213c <_fstat>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d102      	bne.n	8007ba8 <_fstat_r+0x1c>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	b103      	cbz	r3, 8007ba8 <_fstat_r+0x1c>
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
 8007baa:	bf00      	nop
 8007bac:	20000e7c 	.word	0x20000e7c

08007bb0 <_isatty_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d05      	ldr	r5, [pc, #20]	@ (8007bcc <_isatty_r+0x1c>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7fa facd 	bl	800215a <_isatty>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_isatty_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_isatty_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000e7c 	.word	0x20000e7c

08007bd0 <sqrt>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	f000 f81f 	bl	8007c18 <__ieee754_sqrt>
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	463b      	mov	r3, r7
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 ffc5 	bl	8000b74 <__aeabi_dcmpun>
 8007bea:	b990      	cbnz	r0, 8007c12 <sqrt+0x42>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 ff96 	bl	8000b24 <__aeabi_dcmplt>
 8007bf8:	b158      	cbz	r0, 8007c12 <sqrt+0x42>
 8007bfa:	f7fd ff65 	bl	8005ac8 <__errno>
 8007bfe:	2321      	movs	r3, #33	@ 0x21
 8007c00:	2200      	movs	r2, #0
 8007c02:	6003      	str	r3, [r0, #0]
 8007c04:	2300      	movs	r3, #0
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7f8 fe43 	bl	8000894 <__aeabi_ddiv>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	4620      	mov	r0, r4
 8007c14:	4629      	mov	r1, r5
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c18 <__ieee754_sqrt>:
 8007c18:	4a65      	ldr	r2, [pc, #404]	@ (8007db0 <__ieee754_sqrt+0x198>)
 8007c1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1e:	438a      	bics	r2, r1
 8007c20:	4606      	mov	r6, r0
 8007c22:	460f      	mov	r7, r1
 8007c24:	460b      	mov	r3, r1
 8007c26:	4604      	mov	r4, r0
 8007c28:	d10e      	bne.n	8007c48 <__ieee754_sqrt+0x30>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	f7f8 fd08 	bl	8000640 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 fb4c 	bl	80002d4 <__adddf3>
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460f      	mov	r7, r1
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	dc0c      	bgt.n	8007c66 <__ieee754_sqrt+0x4e>
 8007c4c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007c50:	4302      	orrs	r2, r0
 8007c52:	d0f5      	beq.n	8007c40 <__ieee754_sqrt+0x28>
 8007c54:	b189      	cbz	r1, 8007c7a <__ieee754_sqrt+0x62>
 8007c56:	4602      	mov	r2, r0
 8007c58:	f7f8 fb3a 	bl	80002d0 <__aeabi_dsub>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	f7f8 fe18 	bl	8000894 <__aeabi_ddiv>
 8007c64:	e7ea      	b.n	8007c3c <__ieee754_sqrt+0x24>
 8007c66:	150a      	asrs	r2, r1, #20
 8007c68:	d115      	bne.n	8007c96 <__ieee754_sqrt+0x7e>
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	e009      	b.n	8007c82 <__ieee754_sqrt+0x6a>
 8007c6e:	0ae3      	lsrs	r3, r4, #11
 8007c70:	3a15      	subs	r2, #21
 8007c72:	0564      	lsls	r4, r4, #21
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0fa      	beq.n	8007c6e <__ieee754_sqrt+0x56>
 8007c78:	e7f7      	b.n	8007c6a <__ieee754_sqrt+0x52>
 8007c7a:	460a      	mov	r2, r1
 8007c7c:	e7fa      	b.n	8007c74 <__ieee754_sqrt+0x5c>
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	3101      	adds	r1, #1
 8007c82:	02d8      	lsls	r0, r3, #11
 8007c84:	d5fb      	bpl.n	8007c7e <__ieee754_sqrt+0x66>
 8007c86:	1e48      	subs	r0, r1, #1
 8007c88:	1a12      	subs	r2, r2, r0
 8007c8a:	f1c1 0020 	rsb	r0, r1, #32
 8007c8e:	fa24 f000 	lsr.w	r0, r4, r0
 8007c92:	4303      	orrs	r3, r0
 8007c94:	408c      	lsls	r4, r1
 8007c96:	2700      	movs	r7, #0
 8007c98:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8007c9c:	2116      	movs	r1, #22
 8007c9e:	07d2      	lsls	r2, r2, #31
 8007ca0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cae:	bf5c      	itt	pl
 8007cb0:	005b      	lslpl	r3, r3, #1
 8007cb2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007cb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cba:	bf58      	it	pl
 8007cbc:	0064      	lslpl	r4, r4, #1
 8007cbe:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007cc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007cc6:	0064      	lsls	r4, r4, #1
 8007cc8:	1815      	adds	r5, r2, r0
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	bfde      	ittt	le
 8007cce:	182a      	addle	r2, r5, r0
 8007cd0:	1b5b      	suble	r3, r3, r5
 8007cd2:	183f      	addle	r7, r7, r0
 8007cd4:	0fe5      	lsrs	r5, r4, #31
 8007cd6:	3901      	subs	r1, #1
 8007cd8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007cdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007ce0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007ce4:	d1f0      	bne.n	8007cc8 <__ieee754_sqrt+0xb0>
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	2620      	movs	r6, #32
 8007cea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	eb00 0c01 	add.w	ip, r0, r1
 8007cf4:	dc02      	bgt.n	8007cfc <__ieee754_sqrt+0xe4>
 8007cf6:	d113      	bne.n	8007d20 <__ieee754_sqrt+0x108>
 8007cf8:	45a4      	cmp	ip, r4
 8007cfa:	d811      	bhi.n	8007d20 <__ieee754_sqrt+0x108>
 8007cfc:	f1bc 0f00 	cmp.w	ip, #0
 8007d00:	eb0c 0100 	add.w	r1, ip, r0
 8007d04:	da3e      	bge.n	8007d84 <__ieee754_sqrt+0x16c>
 8007d06:	2900      	cmp	r1, #0
 8007d08:	db3c      	blt.n	8007d84 <__ieee754_sqrt+0x16c>
 8007d0a:	f102 0e01 	add.w	lr, r2, #1
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	4672      	mov	r2, lr
 8007d12:	45a4      	cmp	ip, r4
 8007d14:	bf88      	it	hi
 8007d16:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007d1a:	eba4 040c 	sub.w	r4, r4, ip
 8007d1e:	4405      	add	r5, r0
 8007d20:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007d24:	3e01      	subs	r6, #1
 8007d26:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007d2a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007d2e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007d32:	d1dc      	bne.n	8007cee <__ieee754_sqrt+0xd6>
 8007d34:	431c      	orrs	r4, r3
 8007d36:	d01a      	beq.n	8007d6e <__ieee754_sqrt+0x156>
 8007d38:	4c1e      	ldr	r4, [pc, #120]	@ (8007db4 <__ieee754_sqrt+0x19c>)
 8007d3a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8007db8 <__ieee754_sqrt+0x1a0>
 8007d3e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007d42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d46:	f7f8 fac3 	bl	80002d0 <__aeabi_dsub>
 8007d4a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4650      	mov	r0, sl
 8007d54:	4659      	mov	r1, fp
 8007d56:	f7f8 feef 	bl	8000b38 <__aeabi_dcmple>
 8007d5a:	b140      	cbz	r0, 8007d6e <__ieee754_sqrt+0x156>
 8007d5c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007d60:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d64:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8007d68:	d10e      	bne.n	8007d88 <__ieee754_sqrt+0x170>
 8007d6a:	4635      	mov	r5, r6
 8007d6c:	3701      	adds	r7, #1
 8007d6e:	107b      	asrs	r3, r7, #1
 8007d70:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d74:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007d78:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8007d7c:	086b      	lsrs	r3, r5, #1
 8007d7e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8007d82:	e75b      	b.n	8007c3c <__ieee754_sqrt+0x24>
 8007d84:	4696      	mov	lr, r2
 8007d86:	e7c2      	b.n	8007d0e <__ieee754_sqrt+0xf6>
 8007d88:	f7f8 faa4 	bl	80002d4 <__adddf3>
 8007d8c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4650      	mov	r0, sl
 8007d96:	4659      	mov	r1, fp
 8007d98:	f7f8 fec4 	bl	8000b24 <__aeabi_dcmplt>
 8007d9c:	b120      	cbz	r0, 8007da8 <__ieee754_sqrt+0x190>
 8007d9e:	1cab      	adds	r3, r5, #2
 8007da0:	bf08      	it	eq
 8007da2:	3701      	addeq	r7, #1
 8007da4:	3502      	adds	r5, #2
 8007da6:	e7e2      	b.n	8007d6e <__ieee754_sqrt+0x156>
 8007da8:	1c6b      	adds	r3, r5, #1
 8007daa:	f023 0501 	bic.w	r5, r3, #1
 8007dae:	e7de      	b.n	8007d6e <__ieee754_sqrt+0x156>
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	0800a320 	.word	0x0800a320
 8007db8:	0800a318 	.word	0x0800a318

08007dbc <_init>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr

08007dc8 <_fini>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr
