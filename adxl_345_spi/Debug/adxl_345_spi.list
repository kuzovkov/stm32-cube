
adxl_345_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08007448  08007448  00008448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007848  08007848  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007848  08007848  00008848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007850  08007850  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007850  08007850  00008850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007854  08007854  00008854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007858  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001d4  08007a2c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000518  08007a2c  00009518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bac  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf1  00000000  00000000  00012da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  000149a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075d  00000000  00000000  00015340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001803e  00000000  00000000  00015a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4b8  00000000  00000000  0002dadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086370  00000000  00000000  00037f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  000be348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c1cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800742c 	.word	0x0800742c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800742c 	.word	0x0800742c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <ADXL345_CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Функции работы с CS
void ADXL345_CS_Select()   { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET); }
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa2:	4802      	ldr	r0, [pc, #8]	@ (8000fac <ADXL345_CS_Select+0x14>)
 8000fa4:	f001 fb88 	bl	80026b8 <HAL_GPIO_WritePin>
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <ADXL345_CS_Deselect>:
void ADXL345_CS_Deselect() { HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); }
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fba:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <ADXL345_CS_Deselect+0x14>)
 8000fbc:	f001 fb7c 	bl	80026b8 <HAL_GPIO_WritePin>
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <ADXL345_WriteReg>:

// Функции SPI записи/чтения
void ADXL345_WriteReg(uint8_t reg, uint8_t data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg & 0x3F, data};  // MSB=0 для записи
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	733b      	strb	r3, [r7, #12]
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	737b      	strb	r3, [r7, #13]
    ADXL345_CS_Select();
 8000fe6:	f7ff ffd7 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <ADXL345_WriteReg+0x40>)
 8000ff6:	f002 f80b 	bl	8003010 <HAL_SPI_Transmit>
    ADXL345_CS_Deselect();
 8000ffa:	f7ff ffd9 	bl	8000fb0 <ADXL345_CS_Deselect>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000248 	.word	0x20000248

0800100c <ADXL345_ReadAxes>:
    HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, HAL_MAX_DELAY);
    ADXL345_CS_Deselect();
    return rx;
}

void ADXL345_ReadAxes(int16_t* x, int16_t* y, int16_t* z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    uint8_t tx[7];
    uint8_t rx[7];
    tx[0] = 0x80 | 0x40 | 0x32; // чтение многобайтно с DATAX0
 8001018:	23f2      	movs	r3, #242	@ 0xf2
 800101a:	773b      	strb	r3, [r7, #28]
    for(int i=1; i<7; i++) tx[i]=0x00;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001020:	e008      	b.n	8001034 <ADXL345_ReadAxes+0x28>
 8001022:	f107 021c 	add.w	r2, r7, #28
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	2b06      	cmp	r3, #6
 8001038:	ddf3      	ble.n	8001022 <ADXL345_ReadAxes+0x16>

    ADXL345_CS_Select();
 800103a:	f7ff ffad 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 7, HAL_MAX_DELAY);
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	f107 011c 	add.w	r1, r7, #28
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2307      	movs	r3, #7
 800104e:	4813      	ldr	r0, [pc, #76]	@ (800109c <ADXL345_ReadAxes+0x90>)
 8001050:	f002 f922 	bl	8003298 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001054:	f7ff ffac 	bl	8000fb0 <ADXL345_CS_Deselect>

    *x = (int16_t)((rx[2]<<8)|rx[1]);
 8001058:	7dbb      	ldrb	r3, [r7, #22]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7d7b      	ldrb	r3, [r7, #21]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((rx[4]<<8)|rx[3]);
 800106c:	7e3b      	ldrb	r3, [r7, #24]
 800106e:	b21b      	sxth	r3, r3
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((rx[6]<<8)|rx[5]);
 8001080:	7ebb      	ldrb	r3, [r7, #26]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000248 	.word	0x20000248

080010a0 <ADXL345_Init>:
// Инициализация ADXL345
/* Инициализация ADXL345 */
/* Примечание: здесь устанавливаем full resolution и диапазон ±16g (DATA_FORMAT = 0x0B),
   включаем измерения POWER_CTL = 0x08.
   При желании можно настроить частоту в регистре BW_RATE (0x2C) */
void ADXL345_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fe3d 	bl	8001d24 <HAL_Delay>
    ADXL345_WriteReg(0x2D, 0x00); // сброс POWER_CTL чтобы быть уверенным
 80010aa:	2100      	movs	r1, #0
 80010ac:	202d      	movs	r0, #45	@ 0x2d
 80010ae:	f7ff ff8b 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f000 fe36 	bl	8001d24 <HAL_Delay>
    ADXL345_WriteReg(0x31, 0x0B); // DATA_FORMAT: FULL_RES=1, range=11 (±16g)
 80010b8:	210b      	movs	r1, #11
 80010ba:	2031      	movs	r0, #49	@ 0x31
 80010bc:	f7ff ff84 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f000 fe2f 	bl	8001d24 <HAL_Delay>
    // опционально: установить скорость выборки (BW_RATE). По умолчанию 100 Hz.
    ADXL345_WriteReg(0x2C, 0x0A); // пример: установить 100 Hz (см. datasheet для нужного значения)
 80010c6:	210a      	movs	r1, #10
 80010c8:	202c      	movs	r0, #44	@ 0x2c
 80010ca:	f7ff ff7d 	bl	8000fc8 <ADXL345_WriteReg>
    ADXL345_WriteReg(0x2D, 0x08); // POWER_CTL: Measure = 1
 80010ce:	2108      	movs	r1, #8
 80010d0:	202d      	movs	r0, #45	@ 0x2d
 80010d2:	f7ff ff79 	bl	8000fc8 <ADXL345_WriteReg>
    HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f000 fe24 	bl	8001d24 <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ADXL345_ReadID>:
#define IMPACT_THRESHOLD_G 6.0f     // порог в g (пример: 6g — подбери экспериментально)
#define IMPACT_DEBOUNCE_MS 200      // окно, в течение которого игнорируем новые пики (ms)
#define SAMPLE_PERIOD_MS 10          // период опроса в ms (зависит от BW_RATE)

//Получение ID устройства, должно вывести 0xE5 (проверка устройства)
uint8_t ADXL345_ReadID() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
    uint8_t tx[2] = {0x80 | 0x00, 0x00}; // запрос регистра 0x00
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	80bb      	strh	r3, [r7, #4]
    uint8_t rx[2] = {0};
 80010ea:	2300      	movs	r3, #0
 80010ec:	803b      	strh	r3, [r7, #0]
    ADXL345_CS_Select();
 80010ee:	f7ff ff53 	bl	8000f98 <ADXL345_CS_Select>
    HAL_SPI_TransmitReceive(&hspi2, tx, rx, 2, HAL_MAX_DELAY);
 80010f2:	463a      	mov	r2, r7
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <ADXL345_ReadID+0x34>)
 8001100:	f002 f8ca 	bl	8003298 <HAL_SPI_TransmitReceive>
    ADXL345_CS_Deselect();
 8001104:	f7ff ff54 	bl	8000fb0 <ADXL345_CS_Deselect>
    return rx[1]; // второй байт = ответ
 8001108:	787b      	ldrb	r3, [r7, #1]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000248 	.word	0x20000248

08001118 <process_sample_and_detect>:
    uint32_t last_impact_tick; // HAL_GetTick() временная метка
} PeakData;

PeakData peaks = {0};

void process_sample_and_detect(int16_t rx, int16_t ry, int16_t rz) {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0d0      	sub	sp, #320	@ 0x140
 800111c:	af04      	add	r7, sp, #16
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001128:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800112c:	4622      	mov	r2, r4
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001134:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001138:	4602      	mov	r2, r0
 800113a:	801a      	strh	r2, [r3, #0]
 800113c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001140:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001144:	460a      	mov	r2, r1
 8001146:	801a      	strh	r2, [r3, #0]
	char message[255];
	// Преобразование raw -> g -> m/s^2
    float gx = (float)rx * ADXL_SCALE_G;
 8001148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800114c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe55 	bl	8000e04 <__aeabi_i2f>
 800115a:	4603      	mov	r3, r0
 800115c:	4970      	ldr	r1, [pc, #448]	@ (8001320 <process_sample_and_detect+0x208>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7fe fffe 	bl	8000160 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    float gy = (float)ry * ADXL_SCALE_G;
 800116a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800116e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe44 	bl	8000e04 <__aeabi_i2f>
 800117c:	4603      	mov	r3, r0
 800117e:	4968      	ldr	r1, [pc, #416]	@ (8001320 <process_sample_and_detect+0x208>)
 8001180:	4618      	mov	r0, r3
 8001182:	f7fe ffed 	bl	8000160 <__aeabi_fmul>
 8001186:	4603      	mov	r3, r0
 8001188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    float gz = (float)rz * ADXL_SCALE_G;
 800118c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001190:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe33 	bl	8000e04 <__aeabi_i2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	495f      	ldr	r1, [pc, #380]	@ (8001320 <process_sample_and_detect+0x208>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7fe ffdc 	bl	8000160 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    float abs_gx = fabsf(gx), abs_gy = fabsf(gy), abs_gz = fabsf(gz);
 80011ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    float abs_g = sqrt(gx*gx + gy*gy + gz*gz);
 80011d2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80011d6:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80011da:	f7fe ffc1 	bl	8000160 <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
 80011e0:	461c      	mov	r4, r3
 80011e2:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80011e6:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80011ea:	f7fe ffb9 	bl	8000160 <__aeabi_fmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fd52 	bl	8000c9c <__addsf3>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461c      	mov	r4, r3
 80011fc:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8001200:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001204:	f7fe ffac 	bl	8000160 <__aeabi_fmul>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fd45 	bl	8000c9c <__addsf3>
 8001212:	4603      	mov	r3, r0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f9bb 	bl	8000590 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f006 f80d 	bl	8007240 <sqrt>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcdf 	bl	8000bf0 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    float a_ms2 = abs_g * G_TO_MS2;
 8001238:	493a      	ldr	r1, [pc, #232]	@ (8001324 <process_sample_and_detect+0x20c>)
 800123a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800123e:	f7fe ff8f 	bl	8000160 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // Обновляем пики по осям (в g)
    if (abs_gx > peaks.max_g_x) peaks.max_g_x = abs_gx;
 8001248:	4b37      	ldr	r3, [pc, #220]	@ (8001328 <process_sample_and_detect+0x210>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001252:	f7ff fe97 	bl	8000f84 <__aeabi_fcmpgt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <process_sample_and_detect+0x14c>
 800125c:	4a32      	ldr	r2, [pc, #200]	@ (8001328 <process_sample_and_detect+0x210>)
 800125e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001262:	6013      	str	r3, [r2, #0]
    if (abs_gy > peaks.max_g_y) peaks.max_g_y = abs_gy;
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <process_sample_and_detect+0x210>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4619      	mov	r1, r3
 800126a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800126e:	f7ff fe89 	bl	8000f84 <__aeabi_fcmpgt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <process_sample_and_detect+0x168>
 8001278:	4a2b      	ldr	r2, [pc, #172]	@ (8001328 <process_sample_and_detect+0x210>)
 800127a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800127e:	6053      	str	r3, [r2, #4]
    if (abs_gz > peaks.max_g_z) peaks.max_g_z = abs_gz;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <process_sample_and_detect+0x210>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4619      	mov	r1, r3
 8001286:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800128a:	f7ff fe7b 	bl	8000f84 <__aeabi_fcmpgt>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <process_sample_and_detect+0x184>
 8001294:	4a24      	ldr	r2, [pc, #144]	@ (8001328 <process_sample_and_detect+0x210>)
 8001296:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800129a:	6093      	str	r3, [r2, #8]

    // Простая детекция удара: если любая ось превысила порог и прошло достаточно времени —
    // регистрируем событие.
    uint32_t now = HAL_GetTick();
 800129c:	f000 fd38 	bl	8001d10 <HAL_GetTick>
 80012a0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if ((abs_g >= IMPACT_THRESHOLD_G) && (now - peaks.last_impact_tick > IMPACT_DEBOUNCE_MS)) {
 80012a4:	4921      	ldr	r1, [pc, #132]	@ (800132c <process_sample_and_detect+0x214>)
 80012a6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80012aa:	f7ff fe61 	bl	8000f70 <__aeabi_fcmpge>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <process_sample_and_detect+0x19e>
//    float ay_ms2 = gy * G_TO_MS2;
//    float az_ms2 = gz * G_TO_MS2;
//    sprintf(message, "g: X=%.2f Y=%.2f Z=%.2f | m/s2: X=%.2f Y=%.2f Z=%.2f | peaks g(X/Y/Z)=%.2f/%.2f/%.2f\r\n",
//           gx, gy, gz, ax_ms2, ay_ms2, az_ms2, peaks.max_g_x, peaks.max_g_y, peaks.max_g_z);
//    HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
}
 80012b4:	e02f      	b.n	8001316 <process_sample_and_detect+0x1fe>
    if ((abs_g >= IMPACT_THRESHOLD_G) && (now - peaks.last_impact_tick > IMPACT_DEBOUNCE_MS)) {
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <process_sample_and_detect+0x210>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80012c2:	d928      	bls.n	8001316 <process_sample_and_detect+0x1fe>
        peaks.last_impact_tick = now;
 80012c4:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <process_sample_and_detect+0x210>)
 80012c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012ca:	60d3      	str	r3, [r2, #12]
        sprintf(message, "! IMPACT detected at tick %lu: g=%.2fg m/s2=%.2fg\n",
 80012cc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80012d0:	f7ff f95e 	bl	8000590 <__aeabi_f2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80012dc:	f7ff f958 	bl	8000590 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	f107 000c 	add.w	r0, r7, #12
 80012e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ec:	e9cd 4500 	strd	r4, r5, [sp]
 80012f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80012f4:	490e      	ldr	r1, [pc, #56]	@ (8001330 <process_sample_and_detect+0x218>)
 80012f6:	f003 fe67 	bl	8004fc8 <siprintf>
        HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff26 	bl	8000150 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f107 010c 	add.w	r1, r7, #12
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <process_sample_and_detect+0x21c>)
 8001312:	f002 fb78 	bl	8003a06 <HAL_UART_Transmit>
}
 8001316:	bf00      	nop
 8001318:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	3b7f9724 	.word	0x3b7f9724
 8001324:	411ce80a 	.word	0x411ce80a
 8001328:	200003b4 	.word	0x200003b4
 800132c:	40c00000 	.word	0x40c00000
 8001330:	08007448 	.word	0x08007448
 8001334:	2000036c 	.word	0x2000036c

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0c2      	sub	sp, #264	@ 0x108
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fc8f 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f84b 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 f953 	bl	80015f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800134a:	f000 f923 	bl	8001594 <MX_DMA_Init>
  MX_SPI1_Init();
 800134e:	f000 f88b 	bl	8001468 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001352:	f000 f8bf 	bl	80014d4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001356:	f000 f8f3 	bl	8001540 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 800135a:	f7ff fea1 	bl	80010a0 <ADXL345_Init>

  // Быстрый тест: прочитать ID
  uint8_t id = ADXL345_ReadID();
 800135e:	f7ff febf 	bl	80010e0 <ADXL345_ReadID>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
  sprintf(message, "ADXL345 ID = 0x%02X\r\n", id);
 8001368:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4918      	ldr	r1, [pc, #96]	@ (80013d4 <main+0x9c>)
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fe28 	bl	8004fc8 <siprintf>
  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe fee7 	bl	8000150 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138e:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <main+0xa0>)
 8001390:	f002 fb39 	bl	8003a06 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */

  int16_t rx, ry, rz;
  while (1)
  {
	  ADXL345_ReadAxes(&rx, &ry, &rz);
 8001394:	1cba      	adds	r2, r7, #2
 8001396:	1d39      	adds	r1, r7, #4
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe36 	bl	800100c <ADXL345_ReadAxes>
	  process_sample_and_detect(rx, ry, rz);
 80013a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013a4:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80013a8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80013ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013bc:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	461a      	mov	r2, r3
 80013c6:	f7ff fea7 	bl	8001118 <process_sample_and_detect>
	  HAL_Delay(SAMPLE_PERIOD_MS);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f000 fcaa 	bl	8001d24 <HAL_Delay>
	  ADXL345_ReadAxes(&rx, &ry, &rz);
 80013d0:	bf00      	nop
 80013d2:	e7df      	b.n	8001394 <main+0x5c>
 80013d4:	0800747c 	.word	0x0800747c
 80013d8:	2000036c 	.word	0x2000036c

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	@ 0x40
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	2228      	movs	r2, #40	@ 0x28
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fe51 	bl	8005092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800141a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f001 f95f 	bl	80026e8 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001430:	f000 f92a 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
 8001436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2302      	movs	r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fbcc 	bl	8002bec <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800145a:	f000 f915 	bl	8001688 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3740      	adds	r7, #64	@ 0x40
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_SPI1_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <MX_SPI1_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001488:	2202      	movs	r2, #2
 800148a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_SPI1_Init+0x64>)
 800148e:	2201      	movs	r2, #1
 8001490:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001498:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_SPI1_Init+0x64>)
 800149c:	2208      	movs	r2, #8
 800149e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014b4:	220a      	movs	r2, #10
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014ba:	f001 fd25 	bl	8002f08 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014c4:	f000 f8e0 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001f0 	.word	0x200001f0
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014da:	4a18      	ldr	r2, [pc, #96]	@ (800153c <MX_SPI2_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <MX_SPI2_Init+0x64>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <MX_SPI2_Init+0x64>)
 8001500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001504:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <MX_SPI2_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <MX_SPI2_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <MX_SPI2_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <MX_SPI2_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <MX_SPI2_Init+0x64>)
 8001520:	220a      	movs	r2, #10
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	@ (8001538 <MX_SPI2_Init+0x64>)
 8001526:	f001 fcef 	bl	8002f08 <HAL_SPI_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001530:	f000 f8aa 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000248 	.word	0x20000248
 800153c:	40003800 	.word	0x40003800

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f002 f9f5 	bl	8003966 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f881 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000036c 	.word	0x2000036c
 8001590:	40013800 	.word	0x40013800

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_DMA_Init+0x58>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <MX_DMA_Init+0x58>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_DMA_Init+0x58>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	200d      	movs	r0, #13
 80015b8:	f000 fcaf 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015bc:	200d      	movs	r0, #13
 80015be:	f000 fcc8 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200e      	movs	r0, #14
 80015c8:	f000 fca7 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015cc:	200e      	movs	r0, #14
 80015ce:	f000 fcc0 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 fc9f 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015dc:	200f      	movs	r0, #15
 80015de:	f000 fcb8 	bl	8001f52 <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_GPIO_Init+0x90>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <MX_GPIO_Init+0x90>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_GPIO_Init+0x90>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_GPIO_Init+0x90>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <MX_GPIO_Init+0x90>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_GPIO_Init+0x90>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_GPIO_Init+0x90>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <MX_GPIO_Init+0x90>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_GPIO_Init+0x90>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001652:	480c      	ldr	r0, [pc, #48]	@ (8001684 <MX_GPIO_Init+0x94>)
 8001654:	f001 f830 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_GPIO_Init+0x94>)
 8001672:	f000 fe9d 	bl	80023b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_MspInit+0x5c>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_MspInit+0x5c>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_MspInit+0x60>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_MspInit+0x60>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000

080016f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a73      	ldr	r2, [pc, #460]	@ (80018e0 <HAL_SPI_MspInit+0x1e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d152      	bne.n	80017be <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001718:	4b72      	ldr	r3, [pc, #456]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a71      	ldr	r2, [pc, #452]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 800171e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b6f      	ldr	r3, [pc, #444]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b6c      	ldr	r3, [pc, #432]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a6b      	ldr	r2, [pc, #428]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b69      	ldr	r3, [pc, #420]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001748:	23a0      	movs	r3, #160	@ 0xa0
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4619      	mov	r1, r3
 800175a:	4863      	ldr	r0, [pc, #396]	@ (80018e8 <HAL_SPI_MspInit+0x1f0>)
 800175c:	f000 fe28 	bl	80023b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001760:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001762:	4a63      	ldr	r2, [pc, #396]	@ (80018f0 <HAL_SPI_MspInit+0x1f8>)
 8001764:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001766:	4b61      	ldr	r3, [pc, #388]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001768:	2210      	movs	r2, #16
 800176a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b5f      	ldr	r3, [pc, #380]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b5e      	ldr	r3, [pc, #376]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001778:	4b5c      	ldr	r3, [pc, #368]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001790:	4856      	ldr	r0, [pc, #344]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 8001792:	f000 fbf9 	bl	8001f88 <HAL_DMA_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800179c:	f7ff ff74 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 80017a4:	649a      	str	r2, [r3, #72]	@ 0x48
 80017a6:	4a51      	ldr	r2, [pc, #324]	@ (80018ec <HAL_SPI_MspInit+0x1f4>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2023      	movs	r0, #35	@ 0x23
 80017b2:	f000 fbb2 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017b6:	2023      	movs	r0, #35	@ 0x23
 80017b8:	f000 fbcb 	bl	8001f52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017bc:	e08b      	b.n	80018d6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <HAL_SPI_MspInit+0x1fc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	f040 8086 	bne.w	80018d6 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ca:	4b46      	ldr	r3, [pc, #280]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a45      	ldr	r2, [pc, #276]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b43      	ldr	r3, [pc, #268]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a3f      	ldr	r2, [pc, #252]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_SPI_MspInit+0x1ec>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017fa:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	483a      	ldr	r0, [pc, #232]	@ (80018f8 <HAL_SPI_MspInit+0x200>)
 8001810:	f000 fdce 	bl	80023b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001814:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	4619      	mov	r1, r3
 8001828:	4833      	ldr	r0, [pc, #204]	@ (80018f8 <HAL_SPI_MspInit+0x200>)
 800182a:	f000 fdc1 	bl	80023b0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001830:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_SPI_MspInit+0x208>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001834:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001842:	2280      	movs	r2, #128	@ 0x80
 8001844:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001852:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001858:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800185e:	4827      	ldr	r0, [pc, #156]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001860:	f000 fb92 	bl	8001f88 <HAL_DMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_SPI_MspInit+0x176>
      Error_Handler();
 800186a:	f7ff ff0d 	bl	8001688 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a22      	ldr	r2, [pc, #136]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001872:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001874:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <HAL_SPI_MspInit+0x204>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 800187c:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_SPI_MspInit+0x210>)
 800187e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 8001882:	2210      	movs	r2, #16
 8001884:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 800188e:	2280      	movs	r2, #128	@ 0x80
 8001890:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80018aa:	4816      	ldr	r0, [pc, #88]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 80018ac:	f000 fb6c 	bl	8001f88 <HAL_DMA_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_SPI_MspInit+0x1c2>
      Error_Handler();
 80018b6:	f7ff fee7 	bl	8001688 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 80018be:	649a      	str	r2, [r3, #72]	@ 0x48
 80018c0:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <HAL_SPI_MspInit+0x20c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2024      	movs	r0, #36	@ 0x24
 80018cc:	f000 fb25 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018d0:	2024      	movs	r0, #36	@ 0x24
 80018d2:	f000 fb3e 	bl	8001f52 <HAL_NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40013000 	.word	0x40013000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	200002a0 	.word	0x200002a0
 80018f0:	40020030 	.word	0x40020030
 80018f4:	40003800 	.word	0x40003800
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	200002e4 	.word	0x200002e4
 8001900:	40020044 	.word	0x40020044
 8001904:	20000328 	.word	0x20000328
 8001908:	40020058 	.word	0x40020058

0800190c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <HAL_UART_MspInit+0x9c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d139      	bne.n	80019a0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a18      	ldr	r2, [pc, #96]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <HAL_UART_MspInit+0xa0>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	480f      	ldr	r0, [pc, #60]	@ (80019b0 <HAL_UART_MspInit+0xa4>)
 8001972:	f000 fd1d 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <HAL_UART_MspInit+0xa4>)
 800198c:	f000 fd10 	bl	80023b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2025      	movs	r0, #37	@ 0x25
 8001996:	f000 fac0 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800199a:	2025      	movs	r0, #37	@ 0x25
 800199c:	f000 fad9 	bl	8001f52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010800 	.word	0x40010800

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f972 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <DMA1_Channel3_IRQHandler+0x10>)
 8001a12:	f000 fbc7 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002a0 	.word	0x200002a0

08001a20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Channel4_IRQHandler+0x10>)
 8001a26:	f000 fbbd 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002e4 	.word	0x200002e4

08001a34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DMA1_Channel5_IRQHandler+0x10>)
 8001a3a:	f000 fbb3 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000328 	.word	0x20000328

08001a48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <SPI1_IRQHandler+0x10>)
 8001a4e:	f001 fdcd 	bl	80035ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200001f0 	.word	0x200001f0

08001a5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <SPI2_IRQHandler+0x10>)
 8001a62:	f001 fdc3 	bl	80035ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000248 	.word	0x20000248

08001a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <USART1_IRQHandler+0x10>)
 8001a76:	f002 f851 	bl	8003b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000036c 	.word	0x2000036c

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_kill>:

int _kill(int pid, int sig)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9c:	f003 fb4c 	bl	8005138 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2216      	movs	r2, #22
 8001aa4:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_exit>:

void _exit (int status)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffe7 	bl	8001a92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <_exit+0x12>

08001ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ada:	f3af 8000 	nop.w
 8001ade:	4601      	mov	r1, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf0      	blt.n	8001ada <_read+0x12>
  }

  return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e009      	b.n	8001b28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf1      	blt.n	8001b14 <_write+0x12>
  }
  return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_close>:

int _close(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b60:	605a      	str	r2, [r3, #4]
  return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <_isatty>:

int _isatty(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f003 fab4 	bl	8005138 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20005000 	.word	0x20005000
 8001bfc:	00000200 	.word	0x00000200
 8001c00:	200003c4 	.word	0x200003c4
 8001c04:	20000518 	.word	0x20000518

08001c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c14:	f7ff fff8 	bl	8001c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c1a:	490c      	ldr	r1, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a09      	ldr	r2, [pc, #36]	@ (8001c54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c30:	4c09      	ldr	r4, [pc, #36]	@ (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f003 fa81 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff fb79 	bl	8001338 <main>
  bx lr
 8001c46:	4770      	bx	lr
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c50:	08007858 	.word	0x08007858
  ldr r2, =_sbss
 8001c54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c58:	20000518 	.word	0x20000518

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_Init+0x28>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_Init+0x28>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f947 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fd0a 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f95f 	bl	8001f6e <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cc8:	f000 f927 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_IncTick+0x20>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a03      	ldr	r2, [pc, #12]	@ (8001d0c <HAL_IncTick+0x20>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200003c8 	.word	0x200003c8

08001d10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b02      	ldr	r3, [pc, #8]	@ (8001d20 <HAL_GetTick+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	200003c8 	.word	0x200003c8

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffe0 	bl	8001d10 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4906      	ldr	r1, [pc, #24]	@ (8001e04 <__NVIC_EnableIRQ+0x34>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	@ (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee4:	f7ff ff90 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff2d 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff42 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff90 	bl	8001e5c <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5f 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff35 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e043      	b.n	8002026 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_DMA_Init+0xa8>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a22      	ldr	r2, [pc, #136]	@ (8002034 <HAL_DMA_Init+0xac>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_DMA_Init+0xb0>)
 8001fba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	bffdfff8 	.word	0xbffdfff8
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e020      	b.n	80020a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020e 	bic.w	r2, r2, #14
 8002074:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	2101      	movs	r1, #1
 8002090:	fa01 f202 	lsl.w	r2, r1, r2
 8002094:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d005      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e051      	b.n	800217c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_DMA_Abort_IT+0xd4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d029      	beq.n	8002156 <HAL_DMA_Abort_IT+0xa2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	@ (800218c <HAL_DMA_Abort_IT+0xd8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Abort_IT+0x9e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_DMA_Abort_IT+0xdc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01a      	beq.n	800214c <HAL_DMA_Abort_IT+0x98>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_DMA_Abort_IT+0xe0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d012      	beq.n	8002146 <HAL_DMA_Abort_IT+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_DMA_Abort_IT+0xe4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00a      	beq.n	8002140 <HAL_DMA_Abort_IT+0x8c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <HAL_DMA_Abort_IT+0xe8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_DMA_Abort_IT+0x86>
 8002134:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002138:	e00e      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800213a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213e:	e00b      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002140:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002144:	e008      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214a:	e005      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800214c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002150:	e002      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002152:	2310      	movs	r3, #16
 8002154:	e000      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002156:	2301      	movs	r3, #1
 8002158:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_DMA_Abort_IT+0xec>)
 800215a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
    } 
  }
  return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40020008 	.word	0x40020008
 800218c:	4002001c 	.word	0x4002001c
 8002190:	40020030 	.word	0x40020030
 8002194:	40020044 	.word	0x40020044
 8002198:	40020058 	.word	0x40020058
 800219c:	4002006c 	.word	0x4002006c
 80021a0:	40020000 	.word	0x40020000

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d04f      	beq.n	800226c <HAL_DMA_IRQHandler+0xc8>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a66      	ldr	r2, [pc, #408]	@ (8002394 <HAL_DMA_IRQHandler+0x1f0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d029      	beq.n	8002252 <HAL_DMA_IRQHandler+0xae>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a65      	ldr	r2, [pc, #404]	@ (8002398 <HAL_DMA_IRQHandler+0x1f4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_IRQHandler+0xaa>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a63      	ldr	r2, [pc, #396]	@ (800239c <HAL_DMA_IRQHandler+0x1f8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01a      	beq.n	8002248 <HAL_DMA_IRQHandler+0xa4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a62      	ldr	r2, [pc, #392]	@ (80023a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d012      	beq.n	8002242 <HAL_DMA_IRQHandler+0x9e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <HAL_DMA_IRQHandler+0x200>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00a      	beq.n	800223c <HAL_DMA_IRQHandler+0x98>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5f      	ldr	r2, [pc, #380]	@ (80023a8 <HAL_DMA_IRQHandler+0x204>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_DMA_IRQHandler+0x92>
 8002230:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002234:	e00e      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002236:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800223a:	e00b      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 800223c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002240:	e008      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002242:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002246:	e005      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800224c:	e002      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 800224e:	2340      	movs	r3, #64	@ 0x40
 8002250:	e000      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002252:	2304      	movs	r3, #4
 8002254:	4a55      	ldr	r2, [pc, #340]	@ (80023ac <HAL_DMA_IRQHandler+0x208>)
 8002256:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8094 	beq.w	800238a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800226a:	e08e      	b.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	2202      	movs	r2, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d056      	beq.n	800232a <HAL_DMA_IRQHandler+0x186>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d051      	beq.n	800232a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020a 	bic.w	r2, r2, #10
 80022a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a38      	ldr	r2, [pc, #224]	@ (8002394 <HAL_DMA_IRQHandler+0x1f0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d029      	beq.n	800230a <HAL_DMA_IRQHandler+0x166>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <HAL_DMA_IRQHandler+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_IRQHandler+0x162>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <HAL_DMA_IRQHandler+0x1f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x15c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_DMA_IRQHandler+0x1fc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0x156>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a32      	ldr	r2, [pc, #200]	@ (80023a4 <HAL_DMA_IRQHandler+0x200>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x150>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_DMA_IRQHandler+0x204>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_DMA_IRQHandler+0x14a>
 80022e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022ec:	e00e      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	e00b      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f8:	e008      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fe:	e005      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 8002300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002304:	e002      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 8002306:	2320      	movs	r3, #32
 8002308:	e000      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 800230a:	2302      	movs	r3, #2
 800230c:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <HAL_DMA_IRQHandler+0x208>)
 800230e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d034      	beq.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002328:	e02f      	b.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2208      	movs	r2, #8
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d028      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
    }
  }
  return;
 800238a:	bf00      	nop
 800238c:	bf00      	nop
}
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40020008 	.word	0x40020008
 8002398:	4002001c 	.word	0x4002001c
 800239c:	40020030 	.word	0x40020030
 80023a0:	40020044 	.word	0x40020044
 80023a4:	40020058 	.word	0x40020058
 80023a8:	4002006c 	.word	0x4002006c
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b08b      	sub	sp, #44	@ 0x2c
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c2:	e169      	b.n	8002698 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023c4:	2201      	movs	r2, #1
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 8158 	bne.w	8002692 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002650 <HAL_GPIO_Init+0x2a0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d05e      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
 80023ec:	4a98      	ldr	r2, [pc, #608]	@ (8002650 <HAL_GPIO_Init+0x2a0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d875      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 80023f2:	4a98      	ldr	r2, [pc, #608]	@ (8002654 <HAL_GPIO_Init+0x2a4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d058      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
 80023f8:	4a96      	ldr	r2, [pc, #600]	@ (8002654 <HAL_GPIO_Init+0x2a4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d86f      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 80023fe:	4a96      	ldr	r2, [pc, #600]	@ (8002658 <HAL_GPIO_Init+0x2a8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d052      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
 8002404:	4a94      	ldr	r2, [pc, #592]	@ (8002658 <HAL_GPIO_Init+0x2a8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d869      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 800240a:	4a94      	ldr	r2, [pc, #592]	@ (800265c <HAL_GPIO_Init+0x2ac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04c      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
 8002410:	4a92      	ldr	r2, [pc, #584]	@ (800265c <HAL_GPIO_Init+0x2ac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d863      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 8002416:	4a92      	ldr	r2, [pc, #584]	@ (8002660 <HAL_GPIO_Init+0x2b0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d046      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
 800241c:	4a90      	ldr	r2, [pc, #576]	@ (8002660 <HAL_GPIO_Init+0x2b0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d85d      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 8002422:	2b12      	cmp	r3, #18
 8002424:	d82a      	bhi.n	800247c <HAL_GPIO_Init+0xcc>
 8002426:	2b12      	cmp	r3, #18
 8002428:	d859      	bhi.n	80024de <HAL_GPIO_Init+0x12e>
 800242a:	a201      	add	r2, pc, #4	@ (adr r2, 8002430 <HAL_GPIO_Init+0x80>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	080024ab 	.word	0x080024ab
 8002434:	08002485 	.word	0x08002485
 8002438:	08002497 	.word	0x08002497
 800243c:	080024d9 	.word	0x080024d9
 8002440:	080024df 	.word	0x080024df
 8002444:	080024df 	.word	0x080024df
 8002448:	080024df 	.word	0x080024df
 800244c:	080024df 	.word	0x080024df
 8002450:	080024df 	.word	0x080024df
 8002454:	080024df 	.word	0x080024df
 8002458:	080024df 	.word	0x080024df
 800245c:	080024df 	.word	0x080024df
 8002460:	080024df 	.word	0x080024df
 8002464:	080024df 	.word	0x080024df
 8002468:	080024df 	.word	0x080024df
 800246c:	080024df 	.word	0x080024df
 8002470:	080024df 	.word	0x080024df
 8002474:	0800248d 	.word	0x0800248d
 8002478:	080024a1 	.word	0x080024a1
 800247c:	4a79      	ldr	r2, [pc, #484]	@ (8002664 <HAL_GPIO_Init+0x2b4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002482:	e02c      	b.n	80024de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	623b      	str	r3, [r7, #32]
          break;
 800248a:	e029      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	3304      	adds	r3, #4
 8002492:	623b      	str	r3, [r7, #32]
          break;
 8002494:	e024      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	3308      	adds	r3, #8
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e01f      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	330c      	adds	r3, #12
 80024a6:	623b      	str	r3, [r7, #32]
          break;
 80024a8:	e01a      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024b2:	2304      	movs	r3, #4
 80024b4:	623b      	str	r3, [r7, #32]
          break;
 80024b6:	e013      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c0:	2308      	movs	r3, #8
 80024c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	611a      	str	r2, [r3, #16]
          break;
 80024ca:	e009      	b.n	80024e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024cc:	2308      	movs	r3, #8
 80024ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	615a      	str	r2, [r3, #20]
          break;
 80024d6:	e003      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
          break;
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x130>
          break;
 80024de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d801      	bhi.n	80024ea <HAL_GPIO_Init+0x13a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	e001      	b.n	80024ee <HAL_GPIO_Init+0x13e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2bff      	cmp	r3, #255	@ 0xff
 80024f4:	d802      	bhi.n	80024fc <HAL_GPIO_Init+0x14c>
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x152>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	3b08      	subs	r3, #8
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	210f      	movs	r1, #15
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	6a39      	ldr	r1, [r7, #32]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	431a      	orrs	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80b1 	beq.w	8002692 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002530:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <HAL_GPIO_Init+0x2b8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_GPIO_Init+0x2b8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <HAL_GPIO_Init+0x2b8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002548:	4a48      	ldr	r2, [pc, #288]	@ (800266c <HAL_GPIO_Init+0x2bc>)
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <HAL_GPIO_Init+0x2c0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_GPIO_Init+0x1ec>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3f      	ldr	r2, [pc, #252]	@ (8002674 <HAL_GPIO_Init+0x2c4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00d      	beq.n	8002598 <HAL_GPIO_Init+0x1e8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3e      	ldr	r2, [pc, #248]	@ (8002678 <HAL_GPIO_Init+0x2c8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d007      	beq.n	8002594 <HAL_GPIO_Init+0x1e4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3d      	ldr	r2, [pc, #244]	@ (800267c <HAL_GPIO_Init+0x2cc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_GPIO_Init+0x1e0>
 800258c:	2303      	movs	r3, #3
 800258e:	e006      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002590:	2304      	movs	r3, #4
 8002592:	e004      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002594:	2302      	movs	r3, #2
 8002596:	e002      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 800259c:	2300      	movs	r3, #0
 800259e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	4093      	lsls	r3, r2
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ae:	492f      	ldr	r1, [pc, #188]	@ (800266c <HAL_GPIO_Init+0x2bc>)
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	492c      	ldr	r1, [pc, #176]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	43db      	mvns	r3, r3
 80025de:	4928      	ldr	r1, [pc, #160]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025f0:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4922      	ldr	r1, [pc, #136]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	43db      	mvns	r3, r3
 8002606:	491e      	ldr	r1, [pc, #120]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002608:	4013      	ands	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4918      	ldr	r1, [pc, #96]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002626:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	43db      	mvns	r3, r3
 800262e:	4914      	ldr	r1, [pc, #80]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002630:	4013      	ands	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d021      	beq.n	8002684 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002640:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	490e      	ldr	r1, [pc, #56]	@ (8002680 <HAL_GPIO_Init+0x2d0>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e021      	b.n	8002692 <HAL_GPIO_Init+0x2e2>
 800264e:	bf00      	nop
 8002650:	10320000 	.word	0x10320000
 8002654:	10310000 	.word	0x10310000
 8002658:	10220000 	.word	0x10220000
 800265c:	10210000 	.word	0x10210000
 8002660:	10120000 	.word	0x10120000
 8002664:	10110000 	.word	0x10110000
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000
 8002670:	40010800 	.word	0x40010800
 8002674:	40010c00 	.word	0x40010c00
 8002678:	40011000 	.word	0x40011000
 800267c:	40011400 	.word	0x40011400
 8002680:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	43db      	mvns	r3, r3
 800268c:	4909      	ldr	r1, [pc, #36]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 800268e:	4013      	ands	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f47f ae8e 	bne.w	80023c4 <HAL_GPIO_Init+0x14>
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	372c      	adds	r7, #44	@ 0x2c
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	611a      	str	r2, [r3, #16]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e272      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8087 	beq.w	8002816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002708:	4b92      	ldr	r3, [pc, #584]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b04      	cmp	r3, #4
 8002712:	d00c      	beq.n	800272e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002714:	4b8f      	ldr	r3, [pc, #572]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d112      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
 8002720:	4b8c      	ldr	r3, [pc, #560]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272c:	d10b      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	4b89      	ldr	r3, [pc, #548]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d06c      	beq.n	8002814 <HAL_RCC_OscConfig+0x12c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d168      	bne.n	8002814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e24c      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x76>
 8002750:	4b80      	ldr	r3, [pc, #512]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7f      	ldr	r2, [pc, #508]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e02e      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b7b      	ldr	r3, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7a      	ldr	r2, [pc, #488]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b78      	ldr	r3, [pc, #480]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a77      	ldr	r2, [pc, #476]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0xbc>
 800278a:	4b72      	ldr	r3, [pc, #456]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a71      	ldr	r2, [pc, #452]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 80027a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b68      	ldr	r3, [pc, #416]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a67      	ldr	r2, [pc, #412]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff faa4 	bl	8001d10 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff faa0 	bl	8001d10 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e200      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xe4>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fa90 	bl	8001d10 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fa8c 	bl	8001d10 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1ec      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x10c>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d063      	beq.n	80028ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002822:	4b4c      	ldr	r3, [pc, #304]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282e:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1c0      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4939      	ldr	r1, [pc, #228]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b36      	ldr	r3, [pc, #216]	@ (8002958 <HAL_RCC_OscConfig+0x270>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff fa45 	bl	8001d10 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7ff fa41 	bl	8001d10 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1a1      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4927      	ldr	r1, [pc, #156]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b26      	ldr	r3, [pc, #152]	@ (8002958 <HAL_RCC_OscConfig+0x270>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fa24 	bl	8001d10 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7ff fa20 	bl	8001d10 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e180      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03a      	beq.n	800296c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_RCC_OscConfig+0x274>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7ff fa04 	bl	8001d10 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7ff fa00 	bl	8001d10 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e160      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f000 face 	bl	8002ecc <RCC_Delay>
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_RCC_OscConfig+0x274>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7ff f9ea 	bl	8001d10 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7ff f9e6 	bl	8001d10 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d908      	bls.n	8002960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e146      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	42420000 	.word	0x42420000
 800295c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e9      	bne.n	8002940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a6 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a87      	ldr	r2, [pc, #540]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7ff f9a7 	bl	8001d10 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7ff f9a3 	bl	8001d10 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	@ 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e103      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x312>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	e02d      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a69      	ldr	r2, [pc, #420]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a66      	ldr	r2, [pc, #408]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	e01c      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x356>
 8002a24:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a60      	ldr	r2, [pc, #384]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	4b5e      	ldr	r3, [pc, #376]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a5d      	ldr	r2, [pc, #372]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a5a      	ldr	r2, [pc, #360]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a57      	ldr	r2, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7ff f957 	bl	8001d10 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7ff f953 	bl	8001d10 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0b1      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ee      	beq.n	8002a66 <HAL_RCC_OscConfig+0x37e>
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff f941 	bl	8001d10 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7ff f93d 	bl	8001d10 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e09b      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b3c      	ldr	r3, [pc, #240]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a3b      	ldr	r2, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d061      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d146      	bne.n	8002b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7ff f911 	bl	8001d10 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7ff f90d 	bl	8001d10 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e06d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b04:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4921      	ldr	r1, [pc, #132]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a19      	ldr	r1, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	491b      	ldr	r1, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f8e1 	bl	8001d10 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7ff f8dd 	bl	8001d10 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e03d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46a>
 8002b70:	e035      	b.n	8002bde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff f8ca 	bl	8001d10 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7ff f8c6 	bl	8001d10 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e026      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x498>
 8002b9e:	e01e      	b.n	8002bde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e019      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_OscConfig+0x500>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0d0      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b6a      	ldr	r3, [pc, #424]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b67      	ldr	r3, [pc, #412]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4965      	ldr	r1, [pc, #404]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d040      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e073      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b39      	ldr	r3, [pc, #228]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4936      	ldr	r1, [pc, #216]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7ff f818 	bl	8001d10 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7ff f814 	bl	8001d10 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e053      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b27      	ldr	r3, [pc, #156]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d210      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	4922      	ldr	r1, [pc, #136]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d66:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	490a      	ldr	r1, [pc, #40]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	@ (8002db8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <HAL_RCC_ClockConfig+0x1d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe ff76 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08007494 	.word	0x08007494
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dee:	e027      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002df2:	613b      	str	r3, [r7, #16]
      break;
 8002df4:	e027      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	0c9b      	lsrs	r3, r3, #18
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e00:	5cd3      	ldrb	r3, [r2, r3]
 8002e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0c5b      	lsrs	r3, r3, #17
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	4a11      	ldr	r2, [pc, #68]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e22:	fb03 f202 	mul.w	r2, r3, r2
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e004      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e42:	613b      	str	r3, [r7, #16]
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	693b      	ldr	r3, [r7, #16]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	007a1200 	.word	0x007a1200
 8002e5c:	080074ac 	.word	0x080074ac
 8002e60:	080074bc 	.word	0x080074bc
 8002e64:	003d0900 	.word	0x003d0900

08002e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b02      	ldr	r3, [pc, #8]	@ (8002e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff2 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	@ (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	080074a4 	.word	0x080074a4

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea8:	f7ff ffde 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0adb      	lsrs	r3, r3, #11
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	080074a4 	.word	0x080074a4

08002ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <RCC_Delay+0x34>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <RCC_Delay+0x38>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a5b      	lsrs	r3, r3, #9
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee8:	bf00      	nop
  }
  while (Delay --);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e5a      	subs	r2, r3, #1
 8002eee:	60fa      	str	r2, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <RCC_Delay+0x1c>
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	20000000 	.word	0x20000000
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e076      	b.n	8003008 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f2a:	d009      	beq.n	8002f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fbcc 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	0c1a      	lsrs	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f002 0204 	and.w	r2, r2, #4
 8002fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003020:	f7fe fe76 	bl	8001d10 <HAL_GetTick>
 8003024:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	e12a      	b.n	8003290 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Transmit+0x36>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e122      	b.n	8003290 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_SPI_Transmit+0x48>
 8003054:	2302      	movs	r3, #2
 8003056:	e11b      	b.n	8003290 <HAL_SPI_Transmit+0x280>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a6:	d10f      	bne.n	80030c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b40      	cmp	r3, #64	@ 0x40
 80030d4:	d007      	beq.n	80030e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ee:	d152      	bne.n	8003196 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Transmit+0xee>
 80030f8:	8b7b      	ldrh	r3, [r7, #26]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d145      	bne.n	800318a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003122:	e032      	b.n	800318a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d112      	bne.n	8003158 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	1c9a      	adds	r2, r3, #2
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003156:	e018      	b.n	800318a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003158:	f7fe fdda 	bl	8001d10 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d803      	bhi.n	8003170 <HAL_SPI_Transmit+0x160>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800316e:	d102      	bne.n	8003176 <HAL_SPI_Transmit+0x166>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e082      	b.n	8003290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1c7      	bne.n	8003124 <HAL_SPI_Transmit+0x114>
 8003194:	e053      	b.n	800323e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x194>
 800319e:	8b7b      	ldrh	r3, [r7, #26]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d147      	bne.n	8003234 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031ca:	e033      	b.n	8003234 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d113      	bne.n	8003202 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003200:	e018      	b.n	8003234 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003202:	f7fe fd85 	bl	8001d10 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d803      	bhi.n	800321a <HAL_SPI_Transmit+0x20a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003218:	d102      	bne.n	8003220 <HAL_SPI_Transmit+0x210>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e02d      	b.n	8003290 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1c6      	bne.n	80031cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fb5e 	bl	8003904 <SPI_EndRxTxTransaction>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800328e:	2300      	movs	r3, #0
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032aa:	f7fe fd31 	bl	8001d10 <HAL_GetTick>
 80032ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d00c      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x4a>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ce:	d106      	bne.n	80032de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_SPI_TransmitReceive+0x46>
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d001      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	e17f      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x5c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x5c>
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e174      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_SPI_TransmitReceive+0x6e>
 8003302:	2302      	movs	r3, #2
 8003304:	e16d      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2205      	movs	r2, #5
 800331e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	887a      	ldrh	r2, [r7, #2]
 800334a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d007      	beq.n	8003376 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337e:	d17e      	bne.n	800347e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SPI_TransmitReceive+0xf6>
 8003388:	8afb      	ldrh	r3, [r7, #22]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d16c      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	881a      	ldrh	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	1c9a      	adds	r2, r3, #2
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b2:	e059      	b.n	8003468 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d11b      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x162>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x162>
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d113      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	881a      	ldrh	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d119      	bne.n	800343c <HAL_SPI_TransmitReceive+0x1a4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d014      	beq.n	800343c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	b292      	uxth	r2, r2
 800341e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	1c9a      	adds	r2, r3, #2
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003438:	2301      	movs	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800343c:	f7fe fc68 	bl	8001d10 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003448:	429a      	cmp	r2, r3
 800344a:	d80d      	bhi.n	8003468 <HAL_SPI_TransmitReceive+0x1d0>
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003452:	d009      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e0bc      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1a0      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x11c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d19b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x11c>
 800347c:	e082      	b.n	8003584 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_TransmitReceive+0x1f4>
 8003486:	8afb      	ldrh	r3, [r7, #22]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d171      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	e05d      	b.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d11c      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x264>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x264>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d114      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d119      	bne.n	800353e <HAL_SPI_TransmitReceive+0x2a6>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d014      	beq.n	800353e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800353a:	2301      	movs	r3, #1
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800353e:	f7fe fbe7 	bl	8001d10 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354a:	429a      	cmp	r2, r3
 800354c:	d803      	bhi.n	8003556 <HAL_SPI_TransmitReceive+0x2be>
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003554:	d102      	bne.n	800355c <HAL_SPI_TransmitReceive+0x2c4>
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e038      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d19c      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x21c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d197      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f9bb 	bl	8003904 <SPI_EndRxTxTransaction>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e01d      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3728      	adds	r7, #40	@ 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10f      	bne.n	8003630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
    return;
 800362e:	e0be      	b.n	80037ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_SPI_IRQHandler+0x66>
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	09db      	lsrs	r3, r3, #7
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
    return;
 8003650:	e0ad      	b.n	80037ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_SPI_IRQHandler+0x80>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a1 	beq.w	80037ae <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 809a 	beq.w	80037ae <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d023      	beq.n	80036ce <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d011      	beq.n	80036b6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e00b      	b.n	80036ce <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
        return;
 80036cc:	e06f      	b.n	80037ae <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	2b00      	cmp	r3, #0
 800370a:	d04f      	beq.n	80037ac <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800371a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_SPI_IRQHandler+0x14c>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d034      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0203 	bic.w	r2, r2, #3
 8003746:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d011      	beq.n	8003774 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003754:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_SPI_IRQHandler+0x1c8>)
 8003756:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fca9 	bl	80020b4 <HAL_DMA_Abort_IT>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d016      	beq.n	80037aa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <HAL_SPI_IRQHandler+0x1c8>)
 8003782:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fc93 	bl	80020b4 <HAL_DMA_Abort_IT>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80037a0:	e003      	b.n	80037aa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f808 	bl	80037b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037a8:	e000      	b.n	80037ac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80037aa:	bf00      	nop
    return;
 80037ac:	bf00      	nop
  }
}
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	080037cb 	.word	0x080037cb

080037b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ffe7 	bl	80037b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003804:	f7fe fa84 	bl	8001d10 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	4413      	add	r3, r2
 8003812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003814:	f7fe fa7c 	bl	8001d10 <HAL_GetTick>
 8003818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800381a:	4b39      	ldr	r3, [pc, #228]	@ (8003900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	015b      	lsls	r3, r3, #5
 8003820:	0d1b      	lsrs	r3, r3, #20
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800382a:	e054      	b.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003832:	d050      	beq.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003834:	f7fe fa6c 	bl	8001d10 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	429a      	cmp	r2, r3
 8003842:	d902      	bls.n	800384a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d13d      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003862:	d111      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386c:	d004      	beq.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003876:	d107      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003890:	d10f      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e017      	b.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d19b      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2201      	movs	r2, #1
 8003918:	2102      	movs	r1, #2
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ff6a 	bl	80037f4 <SPI_WaitFlagStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e013      	b.n	800395e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	@ 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff57 	bl	80037f4 <SPI_WaitFlagStateUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e000      	b.n	800395e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e042      	b.n	80039fe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fd ffbd 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2224      	movs	r2, #36	@ 0x24
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fd62 	bl	8004474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08a      	sub	sp, #40	@ 0x28
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d175      	bne.n	8003b12 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_Transmit+0x2c>
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06e      	b.n	8003b14 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2221      	movs	r2, #33	@ 0x21
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a44:	f7fe f964 	bl	8001d10 <HAL_GetTick>
 8003a48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5e:	d108      	bne.n	8003a72 <HAL_UART_Transmit+0x6c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e003      	b.n	8003a7a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a7a:	e02e      	b.n	8003ada <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	@ 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb00 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e03a      	b.n	8003b14 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e007      	b.n	8003acc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1cb      	bne.n	8003a7c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2140      	movs	r1, #64	@ 0x40
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 facc 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e006      	b.n	8003b14 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_UART_IRQHandler+0x66>
 8003b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fbbc 	bl	80042f8 <UART_Receive_IT>
      return;
 8003b80:	e25b      	b.n	800403a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80de 	beq.w	8003d48 <HAL_UART_IRQHandler+0x22c>
 8003b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80d1 	beq.w	8003d48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_UART_IRQHandler+0xae>
 8003bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_UART_IRQHandler+0xd2>
 8003bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f043 0202 	orr.w	r2, r3, #2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_UART_IRQHandler+0xf6>
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d011      	beq.n	8003c42 <HAL_UART_IRQHandler+0x126>
 8003c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0208 	orr.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 81f2 	beq.w	8004030 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_UART_IRQHandler+0x14e>
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fb47 	bl	80042f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_UART_IRQHandler+0x17a>
 8003c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04f      	beq.n	8003d36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa51 	bl	800413e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d041      	beq.n	8003d2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d9      	bne.n	8003caa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d02:	4a7e      	ldr	r2, [pc, #504]	@ (8003efc <HAL_UART_IRQHandler+0x3e0>)
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe f9d2 	bl	80020b4 <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00e      	b.n	8003d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f99c 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00a      	b.n	8003d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f998 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e006      	b.n	8003d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f994 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d42:	e175      	b.n	8004030 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	bf00      	nop
    return;
 8003d46:	e173      	b.n	8004030 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 814f 	bne.w	8003ff0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8148 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8141 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80b6 	beq.w	8003f00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8145 	beq.w	8004034 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db2:	429a      	cmp	r2, r3
 8003db4:	f080 813e 	bcs.w	8004034 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f000 8088 	beq.w	8003edc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003df8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1d9      	bne.n	8003dcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e1      	bne.n	8003e18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eac:	f023 0310 	bic.w	r3, r3, #16
 8003eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ebe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ec0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e3      	bne.n	8003e9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f8b0 	bl	800203c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8bf 	bl	8004076 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef8:	e09c      	b.n	8004034 <HAL_UART_IRQHandler+0x518>
 8003efa:	bf00      	nop
 8003efc:	08004203 	.word	0x08004203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 808e 	beq.w	8004038 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8089 	beq.w	8004038 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e3      	bne.n	8003f26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0310 	bic.w	r3, r3, #16
 8003fba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fc8:	61fa      	str	r2, [r7, #28]
 8003fca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	69b9      	ldr	r1, [r7, #24]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e3      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f844 	bl	8004076 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fee:	e023      	b.n	8004038 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_UART_IRQHandler+0x4f4>
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f90e 	bl	800422a <UART_Transmit_IT>
    return;
 800400e:	e014      	b.n	800403a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_UART_IRQHandler+0x51e>
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f94d 	bl	80042c8 <UART_EndTransmit_IT>
    return;
 800402e:	e004      	b.n	800403a <HAL_UART_IRQHandler+0x51e>
    return;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <HAL_UART_IRQHandler+0x51e>
      return;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_UART_IRQHandler+0x51e>
      return;
 8004038:	bf00      	nop
  }
}
 800403a:	37e8      	adds	r7, #232	@ 0xe8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	e03b      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a4:	d037      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fd fe33 	bl	8001d10 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <UART_WaitOnFlagUntilTimeout+0x30>
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03a      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d023      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d020      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d01d      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d116      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f81d 	bl	800413e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2208      	movs	r2, #8
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e00f      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	429a      	cmp	r2, r3
 8004132:	d0b4      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b095      	sub	sp, #84	@ 0x54
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800415c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004166:	643a      	str	r2, [r7, #64]	@ 0x40
 8004168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800416c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	61fb      	str	r3, [r7, #28]
   return(result);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800419a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e5      	bne.n	800417a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d119      	bne.n	80041ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 0310 	bic.w	r3, r3, #16
 80041cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d6:	61ba      	str	r2, [r7, #24]
 80041d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	613b      	str	r3, [r7, #16]
   return(result);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041f8:	bf00      	nop
 80041fa:	3754      	adds	r7, #84	@ 0x54
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff21 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b21      	cmp	r3, #33	@ 0x21
 800423c:	d13e      	bne.n	80042bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004246:	d114      	bne.n	8004272 <UART_Transmit_IT+0x48>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d110      	bne.n	8004272 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]
 8004270:	e008      	b.n	8004284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	1c59      	adds	r1, r3, #1
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6211      	str	r1, [r2, #32]
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4619      	mov	r1, r3
 8004292:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10f      	bne.n	80042b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fea9 	bl	8004040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b22      	cmp	r3, #34	@ 0x22
 800430a:	f040 80ae 	bne.w	800446a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	d117      	bne.n	8004348 <UART_Receive_IT+0x50>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d113      	bne.n	8004348 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	b29a      	uxth	r2, r3
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	629a      	str	r2, [r3, #40]	@ 0x28
 8004346:	e026      	b.n	8004396 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435a:	d007      	beq.n	800436c <UART_Receive_IT+0x74>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <UART_Receive_IT+0x82>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e008      	b.n	800438c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4619      	mov	r1, r3
 80043a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d15d      	bne.n	8004466 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0220 	bic.w	r2, r2, #32
 80043b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d135      	bne.n	800445c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61bb      	str	r3, [r7, #24]
   return(result);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b10      	cmp	r3, #16
 8004436:	d10a      	bne.n	800444e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fe0e 	bl	8004076 <HAL_UARTEx_RxEventCallback>
 800445a:	e002      	b.n	8004462 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fdf8 	bl	8004052 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e002      	b.n	800446c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3730      	adds	r7, #48	@ 0x30
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044ae:	f023 030c 	bic.w	r3, r3, #12
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004588 <UART_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d103      	bne.n	80044e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe fce2 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	e002      	b.n	80044ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7fe fcca 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80044e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	4a22      	ldr	r2, [pc, #136]	@ (800458c <UART_SetConfig+0x118>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	0119      	lsls	r1, r3, #4
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009a      	lsls	r2, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004520:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <UART_SetConfig+0x118>)
 8004522:	fba3 0302 	umull	r0, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2064      	movs	r0, #100	@ 0x64
 800452a:	fb00 f303 	mul.w	r3, r0, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	@ 0x32
 8004534:	4a15      	ldr	r2, [pc, #84]	@ (800458c <UART_SetConfig+0x118>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004540:	4419      	add	r1, r3
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009a      	lsls	r2, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	fbb2 f2f3 	udiv	r2, r2, r3
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <UART_SetConfig+0x118>)
 800455a:	fba3 0302 	umull	r0, r3, r3, r2
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2064      	movs	r0, #100	@ 0x64
 8004562:	fb00 f303 	mul.w	r3, r0, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	3332      	adds	r3, #50	@ 0x32
 800456c:	4a07      	ldr	r2, [pc, #28]	@ (800458c <UART_SetConfig+0x118>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	440a      	add	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40013800 	.word	0x40013800
 800458c:	51eb851f 	.word	0x51eb851f

08004590 <__cvt>:
 8004590:	2b00      	cmp	r3, #0
 8004592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004596:	461d      	mov	r5, r3
 8004598:	bfbb      	ittet	lt
 800459a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800459e:	461d      	movlt	r5, r3
 80045a0:	2300      	movge	r3, #0
 80045a2:	232d      	movlt	r3, #45	@ 0x2d
 80045a4:	b088      	sub	sp, #32
 80045a6:	4614      	mov	r4, r2
 80045a8:	bfb8      	it	lt
 80045aa:	4614      	movlt	r4, r2
 80045ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80045ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80045b0:	7013      	strb	r3, [r2, #0]
 80045b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80045b8:	f023 0820 	bic.w	r8, r3, #32
 80045bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045c0:	d005      	beq.n	80045ce <__cvt+0x3e>
 80045c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045c6:	d100      	bne.n	80045ca <__cvt+0x3a>
 80045c8:	3601      	adds	r6, #1
 80045ca:	2302      	movs	r3, #2
 80045cc:	e000      	b.n	80045d0 <__cvt+0x40>
 80045ce:	2303      	movs	r3, #3
 80045d0:	aa07      	add	r2, sp, #28
 80045d2:	9204      	str	r2, [sp, #16]
 80045d4:	aa06      	add	r2, sp, #24
 80045d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045da:	e9cd 3600 	strd	r3, r6, [sp]
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	f000 fe6d 	bl	80052c0 <_dtoa_r>
 80045e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045ea:	4607      	mov	r7, r0
 80045ec:	d119      	bne.n	8004622 <__cvt+0x92>
 80045ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80045f0:	07db      	lsls	r3, r3, #31
 80045f2:	d50e      	bpl.n	8004612 <__cvt+0x82>
 80045f4:	eb00 0906 	add.w	r9, r0, r6
 80045f8:	2200      	movs	r2, #0
 80045fa:	2300      	movs	r3, #0
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fc fa86 	bl	8000b10 <__aeabi_dcmpeq>
 8004604:	b108      	cbz	r0, 800460a <__cvt+0x7a>
 8004606:	f8cd 901c 	str.w	r9, [sp, #28]
 800460a:	2230      	movs	r2, #48	@ 0x30
 800460c:	9b07      	ldr	r3, [sp, #28]
 800460e:	454b      	cmp	r3, r9
 8004610:	d31e      	bcc.n	8004650 <__cvt+0xc0>
 8004612:	4638      	mov	r0, r7
 8004614:	9b07      	ldr	r3, [sp, #28]
 8004616:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004618:	1bdb      	subs	r3, r3, r7
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	b008      	add	sp, #32
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004626:	eb00 0906 	add.w	r9, r0, r6
 800462a:	d1e5      	bne.n	80045f8 <__cvt+0x68>
 800462c:	7803      	ldrb	r3, [r0, #0]
 800462e:	2b30      	cmp	r3, #48	@ 0x30
 8004630:	d10a      	bne.n	8004648 <__cvt+0xb8>
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fc fa69 	bl	8000b10 <__aeabi_dcmpeq>
 800463e:	b918      	cbnz	r0, 8004648 <__cvt+0xb8>
 8004640:	f1c6 0601 	rsb	r6, r6, #1
 8004644:	f8ca 6000 	str.w	r6, [sl]
 8004648:	f8da 3000 	ldr.w	r3, [sl]
 800464c:	4499      	add	r9, r3
 800464e:	e7d3      	b.n	80045f8 <__cvt+0x68>
 8004650:	1c59      	adds	r1, r3, #1
 8004652:	9107      	str	r1, [sp, #28]
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e7d9      	b.n	800460c <__cvt+0x7c>

08004658 <__exponent>:
 8004658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465a:	2900      	cmp	r1, #0
 800465c:	bfb6      	itet	lt
 800465e:	232d      	movlt	r3, #45	@ 0x2d
 8004660:	232b      	movge	r3, #43	@ 0x2b
 8004662:	4249      	neglt	r1, r1
 8004664:	2909      	cmp	r1, #9
 8004666:	7002      	strb	r2, [r0, #0]
 8004668:	7043      	strb	r3, [r0, #1]
 800466a:	dd29      	ble.n	80046c0 <__exponent+0x68>
 800466c:	f10d 0307 	add.w	r3, sp, #7
 8004670:	461d      	mov	r5, r3
 8004672:	270a      	movs	r7, #10
 8004674:	fbb1 f6f7 	udiv	r6, r1, r7
 8004678:	461a      	mov	r2, r3
 800467a:	fb07 1416 	mls	r4, r7, r6, r1
 800467e:	3430      	adds	r4, #48	@ 0x30
 8004680:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004684:	460c      	mov	r4, r1
 8004686:	2c63      	cmp	r4, #99	@ 0x63
 8004688:	4631      	mov	r1, r6
 800468a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800468e:	dcf1      	bgt.n	8004674 <__exponent+0x1c>
 8004690:	3130      	adds	r1, #48	@ 0x30
 8004692:	1e94      	subs	r4, r2, #2
 8004694:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004698:	4623      	mov	r3, r4
 800469a:	1c41      	adds	r1, r0, #1
 800469c:	42ab      	cmp	r3, r5
 800469e:	d30a      	bcc.n	80046b6 <__exponent+0x5e>
 80046a0:	f10d 0309 	add.w	r3, sp, #9
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	42ac      	cmp	r4, r5
 80046a8:	bf88      	it	hi
 80046aa:	2300      	movhi	r3, #0
 80046ac:	3302      	adds	r3, #2
 80046ae:	4403      	add	r3, r0
 80046b0:	1a18      	subs	r0, r3, r0
 80046b2:	b003      	add	sp, #12
 80046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046be:	e7ed      	b.n	800469c <__exponent+0x44>
 80046c0:	2330      	movs	r3, #48	@ 0x30
 80046c2:	3130      	adds	r1, #48	@ 0x30
 80046c4:	7083      	strb	r3, [r0, #2]
 80046c6:	70c1      	strb	r1, [r0, #3]
 80046c8:	1d03      	adds	r3, r0, #4
 80046ca:	e7f1      	b.n	80046b0 <__exponent+0x58>

080046cc <_printf_float>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	b091      	sub	sp, #68	@ 0x44
 80046d2:	460c      	mov	r4, r1
 80046d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80046d8:	4616      	mov	r6, r2
 80046da:	461f      	mov	r7, r3
 80046dc:	4605      	mov	r5, r0
 80046de:	f000 fce1 	bl	80050a4 <_localeconv_r>
 80046e2:	6803      	ldr	r3, [r0, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	9308      	str	r3, [sp, #32]
 80046e8:	f7fb fd32 	bl	8000150 <strlen>
 80046ec:	2300      	movs	r3, #0
 80046ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80046f0:	f8d8 3000 	ldr.w	r3, [r8]
 80046f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80046f6:	3307      	adds	r3, #7
 80046f8:	f023 0307 	bic.w	r3, r3, #7
 80046fc:	f103 0208 	add.w	r2, r3, #8
 8004700:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004704:	f8d4 b000 	ldr.w	fp, [r4]
 8004708:	f8c8 2000 	str.w	r2, [r8]
 800470c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004710:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004716:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800471a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800471e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004726:	4b9c      	ldr	r3, [pc, #624]	@ (8004998 <_printf_float+0x2cc>)
 8004728:	f7fc fa24 	bl	8000b74 <__aeabi_dcmpun>
 800472c:	bb70      	cbnz	r0, 800478c <_printf_float+0xc0>
 800472e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004736:	4b98      	ldr	r3, [pc, #608]	@ (8004998 <_printf_float+0x2cc>)
 8004738:	f7fc f9fe 	bl	8000b38 <__aeabi_dcmple>
 800473c:	bb30      	cbnz	r0, 800478c <_printf_float+0xc0>
 800473e:	2200      	movs	r2, #0
 8004740:	2300      	movs	r3, #0
 8004742:	4640      	mov	r0, r8
 8004744:	4649      	mov	r1, r9
 8004746:	f7fc f9ed 	bl	8000b24 <__aeabi_dcmplt>
 800474a:	b110      	cbz	r0, 8004752 <_printf_float+0x86>
 800474c:	232d      	movs	r3, #45	@ 0x2d
 800474e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004752:	4a92      	ldr	r2, [pc, #584]	@ (800499c <_printf_float+0x2d0>)
 8004754:	4b92      	ldr	r3, [pc, #584]	@ (80049a0 <_printf_float+0x2d4>)
 8004756:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800475a:	bf8c      	ite	hi
 800475c:	4690      	movhi	r8, r2
 800475e:	4698      	movls	r8, r3
 8004760:	2303      	movs	r3, #3
 8004762:	f04f 0900 	mov.w	r9, #0
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	f02b 0304 	bic.w	r3, fp, #4
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	4633      	mov	r3, r6
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	9700      	str	r7, [sp, #0]
 8004776:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004778:	f000 f9d4 	bl	8004b24 <_printf_common>
 800477c:	3001      	adds	r0, #1
 800477e:	f040 8090 	bne.w	80048a2 <_printf_float+0x1d6>
 8004782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004786:	b011      	add	sp, #68	@ 0x44
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	4640      	mov	r0, r8
 8004792:	4649      	mov	r1, r9
 8004794:	f7fc f9ee 	bl	8000b74 <__aeabi_dcmpun>
 8004798:	b148      	cbz	r0, 80047ae <_printf_float+0xe2>
 800479a:	464b      	mov	r3, r9
 800479c:	2b00      	cmp	r3, #0
 800479e:	bfb8      	it	lt
 80047a0:	232d      	movlt	r3, #45	@ 0x2d
 80047a2:	4a80      	ldr	r2, [pc, #512]	@ (80049a4 <_printf_float+0x2d8>)
 80047a4:	bfb8      	it	lt
 80047a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80047aa:	4b7f      	ldr	r3, [pc, #508]	@ (80049a8 <_printf_float+0x2dc>)
 80047ac:	e7d3      	b.n	8004756 <_printf_float+0x8a>
 80047ae:	6863      	ldr	r3, [r4, #4]
 80047b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	d13f      	bne.n	8004838 <_printf_float+0x16c>
 80047b8:	2306      	movs	r3, #6
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	9206      	str	r2, [sp, #24]
 80047c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80047c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80047cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80047ce:	9203      	str	r2, [sp, #12]
 80047d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80047d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	4642      	mov	r2, r8
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4628      	mov	r0, r5
 80047e0:	464b      	mov	r3, r9
 80047e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80047e4:	f7ff fed4 	bl	8004590 <__cvt>
 80047e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047ea:	4680      	mov	r8, r0
 80047ec:	2947      	cmp	r1, #71	@ 0x47
 80047ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80047f0:	d128      	bne.n	8004844 <_printf_float+0x178>
 80047f2:	1cc8      	adds	r0, r1, #3
 80047f4:	db02      	blt.n	80047fc <_printf_float+0x130>
 80047f6:	6863      	ldr	r3, [r4, #4]
 80047f8:	4299      	cmp	r1, r3
 80047fa:	dd40      	ble.n	800487e <_printf_float+0x1b2>
 80047fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004800:	fa5f fa8a 	uxtb.w	sl, sl
 8004804:	4652      	mov	r2, sl
 8004806:	3901      	subs	r1, #1
 8004808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800480c:	910d      	str	r1, [sp, #52]	@ 0x34
 800480e:	f7ff ff23 	bl	8004658 <__exponent>
 8004812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004814:	4681      	mov	r9, r0
 8004816:	1813      	adds	r3, r2, r0
 8004818:	2a01      	cmp	r2, #1
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	dc02      	bgt.n	8004824 <_printf_float+0x158>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	07d2      	lsls	r2, r2, #31
 8004822:	d501      	bpl.n	8004828 <_printf_float+0x15c>
 8004824:	3301      	adds	r3, #1
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800482c:	2b00      	cmp	r3, #0
 800482e:	d09e      	beq.n	800476e <_printf_float+0xa2>
 8004830:	232d      	movs	r3, #45	@ 0x2d
 8004832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004836:	e79a      	b.n	800476e <_printf_float+0xa2>
 8004838:	2947      	cmp	r1, #71	@ 0x47
 800483a:	d1bf      	bne.n	80047bc <_printf_float+0xf0>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1bd      	bne.n	80047bc <_printf_float+0xf0>
 8004840:	2301      	movs	r3, #1
 8004842:	e7ba      	b.n	80047ba <_printf_float+0xee>
 8004844:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004848:	d9dc      	bls.n	8004804 <_printf_float+0x138>
 800484a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800484e:	d118      	bne.n	8004882 <_printf_float+0x1b6>
 8004850:	2900      	cmp	r1, #0
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	dd0b      	ble.n	800486e <_printf_float+0x1a2>
 8004856:	6121      	str	r1, [r4, #16]
 8004858:	b913      	cbnz	r3, 8004860 <_printf_float+0x194>
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	07d0      	lsls	r0, r2, #31
 800485e:	d502      	bpl.n	8004866 <_printf_float+0x19a>
 8004860:	3301      	adds	r3, #1
 8004862:	440b      	add	r3, r1
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	f04f 0900 	mov.w	r9, #0
 800486a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800486c:	e7dc      	b.n	8004828 <_printf_float+0x15c>
 800486e:	b913      	cbnz	r3, 8004876 <_printf_float+0x1aa>
 8004870:	6822      	ldr	r2, [r4, #0]
 8004872:	07d2      	lsls	r2, r2, #31
 8004874:	d501      	bpl.n	800487a <_printf_float+0x1ae>
 8004876:	3302      	adds	r3, #2
 8004878:	e7f4      	b.n	8004864 <_printf_float+0x198>
 800487a:	2301      	movs	r3, #1
 800487c:	e7f2      	b.n	8004864 <_printf_float+0x198>
 800487e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004884:	4299      	cmp	r1, r3
 8004886:	db05      	blt.n	8004894 <_printf_float+0x1c8>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6121      	str	r1, [r4, #16]
 800488c:	07d8      	lsls	r0, r3, #31
 800488e:	d5ea      	bpl.n	8004866 <_printf_float+0x19a>
 8004890:	1c4b      	adds	r3, r1, #1
 8004892:	e7e7      	b.n	8004864 <_printf_float+0x198>
 8004894:	2900      	cmp	r1, #0
 8004896:	bfcc      	ite	gt
 8004898:	2201      	movgt	r2, #1
 800489a:	f1c1 0202 	rsble	r2, r1, #2
 800489e:	4413      	add	r3, r2
 80048a0:	e7e0      	b.n	8004864 <_printf_float+0x198>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	055a      	lsls	r2, r3, #21
 80048a6:	d407      	bmi.n	80048b8 <_printf_float+0x1ec>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	4642      	mov	r2, r8
 80048ac:	4631      	mov	r1, r6
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	d12b      	bne.n	800490e <_printf_float+0x242>
 80048b6:	e764      	b.n	8004782 <_printf_float+0xb6>
 80048b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048bc:	f240 80dc 	bls.w	8004a78 <_printf_float+0x3ac>
 80048c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048c4:	2200      	movs	r2, #0
 80048c6:	2300      	movs	r3, #0
 80048c8:	f7fc f922 	bl	8000b10 <__aeabi_dcmpeq>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d033      	beq.n	8004938 <_printf_float+0x26c>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <_printf_float+0x2e0>)
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af51 	beq.w	8004782 <_printf_float+0xb6>
 80048e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80048e4:	4543      	cmp	r3, r8
 80048e6:	db02      	blt.n	80048ee <_printf_float+0x222>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07d8      	lsls	r0, r3, #31
 80048ec:	d50f      	bpl.n	800490e <_printf_float+0x242>
 80048ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b8      	blx	r7
 80048f8:	3001      	adds	r0, #1
 80048fa:	f43f af42 	beq.w	8004782 <_printf_float+0xb6>
 80048fe:	f04f 0900 	mov.w	r9, #0
 8004902:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004906:	f104 0a1a 	add.w	sl, r4, #26
 800490a:	45c8      	cmp	r8, r9
 800490c:	dc09      	bgt.n	8004922 <_printf_float+0x256>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	079b      	lsls	r3, r3, #30
 8004912:	f100 8102 	bmi.w	8004b1a <_printf_float+0x44e>
 8004916:	68e0      	ldr	r0, [r4, #12]
 8004918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800491a:	4298      	cmp	r0, r3
 800491c:	bfb8      	it	lt
 800491e:	4618      	movlt	r0, r3
 8004920:	e731      	b.n	8004786 <_printf_float+0xba>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f af28 	beq.w	8004782 <_printf_float+0xb6>
 8004932:	f109 0901 	add.w	r9, r9, #1
 8004936:	e7e8      	b.n	800490a <_printf_float+0x23e>
 8004938:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	dc38      	bgt.n	80049b0 <_printf_float+0x2e4>
 800493e:	2301      	movs	r3, #1
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
 8004944:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <_printf_float+0x2e0>)
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	f43f af1a 	beq.w	8004782 <_printf_float+0xb6>
 800494e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004952:	ea59 0303 	orrs.w	r3, r9, r3
 8004956:	d102      	bne.n	800495e <_printf_float+0x292>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	07d9      	lsls	r1, r3, #31
 800495c:	d5d7      	bpl.n	800490e <_printf_float+0x242>
 800495e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f af0a 	beq.w	8004782 <_printf_float+0xb6>
 800496e:	f04f 0a00 	mov.w	sl, #0
 8004972:	f104 0b1a 	add.w	fp, r4, #26
 8004976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004978:	425b      	negs	r3, r3
 800497a:	4553      	cmp	r3, sl
 800497c:	dc01      	bgt.n	8004982 <_printf_float+0x2b6>
 800497e:	464b      	mov	r3, r9
 8004980:	e793      	b.n	80048aa <_printf_float+0x1de>
 8004982:	2301      	movs	r3, #1
 8004984:	465a      	mov	r2, fp
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f aef8 	beq.w	8004782 <_printf_float+0xb6>
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	e7ee      	b.n	8004976 <_printf_float+0x2aa>
 8004998:	7fefffff 	.word	0x7fefffff
 800499c:	080074c2 	.word	0x080074c2
 80049a0:	080074be 	.word	0x080074be
 80049a4:	080074ca 	.word	0x080074ca
 80049a8:	080074c6 	.word	0x080074c6
 80049ac:	080074ce 	.word	0x080074ce
 80049b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049b6:	4553      	cmp	r3, sl
 80049b8:	bfa8      	it	ge
 80049ba:	4653      	movge	r3, sl
 80049bc:	2b00      	cmp	r3, #0
 80049be:	4699      	mov	r9, r3
 80049c0:	dc36      	bgt.n	8004a30 <_printf_float+0x364>
 80049c2:	f04f 0b00 	mov.w	fp, #0
 80049c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ca:	f104 021a 	add.w	r2, r4, #26
 80049ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d2:	eba3 0309 	sub.w	r3, r3, r9
 80049d6:	455b      	cmp	r3, fp
 80049d8:	dc31      	bgt.n	8004a3e <_printf_float+0x372>
 80049da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049dc:	459a      	cmp	sl, r3
 80049de:	dc3a      	bgt.n	8004a56 <_printf_float+0x38a>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	07da      	lsls	r2, r3, #31
 80049e4:	d437      	bmi.n	8004a56 <_printf_float+0x38a>
 80049e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049e8:	ebaa 0903 	sub.w	r9, sl, r3
 80049ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ee:	ebaa 0303 	sub.w	r3, sl, r3
 80049f2:	4599      	cmp	r9, r3
 80049f4:	bfa8      	it	ge
 80049f6:	4699      	movge	r9, r3
 80049f8:	f1b9 0f00 	cmp.w	r9, #0
 80049fc:	dc33      	bgt.n	8004a66 <_printf_float+0x39a>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a06:	f104 0b1a 	add.w	fp, r4, #26
 8004a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004a10:	eba3 0309 	sub.w	r3, r3, r9
 8004a14:	4543      	cmp	r3, r8
 8004a16:	f77f af7a 	ble.w	800490e <_printf_float+0x242>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	465a      	mov	r2, fp
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f aeac 	beq.w	8004782 <_printf_float+0xb6>
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	e7ec      	b.n	8004a0a <_printf_float+0x33e>
 8004a30:	4642      	mov	r2, r8
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b8      	blx	r7
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d1c2      	bne.n	80049c2 <_printf_float+0x2f6>
 8004a3c:	e6a1      	b.n	8004782 <_printf_float+0xb6>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f43f ae9a 	beq.w	8004782 <_printf_float+0xb6>
 8004a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a50:	f10b 0b01 	add.w	fp, fp, #1
 8004a54:	e7bb      	b.n	80049ce <_printf_float+0x302>
 8004a56:	4631      	mov	r1, r6
 8004a58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d1c0      	bne.n	80049e6 <_printf_float+0x31a>
 8004a64:	e68d      	b.n	8004782 <_printf_float+0xb6>
 8004a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a68:	464b      	mov	r3, r9
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	4442      	add	r2, r8
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	d1c3      	bne.n	80049fe <_printf_float+0x332>
 8004a76:	e684      	b.n	8004782 <_printf_float+0xb6>
 8004a78:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a7c:	f1ba 0f01 	cmp.w	sl, #1
 8004a80:	dc01      	bgt.n	8004a86 <_printf_float+0x3ba>
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d536      	bpl.n	8004af4 <_printf_float+0x428>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4642      	mov	r2, r8
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f ae76 	beq.w	8004782 <_printf_float+0xb6>
 8004a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f ae6e 	beq.w	8004782 <_printf_float+0xb6>
 8004aa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004ab2:	f7fc f82d 	bl	8000b10 <__aeabi_dcmpeq>
 8004ab6:	b9c0      	cbnz	r0, 8004aea <_printf_float+0x41e>
 8004ab8:	4653      	mov	r3, sl
 8004aba:	f108 0201 	add.w	r2, r8, #1
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b8      	blx	r7
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d10c      	bne.n	8004ae2 <_printf_float+0x416>
 8004ac8:	e65b      	b.n	8004782 <_printf_float+0xb6>
 8004aca:	2301      	movs	r3, #1
 8004acc:	465a      	mov	r2, fp
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae54 	beq.w	8004782 <_printf_float+0xb6>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	45d0      	cmp	r8, sl
 8004ae0:	dbf3      	blt.n	8004aca <_printf_float+0x3fe>
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ae8:	e6e0      	b.n	80048ac <_printf_float+0x1e0>
 8004aea:	f04f 0800 	mov.w	r8, #0
 8004aee:	f104 0b1a 	add.w	fp, r4, #26
 8004af2:	e7f4      	b.n	8004ade <_printf_float+0x412>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4642      	mov	r2, r8
 8004af8:	e7e1      	b.n	8004abe <_printf_float+0x3f2>
 8004afa:	2301      	movs	r3, #1
 8004afc:	464a      	mov	r2, r9
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b8      	blx	r7
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f ae3c 	beq.w	8004782 <_printf_float+0xb6>
 8004b0a:	f108 0801 	add.w	r8, r8, #1
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	4543      	cmp	r3, r8
 8004b16:	dcf0      	bgt.n	8004afa <_printf_float+0x42e>
 8004b18:	e6fd      	b.n	8004916 <_printf_float+0x24a>
 8004b1a:	f04f 0800 	mov.w	r8, #0
 8004b1e:	f104 0919 	add.w	r9, r4, #25
 8004b22:	e7f4      	b.n	8004b0e <_printf_float+0x442>

08004b24 <_printf_common>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	4616      	mov	r6, r2
 8004b2a:	4698      	mov	r8, r3
 8004b2c:	688a      	ldr	r2, [r1, #8]
 8004b2e:	690b      	ldr	r3, [r1, #16]
 8004b30:	4607      	mov	r7, r0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	bfb8      	it	lt
 8004b36:	4613      	movlt	r3, r2
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b3e:	460c      	mov	r4, r1
 8004b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b44:	b10a      	cbz	r2, 8004b4a <_printf_common+0x26>
 8004b46:	3301      	adds	r3, #1
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	0699      	lsls	r1, r3, #26
 8004b4e:	bf42      	ittt	mi
 8004b50:	6833      	ldrmi	r3, [r6, #0]
 8004b52:	3302      	addmi	r3, #2
 8004b54:	6033      	strmi	r3, [r6, #0]
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	f015 0506 	ands.w	r5, r5, #6
 8004b5c:	d106      	bne.n	8004b6c <_printf_common+0x48>
 8004b5e:	f104 0a19 	add.w	sl, r4, #25
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	6832      	ldr	r2, [r6, #0]
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dc2b      	bgt.n	8004bc4 <_printf_common+0xa0>
 8004b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	3b00      	subs	r3, #0
 8004b74:	bf18      	it	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	0692      	lsls	r2, r2, #26
 8004b7a:	d430      	bmi.n	8004bde <_printf_common+0xba>
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b84:	47c8      	blx	r9
 8004b86:	3001      	adds	r0, #1
 8004b88:	d023      	beq.n	8004bd2 <_printf_common+0xae>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	f003 0306 	and.w	r3, r3, #6
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	bf14      	ite	ne
 8004b96:	2500      	movne	r5, #0
 8004b98:	6833      	ldreq	r3, [r6, #0]
 8004b9a:	f04f 0600 	mov.w	r6, #0
 8004b9e:	bf08      	it	eq
 8004ba0:	68e5      	ldreq	r5, [r4, #12]
 8004ba2:	f104 041a 	add.w	r4, r4, #26
 8004ba6:	bf08      	it	eq
 8004ba8:	1aed      	subeq	r5, r5, r3
 8004baa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004bae:	bf08      	it	eq
 8004bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	bfc4      	itt	gt
 8004bb8:	1a9b      	subgt	r3, r3, r2
 8004bba:	18ed      	addgt	r5, r5, r3
 8004bbc:	42b5      	cmp	r5, r6
 8004bbe:	d11a      	bne.n	8004bf6 <_printf_common+0xd2>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e008      	b.n	8004bd6 <_printf_common+0xb2>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4638      	mov	r0, r7
 8004bcc:	47c8      	blx	r9
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d103      	bne.n	8004bda <_printf_common+0xb6>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bda:	3501      	adds	r5, #1
 8004bdc:	e7c1      	b.n	8004b62 <_printf_common+0x3e>
 8004bde:	2030      	movs	r0, #48	@ 0x30
 8004be0:	18e1      	adds	r1, r4, r3
 8004be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bec:	4422      	add	r2, r4
 8004bee:	3302      	adds	r3, #2
 8004bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bf4:	e7c2      	b.n	8004b7c <_printf_common+0x58>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	47c8      	blx	r9
 8004c00:	3001      	adds	r0, #1
 8004c02:	d0e6      	beq.n	8004bd2 <_printf_common+0xae>
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7d9      	b.n	8004bbc <_printf_common+0x98>

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	4691      	mov	r9, r2
 8004c10:	2f78      	cmp	r7, #120	@ 0x78
 8004c12:	4680      	mov	r8, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	469a      	mov	sl, r3
 8004c18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	@ 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d1 	beq.w	8004dcc <_printf_i+0x1c4>
 8004c2a:	2f58      	cmp	r7, #88	@ 0x58
 8004c2c:	f000 80b8 	beq.w	8004da0 <_printf_i+0x198>
 8004c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	@ (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004db3 	.word	0x08004db3
 8004c78:	08004cdf 	.word	0x08004cdf
 8004c7c:	08004d6d 	.word	0x08004d6d
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004dd5 	.word	0x08004dd5
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004cdf 	.word	0x08004cdf
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004d75 	.word	0x08004d75
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6032      	str	r2, [r6, #0]
 8004ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e09c      	b.n	8004dee <_printf_i+0x1e6>
 8004cb4:	6833      	ldr	r3, [r6, #0]
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	1d19      	adds	r1, r3, #4
 8004cba:	6031      	str	r1, [r6, #0]
 8004cbc:	0606      	lsls	r6, r0, #24
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_i+0xbc>
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	e003      	b.n	8004ccc <_printf_i+0xc4>
 8004cc4:	0645      	lsls	r5, r0, #25
 8004cc6:	d5fb      	bpl.n	8004cc0 <_printf_i+0xb8>
 8004cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	da03      	bge.n	8004cd8 <_printf_i+0xd0>
 8004cd0:	232d      	movs	r3, #45	@ 0x2d
 8004cd2:	426d      	negs	r5, r5
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd8:	230a      	movs	r3, #10
 8004cda:	4858      	ldr	r0, [pc, #352]	@ (8004e3c <_printf_i+0x234>)
 8004cdc:	e011      	b.n	8004d02 <_printf_i+0xfa>
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	0608      	lsls	r0, r1, #24
 8004ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ce8:	d402      	bmi.n	8004cf0 <_printf_i+0xe8>
 8004cea:	0649      	lsls	r1, r1, #25
 8004cec:	bf48      	it	mi
 8004cee:	b2ad      	uxthmi	r5, r5
 8004cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	bf14      	ite	ne
 8004cf6:	230a      	movne	r3, #10
 8004cf8:	2308      	moveq	r3, #8
 8004cfa:	4850      	ldr	r0, [pc, #320]	@ (8004e3c <_printf_i+0x234>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d02:	6866      	ldr	r6, [r4, #4]
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	60a6      	str	r6, [r4, #8]
 8004d08:	db05      	blt.n	8004d16 <_printf_i+0x10e>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	432e      	orrs	r6, r5
 8004d0e:	f021 0104 	bic.w	r1, r1, #4
 8004d12:	6021      	str	r1, [r4, #0]
 8004d14:	d04b      	beq.n	8004dae <_printf_i+0x1a6>
 8004d16:	4616      	mov	r6, r2
 8004d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004d20:	5dc7      	ldrb	r7, [r0, r7]
 8004d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d26:	462f      	mov	r7, r5
 8004d28:	42bb      	cmp	r3, r7
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	d9f4      	bls.n	8004d18 <_printf_i+0x110>
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d10b      	bne.n	8004d4a <_printf_i+0x142>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	07df      	lsls	r7, r3, #31
 8004d36:	d508      	bpl.n	8004d4a <_printf_i+0x142>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	6861      	ldr	r1, [r4, #4]
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	bfde      	ittt	le
 8004d40:	2330      	movle	r3, #48	@ 0x30
 8004d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d46:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d4a:	1b92      	subs	r2, r2, r6
 8004d4c:	6122      	str	r2, [r4, #16]
 8004d4e:	464b      	mov	r3, r9
 8004d50:	4621      	mov	r1, r4
 8004d52:	4640      	mov	r0, r8
 8004d54:	f8cd a000 	str.w	sl, [sp]
 8004d58:	aa03      	add	r2, sp, #12
 8004d5a:	f7ff fee3 	bl	8004b24 <_printf_common>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d14a      	bne.n	8004df8 <_printf_i+0x1f0>
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d66:	b004      	add	sp, #16
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	f043 0320 	orr.w	r3, r3, #32
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	2778      	movs	r7, #120	@ 0x78
 8004d76:	4832      	ldr	r0, [pc, #200]	@ (8004e40 <_printf_i+0x238>)
 8004d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	6831      	ldr	r1, [r6, #0]
 8004d80:	061f      	lsls	r7, r3, #24
 8004d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d86:	d402      	bmi.n	8004d8e <_printf_i+0x186>
 8004d88:	065f      	lsls	r7, r3, #25
 8004d8a:	bf48      	it	mi
 8004d8c:	b2ad      	uxthmi	r5, r5
 8004d8e:	6031      	str	r1, [r6, #0]
 8004d90:	07d9      	lsls	r1, r3, #31
 8004d92:	bf44      	itt	mi
 8004d94:	f043 0320 	orrmi.w	r3, r3, #32
 8004d98:	6023      	strmi	r3, [r4, #0]
 8004d9a:	b11d      	cbz	r5, 8004da4 <_printf_i+0x19c>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	e7ad      	b.n	8004cfc <_printf_i+0xf4>
 8004da0:	4826      	ldr	r0, [pc, #152]	@ (8004e3c <_printf_i+0x234>)
 8004da2:	e7e9      	b.n	8004d78 <_printf_i+0x170>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	e7f6      	b.n	8004d9c <_printf_i+0x194>
 8004dae:	4616      	mov	r6, r2
 8004db0:	e7bd      	b.n	8004d2e <_printf_i+0x126>
 8004db2:	6833      	ldr	r3, [r6, #0]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6961      	ldr	r1, [r4, #20]
 8004dba:	6030      	str	r0, [r6, #0]
 8004dbc:	062e      	lsls	r6, r5, #24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	d501      	bpl.n	8004dc6 <_printf_i+0x1be>
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	e002      	b.n	8004dcc <_printf_i+0x1c4>
 8004dc6:	0668      	lsls	r0, r5, #25
 8004dc8:	d5fb      	bpl.n	8004dc2 <_printf_i+0x1ba>
 8004dca:	8019      	strh	r1, [r3, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4616      	mov	r6, r2
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	e7bc      	b.n	8004d4e <_printf_i+0x146>
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	6032      	str	r2, [r6, #0]
 8004ddc:	681e      	ldr	r6, [r3, #0]
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f9d6 	bl	8005192 <memchr>
 8004de6:	b108      	cbz	r0, 8004dec <_printf_i+0x1e4>
 8004de8:	1b80      	subs	r0, r0, r6
 8004dea:	6060      	str	r0, [r4, #4]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	2300      	movs	r3, #0
 8004df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df6:	e7aa      	b.n	8004d4e <_printf_i+0x146>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	47d0      	blx	sl
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0ad      	beq.n	8004d62 <_printf_i+0x15a>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	079b      	lsls	r3, r3, #30
 8004e0a:	d413      	bmi.n	8004e34 <_printf_i+0x22c>
 8004e0c:	68e0      	ldr	r0, [r4, #12]
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	4298      	cmp	r0, r3
 8004e12:	bfb8      	it	lt
 8004e14:	4618      	movlt	r0, r3
 8004e16:	e7a6      	b.n	8004d66 <_printf_i+0x15e>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4640      	mov	r0, r8
 8004e20:	47d0      	blx	sl
 8004e22:	3001      	adds	r0, #1
 8004e24:	d09d      	beq.n	8004d62 <_printf_i+0x15a>
 8004e26:	3501      	adds	r5, #1
 8004e28:	68e3      	ldr	r3, [r4, #12]
 8004e2a:	9903      	ldr	r1, [sp, #12]
 8004e2c:	1a5b      	subs	r3, r3, r1
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	dcf2      	bgt.n	8004e18 <_printf_i+0x210>
 8004e32:	e7eb      	b.n	8004e0c <_printf_i+0x204>
 8004e34:	2500      	movs	r5, #0
 8004e36:	f104 0619 	add.w	r6, r4, #25
 8004e3a:	e7f5      	b.n	8004e28 <_printf_i+0x220>
 8004e3c:	080074d0 	.word	0x080074d0
 8004e40:	080074e1 	.word	0x080074e1

08004e44 <std>:
 8004e44:	2300      	movs	r3, #0
 8004e46:	b510      	push	{r4, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	8181      	strh	r1, [r0, #12]
 8004e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e58:	81c2      	strh	r2, [r0, #14]
 8004e5a:	6183      	str	r3, [r0, #24]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	2208      	movs	r2, #8
 8004e60:	305c      	adds	r0, #92	@ 0x5c
 8004e62:	f000 f916 	bl	8005092 <memset>
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <std+0x58>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <std+0x5c>)
 8004e6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <std+0x60>)
 8004e72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <std+0x64>)
 8004e76:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e78:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <std+0x68>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d006      	beq.n	8004e8c <std+0x48>
 8004e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e82:	4294      	cmp	r4, r2
 8004e84:	d002      	beq.n	8004e8c <std+0x48>
 8004e86:	33d0      	adds	r3, #208	@ 0xd0
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	d105      	bne.n	8004e98 <std+0x54>
 8004e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e94:	f000 b97a 	b.w	800518c <__retarget_lock_init_recursive>
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800500d 	.word	0x0800500d
 8004ea0:	0800502f 	.word	0x0800502f
 8004ea4:	08005067 	.word	0x08005067
 8004ea8:	0800508b 	.word	0x0800508b
 8004eac:	200003cc 	.word	0x200003cc

08004eb0 <stdio_exit_handler>:
 8004eb0:	4a02      	ldr	r2, [pc, #8]	@ (8004ebc <stdio_exit_handler+0xc>)
 8004eb2:	4903      	ldr	r1, [pc, #12]	@ (8004ec0 <stdio_exit_handler+0x10>)
 8004eb4:	4803      	ldr	r0, [pc, #12]	@ (8004ec4 <stdio_exit_handler+0x14>)
 8004eb6:	f000 b869 	b.w	8004f8c <_fwalk_sglue>
 8004eba:	bf00      	nop
 8004ebc:	2000000c 	.word	0x2000000c
 8004ec0:	08006b09 	.word	0x08006b09
 8004ec4:	2000001c 	.word	0x2000001c

08004ec8 <cleanup_stdio>:
 8004ec8:	6841      	ldr	r1, [r0, #4]
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <cleanup_stdio+0x34>)
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4299      	cmp	r1, r3
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	d001      	beq.n	8004ed8 <cleanup_stdio+0x10>
 8004ed4:	f001 fe18 	bl	8006b08 <_fflush_r>
 8004ed8:	68a1      	ldr	r1, [r4, #8]
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <cleanup_stdio+0x38>)
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <cleanup_stdio+0x1e>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f001 fe11 	bl	8006b08 <_fflush_r>
 8004ee6:	68e1      	ldr	r1, [r4, #12]
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <cleanup_stdio+0x3c>)
 8004eea:	4299      	cmp	r1, r3
 8004eec:	d004      	beq.n	8004ef8 <cleanup_stdio+0x30>
 8004eee:	4620      	mov	r0, r4
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	f001 be08 	b.w	8006b08 <_fflush_r>
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	bf00      	nop
 8004efc:	200003cc 	.word	0x200003cc
 8004f00:	20000434 	.word	0x20000434
 8004f04:	2000049c 	.word	0x2000049c

08004f08 <global_stdio_init.part.0>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <global_stdio_init.part.0+0x30>)
 8004f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004f3c <global_stdio_init.part.0+0x34>)
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f40 <global_stdio_init.part.0+0x38>)
 8004f10:	4620      	mov	r0, r4
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	2104      	movs	r1, #4
 8004f16:	2200      	movs	r2, #0
 8004f18:	f7ff ff94 	bl	8004e44 <std>
 8004f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f20:	2201      	movs	r2, #1
 8004f22:	2109      	movs	r1, #9
 8004f24:	f7ff ff8e 	bl	8004e44 <std>
 8004f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f32:	2112      	movs	r1, #18
 8004f34:	f7ff bf86 	b.w	8004e44 <std>
 8004f38:	20000504 	.word	0x20000504
 8004f3c:	200003cc 	.word	0x200003cc
 8004f40:	08004eb1 	.word	0x08004eb1

08004f44 <__sfp_lock_acquire>:
 8004f44:	4801      	ldr	r0, [pc, #4]	@ (8004f4c <__sfp_lock_acquire+0x8>)
 8004f46:	f000 b922 	b.w	800518e <__retarget_lock_acquire_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	2000050d 	.word	0x2000050d

08004f50 <__sfp_lock_release>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__sfp_lock_release+0x8>)
 8004f52:	f000 b91d 	b.w	8005190 <__retarget_lock_release_recursive>
 8004f56:	bf00      	nop
 8004f58:	2000050d 	.word	0x2000050d

08004f5c <__sinit>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4604      	mov	r4, r0
 8004f60:	f7ff fff0 	bl	8004f44 <__sfp_lock_acquire>
 8004f64:	6a23      	ldr	r3, [r4, #32]
 8004f66:	b11b      	cbz	r3, 8004f70 <__sinit+0x14>
 8004f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f6c:	f7ff bff0 	b.w	8004f50 <__sfp_lock_release>
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <__sinit+0x28>)
 8004f72:	6223      	str	r3, [r4, #32]
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <__sinit+0x2c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f5      	bne.n	8004f68 <__sinit+0xc>
 8004f7c:	f7ff ffc4 	bl	8004f08 <global_stdio_init.part.0>
 8004f80:	e7f2      	b.n	8004f68 <__sinit+0xc>
 8004f82:	bf00      	nop
 8004f84:	08004ec9 	.word	0x08004ec9
 8004f88:	20000504 	.word	0x20000504

08004f8c <_fwalk_sglue>:
 8004f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f90:	4607      	mov	r7, r0
 8004f92:	4688      	mov	r8, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	2600      	movs	r6, #0
 8004f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004fa0:	d505      	bpl.n	8004fae <_fwalk_sglue+0x22>
 8004fa2:	6824      	ldr	r4, [r4, #0]
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d1f7      	bne.n	8004f98 <_fwalk_sglue+0xc>
 8004fa8:	4630      	mov	r0, r6
 8004faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d907      	bls.n	8004fc4 <_fwalk_sglue+0x38>
 8004fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	d003      	beq.n	8004fc4 <_fwalk_sglue+0x38>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c0      	blx	r8
 8004fc2:	4306      	orrs	r6, r0
 8004fc4:	3568      	adds	r5, #104	@ 0x68
 8004fc6:	e7e9      	b.n	8004f9c <_fwalk_sglue+0x10>

08004fc8 <siprintf>:
 8004fc8:	b40e      	push	{r1, r2, r3}
 8004fca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	2400      	movs	r4, #0
 8004fd2:	b09d      	sub	sp, #116	@ 0x74
 8004fd4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004fd6:	9002      	str	r0, [sp, #8]
 8004fd8:	9006      	str	r0, [sp, #24]
 8004fda:	9107      	str	r1, [sp, #28]
 8004fdc:	9104      	str	r1, [sp, #16]
 8004fde:	4809      	ldr	r0, [pc, #36]	@ (8005004 <siprintf+0x3c>)
 8004fe0:	4909      	ldr	r1, [pc, #36]	@ (8005008 <siprintf+0x40>)
 8004fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe6:	9105      	str	r1, [sp, #20]
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	a902      	add	r1, sp, #8
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ff0:	f001 fc0e 	bl	8006810 <_svfiprintf_r>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	701c      	strb	r4, [r3, #0]
 8004ff8:	b01d      	add	sp, #116	@ 0x74
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffe:	b003      	add	sp, #12
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000018 	.word	0x20000018
 8005008:	ffff0208 	.word	0xffff0208

0800500c <__sread>:
 800500c:	b510      	push	{r4, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005014:	f000 f86c 	bl	80050f0 <_read_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	bfab      	itete	ge
 800501c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800501e:	89a3      	ldrhlt	r3, [r4, #12]
 8005020:	181b      	addge	r3, r3, r0
 8005022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005026:	bfac      	ite	ge
 8005028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800502a:	81a3      	strhlt	r3, [r4, #12]
 800502c:	bd10      	pop	{r4, pc}

0800502e <__swrite>:
 800502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005032:	461f      	mov	r7, r3
 8005034:	898b      	ldrh	r3, [r1, #12]
 8005036:	4605      	mov	r5, r0
 8005038:	05db      	lsls	r3, r3, #23
 800503a:	460c      	mov	r4, r1
 800503c:	4616      	mov	r6, r2
 800503e:	d505      	bpl.n	800504c <__swrite+0x1e>
 8005040:	2302      	movs	r3, #2
 8005042:	2200      	movs	r2, #0
 8005044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005048:	f000 f840 	bl	80050cc <_lseek_r>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	4632      	mov	r2, r6
 8005050:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	4628      	mov	r0, r5
 8005058:	463b      	mov	r3, r7
 800505a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	f000 b857 	b.w	8005114 <_write_r>

08005066 <__sseek>:
 8005066:	b510      	push	{r4, lr}
 8005068:	460c      	mov	r4, r1
 800506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506e:	f000 f82d 	bl	80050cc <_lseek_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	bf15      	itete	ne
 8005078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800507a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800507e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005082:	81a3      	strheq	r3, [r4, #12]
 8005084:	bf18      	it	ne
 8005086:	81a3      	strhne	r3, [r4, #12]
 8005088:	bd10      	pop	{r4, pc}

0800508a <__sclose>:
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 b80d 	b.w	80050ac <_close_r>

08005092 <memset>:
 8005092:	4603      	mov	r3, r0
 8005094:	4402      	add	r2, r0
 8005096:	4293      	cmp	r3, r2
 8005098:	d100      	bne.n	800509c <memset+0xa>
 800509a:	4770      	bx	lr
 800509c:	f803 1b01 	strb.w	r1, [r3], #1
 80050a0:	e7f9      	b.n	8005096 <memset+0x4>
	...

080050a4 <_localeconv_r>:
 80050a4:	4800      	ldr	r0, [pc, #0]	@ (80050a8 <_localeconv_r+0x4>)
 80050a6:	4770      	bx	lr
 80050a8:	20000158 	.word	0x20000158

080050ac <_close_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	2300      	movs	r3, #0
 80050b0:	4d05      	ldr	r5, [pc, #20]	@ (80050c8 <_close_r+0x1c>)
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fc fd3f 	bl	8001b3a <_close>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_close_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_close_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000508 	.word	0x20000508

080050cc <_lseek_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	2200      	movs	r2, #0
 80050d6:	4d05      	ldr	r5, [pc, #20]	@ (80050ec <_lseek_r+0x20>)
 80050d8:	602a      	str	r2, [r5, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fc fd51 	bl	8001b82 <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_lseek_r+0x1e>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_lseek_r+0x1e>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000508 	.word	0x20000508

080050f0 <_read_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	2200      	movs	r2, #0
 80050fa:	4d05      	ldr	r5, [pc, #20]	@ (8005110 <_read_r+0x20>)
 80050fc:	602a      	str	r2, [r5, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fc fce2 	bl	8001ac8 <_read>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_read_r+0x1e>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_read_r+0x1e>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000508 	.word	0x20000508

08005114 <_write_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	2200      	movs	r2, #0
 800511e:	4d05      	ldr	r5, [pc, #20]	@ (8005134 <_write_r+0x20>)
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fc fced 	bl	8001b02 <_write>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_write_r+0x1e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_write_r+0x1e>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000508 	.word	0x20000508

08005138 <__errno>:
 8005138:	4b01      	ldr	r3, [pc, #4]	@ (8005140 <__errno+0x8>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000018 	.word	0x20000018

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	2600      	movs	r6, #0
 8005148:	4d0c      	ldr	r5, [pc, #48]	@ (800517c <__libc_init_array+0x38>)
 800514a:	4c0d      	ldr	r4, [pc, #52]	@ (8005180 <__libc_init_array+0x3c>)
 800514c:	1b64      	subs	r4, r4, r5
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	42a6      	cmp	r6, r4
 8005152:	d109      	bne.n	8005168 <__libc_init_array+0x24>
 8005154:	f002 f96a 	bl	800742c <_init>
 8005158:	2600      	movs	r6, #0
 800515a:	4d0a      	ldr	r5, [pc, #40]	@ (8005184 <__libc_init_array+0x40>)
 800515c:	4c0a      	ldr	r4, [pc, #40]	@ (8005188 <__libc_init_array+0x44>)
 800515e:	1b64      	subs	r4, r4, r5
 8005160:	10a4      	asrs	r4, r4, #2
 8005162:	42a6      	cmp	r6, r4
 8005164:	d105      	bne.n	8005172 <__libc_init_array+0x2e>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	f855 3b04 	ldr.w	r3, [r5], #4
 800516c:	4798      	blx	r3
 800516e:	3601      	adds	r6, #1
 8005170:	e7ee      	b.n	8005150 <__libc_init_array+0xc>
 8005172:	f855 3b04 	ldr.w	r3, [r5], #4
 8005176:	4798      	blx	r3
 8005178:	3601      	adds	r6, #1
 800517a:	e7f2      	b.n	8005162 <__libc_init_array+0x1e>
 800517c:	08007850 	.word	0x08007850
 8005180:	08007850 	.word	0x08007850
 8005184:	08007850 	.word	0x08007850
 8005188:	08007854 	.word	0x08007854

0800518c <__retarget_lock_init_recursive>:
 800518c:	4770      	bx	lr

0800518e <__retarget_lock_acquire_recursive>:
 800518e:	4770      	bx	lr

08005190 <__retarget_lock_release_recursive>:
 8005190:	4770      	bx	lr

08005192 <memchr>:
 8005192:	4603      	mov	r3, r0
 8005194:	b510      	push	{r4, lr}
 8005196:	b2c9      	uxtb	r1, r1
 8005198:	4402      	add	r2, r0
 800519a:	4293      	cmp	r3, r2
 800519c:	4618      	mov	r0, r3
 800519e:	d101      	bne.n	80051a4 <memchr+0x12>
 80051a0:	2000      	movs	r0, #0
 80051a2:	e003      	b.n	80051ac <memchr+0x1a>
 80051a4:	7804      	ldrb	r4, [r0, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	428c      	cmp	r4, r1
 80051aa:	d1f6      	bne.n	800519a <memchr+0x8>
 80051ac:	bd10      	pop	{r4, pc}

080051ae <quorem>:
 80051ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b2:	6903      	ldr	r3, [r0, #16]
 80051b4:	690c      	ldr	r4, [r1, #16]
 80051b6:	4607      	mov	r7, r0
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	db7e      	blt.n	80052ba <quorem+0x10c>
 80051bc:	3c01      	subs	r4, #1
 80051be:	00a3      	lsls	r3, r4, #2
 80051c0:	f100 0514 	add.w	r5, r0, #20
 80051c4:	f101 0814 	add.w	r8, r1, #20
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d8:	3301      	adds	r3, #1
 80051da:	429a      	cmp	r2, r3
 80051dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80051e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051e4:	d32e      	bcc.n	8005244 <quorem+0x96>
 80051e6:	f04f 0a00 	mov.w	sl, #0
 80051ea:	46c4      	mov	ip, r8
 80051ec:	46ae      	mov	lr, r5
 80051ee:	46d3      	mov	fp, sl
 80051f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051f4:	b298      	uxth	r0, r3
 80051f6:	fb06 a000 	mla	r0, r6, r0, sl
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	0c02      	lsrs	r2, r0, #16
 80051fe:	fb06 2303 	mla	r3, r6, r3, r2
 8005202:	f8de 2000 	ldr.w	r2, [lr]
 8005206:	b280      	uxth	r0, r0
 8005208:	b292      	uxth	r2, r2
 800520a:	1a12      	subs	r2, r2, r0
 800520c:	445a      	add	r2, fp
 800520e:	f8de 0000 	ldr.w	r0, [lr]
 8005212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005216:	b29b      	uxth	r3, r3
 8005218:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800521c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005220:	b292      	uxth	r2, r2
 8005222:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005226:	45e1      	cmp	r9, ip
 8005228:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800522c:	f84e 2b04 	str.w	r2, [lr], #4
 8005230:	d2de      	bcs.n	80051f0 <quorem+0x42>
 8005232:	9b00      	ldr	r3, [sp, #0]
 8005234:	58eb      	ldr	r3, [r5, r3]
 8005236:	b92b      	cbnz	r3, 8005244 <quorem+0x96>
 8005238:	9b01      	ldr	r3, [sp, #4]
 800523a:	3b04      	subs	r3, #4
 800523c:	429d      	cmp	r5, r3
 800523e:	461a      	mov	r2, r3
 8005240:	d32f      	bcc.n	80052a2 <quorem+0xf4>
 8005242:	613c      	str	r4, [r7, #16]
 8005244:	4638      	mov	r0, r7
 8005246:	f001 f97f 	bl	8006548 <__mcmp>
 800524a:	2800      	cmp	r0, #0
 800524c:	db25      	blt.n	800529a <quorem+0xec>
 800524e:	4629      	mov	r1, r5
 8005250:	2000      	movs	r0, #0
 8005252:	f858 2b04 	ldr.w	r2, [r8], #4
 8005256:	f8d1 c000 	ldr.w	ip, [r1]
 800525a:	fa1f fe82 	uxth.w	lr, r2
 800525e:	fa1f f38c 	uxth.w	r3, ip
 8005262:	eba3 030e 	sub.w	r3, r3, lr
 8005266:	4403      	add	r3, r0
 8005268:	0c12      	lsrs	r2, r2, #16
 800526a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800526e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005272:	b29b      	uxth	r3, r3
 8005274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005278:	45c1      	cmp	r9, r8
 800527a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800527e:	f841 3b04 	str.w	r3, [r1], #4
 8005282:	d2e6      	bcs.n	8005252 <quorem+0xa4>
 8005284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005288:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800528c:	b922      	cbnz	r2, 8005298 <quorem+0xea>
 800528e:	3b04      	subs	r3, #4
 8005290:	429d      	cmp	r5, r3
 8005292:	461a      	mov	r2, r3
 8005294:	d30b      	bcc.n	80052ae <quorem+0x100>
 8005296:	613c      	str	r4, [r7, #16]
 8005298:	3601      	adds	r6, #1
 800529a:	4630      	mov	r0, r6
 800529c:	b003      	add	sp, #12
 800529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	3b04      	subs	r3, #4
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d1cb      	bne.n	8005242 <quorem+0x94>
 80052aa:	3c01      	subs	r4, #1
 80052ac:	e7c6      	b.n	800523c <quorem+0x8e>
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	3b04      	subs	r3, #4
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	d1ef      	bne.n	8005296 <quorem+0xe8>
 80052b6:	3c01      	subs	r4, #1
 80052b8:	e7ea      	b.n	8005290 <quorem+0xe2>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e7ee      	b.n	800529c <quorem+0xee>
	...

080052c0 <_dtoa_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	4614      	mov	r4, r2
 80052c6:	461d      	mov	r5, r3
 80052c8:	69c7      	ldr	r7, [r0, #28]
 80052ca:	b097      	sub	sp, #92	@ 0x5c
 80052cc:	4681      	mov	r9, r0
 80052ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80052d4:	b97f      	cbnz	r7, 80052f6 <_dtoa_r+0x36>
 80052d6:	2010      	movs	r0, #16
 80052d8:	f000 fe0e 	bl	8005ef8 <malloc>
 80052dc:	4602      	mov	r2, r0
 80052de:	f8c9 001c 	str.w	r0, [r9, #28]
 80052e2:	b920      	cbnz	r0, 80052ee <_dtoa_r+0x2e>
 80052e4:	21ef      	movs	r1, #239	@ 0xef
 80052e6:	4bac      	ldr	r3, [pc, #688]	@ (8005598 <_dtoa_r+0x2d8>)
 80052e8:	48ac      	ldr	r0, [pc, #688]	@ (800559c <_dtoa_r+0x2dc>)
 80052ea:	f001 fc6d 	bl	8006bc8 <__assert_func>
 80052ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052f2:	6007      	str	r7, [r0, #0]
 80052f4:	60c7      	str	r7, [r0, #12]
 80052f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052fa:	6819      	ldr	r1, [r3, #0]
 80052fc:	b159      	cbz	r1, 8005316 <_dtoa_r+0x56>
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	2301      	movs	r3, #1
 8005302:	4093      	lsls	r3, r2
 8005304:	604a      	str	r2, [r1, #4]
 8005306:	608b      	str	r3, [r1, #8]
 8005308:	4648      	mov	r0, r9
 800530a:	f000 feeb 	bl	80060e4 <_Bfree>
 800530e:	2200      	movs	r2, #0
 8005310:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	1e2b      	subs	r3, r5, #0
 8005318:	bfaf      	iteee	ge
 800531a:	2300      	movge	r3, #0
 800531c:	2201      	movlt	r2, #1
 800531e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005322:	9307      	strlt	r3, [sp, #28]
 8005324:	bfa8      	it	ge
 8005326:	6033      	strge	r3, [r6, #0]
 8005328:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800532c:	4b9c      	ldr	r3, [pc, #624]	@ (80055a0 <_dtoa_r+0x2e0>)
 800532e:	bfb8      	it	lt
 8005330:	6032      	strlt	r2, [r6, #0]
 8005332:	ea33 0308 	bics.w	r3, r3, r8
 8005336:	d112      	bne.n	800535e <_dtoa_r+0x9e>
 8005338:	f242 730f 	movw	r3, #9999	@ 0x270f
 800533c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005344:	4323      	orrs	r3, r4
 8005346:	f000 855e 	beq.w	8005e06 <_dtoa_r+0xb46>
 800534a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800534c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80055a4 <_dtoa_r+0x2e4>
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8560 	beq.w	8005e16 <_dtoa_r+0xb56>
 8005356:	f10a 0303 	add.w	r3, sl, #3
 800535a:	f000 bd5a 	b.w	8005e12 <_dtoa_r+0xb52>
 800535e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005362:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	f7fb fbcf 	bl	8000b10 <__aeabi_dcmpeq>
 8005372:	4607      	mov	r7, r0
 8005374:	b158      	cbz	r0, 800538e <_dtoa_r+0xce>
 8005376:	2301      	movs	r3, #1
 8005378:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800537e:	b113      	cbz	r3, 8005386 <_dtoa_r+0xc6>
 8005380:	4b89      	ldr	r3, [pc, #548]	@ (80055a8 <_dtoa_r+0x2e8>)
 8005382:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80055ac <_dtoa_r+0x2ec>
 800538a:	f000 bd44 	b.w	8005e16 <_dtoa_r+0xb56>
 800538e:	ab14      	add	r3, sp, #80	@ 0x50
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	ab15      	add	r3, sp, #84	@ 0x54
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	4648      	mov	r0, r9
 8005398:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800539c:	f001 f984 	bl	80066a8 <__d2b>
 80053a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80053a4:	9003      	str	r0, [sp, #12]
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d078      	beq.n	800549c <_dtoa_r+0x1dc>
 80053aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80053c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80053c2:	4619      	mov	r1, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	4b7a      	ldr	r3, [pc, #488]	@ (80055b0 <_dtoa_r+0x2f0>)
 80053c8:	f7fa ff82 	bl	80002d0 <__aeabi_dsub>
 80053cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005580 <_dtoa_r+0x2c0>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f7fb f935 	bl	8000640 <__aeabi_dmul>
 80053d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8005588 <_dtoa_r+0x2c8>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fa ff7a 	bl	80002d4 <__adddf3>
 80053e0:	4604      	mov	r4, r0
 80053e2:	4630      	mov	r0, r6
 80053e4:	460d      	mov	r5, r1
 80053e6:	f7fb f8c1 	bl	800056c <__aeabi_i2d>
 80053ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005590 <_dtoa_r+0x2d0>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fb f926 	bl	8000640 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4620      	mov	r0, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	f7fa ff6a 	bl	80002d4 <__adddf3>
 8005400:	4604      	mov	r4, r0
 8005402:	460d      	mov	r5, r1
 8005404:	f7fb fbcc 	bl	8000ba0 <__aeabi_d2iz>
 8005408:	2200      	movs	r2, #0
 800540a:	4607      	mov	r7, r0
 800540c:	2300      	movs	r3, #0
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb fb87 	bl	8000b24 <__aeabi_dcmplt>
 8005416:	b140      	cbz	r0, 800542a <_dtoa_r+0x16a>
 8005418:	4638      	mov	r0, r7
 800541a:	f7fb f8a7 	bl	800056c <__aeabi_i2d>
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	f7fb fb75 	bl	8000b10 <__aeabi_dcmpeq>
 8005426:	b900      	cbnz	r0, 800542a <_dtoa_r+0x16a>
 8005428:	3f01      	subs	r7, #1
 800542a:	2f16      	cmp	r7, #22
 800542c:	d854      	bhi.n	80054d8 <_dtoa_r+0x218>
 800542e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005432:	4b60      	ldr	r3, [pc, #384]	@ (80055b4 <_dtoa_r+0x2f4>)
 8005434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fb fb72 	bl	8000b24 <__aeabi_dcmplt>
 8005440:	2800      	cmp	r0, #0
 8005442:	d04b      	beq.n	80054dc <_dtoa_r+0x21c>
 8005444:	2300      	movs	r3, #0
 8005446:	3f01      	subs	r7, #1
 8005448:	930f      	str	r3, [sp, #60]	@ 0x3c
 800544a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800544c:	1b9b      	subs	r3, r3, r6
 800544e:	1e5a      	subs	r2, r3, #1
 8005450:	bf49      	itett	mi
 8005452:	f1c3 0301 	rsbmi	r3, r3, #1
 8005456:	2300      	movpl	r3, #0
 8005458:	9304      	strmi	r3, [sp, #16]
 800545a:	2300      	movmi	r3, #0
 800545c:	9209      	str	r2, [sp, #36]	@ 0x24
 800545e:	bf54      	ite	pl
 8005460:	9304      	strpl	r3, [sp, #16]
 8005462:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005464:	2f00      	cmp	r7, #0
 8005466:	db3b      	blt.n	80054e0 <_dtoa_r+0x220>
 8005468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546a:	970e      	str	r7, [sp, #56]	@ 0x38
 800546c:	443b      	add	r3, r7
 800546e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005470:	2300      	movs	r3, #0
 8005472:	930a      	str	r3, [sp, #40]	@ 0x28
 8005474:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005476:	2b09      	cmp	r3, #9
 8005478:	d865      	bhi.n	8005546 <_dtoa_r+0x286>
 800547a:	2b05      	cmp	r3, #5
 800547c:	bfc4      	itt	gt
 800547e:	3b04      	subgt	r3, #4
 8005480:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005482:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005484:	bfc8      	it	gt
 8005486:	2400      	movgt	r4, #0
 8005488:	f1a3 0302 	sub.w	r3, r3, #2
 800548c:	bfd8      	it	le
 800548e:	2401      	movle	r4, #1
 8005490:	2b03      	cmp	r3, #3
 8005492:	d864      	bhi.n	800555e <_dtoa_r+0x29e>
 8005494:	e8df f003 	tbb	[pc, r3]
 8005498:	2c385553 	.word	0x2c385553
 800549c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80054a0:	441e      	add	r6, r3
 80054a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	bfc1      	itttt	gt
 80054aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80054ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80054b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80054b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80054ba:	bfd6      	itet	le
 80054bc:	f1c3 0320 	rsble	r3, r3, #32
 80054c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80054c4:	fa04 f003 	lslle.w	r0, r4, r3
 80054c8:	f7fb f840 	bl	800054c <__aeabi_ui2d>
 80054cc:	2201      	movs	r2, #1
 80054ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80054d2:	3e01      	subs	r6, #1
 80054d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80054d6:	e774      	b.n	80053c2 <_dtoa_r+0x102>
 80054d8:	2301      	movs	r3, #1
 80054da:	e7b5      	b.n	8005448 <_dtoa_r+0x188>
 80054dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80054de:	e7b4      	b.n	800544a <_dtoa_r+0x18a>
 80054e0:	9b04      	ldr	r3, [sp, #16]
 80054e2:	1bdb      	subs	r3, r3, r7
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	427b      	negs	r3, r7
 80054e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80054ea:	2300      	movs	r3, #0
 80054ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80054ee:	e7c1      	b.n	8005474 <_dtoa_r+0x1b4>
 80054f0:	2301      	movs	r3, #1
 80054f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054f6:	eb07 0b03 	add.w	fp, r7, r3
 80054fa:	f10b 0301 	add.w	r3, fp, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	9308      	str	r3, [sp, #32]
 8005502:	bfb8      	it	lt
 8005504:	2301      	movlt	r3, #1
 8005506:	e006      	b.n	8005516 <_dtoa_r+0x256>
 8005508:	2301      	movs	r3, #1
 800550a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800550c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd28      	ble.n	8005564 <_dtoa_r+0x2a4>
 8005512:	469b      	mov	fp, r3
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	2100      	movs	r1, #0
 8005518:	2204      	movs	r2, #4
 800551a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800551e:	f102 0514 	add.w	r5, r2, #20
 8005522:	429d      	cmp	r5, r3
 8005524:	d926      	bls.n	8005574 <_dtoa_r+0x2b4>
 8005526:	6041      	str	r1, [r0, #4]
 8005528:	4648      	mov	r0, r9
 800552a:	f000 fd9b 	bl	8006064 <_Balloc>
 800552e:	4682      	mov	sl, r0
 8005530:	2800      	cmp	r0, #0
 8005532:	d143      	bne.n	80055bc <_dtoa_r+0x2fc>
 8005534:	4602      	mov	r2, r0
 8005536:	f240 11af 	movw	r1, #431	@ 0x1af
 800553a:	4b1f      	ldr	r3, [pc, #124]	@ (80055b8 <_dtoa_r+0x2f8>)
 800553c:	e6d4      	b.n	80052e8 <_dtoa_r+0x28>
 800553e:	2300      	movs	r3, #0
 8005540:	e7e3      	b.n	800550a <_dtoa_r+0x24a>
 8005542:	2300      	movs	r3, #0
 8005544:	e7d5      	b.n	80054f2 <_dtoa_r+0x232>
 8005546:	2401      	movs	r4, #1
 8005548:	2300      	movs	r3, #0
 800554a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800554c:	9320      	str	r3, [sp, #128]	@ 0x80
 800554e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005552:	2200      	movs	r2, #0
 8005554:	2312      	movs	r3, #18
 8005556:	f8cd b020 	str.w	fp, [sp, #32]
 800555a:	9221      	str	r2, [sp, #132]	@ 0x84
 800555c:	e7db      	b.n	8005516 <_dtoa_r+0x256>
 800555e:	2301      	movs	r3, #1
 8005560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005562:	e7f4      	b.n	800554e <_dtoa_r+0x28e>
 8005564:	f04f 0b01 	mov.w	fp, #1
 8005568:	465b      	mov	r3, fp
 800556a:	f8cd b020 	str.w	fp, [sp, #32]
 800556e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005572:	e7d0      	b.n	8005516 <_dtoa_r+0x256>
 8005574:	3101      	adds	r1, #1
 8005576:	0052      	lsls	r2, r2, #1
 8005578:	e7d1      	b.n	800551e <_dtoa_r+0x25e>
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w
 8005580:	636f4361 	.word	0x636f4361
 8005584:	3fd287a7 	.word	0x3fd287a7
 8005588:	8b60c8b3 	.word	0x8b60c8b3
 800558c:	3fc68a28 	.word	0x3fc68a28
 8005590:	509f79fb 	.word	0x509f79fb
 8005594:	3fd34413 	.word	0x3fd34413
 8005598:	080074ff 	.word	0x080074ff
 800559c:	08007516 	.word	0x08007516
 80055a0:	7ff00000 	.word	0x7ff00000
 80055a4:	080074fb 	.word	0x080074fb
 80055a8:	080074cf 	.word	0x080074cf
 80055ac:	080074ce 	.word	0x080074ce
 80055b0:	3ff80000 	.word	0x3ff80000
 80055b4:	08007668 	.word	0x08007668
 80055b8:	0800756e 	.word	0x0800756e
 80055bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055c0:	6018      	str	r0, [r3, #0]
 80055c2:	9b08      	ldr	r3, [sp, #32]
 80055c4:	2b0e      	cmp	r3, #14
 80055c6:	f200 80a1 	bhi.w	800570c <_dtoa_r+0x44c>
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	f000 809e 	beq.w	800570c <_dtoa_r+0x44c>
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	dd33      	ble.n	800563c <_dtoa_r+0x37c>
 80055d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005848 <_dtoa_r+0x588>)
 80055d6:	f007 020f 	and.w	r2, r7, #15
 80055da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055de:	05f8      	lsls	r0, r7, #23
 80055e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80055e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80055ec:	d516      	bpl.n	800561c <_dtoa_r+0x35c>
 80055ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055f2:	4b96      	ldr	r3, [pc, #600]	@ (800584c <_dtoa_r+0x58c>)
 80055f4:	2603      	movs	r6, #3
 80055f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055fa:	f7fb f94b 	bl	8000894 <__aeabi_ddiv>
 80055fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005602:	f004 040f 	and.w	r4, r4, #15
 8005606:	4d91      	ldr	r5, [pc, #580]	@ (800584c <_dtoa_r+0x58c>)
 8005608:	b954      	cbnz	r4, 8005620 <_dtoa_r+0x360>
 800560a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800560e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005612:	f7fb f93f 	bl	8000894 <__aeabi_ddiv>
 8005616:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800561a:	e028      	b.n	800566e <_dtoa_r+0x3ae>
 800561c:	2602      	movs	r6, #2
 800561e:	e7f2      	b.n	8005606 <_dtoa_r+0x346>
 8005620:	07e1      	lsls	r1, r4, #31
 8005622:	d508      	bpl.n	8005636 <_dtoa_r+0x376>
 8005624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005628:	e9d5 2300 	ldrd	r2, r3, [r5]
 800562c:	f7fb f808 	bl	8000640 <__aeabi_dmul>
 8005630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005634:	3601      	adds	r6, #1
 8005636:	1064      	asrs	r4, r4, #1
 8005638:	3508      	adds	r5, #8
 800563a:	e7e5      	b.n	8005608 <_dtoa_r+0x348>
 800563c:	f000 80af 	beq.w	800579e <_dtoa_r+0x4de>
 8005640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005644:	427c      	negs	r4, r7
 8005646:	4b80      	ldr	r3, [pc, #512]	@ (8005848 <_dtoa_r+0x588>)
 8005648:	f004 020f 	and.w	r2, r4, #15
 800564c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa fff4 	bl	8000640 <__aeabi_dmul>
 8005658:	2602      	movs	r6, #2
 800565a:	2300      	movs	r3, #0
 800565c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005660:	4d7a      	ldr	r5, [pc, #488]	@ (800584c <_dtoa_r+0x58c>)
 8005662:	1124      	asrs	r4, r4, #4
 8005664:	2c00      	cmp	r4, #0
 8005666:	f040 808f 	bne.w	8005788 <_dtoa_r+0x4c8>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d3      	bne.n	8005616 <_dtoa_r+0x356>
 800566e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8094 	beq.w	80057a2 <_dtoa_r+0x4e2>
 800567a:	2200      	movs	r2, #0
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <_dtoa_r+0x590>)
 8005682:	f7fb fa4f 	bl	8000b24 <__aeabi_dcmplt>
 8005686:	2800      	cmp	r0, #0
 8005688:	f000 808b 	beq.w	80057a2 <_dtoa_r+0x4e2>
 800568c:	9b08      	ldr	r3, [sp, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8087 	beq.w	80057a2 <_dtoa_r+0x4e2>
 8005694:	f1bb 0f00 	cmp.w	fp, #0
 8005698:	dd34      	ble.n	8005704 <_dtoa_r+0x444>
 800569a:	4620      	mov	r0, r4
 800569c:	2200      	movs	r2, #0
 800569e:	4629      	mov	r1, r5
 80056a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005854 <_dtoa_r+0x594>)
 80056a2:	f7fa ffcd 	bl	8000640 <__aeabi_dmul>
 80056a6:	465c      	mov	r4, fp
 80056a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056ac:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80056b0:	3601      	adds	r6, #1
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7fa ff5a 	bl	800056c <__aeabi_i2d>
 80056b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056bc:	f7fa ffc0 	bl	8000640 <__aeabi_dmul>
 80056c0:	2200      	movs	r2, #0
 80056c2:	4b65      	ldr	r3, [pc, #404]	@ (8005858 <_dtoa_r+0x598>)
 80056c4:	f7fa fe06 	bl	80002d4 <__adddf3>
 80056c8:	4605      	mov	r5, r0
 80056ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	d16a      	bne.n	80057a8 <_dtoa_r+0x4e8>
 80056d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d6:	2200      	movs	r2, #0
 80056d8:	4b60      	ldr	r3, [pc, #384]	@ (800585c <_dtoa_r+0x59c>)
 80056da:	f7fa fdf9 	bl	80002d0 <__aeabi_dsub>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056e6:	462a      	mov	r2, r5
 80056e8:	4633      	mov	r3, r6
 80056ea:	f7fb fa39 	bl	8000b60 <__aeabi_dcmpgt>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 8298 	bne.w	8005c24 <_dtoa_r+0x964>
 80056f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056f8:	462a      	mov	r2, r5
 80056fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056fe:	f7fb fa11 	bl	8000b24 <__aeabi_dcmplt>
 8005702:	bb38      	cbnz	r0, 8005754 <_dtoa_r+0x494>
 8005704:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005708:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800570c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	f2c0 8157 	blt.w	80059c2 <_dtoa_r+0x702>
 8005714:	2f0e      	cmp	r7, #14
 8005716:	f300 8154 	bgt.w	80059c2 <_dtoa_r+0x702>
 800571a:	4b4b      	ldr	r3, [pc, #300]	@ (8005848 <_dtoa_r+0x588>)
 800571c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005724:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005728:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800572a:	2b00      	cmp	r3, #0
 800572c:	f280 80e5 	bge.w	80058fa <_dtoa_r+0x63a>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f300 80e1 	bgt.w	80058fa <_dtoa_r+0x63a>
 8005738:	d10c      	bne.n	8005754 <_dtoa_r+0x494>
 800573a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800573e:	2200      	movs	r2, #0
 8005740:	4b46      	ldr	r3, [pc, #280]	@ (800585c <_dtoa_r+0x59c>)
 8005742:	f7fa ff7d 	bl	8000640 <__aeabi_dmul>
 8005746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800574a:	f7fb f9ff 	bl	8000b4c <__aeabi_dcmpge>
 800574e:	2800      	cmp	r0, #0
 8005750:	f000 8266 	beq.w	8005c20 <_dtoa_r+0x960>
 8005754:	2400      	movs	r4, #0
 8005756:	4625      	mov	r5, r4
 8005758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800575a:	4656      	mov	r6, sl
 800575c:	ea6f 0803 	mvn.w	r8, r3
 8005760:	2700      	movs	r7, #0
 8005762:	4621      	mov	r1, r4
 8005764:	4648      	mov	r0, r9
 8005766:	f000 fcbd 	bl	80060e4 <_Bfree>
 800576a:	2d00      	cmp	r5, #0
 800576c:	f000 80bd 	beq.w	80058ea <_dtoa_r+0x62a>
 8005770:	b12f      	cbz	r7, 800577e <_dtoa_r+0x4be>
 8005772:	42af      	cmp	r7, r5
 8005774:	d003      	beq.n	800577e <_dtoa_r+0x4be>
 8005776:	4639      	mov	r1, r7
 8005778:	4648      	mov	r0, r9
 800577a:	f000 fcb3 	bl	80060e4 <_Bfree>
 800577e:	4629      	mov	r1, r5
 8005780:	4648      	mov	r0, r9
 8005782:	f000 fcaf 	bl	80060e4 <_Bfree>
 8005786:	e0b0      	b.n	80058ea <_dtoa_r+0x62a>
 8005788:	07e2      	lsls	r2, r4, #31
 800578a:	d505      	bpl.n	8005798 <_dtoa_r+0x4d8>
 800578c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005790:	f7fa ff56 	bl	8000640 <__aeabi_dmul>
 8005794:	2301      	movs	r3, #1
 8005796:	3601      	adds	r6, #1
 8005798:	1064      	asrs	r4, r4, #1
 800579a:	3508      	adds	r5, #8
 800579c:	e762      	b.n	8005664 <_dtoa_r+0x3a4>
 800579e:	2602      	movs	r6, #2
 80057a0:	e765      	b.n	800566e <_dtoa_r+0x3ae>
 80057a2:	46b8      	mov	r8, r7
 80057a4:	9c08      	ldr	r4, [sp, #32]
 80057a6:	e784      	b.n	80056b2 <_dtoa_r+0x3f2>
 80057a8:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <_dtoa_r+0x588>)
 80057aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057b4:	4454      	add	r4, sl
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d054      	beq.n	8005864 <_dtoa_r+0x5a4>
 80057ba:	2000      	movs	r0, #0
 80057bc:	4928      	ldr	r1, [pc, #160]	@ (8005860 <_dtoa_r+0x5a0>)
 80057be:	f7fb f869 	bl	8000894 <__aeabi_ddiv>
 80057c2:	4633      	mov	r3, r6
 80057c4:	462a      	mov	r2, r5
 80057c6:	f7fa fd83 	bl	80002d0 <__aeabi_dsub>
 80057ca:	4656      	mov	r6, sl
 80057cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d4:	f7fb f9e4 	bl	8000ba0 <__aeabi_d2iz>
 80057d8:	4605      	mov	r5, r0
 80057da:	f7fa fec7 	bl	800056c <__aeabi_i2d>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e6:	f7fa fd73 	bl	80002d0 <__aeabi_dsub>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	3530      	adds	r5, #48	@ 0x30
 80057f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057f8:	f806 5b01 	strb.w	r5, [r6], #1
 80057fc:	f7fb f992 	bl	8000b24 <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d172      	bne.n	80058ea <_dtoa_r+0x62a>
 8005804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005808:	2000      	movs	r0, #0
 800580a:	4911      	ldr	r1, [pc, #68]	@ (8005850 <_dtoa_r+0x590>)
 800580c:	f7fa fd60 	bl	80002d0 <__aeabi_dsub>
 8005810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005814:	f7fb f986 	bl	8000b24 <__aeabi_dcmplt>
 8005818:	2800      	cmp	r0, #0
 800581a:	f040 80b4 	bne.w	8005986 <_dtoa_r+0x6c6>
 800581e:	42a6      	cmp	r6, r4
 8005820:	f43f af70 	beq.w	8005704 <_dtoa_r+0x444>
 8005824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005828:	2200      	movs	r2, #0
 800582a:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <_dtoa_r+0x594>)
 800582c:	f7fa ff08 	bl	8000640 <__aeabi_dmul>
 8005830:	2200      	movs	r2, #0
 8005832:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583a:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <_dtoa_r+0x594>)
 800583c:	f7fa ff00 	bl	8000640 <__aeabi_dmul>
 8005840:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005844:	e7c4      	b.n	80057d0 <_dtoa_r+0x510>
 8005846:	bf00      	nop
 8005848:	08007668 	.word	0x08007668
 800584c:	08007640 	.word	0x08007640
 8005850:	3ff00000 	.word	0x3ff00000
 8005854:	40240000 	.word	0x40240000
 8005858:	401c0000 	.word	0x401c0000
 800585c:	40140000 	.word	0x40140000
 8005860:	3fe00000 	.word	0x3fe00000
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	f7fa feea 	bl	8000640 <__aeabi_dmul>
 800586c:	4656      	mov	r6, sl
 800586e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005872:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005878:	f7fb f992 	bl	8000ba0 <__aeabi_d2iz>
 800587c:	4605      	mov	r5, r0
 800587e:	f7fa fe75 	bl	800056c <__aeabi_i2d>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800588a:	f7fa fd21 	bl	80002d0 <__aeabi_dsub>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	3530      	adds	r5, #48	@ 0x30
 8005894:	f806 5b01 	strb.w	r5, [r6], #1
 8005898:	42a6      	cmp	r6, r4
 800589a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	d124      	bne.n	80058ee <_dtoa_r+0x62e>
 80058a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058a8:	4bae      	ldr	r3, [pc, #696]	@ (8005b64 <_dtoa_r+0x8a4>)
 80058aa:	f7fa fd13 	bl	80002d4 <__adddf3>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058b6:	f7fb f953 	bl	8000b60 <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d163      	bne.n	8005986 <_dtoa_r+0x6c6>
 80058be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058c2:	2000      	movs	r0, #0
 80058c4:	49a7      	ldr	r1, [pc, #668]	@ (8005b64 <_dtoa_r+0x8a4>)
 80058c6:	f7fa fd03 	bl	80002d0 <__aeabi_dsub>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d2:	f7fb f927 	bl	8000b24 <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f43f af14 	beq.w	8005704 <_dtoa_r+0x444>
 80058dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80058de:	1e73      	subs	r3, r6, #1
 80058e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80058e6:	2b30      	cmp	r3, #48	@ 0x30
 80058e8:	d0f8      	beq.n	80058dc <_dtoa_r+0x61c>
 80058ea:	4647      	mov	r7, r8
 80058ec:	e03b      	b.n	8005966 <_dtoa_r+0x6a6>
 80058ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005b68 <_dtoa_r+0x8a8>)
 80058f0:	f7fa fea6 	bl	8000640 <__aeabi_dmul>
 80058f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058f8:	e7bc      	b.n	8005874 <_dtoa_r+0x5b4>
 80058fa:	4656      	mov	r6, sl
 80058fc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fa ffc4 	bl	8000894 <__aeabi_ddiv>
 800590c:	f7fb f948 	bl	8000ba0 <__aeabi_d2iz>
 8005910:	4680      	mov	r8, r0
 8005912:	f7fa fe2b 	bl	800056c <__aeabi_i2d>
 8005916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800591a:	f7fa fe91 	bl	8000640 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fcd3 	bl	80002d0 <__aeabi_dsub>
 800592a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800592e:	9d08      	ldr	r5, [sp, #32]
 8005930:	f806 4b01 	strb.w	r4, [r6], #1
 8005934:	eba6 040a 	sub.w	r4, r6, sl
 8005938:	42a5      	cmp	r5, r4
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	d133      	bne.n	80059a8 <_dtoa_r+0x6e8>
 8005940:	f7fa fcc8 	bl	80002d4 <__adddf3>
 8005944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	f7fb f908 	bl	8000b60 <__aeabi_dcmpgt>
 8005950:	b9c0      	cbnz	r0, 8005984 <_dtoa_r+0x6c4>
 8005952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fb f8d9 	bl	8000b10 <__aeabi_dcmpeq>
 800595e:	b110      	cbz	r0, 8005966 <_dtoa_r+0x6a6>
 8005960:	f018 0f01 	tst.w	r8, #1
 8005964:	d10e      	bne.n	8005984 <_dtoa_r+0x6c4>
 8005966:	4648      	mov	r0, r9
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	f000 fbbb 	bl	80060e4 <_Bfree>
 800596e:	2300      	movs	r3, #0
 8005970:	7033      	strb	r3, [r6, #0]
 8005972:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005974:	3701      	adds	r7, #1
 8005976:	601f      	str	r7, [r3, #0]
 8005978:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 824b 	beq.w	8005e16 <_dtoa_r+0xb56>
 8005980:	601e      	str	r6, [r3, #0]
 8005982:	e248      	b.n	8005e16 <_dtoa_r+0xb56>
 8005984:	46b8      	mov	r8, r7
 8005986:	4633      	mov	r3, r6
 8005988:	461e      	mov	r6, r3
 800598a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800598e:	2a39      	cmp	r2, #57	@ 0x39
 8005990:	d106      	bne.n	80059a0 <_dtoa_r+0x6e0>
 8005992:	459a      	cmp	sl, r3
 8005994:	d1f8      	bne.n	8005988 <_dtoa_r+0x6c8>
 8005996:	2230      	movs	r2, #48	@ 0x30
 8005998:	f108 0801 	add.w	r8, r8, #1
 800599c:	f88a 2000 	strb.w	r2, [sl]
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	3201      	adds	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e7a0      	b.n	80058ea <_dtoa_r+0x62a>
 80059a8:	2200      	movs	r2, #0
 80059aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005b68 <_dtoa_r+0x8a8>)
 80059ac:	f7fa fe48 	bl	8000640 <__aeabi_dmul>
 80059b0:	2200      	movs	r2, #0
 80059b2:	2300      	movs	r3, #0
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	f7fb f8aa 	bl	8000b10 <__aeabi_dcmpeq>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d09f      	beq.n	8005900 <_dtoa_r+0x640>
 80059c0:	e7d1      	b.n	8005966 <_dtoa_r+0x6a6>
 80059c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 80ea 	beq.w	8005b9e <_dtoa_r+0x8de>
 80059ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	f300 80cd 	bgt.w	8005b6c <_dtoa_r+0x8ac>
 80059d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	f000 80c1 	beq.w	8005b5c <_dtoa_r+0x89c>
 80059da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80059de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059e0:	9e04      	ldr	r6, [sp, #16]
 80059e2:	9a04      	ldr	r2, [sp, #16]
 80059e4:	2101      	movs	r1, #1
 80059e6:	441a      	add	r2, r3
 80059e8:	9204      	str	r2, [sp, #16]
 80059ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059ec:	4648      	mov	r0, r9
 80059ee:	441a      	add	r2, r3
 80059f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80059f2:	f000 fc2b 	bl	800624c <__i2b>
 80059f6:	4605      	mov	r5, r0
 80059f8:	b166      	cbz	r6, 8005a14 <_dtoa_r+0x754>
 80059fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dd09      	ble.n	8005a14 <_dtoa_r+0x754>
 8005a00:	42b3      	cmp	r3, r6
 8005a02:	bfa8      	it	ge
 8005a04:	4633      	movge	r3, r6
 8005a06:	9a04      	ldr	r2, [sp, #16]
 8005a08:	1af6      	subs	r6, r6, r3
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	9204      	str	r2, [sp, #16]
 8005a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a16:	b30b      	cbz	r3, 8005a5c <_dtoa_r+0x79c>
 8005a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80c6 	beq.w	8005bac <_dtoa_r+0x8ec>
 8005a20:	2c00      	cmp	r4, #0
 8005a22:	f000 80c0 	beq.w	8005ba6 <_dtoa_r+0x8e6>
 8005a26:	4629      	mov	r1, r5
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4648      	mov	r0, r9
 8005a2c:	f000 fcc6 	bl	80063bc <__pow5mult>
 8005a30:	9a03      	ldr	r2, [sp, #12]
 8005a32:	4601      	mov	r1, r0
 8005a34:	4605      	mov	r5, r0
 8005a36:	4648      	mov	r0, r9
 8005a38:	f000 fc1e 	bl	8006278 <__multiply>
 8005a3c:	9903      	ldr	r1, [sp, #12]
 8005a3e:	4680      	mov	r8, r0
 8005a40:	4648      	mov	r0, r9
 8005a42:	f000 fb4f 	bl	80060e4 <_Bfree>
 8005a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a48:	1b1b      	subs	r3, r3, r4
 8005a4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a4c:	f000 80b1 	beq.w	8005bb2 <_dtoa_r+0x8f2>
 8005a50:	4641      	mov	r1, r8
 8005a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a54:	4648      	mov	r0, r9
 8005a56:	f000 fcb1 	bl	80063bc <__pow5mult>
 8005a5a:	9003      	str	r0, [sp, #12]
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4648      	mov	r0, r9
 8005a60:	f000 fbf4 	bl	800624c <__i2b>
 8005a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a66:	4604      	mov	r4, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 81d8 	beq.w	8005e1e <_dtoa_r+0xb5e>
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4601      	mov	r1, r0
 8005a72:	4648      	mov	r0, r9
 8005a74:	f000 fca2 	bl	80063bc <__pow5mult>
 8005a78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f300 809f 	bgt.w	8005bc0 <_dtoa_r+0x900>
 8005a82:	9b06      	ldr	r3, [sp, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8097 	bne.w	8005bb8 <_dtoa_r+0x8f8>
 8005a8a:	9b07      	ldr	r3, [sp, #28]
 8005a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 8093 	bne.w	8005bbc <_dtoa_r+0x8fc>
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a9c:	0d1b      	lsrs	r3, r3, #20
 8005a9e:	051b      	lsls	r3, r3, #20
 8005aa0:	b133      	cbz	r3, 8005ab0 <_dtoa_r+0x7f0>
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aaa:	3301      	adds	r3, #1
 8005aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aae:	2301      	movs	r3, #1
 8005ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 81b8 	beq.w	8005e2a <_dtoa_r+0xb6a>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ac0:	6918      	ldr	r0, [r3, #16]
 8005ac2:	f000 fb77 	bl	80061b4 <__hi0bits>
 8005ac6:	f1c0 0020 	rsb	r0, r0, #32
 8005aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005acc:	4418      	add	r0, r3
 8005ace:	f010 001f 	ands.w	r0, r0, #31
 8005ad2:	f000 8082 	beq.w	8005bda <_dtoa_r+0x91a>
 8005ad6:	f1c0 0320 	rsb	r3, r0, #32
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	dd73      	ble.n	8005bc6 <_dtoa_r+0x906>
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	f1c0 001c 	rsb	r0, r0, #28
 8005ae4:	4403      	add	r3, r0
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aea:	4406      	add	r6, r0
 8005aec:	4403      	add	r3, r0
 8005aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd05      	ble.n	8005b02 <_dtoa_r+0x842>
 8005af6:	461a      	mov	r2, r3
 8005af8:	4648      	mov	r0, r9
 8005afa:	9903      	ldr	r1, [sp, #12]
 8005afc:	f000 fcb8 	bl	8006470 <__lshift>
 8005b00:	9003      	str	r0, [sp, #12]
 8005b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd05      	ble.n	8005b14 <_dtoa_r+0x854>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4648      	mov	r0, r9
 8005b0e:	f000 fcaf 	bl	8006470 <__lshift>
 8005b12:	4604      	mov	r4, r0
 8005b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d061      	beq.n	8005bde <_dtoa_r+0x91e>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	9803      	ldr	r0, [sp, #12]
 8005b1e:	f000 fd13 	bl	8006548 <__mcmp>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	da5b      	bge.n	8005bde <_dtoa_r+0x91e>
 8005b26:	2300      	movs	r3, #0
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	f000 fafb 	bl	8006128 <__multadd>
 8005b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b34:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005b38:	9003      	str	r0, [sp, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 8177 	beq.w	8005e2e <_dtoa_r+0xb6e>
 8005b40:	4629      	mov	r1, r5
 8005b42:	2300      	movs	r3, #0
 8005b44:	220a      	movs	r2, #10
 8005b46:	4648      	mov	r0, r9
 8005b48:	f000 faee 	bl	8006128 <__multadd>
 8005b4c:	f1bb 0f00 	cmp.w	fp, #0
 8005b50:	4605      	mov	r5, r0
 8005b52:	dc6f      	bgt.n	8005c34 <_dtoa_r+0x974>
 8005b54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	dc49      	bgt.n	8005bee <_dtoa_r+0x92e>
 8005b5a:	e06b      	b.n	8005c34 <_dtoa_r+0x974>
 8005b5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b62:	e73c      	b.n	80059de <_dtoa_r+0x71e>
 8005b64:	3fe00000 	.word	0x3fe00000
 8005b68:	40240000 	.word	0x40240000
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	1e5c      	subs	r4, r3, #1
 8005b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	db09      	blt.n	8005b8a <_dtoa_r+0x8ca>
 8005b76:	1b1c      	subs	r4, r3, r4
 8005b78:	9b08      	ldr	r3, [sp, #32]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f6bf af30 	bge.w	80059e0 <_dtoa_r+0x720>
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	9a08      	ldr	r2, [sp, #32]
 8005b84:	1a9e      	subs	r6, r3, r2
 8005b86:	2300      	movs	r3, #0
 8005b88:	e72b      	b.n	80059e2 <_dtoa_r+0x722>
 8005b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b8e:	1ae3      	subs	r3, r4, r3
 8005b90:	441a      	add	r2, r3
 8005b92:	940a      	str	r4, [sp, #40]	@ 0x28
 8005b94:	9e04      	ldr	r6, [sp, #16]
 8005b96:	2400      	movs	r4, #0
 8005b98:	9b08      	ldr	r3, [sp, #32]
 8005b9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b9c:	e721      	b.n	80059e2 <_dtoa_r+0x722>
 8005b9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ba0:	9e04      	ldr	r6, [sp, #16]
 8005ba2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ba4:	e728      	b.n	80059f8 <_dtoa_r+0x738>
 8005ba6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005baa:	e751      	b.n	8005a50 <_dtoa_r+0x790>
 8005bac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bae:	9903      	ldr	r1, [sp, #12]
 8005bb0:	e750      	b.n	8005a54 <_dtoa_r+0x794>
 8005bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb6:	e751      	b.n	8005a5c <_dtoa_r+0x79c>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e779      	b.n	8005ab0 <_dtoa_r+0x7f0>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	e777      	b.n	8005ab0 <_dtoa_r+0x7f0>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bc4:	e779      	b.n	8005aba <_dtoa_r+0x7fa>
 8005bc6:	d093      	beq.n	8005af0 <_dtoa_r+0x830>
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	331c      	adds	r3, #28
 8005bcc:	441a      	add	r2, r3
 8005bce:	9204      	str	r2, [sp, #16]
 8005bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bd2:	441e      	add	r6, r3
 8005bd4:	441a      	add	r2, r3
 8005bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bd8:	e78a      	b.n	8005af0 <_dtoa_r+0x830>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	e7f4      	b.n	8005bc8 <_dtoa_r+0x908>
 8005bde:	9b08      	ldr	r3, [sp, #32]
 8005be0:	46b8      	mov	r8, r7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dc20      	bgt.n	8005c28 <_dtoa_r+0x968>
 8005be6:	469b      	mov	fp, r3
 8005be8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	dd1e      	ble.n	8005c2c <_dtoa_r+0x96c>
 8005bee:	f1bb 0f00 	cmp.w	fp, #0
 8005bf2:	f47f adb1 	bne.w	8005758 <_dtoa_r+0x498>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	465b      	mov	r3, fp
 8005bfa:	2205      	movs	r2, #5
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	f000 fa93 	bl	8006128 <__multadd>
 8005c02:	4601      	mov	r1, r0
 8005c04:	4604      	mov	r4, r0
 8005c06:	9803      	ldr	r0, [sp, #12]
 8005c08:	f000 fc9e 	bl	8006548 <__mcmp>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f77f ada3 	ble.w	8005758 <_dtoa_r+0x498>
 8005c12:	4656      	mov	r6, sl
 8005c14:	2331      	movs	r3, #49	@ 0x31
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	f806 3b01 	strb.w	r3, [r6], #1
 8005c1e:	e59f      	b.n	8005760 <_dtoa_r+0x4a0>
 8005c20:	46b8      	mov	r8, r7
 8005c22:	9c08      	ldr	r4, [sp, #32]
 8005c24:	4625      	mov	r5, r4
 8005c26:	e7f4      	b.n	8005c12 <_dtoa_r+0x952>
 8005c28:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005c2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8101 	beq.w	8005e36 <_dtoa_r+0xb76>
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	dd05      	ble.n	8005c44 <_dtoa_r+0x984>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4632      	mov	r2, r6
 8005c3c:	4648      	mov	r0, r9
 8005c3e:	f000 fc17 	bl	8006470 <__lshift>
 8005c42:	4605      	mov	r5, r0
 8005c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d05c      	beq.n	8005d04 <_dtoa_r+0xa44>
 8005c4a:	4648      	mov	r0, r9
 8005c4c:	6869      	ldr	r1, [r5, #4]
 8005c4e:	f000 fa09 	bl	8006064 <_Balloc>
 8005c52:	4606      	mov	r6, r0
 8005c54:	b928      	cbnz	r0, 8005c62 <_dtoa_r+0x9a2>
 8005c56:	4602      	mov	r2, r0
 8005c58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c5c:	4b80      	ldr	r3, [pc, #512]	@ (8005e60 <_dtoa_r+0xba0>)
 8005c5e:	f7ff bb43 	b.w	80052e8 <_dtoa_r+0x28>
 8005c62:	692a      	ldr	r2, [r5, #16]
 8005c64:	f105 010c 	add.w	r1, r5, #12
 8005c68:	3202      	adds	r2, #2
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	300c      	adds	r0, #12
 8005c6e:	f000 ff9d 	bl	8006bac <memcpy>
 8005c72:	2201      	movs	r2, #1
 8005c74:	4631      	mov	r1, r6
 8005c76:	4648      	mov	r0, r9
 8005c78:	f000 fbfa 	bl	8006470 <__lshift>
 8005c7c:	462f      	mov	r7, r5
 8005c7e:	4605      	mov	r5, r0
 8005c80:	f10a 0301 	add.w	r3, sl, #1
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	eb0a 030b 	add.w	r3, sl, fp
 8005c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	4621      	mov	r1, r4
 8005c98:	9803      	ldr	r0, [sp, #12]
 8005c9a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005c9e:	f7ff fa86 	bl	80051ae <quorem>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	3330      	adds	r3, #48	@ 0x30
 8005ca8:	9006      	str	r0, [sp, #24]
 8005caa:	9803      	ldr	r0, [sp, #12]
 8005cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cae:	f000 fc4b 	bl	8006548 <__mcmp>
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	9008      	str	r0, [sp, #32]
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4648      	mov	r0, r9
 8005cba:	f000 fc61 	bl	8006580 <__mdiff>
 8005cbe:	68c2      	ldr	r2, [r0, #12]
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc4:	bb02      	cbnz	r2, 8005d08 <_dtoa_r+0xa48>
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	9803      	ldr	r0, [sp, #12]
 8005cca:	f000 fc3d 	bl	8006548 <__mcmp>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4648      	mov	r0, r9
 8005cd6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005cda:	f000 fa03 	bl	80060e4 <_Bfree>
 8005cde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ce0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ce2:	9e04      	ldr	r6, [sp, #16]
 8005ce4:	ea42 0103 	orr.w	r1, r2, r3
 8005ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cea:	4319      	orrs	r1, r3
 8005cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cee:	d10d      	bne.n	8005d0c <_dtoa_r+0xa4c>
 8005cf0:	2b39      	cmp	r3, #57	@ 0x39
 8005cf2:	d027      	beq.n	8005d44 <_dtoa_r+0xa84>
 8005cf4:	9a08      	ldr	r2, [sp, #32]
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	dd01      	ble.n	8005cfe <_dtoa_r+0xa3e>
 8005cfa:	9b06      	ldr	r3, [sp, #24]
 8005cfc:	3331      	adds	r3, #49	@ 0x31
 8005cfe:	f88b 3000 	strb.w	r3, [fp]
 8005d02:	e52e      	b.n	8005762 <_dtoa_r+0x4a2>
 8005d04:	4628      	mov	r0, r5
 8005d06:	e7b9      	b.n	8005c7c <_dtoa_r+0x9bc>
 8005d08:	2201      	movs	r2, #1
 8005d0a:	e7e2      	b.n	8005cd2 <_dtoa_r+0xa12>
 8005d0c:	9908      	ldr	r1, [sp, #32]
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	db04      	blt.n	8005d1c <_dtoa_r+0xa5c>
 8005d12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005d14:	4301      	orrs	r1, r0
 8005d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d18:	4301      	orrs	r1, r0
 8005d1a:	d120      	bne.n	8005d5e <_dtoa_r+0xa9e>
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	ddee      	ble.n	8005cfe <_dtoa_r+0xa3e>
 8005d20:	2201      	movs	r2, #1
 8005d22:	9903      	ldr	r1, [sp, #12]
 8005d24:	4648      	mov	r0, r9
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	f000 fba2 	bl	8006470 <__lshift>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	9003      	str	r0, [sp, #12]
 8005d30:	f000 fc0a 	bl	8006548 <__mcmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	9b04      	ldr	r3, [sp, #16]
 8005d38:	dc02      	bgt.n	8005d40 <_dtoa_r+0xa80>
 8005d3a:	d1e0      	bne.n	8005cfe <_dtoa_r+0xa3e>
 8005d3c:	07da      	lsls	r2, r3, #31
 8005d3e:	d5de      	bpl.n	8005cfe <_dtoa_r+0xa3e>
 8005d40:	2b39      	cmp	r3, #57	@ 0x39
 8005d42:	d1da      	bne.n	8005cfa <_dtoa_r+0xa3a>
 8005d44:	2339      	movs	r3, #57	@ 0x39
 8005d46:	f88b 3000 	strb.w	r3, [fp]
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	461e      	mov	r6, r3
 8005d4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	2a39      	cmp	r2, #57	@ 0x39
 8005d56:	d04e      	beq.n	8005df6 <_dtoa_r+0xb36>
 8005d58:	3201      	adds	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	e501      	b.n	8005762 <_dtoa_r+0x4a2>
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	dd03      	ble.n	8005d6a <_dtoa_r+0xaaa>
 8005d62:	2b39      	cmp	r3, #57	@ 0x39
 8005d64:	d0ee      	beq.n	8005d44 <_dtoa_r+0xa84>
 8005d66:	3301      	adds	r3, #1
 8005d68:	e7c9      	b.n	8005cfe <_dtoa_r+0xa3e>
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d72:	428a      	cmp	r2, r1
 8005d74:	d028      	beq.n	8005dc8 <_dtoa_r+0xb08>
 8005d76:	2300      	movs	r3, #0
 8005d78:	220a      	movs	r2, #10
 8005d7a:	9903      	ldr	r1, [sp, #12]
 8005d7c:	4648      	mov	r0, r9
 8005d7e:	f000 f9d3 	bl	8006128 <__multadd>
 8005d82:	42af      	cmp	r7, r5
 8005d84:	9003      	str	r0, [sp, #12]
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f04f 020a 	mov.w	r2, #10
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4648      	mov	r0, r9
 8005d92:	d107      	bne.n	8005da4 <_dtoa_r+0xae4>
 8005d94:	f000 f9c8 	bl	8006128 <__multadd>
 8005d98:	4607      	mov	r7, r0
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	e777      	b.n	8005c94 <_dtoa_r+0x9d4>
 8005da4:	f000 f9c0 	bl	8006128 <__multadd>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4607      	mov	r7, r0
 8005dac:	2300      	movs	r3, #0
 8005dae:	220a      	movs	r2, #10
 8005db0:	4648      	mov	r0, r9
 8005db2:	f000 f9b9 	bl	8006128 <__multadd>
 8005db6:	4605      	mov	r5, r0
 8005db8:	e7f0      	b.n	8005d9c <_dtoa_r+0xadc>
 8005dba:	f1bb 0f00 	cmp.w	fp, #0
 8005dbe:	bfcc      	ite	gt
 8005dc0:	465e      	movgt	r6, fp
 8005dc2:	2601      	movle	r6, #1
 8005dc4:	2700      	movs	r7, #0
 8005dc6:	4456      	add	r6, sl
 8005dc8:	2201      	movs	r2, #1
 8005dca:	9903      	ldr	r1, [sp, #12]
 8005dcc:	4648      	mov	r0, r9
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	f000 fb4e 	bl	8006470 <__lshift>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	9003      	str	r0, [sp, #12]
 8005dd8:	f000 fbb6 	bl	8006548 <__mcmp>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	dcb4      	bgt.n	8005d4a <_dtoa_r+0xa8a>
 8005de0:	d102      	bne.n	8005de8 <_dtoa_r+0xb28>
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	07db      	lsls	r3, r3, #31
 8005de6:	d4b0      	bmi.n	8005d4a <_dtoa_r+0xa8a>
 8005de8:	4633      	mov	r3, r6
 8005dea:	461e      	mov	r6, r3
 8005dec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005df0:	2a30      	cmp	r2, #48	@ 0x30
 8005df2:	d0fa      	beq.n	8005dea <_dtoa_r+0xb2a>
 8005df4:	e4b5      	b.n	8005762 <_dtoa_r+0x4a2>
 8005df6:	459a      	cmp	sl, r3
 8005df8:	d1a8      	bne.n	8005d4c <_dtoa_r+0xa8c>
 8005dfa:	2331      	movs	r3, #49	@ 0x31
 8005dfc:	f108 0801 	add.w	r8, r8, #1
 8005e00:	f88a 3000 	strb.w	r3, [sl]
 8005e04:	e4ad      	b.n	8005762 <_dtoa_r+0x4a2>
 8005e06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005e64 <_dtoa_r+0xba4>
 8005e0c:	b11b      	cbz	r3, 8005e16 <_dtoa_r+0xb56>
 8005e0e:	f10a 0308 	add.w	r3, sl, #8
 8005e12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	4650      	mov	r0, sl
 8005e18:	b017      	add	sp, #92	@ 0x5c
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	f77f ae2e 	ble.w	8005a82 <_dtoa_r+0x7c2>
 8005e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	e64d      	b.n	8005aca <_dtoa_r+0x80a>
 8005e2e:	f1bb 0f00 	cmp.w	fp, #0
 8005e32:	f77f aed9 	ble.w	8005be8 <_dtoa_r+0x928>
 8005e36:	4656      	mov	r6, sl
 8005e38:	4621      	mov	r1, r4
 8005e3a:	9803      	ldr	r0, [sp, #12]
 8005e3c:	f7ff f9b7 	bl	80051ae <quorem>
 8005e40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005e44:	f806 3b01 	strb.w	r3, [r6], #1
 8005e48:	eba6 020a 	sub.w	r2, r6, sl
 8005e4c:	4593      	cmp	fp, r2
 8005e4e:	ddb4      	ble.n	8005dba <_dtoa_r+0xafa>
 8005e50:	2300      	movs	r3, #0
 8005e52:	220a      	movs	r2, #10
 8005e54:	4648      	mov	r0, r9
 8005e56:	9903      	ldr	r1, [sp, #12]
 8005e58:	f000 f966 	bl	8006128 <__multadd>
 8005e5c:	9003      	str	r0, [sp, #12]
 8005e5e:	e7eb      	b.n	8005e38 <_dtoa_r+0xb78>
 8005e60:	0800756e 	.word	0x0800756e
 8005e64:	080074f2 	.word	0x080074f2

08005e68 <_free_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d040      	beq.n	8005ef2 <_free_r+0x8a>
 8005e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e74:	1f0c      	subs	r4, r1, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfb8      	it	lt
 8005e7a:	18e4      	addlt	r4, r4, r3
 8005e7c:	f000 f8e6 	bl	800604c <__malloc_lock>
 8005e80:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef4 <_free_r+0x8c>)
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	b933      	cbnz	r3, 8005e94 <_free_r+0x2c>
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6014      	str	r4, [r2, #0]
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e90:	f000 b8e2 	b.w	8006058 <__malloc_unlock>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x42>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	1821      	adds	r1, r4, r0
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1809      	addeq	r1, r1, r0
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	e7ed      	b.n	8005e86 <_free_r+0x1e>
 8005eaa:	461a      	mov	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b10b      	cbz	r3, 8005eb4 <_free_r+0x4c>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d9fa      	bls.n	8005eaa <_free_r+0x42>
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	1850      	adds	r0, r2, r1
 8005eb8:	42a0      	cmp	r0, r4
 8005eba:	d10b      	bne.n	8005ed4 <_free_r+0x6c>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	4401      	add	r1, r0
 8005ec0:	1850      	adds	r0, r2, r1
 8005ec2:	4283      	cmp	r3, r0
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	d1e0      	bne.n	8005e8a <_free_r+0x22>
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4408      	add	r0, r1
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	6053      	str	r3, [r2, #4]
 8005ed2:	e7da      	b.n	8005e8a <_free_r+0x22>
 8005ed4:	d902      	bls.n	8005edc <_free_r+0x74>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	e7d6      	b.n	8005e8a <_free_r+0x22>
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	1821      	adds	r1, r4, r0
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf01      	itttt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	1809      	addeq	r1, r1, r0
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	6054      	str	r4, [r2, #4]
 8005ef0:	e7cb      	b.n	8005e8a <_free_r+0x22>
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000514 	.word	0x20000514

08005ef8 <malloc>:
 8005ef8:	4b02      	ldr	r3, [pc, #8]	@ (8005f04 <malloc+0xc>)
 8005efa:	4601      	mov	r1, r0
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	f000 b825 	b.w	8005f4c <_malloc_r>
 8005f02:	bf00      	nop
 8005f04:	20000018 	.word	0x20000018

08005f08 <sbrk_aligned>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f48 <sbrk_aligned+0x40>)
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	4605      	mov	r5, r0
 8005f12:	b911      	cbnz	r1, 8005f1a <sbrk_aligned+0x12>
 8005f14:	f000 fe3a 	bl	8006b8c <_sbrk_r>
 8005f18:	6030      	str	r0, [r6, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fe35 	bl	8006b8c <_sbrk_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d103      	bne.n	8005f2e <sbrk_aligned+0x26>
 8005f26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d0f8      	beq.n	8005f2a <sbrk_aligned+0x22>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 fe26 	bl	8006b8c <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d1f2      	bne.n	8005f2a <sbrk_aligned+0x22>
 8005f44:	e7ef      	b.n	8005f26 <sbrk_aligned+0x1e>
 8005f46:	bf00      	nop
 8005f48:	20000510 	.word	0x20000510

08005f4c <_malloc_r>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	1ccd      	adds	r5, r1, #3
 8005f52:	f025 0503 	bic.w	r5, r5, #3
 8005f56:	3508      	adds	r5, #8
 8005f58:	2d0c      	cmp	r5, #12
 8005f5a:	bf38      	it	cc
 8005f5c:	250c      	movcc	r5, #12
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	4606      	mov	r6, r0
 8005f62:	db01      	blt.n	8005f68 <_malloc_r+0x1c>
 8005f64:	42a9      	cmp	r1, r5
 8005f66:	d904      	bls.n	8005f72 <_malloc_r+0x26>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006048 <_malloc_r+0xfc>
 8005f76:	f000 f869 	bl	800604c <__malloc_lock>
 8005f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7e:	461c      	mov	r4, r3
 8005f80:	bb44      	cbnz	r4, 8005fd4 <_malloc_r+0x88>
 8005f82:	4629      	mov	r1, r5
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff ffbf 	bl	8005f08 <sbrk_aligned>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	d158      	bne.n	8006042 <_malloc_r+0xf6>
 8005f90:	f8d8 4000 	ldr.w	r4, [r8]
 8005f94:	4627      	mov	r7, r4
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	d143      	bne.n	8006022 <_malloc_r+0xd6>
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d04b      	beq.n	8006036 <_malloc_r+0xea>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	eb04 0903 	add.w	r9, r4, r3
 8005fa8:	f000 fdf0 	bl	8006b8c <_sbrk_r>
 8005fac:	4581      	cmp	r9, r0
 8005fae:	d142      	bne.n	8006036 <_malloc_r+0xea>
 8005fb0:	6821      	ldr	r1, [r4, #0]
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	1a6d      	subs	r5, r5, r1
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7ff ffa6 	bl	8005f08 <sbrk_aligned>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d03a      	beq.n	8006036 <_malloc_r+0xea>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	442b      	add	r3, r5
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	bb62      	cbnz	r2, 8006028 <_malloc_r+0xdc>
 8005fce:	f8c8 7000 	str.w	r7, [r8]
 8005fd2:	e00f      	b.n	8005ff4 <_malloc_r+0xa8>
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	1b52      	subs	r2, r2, r5
 8005fd8:	d420      	bmi.n	800601c <_malloc_r+0xd0>
 8005fda:	2a0b      	cmp	r2, #11
 8005fdc:	d917      	bls.n	800600e <_malloc_r+0xc2>
 8005fde:	1961      	adds	r1, r4, r5
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	6025      	str	r5, [r4, #0]
 8005fe4:	bf18      	it	ne
 8005fe6:	6059      	strne	r1, [r3, #4]
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	bf08      	it	eq
 8005fec:	f8c8 1000 	streq.w	r1, [r8]
 8005ff0:	5162      	str	r2, [r4, r5]
 8005ff2:	604b      	str	r3, [r1, #4]
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 f82f 	bl	8006058 <__malloc_unlock>
 8005ffa:	f104 000b 	add.w	r0, r4, #11
 8005ffe:	1d23      	adds	r3, r4, #4
 8006000:	f020 0007 	bic.w	r0, r0, #7
 8006004:	1ac2      	subs	r2, r0, r3
 8006006:	bf1c      	itt	ne
 8006008:	1a1b      	subne	r3, r3, r0
 800600a:	50a3      	strne	r3, [r4, r2]
 800600c:	e7af      	b.n	8005f6e <_malloc_r+0x22>
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	42a3      	cmp	r3, r4
 8006012:	bf0c      	ite	eq
 8006014:	f8c8 2000 	streq.w	r2, [r8]
 8006018:	605a      	strne	r2, [r3, #4]
 800601a:	e7eb      	b.n	8005ff4 <_malloc_r+0xa8>
 800601c:	4623      	mov	r3, r4
 800601e:	6864      	ldr	r4, [r4, #4]
 8006020:	e7ae      	b.n	8005f80 <_malloc_r+0x34>
 8006022:	463c      	mov	r4, r7
 8006024:	687f      	ldr	r7, [r7, #4]
 8006026:	e7b6      	b.n	8005f96 <_malloc_r+0x4a>
 8006028:	461a      	mov	r2, r3
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	42a3      	cmp	r3, r4
 800602e:	d1fb      	bne.n	8006028 <_malloc_r+0xdc>
 8006030:	2300      	movs	r3, #0
 8006032:	6053      	str	r3, [r2, #4]
 8006034:	e7de      	b.n	8005ff4 <_malloc_r+0xa8>
 8006036:	230c      	movs	r3, #12
 8006038:	4630      	mov	r0, r6
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f000 f80c 	bl	8006058 <__malloc_unlock>
 8006040:	e794      	b.n	8005f6c <_malloc_r+0x20>
 8006042:	6005      	str	r5, [r0, #0]
 8006044:	e7d6      	b.n	8005ff4 <_malloc_r+0xa8>
 8006046:	bf00      	nop
 8006048:	20000514 	.word	0x20000514

0800604c <__malloc_lock>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__malloc_lock+0x8>)
 800604e:	f7ff b89e 	b.w	800518e <__retarget_lock_acquire_recursive>
 8006052:	bf00      	nop
 8006054:	2000050c 	.word	0x2000050c

08006058 <__malloc_unlock>:
 8006058:	4801      	ldr	r0, [pc, #4]	@ (8006060 <__malloc_unlock+0x8>)
 800605a:	f7ff b899 	b.w	8005190 <__retarget_lock_release_recursive>
 800605e:	bf00      	nop
 8006060:	2000050c 	.word	0x2000050c

08006064 <_Balloc>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	69c6      	ldr	r6, [r0, #28]
 8006068:	4604      	mov	r4, r0
 800606a:	460d      	mov	r5, r1
 800606c:	b976      	cbnz	r6, 800608c <_Balloc+0x28>
 800606e:	2010      	movs	r0, #16
 8006070:	f7ff ff42 	bl	8005ef8 <malloc>
 8006074:	4602      	mov	r2, r0
 8006076:	61e0      	str	r0, [r4, #28]
 8006078:	b920      	cbnz	r0, 8006084 <_Balloc+0x20>
 800607a:	216b      	movs	r1, #107	@ 0x6b
 800607c:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <_Balloc+0x78>)
 800607e:	4818      	ldr	r0, [pc, #96]	@ (80060e0 <_Balloc+0x7c>)
 8006080:	f000 fda2 	bl	8006bc8 <__assert_func>
 8006084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006088:	6006      	str	r6, [r0, #0]
 800608a:	60c6      	str	r6, [r0, #12]
 800608c:	69e6      	ldr	r6, [r4, #28]
 800608e:	68f3      	ldr	r3, [r6, #12]
 8006090:	b183      	cbz	r3, 80060b4 <_Balloc+0x50>
 8006092:	69e3      	ldr	r3, [r4, #28]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800609a:	b9b8      	cbnz	r0, 80060cc <_Balloc+0x68>
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f605 	lsl.w	r6, r1, r5
 80060a2:	1d72      	adds	r2, r6, #5
 80060a4:	4620      	mov	r0, r4
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	f000 fdac 	bl	8006c04 <_calloc_r>
 80060ac:	b160      	cbz	r0, 80060c8 <_Balloc+0x64>
 80060ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060b2:	e00e      	b.n	80060d2 <_Balloc+0x6e>
 80060b4:	2221      	movs	r2, #33	@ 0x21
 80060b6:	2104      	movs	r1, #4
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fda3 	bl	8006c04 <_calloc_r>
 80060be:	69e3      	ldr	r3, [r4, #28]
 80060c0:	60f0      	str	r0, [r6, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e4      	bne.n	8006092 <_Balloc+0x2e>
 80060c8:	2000      	movs	r0, #0
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	6802      	ldr	r2, [r0, #0]
 80060ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060d2:	2300      	movs	r3, #0
 80060d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060d8:	e7f7      	b.n	80060ca <_Balloc+0x66>
 80060da:	bf00      	nop
 80060dc:	080074ff 	.word	0x080074ff
 80060e0:	0800757f 	.word	0x0800757f

080060e4 <_Bfree>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	69c6      	ldr	r6, [r0, #28]
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b976      	cbnz	r6, 800610c <_Bfree+0x28>
 80060ee:	2010      	movs	r0, #16
 80060f0:	f7ff ff02 	bl	8005ef8 <malloc>
 80060f4:	4602      	mov	r2, r0
 80060f6:	61e8      	str	r0, [r5, #28]
 80060f8:	b920      	cbnz	r0, 8006104 <_Bfree+0x20>
 80060fa:	218f      	movs	r1, #143	@ 0x8f
 80060fc:	4b08      	ldr	r3, [pc, #32]	@ (8006120 <_Bfree+0x3c>)
 80060fe:	4809      	ldr	r0, [pc, #36]	@ (8006124 <_Bfree+0x40>)
 8006100:	f000 fd62 	bl	8006bc8 <__assert_func>
 8006104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006108:	6006      	str	r6, [r0, #0]
 800610a:	60c6      	str	r6, [r0, #12]
 800610c:	b13c      	cbz	r4, 800611e <_Bfree+0x3a>
 800610e:	69eb      	ldr	r3, [r5, #28]
 8006110:	6862      	ldr	r2, [r4, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006118:	6021      	str	r1, [r4, #0]
 800611a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	080074ff 	.word	0x080074ff
 8006124:	0800757f 	.word	0x0800757f

08006128 <__multadd>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	4607      	mov	r7, r0
 800612e:	460c      	mov	r4, r1
 8006130:	461e      	mov	r6, r3
 8006132:	2000      	movs	r0, #0
 8006134:	690d      	ldr	r5, [r1, #16]
 8006136:	f101 0c14 	add.w	ip, r1, #20
 800613a:	f8dc 3000 	ldr.w	r3, [ip]
 800613e:	3001      	adds	r0, #1
 8006140:	b299      	uxth	r1, r3
 8006142:	fb02 6101 	mla	r1, r2, r1, r6
 8006146:	0c1e      	lsrs	r6, r3, #16
 8006148:	0c0b      	lsrs	r3, r1, #16
 800614a:	fb02 3306 	mla	r3, r2, r6, r3
 800614e:	b289      	uxth	r1, r1
 8006150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006154:	4285      	cmp	r5, r0
 8006156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800615a:	f84c 1b04 	str.w	r1, [ip], #4
 800615e:	dcec      	bgt.n	800613a <__multadd+0x12>
 8006160:	b30e      	cbz	r6, 80061a6 <__multadd+0x7e>
 8006162:	68a3      	ldr	r3, [r4, #8]
 8006164:	42ab      	cmp	r3, r5
 8006166:	dc19      	bgt.n	800619c <__multadd+0x74>
 8006168:	6861      	ldr	r1, [r4, #4]
 800616a:	4638      	mov	r0, r7
 800616c:	3101      	adds	r1, #1
 800616e:	f7ff ff79 	bl	8006064 <_Balloc>
 8006172:	4680      	mov	r8, r0
 8006174:	b928      	cbnz	r0, 8006182 <__multadd+0x5a>
 8006176:	4602      	mov	r2, r0
 8006178:	21ba      	movs	r1, #186	@ 0xba
 800617a:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <__multadd+0x84>)
 800617c:	480c      	ldr	r0, [pc, #48]	@ (80061b0 <__multadd+0x88>)
 800617e:	f000 fd23 	bl	8006bc8 <__assert_func>
 8006182:	6922      	ldr	r2, [r4, #16]
 8006184:	f104 010c 	add.w	r1, r4, #12
 8006188:	3202      	adds	r2, #2
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	300c      	adds	r0, #12
 800618e:	f000 fd0d 	bl	8006bac <memcpy>
 8006192:	4621      	mov	r1, r4
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ffa5 	bl	80060e4 <_Bfree>
 800619a:	4644      	mov	r4, r8
 800619c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061a0:	3501      	adds	r5, #1
 80061a2:	615e      	str	r6, [r3, #20]
 80061a4:	6125      	str	r5, [r4, #16]
 80061a6:	4620      	mov	r0, r4
 80061a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ac:	0800756e 	.word	0x0800756e
 80061b0:	0800757f 	.word	0x0800757f

080061b4 <__hi0bits>:
 80061b4:	4603      	mov	r3, r0
 80061b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80061ba:	bf3a      	itte	cc
 80061bc:	0403      	lslcc	r3, r0, #16
 80061be:	2010      	movcc	r0, #16
 80061c0:	2000      	movcs	r0, #0
 80061c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c6:	bf3c      	itt	cc
 80061c8:	021b      	lslcc	r3, r3, #8
 80061ca:	3008      	addcc	r0, #8
 80061cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d0:	bf3c      	itt	cc
 80061d2:	011b      	lslcc	r3, r3, #4
 80061d4:	3004      	addcc	r0, #4
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061da:	bf3c      	itt	cc
 80061dc:	009b      	lslcc	r3, r3, #2
 80061de:	3002      	addcc	r0, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db05      	blt.n	80061f0 <__hi0bits+0x3c>
 80061e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061e8:	f100 0001 	add.w	r0, r0, #1
 80061ec:	bf08      	it	eq
 80061ee:	2020      	moveq	r0, #32
 80061f0:	4770      	bx	lr

080061f2 <__lo0bits>:
 80061f2:	6803      	ldr	r3, [r0, #0]
 80061f4:	4602      	mov	r2, r0
 80061f6:	f013 0007 	ands.w	r0, r3, #7
 80061fa:	d00b      	beq.n	8006214 <__lo0bits+0x22>
 80061fc:	07d9      	lsls	r1, r3, #31
 80061fe:	d421      	bmi.n	8006244 <__lo0bits+0x52>
 8006200:	0798      	lsls	r0, r3, #30
 8006202:	bf49      	itett	mi
 8006204:	085b      	lsrmi	r3, r3, #1
 8006206:	089b      	lsrpl	r3, r3, #2
 8006208:	2001      	movmi	r0, #1
 800620a:	6013      	strmi	r3, [r2, #0]
 800620c:	bf5c      	itt	pl
 800620e:	2002      	movpl	r0, #2
 8006210:	6013      	strpl	r3, [r2, #0]
 8006212:	4770      	bx	lr
 8006214:	b299      	uxth	r1, r3
 8006216:	b909      	cbnz	r1, 800621c <__lo0bits+0x2a>
 8006218:	2010      	movs	r0, #16
 800621a:	0c1b      	lsrs	r3, r3, #16
 800621c:	b2d9      	uxtb	r1, r3
 800621e:	b909      	cbnz	r1, 8006224 <__lo0bits+0x32>
 8006220:	3008      	adds	r0, #8
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	0719      	lsls	r1, r3, #28
 8006226:	bf04      	itt	eq
 8006228:	091b      	lsreq	r3, r3, #4
 800622a:	3004      	addeq	r0, #4
 800622c:	0799      	lsls	r1, r3, #30
 800622e:	bf04      	itt	eq
 8006230:	089b      	lsreq	r3, r3, #2
 8006232:	3002      	addeq	r0, #2
 8006234:	07d9      	lsls	r1, r3, #31
 8006236:	d403      	bmi.n	8006240 <__lo0bits+0x4e>
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	f100 0001 	add.w	r0, r0, #1
 800623e:	d003      	beq.n	8006248 <__lo0bits+0x56>
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	4770      	bx	lr
 8006244:	2000      	movs	r0, #0
 8006246:	4770      	bx	lr
 8006248:	2020      	movs	r0, #32
 800624a:	4770      	bx	lr

0800624c <__i2b>:
 800624c:	b510      	push	{r4, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	2101      	movs	r1, #1
 8006252:	f7ff ff07 	bl	8006064 <_Balloc>
 8006256:	4602      	mov	r2, r0
 8006258:	b928      	cbnz	r0, 8006266 <__i2b+0x1a>
 800625a:	f240 1145 	movw	r1, #325	@ 0x145
 800625e:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <__i2b+0x24>)
 8006260:	4804      	ldr	r0, [pc, #16]	@ (8006274 <__i2b+0x28>)
 8006262:	f000 fcb1 	bl	8006bc8 <__assert_func>
 8006266:	2301      	movs	r3, #1
 8006268:	6144      	str	r4, [r0, #20]
 800626a:	6103      	str	r3, [r0, #16]
 800626c:	bd10      	pop	{r4, pc}
 800626e:	bf00      	nop
 8006270:	0800756e 	.word	0x0800756e
 8006274:	0800757f 	.word	0x0800757f

08006278 <__multiply>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	4617      	mov	r7, r2
 800627e:	690a      	ldr	r2, [r1, #16]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4689      	mov	r9, r1
 8006284:	429a      	cmp	r2, r3
 8006286:	bfa2      	ittt	ge
 8006288:	463b      	movge	r3, r7
 800628a:	460f      	movge	r7, r1
 800628c:	4699      	movge	r9, r3
 800628e:	693d      	ldr	r5, [r7, #16]
 8006290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	eb05 060a 	add.w	r6, r5, sl
 800629c:	42b3      	cmp	r3, r6
 800629e:	b085      	sub	sp, #20
 80062a0:	bfb8      	it	lt
 80062a2:	3101      	addlt	r1, #1
 80062a4:	f7ff fede 	bl	8006064 <_Balloc>
 80062a8:	b930      	cbnz	r0, 80062b8 <__multiply+0x40>
 80062aa:	4602      	mov	r2, r0
 80062ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80062b0:	4b40      	ldr	r3, [pc, #256]	@ (80063b4 <__multiply+0x13c>)
 80062b2:	4841      	ldr	r0, [pc, #260]	@ (80063b8 <__multiply+0x140>)
 80062b4:	f000 fc88 	bl	8006bc8 <__assert_func>
 80062b8:	f100 0414 	add.w	r4, r0, #20
 80062bc:	4623      	mov	r3, r4
 80062be:	2200      	movs	r2, #0
 80062c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80062c4:	4573      	cmp	r3, lr
 80062c6:	d320      	bcc.n	800630a <__multiply+0x92>
 80062c8:	f107 0814 	add.w	r8, r7, #20
 80062cc:	f109 0114 	add.w	r1, r9, #20
 80062d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80062d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80062d8:	9302      	str	r3, [sp, #8]
 80062da:	1beb      	subs	r3, r5, r7
 80062dc:	3b15      	subs	r3, #21
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	3304      	adds	r3, #4
 80062e4:	3715      	adds	r7, #21
 80062e6:	42bd      	cmp	r5, r7
 80062e8:	bf38      	it	cc
 80062ea:	2304      	movcc	r3, #4
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	9b02      	ldr	r3, [sp, #8]
 80062f0:	9103      	str	r1, [sp, #12]
 80062f2:	428b      	cmp	r3, r1
 80062f4:	d80c      	bhi.n	8006310 <__multiply+0x98>
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	dd03      	ble.n	8006302 <__multiply+0x8a>
 80062fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d055      	beq.n	80063ae <__multiply+0x136>
 8006302:	6106      	str	r6, [r0, #16]
 8006304:	b005      	add	sp, #20
 8006306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630a:	f843 2b04 	str.w	r2, [r3], #4
 800630e:	e7d9      	b.n	80062c4 <__multiply+0x4c>
 8006310:	f8b1 a000 	ldrh.w	sl, [r1]
 8006314:	f1ba 0f00 	cmp.w	sl, #0
 8006318:	d01f      	beq.n	800635a <__multiply+0xe2>
 800631a:	46c4      	mov	ip, r8
 800631c:	46a1      	mov	r9, r4
 800631e:	2700      	movs	r7, #0
 8006320:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006324:	f8d9 3000 	ldr.w	r3, [r9]
 8006328:	fa1f fb82 	uxth.w	fp, r2
 800632c:	b29b      	uxth	r3, r3
 800632e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006332:	443b      	add	r3, r7
 8006334:	f8d9 7000 	ldr.w	r7, [r9]
 8006338:	0c12      	lsrs	r2, r2, #16
 800633a:	0c3f      	lsrs	r7, r7, #16
 800633c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006340:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006344:	b29b      	uxth	r3, r3
 8006346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634a:	4565      	cmp	r5, ip
 800634c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006350:	f849 3b04 	str.w	r3, [r9], #4
 8006354:	d8e4      	bhi.n	8006320 <__multiply+0xa8>
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	50e7      	str	r7, [r4, r3]
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	3104      	adds	r1, #4
 800635e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006362:	f1b9 0f00 	cmp.w	r9, #0
 8006366:	d020      	beq.n	80063aa <__multiply+0x132>
 8006368:	4647      	mov	r7, r8
 800636a:	46a4      	mov	ip, r4
 800636c:	f04f 0a00 	mov.w	sl, #0
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f8b7 b000 	ldrh.w	fp, [r7]
 8006376:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800637a:	b29b      	uxth	r3, r3
 800637c:	fb09 220b 	mla	r2, r9, fp, r2
 8006380:	4452      	add	r2, sl
 8006382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006386:	f84c 3b04 	str.w	r3, [ip], #4
 800638a:	f857 3b04 	ldr.w	r3, [r7], #4
 800638e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006392:	f8bc 3000 	ldrh.w	r3, [ip]
 8006396:	42bd      	cmp	r5, r7
 8006398:	fb09 330a 	mla	r3, r9, sl, r3
 800639c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80063a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063a4:	d8e5      	bhi.n	8006372 <__multiply+0xfa>
 80063a6:	9a01      	ldr	r2, [sp, #4]
 80063a8:	50a3      	str	r3, [r4, r2]
 80063aa:	3404      	adds	r4, #4
 80063ac:	e79f      	b.n	80062ee <__multiply+0x76>
 80063ae:	3e01      	subs	r6, #1
 80063b0:	e7a1      	b.n	80062f6 <__multiply+0x7e>
 80063b2:	bf00      	nop
 80063b4:	0800756e 	.word	0x0800756e
 80063b8:	0800757f 	.word	0x0800757f

080063bc <__pow5mult>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	4615      	mov	r5, r2
 80063c2:	f012 0203 	ands.w	r2, r2, #3
 80063c6:	4607      	mov	r7, r0
 80063c8:	460e      	mov	r6, r1
 80063ca:	d007      	beq.n	80063dc <__pow5mult+0x20>
 80063cc:	4c25      	ldr	r4, [pc, #148]	@ (8006464 <__pow5mult+0xa8>)
 80063ce:	3a01      	subs	r2, #1
 80063d0:	2300      	movs	r3, #0
 80063d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063d6:	f7ff fea7 	bl	8006128 <__multadd>
 80063da:	4606      	mov	r6, r0
 80063dc:	10ad      	asrs	r5, r5, #2
 80063de:	d03d      	beq.n	800645c <__pow5mult+0xa0>
 80063e0:	69fc      	ldr	r4, [r7, #28]
 80063e2:	b97c      	cbnz	r4, 8006404 <__pow5mult+0x48>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f7ff fd87 	bl	8005ef8 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	61f8      	str	r0, [r7, #28]
 80063ee:	b928      	cbnz	r0, 80063fc <__pow5mult+0x40>
 80063f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <__pow5mult+0xac>)
 80063f6:	481d      	ldr	r0, [pc, #116]	@ (800646c <__pow5mult+0xb0>)
 80063f8:	f000 fbe6 	bl	8006bc8 <__assert_func>
 80063fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006400:	6004      	str	r4, [r0, #0]
 8006402:	60c4      	str	r4, [r0, #12]
 8006404:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800640c:	b94c      	cbnz	r4, 8006422 <__pow5mult+0x66>
 800640e:	f240 2171 	movw	r1, #625	@ 0x271
 8006412:	4638      	mov	r0, r7
 8006414:	f7ff ff1a 	bl	800624c <__i2b>
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	07eb      	lsls	r3, r5, #31
 8006428:	d50a      	bpl.n	8006440 <__pow5mult+0x84>
 800642a:	4631      	mov	r1, r6
 800642c:	4622      	mov	r2, r4
 800642e:	4638      	mov	r0, r7
 8006430:	f7ff ff22 	bl	8006278 <__multiply>
 8006434:	4680      	mov	r8, r0
 8006436:	4631      	mov	r1, r6
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff fe53 	bl	80060e4 <_Bfree>
 800643e:	4646      	mov	r6, r8
 8006440:	106d      	asrs	r5, r5, #1
 8006442:	d00b      	beq.n	800645c <__pow5mult+0xa0>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	b938      	cbnz	r0, 8006458 <__pow5mult+0x9c>
 8006448:	4622      	mov	r2, r4
 800644a:	4621      	mov	r1, r4
 800644c:	4638      	mov	r0, r7
 800644e:	f7ff ff13 	bl	8006278 <__multiply>
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	f8c0 9000 	str.w	r9, [r0]
 8006458:	4604      	mov	r4, r0
 800645a:	e7e4      	b.n	8006426 <__pow5mult+0x6a>
 800645c:	4630      	mov	r0, r6
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	bf00      	nop
 8006464:	08007630 	.word	0x08007630
 8006468:	080074ff 	.word	0x080074ff
 800646c:	0800757f 	.word	0x0800757f

08006470 <__lshift>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	4607      	mov	r7, r0
 8006478:	4691      	mov	r9, r2
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	6849      	ldr	r1, [r1, #4]
 800647e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006488:	f108 0601 	add.w	r6, r8, #1
 800648c:	42b3      	cmp	r3, r6
 800648e:	db0b      	blt.n	80064a8 <__lshift+0x38>
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff fde7 	bl	8006064 <_Balloc>
 8006496:	4605      	mov	r5, r0
 8006498:	b948      	cbnz	r0, 80064ae <__lshift+0x3e>
 800649a:	4602      	mov	r2, r0
 800649c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80064a0:	4b27      	ldr	r3, [pc, #156]	@ (8006540 <__lshift+0xd0>)
 80064a2:	4828      	ldr	r0, [pc, #160]	@ (8006544 <__lshift+0xd4>)
 80064a4:	f000 fb90 	bl	8006bc8 <__assert_func>
 80064a8:	3101      	adds	r1, #1
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	e7ee      	b.n	800648c <__lshift+0x1c>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f100 0114 	add.w	r1, r0, #20
 80064b4:	f100 0210 	add.w	r2, r0, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	4553      	cmp	r3, sl
 80064bc:	db33      	blt.n	8006526 <__lshift+0xb6>
 80064be:	6920      	ldr	r0, [r4, #16]
 80064c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064c4:	f104 0314 	add.w	r3, r4, #20
 80064c8:	f019 091f 	ands.w	r9, r9, #31
 80064cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064d4:	d02b      	beq.n	800652e <__lshift+0xbe>
 80064d6:	468a      	mov	sl, r1
 80064d8:	2200      	movs	r2, #0
 80064da:	f1c9 0e20 	rsb	lr, r9, #32
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	fa00 f009 	lsl.w	r0, r0, r9
 80064e4:	4310      	orrs	r0, r2
 80064e6:	f84a 0b04 	str.w	r0, [sl], #4
 80064ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ee:	459c      	cmp	ip, r3
 80064f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80064f4:	d8f3      	bhi.n	80064de <__lshift+0x6e>
 80064f6:	ebac 0304 	sub.w	r3, ip, r4
 80064fa:	3b15      	subs	r3, #21
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	3304      	adds	r3, #4
 8006502:	f104 0015 	add.w	r0, r4, #21
 8006506:	4560      	cmp	r0, ip
 8006508:	bf88      	it	hi
 800650a:	2304      	movhi	r3, #4
 800650c:	50ca      	str	r2, [r1, r3]
 800650e:	b10a      	cbz	r2, 8006514 <__lshift+0xa4>
 8006510:	f108 0602 	add.w	r6, r8, #2
 8006514:	3e01      	subs	r6, #1
 8006516:	4638      	mov	r0, r7
 8006518:	4621      	mov	r1, r4
 800651a:	612e      	str	r6, [r5, #16]
 800651c:	f7ff fde2 	bl	80060e4 <_Bfree>
 8006520:	4628      	mov	r0, r5
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	f842 0f04 	str.w	r0, [r2, #4]!
 800652a:	3301      	adds	r3, #1
 800652c:	e7c5      	b.n	80064ba <__lshift+0x4a>
 800652e:	3904      	subs	r1, #4
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	459c      	cmp	ip, r3
 8006536:	f841 2f04 	str.w	r2, [r1, #4]!
 800653a:	d8f9      	bhi.n	8006530 <__lshift+0xc0>
 800653c:	e7ea      	b.n	8006514 <__lshift+0xa4>
 800653e:	bf00      	nop
 8006540:	0800756e 	.word	0x0800756e
 8006544:	0800757f 	.word	0x0800757f

08006548 <__mcmp>:
 8006548:	4603      	mov	r3, r0
 800654a:	690a      	ldr	r2, [r1, #16]
 800654c:	6900      	ldr	r0, [r0, #16]
 800654e:	b530      	push	{r4, r5, lr}
 8006550:	1a80      	subs	r0, r0, r2
 8006552:	d10e      	bne.n	8006572 <__mcmp+0x2a>
 8006554:	3314      	adds	r3, #20
 8006556:	3114      	adds	r1, #20
 8006558:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800655c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006568:	4295      	cmp	r5, r2
 800656a:	d003      	beq.n	8006574 <__mcmp+0x2c>
 800656c:	d205      	bcs.n	800657a <__mcmp+0x32>
 800656e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006572:	bd30      	pop	{r4, r5, pc}
 8006574:	42a3      	cmp	r3, r4
 8006576:	d3f3      	bcc.n	8006560 <__mcmp+0x18>
 8006578:	e7fb      	b.n	8006572 <__mcmp+0x2a>
 800657a:	2001      	movs	r0, #1
 800657c:	e7f9      	b.n	8006572 <__mcmp+0x2a>
	...

08006580 <__mdiff>:
 8006580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	4689      	mov	r9, r1
 8006586:	4606      	mov	r6, r0
 8006588:	4611      	mov	r1, r2
 800658a:	4648      	mov	r0, r9
 800658c:	4614      	mov	r4, r2
 800658e:	f7ff ffdb 	bl	8006548 <__mcmp>
 8006592:	1e05      	subs	r5, r0, #0
 8006594:	d112      	bne.n	80065bc <__mdiff+0x3c>
 8006596:	4629      	mov	r1, r5
 8006598:	4630      	mov	r0, r6
 800659a:	f7ff fd63 	bl	8006064 <_Balloc>
 800659e:	4602      	mov	r2, r0
 80065a0:	b928      	cbnz	r0, 80065ae <__mdiff+0x2e>
 80065a2:	f240 2137 	movw	r1, #567	@ 0x237
 80065a6:	4b3e      	ldr	r3, [pc, #248]	@ (80066a0 <__mdiff+0x120>)
 80065a8:	483e      	ldr	r0, [pc, #248]	@ (80066a4 <__mdiff+0x124>)
 80065aa:	f000 fb0d 	bl	8006bc8 <__assert_func>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065b4:	4610      	mov	r0, r2
 80065b6:	b003      	add	sp, #12
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	bfbc      	itt	lt
 80065be:	464b      	movlt	r3, r9
 80065c0:	46a1      	movlt	r9, r4
 80065c2:	4630      	mov	r0, r6
 80065c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065c8:	bfba      	itte	lt
 80065ca:	461c      	movlt	r4, r3
 80065cc:	2501      	movlt	r5, #1
 80065ce:	2500      	movge	r5, #0
 80065d0:	f7ff fd48 	bl	8006064 <_Balloc>
 80065d4:	4602      	mov	r2, r0
 80065d6:	b918      	cbnz	r0, 80065e0 <__mdiff+0x60>
 80065d8:	f240 2145 	movw	r1, #581	@ 0x245
 80065dc:	4b30      	ldr	r3, [pc, #192]	@ (80066a0 <__mdiff+0x120>)
 80065de:	e7e3      	b.n	80065a8 <__mdiff+0x28>
 80065e0:	f100 0b14 	add.w	fp, r0, #20
 80065e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065e8:	f109 0310 	add.w	r3, r9, #16
 80065ec:	60c5      	str	r5, [r0, #12]
 80065ee:	f04f 0c00 	mov.w	ip, #0
 80065f2:	f109 0514 	add.w	r5, r9, #20
 80065f6:	46d9      	mov	r9, fp
 80065f8:	6926      	ldr	r6, [r4, #16]
 80065fa:	f104 0e14 	add.w	lr, r4, #20
 80065fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006602:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800660e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006612:	b281      	uxth	r1, r0
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	fa1f f38a 	uxth.w	r3, sl
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	0c00      	lsrs	r0, r0, #16
 800661e:	4463      	add	r3, ip
 8006620:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006624:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800662e:	4576      	cmp	r6, lr
 8006630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006634:	f849 3b04 	str.w	r3, [r9], #4
 8006638:	d8e6      	bhi.n	8006608 <__mdiff+0x88>
 800663a:	1b33      	subs	r3, r6, r4
 800663c:	3b15      	subs	r3, #21
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	3415      	adds	r4, #21
 8006644:	3304      	adds	r3, #4
 8006646:	42a6      	cmp	r6, r4
 8006648:	bf38      	it	cc
 800664a:	2304      	movcc	r3, #4
 800664c:	441d      	add	r5, r3
 800664e:	445b      	add	r3, fp
 8006650:	461e      	mov	r6, r3
 8006652:	462c      	mov	r4, r5
 8006654:	4544      	cmp	r4, r8
 8006656:	d30e      	bcc.n	8006676 <__mdiff+0xf6>
 8006658:	f108 0103 	add.w	r1, r8, #3
 800665c:	1b49      	subs	r1, r1, r5
 800665e:	f021 0103 	bic.w	r1, r1, #3
 8006662:	3d03      	subs	r5, #3
 8006664:	45a8      	cmp	r8, r5
 8006666:	bf38      	it	cc
 8006668:	2100      	movcc	r1, #0
 800666a:	440b      	add	r3, r1
 800666c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006670:	b199      	cbz	r1, 800669a <__mdiff+0x11a>
 8006672:	6117      	str	r7, [r2, #16]
 8006674:	e79e      	b.n	80065b4 <__mdiff+0x34>
 8006676:	46e6      	mov	lr, ip
 8006678:	f854 1b04 	ldr.w	r1, [r4], #4
 800667c:	fa1f fc81 	uxth.w	ip, r1
 8006680:	44f4      	add	ip, lr
 8006682:	0c08      	lsrs	r0, r1, #16
 8006684:	4471      	add	r1, lr
 8006686:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800668a:	b289      	uxth	r1, r1
 800668c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006694:	f846 1b04 	str.w	r1, [r6], #4
 8006698:	e7dc      	b.n	8006654 <__mdiff+0xd4>
 800669a:	3f01      	subs	r7, #1
 800669c:	e7e6      	b.n	800666c <__mdiff+0xec>
 800669e:	bf00      	nop
 80066a0:	0800756e 	.word	0x0800756e
 80066a4:	0800757f 	.word	0x0800757f

080066a8 <__d2b>:
 80066a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80066ac:	2101      	movs	r1, #1
 80066ae:	4690      	mov	r8, r2
 80066b0:	4699      	mov	r9, r3
 80066b2:	9e08      	ldr	r6, [sp, #32]
 80066b4:	f7ff fcd6 	bl	8006064 <_Balloc>
 80066b8:	4604      	mov	r4, r0
 80066ba:	b930      	cbnz	r0, 80066ca <__d2b+0x22>
 80066bc:	4602      	mov	r2, r0
 80066be:	f240 310f 	movw	r1, #783	@ 0x30f
 80066c2:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <__d2b+0xa8>)
 80066c4:	4823      	ldr	r0, [pc, #140]	@ (8006754 <__d2b+0xac>)
 80066c6:	f000 fa7f 	bl	8006bc8 <__assert_func>
 80066ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066d2:	b10d      	cbz	r5, 80066d8 <__d2b+0x30>
 80066d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	f1b8 0300 	subs.w	r3, r8, #0
 80066de:	d024      	beq.n	800672a <__d2b+0x82>
 80066e0:	4668      	mov	r0, sp
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	f7ff fd85 	bl	80061f2 <__lo0bits>
 80066e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066ec:	b1d8      	cbz	r0, 8006726 <__d2b+0x7e>
 80066ee:	f1c0 0320 	rsb	r3, r0, #32
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	430b      	orrs	r3, r1
 80066f8:	40c2      	lsrs	r2, r0
 80066fa:	6163      	str	r3, [r4, #20]
 80066fc:	9201      	str	r2, [sp, #4]
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2201      	moveq	r2, #1
 8006706:	2202      	movne	r2, #2
 8006708:	61a3      	str	r3, [r4, #24]
 800670a:	6122      	str	r2, [r4, #16]
 800670c:	b1ad      	cbz	r5, 800673a <__d2b+0x92>
 800670e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006712:	4405      	add	r5, r0
 8006714:	6035      	str	r5, [r6, #0]
 8006716:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800671a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671c:	6018      	str	r0, [r3, #0]
 800671e:	4620      	mov	r0, r4
 8006720:	b002      	add	sp, #8
 8006722:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006726:	6161      	str	r1, [r4, #20]
 8006728:	e7e9      	b.n	80066fe <__d2b+0x56>
 800672a:	a801      	add	r0, sp, #4
 800672c:	f7ff fd61 	bl	80061f2 <__lo0bits>
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	6163      	str	r3, [r4, #20]
 8006736:	3020      	adds	r0, #32
 8006738:	e7e7      	b.n	800670a <__d2b+0x62>
 800673a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800673e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006742:	6030      	str	r0, [r6, #0]
 8006744:	6918      	ldr	r0, [r3, #16]
 8006746:	f7ff fd35 	bl	80061b4 <__hi0bits>
 800674a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800674e:	e7e4      	b.n	800671a <__d2b+0x72>
 8006750:	0800756e 	.word	0x0800756e
 8006754:	0800757f 	.word	0x0800757f

08006758 <__ssputs_r>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	461f      	mov	r7, r3
 800675e:	688e      	ldr	r6, [r1, #8]
 8006760:	4682      	mov	sl, r0
 8006762:	42be      	cmp	r6, r7
 8006764:	460c      	mov	r4, r1
 8006766:	4690      	mov	r8, r2
 8006768:	680b      	ldr	r3, [r1, #0]
 800676a:	d82d      	bhi.n	80067c8 <__ssputs_r+0x70>
 800676c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006774:	d026      	beq.n	80067c4 <__ssputs_r+0x6c>
 8006776:	6965      	ldr	r5, [r4, #20]
 8006778:	6909      	ldr	r1, [r1, #16]
 800677a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800677e:	eba3 0901 	sub.w	r9, r3, r1
 8006782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006786:	1c7b      	adds	r3, r7, #1
 8006788:	444b      	add	r3, r9
 800678a:	106d      	asrs	r5, r5, #1
 800678c:	429d      	cmp	r5, r3
 800678e:	bf38      	it	cc
 8006790:	461d      	movcc	r5, r3
 8006792:	0553      	lsls	r3, r2, #21
 8006794:	d527      	bpl.n	80067e6 <__ssputs_r+0x8e>
 8006796:	4629      	mov	r1, r5
 8006798:	f7ff fbd8 	bl	8005f4c <_malloc_r>
 800679c:	4606      	mov	r6, r0
 800679e:	b360      	cbz	r0, 80067fa <__ssputs_r+0xa2>
 80067a0:	464a      	mov	r2, r9
 80067a2:	6921      	ldr	r1, [r4, #16]
 80067a4:	f000 fa02 	bl	8006bac <memcpy>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	6126      	str	r6, [r4, #16]
 80067b6:	444e      	add	r6, r9
 80067b8:	6026      	str	r6, [r4, #0]
 80067ba:	463e      	mov	r6, r7
 80067bc:	6165      	str	r5, [r4, #20]
 80067be:	eba5 0509 	sub.w	r5, r5, r9
 80067c2:	60a5      	str	r5, [r4, #8]
 80067c4:	42be      	cmp	r6, r7
 80067c6:	d900      	bls.n	80067ca <__ssputs_r+0x72>
 80067c8:	463e      	mov	r6, r7
 80067ca:	4632      	mov	r2, r6
 80067cc:	4641      	mov	r1, r8
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	f000 f9c2 	bl	8006b58 <memmove>
 80067d4:	2000      	movs	r0, #0
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	1b9b      	subs	r3, r3, r6
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	4433      	add	r3, r6
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e6:	462a      	mov	r2, r5
 80067e8:	f000 fa32 	bl	8006c50 <_realloc_r>
 80067ec:	4606      	mov	r6, r0
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1e0      	bne.n	80067b4 <__ssputs_r+0x5c>
 80067f2:	4650      	mov	r0, sl
 80067f4:	6921      	ldr	r1, [r4, #16]
 80067f6:	f7ff fb37 	bl	8005e68 <_free_r>
 80067fa:	230c      	movs	r3, #12
 80067fc:	f8ca 3000 	str.w	r3, [sl]
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	e7e9      	b.n	80067e2 <__ssputs_r+0x8a>
	...

08006810 <_svfiprintf_r>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	4698      	mov	r8, r3
 8006816:	898b      	ldrh	r3, [r1, #12]
 8006818:	4607      	mov	r7, r0
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	460d      	mov	r5, r1
 800681e:	4614      	mov	r4, r2
 8006820:	b09d      	sub	sp, #116	@ 0x74
 8006822:	d510      	bpl.n	8006846 <_svfiprintf_r+0x36>
 8006824:	690b      	ldr	r3, [r1, #16]
 8006826:	b973      	cbnz	r3, 8006846 <_svfiprintf_r+0x36>
 8006828:	2140      	movs	r1, #64	@ 0x40
 800682a:	f7ff fb8f 	bl	8005f4c <_malloc_r>
 800682e:	6028      	str	r0, [r5, #0]
 8006830:	6128      	str	r0, [r5, #16]
 8006832:	b930      	cbnz	r0, 8006842 <_svfiprintf_r+0x32>
 8006834:	230c      	movs	r3, #12
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800683c:	b01d      	add	sp, #116	@ 0x74
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	2340      	movs	r3, #64	@ 0x40
 8006844:	616b      	str	r3, [r5, #20]
 8006846:	2300      	movs	r3, #0
 8006848:	9309      	str	r3, [sp, #36]	@ 0x24
 800684a:	2320      	movs	r3, #32
 800684c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006850:	2330      	movs	r3, #48	@ 0x30
 8006852:	f04f 0901 	mov.w	r9, #1
 8006856:	f8cd 800c 	str.w	r8, [sp, #12]
 800685a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069f4 <_svfiprintf_r+0x1e4>
 800685e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006862:	4623      	mov	r3, r4
 8006864:	469a      	mov	sl, r3
 8006866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686a:	b10a      	cbz	r2, 8006870 <_svfiprintf_r+0x60>
 800686c:	2a25      	cmp	r2, #37	@ 0x25
 800686e:	d1f9      	bne.n	8006864 <_svfiprintf_r+0x54>
 8006870:	ebba 0b04 	subs.w	fp, sl, r4
 8006874:	d00b      	beq.n	800688e <_svfiprintf_r+0x7e>
 8006876:	465b      	mov	r3, fp
 8006878:	4622      	mov	r2, r4
 800687a:	4629      	mov	r1, r5
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ff6b 	bl	8006758 <__ssputs_r>
 8006882:	3001      	adds	r0, #1
 8006884:	f000 80a7 	beq.w	80069d6 <_svfiprintf_r+0x1c6>
 8006888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688a:	445a      	add	r2, fp
 800688c:	9209      	str	r2, [sp, #36]	@ 0x24
 800688e:	f89a 3000 	ldrb.w	r3, [sl]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 809f 	beq.w	80069d6 <_svfiprintf_r+0x1c6>
 8006898:	2300      	movs	r3, #0
 800689a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800689e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a2:	f10a 0a01 	add.w	sl, sl, #1
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b0:	4654      	mov	r4, sl
 80068b2:	2205      	movs	r2, #5
 80068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b8:	484e      	ldr	r0, [pc, #312]	@ (80069f4 <_svfiprintf_r+0x1e4>)
 80068ba:	f7fe fc6a 	bl	8005192 <memchr>
 80068be:	9a04      	ldr	r2, [sp, #16]
 80068c0:	b9d8      	cbnz	r0, 80068fa <_svfiprintf_r+0xea>
 80068c2:	06d0      	lsls	r0, r2, #27
 80068c4:	bf44      	itt	mi
 80068c6:	2320      	movmi	r3, #32
 80068c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068cc:	0711      	lsls	r1, r2, #28
 80068ce:	bf44      	itt	mi
 80068d0:	232b      	movmi	r3, #43	@ 0x2b
 80068d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d6:	f89a 3000 	ldrb.w	r3, [sl]
 80068da:	2b2a      	cmp	r3, #42	@ 0x2a
 80068dc:	d015      	beq.n	800690a <_svfiprintf_r+0xfa>
 80068de:	4654      	mov	r4, sl
 80068e0:	2000      	movs	r0, #0
 80068e2:	f04f 0c0a 	mov.w	ip, #10
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4621      	mov	r1, r4
 80068ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ee:	3b30      	subs	r3, #48	@ 0x30
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d94b      	bls.n	800698c <_svfiprintf_r+0x17c>
 80068f4:	b1b0      	cbz	r0, 8006924 <_svfiprintf_r+0x114>
 80068f6:	9207      	str	r2, [sp, #28]
 80068f8:	e014      	b.n	8006924 <_svfiprintf_r+0x114>
 80068fa:	eba0 0308 	sub.w	r3, r0, r8
 80068fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006902:	4313      	orrs	r3, r2
 8006904:	46a2      	mov	sl, r4
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	e7d2      	b.n	80068b0 <_svfiprintf_r+0xa0>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	1d19      	adds	r1, r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	9103      	str	r1, [sp, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfbb      	ittet	lt
 8006916:	425b      	neglt	r3, r3
 8006918:	f042 0202 	orrlt.w	r2, r2, #2
 800691c:	9307      	strge	r3, [sp, #28]
 800691e:	9307      	strlt	r3, [sp, #28]
 8006920:	bfb8      	it	lt
 8006922:	9204      	strlt	r2, [sp, #16]
 8006924:	7823      	ldrb	r3, [r4, #0]
 8006926:	2b2e      	cmp	r3, #46	@ 0x2e
 8006928:	d10a      	bne.n	8006940 <_svfiprintf_r+0x130>
 800692a:	7863      	ldrb	r3, [r4, #1]
 800692c:	2b2a      	cmp	r3, #42	@ 0x2a
 800692e:	d132      	bne.n	8006996 <_svfiprintf_r+0x186>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	3402      	adds	r4, #2
 8006934:	1d1a      	adds	r2, r3, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	9203      	str	r2, [sp, #12]
 800693a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800693e:	9305      	str	r3, [sp, #20]
 8006940:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069f8 <_svfiprintf_r+0x1e8>
 8006944:	2203      	movs	r2, #3
 8006946:	4650      	mov	r0, sl
 8006948:	7821      	ldrb	r1, [r4, #0]
 800694a:	f7fe fc22 	bl	8005192 <memchr>
 800694e:	b138      	cbz	r0, 8006960 <_svfiprintf_r+0x150>
 8006950:	2240      	movs	r2, #64	@ 0x40
 8006952:	9b04      	ldr	r3, [sp, #16]
 8006954:	eba0 000a 	sub.w	r0, r0, sl
 8006958:	4082      	lsls	r2, r0
 800695a:	4313      	orrs	r3, r2
 800695c:	3401      	adds	r4, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	2206      	movs	r2, #6
 8006966:	4825      	ldr	r0, [pc, #148]	@ (80069fc <_svfiprintf_r+0x1ec>)
 8006968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800696c:	f7fe fc11 	bl	8005192 <memchr>
 8006970:	2800      	cmp	r0, #0
 8006972:	d036      	beq.n	80069e2 <_svfiprintf_r+0x1d2>
 8006974:	4b22      	ldr	r3, [pc, #136]	@ (8006a00 <_svfiprintf_r+0x1f0>)
 8006976:	bb1b      	cbnz	r3, 80069c0 <_svfiprintf_r+0x1b0>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	3307      	adds	r3, #7
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	3308      	adds	r3, #8
 8006982:	9303      	str	r3, [sp, #12]
 8006984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006986:	4433      	add	r3, r6
 8006988:	9309      	str	r3, [sp, #36]	@ 0x24
 800698a:	e76a      	b.n	8006862 <_svfiprintf_r+0x52>
 800698c:	460c      	mov	r4, r1
 800698e:	2001      	movs	r0, #1
 8006990:	fb0c 3202 	mla	r2, ip, r2, r3
 8006994:	e7a8      	b.n	80068e8 <_svfiprintf_r+0xd8>
 8006996:	2300      	movs	r3, #0
 8006998:	f04f 0c0a 	mov.w	ip, #10
 800699c:	4619      	mov	r1, r3
 800699e:	3401      	adds	r4, #1
 80069a0:	9305      	str	r3, [sp, #20]
 80069a2:	4620      	mov	r0, r4
 80069a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a8:	3a30      	subs	r2, #48	@ 0x30
 80069aa:	2a09      	cmp	r2, #9
 80069ac:	d903      	bls.n	80069b6 <_svfiprintf_r+0x1a6>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0c6      	beq.n	8006940 <_svfiprintf_r+0x130>
 80069b2:	9105      	str	r1, [sp, #20]
 80069b4:	e7c4      	b.n	8006940 <_svfiprintf_r+0x130>
 80069b6:	4604      	mov	r4, r0
 80069b8:	2301      	movs	r3, #1
 80069ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80069be:	e7f0      	b.n	80069a2 <_svfiprintf_r+0x192>
 80069c0:	ab03      	add	r3, sp, #12
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4638      	mov	r0, r7
 80069c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <_svfiprintf_r+0x1f4>)
 80069ca:	a904      	add	r1, sp, #16
 80069cc:	f7fd fe7e 	bl	80046cc <_printf_float>
 80069d0:	1c42      	adds	r2, r0, #1
 80069d2:	4606      	mov	r6, r0
 80069d4:	d1d6      	bne.n	8006984 <_svfiprintf_r+0x174>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	065b      	lsls	r3, r3, #25
 80069da:	f53f af2d 	bmi.w	8006838 <_svfiprintf_r+0x28>
 80069de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069e0:	e72c      	b.n	800683c <_svfiprintf_r+0x2c>
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	462a      	mov	r2, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <_svfiprintf_r+0x1f4>)
 80069ec:	a904      	add	r1, sp, #16
 80069ee:	f7fe f90b 	bl	8004c08 <_printf_i>
 80069f2:	e7ed      	b.n	80069d0 <_svfiprintf_r+0x1c0>
 80069f4:	080075d8 	.word	0x080075d8
 80069f8:	080075de 	.word	0x080075de
 80069fc:	080075e2 	.word	0x080075e2
 8006a00:	080046cd 	.word	0x080046cd
 8006a04:	08006759 	.word	0x08006759

08006a08 <__sflush_r>:
 8006a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	0716      	lsls	r6, r2, #28
 8006a10:	4605      	mov	r5, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	d454      	bmi.n	8006ac0 <__sflush_r+0xb8>
 8006a16:	684b      	ldr	r3, [r1, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dc02      	bgt.n	8006a22 <__sflush_r+0x1a>
 8006a1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dd48      	ble.n	8006ab4 <__sflush_r+0xac>
 8006a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	d045      	beq.n	8006ab4 <__sflush_r+0xac>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a2e:	682f      	ldr	r7, [r5, #0]
 8006a30:	6a21      	ldr	r1, [r4, #32]
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	d030      	beq.n	8006a98 <__sflush_r+0x90>
 8006a36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	0759      	lsls	r1, r3, #29
 8006a3c:	d505      	bpl.n	8006a4a <__sflush_r+0x42>
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	1ad2      	subs	r2, r2, r3
 8006a42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a44:	b10b      	cbz	r3, 8006a4a <__sflush_r+0x42>
 8006a46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a48:	1ad2      	subs	r2, r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	47b0      	blx	r6
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	d106      	bne.n	8006a68 <__sflush_r+0x60>
 8006a5a:	6829      	ldr	r1, [r5, #0]
 8006a5c:	291d      	cmp	r1, #29
 8006a5e:	d82b      	bhi.n	8006ab8 <__sflush_r+0xb0>
 8006a60:	4a28      	ldr	r2, [pc, #160]	@ (8006b04 <__sflush_r+0xfc>)
 8006a62:	40ca      	lsrs	r2, r1
 8006a64:	07d6      	lsls	r6, r2, #31
 8006a66:	d527      	bpl.n	8006ab8 <__sflush_r+0xb0>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	6062      	str	r2, [r4, #4]
 8006a6c:	6922      	ldr	r2, [r4, #16]
 8006a6e:	04d9      	lsls	r1, r3, #19
 8006a70:	6022      	str	r2, [r4, #0]
 8006a72:	d504      	bpl.n	8006a7e <__sflush_r+0x76>
 8006a74:	1c42      	adds	r2, r0, #1
 8006a76:	d101      	bne.n	8006a7c <__sflush_r+0x74>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b903      	cbnz	r3, 8006a7e <__sflush_r+0x76>
 8006a7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a80:	602f      	str	r7, [r5, #0]
 8006a82:	b1b9      	cbz	r1, 8006ab4 <__sflush_r+0xac>
 8006a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	d002      	beq.n	8006a92 <__sflush_r+0x8a>
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff f9eb 	bl	8005e68 <_free_r>
 8006a92:	2300      	movs	r3, #0
 8006a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a96:	e00d      	b.n	8006ab4 <__sflush_r+0xac>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b0      	blx	r6
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	1c50      	adds	r0, r2, #1
 8006aa2:	d1c9      	bne.n	8006a38 <__sflush_r+0x30>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0c6      	beq.n	8006a38 <__sflush_r+0x30>
 8006aaa:	2b1d      	cmp	r3, #29
 8006aac:	d001      	beq.n	8006ab2 <__sflush_r+0xaa>
 8006aae:	2b16      	cmp	r3, #22
 8006ab0:	d11d      	bne.n	8006aee <__sflush_r+0xe6>
 8006ab2:	602f      	str	r7, [r5, #0]
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e021      	b.n	8006afc <__sflush_r+0xf4>
 8006ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006abc:	b21b      	sxth	r3, r3
 8006abe:	e01a      	b.n	8006af6 <__sflush_r+0xee>
 8006ac0:	690f      	ldr	r7, [r1, #16]
 8006ac2:	2f00      	cmp	r7, #0
 8006ac4:	d0f6      	beq.n	8006ab4 <__sflush_r+0xac>
 8006ac6:	0793      	lsls	r3, r2, #30
 8006ac8:	bf18      	it	ne
 8006aca:	2300      	movne	r3, #0
 8006acc:	680e      	ldr	r6, [r1, #0]
 8006ace:	bf08      	it	eq
 8006ad0:	694b      	ldreq	r3, [r1, #20]
 8006ad2:	1bf6      	subs	r6, r6, r7
 8006ad4:	600f      	str	r7, [r1, #0]
 8006ad6:	608b      	str	r3, [r1, #8]
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	ddeb      	ble.n	8006ab4 <__sflush_r+0xac>
 8006adc:	4633      	mov	r3, r6
 8006ade:	463a      	mov	r2, r7
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	6a21      	ldr	r1, [r4, #32]
 8006ae4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ae8:	47e0      	blx	ip
 8006aea:	2800      	cmp	r0, #0
 8006aec:	dc07      	bgt.n	8006afe <__sflush_r+0xf6>
 8006aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afe:	4407      	add	r7, r0
 8006b00:	1a36      	subs	r6, r6, r0
 8006b02:	e7e9      	b.n	8006ad8 <__sflush_r+0xd0>
 8006b04:	20400001 	.word	0x20400001

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7fe fa1d 	bl	8004f5c <__sinit>
 8006b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f3      	beq.n	8006b12 <_fflush_r+0xa>
 8006b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d404      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b30:	0599      	lsls	r1, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b36:	f7fe fb2a 	bl	800518e <__retarget_lock_acquire_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f7ff ff63 	bl	8006a08 <__sflush_r>
 8006b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b44:	4605      	mov	r5, r0
 8006b46:	07da      	lsls	r2, r3, #31
 8006b48:	d4e4      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d4e1      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f7fe fb1d 	bl	8005190 <__retarget_lock_release_recursive>
 8006b56:	e7dd      	b.n	8006b14 <_fflush_r+0xc>

08006b58 <memmove>:
 8006b58:	4288      	cmp	r0, r1
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	eb01 0402 	add.w	r4, r1, r2
 8006b60:	d902      	bls.n	8006b68 <memmove+0x10>
 8006b62:	4284      	cmp	r4, r0
 8006b64:	4623      	mov	r3, r4
 8006b66:	d807      	bhi.n	8006b78 <memmove+0x20>
 8006b68:	1e43      	subs	r3, r0, #1
 8006b6a:	42a1      	cmp	r1, r4
 8006b6c:	d008      	beq.n	8006b80 <memmove+0x28>
 8006b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b76:	e7f8      	b.n	8006b6a <memmove+0x12>
 8006b78:	4601      	mov	r1, r0
 8006b7a:	4402      	add	r2, r0
 8006b7c:	428a      	cmp	r2, r1
 8006b7e:	d100      	bne.n	8006b82 <memmove+0x2a>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b8a:	e7f7      	b.n	8006b7c <memmove+0x24>

08006b8c <_sbrk_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4d05      	ldr	r5, [pc, #20]	@ (8006ba8 <_sbrk_r+0x1c>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7fb f800 	bl	8001b9c <_sbrk>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_sbrk_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_sbrk_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	20000508 	.word	0x20000508

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <__assert_func>:
 8006bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <__assert_func+0x2c>)
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68d8      	ldr	r0, [r3, #12]
 8006bd6:	b14c      	cbz	r4, 8006bec <__assert_func+0x24>
 8006bd8:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <__assert_func+0x30>)
 8006bda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bde:	9100      	str	r1, [sp, #0]
 8006be0:	462b      	mov	r3, r5
 8006be2:	4906      	ldr	r1, [pc, #24]	@ (8006bfc <__assert_func+0x34>)
 8006be4:	f000 f870 	bl	8006cc8 <fiprintf>
 8006be8:	f000 f880 	bl	8006cec <abort>
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <__assert_func+0x38>)
 8006bee:	461c      	mov	r4, r3
 8006bf0:	e7f3      	b.n	8006bda <__assert_func+0x12>
 8006bf2:	bf00      	nop
 8006bf4:	20000018 	.word	0x20000018
 8006bf8:	080075f3 	.word	0x080075f3
 8006bfc:	08007600 	.word	0x08007600
 8006c00:	0800762e 	.word	0x0800762e

08006c04 <_calloc_r>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	fba1 5402 	umull	r5, r4, r1, r2
 8006c0a:	b934      	cbnz	r4, 8006c1a <_calloc_r+0x16>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7ff f99d 	bl	8005f4c <_malloc_r>
 8006c12:	4606      	mov	r6, r0
 8006c14:	b928      	cbnz	r0, 8006c22 <_calloc_r+0x1e>
 8006c16:	4630      	mov	r0, r6
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	6002      	str	r2, [r0, #0]
 8006c20:	e7f9      	b.n	8006c16 <_calloc_r+0x12>
 8006c22:	462a      	mov	r2, r5
 8006c24:	4621      	mov	r1, r4
 8006c26:	f7fe fa34 	bl	8005092 <memset>
 8006c2a:	e7f4      	b.n	8006c16 <_calloc_r+0x12>

08006c2c <__ascii_mbtowc>:
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	b901      	cbnz	r1, 8006c32 <__ascii_mbtowc+0x6>
 8006c30:	a901      	add	r1, sp, #4
 8006c32:	b142      	cbz	r2, 8006c46 <__ascii_mbtowc+0x1a>
 8006c34:	b14b      	cbz	r3, 8006c4a <__ascii_mbtowc+0x1e>
 8006c36:	7813      	ldrb	r3, [r2, #0]
 8006c38:	600b      	str	r3, [r1, #0]
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	1e10      	subs	r0, r2, #0
 8006c3e:	bf18      	it	ne
 8006c40:	2001      	movne	r0, #1
 8006c42:	b002      	add	sp, #8
 8006c44:	4770      	bx	lr
 8006c46:	4610      	mov	r0, r2
 8006c48:	e7fb      	b.n	8006c42 <__ascii_mbtowc+0x16>
 8006c4a:	f06f 0001 	mvn.w	r0, #1
 8006c4e:	e7f8      	b.n	8006c42 <__ascii_mbtowc+0x16>

08006c50 <_realloc_r>:
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	4607      	mov	r7, r0
 8006c56:	4614      	mov	r4, r2
 8006c58:	460d      	mov	r5, r1
 8006c5a:	b921      	cbnz	r1, 8006c66 <_realloc_r+0x16>
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c62:	f7ff b973 	b.w	8005f4c <_malloc_r>
 8006c66:	b92a      	cbnz	r2, 8006c74 <_realloc_r+0x24>
 8006c68:	f7ff f8fe 	bl	8005e68 <_free_r>
 8006c6c:	4625      	mov	r5, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	f000 f841 	bl	8006cfa <_malloc_usable_size_r>
 8006c78:	4284      	cmp	r4, r0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	d802      	bhi.n	8006c84 <_realloc_r+0x34>
 8006c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c82:	d8f4      	bhi.n	8006c6e <_realloc_r+0x1e>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4638      	mov	r0, r7
 8006c88:	f7ff f960 	bl	8005f4c <_malloc_r>
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	b908      	cbnz	r0, 8006c94 <_realloc_r+0x44>
 8006c90:	4645      	mov	r5, r8
 8006c92:	e7ec      	b.n	8006c6e <_realloc_r+0x1e>
 8006c94:	42b4      	cmp	r4, r6
 8006c96:	4622      	mov	r2, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	bf28      	it	cs
 8006c9c:	4632      	movcs	r2, r6
 8006c9e:	f7ff ff85 	bl	8006bac <memcpy>
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff f8df 	bl	8005e68 <_free_r>
 8006caa:	e7f1      	b.n	8006c90 <_realloc_r+0x40>

08006cac <__ascii_wctomb>:
 8006cac:	4603      	mov	r3, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	b141      	cbz	r1, 8006cc4 <__ascii_wctomb+0x18>
 8006cb2:	2aff      	cmp	r2, #255	@ 0xff
 8006cb4:	d904      	bls.n	8006cc0 <__ascii_wctomb+0x14>
 8006cb6:	228a      	movs	r2, #138	@ 0x8a
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	4770      	bx	lr
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	700a      	strb	r2, [r1, #0]
 8006cc4:	4770      	bx	lr
	...

08006cc8 <fiprintf>:
 8006cc8:	b40e      	push	{r1, r2, r3}
 8006cca:	b503      	push	{r0, r1, lr}
 8006ccc:	4601      	mov	r1, r0
 8006cce:	ab03      	add	r3, sp, #12
 8006cd0:	4805      	ldr	r0, [pc, #20]	@ (8006ce8 <fiprintf+0x20>)
 8006cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd6:	6800      	ldr	r0, [r0, #0]
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	f000 f83d 	bl	8006d58 <_vfiprintf_r>
 8006cde:	b002      	add	sp, #8
 8006ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce4:	b003      	add	sp, #12
 8006ce6:	4770      	bx	lr
 8006ce8:	20000018 	.word	0x20000018

08006cec <abort>:
 8006cec:	2006      	movs	r0, #6
 8006cee:	b508      	push	{r3, lr}
 8006cf0:	f000 fa06 	bl	8007100 <raise>
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f7fa fedc 	bl	8001ab2 <_exit>

08006cfa <_malloc_usable_size_r>:
 8006cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfe:	1f18      	subs	r0, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfbc      	itt	lt
 8006d04:	580b      	ldrlt	r3, [r1, r0]
 8006d06:	18c0      	addlt	r0, r0, r3
 8006d08:	4770      	bx	lr

08006d0a <__sfputc_r>:
 8006d0a:	6893      	ldr	r3, [r2, #8]
 8006d0c:	b410      	push	{r4}
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	6093      	str	r3, [r2, #8]
 8006d14:	da07      	bge.n	8006d26 <__sfputc_r+0x1c>
 8006d16:	6994      	ldr	r4, [r2, #24]
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	db01      	blt.n	8006d20 <__sfputc_r+0x16>
 8006d1c:	290a      	cmp	r1, #10
 8006d1e:	d102      	bne.n	8006d26 <__sfputc_r+0x1c>
 8006d20:	bc10      	pop	{r4}
 8006d22:	f000 b931 	b.w	8006f88 <__swbuf_r>
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	1c58      	adds	r0, r3, #1
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	7019      	strb	r1, [r3, #0]
 8006d2e:	4608      	mov	r0, r1
 8006d30:	bc10      	pop	{r4}
 8006d32:	4770      	bx	lr

08006d34 <__sfputs_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	18d5      	adds	r5, r2, r3
 8006d3e:	42ac      	cmp	r4, r5
 8006d40:	d101      	bne.n	8006d46 <__sfputs_r+0x12>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e007      	b.n	8006d56 <__sfputs_r+0x22>
 8006d46:	463a      	mov	r2, r7
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4e:	f7ff ffdc 	bl	8006d0a <__sfputc_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d1f3      	bne.n	8006d3e <__sfputs_r+0xa>
 8006d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d58 <_vfiprintf_r>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	4614      	mov	r4, r2
 8006d60:	4698      	mov	r8, r3
 8006d62:	4606      	mov	r6, r0
 8006d64:	b09d      	sub	sp, #116	@ 0x74
 8006d66:	b118      	cbz	r0, 8006d70 <_vfiprintf_r+0x18>
 8006d68:	6a03      	ldr	r3, [r0, #32]
 8006d6a:	b90b      	cbnz	r3, 8006d70 <_vfiprintf_r+0x18>
 8006d6c:	f7fe f8f6 	bl	8004f5c <__sinit>
 8006d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d72:	07d9      	lsls	r1, r3, #31
 8006d74:	d405      	bmi.n	8006d82 <_vfiprintf_r+0x2a>
 8006d76:	89ab      	ldrh	r3, [r5, #12]
 8006d78:	059a      	lsls	r2, r3, #22
 8006d7a:	d402      	bmi.n	8006d82 <_vfiprintf_r+0x2a>
 8006d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d7e:	f7fe fa06 	bl	800518e <__retarget_lock_acquire_recursive>
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	071b      	lsls	r3, r3, #28
 8006d86:	d501      	bpl.n	8006d8c <_vfiprintf_r+0x34>
 8006d88:	692b      	ldr	r3, [r5, #16]
 8006d8a:	b99b      	cbnz	r3, 8006db4 <_vfiprintf_r+0x5c>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 f938 	bl	8007004 <__swsetup_r>
 8006d94:	b170      	cbz	r0, 8006db4 <_vfiprintf_r+0x5c>
 8006d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d98:	07dc      	lsls	r4, r3, #31
 8006d9a:	d504      	bpl.n	8006da6 <_vfiprintf_r+0x4e>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da0:	b01d      	add	sp, #116	@ 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	89ab      	ldrh	r3, [r5, #12]
 8006da8:	0598      	lsls	r0, r3, #22
 8006daa:	d4f7      	bmi.n	8006d9c <_vfiprintf_r+0x44>
 8006dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dae:	f7fe f9ef 	bl	8005190 <__retarget_lock_release_recursive>
 8006db2:	e7f3      	b.n	8006d9c <_vfiprintf_r+0x44>
 8006db4:	2300      	movs	r3, #0
 8006db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db8:	2320      	movs	r3, #32
 8006dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dbe:	2330      	movs	r3, #48	@ 0x30
 8006dc0:	f04f 0901 	mov.w	r9, #1
 8006dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f74 <_vfiprintf_r+0x21c>
 8006dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dd0:	4623      	mov	r3, r4
 8006dd2:	469a      	mov	sl, r3
 8006dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd8:	b10a      	cbz	r2, 8006dde <_vfiprintf_r+0x86>
 8006dda:	2a25      	cmp	r2, #37	@ 0x25
 8006ddc:	d1f9      	bne.n	8006dd2 <_vfiprintf_r+0x7a>
 8006dde:	ebba 0b04 	subs.w	fp, sl, r4
 8006de2:	d00b      	beq.n	8006dfc <_vfiprintf_r+0xa4>
 8006de4:	465b      	mov	r3, fp
 8006de6:	4622      	mov	r2, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff ffa2 	bl	8006d34 <__sfputs_r>
 8006df0:	3001      	adds	r0, #1
 8006df2:	f000 80a7 	beq.w	8006f44 <_vfiprintf_r+0x1ec>
 8006df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df8:	445a      	add	r2, fp
 8006dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 809f 	beq.w	8006f44 <_vfiprintf_r+0x1ec>
 8006e06:	2300      	movs	r3, #0
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e10:	f10a 0a01 	add.w	sl, sl, #1
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e1e:	4654      	mov	r4, sl
 8006e20:	2205      	movs	r2, #5
 8006e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e26:	4853      	ldr	r0, [pc, #332]	@ (8006f74 <_vfiprintf_r+0x21c>)
 8006e28:	f7fe f9b3 	bl	8005192 <memchr>
 8006e2c:	9a04      	ldr	r2, [sp, #16]
 8006e2e:	b9d8      	cbnz	r0, 8006e68 <_vfiprintf_r+0x110>
 8006e30:	06d1      	lsls	r1, r2, #27
 8006e32:	bf44      	itt	mi
 8006e34:	2320      	movmi	r3, #32
 8006e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3a:	0713      	lsls	r3, r2, #28
 8006e3c:	bf44      	itt	mi
 8006e3e:	232b      	movmi	r3, #43	@ 0x2b
 8006e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e44:	f89a 3000 	ldrb.w	r3, [sl]
 8006e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e4a:	d015      	beq.n	8006e78 <_vfiprintf_r+0x120>
 8006e4c:	4654      	mov	r4, sl
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f04f 0c0a 	mov.w	ip, #10
 8006e54:	9a07      	ldr	r2, [sp, #28]
 8006e56:	4621      	mov	r1, r4
 8006e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e5c:	3b30      	subs	r3, #48	@ 0x30
 8006e5e:	2b09      	cmp	r3, #9
 8006e60:	d94b      	bls.n	8006efa <_vfiprintf_r+0x1a2>
 8006e62:	b1b0      	cbz	r0, 8006e92 <_vfiprintf_r+0x13a>
 8006e64:	9207      	str	r2, [sp, #28]
 8006e66:	e014      	b.n	8006e92 <_vfiprintf_r+0x13a>
 8006e68:	eba0 0308 	sub.w	r3, r0, r8
 8006e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	46a2      	mov	sl, r4
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	e7d2      	b.n	8006e1e <_vfiprintf_r+0xc6>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	1d19      	adds	r1, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	9103      	str	r1, [sp, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bfbb      	ittet	lt
 8006e84:	425b      	neglt	r3, r3
 8006e86:	f042 0202 	orrlt.w	r2, r2, #2
 8006e8a:	9307      	strge	r3, [sp, #28]
 8006e8c:	9307      	strlt	r3, [sp, #28]
 8006e8e:	bfb8      	it	lt
 8006e90:	9204      	strlt	r2, [sp, #16]
 8006e92:	7823      	ldrb	r3, [r4, #0]
 8006e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e96:	d10a      	bne.n	8006eae <_vfiprintf_r+0x156>
 8006e98:	7863      	ldrb	r3, [r4, #1]
 8006e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e9c:	d132      	bne.n	8006f04 <_vfiprintf_r+0x1ac>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	3402      	adds	r4, #2
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	9203      	str	r2, [sp, #12]
 8006ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f78 <_vfiprintf_r+0x220>
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	7821      	ldrb	r1, [r4, #0]
 8006eb8:	f7fe f96b 	bl	8005192 <memchr>
 8006ebc:	b138      	cbz	r0, 8006ece <_vfiprintf_r+0x176>
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	eba0 000a 	sub.w	r0, r0, sl
 8006ec6:	4082      	lsls	r2, r0
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	3401      	adds	r4, #1
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed2:	2206      	movs	r2, #6
 8006ed4:	4829      	ldr	r0, [pc, #164]	@ (8006f7c <_vfiprintf_r+0x224>)
 8006ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eda:	f7fe f95a 	bl	8005192 <memchr>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d03f      	beq.n	8006f62 <_vfiprintf_r+0x20a>
 8006ee2:	4b27      	ldr	r3, [pc, #156]	@ (8006f80 <_vfiprintf_r+0x228>)
 8006ee4:	bb1b      	cbnz	r3, 8006f2e <_vfiprintf_r+0x1d6>
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	3307      	adds	r3, #7
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	3308      	adds	r3, #8
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef4:	443b      	add	r3, r7
 8006ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef8:	e76a      	b.n	8006dd0 <_vfiprintf_r+0x78>
 8006efa:	460c      	mov	r4, r1
 8006efc:	2001      	movs	r0, #1
 8006efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f02:	e7a8      	b.n	8006e56 <_vfiprintf_r+0xfe>
 8006f04:	2300      	movs	r3, #0
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	3401      	adds	r4, #1
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f16:	3a30      	subs	r2, #48	@ 0x30
 8006f18:	2a09      	cmp	r2, #9
 8006f1a:	d903      	bls.n	8006f24 <_vfiprintf_r+0x1cc>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0c6      	beq.n	8006eae <_vfiprintf_r+0x156>
 8006f20:	9105      	str	r1, [sp, #20]
 8006f22:	e7c4      	b.n	8006eae <_vfiprintf_r+0x156>
 8006f24:	4604      	mov	r4, r0
 8006f26:	2301      	movs	r3, #1
 8006f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2c:	e7f0      	b.n	8006f10 <_vfiprintf_r+0x1b8>
 8006f2e:	ab03      	add	r3, sp, #12
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	462a      	mov	r2, r5
 8006f34:	4630      	mov	r0, r6
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <_vfiprintf_r+0x22c>)
 8006f38:	a904      	add	r1, sp, #16
 8006f3a:	f7fd fbc7 	bl	80046cc <_printf_float>
 8006f3e:	4607      	mov	r7, r0
 8006f40:	1c78      	adds	r0, r7, #1
 8006f42:	d1d6      	bne.n	8006ef2 <_vfiprintf_r+0x19a>
 8006f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f46:	07d9      	lsls	r1, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_vfiprintf_r+0x1fe>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_vfiprintf_r+0x1fe>
 8006f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f52:	f7fe f91d 	bl	8005190 <__retarget_lock_release_recursive>
 8006f56:	89ab      	ldrh	r3, [r5, #12]
 8006f58:	065b      	lsls	r3, r3, #25
 8006f5a:	f53f af1f 	bmi.w	8006d9c <_vfiprintf_r+0x44>
 8006f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f60:	e71e      	b.n	8006da0 <_vfiprintf_r+0x48>
 8006f62:	ab03      	add	r3, sp, #12
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	462a      	mov	r2, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <_vfiprintf_r+0x22c>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	f7fd fe4b 	bl	8004c08 <_printf_i>
 8006f72:	e7e4      	b.n	8006f3e <_vfiprintf_r+0x1e6>
 8006f74:	080075d8 	.word	0x080075d8
 8006f78:	080075de 	.word	0x080075de
 8006f7c:	080075e2 	.word	0x080075e2
 8006f80:	080046cd 	.word	0x080046cd
 8006f84:	08006d35 	.word	0x08006d35

08006f88 <__swbuf_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	460e      	mov	r6, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b118      	cbz	r0, 8006f9a <__swbuf_r+0x12>
 8006f92:	6a03      	ldr	r3, [r0, #32]
 8006f94:	b90b      	cbnz	r3, 8006f9a <__swbuf_r+0x12>
 8006f96:	f7fd ffe1 	bl	8004f5c <__sinit>
 8006f9a:	69a3      	ldr	r3, [r4, #24]
 8006f9c:	60a3      	str	r3, [r4, #8]
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	071a      	lsls	r2, r3, #28
 8006fa2:	d501      	bpl.n	8006fa8 <__swbuf_r+0x20>
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	b943      	cbnz	r3, 8006fba <__swbuf_r+0x32>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f82a 	bl	8007004 <__swsetup_r>
 8006fb0:	b118      	cbz	r0, 8006fba <__swbuf_r+0x32>
 8006fb2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	b2f6      	uxtb	r6, r6
 8006fc0:	1a98      	subs	r0, r3, r2
 8006fc2:	6963      	ldr	r3, [r4, #20]
 8006fc4:	4637      	mov	r7, r6
 8006fc6:	4283      	cmp	r3, r0
 8006fc8:	dc05      	bgt.n	8006fd6 <__swbuf_r+0x4e>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f7ff fd9b 	bl	8006b08 <_fflush_r>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1ed      	bne.n	8006fb2 <__swbuf_r+0x2a>
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	60a3      	str	r3, [r4, #8]
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	701e      	strb	r6, [r3, #0]
 8006fe4:	6962      	ldr	r2, [r4, #20]
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d004      	beq.n	8006ff6 <__swbuf_r+0x6e>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	07db      	lsls	r3, r3, #31
 8006ff0:	d5e1      	bpl.n	8006fb6 <__swbuf_r+0x2e>
 8006ff2:	2e0a      	cmp	r6, #10
 8006ff4:	d1df      	bne.n	8006fb6 <__swbuf_r+0x2e>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff fd85 	bl	8006b08 <_fflush_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d0d9      	beq.n	8006fb6 <__swbuf_r+0x2e>
 8007002:	e7d6      	b.n	8006fb2 <__swbuf_r+0x2a>

08007004 <__swsetup_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4b29      	ldr	r3, [pc, #164]	@ (80070ac <__swsetup_r+0xa8>)
 8007008:	4605      	mov	r5, r0
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	460c      	mov	r4, r1
 800700e:	b118      	cbz	r0, 8007018 <__swsetup_r+0x14>
 8007010:	6a03      	ldr	r3, [r0, #32]
 8007012:	b90b      	cbnz	r3, 8007018 <__swsetup_r+0x14>
 8007014:	f7fd ffa2 	bl	8004f5c <__sinit>
 8007018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701c:	0719      	lsls	r1, r3, #28
 800701e:	d422      	bmi.n	8007066 <__swsetup_r+0x62>
 8007020:	06da      	lsls	r2, r3, #27
 8007022:	d407      	bmi.n	8007034 <__swsetup_r+0x30>
 8007024:	2209      	movs	r2, #9
 8007026:	602a      	str	r2, [r5, #0]
 8007028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	e033      	b.n	800709c <__swsetup_r+0x98>
 8007034:	0758      	lsls	r0, r3, #29
 8007036:	d512      	bpl.n	800705e <__swsetup_r+0x5a>
 8007038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800703a:	b141      	cbz	r1, 800704e <__swsetup_r+0x4a>
 800703c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007040:	4299      	cmp	r1, r3
 8007042:	d002      	beq.n	800704a <__swsetup_r+0x46>
 8007044:	4628      	mov	r0, r5
 8007046:	f7fe ff0f 	bl	8005e68 <_free_r>
 800704a:	2300      	movs	r3, #0
 800704c:	6363      	str	r3, [r4, #52]	@ 0x34
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	2300      	movs	r3, #0
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	f043 0308 	orr.w	r3, r3, #8
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	b94b      	cbnz	r3, 800707e <__swsetup_r+0x7a>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007074:	d003      	beq.n	800707e <__swsetup_r+0x7a>
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f000 f882 	bl	8007182 <__smakebuf_r>
 800707e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007082:	f013 0201 	ands.w	r2, r3, #1
 8007086:	d00a      	beq.n	800709e <__swsetup_r+0x9a>
 8007088:	2200      	movs	r2, #0
 800708a:	60a2      	str	r2, [r4, #8]
 800708c:	6962      	ldr	r2, [r4, #20]
 800708e:	4252      	negs	r2, r2
 8007090:	61a2      	str	r2, [r4, #24]
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	b942      	cbnz	r2, 80070a8 <__swsetup_r+0xa4>
 8007096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800709a:	d1c5      	bne.n	8007028 <__swsetup_r+0x24>
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	0799      	lsls	r1, r3, #30
 80070a0:	bf58      	it	pl
 80070a2:	6962      	ldrpl	r2, [r4, #20]
 80070a4:	60a2      	str	r2, [r4, #8]
 80070a6:	e7f4      	b.n	8007092 <__swsetup_r+0x8e>
 80070a8:	2000      	movs	r0, #0
 80070aa:	e7f7      	b.n	800709c <__swsetup_r+0x98>
 80070ac:	20000018 	.word	0x20000018

080070b0 <_raise_r>:
 80070b0:	291f      	cmp	r1, #31
 80070b2:	b538      	push	{r3, r4, r5, lr}
 80070b4:	4605      	mov	r5, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	d904      	bls.n	80070c4 <_raise_r+0x14>
 80070ba:	2316      	movs	r3, #22
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070c6:	b112      	cbz	r2, 80070ce <_raise_r+0x1e>
 80070c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070cc:	b94b      	cbnz	r3, 80070e2 <_raise_r+0x32>
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f830 	bl	8007134 <_getpid_r>
 80070d4:	4622      	mov	r2, r4
 80070d6:	4601      	mov	r1, r0
 80070d8:	4628      	mov	r0, r5
 80070da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070de:	f000 b817 	b.w	8007110 <_kill_r>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d00a      	beq.n	80070fc <_raise_r+0x4c>
 80070e6:	1c59      	adds	r1, r3, #1
 80070e8:	d103      	bne.n	80070f2 <_raise_r+0x42>
 80070ea:	2316      	movs	r3, #22
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	2001      	movs	r0, #1
 80070f0:	e7e7      	b.n	80070c2 <_raise_r+0x12>
 80070f2:	2100      	movs	r1, #0
 80070f4:	4620      	mov	r0, r4
 80070f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070fa:	4798      	blx	r3
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7e0      	b.n	80070c2 <_raise_r+0x12>

08007100 <raise>:
 8007100:	4b02      	ldr	r3, [pc, #8]	@ (800710c <raise+0xc>)
 8007102:	4601      	mov	r1, r0
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f7ff bfd3 	b.w	80070b0 <_raise_r>
 800710a:	bf00      	nop
 800710c:	20000018 	.word	0x20000018

08007110 <_kill_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	2300      	movs	r3, #0
 8007114:	4d06      	ldr	r5, [pc, #24]	@ (8007130 <_kill_r+0x20>)
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	f7fa fcb8 	bl	8001a92 <_kill>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d102      	bne.n	800712c <_kill_r+0x1c>
 8007126:	682b      	ldr	r3, [r5, #0]
 8007128:	b103      	cbz	r3, 800712c <_kill_r+0x1c>
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	20000508 	.word	0x20000508

08007134 <_getpid_r>:
 8007134:	f7fa bca6 	b.w	8001a84 <_getpid>

08007138 <__swhatbuf_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	460c      	mov	r4, r1
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	4615      	mov	r5, r2
 8007142:	2900      	cmp	r1, #0
 8007144:	461e      	mov	r6, r3
 8007146:	b096      	sub	sp, #88	@ 0x58
 8007148:	da0c      	bge.n	8007164 <__swhatbuf_r+0x2c>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	2100      	movs	r1, #0
 800714e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007152:	bf14      	ite	ne
 8007154:	2340      	movne	r3, #64	@ 0x40
 8007156:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800715a:	2000      	movs	r0, #0
 800715c:	6031      	str	r1, [r6, #0]
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	b016      	add	sp, #88	@ 0x58
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	466a      	mov	r2, sp
 8007166:	f000 f849 	bl	80071fc <_fstat_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	dbed      	blt.n	800714a <__swhatbuf_r+0x12>
 800716e:	9901      	ldr	r1, [sp, #4]
 8007170:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007174:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007178:	4259      	negs	r1, r3
 800717a:	4159      	adcs	r1, r3
 800717c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007180:	e7eb      	b.n	800715a <__swhatbuf_r+0x22>

08007182 <__smakebuf_r>:
 8007182:	898b      	ldrh	r3, [r1, #12]
 8007184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007186:	079d      	lsls	r5, r3, #30
 8007188:	4606      	mov	r6, r0
 800718a:	460c      	mov	r4, r1
 800718c:	d507      	bpl.n	800719e <__smakebuf_r+0x1c>
 800718e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007192:	6023      	str	r3, [r4, #0]
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	2301      	movs	r3, #1
 8007198:	6163      	str	r3, [r4, #20]
 800719a:	b003      	add	sp, #12
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	466a      	mov	r2, sp
 80071a0:	ab01      	add	r3, sp, #4
 80071a2:	f7ff ffc9 	bl	8007138 <__swhatbuf_r>
 80071a6:	9f00      	ldr	r7, [sp, #0]
 80071a8:	4605      	mov	r5, r0
 80071aa:	4639      	mov	r1, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7fe fecd 	bl	8005f4c <_malloc_r>
 80071b2:	b948      	cbnz	r0, 80071c8 <__smakebuf_r+0x46>
 80071b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b8:	059a      	lsls	r2, r3, #22
 80071ba:	d4ee      	bmi.n	800719a <__smakebuf_r+0x18>
 80071bc:	f023 0303 	bic.w	r3, r3, #3
 80071c0:	f043 0302 	orr.w	r3, r3, #2
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	e7e2      	b.n	800718e <__smakebuf_r+0xc>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	6020      	str	r0, [r4, #0]
 80071d8:	b15b      	cbz	r3, 80071f2 <__smakebuf_r+0x70>
 80071da:	4630      	mov	r0, r6
 80071dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e0:	f000 f81e 	bl	8007220 <_isatty_r>
 80071e4:	b128      	cbz	r0, 80071f2 <__smakebuf_r+0x70>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f023 0303 	bic.w	r3, r3, #3
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	431d      	orrs	r5, r3
 80071f6:	81a5      	strh	r5, [r4, #12]
 80071f8:	e7cf      	b.n	800719a <__smakebuf_r+0x18>
	...

080071fc <_fstat_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	2300      	movs	r3, #0
 8007200:	4d06      	ldr	r5, [pc, #24]	@ (800721c <_fstat_r+0x20>)
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f7fa fca1 	bl	8001b50 <_fstat>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d102      	bne.n	8007218 <_fstat_r+0x1c>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b103      	cbz	r3, 8007218 <_fstat_r+0x1c>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	20000508 	.word	0x20000508

08007220 <_isatty_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	2300      	movs	r3, #0
 8007224:	4d05      	ldr	r5, [pc, #20]	@ (800723c <_isatty_r+0x1c>)
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fa fc9f 	bl	8001b6e <_isatty>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_isatty_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_isatty_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20000508 	.word	0x20000508

08007240 <sqrt>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	f000 f81f 	bl	8007288 <__ieee754_sqrt>
 800724a:	4632      	mov	r2, r6
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	463b      	mov	r3, r7
 8007252:	4630      	mov	r0, r6
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 fc8d 	bl	8000b74 <__aeabi_dcmpun>
 800725a:	b990      	cbnz	r0, 8007282 <sqrt+0x42>
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 fc5e 	bl	8000b24 <__aeabi_dcmplt>
 8007268:	b158      	cbz	r0, 8007282 <sqrt+0x42>
 800726a:	f7fd ff65 	bl	8005138 <__errno>
 800726e:	2321      	movs	r3, #33	@ 0x21
 8007270:	2200      	movs	r2, #0
 8007272:	6003      	str	r3, [r0, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	4610      	mov	r0, r2
 8007278:	4619      	mov	r1, r3
 800727a:	f7f9 fb0b 	bl	8000894 <__aeabi_ddiv>
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007288 <__ieee754_sqrt>:
 8007288:	4a65      	ldr	r2, [pc, #404]	@ (8007420 <__ieee754_sqrt+0x198>)
 800728a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728e:	438a      	bics	r2, r1
 8007290:	4606      	mov	r6, r0
 8007292:	460f      	mov	r7, r1
 8007294:	460b      	mov	r3, r1
 8007296:	4604      	mov	r4, r0
 8007298:	d10e      	bne.n	80072b8 <__ieee754_sqrt+0x30>
 800729a:	4602      	mov	r2, r0
 800729c:	f7f9 f9d0 	bl	8000640 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 f814 	bl	80002d4 <__adddf3>
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	2900      	cmp	r1, #0
 80072ba:	dc0c      	bgt.n	80072d6 <__ieee754_sqrt+0x4e>
 80072bc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80072c0:	4302      	orrs	r2, r0
 80072c2:	d0f5      	beq.n	80072b0 <__ieee754_sqrt+0x28>
 80072c4:	b189      	cbz	r1, 80072ea <__ieee754_sqrt+0x62>
 80072c6:	4602      	mov	r2, r0
 80072c8:	f7f9 f802 	bl	80002d0 <__aeabi_dsub>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	f7f9 fae0 	bl	8000894 <__aeabi_ddiv>
 80072d4:	e7ea      	b.n	80072ac <__ieee754_sqrt+0x24>
 80072d6:	150a      	asrs	r2, r1, #20
 80072d8:	d115      	bne.n	8007306 <__ieee754_sqrt+0x7e>
 80072da:	2100      	movs	r1, #0
 80072dc:	e009      	b.n	80072f2 <__ieee754_sqrt+0x6a>
 80072de:	0ae3      	lsrs	r3, r4, #11
 80072e0:	3a15      	subs	r2, #21
 80072e2:	0564      	lsls	r4, r4, #21
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0fa      	beq.n	80072de <__ieee754_sqrt+0x56>
 80072e8:	e7f7      	b.n	80072da <__ieee754_sqrt+0x52>
 80072ea:	460a      	mov	r2, r1
 80072ec:	e7fa      	b.n	80072e4 <__ieee754_sqrt+0x5c>
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	3101      	adds	r1, #1
 80072f2:	02d8      	lsls	r0, r3, #11
 80072f4:	d5fb      	bpl.n	80072ee <__ieee754_sqrt+0x66>
 80072f6:	1e48      	subs	r0, r1, #1
 80072f8:	1a12      	subs	r2, r2, r0
 80072fa:	f1c1 0020 	rsb	r0, r1, #32
 80072fe:	fa24 f000 	lsr.w	r0, r4, r0
 8007302:	4303      	orrs	r3, r0
 8007304:	408c      	lsls	r4, r1
 8007306:	2700      	movs	r7, #0
 8007308:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800730c:	2116      	movs	r1, #22
 800730e:	07d2      	lsls	r2, r2, #31
 8007310:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007314:	463a      	mov	r2, r7
 8007316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800731e:	bf5c      	itt	pl
 8007320:	005b      	lslpl	r3, r3, #1
 8007322:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800732a:	bf58      	it	pl
 800732c:	0064      	lslpl	r4, r4, #1
 800732e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007336:	0064      	lsls	r4, r4, #1
 8007338:	1815      	adds	r5, r2, r0
 800733a:	429d      	cmp	r5, r3
 800733c:	bfde      	ittt	le
 800733e:	182a      	addle	r2, r5, r0
 8007340:	1b5b      	suble	r3, r3, r5
 8007342:	183f      	addle	r7, r7, r0
 8007344:	0fe5      	lsrs	r5, r4, #31
 8007346:	3901      	subs	r1, #1
 8007348:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800734c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007350:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007354:	d1f0      	bne.n	8007338 <__ieee754_sqrt+0xb0>
 8007356:	460d      	mov	r5, r1
 8007358:	2620      	movs	r6, #32
 800735a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800735e:	4293      	cmp	r3, r2
 8007360:	eb00 0c01 	add.w	ip, r0, r1
 8007364:	dc02      	bgt.n	800736c <__ieee754_sqrt+0xe4>
 8007366:	d113      	bne.n	8007390 <__ieee754_sqrt+0x108>
 8007368:	45a4      	cmp	ip, r4
 800736a:	d811      	bhi.n	8007390 <__ieee754_sqrt+0x108>
 800736c:	f1bc 0f00 	cmp.w	ip, #0
 8007370:	eb0c 0100 	add.w	r1, ip, r0
 8007374:	da3e      	bge.n	80073f4 <__ieee754_sqrt+0x16c>
 8007376:	2900      	cmp	r1, #0
 8007378:	db3c      	blt.n	80073f4 <__ieee754_sqrt+0x16c>
 800737a:	f102 0e01 	add.w	lr, r2, #1
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	4672      	mov	r2, lr
 8007382:	45a4      	cmp	ip, r4
 8007384:	bf88      	it	hi
 8007386:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800738a:	eba4 040c 	sub.w	r4, r4, ip
 800738e:	4405      	add	r5, r0
 8007390:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007394:	3e01      	subs	r6, #1
 8007396:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800739a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800739e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073a2:	d1dc      	bne.n	800735e <__ieee754_sqrt+0xd6>
 80073a4:	431c      	orrs	r4, r3
 80073a6:	d01a      	beq.n	80073de <__ieee754_sqrt+0x156>
 80073a8:	4c1e      	ldr	r4, [pc, #120]	@ (8007424 <__ieee754_sqrt+0x19c>)
 80073aa:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8007428 <__ieee754_sqrt+0x1a0>
 80073ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073b6:	f7f8 ff8b 	bl	80002d0 <__aeabi_dsub>
 80073ba:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4650      	mov	r0, sl
 80073c4:	4659      	mov	r1, fp
 80073c6:	f7f9 fbb7 	bl	8000b38 <__aeabi_dcmple>
 80073ca:	b140      	cbz	r0, 80073de <__ieee754_sqrt+0x156>
 80073cc:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073d0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073d4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80073d8:	d10e      	bne.n	80073f8 <__ieee754_sqrt+0x170>
 80073da:	4635      	mov	r5, r6
 80073dc:	3701      	adds	r7, #1
 80073de:	107b      	asrs	r3, r7, #1
 80073e0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80073e4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80073e8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80073ec:	086b      	lsrs	r3, r5, #1
 80073ee:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 80073f2:	e75b      	b.n	80072ac <__ieee754_sqrt+0x24>
 80073f4:	4696      	mov	lr, r2
 80073f6:	e7c2      	b.n	800737e <__ieee754_sqrt+0xf6>
 80073f8:	f7f8 ff6c 	bl	80002d4 <__adddf3>
 80073fc:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4650      	mov	r0, sl
 8007406:	4659      	mov	r1, fp
 8007408:	f7f9 fb8c 	bl	8000b24 <__aeabi_dcmplt>
 800740c:	b120      	cbz	r0, 8007418 <__ieee754_sqrt+0x190>
 800740e:	1cab      	adds	r3, r5, #2
 8007410:	bf08      	it	eq
 8007412:	3701      	addeq	r7, #1
 8007414:	3502      	adds	r5, #2
 8007416:	e7e2      	b.n	80073de <__ieee754_sqrt+0x156>
 8007418:	1c6b      	adds	r3, r5, #1
 800741a:	f023 0501 	bic.w	r5, r3, #1
 800741e:	e7de      	b.n	80073de <__ieee754_sqrt+0x156>
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	08007840 	.word	0x08007840
 8007428:	08007838 	.word	0x08007838

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
