
adc_poll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  08007d28  08007d28  00008d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef4  08008ef4  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008efc  08008efc  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008efc  08008efc  00009efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f00  08008f00  00009f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008f04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be4  200001e0  080090e4  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20000dc4  080090e4  0000adc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bed8  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f9  00000000  00000000  000160e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  000183e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018e37  00000000  00000000  00018f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ce03  00000000  00000000  00031d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b2f2  00000000  00000000  0003eb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c9e64  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000089e  00000000  00000000  000c9ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f6c  00000000  00000000  000ca748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ce6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d10 	.word	0x08007d10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007d10 	.word	0x08007d10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0a6      	sub	sp, #152	@ 0x98
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f000 fed9 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f8bb 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f000 f9d1 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff6:	f000 f9b1 	bl	800135c <MX_DMA_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f911 	bl	8001220 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 f983 	bl	8001308 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001002:	f000 f94b 	bl	800129c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8001006:	f000 fb07 	bl	8001618 <ST7789_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2108      	movs	r1, #8
 800100e:	484b      	ldr	r0, [pc, #300]	@ (800113c <main+0x158>)
 8001010:	f002 f8ac 	bl	800316c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);
 8001014:	484a      	ldr	r0, [pc, #296]	@ (8001140 <main+0x15c>)
 8001016:	f001 f821 	bl	800205c <HAL_ADC_Start>
  ST7789_Fill_Color(BLACK);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 fba2 	bl	8001764 <ST7789_Fill_Color>
	  char msg[128];
	  uint16_t rawValue;
	  float temp;


	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001020:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001024:	4846      	ldr	r0, [pc, #280]	@ (8001140 <main+0x15c>)
 8001026:	f001 f8c7 	bl	80021b8 <HAL_ADC_PollForConversion>

	  rawValue = HAL_ADC_GetValue(&hadc1);
 800102a:	4845      	ldr	r0, [pc, #276]	@ (8001140 <main+0x15c>)
 800102c:	f001 f9ca 	bl	80023c4 <HAL_ADC_GetValue>
 8001030:	4603      	mov	r3, r0
 8001032:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  temp = ((float)rawValue) / 4095 * 3300;
 8001036:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe2a 	bl	8000c94 <__aeabi_ui2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4940      	ldr	r1, [pc, #256]	@ (8001144 <main+0x160>)
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	493e      	ldr	r1, [pc, #248]	@ (8001148 <main+0x164>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe78 	bl	8000d44 <__aeabi_fmul>
 8001054:	4603      	mov	r3, r0
 8001056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  temp = ((temp - 760.0) / 2.5) + 25;
 800105a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800105e:	f7ff f9e3 	bl	8000428 <__aeabi_f2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b39      	ldr	r3, [pc, #228]	@ (800114c <main+0x168>)
 8001068:	f7ff f87e 	bl	8000168 <__aeabi_dsub>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <main+0x16c>)
 800107a:	f7ff fb57 	bl	800072c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <main+0x170>)
 800108c:	f7ff f86e 	bl	800016c <__adddf3>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fcf6 	bl	8000a88 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  sprintf(msg, "rawValue: %hu\r\n", rawValue);
 80010a2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80010a6:	463b      	mov	r3, r7
 80010a8:	492b      	ldr	r1, [pc, #172]	@ (8001158 <main+0x174>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fcf2 	bl	8005a94 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010b0:	463b      	mov	r3, r7
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f84c 	bl	8000150 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4639      	mov	r1, r7
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c2:	4826      	ldr	r0, [pc, #152]	@ (800115c <main+0x178>)
 80010c4:	f003 fa05 	bl	80044d2 <HAL_UART_Transmit>
	  ST7789_WriteString(10, 10, msg, Font_11x18, GBLUE, BLACK);
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <main+0x17c>)
 80010ca:	4639      	mov	r1, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	9200      	str	r2, [sp, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	460a      	mov	r2, r1
 80010de:	210a      	movs	r1, #10
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 fbda 	bl	800189a <ST7789_WriteString>
	  sprintf(msg, "Temperature: %f\r\n", temp);
 80010e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80010ea:	f7ff f99d 	bl	8000428 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4638      	mov	r0, r7
 80010f4:	491b      	ldr	r1, [pc, #108]	@ (8001164 <main+0x180>)
 80010f6:	f004 fccd 	bl	8005a94 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010fa:	463b      	mov	r3, r7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f827 	bl	8000150 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	4639      	mov	r1, r7
 8001108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <main+0x178>)
 800110e:	f003 f9e0 	bl	80044d2 <HAL_UART_Transmit>
	  ST7789_WriteString(10, 25, msg, Font_11x18, YELLOW, BLACK);
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <main+0x17c>)
 8001114:	4639      	mov	r1, r7
 8001116:	2200      	movs	r2, #0
 8001118:	9202      	str	r2, [sp, #8]
 800111a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	460a      	mov	r2, r1
 8001128:	2119      	movs	r1, #25
 800112a:	200a      	movs	r0, #10
 800112c:	f000 fbb5 	bl	800189a <ST7789_WriteString>
	  HAL_Delay(1000);
 8001130:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001134:	f000 fe96 	bl	8001e64 <HAL_Delay>
  {
 8001138:	bf00      	nop
 800113a:	e771      	b.n	8001020 <main+0x3c>
 800113c:	40010800 	.word	0x40010800
 8001140:	200001fc 	.word	0x200001fc
 8001144:	457ff000 	.word	0x457ff000
 8001148:	454e4000 	.word	0x454e4000
 800114c:	4087c000 	.word	0x4087c000
 8001150:	40040000 	.word	0x40040000
 8001154:	40390000 	.word	0x40390000
 8001158:	08007d28 	.word	0x08007d28
 800115c:	200002c8 	.word	0x200002c8
 8001160:	20000000 	.word	0x20000000
 8001164:	08007d38 	.word	0x08007d38

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	@ 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001172:	2228      	movs	r2, #40	@ 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fcf1 	bl	8005b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011b4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ffec 	bl	800319c <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ca:	f000 f923 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fa58 	bl	80036a0 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011f6:	f000 f90d 	bl	8001414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fbd8 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	@ 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_ADC1_Init+0x74>)
 8001232:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <MX_ADC1_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_ADC1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_ADC1_Init+0x74>)
 800123e:	2201      	movs	r2, #1
 8001240:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_ADC1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <MX_ADC1_Init+0x74>)
 800124a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800124e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_ADC1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_ADC1_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_ADC1_Init+0x74>)
 800125e:	f000 fe25 	bl	8001eac <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 f8d4 	bl	8001414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800126c:	2310      	movs	r3, #16
 800126e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	2301      	movs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001274:	2307      	movs	r3, #7
 8001276:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_ADC1_Init+0x74>)
 800127e:	f001 f8ad 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001288:	f000 f8c4 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001fc 	.word	0x200001fc
 8001298:	40012400 	.word	0x40012400

0800129c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_SPI1_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012bc:	2202      	movs	r2, #2
 80012be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012d0:	2210      	movs	r2, #16
 80012d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012e8:	220a      	movs	r2, #10
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_SPI1_Init+0x64>)
 80012ee:	f002 fcd1 	bl	8003c94 <HAL_SPI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012f8:	f000 f88c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000022c 	.word	0x2000022c
 8001304:	40013000 	.word	0x40013000

08001308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_USART1_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_USART1_UART_Init+0x4c>)
 8001340:	f003 f877 	bl	8004432 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 f863 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002c8 	.word	0x200002c8
 8001358:	40013800 	.word	0x40013800

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_DMA_Init+0x38>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <MX_DMA_Init+0x38>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_DMA_Init+0x38>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	200d      	movs	r0, #13
 8001380:	f001 fa97 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001384:	200d      	movs	r0, #13
 8001386:	f001 fab0 	bl	80028ea <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_GPIO_Init+0x74>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a16      	ldr	r2, [pc, #88]	@ (800140c <MX_GPIO_Init+0x74>)
 80013b2:	f043 0320 	orr.w	r3, r3, #32
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_GPIO_Init+0x74>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_GPIO_Init+0x74>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a10      	ldr	r2, [pc, #64]	@ (800140c <MX_GPIO_Init+0x74>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_GPIO_Init+0x74>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	210e      	movs	r1, #14
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <MX_GPIO_Init+0x78>)
 80013e2:	f001 fec3 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013e6:	230e      	movs	r3, #14
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
 80013f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_GPIO_Init+0x78>)
 80013fe:	f001 fd31 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800142a:	bf00      	nop
	ST7789_DC_Clr();
 800142c:	2200      	movs	r2, #0
 800142e:	2104      	movs	r1, #4
 8001430:	4807      	ldr	r0, [pc, #28]	@ (8001450 <ST7789_WriteCommand+0x30>)
 8001432:	f001 fe9b 	bl	800316c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001436:	1df9      	adds	r1, r7, #7
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143c:	2201      	movs	r2, #1
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <ST7789_WriteCommand+0x34>)
 8001440:	f002 fcac 	bl	8003d9c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001444:	bf00      	nop
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010800 	.word	0x40010800
 8001454:	2000022c 	.word	0x2000022c

08001458 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001462:	bf00      	nop
	ST7789_DC_Set();
 8001464:	2201      	movs	r2, #1
 8001466:	2104      	movs	r1, #4
 8001468:	481b      	ldr	r0, [pc, #108]	@ (80014d8 <ST7789_WriteData+0x80>)
 800146a:	f001 fe7f 	bl	800316c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800146e:	e02a      	b.n	80014c6 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001476:	4293      	cmp	r3, r2
 8001478:	bf28      	it	cs
 800147a:	4613      	movcs	r3, r2
 800147c:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <ST7789_WriteData+0x84>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4293      	cmp	r3, r2
 8001488:	d30e      	bcc.n	80014a8 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	461a      	mov	r2, r3
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <ST7789_WriteData+0x88>)
 8001492:	f002 fdc7 	bl	8004024 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001496:	bf00      	nop
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <ST7789_WriteData+0x88>)
 800149a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d1f8      	bne.n	8001498 <ST7789_WriteData+0x40>
 80014a6:	e006      	b.n	80014b6 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80014a8:	89fa      	ldrh	r2, [r7, #14]
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	480b      	ldr	r0, [pc, #44]	@ (80014e0 <ST7789_WriteData+0x88>)
 80014b2:	f002 fc73 	bl	8003d9c <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1d1      	bne.n	8001470 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 80014cc:	bf00      	nop
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010800 	.word	0x40010800
 80014dc:	20000008 	.word	0x20000008
 80014e0:	2000022c 	.word	0x2000022c

080014e4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80014ee:	bf00      	nop
	ST7789_DC_Set();
 80014f0:	2201      	movs	r2, #1
 80014f2:	2104      	movs	r1, #4
 80014f4:	4807      	ldr	r0, [pc, #28]	@ (8001514 <ST7789_WriteSmallData+0x30>)
 80014f6:	f001 fe39 	bl	800316c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80014fa:	1df9      	adds	r1, r7, #7
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001500:	2201      	movs	r2, #1
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <ST7789_WriteSmallData+0x34>)
 8001504:	f002 fc4a 	bl	8003d9c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001508:	bf00      	nop
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010800 	.word	0x40010800
 8001518:	2000022c 	.word	0x2000022c

0800151c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001526:	2036      	movs	r0, #54	@ 0x36
 8001528:	f7ff ff7a 	bl	8001420 <ST7789_WriteCommand>
	switch (m) {
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d81a      	bhi.n	8001568 <ST7789_SetRotation+0x4c>
 8001532:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <ST7789_SetRotation+0x1c>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001549 	.word	0x08001549
 800153c:	08001551 	.word	0x08001551
 8001540:	08001559 	.word	0x08001559
 8001544:	08001561 	.word	0x08001561
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001548:	20c0      	movs	r0, #192	@ 0xc0
 800154a:	f7ff ffcb 	bl	80014e4 <ST7789_WriteSmallData>
		break;
 800154e:	e00c      	b.n	800156a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001550:	20a0      	movs	r0, #160	@ 0xa0
 8001552:	f7ff ffc7 	bl	80014e4 <ST7789_WriteSmallData>
		break;
 8001556:	e008      	b.n	800156a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ffc3 	bl	80014e4 <ST7789_WriteSmallData>
		break;
 800155e:	e004      	b.n	800156a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001560:	2060      	movs	r0, #96	@ 0x60
 8001562:	f7ff ffbf 	bl	80014e4 <ST7789_WriteSmallData>
		break;
 8001566:	e000      	b.n	800156a <ST7789_SetRotation+0x4e>
	default:
		break;
 8001568:	bf00      	nop
	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001592:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	82fb      	strh	r3, [r7, #22]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	827b      	strh	r3, [r7, #18]
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80015a4:	202a      	movs	r0, #42	@ 0x2a
 80015a6:	f7ff ff3b 	bl	8001420 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80015aa:	8afb      	ldrh	r3, [r7, #22]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	733b      	strb	r3, [r7, #12]
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	737b      	strb	r3, [r7, #13]
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	73bb      	strb	r3, [r7, #14]
 80015c4:	8abb      	ldrh	r3, [r7, #20]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2104      	movs	r1, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff41 	bl	8001458 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80015d6:	202b      	movs	r0, #43	@ 0x2b
 80015d8:	f7ff ff22 	bl	8001420 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80015dc:	8a7b      	ldrh	r3, [r7, #18]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	723b      	strb	r3, [r7, #8]
 80015e6:	8a7b      	ldrh	r3, [r7, #18]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	727b      	strb	r3, [r7, #9]
 80015ec:	8a3b      	ldrh	r3, [r7, #16]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	72bb      	strb	r3, [r7, #10]
 80015f6:	8a3b      	ldrh	r3, [r7, #16]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2104      	movs	r1, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff28 	bl	8001458 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001608:	202c      	movs	r0, #44	@ 0x2c
 800160a:	f7ff ff09 	bl	8001420 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800160e:	bf00      	nop
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}

08001618 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b08b      	sub	sp, #44	@ 0x2c
 800161c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800161e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001622:	2100      	movs	r1, #0
 8001624:	484a      	ldr	r0, [pc, #296]	@ (8001750 <ST7789_Init+0x138>)
 8001626:	f004 fa9a 	bl	8005b5e <memset>
	#endif
	HAL_Delay(10);
 800162a:	200a      	movs	r0, #10
 800162c:	f000 fc1a 	bl	8001e64 <HAL_Delay>
    ST7789_RST_Clr();
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4847      	ldr	r0, [pc, #284]	@ (8001754 <ST7789_Init+0x13c>)
 8001636:	f001 fd99 	bl	800316c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f000 fc12 	bl	8001e64 <HAL_Delay>
    ST7789_RST_Set();
 8001640:	2201      	movs	r2, #1
 8001642:	2102      	movs	r1, #2
 8001644:	4843      	ldr	r0, [pc, #268]	@ (8001754 <ST7789_Init+0x13c>)
 8001646:	f001 fd91 	bl	800316c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800164a:	2014      	movs	r0, #20
 800164c:	f000 fc0a 	bl	8001e64 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001650:	203a      	movs	r0, #58	@ 0x3a
 8001652:	f7ff fee5 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001656:	2055      	movs	r0, #85	@ 0x55
 8001658:	f7ff ff44 	bl	80014e4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800165c:	20b2      	movs	r0, #178	@ 0xb2
 800165e:	f7ff fedf 	bl	8001420 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001662:	4a3d      	ldr	r2, [pc, #244]	@ (8001758 <ST7789_Init+0x140>)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2105      	movs	r1, #5
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff feed 	bl	8001458 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff ff4c 	bl	800151c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001684:	20b7      	movs	r0, #183	@ 0xb7
 8001686:	f7ff fecb 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800168a:	2035      	movs	r0, #53	@ 0x35
 800168c:	f7ff ff2a 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001690:	20bb      	movs	r0, #187	@ 0xbb
 8001692:	f7ff fec5 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001696:	2019      	movs	r0, #25
 8001698:	f7ff ff24 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800169c:	20c0      	movs	r0, #192	@ 0xc0
 800169e:	f7ff febf 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80016a2:	202c      	movs	r0, #44	@ 0x2c
 80016a4:	f7ff ff1e 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80016a8:	20c2      	movs	r0, #194	@ 0xc2
 80016aa:	f7ff feb9 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff ff18 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80016b4:	20c3      	movs	r0, #195	@ 0xc3
 80016b6:	f7ff feb3 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80016ba:	2012      	movs	r0, #18
 80016bc:	f7ff ff12 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80016c0:	20c4      	movs	r0, #196	@ 0xc4
 80016c2:	f7ff fead 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80016c6:	2020      	movs	r0, #32
 80016c8:	f7ff ff0c 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80016cc:	20c6      	movs	r0, #198	@ 0xc6
 80016ce:	f7ff fea7 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80016d2:	200f      	movs	r0, #15
 80016d4:	f7ff ff06 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80016d8:	20d0      	movs	r0, #208	@ 0xd0
 80016da:	f7ff fea1 	bl	8001420 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80016de:	20a4      	movs	r0, #164	@ 0xa4
 80016e0:	f7ff ff00 	bl	80014e4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80016e4:	20a1      	movs	r0, #161	@ 0xa1
 80016e6:	f7ff fefd 	bl	80014e4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80016ea:	20e0      	movs	r0, #224	@ 0xe0
 80016ec:	f7ff fe98 	bl	8001420 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <ST7789_Init+0x144>)
 80016f2:	f107 0410 	add.w	r4, r7, #16
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	c407      	stmia	r4!, {r0, r1, r2}
 80016fa:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	210e      	movs	r1, #14
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fea8 	bl	8001458 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001708:	20e1      	movs	r0, #225	@ 0xe1
 800170a:	f7ff fe89 	bl	8001420 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <ST7789_Init+0x148>)
 8001710:	463c      	mov	r4, r7
 8001712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001714:	c407      	stmia	r4!, {r0, r1, r2}
 8001716:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001718:	463b      	mov	r3, r7
 800171a:	210e      	movs	r1, #14
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe9b 	bl	8001458 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001722:	2021      	movs	r0, #33	@ 0x21
 8001724:	f7ff fe7c 	bl	8001420 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001728:	2011      	movs	r0, #17
 800172a:	f7ff fe79 	bl	8001420 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800172e:	2013      	movs	r0, #19
 8001730:	f7ff fe76 	bl	8001420 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001734:	2029      	movs	r0, #41	@ 0x29
 8001736:	f7ff fe73 	bl	8001420 <ST7789_WriteCommand>

	HAL_Delay(50);
 800173a:	2032      	movs	r0, #50	@ 0x32
 800173c:	f000 fb92 	bl	8001e64 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f80f 	bl	8001764 <ST7789_Fill_Color>
}
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	@ 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	bf00      	nop
 8001750:	20000310 	.word	0x20000310
 8001754:	40010800 	.word	0x40010800
 8001758:	08007d4c 	.word	0x08007d4c
 800175c:	08007d54 	.word	0x08007d54
 8001760:	08007d64 	.word	0x08007d64

08001764 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800176e:	23ef      	movs	r3, #239	@ 0xef
 8001770:	22ef      	movs	r2, #239	@ 0xef
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fefd 	bl	8001574 <ST7789_SetAddressWindow>
	ST7789_Select();
 800177a:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	81fb      	strh	r3, [r7, #14]
 8001780:	e00e      	b.n	80017a0 <ST7789_Fill_Color+0x3c>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001788:	4619      	mov	r1, r3
 800178a:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <ST7789_Fill_Color+0x4c>)
 800178c:	f004 f9e7 	bl	8005b5e <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001790:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001794:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <ST7789_Fill_Color+0x4c>)
 8001796:	f7ff fe5f 	bl	8001458 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	3301      	adds	r3, #1
 800179e:	81fb      	strh	r3, [r7, #14]
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80017a4:	d9ed      	bls.n	8001782 <ST7789_Fill_Color+0x1e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 80017a6:	bf00      	nop
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000310 	.word	0x20000310

080017b4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80017b4:	b082      	sub	sp, #8
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b088      	sub	sp, #32
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	460b      	mov	r3, r1
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80017ca:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80017cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017d0:	461a      	mov	r2, r3
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4413      	add	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017e0:	4619      	mov	r1, r3
 80017e2:	88bb      	ldrh	r3, [r7, #4]
 80017e4:	440b      	add	r3, r1
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	88b9      	ldrh	r1, [r7, #4]
 80017ee:	88f8      	ldrh	r0, [r7, #6]
 80017f0:	f7ff fec0 	bl	8001574 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e041      	b.n	800187e <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 80017fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	3b20      	subs	r3, #32
 8001800:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4619      	mov	r1, r3
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	440b      	add	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e027      	b.n	800186c <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00e      	beq.n	800184a <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800182c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	b29b      	uxth	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	743b      	strb	r3, [r7, #16]
 8001836:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001838:	b2db      	uxtb	r3, r3
 800183a:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe08 	bl	8001458 <ST7789_WriteData>
 8001848:	e00d      	b.n	8001866 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800184a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	733b      	strb	r3, [r7, #12]
 8001854:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001856:	b2db      	uxtb	r3, r3
 8001858:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2102      	movs	r1, #2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fdf9 	bl	8001458 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3301      	adds	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001870:	461a      	mov	r2, r3
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4293      	cmp	r3, r2
 8001876:	d3d1      	bcc.n	800181c <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	3301      	adds	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001882:	461a      	mov	r2, r3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4293      	cmp	r3, r2
 8001888:	d3b7      	bcc.n	80017fa <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 800188a:	bf00      	nop
}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001896:	b002      	add	sp, #8
 8001898:	4770      	bx	lr

0800189a <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800189a:	b082      	sub	sp, #8
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af04      	add	r7, sp, #16
 80018a2:	603a      	str	r2, [r7, #0]
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	460b      	mov	r3, r1
 80018ac:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80018ae:	bf00      	nop
	while (*str) {
 80018b0:	e02d      	b.n	800190e <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	7d3a      	ldrb	r2, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	2bef      	cmp	r3, #239	@ 0xef
 80018ba:	dd13      	ble.n	80018e4 <ST7789_WriteString+0x4a>
			x = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80018c0:	7d7b      	ldrb	r3, [r7, #21]
 80018c2:	461a      	mov	r2, r3
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	7d7a      	ldrb	r2, [r7, #21]
 80018ce:	4413      	add	r3, r2
 80018d0:	2bef      	cmp	r3, #239	@ 0xef
 80018d2:	dc21      	bgt.n	8001918 <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d103      	bne.n	80018e4 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	603b      	str	r3, [r7, #0]
				continue;
 80018e2:	e014      	b.n	800190e <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	88b9      	ldrh	r1, [r7, #4]
 80018ea:	88f8      	ldrh	r0, [r7, #6]
 80018ec:	8c3b      	ldrh	r3, [r7, #32]
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	8bbb      	ldrh	r3, [r7, #28]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f7ff ff5b 	bl	80017b4 <ST7789_WriteChar>
		x += font.width;
 80018fe:	7d3b      	ldrb	r3, [r7, #20]
 8001900:	461a      	mov	r2, r3
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
		str++;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1cd      	bne.n	80018b2 <ST7789_WriteString+0x18>
 8001916:	e000      	b.n	800191a <ST7789_WriteString+0x80>
				break;
 8001918:	bf00      	nop
	}
	ST7789_UnSelect();
 800191a:	bf00      	nop
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001926:	b002      	add	sp, #8
 8001928:	4770      	bx	lr
	...

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_MspInit+0x5c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <HAL_MspInit+0x5c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6193      	str	r3, [r2, #24]
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_MspInit+0x5c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_MspInit+0x5c>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <HAL_MspInit+0x5c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <HAL_MspInit+0x5c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_MspInit+0x60>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_MspInit+0x60>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000

08001990 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_ADC_MspInit+0x34>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10b      	bne.n	80019ba <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_ADC_MspInit+0x38>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_ADC_MspInit+0x38>)
 80019a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_ADC_MspInit+0x38>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012400 	.word	0x40012400
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a28      	ldr	r2, [pc, #160]	@ (8001a88 <HAL_SPI_MspInit+0xbc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d149      	bne.n	8001a80 <HAL_SPI_MspInit+0xb4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ec:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a26      	ldr	r2, [pc, #152]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 80019f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a20      	ldr	r2, [pc, #128]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <HAL_SPI_MspInit+0xc0>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a1c:	23a0      	movs	r3, #160	@ 0xa0
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4818      	ldr	r0, [pc, #96]	@ (8001a90 <HAL_SPI_MspInit+0xc4>)
 8001a30:	f001 fa18 	bl	8002e64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a36:	4a18      	ldr	r2, [pc, #96]	@ (8001a98 <HAL_SPI_MspInit+0xcc>)
 8001a38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a64:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a66:	f000 ff5b 	bl	8002920 <HAL_DMA_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001a70:	f7ff fcd0 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a78:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a7a:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <HAL_SPI_MspInit+0xc8>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013000 	.word	0x40013000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	20000284 	.word	0x20000284
 8001a98:	40020030 	.word	0x40020030

08001a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a20      	ldr	r2, [pc, #128]	@ (8001b38 <HAL_UART_MspInit+0x9c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d139      	bne.n	8001b30 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_UART_MspInit+0xa0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	480f      	ldr	r0, [pc, #60]	@ (8001b40 <HAL_UART_MspInit+0xa4>)
 8001b02:	f001 f9af 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_UART_MspInit+0xa4>)
 8001b1c:	f001 f9a2 	bl	8002e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2025      	movs	r0, #37	@ 0x25
 8001b26:	f000 fec4 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b2a:	2025      	movs	r0, #37	@ 0x25
 8001b2c:	f000 fedd 	bl	80028ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010800 	.word	0x40010800

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <NMI_Handler+0x4>

08001b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b94:	f000 f94a 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <DMA1_Channel3_IRQHandler+0x10>)
 8001ba2:	f001 f82b 	bl	8002bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000284 	.word	0x20000284

08001bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <USART1_IRQHandler+0x10>)
 8001bb6:	f002 fd17 	bl	80045e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002c8 	.word	0x200002c8

08001bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <_kill>:

int _kill(int pid, int sig)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bdc:	f004 f812 	bl	8005c04 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2216      	movs	r2, #22
 8001be4:	601a      	str	r2, [r3, #0]
  return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_exit>:

void _exit (int status)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffe7 	bl	8001bd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <_exit+0x12>

08001c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00a      	b.n	8001c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1a:	f3af 8000 	nop.w
 8001c1e:	4601      	mov	r1, r0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf0      	blt.n	8001c1a <_read+0x12>
  }

  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e009      	b.n	8001c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf1      	blt.n	8001c54 <_write+0x12>
  }
  return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_close>:

int _close(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f003 ff7a 	bl	8005c04 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20005000 	.word	0x20005000
 8001d3c:	00001000 	.word	0x00001000
 8001d40:	20000c70 	.word	0x20000c70
 8001d44:	20000dc8 	.word	0x20000dc8

08001d48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d54:	f7ff fff8 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5a:	490c      	ldr	r1, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d70:	4c09      	ldr	r4, [pc, #36]	@ (8001d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 ff47 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d82:	f7ff f92f 	bl	8000fe4 <main>
  bx lr
 8001d86:	4770      	bx	lr
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d90:	08008f04 	.word	0x08008f04
  ldr r2, =_sbss
 8001d94:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d98:	20000dc4 	.word	0x20000dc4

08001d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_2_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <HAL_Init+0x28>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_Init+0x28>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 fd73 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fdb6 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fd8b 	bl	8002906 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e08:	f000 fd53 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	20000014 	.word	0x20000014
 8001e28:	20000010 	.word	0x20000010

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000014 	.word	0x20000014
 8001e4c:	20000c74 	.word	0x20000c74

08001e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <HAL_GetTick+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000c74 	.word	0x20000c74

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffe0 	bl	8001e50 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000014 	.word	0x20000014

08001eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0be      	b.n	800204c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fd50 	bl	8001990 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fbc5 	bl	8002680 <ADC_ConversionStop_Disable>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8099 	bne.w	800203a <HAL_ADC_Init+0x18e>
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 8095 	bne.w	800203a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f18:	f023 0302 	bic.w	r3, r3, #2
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7b1b      	ldrb	r3, [r3, #12]
 8001f32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_Init+0xa2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_Init+0xa8>
 8001f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_Init+0xaa>
 8001f54:	2300      	movs	r3, #0
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7d1b      	ldrb	r3, [r3, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d119      	bne.n	8001f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	035a      	lsls	r2, r3, #13
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e00b      	b.n	8001f98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <HAL_ADC_Init+0x1a8>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fc8:	d003      	beq.n	8001fd2 <HAL_ADC_Init+0x126>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_ADC_Init+0x1ac>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002016:	e018      	b.n	800204a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f023 0312 	bic.w	r3, r3, #18
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002038:	e007      	b.n	800204a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ffe1f7fd 	.word	0xffe1f7fd
 8002058:	ff1f0efe 	.word	0xff1f0efe

0800205c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start+0x1a>
 8002072:	2302      	movs	r3, #2
 8002074:	e098      	b.n	80021a8 <HAL_ADC_Start+0x14c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 faa4 	bl	80025cc <ADC_Enable>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8087 	bne.w	800219e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a41      	ldr	r2, [pc, #260]	@ (80021b0 <HAL_ADC_Start+0x154>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_Start+0x5e>
 80020ae:	4b41      	ldr	r3, [pc, #260]	@ (80021b4 <HAL_ADC_Start+0x158>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d026      	beq.n	8002122 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e4:	e01d      	b.n	8002122 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <HAL_ADC_Start+0x158>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_ADC_Start+0xaa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2b      	ldr	r2, [pc, #172]	@ (80021b0 <HAL_ADC_Start+0x154>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10d      	bne.n	8002122 <HAL_ADC_Start+0xc6>
 8002106:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <HAL_ADC_Start+0x158>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800211a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	f023 0206 	bic.w	r2, r3, #6
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c
 800213a:	e002      	b.n	8002142 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f06f 0202 	mvn.w	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800215e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002162:	d113      	bne.n	800218c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_ADC_Start+0x154>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d105      	bne.n	800217a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_ADC_Start+0x158>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	e00c      	b.n	80021a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e003      	b.n	80021a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40012800 	.word	0x40012800
 80021b4:	40012400 	.word	0x40012400

080021b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ce:	f7ff fe3f 	bl	8001e50 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0d3      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d131      	bne.n	800226c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d12a      	bne.n	800226c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002216:	e021      	b.n	800225c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800221e:	d01d      	beq.n	800225c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_PollForConversion+0x7e>
 8002226:	f7ff fe13 	bl	8001e50 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d212      	bcs.n	800225c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0a2      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0d6      	beq.n	8002218 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800226a:	e070      	b.n	800234e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800226c:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <HAL_ADC_PollForConversion+0x1f4>)
 800226e:	681c      	ldr	r4, [r3, #0]
 8002270:	2002      	movs	r0, #2
 8002272:	f001 fc59 	bl	8003b28 <HAL_RCCEx_GetPeriphCLKFreq>
 8002276:	4603      	mov	r3, r0
 8002278:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6919      	ldr	r1, [r3, #16]
 8002282:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_ADC_PollForConversion+0x1f8>)
 8002284:	400b      	ands	r3, r1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_ADC_PollForConversion+0x104>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68d9      	ldr	r1, [r3, #12]
 8002290:	4b48      	ldr	r3, [pc, #288]	@ (80023b4 <HAL_ADC_PollForConversion+0x1fc>)
 8002292:	400b      	ands	r3, r1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d111      	bne.n	80022bc <HAL_ADC_PollForConversion+0x104>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	4b46      	ldr	r3, [pc, #280]	@ (80023b8 <HAL_ADC_PollForConversion+0x200>)
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x100>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	4b43      	ldr	r3, [pc, #268]	@ (80023bc <HAL_ADC_PollForConversion+0x204>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x100>
 80022b4:	2314      	movs	r3, #20
 80022b6:	e020      	b.n	80022fa <HAL_ADC_PollForConversion+0x142>
 80022b8:	2329      	movs	r3, #41	@ 0x29
 80022ba:	e01e      	b.n	80022fa <HAL_ADC_PollForConversion+0x142>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HAL_ADC_PollForConversion+0x200>)
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x120>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68d9      	ldr	r1, [r3, #12]
 80022d0:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_ADC_PollForConversion+0x204>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x13c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	4b38      	ldr	r3, [pc, #224]	@ (80023c0 <HAL_ADC_PollForConversion+0x208>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_ADC_PollForConversion+0x140>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_ADC_PollForConversion+0x208>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_PollForConversion+0x140>
 80022f4:	2354      	movs	r3, #84	@ 0x54
 80022f6:	e000      	b.n	80022fa <HAL_ADC_PollForConversion+0x142>
 80022f8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002300:	e021      	b.n	8002346 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002308:	d01a      	beq.n	8002340 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_ADC_PollForConversion+0x168>
 8002310:	f7ff fd9e 	bl	8001e50 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d20f      	bcs.n	8002340 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d90b      	bls.n	8002340 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e030      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	429a      	cmp	r2, r3
 800234c:	d8d9      	bhi.n	8002302 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f06f 0212 	mvn.w	r2, #18
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800236e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002372:	d115      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	24924924 	.word	0x24924924
 80023b4:	00924924 	.word	0x00924924
 80023b8:	12492492 	.word	0x12492492
 80023bc:	00492492 	.word	0x00492492
 80023c0:	00249249 	.word	0x00249249

080023c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x20>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0dc      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1da>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d81c      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b05      	subs	r3, #5
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	4019      	ands	r1, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b05      	subs	r3, #5
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	635a      	str	r2, [r3, #52]	@ 0x34
 8002444:	e03c      	b.n	80024c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d81c      	bhi.n	8002488 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b23      	subs	r3, #35	@ 0x23
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	4019      	ands	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3b23      	subs	r3, #35	@ 0x23
 800247a:	fa00 f203 	lsl.w	r2, r0, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30
 8002486:	e01b      	b.n	80024c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b41      	subs	r3, #65	@ 0x41
 800249a:	221f      	movs	r2, #31
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4019      	ands	r1, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	@ 0x41
 80024b4:	fa00 f203 	lsl.w	r2, r0, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d91c      	bls.n	8002502 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	3b1e      	subs	r3, #30
 80024da:	2207      	movs	r2, #7
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4019      	ands	r1, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6898      	ldr	r0, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	3b1e      	subs	r3, #30
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e019      	b.n	8002536 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6919      	ldr	r1, [r3, #16]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	fa00 f203 	lsl.w	r2, r0, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b10      	cmp	r3, #16
 800253c:	d003      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002542:	2b11      	cmp	r3, #17
 8002544:	d132      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d125      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d126      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800256c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b10      	cmp	r3, #16
 8002574:	d11a      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a13      	ldr	r2, [pc, #76]	@ (80025c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	0c9a      	lsrs	r2, r3, #18
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800258c:	e002      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3b01      	subs	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_ConfigChannel+0x1b2>
 800259a:	e007      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40012400 	.word	0x40012400
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	431bde83 	.word	0x431bde83

080025cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d040      	beq.n	800266c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <ADC_Enable+0xac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <ADC_Enable+0xb0>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002608:	e002      	b.n	8002610 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3b01      	subs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f9      	bne.n	800260a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002616:	f7ff fc1b 	bl	8001e50 <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800261c:	e01f      	b.n	800265e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261e:	f7ff fc17 	bl	8001e50 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d918      	bls.n	800265e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d011      	beq.n	800265e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e007      	b.n	800266e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d1d8      	bne.n	800261e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c
 800267c:	431bde83 	.word	0x431bde83

08002680 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d12e      	bne.n	80026f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026aa:	f7ff fbd1 	bl	8001e50 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026b0:	e01b      	b.n	80026ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026b2:	f7ff fbcd 	bl	8001e50 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d914      	bls.n	80026ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10d      	bne.n	80026ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d0dc      	beq.n	80026b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4906      	ldr	r1, [pc, #24]	@ (800279c <__NVIC_EnableIRQ+0x34>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	@ (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	@ (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800287c:	f7ff ff90 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff2d 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff42 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff90 	bl	80027f4 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5f 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff35 	bl	8002768 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e043      	b.n	80029be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <HAL_DMA_Init+0xa8>)
 800293e:	4413      	add	r3, r2
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <HAL_DMA_Init+0xac>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	009a      	lsls	r2, r3, #2
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <HAL_DMA_Init+0xb0>)
 8002952:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800296a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800296e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	bffdfff8 	.word	0xbffdfff8
 80029cc:	cccccccd 	.word	0xcccccccd
 80029d0:	40020000 	.word	0x40020000

080029d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e04b      	b.n	8002a8c <HAL_DMA_Start_IT+0xb8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13a      	bne.n	8002a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f9eb 	bl	8002e08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 020e 	orr.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00f      	b.n	8002a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e020      	b.n	8002b00 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 020e 	bic.w	r2, r2, #14
 8002acc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d005      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2204      	movs	r2, #4
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e051      	b.n	8002bd4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020e 	bic.w	r2, r2, #14
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a22      	ldr	r2, [pc, #136]	@ (8002be0 <HAL_DMA_Abort_IT+0xd4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d029      	beq.n	8002bae <HAL_DMA_Abort_IT+0xa2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a21      	ldr	r2, [pc, #132]	@ (8002be4 <HAL_DMA_Abort_IT+0xd8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d022      	beq.n	8002baa <HAL_DMA_Abort_IT+0x9e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <HAL_DMA_Abort_IT+0xdc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_DMA_Abort_IT+0x98>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <HAL_DMA_Abort_IT+0xe0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_Abort_IT+0x92>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_DMA_Abort_IT+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00a      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x8c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_DMA_Abort_IT+0xe8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <HAL_DMA_Abort_IT+0x86>
 8002b8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b90:	e00e      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b96:	e00b      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002b98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b9c:	e008      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba2:	e005      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba8:	e002      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002baa:	2310      	movs	r3, #16
 8002bac:	e000      	b.n	8002bb0 <HAL_DMA_Abort_IT+0xa4>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <HAL_DMA_Abort_IT+0xec>)
 8002bb2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
    } 
  }
  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40020008 	.word	0x40020008
 8002be4:	4002001c 	.word	0x4002001c
 8002be8:	40020030 	.word	0x40020030
 8002bec:	40020044 	.word	0x40020044
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	4002006c 	.word	0x4002006c
 8002bf8:	40020000 	.word	0x40020000

08002bfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	2204      	movs	r2, #4
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d04f      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0xc8>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a66      	ldr	r2, [pc, #408]	@ (8002dec <HAL_DMA_IRQHandler+0x1f0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d029      	beq.n	8002caa <HAL_DMA_IRQHandler+0xae>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a65      	ldr	r2, [pc, #404]	@ (8002df0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d022      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xaa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a63      	ldr	r2, [pc, #396]	@ (8002df4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xa4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a62      	ldr	r2, [pc, #392]	@ (8002df8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d012      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x9e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <HAL_DMA_IRQHandler+0x200>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00a      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x98>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5f      	ldr	r2, [pc, #380]	@ (8002e00 <HAL_DMA_IRQHandler+0x204>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d102      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x92>
 8002c88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c8c:	e00e      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002c8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c92:	e00b      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002c94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c98:	e008      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002c9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c9e:	e005      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca4:	e002      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002ca6:	2340      	movs	r3, #64	@ 0x40
 8002ca8:	e000      	b.n	8002cac <HAL_DMA_IRQHandler+0xb0>
 8002caa:	2304      	movs	r3, #4
 8002cac:	4a55      	ldr	r2, [pc, #340]	@ (8002e04 <HAL_DMA_IRQHandler+0x208>)
 8002cae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8094 	beq.w	8002de2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc2:	e08e      	b.n	8002de2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	2202      	movs	r2, #2
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d056      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x186>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d051      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020a 	bic.w	r2, r2, #10
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a38      	ldr	r2, [pc, #224]	@ (8002dec <HAL_DMA_IRQHandler+0x1f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d029      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x166>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a37      	ldr	r2, [pc, #220]	@ (8002df0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x162>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	@ (8002df4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x15c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x156>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a32      	ldr	r2, [pc, #200]	@ (8002dfc <HAL_DMA_IRQHandler+0x200>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x150>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_DMA_IRQHandler+0x204>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x14a>
 8002d40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d44:	e00e      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4a:	e00b      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d50:	e008      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d56:	e005      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d5c:	e002      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_IRQHandler+0x168>
 8002d62:	2302      	movs	r3, #2
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <HAL_DMA_IRQHandler+0x208>)
 8002d66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d034      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d80:	e02f      	b.n	8002de2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2208      	movs	r2, #8
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d028      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x1e8>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d023      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020e 	bic.w	r2, r2, #14
 8002daa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
    }
  }
  return;
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
}
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40020008 	.word	0x40020008
 8002df0:	4002001c 	.word	0x4002001c
 8002df4:	40020030 	.word	0x40020030
 8002df8:	40020044 	.word	0x40020044
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	4002006c 	.word	0x4002006c
 8002e04:	40020000 	.word	0x40020000

08002e08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d108      	bne.n	8002e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e46:	e007      	b.n	8002e58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b08b      	sub	sp, #44	@ 0x2c
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e76:	e169      	b.n	800314c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f040 8158 	bne.w	8003146 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a9a      	ldr	r2, [pc, #616]	@ (8003104 <HAL_GPIO_Init+0x2a0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d05e      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
 8002ea0:	4a98      	ldr	r2, [pc, #608]	@ (8003104 <HAL_GPIO_Init+0x2a0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d875      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002ea6:	4a98      	ldr	r2, [pc, #608]	@ (8003108 <HAL_GPIO_Init+0x2a4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d058      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
 8002eac:	4a96      	ldr	r2, [pc, #600]	@ (8003108 <HAL_GPIO_Init+0x2a4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d86f      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002eb2:	4a96      	ldr	r2, [pc, #600]	@ (800310c <HAL_GPIO_Init+0x2a8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d052      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
 8002eb8:	4a94      	ldr	r2, [pc, #592]	@ (800310c <HAL_GPIO_Init+0x2a8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d869      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002ebe:	4a94      	ldr	r2, [pc, #592]	@ (8003110 <HAL_GPIO_Init+0x2ac>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d04c      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
 8002ec4:	4a92      	ldr	r2, [pc, #584]	@ (8003110 <HAL_GPIO_Init+0x2ac>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d863      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002eca:	4a92      	ldr	r2, [pc, #584]	@ (8003114 <HAL_GPIO_Init+0x2b0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d046      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
 8002ed0:	4a90      	ldr	r2, [pc, #576]	@ (8003114 <HAL_GPIO_Init+0x2b0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d85d      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002ed6:	2b12      	cmp	r3, #18
 8002ed8:	d82a      	bhi.n	8002f30 <HAL_GPIO_Init+0xcc>
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d859      	bhi.n	8002f92 <HAL_GPIO_Init+0x12e>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <HAL_GPIO_Init+0x80>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f5f 	.word	0x08002f5f
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	08002f4b 	.word	0x08002f4b
 8002ef0:	08002f8d 	.word	0x08002f8d
 8002ef4:	08002f93 	.word	0x08002f93
 8002ef8:	08002f93 	.word	0x08002f93
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08002f93 	.word	0x08002f93
 8002f04:	08002f93 	.word	0x08002f93
 8002f08:	08002f93 	.word	0x08002f93
 8002f0c:	08002f93 	.word	0x08002f93
 8002f10:	08002f93 	.word	0x08002f93
 8002f14:	08002f93 	.word	0x08002f93
 8002f18:	08002f93 	.word	0x08002f93
 8002f1c:	08002f93 	.word	0x08002f93
 8002f20:	08002f93 	.word	0x08002f93
 8002f24:	08002f93 	.word	0x08002f93
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f55 	.word	0x08002f55
 8002f30:	4a79      	ldr	r2, [pc, #484]	@ (8003118 <HAL_GPIO_Init+0x2b4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f36:	e02c      	b.n	8002f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	623b      	str	r3, [r7, #32]
          break;
 8002f3e:	e029      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	3304      	adds	r3, #4
 8002f46:	623b      	str	r3, [r7, #32]
          break;
 8002f48:	e024      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	623b      	str	r3, [r7, #32]
          break;
 8002f52:	e01f      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	623b      	str	r3, [r7, #32]
          break;
 8002f5c:	e01a      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f66:	2304      	movs	r3, #4
 8002f68:	623b      	str	r3, [r7, #32]
          break;
 8002f6a:	e013      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f74:	2308      	movs	r3, #8
 8002f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	611a      	str	r2, [r3, #16]
          break;
 8002f7e:	e009      	b.n	8002f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f80:	2308      	movs	r3, #8
 8002f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	615a      	str	r2, [r3, #20]
          break;
 8002f8a:	e003      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
          break;
 8002f90:	e000      	b.n	8002f94 <HAL_GPIO_Init+0x130>
          break;
 8002f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2bff      	cmp	r3, #255	@ 0xff
 8002f98:	d801      	bhi.n	8002f9e <HAL_GPIO_Init+0x13a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_Init+0x13e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2bff      	cmp	r3, #255	@ 0xff
 8002fa8:	d802      	bhi.n	8002fb0 <HAL_GPIO_Init+0x14c>
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	e002      	b.n	8002fb6 <HAL_GPIO_Init+0x152>
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	3b08      	subs	r3, #8
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	210f      	movs	r1, #15
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80b1 	beq.w	8003146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <HAL_GPIO_Init+0x2b8>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800311c <HAL_GPIO_Init+0x2b8>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_GPIO_Init+0x2b8>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ffc:	4a48      	ldr	r2, [pc, #288]	@ (8003120 <HAL_GPIO_Init+0x2bc>)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <HAL_GPIO_Init+0x2c0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_GPIO_Init+0x1ec>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3f      	ldr	r2, [pc, #252]	@ (8003128 <HAL_GPIO_Init+0x2c4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00d      	beq.n	800304c <HAL_GPIO_Init+0x1e8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3e      	ldr	r2, [pc, #248]	@ (800312c <HAL_GPIO_Init+0x2c8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <HAL_GPIO_Init+0x1e4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3d      	ldr	r2, [pc, #244]	@ (8003130 <HAL_GPIO_Init+0x2cc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_GPIO_Init+0x1e0>
 8003040:	2303      	movs	r3, #3
 8003042:	e006      	b.n	8003052 <HAL_GPIO_Init+0x1ee>
 8003044:	2304      	movs	r3, #4
 8003046:	e004      	b.n	8003052 <HAL_GPIO_Init+0x1ee>
 8003048:	2302      	movs	r3, #2
 800304a:	e002      	b.n	8003052 <HAL_GPIO_Init+0x1ee>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_GPIO_Init+0x1ee>
 8003050:	2300      	movs	r3, #0
 8003052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003054:	f002 0203 	and.w	r2, r2, #3
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	4093      	lsls	r3, r2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003062:	492f      	ldr	r1, [pc, #188]	@ (8003120 <HAL_GPIO_Init+0x2bc>)
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800307c:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	492c      	ldr	r1, [pc, #176]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]
 8003088:	e006      	b.n	8003098 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800308a:	4b2a      	ldr	r3, [pc, #168]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	43db      	mvns	r3, r3
 8003092:	4928      	ldr	r1, [pc, #160]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 8003094:	4013      	ands	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a4:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4922      	ldr	r1, [pc, #136]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	491e      	ldr	r1, [pc, #120]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030bc:	4013      	ands	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4918      	ldr	r1, [pc, #96]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030da:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	4914      	ldr	r1, [pc, #80]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d021      	beq.n	8003138 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	490e      	ldr	r1, [pc, #56]	@ (8003134 <HAL_GPIO_Init+0x2d0>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e021      	b.n	8003146 <HAL_GPIO_Init+0x2e2>
 8003102:	bf00      	nop
 8003104:	10320000 	.word	0x10320000
 8003108:	10310000 	.word	0x10310000
 800310c:	10220000 	.word	0x10220000
 8003110:	10210000 	.word	0x10210000
 8003114:	10120000 	.word	0x10120000
 8003118:	10110000 	.word	0x10110000
 800311c:	40021000 	.word	0x40021000
 8003120:	40010000 	.word	0x40010000
 8003124:	40010800 	.word	0x40010800
 8003128:	40010c00 	.word	0x40010c00
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_GPIO_Init+0x304>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	43db      	mvns	r3, r3
 8003140:	4909      	ldr	r1, [pc, #36]	@ (8003168 <HAL_GPIO_Init+0x304>)
 8003142:	4013      	ands	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	3301      	adds	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f ae8e 	bne.w	8002e78 <HAL_GPIO_Init+0x14>
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	372c      	adds	r7, #44	@ 0x2c
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e272      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8087 	beq.w	80032ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	4b92      	ldr	r3, [pc, #584]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d112      	bne.n	80031fa <HAL_RCC_OscConfig+0x5e>
 80031d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e0:	d10b      	bne.n	80031fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e2:	4b89      	ldr	r3, [pc, #548]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x12c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d168      	bne.n	80032c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e24c      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x76>
 8003204:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7f      	ldr	r2, [pc, #508]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e02e      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x98>
 800321a:	4b7b      	ldr	r3, [pc, #492]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7a      	ldr	r2, [pc, #488]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b78      	ldr	r3, [pc, #480]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a77      	ldr	r2, [pc, #476]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xbc>
 800323e:	4b72      	ldr	r3, [pc, #456]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a71      	ldr	r2, [pc, #452]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6e      	ldr	r2, [pc, #440]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003258:	4b6b      	ldr	r3, [pc, #428]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6a      	ldr	r2, [pc, #424]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a67      	ldr	r2, [pc, #412]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fdea 	bl	8001e50 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fde6 	bl	8001e50 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	@ 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e200      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b5d      	ldr	r3, [pc, #372]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xe4>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fdd6 	bl	8001e50 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fdd2 	bl	8001e50 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1ec      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b53      	ldr	r3, [pc, #332]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x10c>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032e2:	4b49      	ldr	r3, [pc, #292]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x18c>
 80032ee:	4b46      	ldr	r3, [pc, #280]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b43      	ldr	r3, [pc, #268]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x176>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1c0      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4939      	ldr	r1, [pc, #228]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b36      	ldr	r3, [pc, #216]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fd8b 	bl	8001e50 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fd87 	bl	8001e50 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1a1      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2d      	ldr	r3, [pc, #180]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4927      	ldr	r1, [pc, #156]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fd6a 	bl	8001e50 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe fd66 	bl	8001e50 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e180      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03a      	beq.n	8003420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d019      	beq.n	80033e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <HAL_RCC_OscConfig+0x274>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fd4a 	bl	8001e50 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fd46 	bl	8001e50 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e160      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f000 face 	bl	8003980 <RCC_Delay>
 80033e4:	e01c      	b.n	8003420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_RCC_OscConfig+0x274>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ec:	f7fe fd30 	bl	8001e50 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f2:	e00f      	b.n	8003414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe fd2c 	bl	8001e50 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d908      	bls.n	8003414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e146      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	42420000 	.word	0x42420000
 8003410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b92      	ldr	r3, [pc, #584]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e9      	bne.n	80033f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a6 	beq.w	800357a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b8b      	ldr	r3, [pc, #556]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	4b88      	ldr	r3, [pc, #544]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4a87      	ldr	r2, [pc, #540]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003448:	61d3      	str	r3, [r2, #28]
 800344a:	4b85      	ldr	r3, [pc, #532]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCC_OscConfig+0x4c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b7f      	ldr	r3, [pc, #508]	@ (8003664 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7e      	ldr	r2, [pc, #504]	@ (8003664 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe fced 	bl	8001e50 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe fce9 	bl	8001e50 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	@ 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e103      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b75      	ldr	r3, [pc, #468]	@ (8003664 <HAL_RCC_OscConfig+0x4c8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x312>
 80034a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6213      	str	r3, [r2, #32]
 80034ac:	e02d      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x334>
 80034b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a69      	ldr	r2, [pc, #420]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a66      	ldr	r2, [pc, #408]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	e01c      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x356>
 80034d8:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a60      	ldr	r2, [pc, #384]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	4b58      	ldr	r3, [pc, #352]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a57      	ldr	r2, [pc, #348]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fc9d 	bl	8001e50 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fc99 	bl	8001e50 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0b1      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b4b      	ldr	r3, [pc, #300]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCC_OscConfig+0x37e>
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe fc87 	bl	8001e50 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fc83 	bl	8001e50 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e09b      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355c:	4b40      	ldr	r3, [pc, #256]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4a3b      	ldr	r2, [pc, #236]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8087 	beq.w	8003692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003584:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d061      	beq.n	8003654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d146      	bne.n	8003626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b33      	ldr	r3, [pc, #204]	@ (8003668 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fc57 	bl	8001e50 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe fc53 	bl	8001e50 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e06d      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035cc:	d108      	bne.n	80035e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4921      	ldr	r1, [pc, #132]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a19      	ldr	r1, [r3, #32]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	430b      	orrs	r3, r1
 80035f2:	491b      	ldr	r1, [pc, #108]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fc27 	bl	8001e50 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fc23 	bl	8001e50 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003618:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x46a>
 8003624:	e035      	b.n	8003692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <HAL_RCC_OscConfig+0x4cc>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fc10 	bl	8001e50 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fc0c 	bl	8001e50 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e026      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x498>
 8003652:	e01e      	b.n	8003692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e019      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
 8003668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_OscConfig+0x500>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	429a      	cmp	r2, r3
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d0      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b67      	ldr	r3, [pc, #412]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4965      	ldr	r1, [pc, #404]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a58      	ldr	r2, [pc, #352]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800371e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d040      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b41      	ldr	r3, [pc, #260]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e073      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4936      	ldr	r1, [pc, #216]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fe fb5e 	bl	8001e50 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fe fb5a 	bl	8001e50 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e053      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d210      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4922      	ldr	r1, [pc, #136]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f821 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	@ (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1cc>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fabc 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40022000 	.word	0x40022000
 8003864:	40021000 	.word	0x40021000
 8003868:	08008b40 	.word	0x08008b40
 800386c:	2000000c 	.word	0x2000000c
 8003870:	20000010 	.word	0x20000010

08003874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x94>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x30>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x36>
 80038a2:	e027      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a4:	4b19      	ldr	r3, [pc, #100]	@ (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038a6:	613b      	str	r3, [r7, #16]
      break;
 80038a8:	e027      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0c5b      	lsrs	r3, r3, #17
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	4a11      	ldr	r2, [pc, #68]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	fb03 f202 	mul.w	r2, r3, r2
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e004      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	613b      	str	r3, [r7, #16]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	613b      	str	r3, [r7, #16]
      break;
 80038f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fa:	693b      	ldr	r3, [r7, #16]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	007a1200 	.word	0x007a1200
 8003910:	08008b58 	.word	0x08008b58
 8003914:	08008b68 	.word	0x08008b68
 8003918:	003d0900 	.word	0x003d0900

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b02      	ldr	r3, [pc, #8]	@ (800392c <HAL_RCC_GetHCLKFreq+0x10>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	2000000c 	.word	0x2000000c

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	08008b50 	.word	0x08008b50

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffde 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	08008b50 	.word	0x08008b50

08003980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <RCC_Delay+0x34>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <RCC_Delay+0x38>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a5b      	lsrs	r3, r3, #9
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800399c:	bf00      	nop
  }
  while (Delay --);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <RCC_Delay+0x1c>
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d07d      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4a4b      	ldr	r2, [pc, #300]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	61d3      	str	r3, [r2, #28]
 80039f4:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b46      	ldr	r3, [pc, #280]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d118      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a10:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a42      	ldr	r2, [pc, #264]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fa18 	bl	8001e50 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	e008      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fe fa14 	bl	8001e50 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e06d      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b3a      	ldr	r3, [pc, #232]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a42:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d027      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a70:	4b2c      	ldr	r3, [pc, #176]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a76:	4a29      	ldr	r2, [pc, #164]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe f9e3 	bl	8001e50 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f9df 	bl	8001e50 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e036      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ee      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4917      	ldr	r1, [pc, #92]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	490b      	ldr	r1, [pc, #44]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afe:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4904      	ldr	r1, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
 8003b24:	42420440 	.word	0x42420440

08003b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	f200 808a 	bhi.w	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d045      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b5e:	e082      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b60:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b66:	4b45      	ldr	r3, [pc, #276]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d07b      	beq.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	0c9b      	lsrs	r3, r3, #18
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	4a41      	ldr	r2, [pc, #260]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d015      	beq.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0c5b      	lsrs	r3, r3, #17
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	4a3b      	ldr	r2, [pc, #236]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ba4:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4a34      	ldr	r2, [pc, #208]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	61bb      	str	r3, [r7, #24]
      break;
 8003bd2:	e04a      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
      break;
 8003be2:	e042      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003be4:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e01f      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c12:	d109      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c20:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e00f      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c32:	d11c      	bne.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d016      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c40:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c44:	61bb      	str	r3, [r7, #24]
      break;
 8003c46:	e012      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c48:	e011      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c4a:	f7ff fe85 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0b9b      	lsrs	r3, r3, #14
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]
      break;
 8003c64:	e004      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c6e:	bf00      	nop
    }
  }
  return (frequency);
 8003c70:	69bb      	ldr	r3, [r7, #24]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08008b6c 	.word	0x08008b6c
 8003c84:	08008b7c 	.word	0x08008b7c
 8003c88:	007a1200 	.word	0x007a1200
 8003c8c:	003d0900 	.word	0x003d0900
 8003c90:	aaaaaaab 	.word	0xaaaaaaab

08003c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e076      	b.n	8003d94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb6:	d009      	beq.n	8003ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
 8003cbe:	e005      	b.n	8003ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fe70 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	ea42 0103 	orr.w	r1, r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	0c1a      	lsrs	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f002 0204 	and.w	r2, r2, #4
 8003d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dac:	f7fe f850 	bl	8001e50 <HAL_GetTick>
 8003db0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e12a      	b.n	800401c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_Transmit+0x36>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e122      	b.n	800401c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_SPI_Transmit+0x48>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e11b      	b.n	800401c <HAL_SPI_Transmit+0x280>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2203      	movs	r2, #3
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e32:	d10f      	bne.n	8003e54 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d007      	beq.n	8003e72 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e7a:	d152      	bne.n	8003f22 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_Transmit+0xee>
 8003e84:	8b7b      	ldrh	r3, [r7, #26]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d145      	bne.n	8003f16 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eae:	e032      	b.n	8003f16 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d112      	bne.n	8003ee4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ee2:	e018      	b.n	8003f16 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee4:	f7fd ffb4 	bl	8001e50 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d803      	bhi.n	8003efc <HAL_SPI_Transmit+0x160>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_Transmit+0x166>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e082      	b.n	800401c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1c7      	bne.n	8003eb0 <HAL_SPI_Transmit+0x114>
 8003f20:	e053      	b.n	8003fca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Transmit+0x194>
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d147      	bne.n	8003fc0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f56:	e033      	b.n	8003fc0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d113      	bne.n	8003f8e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f8c:	e018      	b.n	8003fc0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8e:	f7fd ff5f 	bl	8001e50 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d803      	bhi.n	8003fa6 <HAL_SPI_Transmit+0x20a>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa4:	d102      	bne.n	8003fac <HAL_SPI_Transmit+0x210>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e02d      	b.n	800401c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1c6      	bne.n	8003f58 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f9fe 	bl	80043d0 <SPI_EndRxTxTransaction>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800401a:	2300      	movs	r3, #0
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	e097      	b.n	8004172 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit_DMA+0x2a>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e08f      	b.n	8004172 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_SPI_Transmit_DMA+0x3c>
 800405c:	2302      	movs	r3, #2
 800405e:	e088      	b.n	8004172 <HAL_SPI_Transmit_DMA+0x14e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ae:	d10f      	bne.n	80040d0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <HAL_SPI_Transmit_DMA+0x158>)
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <HAL_SPI_Transmit_DMA+0x15c>)
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_SPI_Transmit_DMA+0x160>)
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	4619      	mov	r1, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004106:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004108:	f7fe fc64 	bl	80029d4 <HAL_DMA_Start_IT>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	f043 0210 	orr.w	r2, r3, #16
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e023      	b.n	8004172 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d007      	beq.n	8004148 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0220 	orr.w	r2, r2, #32
 800415e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0202 	orr.w	r2, r2, #2
 800416e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	08004265 	.word	0x08004265
 8004180:	080041bf 	.word	0x080041bf
 8004184:	08004281 	.word	0x08004281

08004188 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041cc:	f7fd fe40 	bl	8001e50 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d03b      	beq.n	8004258 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0220 	bic.w	r2, r2, #32
 80041ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0202 	bic.w	r2, r2, #2
 80041fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	2164      	movs	r1, #100	@ 0x64
 8004204:	6978      	ldr	r0, [r7, #20]
 8004206:	f000 f8e3 	bl	80043d0 <SPI_EndRxTxTransaction>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f7ff ffab 	bl	80041ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004256:	e002      	b.n	800425e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f7ff ff95 	bl	8004188 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff91 	bl	800419a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0203 	bic.w	r2, r2, #3
 800429c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	f043 0210 	orr.w	r2, r3, #16
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff ff7a 	bl	80041ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d0:	f7fd fdbe 	bl	8001e50 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e0:	f7fd fdb6 	bl	8001e50 <HAL_GetTick>
 80042e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e6:	4b39      	ldr	r3, [pc, #228]	@ (80043cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	0d1b      	lsrs	r3, r3, #20
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f6:	e054      	b.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042fe:	d050      	beq.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004300:	f7fd fda6 	bl	8001e50 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	d902      	bls.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d13d      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432e:	d111      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004338:	d004      	beq.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004342:	d107      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435c:	d10f      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800437c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e017      	b.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3b01      	subs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d19b      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2201      	movs	r2, #1
 80043e4:	2102      	movs	r1, #2
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff ff6a 	bl	80042c0 <SPI_WaitFlagStateUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e013      	b.n	800442a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2200      	movs	r2, #0
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff57 	bl	80042c0 <SPI_WaitFlagStateUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e000      	b.n	800442a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e042      	b.n	80044ca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fb1f 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2224      	movs	r2, #36	@ 0x24
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004474:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd62 	bl	8004f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08a      	sub	sp, #40	@ 0x28
 80044d6:	af02      	add	r7, sp, #8
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d175      	bne.n	80045de <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_UART_Transmit+0x2c>
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06e      	b.n	80045e0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2221      	movs	r2, #33	@ 0x21
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004510:	f7fd fc9e 	bl	8001e50 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d108      	bne.n	800453e <HAL_UART_Transmit+0x6c>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e003      	b.n	8004546 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004546:	e02e      	b.n	80045a6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	@ 0x80
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fb00 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e03a      	b.n	80045e0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	3302      	adds	r3, #2
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e007      	b.n	8004598 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3301      	adds	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1cb      	bne.n	8004548 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 facc 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e006      	b.n	80045e0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b0ba      	sub	sp, #232	@ 0xe8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10f      	bne.n	800464e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_UART_IRQHandler+0x66>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fbbc 	bl	8004dc4 <UART_Receive_IT>
      return;
 800464c:	e25b      	b.n	8004b06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800464e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80de 	beq.w	8004814 <HAL_UART_IRQHandler+0x22c>
 8004658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004668:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80d1 	beq.w	8004814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_UART_IRQHandler+0xae>
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_UART_IRQHandler+0xd2>
 80046a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0202 	orr.w	r2, r3, #2
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_UART_IRQHandler+0xf6>
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0204 	orr.w	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_UART_IRQHandler+0x126>
 80046ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	f043 0208 	orr.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 81f2 	beq.w	8004afc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_UART_IRQHandler+0x14e>
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb47 	bl	8004dc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <HAL_UART_IRQHandler+0x17a>
 800475a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04f      	beq.n	8004802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa51 	bl	8004c0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d041      	beq.n	80047fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800478c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1d9      	bne.n	8004776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d013      	beq.n	80047f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	4a7e      	ldr	r2, [pc, #504]	@ (80049c8 <HAL_UART_IRQHandler+0x3e0>)
 80047d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f998 	bl	8002b0c <HAL_DMA_Abort_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00e      	b.n	8004810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f99c 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00a      	b.n	8004810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f998 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e006      	b.n	8004810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f994 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800480e:	e175      	b.n	8004afc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	bf00      	nop
    return;
 8004812:	e173      	b.n	8004afc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	f040 814f 	bne.w	8004abc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8148 	beq.w	8004abc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8141 	beq.w	8004abc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80b6 	beq.w	80049cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800486c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8145 	beq.w	8004b00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800487a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800487e:	429a      	cmp	r2, r3
 8004880:	f080 813e 	bcs.w	8004b00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800488a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b20      	cmp	r3, #32
 8004894:	f000 8088 	beq.w	80049a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1d9      	bne.n	8004898 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004908:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800490c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004910:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800491a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e1      	bne.n	80048e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004944:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004946:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800494a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e3      	bne.n	8004920 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004978:	f023 0310 	bic.w	r3, r3, #16
 800497c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800498a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800498c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe f876 	bl	8002a94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8bf 	bl	8004b42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049c4:	e09c      	b.n	8004b00 <HAL_UART_IRQHandler+0x518>
 80049c6:	bf00      	nop
 80049c8:	08004ccf 	.word	0x08004ccf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 808e 	beq.w	8004b04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8089 	beq.w	8004b04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e3      	bne.n	80049f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0310 	bic.w	r3, r3, #16
 8004a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a94:	61fa      	str	r2, [r7, #28]
 8004a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e3      	bne.n	8004a70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f844 	bl	8004b42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aba:	e023      	b.n	8004b04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_UART_IRQHandler+0x4f4>
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f90e 	bl	8004cf6 <UART_Transmit_IT>
    return;
 8004ada:	e014      	b.n	8004b06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_UART_IRQHandler+0x51e>
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f94d 	bl	8004d94 <UART_EndTransmit_IT>
    return;
 8004afa:	e004      	b.n	8004b06 <HAL_UART_IRQHandler+0x51e>
    return;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b04:	bf00      	nop
  }
}
 8004b06:	37e8      	adds	r7, #232	@ 0xe8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	e03b      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b70:	d037      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fd f96d 	bl	8001e50 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e03a      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d023      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b80      	cmp	r3, #128	@ 0x80
 8004b9e:	d020      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b40      	cmp	r3, #64	@ 0x40
 8004ba4:	d01d      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d116      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f81d 	bl	8004c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e00f      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d0b4      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b095      	sub	sp, #84	@ 0x54
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c32:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d119      	bne.n	8004cb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f023 0310 	bic.w	r3, r3, #16
 8004c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ca2:	61ba      	str	r2, [r7, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cc4:	bf00      	nop
 8004cc6:	3754      	adds	r7, #84	@ 0x54
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff21 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b21      	cmp	r3, #33	@ 0x21
 8004d08:	d13e      	bne.n	8004d88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	d114      	bne.n	8004d3e <UART_Transmit_IT+0x48>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	621a      	str	r2, [r3, #32]
 8004d3c:	e008      	b.n	8004d50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6211      	str	r1, [r2, #32]
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10f      	bne.n	8004d84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004daa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fea9 	bl	8004b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	@ 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b22      	cmp	r3, #34	@ 0x22
 8004dd6:	f040 80ae 	bne.w	8004f36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	d117      	bne.n	8004e14 <UART_Receive_IT+0x50>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e12:	e026      	b.n	8004e62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e26:	d007      	beq.n	8004e38 <UART_Receive_IT+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <UART_Receive_IT+0x82>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	e008      	b.n	8004e58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d15d      	bne.n	8004f32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0220 	bic.w	r2, r2, #32
 8004e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d135      	bne.n	8004f28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee2:	623a      	str	r2, [r7, #32]
 8004ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d10a      	bne.n	8004f1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fe0e 	bl	8004b42 <HAL_UARTEx_RxEventCallback>
 8004f26:	e002      	b.n	8004f2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fdf8 	bl	8004b1e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e002      	b.n	8004f38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3730      	adds	r7, #48	@ 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f7a:	f023 030c 	bic.w	r3, r3, #12
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <UART_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe fcd6 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	e002      	b.n	8004fb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7fe fcbe 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004fb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	4a22      	ldr	r2, [pc, #136]	@ (8005058 <UART_SetConfig+0x118>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	0119      	lsls	r1, r3, #4
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fec:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <UART_SetConfig+0x118>)
 8004fee:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2064      	movs	r0, #100	@ 0x64
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	@ 0x32
 8005000:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <UART_SetConfig+0x118>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800500c:	4419      	add	r1, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009a      	lsls	r2, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	fbb2 f2f3 	udiv	r2, r2, r3
 8005024:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <UART_SetConfig+0x118>)
 8005026:	fba3 0302 	umull	r0, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2064      	movs	r0, #100	@ 0x64
 800502e:	fb00 f303 	mul.w	r3, r0, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	@ 0x32
 8005038:	4a07      	ldr	r2, [pc, #28]	@ (8005058 <UART_SetConfig+0x118>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	440a      	add	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40013800 	.word	0x40013800
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <__cvt>:
 800505c:	2b00      	cmp	r3, #0
 800505e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005062:	461d      	mov	r5, r3
 8005064:	bfbb      	ittet	lt
 8005066:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800506a:	461d      	movlt	r5, r3
 800506c:	2300      	movge	r3, #0
 800506e:	232d      	movlt	r3, #45	@ 0x2d
 8005070:	b088      	sub	sp, #32
 8005072:	4614      	mov	r4, r2
 8005074:	bfb8      	it	lt
 8005076:	4614      	movlt	r4, r2
 8005078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800507a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800507c:	7013      	strb	r3, [r2, #0]
 800507e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005080:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005084:	f023 0820 	bic.w	r8, r3, #32
 8005088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800508c:	d005      	beq.n	800509a <__cvt+0x3e>
 800508e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005092:	d100      	bne.n	8005096 <__cvt+0x3a>
 8005094:	3601      	adds	r6, #1
 8005096:	2302      	movs	r3, #2
 8005098:	e000      	b.n	800509c <__cvt+0x40>
 800509a:	2303      	movs	r3, #3
 800509c:	aa07      	add	r2, sp, #28
 800509e:	9204      	str	r2, [sp, #16]
 80050a0:	aa06      	add	r2, sp, #24
 80050a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050a6:	e9cd 3600 	strd	r3, r6, [sp]
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f000 fe6f 	bl	8005d90 <_dtoa_r>
 80050b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050b6:	4607      	mov	r7, r0
 80050b8:	d119      	bne.n	80050ee <__cvt+0x92>
 80050ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d50e      	bpl.n	80050de <__cvt+0x82>
 80050c0:	eb00 0906 	add.w	r9, r0, r6
 80050c4:	2200      	movs	r2, #0
 80050c6:	2300      	movs	r3, #0
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7fb fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80050d0:	b108      	cbz	r0, 80050d6 <__cvt+0x7a>
 80050d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80050d6:	2230      	movs	r2, #48	@ 0x30
 80050d8:	9b07      	ldr	r3, [sp, #28]
 80050da:	454b      	cmp	r3, r9
 80050dc:	d31e      	bcc.n	800511c <__cvt+0xc0>
 80050de:	4638      	mov	r0, r7
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80050e4:	1bdb      	subs	r3, r3, r7
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	b008      	add	sp, #32
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050f2:	eb00 0906 	add.w	r9, r0, r6
 80050f6:	d1e5      	bne.n	80050c4 <__cvt+0x68>
 80050f8:	7803      	ldrb	r3, [r0, #0]
 80050fa:	2b30      	cmp	r3, #48	@ 0x30
 80050fc:	d10a      	bne.n	8005114 <__cvt+0xb8>
 80050fe:	2200      	movs	r2, #0
 8005100:	2300      	movs	r3, #0
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	f7fb fc4f 	bl	80009a8 <__aeabi_dcmpeq>
 800510a:	b918      	cbnz	r0, 8005114 <__cvt+0xb8>
 800510c:	f1c6 0601 	rsb	r6, r6, #1
 8005110:	f8ca 6000 	str.w	r6, [sl]
 8005114:	f8da 3000 	ldr.w	r3, [sl]
 8005118:	4499      	add	r9, r3
 800511a:	e7d3      	b.n	80050c4 <__cvt+0x68>
 800511c:	1c59      	adds	r1, r3, #1
 800511e:	9107      	str	r1, [sp, #28]
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e7d9      	b.n	80050d8 <__cvt+0x7c>

08005124 <__exponent>:
 8005124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005126:	2900      	cmp	r1, #0
 8005128:	bfb6      	itet	lt
 800512a:	232d      	movlt	r3, #45	@ 0x2d
 800512c:	232b      	movge	r3, #43	@ 0x2b
 800512e:	4249      	neglt	r1, r1
 8005130:	2909      	cmp	r1, #9
 8005132:	7002      	strb	r2, [r0, #0]
 8005134:	7043      	strb	r3, [r0, #1]
 8005136:	dd29      	ble.n	800518c <__exponent+0x68>
 8005138:	f10d 0307 	add.w	r3, sp, #7
 800513c:	461d      	mov	r5, r3
 800513e:	270a      	movs	r7, #10
 8005140:	fbb1 f6f7 	udiv	r6, r1, r7
 8005144:	461a      	mov	r2, r3
 8005146:	fb07 1416 	mls	r4, r7, r6, r1
 800514a:	3430      	adds	r4, #48	@ 0x30
 800514c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005150:	460c      	mov	r4, r1
 8005152:	2c63      	cmp	r4, #99	@ 0x63
 8005154:	4631      	mov	r1, r6
 8005156:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800515a:	dcf1      	bgt.n	8005140 <__exponent+0x1c>
 800515c:	3130      	adds	r1, #48	@ 0x30
 800515e:	1e94      	subs	r4, r2, #2
 8005160:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005164:	4623      	mov	r3, r4
 8005166:	1c41      	adds	r1, r0, #1
 8005168:	42ab      	cmp	r3, r5
 800516a:	d30a      	bcc.n	8005182 <__exponent+0x5e>
 800516c:	f10d 0309 	add.w	r3, sp, #9
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	42ac      	cmp	r4, r5
 8005174:	bf88      	it	hi
 8005176:	2300      	movhi	r3, #0
 8005178:	3302      	adds	r3, #2
 800517a:	4403      	add	r3, r0
 800517c:	1a18      	subs	r0, r3, r0
 800517e:	b003      	add	sp, #12
 8005180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005182:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005186:	f801 6f01 	strb.w	r6, [r1, #1]!
 800518a:	e7ed      	b.n	8005168 <__exponent+0x44>
 800518c:	2330      	movs	r3, #48	@ 0x30
 800518e:	3130      	adds	r1, #48	@ 0x30
 8005190:	7083      	strb	r3, [r0, #2]
 8005192:	70c1      	strb	r1, [r0, #3]
 8005194:	1d03      	adds	r3, r0, #4
 8005196:	e7f1      	b.n	800517c <__exponent+0x58>

08005198 <_printf_float>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	b091      	sub	sp, #68	@ 0x44
 800519e:	460c      	mov	r4, r1
 80051a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80051a4:	4616      	mov	r6, r2
 80051a6:	461f      	mov	r7, r3
 80051a8:	4605      	mov	r5, r0
 80051aa:	f000 fce1 	bl	8005b70 <_localeconv_r>
 80051ae:	6803      	ldr	r3, [r0, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	9308      	str	r3, [sp, #32]
 80051b4:	f7fa ffcc 	bl	8000150 <strlen>
 80051b8:	2300      	movs	r3, #0
 80051ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80051bc:	f8d8 3000 	ldr.w	r3, [r8]
 80051c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80051c2:	3307      	adds	r3, #7
 80051c4:	f023 0307 	bic.w	r3, r3, #7
 80051c8:	f103 0208 	add.w	r2, r3, #8
 80051cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051d0:	f8d4 b000 	ldr.w	fp, [r4]
 80051d4:	f8c8 2000 	str.w	r2, [r8]
 80051d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005464 <_printf_float+0x2cc>)
 80051f4:	f7fb fc0a 	bl	8000a0c <__aeabi_dcmpun>
 80051f8:	bb70      	cbnz	r0, 8005258 <_printf_float+0xc0>
 80051fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005202:	4b98      	ldr	r3, [pc, #608]	@ (8005464 <_printf_float+0x2cc>)
 8005204:	f7fb fbe4 	bl	80009d0 <__aeabi_dcmple>
 8005208:	bb30      	cbnz	r0, 8005258 <_printf_float+0xc0>
 800520a:	2200      	movs	r2, #0
 800520c:	2300      	movs	r3, #0
 800520e:	4640      	mov	r0, r8
 8005210:	4649      	mov	r1, r9
 8005212:	f7fb fbd3 	bl	80009bc <__aeabi_dcmplt>
 8005216:	b110      	cbz	r0, 800521e <_printf_float+0x86>
 8005218:	232d      	movs	r3, #45	@ 0x2d
 800521a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800521e:	4a92      	ldr	r2, [pc, #584]	@ (8005468 <_printf_float+0x2d0>)
 8005220:	4b92      	ldr	r3, [pc, #584]	@ (800546c <_printf_float+0x2d4>)
 8005222:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005226:	bf8c      	ite	hi
 8005228:	4690      	movhi	r8, r2
 800522a:	4698      	movls	r8, r3
 800522c:	2303      	movs	r3, #3
 800522e:	f04f 0900 	mov.w	r9, #0
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	f02b 0304 	bic.w	r3, fp, #4
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	4633      	mov	r3, r6
 800523c:	4621      	mov	r1, r4
 800523e:	4628      	mov	r0, r5
 8005240:	9700      	str	r7, [sp, #0]
 8005242:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005244:	f000 f9d4 	bl	80055f0 <_printf_common>
 8005248:	3001      	adds	r0, #1
 800524a:	f040 8090 	bne.w	800536e <_printf_float+0x1d6>
 800524e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005252:	b011      	add	sp, #68	@ 0x44
 8005254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fb fbd4 	bl	8000a0c <__aeabi_dcmpun>
 8005264:	b148      	cbz	r0, 800527a <_printf_float+0xe2>
 8005266:	464b      	mov	r3, r9
 8005268:	2b00      	cmp	r3, #0
 800526a:	bfb8      	it	lt
 800526c:	232d      	movlt	r3, #45	@ 0x2d
 800526e:	4a80      	ldr	r2, [pc, #512]	@ (8005470 <_printf_float+0x2d8>)
 8005270:	bfb8      	it	lt
 8005272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005276:	4b7f      	ldr	r3, [pc, #508]	@ (8005474 <_printf_float+0x2dc>)
 8005278:	e7d3      	b.n	8005222 <_printf_float+0x8a>
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	d13f      	bne.n	8005304 <_printf_float+0x16c>
 8005284:	2306      	movs	r3, #6
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	9206      	str	r2, [sp, #24]
 8005292:	aa0e      	add	r2, sp, #56	@ 0x38
 8005294:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005298:	aa0d      	add	r2, sp, #52	@ 0x34
 800529a:	9203      	str	r2, [sp, #12]
 800529c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80052a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	4642      	mov	r2, r8
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4628      	mov	r0, r5
 80052ac:	464b      	mov	r3, r9
 80052ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80052b0:	f7ff fed4 	bl	800505c <__cvt>
 80052b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052b6:	4680      	mov	r8, r0
 80052b8:	2947      	cmp	r1, #71	@ 0x47
 80052ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80052bc:	d128      	bne.n	8005310 <_printf_float+0x178>
 80052be:	1cc8      	adds	r0, r1, #3
 80052c0:	db02      	blt.n	80052c8 <_printf_float+0x130>
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	4299      	cmp	r1, r3
 80052c6:	dd40      	ble.n	800534a <_printf_float+0x1b2>
 80052c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80052cc:	fa5f fa8a 	uxtb.w	sl, sl
 80052d0:	4652      	mov	r2, sl
 80052d2:	3901      	subs	r1, #1
 80052d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80052da:	f7ff ff23 	bl	8005124 <__exponent>
 80052de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052e0:	4681      	mov	r9, r0
 80052e2:	1813      	adds	r3, r2, r0
 80052e4:	2a01      	cmp	r2, #1
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	dc02      	bgt.n	80052f0 <_printf_float+0x158>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	07d2      	lsls	r2, r2, #31
 80052ee:	d501      	bpl.n	80052f4 <_printf_float+0x15c>
 80052f0:	3301      	adds	r3, #1
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d09e      	beq.n	800523a <_printf_float+0xa2>
 80052fc:	232d      	movs	r3, #45	@ 0x2d
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005302:	e79a      	b.n	800523a <_printf_float+0xa2>
 8005304:	2947      	cmp	r1, #71	@ 0x47
 8005306:	d1bf      	bne.n	8005288 <_printf_float+0xf0>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1bd      	bne.n	8005288 <_printf_float+0xf0>
 800530c:	2301      	movs	r3, #1
 800530e:	e7ba      	b.n	8005286 <_printf_float+0xee>
 8005310:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005314:	d9dc      	bls.n	80052d0 <_printf_float+0x138>
 8005316:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800531a:	d118      	bne.n	800534e <_printf_float+0x1b6>
 800531c:	2900      	cmp	r1, #0
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	dd0b      	ble.n	800533a <_printf_float+0x1a2>
 8005322:	6121      	str	r1, [r4, #16]
 8005324:	b913      	cbnz	r3, 800532c <_printf_float+0x194>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	07d0      	lsls	r0, r2, #31
 800532a:	d502      	bpl.n	8005332 <_printf_float+0x19a>
 800532c:	3301      	adds	r3, #1
 800532e:	440b      	add	r3, r1
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	f04f 0900 	mov.w	r9, #0
 8005336:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005338:	e7dc      	b.n	80052f4 <_printf_float+0x15c>
 800533a:	b913      	cbnz	r3, 8005342 <_printf_float+0x1aa>
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	07d2      	lsls	r2, r2, #31
 8005340:	d501      	bpl.n	8005346 <_printf_float+0x1ae>
 8005342:	3302      	adds	r3, #2
 8005344:	e7f4      	b.n	8005330 <_printf_float+0x198>
 8005346:	2301      	movs	r3, #1
 8005348:	e7f2      	b.n	8005330 <_printf_float+0x198>
 800534a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800534e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005350:	4299      	cmp	r1, r3
 8005352:	db05      	blt.n	8005360 <_printf_float+0x1c8>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	6121      	str	r1, [r4, #16]
 8005358:	07d8      	lsls	r0, r3, #31
 800535a:	d5ea      	bpl.n	8005332 <_printf_float+0x19a>
 800535c:	1c4b      	adds	r3, r1, #1
 800535e:	e7e7      	b.n	8005330 <_printf_float+0x198>
 8005360:	2900      	cmp	r1, #0
 8005362:	bfcc      	ite	gt
 8005364:	2201      	movgt	r2, #1
 8005366:	f1c1 0202 	rsble	r2, r1, #2
 800536a:	4413      	add	r3, r2
 800536c:	e7e0      	b.n	8005330 <_printf_float+0x198>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	055a      	lsls	r2, r3, #21
 8005372:	d407      	bmi.n	8005384 <_printf_float+0x1ec>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	4642      	mov	r2, r8
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	d12b      	bne.n	80053da <_printf_float+0x242>
 8005382:	e764      	b.n	800524e <_printf_float+0xb6>
 8005384:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005388:	f240 80dc 	bls.w	8005544 <_printf_float+0x3ac>
 800538c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005390:	2200      	movs	r2, #0
 8005392:	2300      	movs	r3, #0
 8005394:	f7fb fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8005398:	2800      	cmp	r0, #0
 800539a:	d033      	beq.n	8005404 <_printf_float+0x26c>
 800539c:	2301      	movs	r3, #1
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	4a35      	ldr	r2, [pc, #212]	@ (8005478 <_printf_float+0x2e0>)
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af51 	beq.w	800524e <_printf_float+0xb6>
 80053ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80053b0:	4543      	cmp	r3, r8
 80053b2:	db02      	blt.n	80053ba <_printf_float+0x222>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	07d8      	lsls	r0, r3, #31
 80053b8:	d50f      	bpl.n	80053da <_printf_float+0x242>
 80053ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f af42 	beq.w	800524e <_printf_float+0xb6>
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80053d2:	f104 0a1a 	add.w	sl, r4, #26
 80053d6:	45c8      	cmp	r8, r9
 80053d8:	dc09      	bgt.n	80053ee <_printf_float+0x256>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	079b      	lsls	r3, r3, #30
 80053de:	f100 8102 	bmi.w	80055e6 <_printf_float+0x44e>
 80053e2:	68e0      	ldr	r0, [r4, #12]
 80053e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053e6:	4298      	cmp	r0, r3
 80053e8:	bfb8      	it	lt
 80053ea:	4618      	movlt	r0, r3
 80053ec:	e731      	b.n	8005252 <_printf_float+0xba>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4652      	mov	r2, sl
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	f43f af28 	beq.w	800524e <_printf_float+0xb6>
 80053fe:	f109 0901 	add.w	r9, r9, #1
 8005402:	e7e8      	b.n	80053d6 <_printf_float+0x23e>
 8005404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005406:	2b00      	cmp	r3, #0
 8005408:	dc38      	bgt.n	800547c <_printf_float+0x2e4>
 800540a:	2301      	movs	r3, #1
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <_printf_float+0x2e0>)
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f af1a 	beq.w	800524e <_printf_float+0xb6>
 800541a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800541e:	ea59 0303 	orrs.w	r3, r9, r3
 8005422:	d102      	bne.n	800542a <_printf_float+0x292>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	07d9      	lsls	r1, r3, #31
 8005428:	d5d7      	bpl.n	80053da <_printf_float+0x242>
 800542a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f af0a 	beq.w	800524e <_printf_float+0xb6>
 800543a:	f04f 0a00 	mov.w	sl, #0
 800543e:	f104 0b1a 	add.w	fp, r4, #26
 8005442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005444:	425b      	negs	r3, r3
 8005446:	4553      	cmp	r3, sl
 8005448:	dc01      	bgt.n	800544e <_printf_float+0x2b6>
 800544a:	464b      	mov	r3, r9
 800544c:	e793      	b.n	8005376 <_printf_float+0x1de>
 800544e:	2301      	movs	r3, #1
 8005450:	465a      	mov	r2, fp
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f aef8 	beq.w	800524e <_printf_float+0xb6>
 800545e:	f10a 0a01 	add.w	sl, sl, #1
 8005462:	e7ee      	b.n	8005442 <_printf_float+0x2aa>
 8005464:	7fefffff 	.word	0x7fefffff
 8005468:	08008b82 	.word	0x08008b82
 800546c:	08008b7e 	.word	0x08008b7e
 8005470:	08008b8a 	.word	0x08008b8a
 8005474:	08008b86 	.word	0x08008b86
 8005478:	08008b8e 	.word	0x08008b8e
 800547c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800547e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005482:	4553      	cmp	r3, sl
 8005484:	bfa8      	it	ge
 8005486:	4653      	movge	r3, sl
 8005488:	2b00      	cmp	r3, #0
 800548a:	4699      	mov	r9, r3
 800548c:	dc36      	bgt.n	80054fc <_printf_float+0x364>
 800548e:	f04f 0b00 	mov.w	fp, #0
 8005492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005496:	f104 021a 	add.w	r2, r4, #26
 800549a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800549c:	930a      	str	r3, [sp, #40]	@ 0x28
 800549e:	eba3 0309 	sub.w	r3, r3, r9
 80054a2:	455b      	cmp	r3, fp
 80054a4:	dc31      	bgt.n	800550a <_printf_float+0x372>
 80054a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a8:	459a      	cmp	sl, r3
 80054aa:	dc3a      	bgt.n	8005522 <_printf_float+0x38a>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	07da      	lsls	r2, r3, #31
 80054b0:	d437      	bmi.n	8005522 <_printf_float+0x38a>
 80054b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b4:	ebaa 0903 	sub.w	r9, sl, r3
 80054b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054ba:	ebaa 0303 	sub.w	r3, sl, r3
 80054be:	4599      	cmp	r9, r3
 80054c0:	bfa8      	it	ge
 80054c2:	4699      	movge	r9, r3
 80054c4:	f1b9 0f00 	cmp.w	r9, #0
 80054c8:	dc33      	bgt.n	8005532 <_printf_float+0x39a>
 80054ca:	f04f 0800 	mov.w	r8, #0
 80054ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d2:	f104 0b1a 	add.w	fp, r4, #26
 80054d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054d8:	ebaa 0303 	sub.w	r3, sl, r3
 80054dc:	eba3 0309 	sub.w	r3, r3, r9
 80054e0:	4543      	cmp	r3, r8
 80054e2:	f77f af7a 	ble.w	80053da <_printf_float+0x242>
 80054e6:	2301      	movs	r3, #1
 80054e8:	465a      	mov	r2, fp
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f aeac 	beq.w	800524e <_printf_float+0xb6>
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	e7ec      	b.n	80054d6 <_printf_float+0x33e>
 80054fc:	4642      	mov	r2, r8
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	d1c2      	bne.n	800548e <_printf_float+0x2f6>
 8005508:	e6a1      	b.n	800524e <_printf_float+0xb6>
 800550a:	2301      	movs	r3, #1
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	920a      	str	r2, [sp, #40]	@ 0x28
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f ae9a 	beq.w	800524e <_printf_float+0xb6>
 800551a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800551c:	f10b 0b01 	add.w	fp, fp, #1
 8005520:	e7bb      	b.n	800549a <_printf_float+0x302>
 8005522:	4631      	mov	r1, r6
 8005524:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	d1c0      	bne.n	80054b2 <_printf_float+0x31a>
 8005530:	e68d      	b.n	800524e <_printf_float+0xb6>
 8005532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005534:	464b      	mov	r3, r9
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	4442      	add	r2, r8
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	d1c3      	bne.n	80054ca <_printf_float+0x332>
 8005542:	e684      	b.n	800524e <_printf_float+0xb6>
 8005544:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005548:	f1ba 0f01 	cmp.w	sl, #1
 800554c:	dc01      	bgt.n	8005552 <_printf_float+0x3ba>
 800554e:	07db      	lsls	r3, r3, #31
 8005550:	d536      	bpl.n	80055c0 <_printf_float+0x428>
 8005552:	2301      	movs	r3, #1
 8005554:	4642      	mov	r2, r8
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae76 	beq.w	800524e <_printf_float+0xb6>
 8005562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	f43f ae6e 	beq.w	800524e <_printf_float+0xb6>
 8005572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800557e:	f7fb fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8005582:	b9c0      	cbnz	r0, 80055b6 <_printf_float+0x41e>
 8005584:	4653      	mov	r3, sl
 8005586:	f108 0201 	add.w	r2, r8, #1
 800558a:	4631      	mov	r1, r6
 800558c:	4628      	mov	r0, r5
 800558e:	47b8      	blx	r7
 8005590:	3001      	adds	r0, #1
 8005592:	d10c      	bne.n	80055ae <_printf_float+0x416>
 8005594:	e65b      	b.n	800524e <_printf_float+0xb6>
 8005596:	2301      	movs	r3, #1
 8005598:	465a      	mov	r2, fp
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f ae54 	beq.w	800524e <_printf_float+0xb6>
 80055a6:	f108 0801 	add.w	r8, r8, #1
 80055aa:	45d0      	cmp	r8, sl
 80055ac:	dbf3      	blt.n	8005596 <_printf_float+0x3fe>
 80055ae:	464b      	mov	r3, r9
 80055b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055b4:	e6e0      	b.n	8005378 <_printf_float+0x1e0>
 80055b6:	f04f 0800 	mov.w	r8, #0
 80055ba:	f104 0b1a 	add.w	fp, r4, #26
 80055be:	e7f4      	b.n	80055aa <_printf_float+0x412>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4642      	mov	r2, r8
 80055c4:	e7e1      	b.n	800558a <_printf_float+0x3f2>
 80055c6:	2301      	movs	r3, #1
 80055c8:	464a      	mov	r2, r9
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f ae3c 	beq.w	800524e <_printf_float+0xb6>
 80055d6:	f108 0801 	add.w	r8, r8, #1
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055de:	1a5b      	subs	r3, r3, r1
 80055e0:	4543      	cmp	r3, r8
 80055e2:	dcf0      	bgt.n	80055c6 <_printf_float+0x42e>
 80055e4:	e6fd      	b.n	80053e2 <_printf_float+0x24a>
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	f104 0919 	add.w	r9, r4, #25
 80055ee:	e7f4      	b.n	80055da <_printf_float+0x442>

080055f0 <_printf_common>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	4698      	mov	r8, r3
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	4607      	mov	r7, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	bfb8      	it	lt
 8005602:	4613      	movlt	r3, r2
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800560a:	460c      	mov	r4, r1
 800560c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005610:	b10a      	cbz	r2, 8005616 <_printf_common+0x26>
 8005612:	3301      	adds	r3, #1
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0699      	lsls	r1, r3, #26
 800561a:	bf42      	ittt	mi
 800561c:	6833      	ldrmi	r3, [r6, #0]
 800561e:	3302      	addmi	r3, #2
 8005620:	6033      	strmi	r3, [r6, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	f015 0506 	ands.w	r5, r5, #6
 8005628:	d106      	bne.n	8005638 <_printf_common+0x48>
 800562a:	f104 0a19 	add.w	sl, r4, #25
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	6832      	ldr	r2, [r6, #0]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc2b      	bgt.n	8005690 <_printf_common+0xa0>
 8005638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	3b00      	subs	r3, #0
 8005640:	bf18      	it	ne
 8005642:	2301      	movne	r3, #1
 8005644:	0692      	lsls	r2, r2, #26
 8005646:	d430      	bmi.n	80056aa <_printf_common+0xba>
 8005648:	4641      	mov	r1, r8
 800564a:	4638      	mov	r0, r7
 800564c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005650:	47c8      	blx	r9
 8005652:	3001      	adds	r0, #1
 8005654:	d023      	beq.n	800569e <_printf_common+0xae>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	6922      	ldr	r2, [r4, #16]
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf14      	ite	ne
 8005662:	2500      	movne	r5, #0
 8005664:	6833      	ldreq	r3, [r6, #0]
 8005666:	f04f 0600 	mov.w	r6, #0
 800566a:	bf08      	it	eq
 800566c:	68e5      	ldreq	r5, [r4, #12]
 800566e:	f104 041a 	add.w	r4, r4, #26
 8005672:	bf08      	it	eq
 8005674:	1aed      	subeq	r5, r5, r3
 8005676:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800567a:	bf08      	it	eq
 800567c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005680:	4293      	cmp	r3, r2
 8005682:	bfc4      	itt	gt
 8005684:	1a9b      	subgt	r3, r3, r2
 8005686:	18ed      	addgt	r5, r5, r3
 8005688:	42b5      	cmp	r5, r6
 800568a:	d11a      	bne.n	80056c2 <_printf_common+0xd2>
 800568c:	2000      	movs	r0, #0
 800568e:	e008      	b.n	80056a2 <_printf_common+0xb2>
 8005690:	2301      	movs	r3, #1
 8005692:	4652      	mov	r2, sl
 8005694:	4641      	mov	r1, r8
 8005696:	4638      	mov	r0, r7
 8005698:	47c8      	blx	r9
 800569a:	3001      	adds	r0, #1
 800569c:	d103      	bne.n	80056a6 <_printf_common+0xb6>
 800569e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a6:	3501      	adds	r5, #1
 80056a8:	e7c1      	b.n	800562e <_printf_common+0x3e>
 80056aa:	2030      	movs	r0, #48	@ 0x30
 80056ac:	18e1      	adds	r1, r4, r3
 80056ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056b8:	4422      	add	r2, r4
 80056ba:	3302      	adds	r3, #2
 80056bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056c0:	e7c2      	b.n	8005648 <_printf_common+0x58>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4622      	mov	r2, r4
 80056c6:	4641      	mov	r1, r8
 80056c8:	4638      	mov	r0, r7
 80056ca:	47c8      	blx	r9
 80056cc:	3001      	adds	r0, #1
 80056ce:	d0e6      	beq.n	800569e <_printf_common+0xae>
 80056d0:	3601      	adds	r6, #1
 80056d2:	e7d9      	b.n	8005688 <_printf_common+0x98>

080056d4 <_printf_i>:
 80056d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	7e0f      	ldrb	r7, [r1, #24]
 80056da:	4691      	mov	r9, r2
 80056dc:	2f78      	cmp	r7, #120	@ 0x78
 80056de:	4680      	mov	r8, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	469a      	mov	sl, r3
 80056e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ea:	d807      	bhi.n	80056fc <_printf_i+0x28>
 80056ec:	2f62      	cmp	r7, #98	@ 0x62
 80056ee:	d80a      	bhi.n	8005706 <_printf_i+0x32>
 80056f0:	2f00      	cmp	r7, #0
 80056f2:	f000 80d1 	beq.w	8005898 <_printf_i+0x1c4>
 80056f6:	2f58      	cmp	r7, #88	@ 0x58
 80056f8:	f000 80b8 	beq.w	800586c <_printf_i+0x198>
 80056fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005704:	e03a      	b.n	800577c <_printf_i+0xa8>
 8005706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800570a:	2b15      	cmp	r3, #21
 800570c:	d8f6      	bhi.n	80056fc <_printf_i+0x28>
 800570e:	a101      	add	r1, pc, #4	@ (adr r1, 8005714 <_printf_i+0x40>)
 8005710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005714:	0800576d 	.word	0x0800576d
 8005718:	08005781 	.word	0x08005781
 800571c:	080056fd 	.word	0x080056fd
 8005720:	080056fd 	.word	0x080056fd
 8005724:	080056fd 	.word	0x080056fd
 8005728:	080056fd 	.word	0x080056fd
 800572c:	08005781 	.word	0x08005781
 8005730:	080056fd 	.word	0x080056fd
 8005734:	080056fd 	.word	0x080056fd
 8005738:	080056fd 	.word	0x080056fd
 800573c:	080056fd 	.word	0x080056fd
 8005740:	0800587f 	.word	0x0800587f
 8005744:	080057ab 	.word	0x080057ab
 8005748:	08005839 	.word	0x08005839
 800574c:	080056fd 	.word	0x080056fd
 8005750:	080056fd 	.word	0x080056fd
 8005754:	080058a1 	.word	0x080058a1
 8005758:	080056fd 	.word	0x080056fd
 800575c:	080057ab 	.word	0x080057ab
 8005760:	080056fd 	.word	0x080056fd
 8005764:	080056fd 	.word	0x080056fd
 8005768:	08005841 	.word	0x08005841
 800576c:	6833      	ldr	r3, [r6, #0]
 800576e:	1d1a      	adds	r2, r3, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6032      	str	r2, [r6, #0]
 8005774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800577c:	2301      	movs	r3, #1
 800577e:	e09c      	b.n	80058ba <_printf_i+0x1e6>
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	1d19      	adds	r1, r3, #4
 8005786:	6031      	str	r1, [r6, #0]
 8005788:	0606      	lsls	r6, r0, #24
 800578a:	d501      	bpl.n	8005790 <_printf_i+0xbc>
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	e003      	b.n	8005798 <_printf_i+0xc4>
 8005790:	0645      	lsls	r5, r0, #25
 8005792:	d5fb      	bpl.n	800578c <_printf_i+0xb8>
 8005794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005798:	2d00      	cmp	r5, #0
 800579a:	da03      	bge.n	80057a4 <_printf_i+0xd0>
 800579c:	232d      	movs	r3, #45	@ 0x2d
 800579e:	426d      	negs	r5, r5
 80057a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a4:	230a      	movs	r3, #10
 80057a6:	4858      	ldr	r0, [pc, #352]	@ (8005908 <_printf_i+0x234>)
 80057a8:	e011      	b.n	80057ce <_printf_i+0xfa>
 80057aa:	6821      	ldr	r1, [r4, #0]
 80057ac:	6833      	ldr	r3, [r6, #0]
 80057ae:	0608      	lsls	r0, r1, #24
 80057b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80057b4:	d402      	bmi.n	80057bc <_printf_i+0xe8>
 80057b6:	0649      	lsls	r1, r1, #25
 80057b8:	bf48      	it	mi
 80057ba:	b2ad      	uxthmi	r5, r5
 80057bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80057be:	6033      	str	r3, [r6, #0]
 80057c0:	bf14      	ite	ne
 80057c2:	230a      	movne	r3, #10
 80057c4:	2308      	moveq	r3, #8
 80057c6:	4850      	ldr	r0, [pc, #320]	@ (8005908 <_printf_i+0x234>)
 80057c8:	2100      	movs	r1, #0
 80057ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057ce:	6866      	ldr	r6, [r4, #4]
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	60a6      	str	r6, [r4, #8]
 80057d4:	db05      	blt.n	80057e2 <_printf_i+0x10e>
 80057d6:	6821      	ldr	r1, [r4, #0]
 80057d8:	432e      	orrs	r6, r5
 80057da:	f021 0104 	bic.w	r1, r1, #4
 80057de:	6021      	str	r1, [r4, #0]
 80057e0:	d04b      	beq.n	800587a <_printf_i+0x1a6>
 80057e2:	4616      	mov	r6, r2
 80057e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80057e8:	fb03 5711 	mls	r7, r3, r1, r5
 80057ec:	5dc7      	ldrb	r7, [r0, r7]
 80057ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057f2:	462f      	mov	r7, r5
 80057f4:	42bb      	cmp	r3, r7
 80057f6:	460d      	mov	r5, r1
 80057f8:	d9f4      	bls.n	80057e4 <_printf_i+0x110>
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d10b      	bne.n	8005816 <_printf_i+0x142>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	07df      	lsls	r7, r3, #31
 8005802:	d508      	bpl.n	8005816 <_printf_i+0x142>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	6861      	ldr	r1, [r4, #4]
 8005808:	4299      	cmp	r1, r3
 800580a:	bfde      	ittt	le
 800580c:	2330      	movle	r3, #48	@ 0x30
 800580e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005812:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005816:	1b92      	subs	r2, r2, r6
 8005818:	6122      	str	r2, [r4, #16]
 800581a:	464b      	mov	r3, r9
 800581c:	4621      	mov	r1, r4
 800581e:	4640      	mov	r0, r8
 8005820:	f8cd a000 	str.w	sl, [sp]
 8005824:	aa03      	add	r2, sp, #12
 8005826:	f7ff fee3 	bl	80055f0 <_printf_common>
 800582a:	3001      	adds	r0, #1
 800582c:	d14a      	bne.n	80058c4 <_printf_i+0x1f0>
 800582e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005832:	b004      	add	sp, #16
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	f043 0320 	orr.w	r3, r3, #32
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	2778      	movs	r7, #120	@ 0x78
 8005842:	4832      	ldr	r0, [pc, #200]	@ (800590c <_printf_i+0x238>)
 8005844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	061f      	lsls	r7, r3, #24
 800584e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005852:	d402      	bmi.n	800585a <_printf_i+0x186>
 8005854:	065f      	lsls	r7, r3, #25
 8005856:	bf48      	it	mi
 8005858:	b2ad      	uxthmi	r5, r5
 800585a:	6031      	str	r1, [r6, #0]
 800585c:	07d9      	lsls	r1, r3, #31
 800585e:	bf44      	itt	mi
 8005860:	f043 0320 	orrmi.w	r3, r3, #32
 8005864:	6023      	strmi	r3, [r4, #0]
 8005866:	b11d      	cbz	r5, 8005870 <_printf_i+0x19c>
 8005868:	2310      	movs	r3, #16
 800586a:	e7ad      	b.n	80057c8 <_printf_i+0xf4>
 800586c:	4826      	ldr	r0, [pc, #152]	@ (8005908 <_printf_i+0x234>)
 800586e:	e7e9      	b.n	8005844 <_printf_i+0x170>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	f023 0320 	bic.w	r3, r3, #32
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	e7f6      	b.n	8005868 <_printf_i+0x194>
 800587a:	4616      	mov	r6, r2
 800587c:	e7bd      	b.n	80057fa <_printf_i+0x126>
 800587e:	6833      	ldr	r3, [r6, #0]
 8005880:	6825      	ldr	r5, [r4, #0]
 8005882:	1d18      	adds	r0, r3, #4
 8005884:	6961      	ldr	r1, [r4, #20]
 8005886:	6030      	str	r0, [r6, #0]
 8005888:	062e      	lsls	r6, r5, #24
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	d501      	bpl.n	8005892 <_printf_i+0x1be>
 800588e:	6019      	str	r1, [r3, #0]
 8005890:	e002      	b.n	8005898 <_printf_i+0x1c4>
 8005892:	0668      	lsls	r0, r5, #25
 8005894:	d5fb      	bpl.n	800588e <_printf_i+0x1ba>
 8005896:	8019      	strh	r1, [r3, #0]
 8005898:	2300      	movs	r3, #0
 800589a:	4616      	mov	r6, r2
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	e7bc      	b.n	800581a <_printf_i+0x146>
 80058a0:	6833      	ldr	r3, [r6, #0]
 80058a2:	2100      	movs	r1, #0
 80058a4:	1d1a      	adds	r2, r3, #4
 80058a6:	6032      	str	r2, [r6, #0]
 80058a8:	681e      	ldr	r6, [r3, #0]
 80058aa:	6862      	ldr	r2, [r4, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f9d6 	bl	8005c5e <memchr>
 80058b2:	b108      	cbz	r0, 80058b8 <_printf_i+0x1e4>
 80058b4:	1b80      	subs	r0, r0, r6
 80058b6:	6060      	str	r0, [r4, #4]
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	2300      	movs	r3, #0
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c2:	e7aa      	b.n	800581a <_printf_i+0x146>
 80058c4:	4632      	mov	r2, r6
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	47d0      	blx	sl
 80058ce:	3001      	adds	r0, #1
 80058d0:	d0ad      	beq.n	800582e <_printf_i+0x15a>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	079b      	lsls	r3, r3, #30
 80058d6:	d413      	bmi.n	8005900 <_printf_i+0x22c>
 80058d8:	68e0      	ldr	r0, [r4, #12]
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	4298      	cmp	r0, r3
 80058de:	bfb8      	it	lt
 80058e0:	4618      	movlt	r0, r3
 80058e2:	e7a6      	b.n	8005832 <_printf_i+0x15e>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4632      	mov	r2, r6
 80058e8:	4649      	mov	r1, r9
 80058ea:	4640      	mov	r0, r8
 80058ec:	47d0      	blx	sl
 80058ee:	3001      	adds	r0, #1
 80058f0:	d09d      	beq.n	800582e <_printf_i+0x15a>
 80058f2:	3501      	adds	r5, #1
 80058f4:	68e3      	ldr	r3, [r4, #12]
 80058f6:	9903      	ldr	r1, [sp, #12]
 80058f8:	1a5b      	subs	r3, r3, r1
 80058fa:	42ab      	cmp	r3, r5
 80058fc:	dcf2      	bgt.n	80058e4 <_printf_i+0x210>
 80058fe:	e7eb      	b.n	80058d8 <_printf_i+0x204>
 8005900:	2500      	movs	r5, #0
 8005902:	f104 0619 	add.w	r6, r4, #25
 8005906:	e7f5      	b.n	80058f4 <_printf_i+0x220>
 8005908:	08008b90 	.word	0x08008b90
 800590c:	08008ba1 	.word	0x08008ba1

08005910 <std>:
 8005910:	2300      	movs	r3, #0
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
 8005916:	e9c0 3300 	strd	r3, r3, [r0]
 800591a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591e:	6083      	str	r3, [r0, #8]
 8005920:	8181      	strh	r1, [r0, #12]
 8005922:	6643      	str	r3, [r0, #100]	@ 0x64
 8005924:	81c2      	strh	r2, [r0, #14]
 8005926:	6183      	str	r3, [r0, #24]
 8005928:	4619      	mov	r1, r3
 800592a:	2208      	movs	r2, #8
 800592c:	305c      	adds	r0, #92	@ 0x5c
 800592e:	f000 f916 	bl	8005b5e <memset>
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x58>)
 8005934:	6224      	str	r4, [r4, #32]
 8005936:	6263      	str	r3, [r4, #36]	@ 0x24
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <std+0x5c>)
 800593a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <std+0x60>)
 800593e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005940:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <std+0x64>)
 8005942:	6323      	str	r3, [r4, #48]	@ 0x30
 8005944:	4b0c      	ldr	r3, [pc, #48]	@ (8005978 <std+0x68>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d006      	beq.n	8005958 <std+0x48>
 800594a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800594e:	4294      	cmp	r4, r2
 8005950:	d002      	beq.n	8005958 <std+0x48>
 8005952:	33d0      	adds	r3, #208	@ 0xd0
 8005954:	429c      	cmp	r4, r3
 8005956:	d105      	bne.n	8005964 <std+0x54>
 8005958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f000 b97a 	b.w	8005c58 <__retarget_lock_init_recursive>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	08005ad9 	.word	0x08005ad9
 800596c:	08005afb 	.word	0x08005afb
 8005970:	08005b33 	.word	0x08005b33
 8005974:	08005b57 	.word	0x08005b57
 8005978:	20000c78 	.word	0x20000c78

0800597c <stdio_exit_handler>:
 800597c:	4a02      	ldr	r2, [pc, #8]	@ (8005988 <stdio_exit_handler+0xc>)
 800597e:	4903      	ldr	r1, [pc, #12]	@ (800598c <stdio_exit_handler+0x10>)
 8005980:	4803      	ldr	r0, [pc, #12]	@ (8005990 <stdio_exit_handler+0x14>)
 8005982:	f000 b869 	b.w	8005a58 <_fwalk_sglue>
 8005986:	bf00      	nop
 8005988:	20000018 	.word	0x20000018
 800598c:	080075d9 	.word	0x080075d9
 8005990:	20000028 	.word	0x20000028

08005994 <cleanup_stdio>:
 8005994:	6841      	ldr	r1, [r0, #4]
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <cleanup_stdio+0x34>)
 8005998:	b510      	push	{r4, lr}
 800599a:	4299      	cmp	r1, r3
 800599c:	4604      	mov	r4, r0
 800599e:	d001      	beq.n	80059a4 <cleanup_stdio+0x10>
 80059a0:	f001 fe1a 	bl	80075d8 <_fflush_r>
 80059a4:	68a1      	ldr	r1, [r4, #8]
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <cleanup_stdio+0x38>)
 80059a8:	4299      	cmp	r1, r3
 80059aa:	d002      	beq.n	80059b2 <cleanup_stdio+0x1e>
 80059ac:	4620      	mov	r0, r4
 80059ae:	f001 fe13 	bl	80075d8 <_fflush_r>
 80059b2:	68e1      	ldr	r1, [r4, #12]
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <cleanup_stdio+0x3c>)
 80059b6:	4299      	cmp	r1, r3
 80059b8:	d004      	beq.n	80059c4 <cleanup_stdio+0x30>
 80059ba:	4620      	mov	r0, r4
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f001 be0a 	b.w	80075d8 <_fflush_r>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	bf00      	nop
 80059c8:	20000c78 	.word	0x20000c78
 80059cc:	20000ce0 	.word	0x20000ce0
 80059d0:	20000d48 	.word	0x20000d48

080059d4 <global_stdio_init.part.0>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <global_stdio_init.part.0+0x30>)
 80059d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a08 <global_stdio_init.part.0+0x34>)
 80059da:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <global_stdio_init.part.0+0x38>)
 80059dc:	4620      	mov	r0, r4
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	2104      	movs	r1, #4
 80059e2:	2200      	movs	r2, #0
 80059e4:	f7ff ff94 	bl	8005910 <std>
 80059e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059ec:	2201      	movs	r2, #1
 80059ee:	2109      	movs	r1, #9
 80059f0:	f7ff ff8e 	bl	8005910 <std>
 80059f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f8:	2202      	movs	r2, #2
 80059fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fe:	2112      	movs	r1, #18
 8005a00:	f7ff bf86 	b.w	8005910 <std>
 8005a04:	20000db0 	.word	0x20000db0
 8005a08:	20000c78 	.word	0x20000c78
 8005a0c:	0800597d 	.word	0x0800597d

08005a10 <__sfp_lock_acquire>:
 8005a10:	4801      	ldr	r0, [pc, #4]	@ (8005a18 <__sfp_lock_acquire+0x8>)
 8005a12:	f000 b922 	b.w	8005c5a <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	20000db9 	.word	0x20000db9

08005a1c <__sfp_lock_release>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	@ (8005a24 <__sfp_lock_release+0x8>)
 8005a1e:	f000 b91d 	b.w	8005c5c <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	20000db9 	.word	0x20000db9

08005a28 <__sinit>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f7ff fff0 	bl	8005a10 <__sfp_lock_acquire>
 8005a30:	6a23      	ldr	r3, [r4, #32]
 8005a32:	b11b      	cbz	r3, 8005a3c <__sinit+0x14>
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f7ff bff0 	b.w	8005a1c <__sfp_lock_release>
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <__sinit+0x28>)
 8005a3e:	6223      	str	r3, [r4, #32]
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <__sinit+0x2c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f5      	bne.n	8005a34 <__sinit+0xc>
 8005a48:	f7ff ffc4 	bl	80059d4 <global_stdio_init.part.0>
 8005a4c:	e7f2      	b.n	8005a34 <__sinit+0xc>
 8005a4e:	bf00      	nop
 8005a50:	08005995 	.word	0x08005995
 8005a54:	20000db0 	.word	0x20000db0

08005a58 <_fwalk_sglue>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4688      	mov	r8, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	2600      	movs	r6, #0
 8005a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a68:	f1b9 0901 	subs.w	r9, r9, #1
 8005a6c:	d505      	bpl.n	8005a7a <_fwalk_sglue+0x22>
 8005a6e:	6824      	ldr	r4, [r4, #0]
 8005a70:	2c00      	cmp	r4, #0
 8005a72:	d1f7      	bne.n	8005a64 <_fwalk_sglue+0xc>
 8005a74:	4630      	mov	r0, r6
 8005a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d907      	bls.n	8005a90 <_fwalk_sglue+0x38>
 8005a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a84:	3301      	adds	r3, #1
 8005a86:	d003      	beq.n	8005a90 <_fwalk_sglue+0x38>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	4306      	orrs	r6, r0
 8005a90:	3568      	adds	r5, #104	@ 0x68
 8005a92:	e7e9      	b.n	8005a68 <_fwalk_sglue+0x10>

08005a94 <siprintf>:
 8005a94:	b40e      	push	{r1, r2, r3}
 8005a96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	2400      	movs	r4, #0
 8005a9e:	b09d      	sub	sp, #116	@ 0x74
 8005aa0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005aa2:	9002      	str	r0, [sp, #8]
 8005aa4:	9006      	str	r0, [sp, #24]
 8005aa6:	9107      	str	r1, [sp, #28]
 8005aa8:	9104      	str	r1, [sp, #16]
 8005aaa:	4809      	ldr	r0, [pc, #36]	@ (8005ad0 <siprintf+0x3c>)
 8005aac:	4909      	ldr	r1, [pc, #36]	@ (8005ad4 <siprintf+0x40>)
 8005aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab2:	9105      	str	r1, [sp, #20]
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	a902      	add	r1, sp, #8
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005abc:	f001 fc10 	bl	80072e0 <_svfiprintf_r>
 8005ac0:	9b02      	ldr	r3, [sp, #8]
 8005ac2:	701c      	strb	r4, [r3, #0]
 8005ac4:	b01d      	add	sp, #116	@ 0x74
 8005ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aca:	b003      	add	sp, #12
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000024 	.word	0x20000024
 8005ad4:	ffff0208 	.word	0xffff0208

08005ad8 <__sread>:
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	460c      	mov	r4, r1
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 f86c 	bl	8005bbc <_read_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	bfab      	itete	ge
 8005ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aea:	89a3      	ldrhlt	r3, [r4, #12]
 8005aec:	181b      	addge	r3, r3, r0
 8005aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005af2:	bfac      	ite	ge
 8005af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005af6:	81a3      	strhlt	r3, [r4, #12]
 8005af8:	bd10      	pop	{r4, pc}

08005afa <__swrite>:
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	461f      	mov	r7, r3
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	4605      	mov	r5, r0
 8005b04:	05db      	lsls	r3, r3, #23
 8005b06:	460c      	mov	r4, r1
 8005b08:	4616      	mov	r6, r2
 8005b0a:	d505      	bpl.n	8005b18 <__swrite+0x1e>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	f000 f840 	bl	8005b98 <_lseek_r>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	4628      	mov	r0, r5
 8005b24:	463b      	mov	r3, r7
 8005b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	f000 b857 	b.w	8005be0 <_write_r>

08005b32 <__sseek>:
 8005b32:	b510      	push	{r4, lr}
 8005b34:	460c      	mov	r4, r1
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 f82d 	bl	8005b98 <_lseek_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	bf15      	itete	ne
 8005b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b4e:	81a3      	strheq	r3, [r4, #12]
 8005b50:	bf18      	it	ne
 8005b52:	81a3      	strhne	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__sclose>:
 8005b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5a:	f000 b80d 	b.w	8005b78 <_close_r>

08005b5e <memset>:
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4402      	add	r2, r0
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d100      	bne.n	8005b68 <memset+0xa>
 8005b66:	4770      	bx	lr
 8005b68:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6c:	e7f9      	b.n	8005b62 <memset+0x4>
	...

08005b70 <_localeconv_r>:
 8005b70:	4800      	ldr	r0, [pc, #0]	@ (8005b74 <_localeconv_r+0x4>)
 8005b72:	4770      	bx	lr
 8005b74:	20000164 	.word	0x20000164

08005b78 <_close_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4d05      	ldr	r5, [pc, #20]	@ (8005b94 <_close_r+0x1c>)
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	f7fc f879 	bl	8001c7a <_close>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_close_r+0x1a>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_close_r+0x1a>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20000db4 	.word	0x20000db4

08005b98 <_lseek_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4d05      	ldr	r5, [pc, #20]	@ (8005bb8 <_lseek_r+0x20>)
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fc f88b 	bl	8001cc2 <_lseek>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_lseek_r+0x1e>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_lseek_r+0x1e>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000db4 	.word	0x20000db4

08005bbc <_read_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4d05      	ldr	r5, [pc, #20]	@ (8005bdc <_read_r+0x20>)
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fc f81c 	bl	8001c08 <_read>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_read_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_read_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	20000db4 	.word	0x20000db4

08005be0 <_write_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	2200      	movs	r2, #0
 8005bea:	4d05      	ldr	r5, [pc, #20]	@ (8005c00 <_write_r+0x20>)
 8005bec:	602a      	str	r2, [r5, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f7fc f827 	bl	8001c42 <_write>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d102      	bne.n	8005bfe <_write_r+0x1e>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b103      	cbz	r3, 8005bfe <_write_r+0x1e>
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	20000db4 	.word	0x20000db4

08005c04 <__errno>:
 8005c04:	4b01      	ldr	r3, [pc, #4]	@ (8005c0c <__errno+0x8>)
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000024 	.word	0x20000024

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	2600      	movs	r6, #0
 8005c14:	4d0c      	ldr	r5, [pc, #48]	@ (8005c48 <__libc_init_array+0x38>)
 8005c16:	4c0d      	ldr	r4, [pc, #52]	@ (8005c4c <__libc_init_array+0x3c>)
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	f002 f876 	bl	8007d10 <_init>
 8005c24:	2600      	movs	r6, #0
 8005c26:	4d0a      	ldr	r5, [pc, #40]	@ (8005c50 <__libc_init_array+0x40>)
 8005c28:	4c0a      	ldr	r4, [pc, #40]	@ (8005c54 <__libc_init_array+0x44>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	08008efc 	.word	0x08008efc
 8005c4c:	08008efc 	.word	0x08008efc
 8005c50:	08008efc 	.word	0x08008efc
 8005c54:	08008f00 	.word	0x08008f00

08005c58 <__retarget_lock_init_recursive>:
 8005c58:	4770      	bx	lr

08005c5a <__retarget_lock_acquire_recursive>:
 8005c5a:	4770      	bx	lr

08005c5c <__retarget_lock_release_recursive>:
 8005c5c:	4770      	bx	lr

08005c5e <memchr>:
 8005c5e:	4603      	mov	r3, r0
 8005c60:	b510      	push	{r4, lr}
 8005c62:	b2c9      	uxtb	r1, r1
 8005c64:	4402      	add	r2, r0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	d101      	bne.n	8005c70 <memchr+0x12>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e003      	b.n	8005c78 <memchr+0x1a>
 8005c70:	7804      	ldrb	r4, [r0, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	428c      	cmp	r4, r1
 8005c76:	d1f6      	bne.n	8005c66 <memchr+0x8>
 8005c78:	bd10      	pop	{r4, pc}

08005c7a <quorem>:
 8005c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7e:	6903      	ldr	r3, [r0, #16]
 8005c80:	690c      	ldr	r4, [r1, #16]
 8005c82:	4607      	mov	r7, r0
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	db7e      	blt.n	8005d86 <quorem+0x10c>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	00a3      	lsls	r3, r4, #2
 8005c8c:	f100 0514 	add.w	r5, r0, #20
 8005c90:	f101 0814 	add.w	r8, r1, #20
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cb0:	d32e      	bcc.n	8005d10 <quorem+0x96>
 8005cb2:	f04f 0a00 	mov.w	sl, #0
 8005cb6:	46c4      	mov	ip, r8
 8005cb8:	46ae      	mov	lr, r5
 8005cba:	46d3      	mov	fp, sl
 8005cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cc0:	b298      	uxth	r0, r3
 8005cc2:	fb06 a000 	mla	r0, r6, r0, sl
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	0c02      	lsrs	r2, r0, #16
 8005cca:	fb06 2303 	mla	r3, r6, r3, r2
 8005cce:	f8de 2000 	ldr.w	r2, [lr]
 8005cd2:	b280      	uxth	r0, r0
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	1a12      	subs	r2, r2, r0
 8005cd8:	445a      	add	r2, fp
 8005cda:	f8de 0000 	ldr.w	r0, [lr]
 8005cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ce8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cec:	b292      	uxth	r2, r2
 8005cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cf2:	45e1      	cmp	r9, ip
 8005cf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8005cfc:	d2de      	bcs.n	8005cbc <quorem+0x42>
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	58eb      	ldr	r3, [r5, r3]
 8005d02:	b92b      	cbnz	r3, 8005d10 <quorem+0x96>
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	3b04      	subs	r3, #4
 8005d08:	429d      	cmp	r5, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	d32f      	bcc.n	8005d6e <quorem+0xf4>
 8005d0e:	613c      	str	r4, [r7, #16]
 8005d10:	4638      	mov	r0, r7
 8005d12:	f001 f981 	bl	8007018 <__mcmp>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	db25      	blt.n	8005d66 <quorem+0xec>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d22:	f8d1 c000 	ldr.w	ip, [r1]
 8005d26:	fa1f fe82 	uxth.w	lr, r2
 8005d2a:	fa1f f38c 	uxth.w	r3, ip
 8005d2e:	eba3 030e 	sub.w	r3, r3, lr
 8005d32:	4403      	add	r3, r0
 8005d34:	0c12      	lsrs	r2, r2, #16
 8005d36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d44:	45c1      	cmp	r9, r8
 8005d46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d4a:	f841 3b04 	str.w	r3, [r1], #4
 8005d4e:	d2e6      	bcs.n	8005d1e <quorem+0xa4>
 8005d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d58:	b922      	cbnz	r2, 8005d64 <quorem+0xea>
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	429d      	cmp	r5, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	d30b      	bcc.n	8005d7a <quorem+0x100>
 8005d62:	613c      	str	r4, [r7, #16]
 8005d64:	3601      	adds	r6, #1
 8005d66:	4630      	mov	r0, r6
 8005d68:	b003      	add	sp, #12
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d1cb      	bne.n	8005d0e <quorem+0x94>
 8005d76:	3c01      	subs	r4, #1
 8005d78:	e7c6      	b.n	8005d08 <quorem+0x8e>
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	3b04      	subs	r3, #4
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	d1ef      	bne.n	8005d62 <quorem+0xe8>
 8005d82:	3c01      	subs	r4, #1
 8005d84:	e7ea      	b.n	8005d5c <quorem+0xe2>
 8005d86:	2000      	movs	r0, #0
 8005d88:	e7ee      	b.n	8005d68 <quorem+0xee>
 8005d8a:	0000      	movs	r0, r0
 8005d8c:	0000      	movs	r0, r0
	...

08005d90 <_dtoa_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	69c7      	ldr	r7, [r0, #28]
 8005d9a:	b097      	sub	sp, #92	@ 0x5c
 8005d9c:	4681      	mov	r9, r0
 8005d9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005da2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005da4:	b97f      	cbnz	r7, 8005dc6 <_dtoa_r+0x36>
 8005da6:	2010      	movs	r0, #16
 8005da8:	f000 fe0e 	bl	80069c8 <malloc>
 8005dac:	4602      	mov	r2, r0
 8005dae:	f8c9 001c 	str.w	r0, [r9, #28]
 8005db2:	b920      	cbnz	r0, 8005dbe <_dtoa_r+0x2e>
 8005db4:	21ef      	movs	r1, #239	@ 0xef
 8005db6:	4bac      	ldr	r3, [pc, #688]	@ (8006068 <_dtoa_r+0x2d8>)
 8005db8:	48ac      	ldr	r0, [pc, #688]	@ (800606c <_dtoa_r+0x2dc>)
 8005dba:	f001 fc6d 	bl	8007698 <__assert_func>
 8005dbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005dc2:	6007      	str	r7, [r0, #0]
 8005dc4:	60c7      	str	r7, [r0, #12]
 8005dc6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	b159      	cbz	r1, 8005de6 <_dtoa_r+0x56>
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4093      	lsls	r3, r2
 8005dd4:	604a      	str	r2, [r1, #4]
 8005dd6:	608b      	str	r3, [r1, #8]
 8005dd8:	4648      	mov	r0, r9
 8005dda:	f000 feeb 	bl	8006bb4 <_Bfree>
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	1e2b      	subs	r3, r5, #0
 8005de8:	bfaf      	iteee	ge
 8005dea:	2300      	movge	r3, #0
 8005dec:	2201      	movlt	r2, #1
 8005dee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005df2:	9307      	strlt	r3, [sp, #28]
 8005df4:	bfa8      	it	ge
 8005df6:	6033      	strge	r3, [r6, #0]
 8005df8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005dfc:	4b9c      	ldr	r3, [pc, #624]	@ (8006070 <_dtoa_r+0x2e0>)
 8005dfe:	bfb8      	it	lt
 8005e00:	6032      	strlt	r2, [r6, #0]
 8005e02:	ea33 0308 	bics.w	r3, r3, r8
 8005e06:	d112      	bne.n	8005e2e <_dtoa_r+0x9e>
 8005e08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e14:	4323      	orrs	r3, r4
 8005e16:	f000 855e 	beq.w	80068d6 <_dtoa_r+0xb46>
 8005e1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006074 <_dtoa_r+0x2e4>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8560 	beq.w	80068e6 <_dtoa_r+0xb56>
 8005e26:	f10a 0303 	add.w	r3, sl, #3
 8005e2a:	f000 bd5a 	b.w	80068e2 <_dtoa_r+0xb52>
 8005e2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f7fa fdb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005e42:	4607      	mov	r7, r0
 8005e44:	b158      	cbz	r0, 8005e5e <_dtoa_r+0xce>
 8005e46:	2301      	movs	r3, #1
 8005e48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e4e:	b113      	cbz	r3, 8005e56 <_dtoa_r+0xc6>
 8005e50:	4b89      	ldr	r3, [pc, #548]	@ (8006078 <_dtoa_r+0x2e8>)
 8005e52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800607c <_dtoa_r+0x2ec>
 8005e5a:	f000 bd44 	b.w	80068e6 <_dtoa_r+0xb56>
 8005e5e:	ab14      	add	r3, sp, #80	@ 0x50
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	ab15      	add	r3, sp, #84	@ 0x54
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4648      	mov	r0, r9
 8005e68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e6c:	f001 f984 	bl	8007178 <__d2b>
 8005e70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e74:	9003      	str	r0, [sp, #12]
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d078      	beq.n	8005f6c <_dtoa_r+0x1dc>
 8005e7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e90:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e92:	4619      	mov	r1, r3
 8005e94:	2200      	movs	r2, #0
 8005e96:	4b7a      	ldr	r3, [pc, #488]	@ (8006080 <_dtoa_r+0x2f0>)
 8005e98:	f7fa f966 	bl	8000168 <__aeabi_dsub>
 8005e9c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006050 <_dtoa_r+0x2c0>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fb19 	bl	80004d8 <__aeabi_dmul>
 8005ea6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006058 <_dtoa_r+0x2c8>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa f95e 	bl	800016c <__adddf3>
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	f7fa faa5 	bl	8000404 <__aeabi_i2d>
 8005eba:	a369      	add	r3, pc, #420	@ (adr r3, 8006060 <_dtoa_r+0x2d0>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fb0a 	bl	80004d8 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa f94e 	bl	800016c <__adddf3>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	f7fa fdb0 	bl	8000a38 <__aeabi_d2iz>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4607      	mov	r7, r0
 8005edc:	2300      	movs	r3, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fd6b 	bl	80009bc <__aeabi_dcmplt>
 8005ee6:	b140      	cbz	r0, 8005efa <_dtoa_r+0x16a>
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7fa fa8b 	bl	8000404 <__aeabi_i2d>
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	f7fa fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8005ef6:	b900      	cbnz	r0, 8005efa <_dtoa_r+0x16a>
 8005ef8:	3f01      	subs	r7, #1
 8005efa:	2f16      	cmp	r7, #22
 8005efc:	d854      	bhi.n	8005fa8 <_dtoa_r+0x218>
 8005efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f02:	4b60      	ldr	r3, [pc, #384]	@ (8006084 <_dtoa_r+0x2f4>)
 8005f04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fd56 	bl	80009bc <__aeabi_dcmplt>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d04b      	beq.n	8005fac <_dtoa_r+0x21c>
 8005f14:	2300      	movs	r3, #0
 8005f16:	3f01      	subs	r7, #1
 8005f18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f1c:	1b9b      	subs	r3, r3, r6
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	bf49      	itett	mi
 8005f22:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f26:	2300      	movpl	r3, #0
 8005f28:	9304      	strmi	r3, [sp, #16]
 8005f2a:	2300      	movmi	r3, #0
 8005f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f2e:	bf54      	ite	pl
 8005f30:	9304      	strpl	r3, [sp, #16]
 8005f32:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f34:	2f00      	cmp	r7, #0
 8005f36:	db3b      	blt.n	8005fb0 <_dtoa_r+0x220>
 8005f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f3a:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f3c:	443b      	add	r3, r7
 8005f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f40:	2300      	movs	r3, #0
 8005f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d865      	bhi.n	8006016 <_dtoa_r+0x286>
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	bfc4      	itt	gt
 8005f4e:	3b04      	subgt	r3, #4
 8005f50:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f54:	bfc8      	it	gt
 8005f56:	2400      	movgt	r4, #0
 8005f58:	f1a3 0302 	sub.w	r3, r3, #2
 8005f5c:	bfd8      	it	le
 8005f5e:	2401      	movle	r4, #1
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d864      	bhi.n	800602e <_dtoa_r+0x29e>
 8005f64:	e8df f003 	tbb	[pc, r3]
 8005f68:	2c385553 	.word	0x2c385553
 8005f6c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f70:	441e      	add	r6, r3
 8005f72:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	bfc1      	itttt	gt
 8005f7a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f7e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f8a:	bfd6      	itet	le
 8005f8c:	f1c3 0320 	rsble	r3, r3, #32
 8005f90:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f94:	fa04 f003 	lslle.w	r0, r4, r3
 8005f98:	f7fa fa24 	bl	80003e4 <__aeabi_ui2d>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fa2:	3e01      	subs	r6, #1
 8005fa4:	9212      	str	r2, [sp, #72]	@ 0x48
 8005fa6:	e774      	b.n	8005e92 <_dtoa_r+0x102>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e7b5      	b.n	8005f18 <_dtoa_r+0x188>
 8005fac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005fae:	e7b4      	b.n	8005f1a <_dtoa_r+0x18a>
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	1bdb      	subs	r3, r3, r7
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	427b      	negs	r3, r7
 8005fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fba:	2300      	movs	r3, #0
 8005fbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fbe:	e7c1      	b.n	8005f44 <_dtoa_r+0x1b4>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fc6:	eb07 0b03 	add.w	fp, r7, r3
 8005fca:	f10b 0301 	add.w	r3, fp, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	9308      	str	r3, [sp, #32]
 8005fd2:	bfb8      	it	lt
 8005fd4:	2301      	movlt	r3, #1
 8005fd6:	e006      	b.n	8005fe6 <_dtoa_r+0x256>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dd28      	ble.n	8006034 <_dtoa_r+0x2a4>
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	9308      	str	r3, [sp, #32]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	2204      	movs	r2, #4
 8005fea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005fee:	f102 0514 	add.w	r5, r2, #20
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	d926      	bls.n	8006044 <_dtoa_r+0x2b4>
 8005ff6:	6041      	str	r1, [r0, #4]
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	f000 fd9b 	bl	8006b34 <_Balloc>
 8005ffe:	4682      	mov	sl, r0
 8006000:	2800      	cmp	r0, #0
 8006002:	d143      	bne.n	800608c <_dtoa_r+0x2fc>
 8006004:	4602      	mov	r2, r0
 8006006:	f240 11af 	movw	r1, #431	@ 0x1af
 800600a:	4b1f      	ldr	r3, [pc, #124]	@ (8006088 <_dtoa_r+0x2f8>)
 800600c:	e6d4      	b.n	8005db8 <_dtoa_r+0x28>
 800600e:	2300      	movs	r3, #0
 8006010:	e7e3      	b.n	8005fda <_dtoa_r+0x24a>
 8006012:	2300      	movs	r3, #0
 8006014:	e7d5      	b.n	8005fc2 <_dtoa_r+0x232>
 8006016:	2401      	movs	r4, #1
 8006018:	2300      	movs	r3, #0
 800601a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800601c:	9320      	str	r3, [sp, #128]	@ 0x80
 800601e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006022:	2200      	movs	r2, #0
 8006024:	2312      	movs	r3, #18
 8006026:	f8cd b020 	str.w	fp, [sp, #32]
 800602a:	9221      	str	r2, [sp, #132]	@ 0x84
 800602c:	e7db      	b.n	8005fe6 <_dtoa_r+0x256>
 800602e:	2301      	movs	r3, #1
 8006030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006032:	e7f4      	b.n	800601e <_dtoa_r+0x28e>
 8006034:	f04f 0b01 	mov.w	fp, #1
 8006038:	465b      	mov	r3, fp
 800603a:	f8cd b020 	str.w	fp, [sp, #32]
 800603e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006042:	e7d0      	b.n	8005fe6 <_dtoa_r+0x256>
 8006044:	3101      	adds	r1, #1
 8006046:	0052      	lsls	r2, r2, #1
 8006048:	e7d1      	b.n	8005fee <_dtoa_r+0x25e>
 800604a:	bf00      	nop
 800604c:	f3af 8000 	nop.w
 8006050:	636f4361 	.word	0x636f4361
 8006054:	3fd287a7 	.word	0x3fd287a7
 8006058:	8b60c8b3 	.word	0x8b60c8b3
 800605c:	3fc68a28 	.word	0x3fc68a28
 8006060:	509f79fb 	.word	0x509f79fb
 8006064:	3fd34413 	.word	0x3fd34413
 8006068:	08008bbf 	.word	0x08008bbf
 800606c:	08008bd6 	.word	0x08008bd6
 8006070:	7ff00000 	.word	0x7ff00000
 8006074:	08008bbb 	.word	0x08008bbb
 8006078:	08008b8f 	.word	0x08008b8f
 800607c:	08008b8e 	.word	0x08008b8e
 8006080:	3ff80000 	.word	0x3ff80000
 8006084:	08008d28 	.word	0x08008d28
 8006088:	08008c2e 	.word	0x08008c2e
 800608c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	9b08      	ldr	r3, [sp, #32]
 8006094:	2b0e      	cmp	r3, #14
 8006096:	f200 80a1 	bhi.w	80061dc <_dtoa_r+0x44c>
 800609a:	2c00      	cmp	r4, #0
 800609c:	f000 809e 	beq.w	80061dc <_dtoa_r+0x44c>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	dd33      	ble.n	800610c <_dtoa_r+0x37c>
 80060a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006318 <_dtoa_r+0x588>)
 80060a6:	f007 020f 	and.w	r2, r7, #15
 80060aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ae:	05f8      	lsls	r0, r7, #23
 80060b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80060b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060bc:	d516      	bpl.n	80060ec <_dtoa_r+0x35c>
 80060be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060c2:	4b96      	ldr	r3, [pc, #600]	@ (800631c <_dtoa_r+0x58c>)
 80060c4:	2603      	movs	r6, #3
 80060c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ca:	f7fa fb2f 	bl	800072c <__aeabi_ddiv>
 80060ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060d2:	f004 040f 	and.w	r4, r4, #15
 80060d6:	4d91      	ldr	r5, [pc, #580]	@ (800631c <_dtoa_r+0x58c>)
 80060d8:	b954      	cbnz	r4, 80060f0 <_dtoa_r+0x360>
 80060da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e2:	f7fa fb23 	bl	800072c <__aeabi_ddiv>
 80060e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060ea:	e028      	b.n	800613e <_dtoa_r+0x3ae>
 80060ec:	2602      	movs	r6, #2
 80060ee:	e7f2      	b.n	80060d6 <_dtoa_r+0x346>
 80060f0:	07e1      	lsls	r1, r4, #31
 80060f2:	d508      	bpl.n	8006106 <_dtoa_r+0x376>
 80060f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060fc:	f7fa f9ec 	bl	80004d8 <__aeabi_dmul>
 8006100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006104:	3601      	adds	r6, #1
 8006106:	1064      	asrs	r4, r4, #1
 8006108:	3508      	adds	r5, #8
 800610a:	e7e5      	b.n	80060d8 <_dtoa_r+0x348>
 800610c:	f000 80af 	beq.w	800626e <_dtoa_r+0x4de>
 8006110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006114:	427c      	negs	r4, r7
 8006116:	4b80      	ldr	r3, [pc, #512]	@ (8006318 <_dtoa_r+0x588>)
 8006118:	f004 020f 	and.w	r2, r4, #15
 800611c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa f9d8 	bl	80004d8 <__aeabi_dmul>
 8006128:	2602      	movs	r6, #2
 800612a:	2300      	movs	r3, #0
 800612c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006130:	4d7a      	ldr	r5, [pc, #488]	@ (800631c <_dtoa_r+0x58c>)
 8006132:	1124      	asrs	r4, r4, #4
 8006134:	2c00      	cmp	r4, #0
 8006136:	f040 808f 	bne.w	8006258 <_dtoa_r+0x4c8>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1d3      	bne.n	80060e6 <_dtoa_r+0x356>
 800613e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006142:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8094 	beq.w	8006272 <_dtoa_r+0x4e2>
 800614a:	2200      	movs	r2, #0
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	4b73      	ldr	r3, [pc, #460]	@ (8006320 <_dtoa_r+0x590>)
 8006152:	f7fa fc33 	bl	80009bc <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f000 808b 	beq.w	8006272 <_dtoa_r+0x4e2>
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8087 	beq.w	8006272 <_dtoa_r+0x4e2>
 8006164:	f1bb 0f00 	cmp.w	fp, #0
 8006168:	dd34      	ble.n	80061d4 <_dtoa_r+0x444>
 800616a:	4620      	mov	r0, r4
 800616c:	2200      	movs	r2, #0
 800616e:	4629      	mov	r1, r5
 8006170:	4b6c      	ldr	r3, [pc, #432]	@ (8006324 <_dtoa_r+0x594>)
 8006172:	f7fa f9b1 	bl	80004d8 <__aeabi_dmul>
 8006176:	465c      	mov	r4, fp
 8006178:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800617c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006180:	3601      	adds	r6, #1
 8006182:	4630      	mov	r0, r6
 8006184:	f7fa f93e 	bl	8000404 <__aeabi_i2d>
 8006188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800618c:	f7fa f9a4 	bl	80004d8 <__aeabi_dmul>
 8006190:	2200      	movs	r2, #0
 8006192:	4b65      	ldr	r3, [pc, #404]	@ (8006328 <_dtoa_r+0x598>)
 8006194:	f7f9 ffea 	bl	800016c <__adddf3>
 8006198:	4605      	mov	r5, r0
 800619a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d16a      	bne.n	8006278 <_dtoa_r+0x4e8>
 80061a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b60      	ldr	r3, [pc, #384]	@ (800632c <_dtoa_r+0x59c>)
 80061aa:	f7f9 ffdd 	bl	8000168 <__aeabi_dsub>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061b6:	462a      	mov	r2, r5
 80061b8:	4633      	mov	r3, r6
 80061ba:	f7fa fc1d 	bl	80009f8 <__aeabi_dcmpgt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f040 8298 	bne.w	80066f4 <_dtoa_r+0x964>
 80061c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c8:	462a      	mov	r2, r5
 80061ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061ce:	f7fa fbf5 	bl	80009bc <__aeabi_dcmplt>
 80061d2:	bb38      	cbnz	r0, 8006224 <_dtoa_r+0x494>
 80061d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f2c0 8157 	blt.w	8006492 <_dtoa_r+0x702>
 80061e4:	2f0e      	cmp	r7, #14
 80061e6:	f300 8154 	bgt.w	8006492 <_dtoa_r+0x702>
 80061ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006318 <_dtoa_r+0x588>)
 80061ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f280 80e5 	bge.w	80063ca <_dtoa_r+0x63a>
 8006200:	9b08      	ldr	r3, [sp, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f300 80e1 	bgt.w	80063ca <_dtoa_r+0x63a>
 8006208:	d10c      	bne.n	8006224 <_dtoa_r+0x494>
 800620a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800620e:	2200      	movs	r2, #0
 8006210:	4b46      	ldr	r3, [pc, #280]	@ (800632c <_dtoa_r+0x59c>)
 8006212:	f7fa f961 	bl	80004d8 <__aeabi_dmul>
 8006216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800621a:	f7fa fbe3 	bl	80009e4 <__aeabi_dcmpge>
 800621e:	2800      	cmp	r0, #0
 8006220:	f000 8266 	beq.w	80066f0 <_dtoa_r+0x960>
 8006224:	2400      	movs	r4, #0
 8006226:	4625      	mov	r5, r4
 8006228:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800622a:	4656      	mov	r6, sl
 800622c:	ea6f 0803 	mvn.w	r8, r3
 8006230:	2700      	movs	r7, #0
 8006232:	4621      	mov	r1, r4
 8006234:	4648      	mov	r0, r9
 8006236:	f000 fcbd 	bl	8006bb4 <_Bfree>
 800623a:	2d00      	cmp	r5, #0
 800623c:	f000 80bd 	beq.w	80063ba <_dtoa_r+0x62a>
 8006240:	b12f      	cbz	r7, 800624e <_dtoa_r+0x4be>
 8006242:	42af      	cmp	r7, r5
 8006244:	d003      	beq.n	800624e <_dtoa_r+0x4be>
 8006246:	4639      	mov	r1, r7
 8006248:	4648      	mov	r0, r9
 800624a:	f000 fcb3 	bl	8006bb4 <_Bfree>
 800624e:	4629      	mov	r1, r5
 8006250:	4648      	mov	r0, r9
 8006252:	f000 fcaf 	bl	8006bb4 <_Bfree>
 8006256:	e0b0      	b.n	80063ba <_dtoa_r+0x62a>
 8006258:	07e2      	lsls	r2, r4, #31
 800625a:	d505      	bpl.n	8006268 <_dtoa_r+0x4d8>
 800625c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006260:	f7fa f93a 	bl	80004d8 <__aeabi_dmul>
 8006264:	2301      	movs	r3, #1
 8006266:	3601      	adds	r6, #1
 8006268:	1064      	asrs	r4, r4, #1
 800626a:	3508      	adds	r5, #8
 800626c:	e762      	b.n	8006134 <_dtoa_r+0x3a4>
 800626e:	2602      	movs	r6, #2
 8006270:	e765      	b.n	800613e <_dtoa_r+0x3ae>
 8006272:	46b8      	mov	r8, r7
 8006274:	9c08      	ldr	r4, [sp, #32]
 8006276:	e784      	b.n	8006182 <_dtoa_r+0x3f2>
 8006278:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <_dtoa_r+0x588>)
 800627a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800627c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006280:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006284:	4454      	add	r4, sl
 8006286:	2900      	cmp	r1, #0
 8006288:	d054      	beq.n	8006334 <_dtoa_r+0x5a4>
 800628a:	2000      	movs	r0, #0
 800628c:	4928      	ldr	r1, [pc, #160]	@ (8006330 <_dtoa_r+0x5a0>)
 800628e:	f7fa fa4d 	bl	800072c <__aeabi_ddiv>
 8006292:	4633      	mov	r3, r6
 8006294:	462a      	mov	r2, r5
 8006296:	f7f9 ff67 	bl	8000168 <__aeabi_dsub>
 800629a:	4656      	mov	r6, sl
 800629c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a4:	f7fa fbc8 	bl	8000a38 <__aeabi_d2iz>
 80062a8:	4605      	mov	r5, r0
 80062aa:	f7fa f8ab 	bl	8000404 <__aeabi_i2d>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b6:	f7f9 ff57 	bl	8000168 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	3530      	adds	r5, #48	@ 0x30
 80062c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062c8:	f806 5b01 	strb.w	r5, [r6], #1
 80062cc:	f7fa fb76 	bl	80009bc <__aeabi_dcmplt>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d172      	bne.n	80063ba <_dtoa_r+0x62a>
 80062d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062d8:	2000      	movs	r0, #0
 80062da:	4911      	ldr	r1, [pc, #68]	@ (8006320 <_dtoa_r+0x590>)
 80062dc:	f7f9 ff44 	bl	8000168 <__aeabi_dsub>
 80062e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062e4:	f7fa fb6a 	bl	80009bc <__aeabi_dcmplt>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f040 80b4 	bne.w	8006456 <_dtoa_r+0x6c6>
 80062ee:	42a6      	cmp	r6, r4
 80062f0:	f43f af70 	beq.w	80061d4 <_dtoa_r+0x444>
 80062f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062f8:	2200      	movs	r2, #0
 80062fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <_dtoa_r+0x594>)
 80062fc:	f7fa f8ec 	bl	80004d8 <__aeabi_dmul>
 8006300:	2200      	movs	r2, #0
 8006302:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <_dtoa_r+0x594>)
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006314:	e7c4      	b.n	80062a0 <_dtoa_r+0x510>
 8006316:	bf00      	nop
 8006318:	08008d28 	.word	0x08008d28
 800631c:	08008d00 	.word	0x08008d00
 8006320:	3ff00000 	.word	0x3ff00000
 8006324:	40240000 	.word	0x40240000
 8006328:	401c0000 	.word	0x401c0000
 800632c:	40140000 	.word	0x40140000
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	f7fa f8ce 	bl	80004d8 <__aeabi_dmul>
 800633c:	4656      	mov	r6, sl
 800633e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006342:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006348:	f7fa fb76 	bl	8000a38 <__aeabi_d2iz>
 800634c:	4605      	mov	r5, r0
 800634e:	f7fa f859 	bl	8000404 <__aeabi_i2d>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800635a:	f7f9 ff05 	bl	8000168 <__aeabi_dsub>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	3530      	adds	r5, #48	@ 0x30
 8006364:	f806 5b01 	strb.w	r5, [r6], #1
 8006368:	42a6      	cmp	r6, r4
 800636a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	d124      	bne.n	80063be <_dtoa_r+0x62e>
 8006374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006378:	4bae      	ldr	r3, [pc, #696]	@ (8006634 <_dtoa_r+0x8a4>)
 800637a:	f7f9 fef7 	bl	800016c <__adddf3>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006386:	f7fa fb37 	bl	80009f8 <__aeabi_dcmpgt>
 800638a:	2800      	cmp	r0, #0
 800638c:	d163      	bne.n	8006456 <_dtoa_r+0x6c6>
 800638e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006392:	2000      	movs	r0, #0
 8006394:	49a7      	ldr	r1, [pc, #668]	@ (8006634 <_dtoa_r+0x8a4>)
 8006396:	f7f9 fee7 	bl	8000168 <__aeabi_dsub>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063a2:	f7fa fb0b 	bl	80009bc <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f af14 	beq.w	80061d4 <_dtoa_r+0x444>
 80063ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063ae:	1e73      	subs	r3, r6, #1
 80063b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063b6:	2b30      	cmp	r3, #48	@ 0x30
 80063b8:	d0f8      	beq.n	80063ac <_dtoa_r+0x61c>
 80063ba:	4647      	mov	r7, r8
 80063bc:	e03b      	b.n	8006436 <_dtoa_r+0x6a6>
 80063be:	4b9e      	ldr	r3, [pc, #632]	@ (8006638 <_dtoa_r+0x8a8>)
 80063c0:	f7fa f88a 	bl	80004d8 <__aeabi_dmul>
 80063c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063c8:	e7bc      	b.n	8006344 <_dtoa_r+0x5b4>
 80063ca:	4656      	mov	r6, sl
 80063cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80063d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7fa f9a8 	bl	800072c <__aeabi_ddiv>
 80063dc:	f7fa fb2c 	bl	8000a38 <__aeabi_d2iz>
 80063e0:	4680      	mov	r8, r0
 80063e2:	f7fa f80f 	bl	8000404 <__aeabi_i2d>
 80063e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ea:	f7fa f875 	bl	80004d8 <__aeabi_dmul>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	f7f9 feb7 	bl	8000168 <__aeabi_dsub>
 80063fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063fe:	9d08      	ldr	r5, [sp, #32]
 8006400:	f806 4b01 	strb.w	r4, [r6], #1
 8006404:	eba6 040a 	sub.w	r4, r6, sl
 8006408:	42a5      	cmp	r5, r4
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	d133      	bne.n	8006478 <_dtoa_r+0x6e8>
 8006410:	f7f9 feac 	bl	800016c <__adddf3>
 8006414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	f7fa faec 	bl	80009f8 <__aeabi_dcmpgt>
 8006420:	b9c0      	cbnz	r0, 8006454 <_dtoa_r+0x6c4>
 8006422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006426:	4620      	mov	r0, r4
 8006428:	4629      	mov	r1, r5
 800642a:	f7fa fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800642e:	b110      	cbz	r0, 8006436 <_dtoa_r+0x6a6>
 8006430:	f018 0f01 	tst.w	r8, #1
 8006434:	d10e      	bne.n	8006454 <_dtoa_r+0x6c4>
 8006436:	4648      	mov	r0, r9
 8006438:	9903      	ldr	r1, [sp, #12]
 800643a:	f000 fbbb 	bl	8006bb4 <_Bfree>
 800643e:	2300      	movs	r3, #0
 8006440:	7033      	strb	r3, [r6, #0]
 8006442:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006444:	3701      	adds	r7, #1
 8006446:	601f      	str	r7, [r3, #0]
 8006448:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 824b 	beq.w	80068e6 <_dtoa_r+0xb56>
 8006450:	601e      	str	r6, [r3, #0]
 8006452:	e248      	b.n	80068e6 <_dtoa_r+0xb56>
 8006454:	46b8      	mov	r8, r7
 8006456:	4633      	mov	r3, r6
 8006458:	461e      	mov	r6, r3
 800645a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800645e:	2a39      	cmp	r2, #57	@ 0x39
 8006460:	d106      	bne.n	8006470 <_dtoa_r+0x6e0>
 8006462:	459a      	cmp	sl, r3
 8006464:	d1f8      	bne.n	8006458 <_dtoa_r+0x6c8>
 8006466:	2230      	movs	r2, #48	@ 0x30
 8006468:	f108 0801 	add.w	r8, r8, #1
 800646c:	f88a 2000 	strb.w	r2, [sl]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	3201      	adds	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e7a0      	b.n	80063ba <_dtoa_r+0x62a>
 8006478:	2200      	movs	r2, #0
 800647a:	4b6f      	ldr	r3, [pc, #444]	@ (8006638 <_dtoa_r+0x8a8>)
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	4604      	mov	r4, r0
 8006486:	460d      	mov	r5, r1
 8006488:	f7fa fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800648c:	2800      	cmp	r0, #0
 800648e:	d09f      	beq.n	80063d0 <_dtoa_r+0x640>
 8006490:	e7d1      	b.n	8006436 <_dtoa_r+0x6a6>
 8006492:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006494:	2a00      	cmp	r2, #0
 8006496:	f000 80ea 	beq.w	800666e <_dtoa_r+0x8de>
 800649a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800649c:	2a01      	cmp	r2, #1
 800649e:	f300 80cd 	bgt.w	800663c <_dtoa_r+0x8ac>
 80064a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	f000 80c1 	beq.w	800662c <_dtoa_r+0x89c>
 80064aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064b0:	9e04      	ldr	r6, [sp, #16]
 80064b2:	9a04      	ldr	r2, [sp, #16]
 80064b4:	2101      	movs	r1, #1
 80064b6:	441a      	add	r2, r3
 80064b8:	9204      	str	r2, [sp, #16]
 80064ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064bc:	4648      	mov	r0, r9
 80064be:	441a      	add	r2, r3
 80064c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064c2:	f000 fc2b 	bl	8006d1c <__i2b>
 80064c6:	4605      	mov	r5, r0
 80064c8:	b166      	cbz	r6, 80064e4 <_dtoa_r+0x754>
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd09      	ble.n	80064e4 <_dtoa_r+0x754>
 80064d0:	42b3      	cmp	r3, r6
 80064d2:	bfa8      	it	ge
 80064d4:	4633      	movge	r3, r6
 80064d6:	9a04      	ldr	r2, [sp, #16]
 80064d8:	1af6      	subs	r6, r6, r3
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	9204      	str	r2, [sp, #16]
 80064de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064e6:	b30b      	cbz	r3, 800652c <_dtoa_r+0x79c>
 80064e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80c6 	beq.w	800667c <_dtoa_r+0x8ec>
 80064f0:	2c00      	cmp	r4, #0
 80064f2:	f000 80c0 	beq.w	8006676 <_dtoa_r+0x8e6>
 80064f6:	4629      	mov	r1, r5
 80064f8:	4622      	mov	r2, r4
 80064fa:	4648      	mov	r0, r9
 80064fc:	f000 fcc6 	bl	8006e8c <__pow5mult>
 8006500:	9a03      	ldr	r2, [sp, #12]
 8006502:	4601      	mov	r1, r0
 8006504:	4605      	mov	r5, r0
 8006506:	4648      	mov	r0, r9
 8006508:	f000 fc1e 	bl	8006d48 <__multiply>
 800650c:	9903      	ldr	r1, [sp, #12]
 800650e:	4680      	mov	r8, r0
 8006510:	4648      	mov	r0, r9
 8006512:	f000 fb4f 	bl	8006bb4 <_Bfree>
 8006516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006518:	1b1b      	subs	r3, r3, r4
 800651a:	930a      	str	r3, [sp, #40]	@ 0x28
 800651c:	f000 80b1 	beq.w	8006682 <_dtoa_r+0x8f2>
 8006520:	4641      	mov	r1, r8
 8006522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006524:	4648      	mov	r0, r9
 8006526:	f000 fcb1 	bl	8006e8c <__pow5mult>
 800652a:	9003      	str	r0, [sp, #12]
 800652c:	2101      	movs	r1, #1
 800652e:	4648      	mov	r0, r9
 8006530:	f000 fbf4 	bl	8006d1c <__i2b>
 8006534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006536:	4604      	mov	r4, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 81d8 	beq.w	80068ee <_dtoa_r+0xb5e>
 800653e:	461a      	mov	r2, r3
 8006540:	4601      	mov	r1, r0
 8006542:	4648      	mov	r0, r9
 8006544:	f000 fca2 	bl	8006e8c <__pow5mult>
 8006548:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800654a:	4604      	mov	r4, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	f300 809f 	bgt.w	8006690 <_dtoa_r+0x900>
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 8097 	bne.w	8006688 <_dtoa_r+0x8f8>
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8093 	bne.w	800668c <_dtoa_r+0x8fc>
 8006566:	9b07      	ldr	r3, [sp, #28]
 8006568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800656c:	0d1b      	lsrs	r3, r3, #20
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	b133      	cbz	r3, 8006580 <_dtoa_r+0x7f0>
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	3301      	adds	r3, #1
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657a:	3301      	adds	r3, #1
 800657c:	9309      	str	r3, [sp, #36]	@ 0x24
 800657e:	2301      	movs	r3, #1
 8006580:	930a      	str	r3, [sp, #40]	@ 0x28
 8006582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 81b8 	beq.w	80068fa <_dtoa_r+0xb6a>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006590:	6918      	ldr	r0, [r3, #16]
 8006592:	f000 fb77 	bl	8006c84 <__hi0bits>
 8006596:	f1c0 0020 	rsb	r0, r0, #32
 800659a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659c:	4418      	add	r0, r3
 800659e:	f010 001f 	ands.w	r0, r0, #31
 80065a2:	f000 8082 	beq.w	80066aa <_dtoa_r+0x91a>
 80065a6:	f1c0 0320 	rsb	r3, r0, #32
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	dd73      	ble.n	8006696 <_dtoa_r+0x906>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	f1c0 001c 	rsb	r0, r0, #28
 80065b4:	4403      	add	r3, r0
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ba:	4406      	add	r6, r0
 80065bc:	4403      	add	r3, r0
 80065be:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x842>
 80065c6:	461a      	mov	r2, r3
 80065c8:	4648      	mov	r0, r9
 80065ca:	9903      	ldr	r1, [sp, #12]
 80065cc:	f000 fcb8 	bl	8006f40 <__lshift>
 80065d0:	9003      	str	r0, [sp, #12]
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd05      	ble.n	80065e4 <_dtoa_r+0x854>
 80065d8:	4621      	mov	r1, r4
 80065da:	461a      	mov	r2, r3
 80065dc:	4648      	mov	r0, r9
 80065de:	f000 fcaf 	bl	8006f40 <__lshift>
 80065e2:	4604      	mov	r4, r0
 80065e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d061      	beq.n	80066ae <_dtoa_r+0x91e>
 80065ea:	4621      	mov	r1, r4
 80065ec:	9803      	ldr	r0, [sp, #12]
 80065ee:	f000 fd13 	bl	8007018 <__mcmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	da5b      	bge.n	80066ae <_dtoa_r+0x91e>
 80065f6:	2300      	movs	r3, #0
 80065f8:	220a      	movs	r2, #10
 80065fa:	4648      	mov	r0, r9
 80065fc:	9903      	ldr	r1, [sp, #12]
 80065fe:	f000 fafb 	bl	8006bf8 <__multadd>
 8006602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006604:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006608:	9003      	str	r0, [sp, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8177 	beq.w	80068fe <_dtoa_r+0xb6e>
 8006610:	4629      	mov	r1, r5
 8006612:	2300      	movs	r3, #0
 8006614:	220a      	movs	r2, #10
 8006616:	4648      	mov	r0, r9
 8006618:	f000 faee 	bl	8006bf8 <__multadd>
 800661c:	f1bb 0f00 	cmp.w	fp, #0
 8006620:	4605      	mov	r5, r0
 8006622:	dc6f      	bgt.n	8006704 <_dtoa_r+0x974>
 8006624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006626:	2b02      	cmp	r3, #2
 8006628:	dc49      	bgt.n	80066be <_dtoa_r+0x92e>
 800662a:	e06b      	b.n	8006704 <_dtoa_r+0x974>
 800662c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800662e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006632:	e73c      	b.n	80064ae <_dtoa_r+0x71e>
 8006634:	3fe00000 	.word	0x3fe00000
 8006638:	40240000 	.word	0x40240000
 800663c:	9b08      	ldr	r3, [sp, #32]
 800663e:	1e5c      	subs	r4, r3, #1
 8006640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006642:	42a3      	cmp	r3, r4
 8006644:	db09      	blt.n	800665a <_dtoa_r+0x8ca>
 8006646:	1b1c      	subs	r4, r3, r4
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f6bf af30 	bge.w	80064b0 <_dtoa_r+0x720>
 8006650:	9b04      	ldr	r3, [sp, #16]
 8006652:	9a08      	ldr	r2, [sp, #32]
 8006654:	1a9e      	subs	r6, r3, r2
 8006656:	2300      	movs	r3, #0
 8006658:	e72b      	b.n	80064b2 <_dtoa_r+0x722>
 800665a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800665e:	1ae3      	subs	r3, r4, r3
 8006660:	441a      	add	r2, r3
 8006662:	940a      	str	r4, [sp, #40]	@ 0x28
 8006664:	9e04      	ldr	r6, [sp, #16]
 8006666:	2400      	movs	r4, #0
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	920e      	str	r2, [sp, #56]	@ 0x38
 800666c:	e721      	b.n	80064b2 <_dtoa_r+0x722>
 800666e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006670:	9e04      	ldr	r6, [sp, #16]
 8006672:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006674:	e728      	b.n	80064c8 <_dtoa_r+0x738>
 8006676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800667a:	e751      	b.n	8006520 <_dtoa_r+0x790>
 800667c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800667e:	9903      	ldr	r1, [sp, #12]
 8006680:	e750      	b.n	8006524 <_dtoa_r+0x794>
 8006682:	f8cd 800c 	str.w	r8, [sp, #12]
 8006686:	e751      	b.n	800652c <_dtoa_r+0x79c>
 8006688:	2300      	movs	r3, #0
 800668a:	e779      	b.n	8006580 <_dtoa_r+0x7f0>
 800668c:	9b06      	ldr	r3, [sp, #24]
 800668e:	e777      	b.n	8006580 <_dtoa_r+0x7f0>
 8006690:	2300      	movs	r3, #0
 8006692:	930a      	str	r3, [sp, #40]	@ 0x28
 8006694:	e779      	b.n	800658a <_dtoa_r+0x7fa>
 8006696:	d093      	beq.n	80065c0 <_dtoa_r+0x830>
 8006698:	9a04      	ldr	r2, [sp, #16]
 800669a:	331c      	adds	r3, #28
 800669c:	441a      	add	r2, r3
 800669e:	9204      	str	r2, [sp, #16]
 80066a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066a2:	441e      	add	r6, r3
 80066a4:	441a      	add	r2, r3
 80066a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066a8:	e78a      	b.n	80065c0 <_dtoa_r+0x830>
 80066aa:	4603      	mov	r3, r0
 80066ac:	e7f4      	b.n	8006698 <_dtoa_r+0x908>
 80066ae:	9b08      	ldr	r3, [sp, #32]
 80066b0:	46b8      	mov	r8, r7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	dc20      	bgt.n	80066f8 <_dtoa_r+0x968>
 80066b6:	469b      	mov	fp, r3
 80066b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	dd1e      	ble.n	80066fc <_dtoa_r+0x96c>
 80066be:	f1bb 0f00 	cmp.w	fp, #0
 80066c2:	f47f adb1 	bne.w	8006228 <_dtoa_r+0x498>
 80066c6:	4621      	mov	r1, r4
 80066c8:	465b      	mov	r3, fp
 80066ca:	2205      	movs	r2, #5
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fa93 	bl	8006bf8 <__multadd>
 80066d2:	4601      	mov	r1, r0
 80066d4:	4604      	mov	r4, r0
 80066d6:	9803      	ldr	r0, [sp, #12]
 80066d8:	f000 fc9e 	bl	8007018 <__mcmp>
 80066dc:	2800      	cmp	r0, #0
 80066de:	f77f ada3 	ble.w	8006228 <_dtoa_r+0x498>
 80066e2:	4656      	mov	r6, sl
 80066e4:	2331      	movs	r3, #49	@ 0x31
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	f806 3b01 	strb.w	r3, [r6], #1
 80066ee:	e59f      	b.n	8006230 <_dtoa_r+0x4a0>
 80066f0:	46b8      	mov	r8, r7
 80066f2:	9c08      	ldr	r4, [sp, #32]
 80066f4:	4625      	mov	r5, r4
 80066f6:	e7f4      	b.n	80066e2 <_dtoa_r+0x952>
 80066f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80066fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 8101 	beq.w	8006906 <_dtoa_r+0xb76>
 8006704:	2e00      	cmp	r6, #0
 8006706:	dd05      	ble.n	8006714 <_dtoa_r+0x984>
 8006708:	4629      	mov	r1, r5
 800670a:	4632      	mov	r2, r6
 800670c:	4648      	mov	r0, r9
 800670e:	f000 fc17 	bl	8006f40 <__lshift>
 8006712:	4605      	mov	r5, r0
 8006714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d05c      	beq.n	80067d4 <_dtoa_r+0xa44>
 800671a:	4648      	mov	r0, r9
 800671c:	6869      	ldr	r1, [r5, #4]
 800671e:	f000 fa09 	bl	8006b34 <_Balloc>
 8006722:	4606      	mov	r6, r0
 8006724:	b928      	cbnz	r0, 8006732 <_dtoa_r+0x9a2>
 8006726:	4602      	mov	r2, r0
 8006728:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800672c:	4b80      	ldr	r3, [pc, #512]	@ (8006930 <_dtoa_r+0xba0>)
 800672e:	f7ff bb43 	b.w	8005db8 <_dtoa_r+0x28>
 8006732:	692a      	ldr	r2, [r5, #16]
 8006734:	f105 010c 	add.w	r1, r5, #12
 8006738:	3202      	adds	r2, #2
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	300c      	adds	r0, #12
 800673e:	f000 ff9d 	bl	800767c <memcpy>
 8006742:	2201      	movs	r2, #1
 8006744:	4631      	mov	r1, r6
 8006746:	4648      	mov	r0, r9
 8006748:	f000 fbfa 	bl	8006f40 <__lshift>
 800674c:	462f      	mov	r7, r5
 800674e:	4605      	mov	r5, r0
 8006750:	f10a 0301 	add.w	r3, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	eb0a 030b 	add.w	r3, sl, fp
 800675a:	930a      	str	r3, [sp, #40]	@ 0x28
 800675c:	9b06      	ldr	r3, [sp, #24]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	9309      	str	r3, [sp, #36]	@ 0x24
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	4621      	mov	r1, r4
 8006768:	9803      	ldr	r0, [sp, #12]
 800676a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800676e:	f7ff fa84 	bl	8005c7a <quorem>
 8006772:	4603      	mov	r3, r0
 8006774:	4639      	mov	r1, r7
 8006776:	3330      	adds	r3, #48	@ 0x30
 8006778:	9006      	str	r0, [sp, #24]
 800677a:	9803      	ldr	r0, [sp, #12]
 800677c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800677e:	f000 fc4b 	bl	8007018 <__mcmp>
 8006782:	462a      	mov	r2, r5
 8006784:	9008      	str	r0, [sp, #32]
 8006786:	4621      	mov	r1, r4
 8006788:	4648      	mov	r0, r9
 800678a:	f000 fc61 	bl	8007050 <__mdiff>
 800678e:	68c2      	ldr	r2, [r0, #12]
 8006790:	4606      	mov	r6, r0
 8006792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006794:	bb02      	cbnz	r2, 80067d8 <_dtoa_r+0xa48>
 8006796:	4601      	mov	r1, r0
 8006798:	9803      	ldr	r0, [sp, #12]
 800679a:	f000 fc3d 	bl	8007018 <__mcmp>
 800679e:	4602      	mov	r2, r0
 80067a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a2:	4631      	mov	r1, r6
 80067a4:	4648      	mov	r0, r9
 80067a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80067aa:	f000 fa03 	bl	8006bb4 <_Bfree>
 80067ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067b2:	9e04      	ldr	r6, [sp, #16]
 80067b4:	ea42 0103 	orr.w	r1, r2, r3
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	4319      	orrs	r1, r3
 80067bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067be:	d10d      	bne.n	80067dc <_dtoa_r+0xa4c>
 80067c0:	2b39      	cmp	r3, #57	@ 0x39
 80067c2:	d027      	beq.n	8006814 <_dtoa_r+0xa84>
 80067c4:	9a08      	ldr	r2, [sp, #32]
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	dd01      	ble.n	80067ce <_dtoa_r+0xa3e>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	3331      	adds	r3, #49	@ 0x31
 80067ce:	f88b 3000 	strb.w	r3, [fp]
 80067d2:	e52e      	b.n	8006232 <_dtoa_r+0x4a2>
 80067d4:	4628      	mov	r0, r5
 80067d6:	e7b9      	b.n	800674c <_dtoa_r+0x9bc>
 80067d8:	2201      	movs	r2, #1
 80067da:	e7e2      	b.n	80067a2 <_dtoa_r+0xa12>
 80067dc:	9908      	ldr	r1, [sp, #32]
 80067de:	2900      	cmp	r1, #0
 80067e0:	db04      	blt.n	80067ec <_dtoa_r+0xa5c>
 80067e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80067e4:	4301      	orrs	r1, r0
 80067e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067e8:	4301      	orrs	r1, r0
 80067ea:	d120      	bne.n	800682e <_dtoa_r+0xa9e>
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	ddee      	ble.n	80067ce <_dtoa_r+0xa3e>
 80067f0:	2201      	movs	r2, #1
 80067f2:	9903      	ldr	r1, [sp, #12]
 80067f4:	4648      	mov	r0, r9
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	f000 fba2 	bl	8006f40 <__lshift>
 80067fc:	4621      	mov	r1, r4
 80067fe:	9003      	str	r0, [sp, #12]
 8006800:	f000 fc0a 	bl	8007018 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	dc02      	bgt.n	8006810 <_dtoa_r+0xa80>
 800680a:	d1e0      	bne.n	80067ce <_dtoa_r+0xa3e>
 800680c:	07da      	lsls	r2, r3, #31
 800680e:	d5de      	bpl.n	80067ce <_dtoa_r+0xa3e>
 8006810:	2b39      	cmp	r3, #57	@ 0x39
 8006812:	d1da      	bne.n	80067ca <_dtoa_r+0xa3a>
 8006814:	2339      	movs	r3, #57	@ 0x39
 8006816:	f88b 3000 	strb.w	r3, [fp]
 800681a:	4633      	mov	r3, r6
 800681c:	461e      	mov	r6, r3
 800681e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006822:	3b01      	subs	r3, #1
 8006824:	2a39      	cmp	r2, #57	@ 0x39
 8006826:	d04e      	beq.n	80068c6 <_dtoa_r+0xb36>
 8006828:	3201      	adds	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e501      	b.n	8006232 <_dtoa_r+0x4a2>
 800682e:	2a00      	cmp	r2, #0
 8006830:	dd03      	ble.n	800683a <_dtoa_r+0xaaa>
 8006832:	2b39      	cmp	r3, #57	@ 0x39
 8006834:	d0ee      	beq.n	8006814 <_dtoa_r+0xa84>
 8006836:	3301      	adds	r3, #1
 8006838:	e7c9      	b.n	80067ce <_dtoa_r+0xa3e>
 800683a:	9a04      	ldr	r2, [sp, #16]
 800683c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800683e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006842:	428a      	cmp	r2, r1
 8006844:	d028      	beq.n	8006898 <_dtoa_r+0xb08>
 8006846:	2300      	movs	r3, #0
 8006848:	220a      	movs	r2, #10
 800684a:	9903      	ldr	r1, [sp, #12]
 800684c:	4648      	mov	r0, r9
 800684e:	f000 f9d3 	bl	8006bf8 <__multadd>
 8006852:	42af      	cmp	r7, r5
 8006854:	9003      	str	r0, [sp, #12]
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	f04f 020a 	mov.w	r2, #10
 800685e:	4639      	mov	r1, r7
 8006860:	4648      	mov	r0, r9
 8006862:	d107      	bne.n	8006874 <_dtoa_r+0xae4>
 8006864:	f000 f9c8 	bl	8006bf8 <__multadd>
 8006868:	4607      	mov	r7, r0
 800686a:	4605      	mov	r5, r0
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	3301      	adds	r3, #1
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	e777      	b.n	8006764 <_dtoa_r+0x9d4>
 8006874:	f000 f9c0 	bl	8006bf8 <__multadd>
 8006878:	4629      	mov	r1, r5
 800687a:	4607      	mov	r7, r0
 800687c:	2300      	movs	r3, #0
 800687e:	220a      	movs	r2, #10
 8006880:	4648      	mov	r0, r9
 8006882:	f000 f9b9 	bl	8006bf8 <__multadd>
 8006886:	4605      	mov	r5, r0
 8006888:	e7f0      	b.n	800686c <_dtoa_r+0xadc>
 800688a:	f1bb 0f00 	cmp.w	fp, #0
 800688e:	bfcc      	ite	gt
 8006890:	465e      	movgt	r6, fp
 8006892:	2601      	movle	r6, #1
 8006894:	2700      	movs	r7, #0
 8006896:	4456      	add	r6, sl
 8006898:	2201      	movs	r2, #1
 800689a:	9903      	ldr	r1, [sp, #12]
 800689c:	4648      	mov	r0, r9
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	f000 fb4e 	bl	8006f40 <__lshift>
 80068a4:	4621      	mov	r1, r4
 80068a6:	9003      	str	r0, [sp, #12]
 80068a8:	f000 fbb6 	bl	8007018 <__mcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	dcb4      	bgt.n	800681a <_dtoa_r+0xa8a>
 80068b0:	d102      	bne.n	80068b8 <_dtoa_r+0xb28>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	07db      	lsls	r3, r3, #31
 80068b6:	d4b0      	bmi.n	800681a <_dtoa_r+0xa8a>
 80068b8:	4633      	mov	r3, r6
 80068ba:	461e      	mov	r6, r3
 80068bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c0:	2a30      	cmp	r2, #48	@ 0x30
 80068c2:	d0fa      	beq.n	80068ba <_dtoa_r+0xb2a>
 80068c4:	e4b5      	b.n	8006232 <_dtoa_r+0x4a2>
 80068c6:	459a      	cmp	sl, r3
 80068c8:	d1a8      	bne.n	800681c <_dtoa_r+0xa8c>
 80068ca:	2331      	movs	r3, #49	@ 0x31
 80068cc:	f108 0801 	add.w	r8, r8, #1
 80068d0:	f88a 3000 	strb.w	r3, [sl]
 80068d4:	e4ad      	b.n	8006232 <_dtoa_r+0x4a2>
 80068d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006934 <_dtoa_r+0xba4>
 80068dc:	b11b      	cbz	r3, 80068e6 <_dtoa_r+0xb56>
 80068de:	f10a 0308 	add.w	r3, sl, #8
 80068e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4650      	mov	r0, sl
 80068e8:	b017      	add	sp, #92	@ 0x5c
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	f77f ae2e 	ble.w	8006552 <_dtoa_r+0x7c2>
 80068f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068fa:	2001      	movs	r0, #1
 80068fc:	e64d      	b.n	800659a <_dtoa_r+0x80a>
 80068fe:	f1bb 0f00 	cmp.w	fp, #0
 8006902:	f77f aed9 	ble.w	80066b8 <_dtoa_r+0x928>
 8006906:	4656      	mov	r6, sl
 8006908:	4621      	mov	r1, r4
 800690a:	9803      	ldr	r0, [sp, #12]
 800690c:	f7ff f9b5 	bl	8005c7a <quorem>
 8006910:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006914:	f806 3b01 	strb.w	r3, [r6], #1
 8006918:	eba6 020a 	sub.w	r2, r6, sl
 800691c:	4593      	cmp	fp, r2
 800691e:	ddb4      	ble.n	800688a <_dtoa_r+0xafa>
 8006920:	2300      	movs	r3, #0
 8006922:	220a      	movs	r2, #10
 8006924:	4648      	mov	r0, r9
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	f000 f966 	bl	8006bf8 <__multadd>
 800692c:	9003      	str	r0, [sp, #12]
 800692e:	e7eb      	b.n	8006908 <_dtoa_r+0xb78>
 8006930:	08008c2e 	.word	0x08008c2e
 8006934:	08008bb2 	.word	0x08008bb2

08006938 <_free_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4605      	mov	r5, r0
 800693c:	2900      	cmp	r1, #0
 800693e:	d040      	beq.n	80069c2 <_free_r+0x8a>
 8006940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006944:	1f0c      	subs	r4, r1, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfb8      	it	lt
 800694a:	18e4      	addlt	r4, r4, r3
 800694c:	f000 f8e6 	bl	8006b1c <__malloc_lock>
 8006950:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <_free_r+0x8c>)
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	b933      	cbnz	r3, 8006964 <_free_r+0x2c>
 8006956:	6063      	str	r3, [r4, #4]
 8006958:	6014      	str	r4, [r2, #0]
 800695a:	4628      	mov	r0, r5
 800695c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006960:	f000 b8e2 	b.w	8006b28 <__malloc_unlock>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d908      	bls.n	800697a <_free_r+0x42>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	1821      	adds	r1, r4, r0
 800696c:	428b      	cmp	r3, r1
 800696e:	bf01      	itttt	eq
 8006970:	6819      	ldreq	r1, [r3, #0]
 8006972:	685b      	ldreq	r3, [r3, #4]
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	e7ed      	b.n	8006956 <_free_r+0x1e>
 800697a:	461a      	mov	r2, r3
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b10b      	cbz	r3, 8006984 <_free_r+0x4c>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x42>
 8006984:	6811      	ldr	r1, [r2, #0]
 8006986:	1850      	adds	r0, r2, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x6c>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1850      	adds	r0, r2, r1
 8006992:	4283      	cmp	r3, r0
 8006994:	6011      	str	r1, [r2, #0]
 8006996:	d1e0      	bne.n	800695a <_free_r+0x22>
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4408      	add	r0, r1
 800699e:	6010      	str	r0, [r2, #0]
 80069a0:	6053      	str	r3, [r2, #4]
 80069a2:	e7da      	b.n	800695a <_free_r+0x22>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x74>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d6      	b.n	800695a <_free_r+0x22>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf01      	itttt	eq
 80069b4:	6819      	ldreq	r1, [r3, #0]
 80069b6:	685b      	ldreq	r3, [r3, #4]
 80069b8:	1809      	addeq	r1, r1, r0
 80069ba:	6021      	streq	r1, [r4, #0]
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6054      	str	r4, [r2, #4]
 80069c0:	e7cb      	b.n	800695a <_free_r+0x22>
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000dc0 	.word	0x20000dc0

080069c8 <malloc>:
 80069c8:	4b02      	ldr	r3, [pc, #8]	@ (80069d4 <malloc+0xc>)
 80069ca:	4601      	mov	r1, r0
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f000 b825 	b.w	8006a1c <_malloc_r>
 80069d2:	bf00      	nop
 80069d4:	20000024 	.word	0x20000024

080069d8 <sbrk_aligned>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	4e0f      	ldr	r6, [pc, #60]	@ (8006a18 <sbrk_aligned+0x40>)
 80069dc:	460c      	mov	r4, r1
 80069de:	6831      	ldr	r1, [r6, #0]
 80069e0:	4605      	mov	r5, r0
 80069e2:	b911      	cbnz	r1, 80069ea <sbrk_aligned+0x12>
 80069e4:	f000 fe3a 	bl	800765c <_sbrk_r>
 80069e8:	6030      	str	r0, [r6, #0]
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 fe35 	bl	800765c <_sbrk_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d103      	bne.n	80069fe <sbrk_aligned+0x26>
 80069f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80069fa:	4620      	mov	r0, r4
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
 80069fe:	1cc4      	adds	r4, r0, #3
 8006a00:	f024 0403 	bic.w	r4, r4, #3
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d0f8      	beq.n	80069fa <sbrk_aligned+0x22>
 8006a08:	1a21      	subs	r1, r4, r0
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fe26 	bl	800765c <_sbrk_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1f2      	bne.n	80069fa <sbrk_aligned+0x22>
 8006a14:	e7ef      	b.n	80069f6 <sbrk_aligned+0x1e>
 8006a16:	bf00      	nop
 8006a18:	20000dbc 	.word	0x20000dbc

08006a1c <_malloc_r>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	1ccd      	adds	r5, r1, #3
 8006a22:	f025 0503 	bic.w	r5, r5, #3
 8006a26:	3508      	adds	r5, #8
 8006a28:	2d0c      	cmp	r5, #12
 8006a2a:	bf38      	it	cc
 8006a2c:	250c      	movcc	r5, #12
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	4606      	mov	r6, r0
 8006a32:	db01      	blt.n	8006a38 <_malloc_r+0x1c>
 8006a34:	42a9      	cmp	r1, r5
 8006a36:	d904      	bls.n	8006a42 <_malloc_r+0x26>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b18 <_malloc_r+0xfc>
 8006a46:	f000 f869 	bl	8006b1c <__malloc_lock>
 8006a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a4e:	461c      	mov	r4, r3
 8006a50:	bb44      	cbnz	r4, 8006aa4 <_malloc_r+0x88>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7ff ffbf 	bl	80069d8 <sbrk_aligned>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	d158      	bne.n	8006b12 <_malloc_r+0xf6>
 8006a60:	f8d8 4000 	ldr.w	r4, [r8]
 8006a64:	4627      	mov	r7, r4
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	d143      	bne.n	8006af2 <_malloc_r+0xd6>
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	d04b      	beq.n	8006b06 <_malloc_r+0xea>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	4639      	mov	r1, r7
 8006a72:	4630      	mov	r0, r6
 8006a74:	eb04 0903 	add.w	r9, r4, r3
 8006a78:	f000 fdf0 	bl	800765c <_sbrk_r>
 8006a7c:	4581      	cmp	r9, r0
 8006a7e:	d142      	bne.n	8006b06 <_malloc_r+0xea>
 8006a80:	6821      	ldr	r1, [r4, #0]
 8006a82:	4630      	mov	r0, r6
 8006a84:	1a6d      	subs	r5, r5, r1
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7ff ffa6 	bl	80069d8 <sbrk_aligned>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d03a      	beq.n	8006b06 <_malloc_r+0xea>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	442b      	add	r3, r5
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	bb62      	cbnz	r2, 8006af8 <_malloc_r+0xdc>
 8006a9e:	f8c8 7000 	str.w	r7, [r8]
 8006aa2:	e00f      	b.n	8006ac4 <_malloc_r+0xa8>
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	1b52      	subs	r2, r2, r5
 8006aa8:	d420      	bmi.n	8006aec <_malloc_r+0xd0>
 8006aaa:	2a0b      	cmp	r2, #11
 8006aac:	d917      	bls.n	8006ade <_malloc_r+0xc2>
 8006aae:	1961      	adds	r1, r4, r5
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	6025      	str	r5, [r4, #0]
 8006ab4:	bf18      	it	ne
 8006ab6:	6059      	strne	r1, [r3, #4]
 8006ab8:	6863      	ldr	r3, [r4, #4]
 8006aba:	bf08      	it	eq
 8006abc:	f8c8 1000 	streq.w	r1, [r8]
 8006ac0:	5162      	str	r2, [r4, r5]
 8006ac2:	604b      	str	r3, [r1, #4]
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 f82f 	bl	8006b28 <__malloc_unlock>
 8006aca:	f104 000b 	add.w	r0, r4, #11
 8006ace:	1d23      	adds	r3, r4, #4
 8006ad0:	f020 0007 	bic.w	r0, r0, #7
 8006ad4:	1ac2      	subs	r2, r0, r3
 8006ad6:	bf1c      	itt	ne
 8006ad8:	1a1b      	subne	r3, r3, r0
 8006ada:	50a3      	strne	r3, [r4, r2]
 8006adc:	e7af      	b.n	8006a3e <_malloc_r+0x22>
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	bf0c      	ite	eq
 8006ae4:	f8c8 2000 	streq.w	r2, [r8]
 8006ae8:	605a      	strne	r2, [r3, #4]
 8006aea:	e7eb      	b.n	8006ac4 <_malloc_r+0xa8>
 8006aec:	4623      	mov	r3, r4
 8006aee:	6864      	ldr	r4, [r4, #4]
 8006af0:	e7ae      	b.n	8006a50 <_malloc_r+0x34>
 8006af2:	463c      	mov	r4, r7
 8006af4:	687f      	ldr	r7, [r7, #4]
 8006af6:	e7b6      	b.n	8006a66 <_malloc_r+0x4a>
 8006af8:	461a      	mov	r2, r3
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d1fb      	bne.n	8006af8 <_malloc_r+0xdc>
 8006b00:	2300      	movs	r3, #0
 8006b02:	6053      	str	r3, [r2, #4]
 8006b04:	e7de      	b.n	8006ac4 <_malloc_r+0xa8>
 8006b06:	230c      	movs	r3, #12
 8006b08:	4630      	mov	r0, r6
 8006b0a:	6033      	str	r3, [r6, #0]
 8006b0c:	f000 f80c 	bl	8006b28 <__malloc_unlock>
 8006b10:	e794      	b.n	8006a3c <_malloc_r+0x20>
 8006b12:	6005      	str	r5, [r0, #0]
 8006b14:	e7d6      	b.n	8006ac4 <_malloc_r+0xa8>
 8006b16:	bf00      	nop
 8006b18:	20000dc0 	.word	0x20000dc0

08006b1c <__malloc_lock>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	@ (8006b24 <__malloc_lock+0x8>)
 8006b1e:	f7ff b89c 	b.w	8005c5a <__retarget_lock_acquire_recursive>
 8006b22:	bf00      	nop
 8006b24:	20000db8 	.word	0x20000db8

08006b28 <__malloc_unlock>:
 8006b28:	4801      	ldr	r0, [pc, #4]	@ (8006b30 <__malloc_unlock+0x8>)
 8006b2a:	f7ff b897 	b.w	8005c5c <__retarget_lock_release_recursive>
 8006b2e:	bf00      	nop
 8006b30:	20000db8 	.word	0x20000db8

08006b34 <_Balloc>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	69c6      	ldr	r6, [r0, #28]
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	b976      	cbnz	r6, 8006b5c <_Balloc+0x28>
 8006b3e:	2010      	movs	r0, #16
 8006b40:	f7ff ff42 	bl	80069c8 <malloc>
 8006b44:	4602      	mov	r2, r0
 8006b46:	61e0      	str	r0, [r4, #28]
 8006b48:	b920      	cbnz	r0, 8006b54 <_Balloc+0x20>
 8006b4a:	216b      	movs	r1, #107	@ 0x6b
 8006b4c:	4b17      	ldr	r3, [pc, #92]	@ (8006bac <_Balloc+0x78>)
 8006b4e:	4818      	ldr	r0, [pc, #96]	@ (8006bb0 <_Balloc+0x7c>)
 8006b50:	f000 fda2 	bl	8007698 <__assert_func>
 8006b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b58:	6006      	str	r6, [r0, #0]
 8006b5a:	60c6      	str	r6, [r0, #12]
 8006b5c:	69e6      	ldr	r6, [r4, #28]
 8006b5e:	68f3      	ldr	r3, [r6, #12]
 8006b60:	b183      	cbz	r3, 8006b84 <_Balloc+0x50>
 8006b62:	69e3      	ldr	r3, [r4, #28]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b6a:	b9b8      	cbnz	r0, 8006b9c <_Balloc+0x68>
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b72:	1d72      	adds	r2, r6, #5
 8006b74:	4620      	mov	r0, r4
 8006b76:	0092      	lsls	r2, r2, #2
 8006b78:	f000 fdac 	bl	80076d4 <_calloc_r>
 8006b7c:	b160      	cbz	r0, 8006b98 <_Balloc+0x64>
 8006b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b82:	e00e      	b.n	8006ba2 <_Balloc+0x6e>
 8006b84:	2221      	movs	r2, #33	@ 0x21
 8006b86:	2104      	movs	r1, #4
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fda3 	bl	80076d4 <_calloc_r>
 8006b8e:	69e3      	ldr	r3, [r4, #28]
 8006b90:	60f0      	str	r0, [r6, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e4      	bne.n	8006b62 <_Balloc+0x2e>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	6802      	ldr	r2, [r0, #0]
 8006b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ba8:	e7f7      	b.n	8006b9a <_Balloc+0x66>
 8006baa:	bf00      	nop
 8006bac:	08008bbf 	.word	0x08008bbf
 8006bb0:	08008c3f 	.word	0x08008c3f

08006bb4 <_Bfree>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	69c6      	ldr	r6, [r0, #28]
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	b976      	cbnz	r6, 8006bdc <_Bfree+0x28>
 8006bbe:	2010      	movs	r0, #16
 8006bc0:	f7ff ff02 	bl	80069c8 <malloc>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	61e8      	str	r0, [r5, #28]
 8006bc8:	b920      	cbnz	r0, 8006bd4 <_Bfree+0x20>
 8006bca:	218f      	movs	r1, #143	@ 0x8f
 8006bcc:	4b08      	ldr	r3, [pc, #32]	@ (8006bf0 <_Bfree+0x3c>)
 8006bce:	4809      	ldr	r0, [pc, #36]	@ (8006bf4 <_Bfree+0x40>)
 8006bd0:	f000 fd62 	bl	8007698 <__assert_func>
 8006bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bd8:	6006      	str	r6, [r0, #0]
 8006bda:	60c6      	str	r6, [r0, #12]
 8006bdc:	b13c      	cbz	r4, 8006bee <_Bfree+0x3a>
 8006bde:	69eb      	ldr	r3, [r5, #28]
 8006be0:	6862      	ldr	r2, [r4, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006be8:	6021      	str	r1, [r4, #0]
 8006bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	08008bbf 	.word	0x08008bbf
 8006bf4:	08008c3f 	.word	0x08008c3f

08006bf8 <__multadd>:
 8006bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	461e      	mov	r6, r3
 8006c02:	2000      	movs	r0, #0
 8006c04:	690d      	ldr	r5, [r1, #16]
 8006c06:	f101 0c14 	add.w	ip, r1, #20
 8006c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c0e:	3001      	adds	r0, #1
 8006c10:	b299      	uxth	r1, r3
 8006c12:	fb02 6101 	mla	r1, r2, r1, r6
 8006c16:	0c1e      	lsrs	r6, r3, #16
 8006c18:	0c0b      	lsrs	r3, r1, #16
 8006c1a:	fb02 3306 	mla	r3, r2, r6, r3
 8006c1e:	b289      	uxth	r1, r1
 8006c20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c24:	4285      	cmp	r5, r0
 8006c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c2e:	dcec      	bgt.n	8006c0a <__multadd+0x12>
 8006c30:	b30e      	cbz	r6, 8006c76 <__multadd+0x7e>
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dc19      	bgt.n	8006c6c <__multadd+0x74>
 8006c38:	6861      	ldr	r1, [r4, #4]
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	3101      	adds	r1, #1
 8006c3e:	f7ff ff79 	bl	8006b34 <_Balloc>
 8006c42:	4680      	mov	r8, r0
 8006c44:	b928      	cbnz	r0, 8006c52 <__multadd+0x5a>
 8006c46:	4602      	mov	r2, r0
 8006c48:	21ba      	movs	r1, #186	@ 0xba
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <__multadd+0x84>)
 8006c4c:	480c      	ldr	r0, [pc, #48]	@ (8006c80 <__multadd+0x88>)
 8006c4e:	f000 fd23 	bl	8007698 <__assert_func>
 8006c52:	6922      	ldr	r2, [r4, #16]
 8006c54:	f104 010c 	add.w	r1, r4, #12
 8006c58:	3202      	adds	r2, #2
 8006c5a:	0092      	lsls	r2, r2, #2
 8006c5c:	300c      	adds	r0, #12
 8006c5e:	f000 fd0d 	bl	800767c <memcpy>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4638      	mov	r0, r7
 8006c66:	f7ff ffa5 	bl	8006bb4 <_Bfree>
 8006c6a:	4644      	mov	r4, r8
 8006c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c70:	3501      	adds	r5, #1
 8006c72:	615e      	str	r6, [r3, #20]
 8006c74:	6125      	str	r5, [r4, #16]
 8006c76:	4620      	mov	r0, r4
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	08008c2e 	.word	0x08008c2e
 8006c80:	08008c3f 	.word	0x08008c3f

08006c84 <__hi0bits>:
 8006c84:	4603      	mov	r3, r0
 8006c86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c8a:	bf3a      	itte	cc
 8006c8c:	0403      	lslcc	r3, r0, #16
 8006c8e:	2010      	movcc	r0, #16
 8006c90:	2000      	movcs	r0, #0
 8006c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c96:	bf3c      	itt	cc
 8006c98:	021b      	lslcc	r3, r3, #8
 8006c9a:	3008      	addcc	r0, #8
 8006c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ca0:	bf3c      	itt	cc
 8006ca2:	011b      	lslcc	r3, r3, #4
 8006ca4:	3004      	addcc	r0, #4
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	bf3c      	itt	cc
 8006cac:	009b      	lslcc	r3, r3, #2
 8006cae:	3002      	addcc	r0, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	db05      	blt.n	8006cc0 <__hi0bits+0x3c>
 8006cb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cb8:	f100 0001 	add.w	r0, r0, #1
 8006cbc:	bf08      	it	eq
 8006cbe:	2020      	moveq	r0, #32
 8006cc0:	4770      	bx	lr

08006cc2 <__lo0bits>:
 8006cc2:	6803      	ldr	r3, [r0, #0]
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f013 0007 	ands.w	r0, r3, #7
 8006cca:	d00b      	beq.n	8006ce4 <__lo0bits+0x22>
 8006ccc:	07d9      	lsls	r1, r3, #31
 8006cce:	d421      	bmi.n	8006d14 <__lo0bits+0x52>
 8006cd0:	0798      	lsls	r0, r3, #30
 8006cd2:	bf49      	itett	mi
 8006cd4:	085b      	lsrmi	r3, r3, #1
 8006cd6:	089b      	lsrpl	r3, r3, #2
 8006cd8:	2001      	movmi	r0, #1
 8006cda:	6013      	strmi	r3, [r2, #0]
 8006cdc:	bf5c      	itt	pl
 8006cde:	2002      	movpl	r0, #2
 8006ce0:	6013      	strpl	r3, [r2, #0]
 8006ce2:	4770      	bx	lr
 8006ce4:	b299      	uxth	r1, r3
 8006ce6:	b909      	cbnz	r1, 8006cec <__lo0bits+0x2a>
 8006ce8:	2010      	movs	r0, #16
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	b2d9      	uxtb	r1, r3
 8006cee:	b909      	cbnz	r1, 8006cf4 <__lo0bits+0x32>
 8006cf0:	3008      	adds	r0, #8
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	0719      	lsls	r1, r3, #28
 8006cf6:	bf04      	itt	eq
 8006cf8:	091b      	lsreq	r3, r3, #4
 8006cfa:	3004      	addeq	r0, #4
 8006cfc:	0799      	lsls	r1, r3, #30
 8006cfe:	bf04      	itt	eq
 8006d00:	089b      	lsreq	r3, r3, #2
 8006d02:	3002      	addeq	r0, #2
 8006d04:	07d9      	lsls	r1, r3, #31
 8006d06:	d403      	bmi.n	8006d10 <__lo0bits+0x4e>
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	f100 0001 	add.w	r0, r0, #1
 8006d0e:	d003      	beq.n	8006d18 <__lo0bits+0x56>
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4770      	bx	lr
 8006d14:	2000      	movs	r0, #0
 8006d16:	4770      	bx	lr
 8006d18:	2020      	movs	r0, #32
 8006d1a:	4770      	bx	lr

08006d1c <__i2b>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	2101      	movs	r1, #1
 8006d22:	f7ff ff07 	bl	8006b34 <_Balloc>
 8006d26:	4602      	mov	r2, r0
 8006d28:	b928      	cbnz	r0, 8006d36 <__i2b+0x1a>
 8006d2a:	f240 1145 	movw	r1, #325	@ 0x145
 8006d2e:	4b04      	ldr	r3, [pc, #16]	@ (8006d40 <__i2b+0x24>)
 8006d30:	4804      	ldr	r0, [pc, #16]	@ (8006d44 <__i2b+0x28>)
 8006d32:	f000 fcb1 	bl	8007698 <__assert_func>
 8006d36:	2301      	movs	r3, #1
 8006d38:	6144      	str	r4, [r0, #20]
 8006d3a:	6103      	str	r3, [r0, #16]
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	bf00      	nop
 8006d40:	08008c2e 	.word	0x08008c2e
 8006d44:	08008c3f 	.word	0x08008c3f

08006d48 <__multiply>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	4617      	mov	r7, r2
 8006d4e:	690a      	ldr	r2, [r1, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4689      	mov	r9, r1
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bfa2      	ittt	ge
 8006d58:	463b      	movge	r3, r7
 8006d5a:	460f      	movge	r7, r1
 8006d5c:	4699      	movge	r9, r3
 8006d5e:	693d      	ldr	r5, [r7, #16]
 8006d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	eb05 060a 	add.w	r6, r5, sl
 8006d6c:	42b3      	cmp	r3, r6
 8006d6e:	b085      	sub	sp, #20
 8006d70:	bfb8      	it	lt
 8006d72:	3101      	addlt	r1, #1
 8006d74:	f7ff fede 	bl	8006b34 <_Balloc>
 8006d78:	b930      	cbnz	r0, 8006d88 <__multiply+0x40>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d80:	4b40      	ldr	r3, [pc, #256]	@ (8006e84 <__multiply+0x13c>)
 8006d82:	4841      	ldr	r0, [pc, #260]	@ (8006e88 <__multiply+0x140>)
 8006d84:	f000 fc88 	bl	8007698 <__assert_func>
 8006d88:	f100 0414 	add.w	r4, r0, #20
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	2200      	movs	r2, #0
 8006d90:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006d94:	4573      	cmp	r3, lr
 8006d96:	d320      	bcc.n	8006dda <__multiply+0x92>
 8006d98:	f107 0814 	add.w	r8, r7, #20
 8006d9c:	f109 0114 	add.w	r1, r9, #20
 8006da0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006da4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006da8:	9302      	str	r3, [sp, #8]
 8006daa:	1beb      	subs	r3, r5, r7
 8006dac:	3b15      	subs	r3, #21
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	3304      	adds	r3, #4
 8006db4:	3715      	adds	r7, #21
 8006db6:	42bd      	cmp	r5, r7
 8006db8:	bf38      	it	cc
 8006dba:	2304      	movcc	r3, #4
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	9b02      	ldr	r3, [sp, #8]
 8006dc0:	9103      	str	r1, [sp, #12]
 8006dc2:	428b      	cmp	r3, r1
 8006dc4:	d80c      	bhi.n	8006de0 <__multiply+0x98>
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	dd03      	ble.n	8006dd2 <__multiply+0x8a>
 8006dca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d055      	beq.n	8006e7e <__multiply+0x136>
 8006dd2:	6106      	str	r6, [r0, #16]
 8006dd4:	b005      	add	sp, #20
 8006dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dda:	f843 2b04 	str.w	r2, [r3], #4
 8006dde:	e7d9      	b.n	8006d94 <__multiply+0x4c>
 8006de0:	f8b1 a000 	ldrh.w	sl, [r1]
 8006de4:	f1ba 0f00 	cmp.w	sl, #0
 8006de8:	d01f      	beq.n	8006e2a <__multiply+0xe2>
 8006dea:	46c4      	mov	ip, r8
 8006dec:	46a1      	mov	r9, r4
 8006dee:	2700      	movs	r7, #0
 8006df0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006df4:	f8d9 3000 	ldr.w	r3, [r9]
 8006df8:	fa1f fb82 	uxth.w	fp, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e02:	443b      	add	r3, r7
 8006e04:	f8d9 7000 	ldr.w	r7, [r9]
 8006e08:	0c12      	lsrs	r2, r2, #16
 8006e0a:	0c3f      	lsrs	r7, r7, #16
 8006e0c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e10:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e1a:	4565      	cmp	r5, ip
 8006e1c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e20:	f849 3b04 	str.w	r3, [r9], #4
 8006e24:	d8e4      	bhi.n	8006df0 <__multiply+0xa8>
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	50e7      	str	r7, [r4, r3]
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	3104      	adds	r1, #4
 8006e2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e32:	f1b9 0f00 	cmp.w	r9, #0
 8006e36:	d020      	beq.n	8006e7a <__multiply+0x132>
 8006e38:	4647      	mov	r7, r8
 8006e3a:	46a4      	mov	ip, r4
 8006e3c:	f04f 0a00 	mov.w	sl, #0
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e46:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	fb09 220b 	mla	r2, r9, fp, r2
 8006e50:	4452      	add	r2, sl
 8006e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e56:	f84c 3b04 	str.w	r3, [ip], #4
 8006e5a:	f857 3b04 	ldr.w	r3, [r7], #4
 8006e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e62:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e66:	42bd      	cmp	r5, r7
 8006e68:	fb09 330a 	mla	r3, r9, sl, r3
 8006e6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e74:	d8e5      	bhi.n	8006e42 <__multiply+0xfa>
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	50a3      	str	r3, [r4, r2]
 8006e7a:	3404      	adds	r4, #4
 8006e7c:	e79f      	b.n	8006dbe <__multiply+0x76>
 8006e7e:	3e01      	subs	r6, #1
 8006e80:	e7a1      	b.n	8006dc6 <__multiply+0x7e>
 8006e82:	bf00      	nop
 8006e84:	08008c2e 	.word	0x08008c2e
 8006e88:	08008c3f 	.word	0x08008c3f

08006e8c <__pow5mult>:
 8006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e90:	4615      	mov	r5, r2
 8006e92:	f012 0203 	ands.w	r2, r2, #3
 8006e96:	4607      	mov	r7, r0
 8006e98:	460e      	mov	r6, r1
 8006e9a:	d007      	beq.n	8006eac <__pow5mult+0x20>
 8006e9c:	4c25      	ldr	r4, [pc, #148]	@ (8006f34 <__pow5mult+0xa8>)
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ea6:	f7ff fea7 	bl	8006bf8 <__multadd>
 8006eaa:	4606      	mov	r6, r0
 8006eac:	10ad      	asrs	r5, r5, #2
 8006eae:	d03d      	beq.n	8006f2c <__pow5mult+0xa0>
 8006eb0:	69fc      	ldr	r4, [r7, #28]
 8006eb2:	b97c      	cbnz	r4, 8006ed4 <__pow5mult+0x48>
 8006eb4:	2010      	movs	r0, #16
 8006eb6:	f7ff fd87 	bl	80069c8 <malloc>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	61f8      	str	r0, [r7, #28]
 8006ebe:	b928      	cbnz	r0, 8006ecc <__pow5mult+0x40>
 8006ec0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f38 <__pow5mult+0xac>)
 8006ec6:	481d      	ldr	r0, [pc, #116]	@ (8006f3c <__pow5mult+0xb0>)
 8006ec8:	f000 fbe6 	bl	8007698 <__assert_func>
 8006ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ed0:	6004      	str	r4, [r0, #0]
 8006ed2:	60c4      	str	r4, [r0, #12]
 8006ed4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006edc:	b94c      	cbnz	r4, 8006ef2 <__pow5mult+0x66>
 8006ede:	f240 2171 	movw	r1, #625	@ 0x271
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7ff ff1a 	bl	8006d1c <__i2b>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	f04f 0900 	mov.w	r9, #0
 8006ef6:	07eb      	lsls	r3, r5, #31
 8006ef8:	d50a      	bpl.n	8006f10 <__pow5mult+0x84>
 8006efa:	4631      	mov	r1, r6
 8006efc:	4622      	mov	r2, r4
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7ff ff22 	bl	8006d48 <__multiply>
 8006f04:	4680      	mov	r8, r0
 8006f06:	4631      	mov	r1, r6
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff fe53 	bl	8006bb4 <_Bfree>
 8006f0e:	4646      	mov	r6, r8
 8006f10:	106d      	asrs	r5, r5, #1
 8006f12:	d00b      	beq.n	8006f2c <__pow5mult+0xa0>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	b938      	cbnz	r0, 8006f28 <__pow5mult+0x9c>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff ff13 	bl	8006d48 <__multiply>
 8006f22:	6020      	str	r0, [r4, #0]
 8006f24:	f8c0 9000 	str.w	r9, [r0]
 8006f28:	4604      	mov	r4, r0
 8006f2a:	e7e4      	b.n	8006ef6 <__pow5mult+0x6a>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	bf00      	nop
 8006f34:	08008cf0 	.word	0x08008cf0
 8006f38:	08008bbf 	.word	0x08008bbf
 8006f3c:	08008c3f 	.word	0x08008c3f

08006f40 <__lshift>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	4607      	mov	r7, r0
 8006f48:	4691      	mov	r9, r2
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	6849      	ldr	r1, [r1, #4]
 8006f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f52:	68a3      	ldr	r3, [r4, #8]
 8006f54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f58:	f108 0601 	add.w	r6, r8, #1
 8006f5c:	42b3      	cmp	r3, r6
 8006f5e:	db0b      	blt.n	8006f78 <__lshift+0x38>
 8006f60:	4638      	mov	r0, r7
 8006f62:	f7ff fde7 	bl	8006b34 <_Balloc>
 8006f66:	4605      	mov	r5, r0
 8006f68:	b948      	cbnz	r0, 8006f7e <__lshift+0x3e>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f70:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <__lshift+0xd0>)
 8006f72:	4828      	ldr	r0, [pc, #160]	@ (8007014 <__lshift+0xd4>)
 8006f74:	f000 fb90 	bl	8007698 <__assert_func>
 8006f78:	3101      	adds	r1, #1
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	e7ee      	b.n	8006f5c <__lshift+0x1c>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f100 0114 	add.w	r1, r0, #20
 8006f84:	f100 0210 	add.w	r2, r0, #16
 8006f88:	4618      	mov	r0, r3
 8006f8a:	4553      	cmp	r3, sl
 8006f8c:	db33      	blt.n	8006ff6 <__lshift+0xb6>
 8006f8e:	6920      	ldr	r0, [r4, #16]
 8006f90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f94:	f104 0314 	add.w	r3, r4, #20
 8006f98:	f019 091f 	ands.w	r9, r9, #31
 8006f9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fa4:	d02b      	beq.n	8006ffe <__lshift+0xbe>
 8006fa6:	468a      	mov	sl, r1
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f1c9 0e20 	rsb	lr, r9, #32
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	fa00 f009 	lsl.w	r0, r0, r9
 8006fb4:	4310      	orrs	r0, r2
 8006fb6:	f84a 0b04 	str.w	r0, [sl], #4
 8006fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fbe:	459c      	cmp	ip, r3
 8006fc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fc4:	d8f3      	bhi.n	8006fae <__lshift+0x6e>
 8006fc6:	ebac 0304 	sub.w	r3, ip, r4
 8006fca:	3b15      	subs	r3, #21
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	f104 0015 	add.w	r0, r4, #21
 8006fd6:	4560      	cmp	r0, ip
 8006fd8:	bf88      	it	hi
 8006fda:	2304      	movhi	r3, #4
 8006fdc:	50ca      	str	r2, [r1, r3]
 8006fde:	b10a      	cbz	r2, 8006fe4 <__lshift+0xa4>
 8006fe0:	f108 0602 	add.w	r6, r8, #2
 8006fe4:	3e01      	subs	r6, #1
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	4621      	mov	r1, r4
 8006fea:	612e      	str	r6, [r5, #16]
 8006fec:	f7ff fde2 	bl	8006bb4 <_Bfree>
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	e7c5      	b.n	8006f8a <__lshift+0x4a>
 8006ffe:	3904      	subs	r1, #4
 8007000:	f853 2b04 	ldr.w	r2, [r3], #4
 8007004:	459c      	cmp	ip, r3
 8007006:	f841 2f04 	str.w	r2, [r1, #4]!
 800700a:	d8f9      	bhi.n	8007000 <__lshift+0xc0>
 800700c:	e7ea      	b.n	8006fe4 <__lshift+0xa4>
 800700e:	bf00      	nop
 8007010:	08008c2e 	.word	0x08008c2e
 8007014:	08008c3f 	.word	0x08008c3f

08007018 <__mcmp>:
 8007018:	4603      	mov	r3, r0
 800701a:	690a      	ldr	r2, [r1, #16]
 800701c:	6900      	ldr	r0, [r0, #16]
 800701e:	b530      	push	{r4, r5, lr}
 8007020:	1a80      	subs	r0, r0, r2
 8007022:	d10e      	bne.n	8007042 <__mcmp+0x2a>
 8007024:	3314      	adds	r3, #20
 8007026:	3114      	adds	r1, #20
 8007028:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800702c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007038:	4295      	cmp	r5, r2
 800703a:	d003      	beq.n	8007044 <__mcmp+0x2c>
 800703c:	d205      	bcs.n	800704a <__mcmp+0x32>
 800703e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007042:	bd30      	pop	{r4, r5, pc}
 8007044:	42a3      	cmp	r3, r4
 8007046:	d3f3      	bcc.n	8007030 <__mcmp+0x18>
 8007048:	e7fb      	b.n	8007042 <__mcmp+0x2a>
 800704a:	2001      	movs	r0, #1
 800704c:	e7f9      	b.n	8007042 <__mcmp+0x2a>
	...

08007050 <__mdiff>:
 8007050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	4689      	mov	r9, r1
 8007056:	4606      	mov	r6, r0
 8007058:	4611      	mov	r1, r2
 800705a:	4648      	mov	r0, r9
 800705c:	4614      	mov	r4, r2
 800705e:	f7ff ffdb 	bl	8007018 <__mcmp>
 8007062:	1e05      	subs	r5, r0, #0
 8007064:	d112      	bne.n	800708c <__mdiff+0x3c>
 8007066:	4629      	mov	r1, r5
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff fd63 	bl	8006b34 <_Balloc>
 800706e:	4602      	mov	r2, r0
 8007070:	b928      	cbnz	r0, 800707e <__mdiff+0x2e>
 8007072:	f240 2137 	movw	r1, #567	@ 0x237
 8007076:	4b3e      	ldr	r3, [pc, #248]	@ (8007170 <__mdiff+0x120>)
 8007078:	483e      	ldr	r0, [pc, #248]	@ (8007174 <__mdiff+0x124>)
 800707a:	f000 fb0d 	bl	8007698 <__assert_func>
 800707e:	2301      	movs	r3, #1
 8007080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007084:	4610      	mov	r0, r2
 8007086:	b003      	add	sp, #12
 8007088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708c:	bfbc      	itt	lt
 800708e:	464b      	movlt	r3, r9
 8007090:	46a1      	movlt	r9, r4
 8007092:	4630      	mov	r0, r6
 8007094:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007098:	bfba      	itte	lt
 800709a:	461c      	movlt	r4, r3
 800709c:	2501      	movlt	r5, #1
 800709e:	2500      	movge	r5, #0
 80070a0:	f7ff fd48 	bl	8006b34 <_Balloc>
 80070a4:	4602      	mov	r2, r0
 80070a6:	b918      	cbnz	r0, 80070b0 <__mdiff+0x60>
 80070a8:	f240 2145 	movw	r1, #581	@ 0x245
 80070ac:	4b30      	ldr	r3, [pc, #192]	@ (8007170 <__mdiff+0x120>)
 80070ae:	e7e3      	b.n	8007078 <__mdiff+0x28>
 80070b0:	f100 0b14 	add.w	fp, r0, #20
 80070b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070b8:	f109 0310 	add.w	r3, r9, #16
 80070bc:	60c5      	str	r5, [r0, #12]
 80070be:	f04f 0c00 	mov.w	ip, #0
 80070c2:	f109 0514 	add.w	r5, r9, #20
 80070c6:	46d9      	mov	r9, fp
 80070c8:	6926      	ldr	r6, [r4, #16]
 80070ca:	f104 0e14 	add.w	lr, r4, #20
 80070ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	9b01      	ldr	r3, [sp, #4]
 80070da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80070e2:	b281      	uxth	r1, r0
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	fa1f f38a 	uxth.w	r3, sl
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	0c00      	lsrs	r0, r0, #16
 80070ee:	4463      	add	r3, ip
 80070f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80070f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80070fe:	4576      	cmp	r6, lr
 8007100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007104:	f849 3b04 	str.w	r3, [r9], #4
 8007108:	d8e6      	bhi.n	80070d8 <__mdiff+0x88>
 800710a:	1b33      	subs	r3, r6, r4
 800710c:	3b15      	subs	r3, #21
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	3415      	adds	r4, #21
 8007114:	3304      	adds	r3, #4
 8007116:	42a6      	cmp	r6, r4
 8007118:	bf38      	it	cc
 800711a:	2304      	movcc	r3, #4
 800711c:	441d      	add	r5, r3
 800711e:	445b      	add	r3, fp
 8007120:	461e      	mov	r6, r3
 8007122:	462c      	mov	r4, r5
 8007124:	4544      	cmp	r4, r8
 8007126:	d30e      	bcc.n	8007146 <__mdiff+0xf6>
 8007128:	f108 0103 	add.w	r1, r8, #3
 800712c:	1b49      	subs	r1, r1, r5
 800712e:	f021 0103 	bic.w	r1, r1, #3
 8007132:	3d03      	subs	r5, #3
 8007134:	45a8      	cmp	r8, r5
 8007136:	bf38      	it	cc
 8007138:	2100      	movcc	r1, #0
 800713a:	440b      	add	r3, r1
 800713c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007140:	b199      	cbz	r1, 800716a <__mdiff+0x11a>
 8007142:	6117      	str	r7, [r2, #16]
 8007144:	e79e      	b.n	8007084 <__mdiff+0x34>
 8007146:	46e6      	mov	lr, ip
 8007148:	f854 1b04 	ldr.w	r1, [r4], #4
 800714c:	fa1f fc81 	uxth.w	ip, r1
 8007150:	44f4      	add	ip, lr
 8007152:	0c08      	lsrs	r0, r1, #16
 8007154:	4471      	add	r1, lr
 8007156:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800715a:	b289      	uxth	r1, r1
 800715c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007160:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007164:	f846 1b04 	str.w	r1, [r6], #4
 8007168:	e7dc      	b.n	8007124 <__mdiff+0xd4>
 800716a:	3f01      	subs	r7, #1
 800716c:	e7e6      	b.n	800713c <__mdiff+0xec>
 800716e:	bf00      	nop
 8007170:	08008c2e 	.word	0x08008c2e
 8007174:	08008c3f 	.word	0x08008c3f

08007178 <__d2b>:
 8007178:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800717c:	2101      	movs	r1, #1
 800717e:	4690      	mov	r8, r2
 8007180:	4699      	mov	r9, r3
 8007182:	9e08      	ldr	r6, [sp, #32]
 8007184:	f7ff fcd6 	bl	8006b34 <_Balloc>
 8007188:	4604      	mov	r4, r0
 800718a:	b930      	cbnz	r0, 800719a <__d2b+0x22>
 800718c:	4602      	mov	r2, r0
 800718e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007192:	4b23      	ldr	r3, [pc, #140]	@ (8007220 <__d2b+0xa8>)
 8007194:	4823      	ldr	r0, [pc, #140]	@ (8007224 <__d2b+0xac>)
 8007196:	f000 fa7f 	bl	8007698 <__assert_func>
 800719a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800719e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071a2:	b10d      	cbz	r5, 80071a8 <__d2b+0x30>
 80071a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	f1b8 0300 	subs.w	r3, r8, #0
 80071ae:	d024      	beq.n	80071fa <__d2b+0x82>
 80071b0:	4668      	mov	r0, sp
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f7ff fd85 	bl	8006cc2 <__lo0bits>
 80071b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071bc:	b1d8      	cbz	r0, 80071f6 <__d2b+0x7e>
 80071be:	f1c0 0320 	rsb	r3, r0, #32
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	430b      	orrs	r3, r1
 80071c8:	40c2      	lsrs	r2, r0
 80071ca:	6163      	str	r3, [r4, #20]
 80071cc:	9201      	str	r2, [sp, #4]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bf0c      	ite	eq
 80071d4:	2201      	moveq	r2, #1
 80071d6:	2202      	movne	r2, #2
 80071d8:	61a3      	str	r3, [r4, #24]
 80071da:	6122      	str	r2, [r4, #16]
 80071dc:	b1ad      	cbz	r5, 800720a <__d2b+0x92>
 80071de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071e2:	4405      	add	r5, r0
 80071e4:	6035      	str	r5, [r6, #0]
 80071e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ec:	6018      	str	r0, [r3, #0]
 80071ee:	4620      	mov	r0, r4
 80071f0:	b002      	add	sp, #8
 80071f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80071f6:	6161      	str	r1, [r4, #20]
 80071f8:	e7e9      	b.n	80071ce <__d2b+0x56>
 80071fa:	a801      	add	r0, sp, #4
 80071fc:	f7ff fd61 	bl	8006cc2 <__lo0bits>
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	6163      	str	r3, [r4, #20]
 8007206:	3020      	adds	r0, #32
 8007208:	e7e7      	b.n	80071da <__d2b+0x62>
 800720a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800720e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007212:	6030      	str	r0, [r6, #0]
 8007214:	6918      	ldr	r0, [r3, #16]
 8007216:	f7ff fd35 	bl	8006c84 <__hi0bits>
 800721a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800721e:	e7e4      	b.n	80071ea <__d2b+0x72>
 8007220:	08008c2e 	.word	0x08008c2e
 8007224:	08008c3f 	.word	0x08008c3f

08007228 <__ssputs_r>:
 8007228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	461f      	mov	r7, r3
 800722e:	688e      	ldr	r6, [r1, #8]
 8007230:	4682      	mov	sl, r0
 8007232:	42be      	cmp	r6, r7
 8007234:	460c      	mov	r4, r1
 8007236:	4690      	mov	r8, r2
 8007238:	680b      	ldr	r3, [r1, #0]
 800723a:	d82d      	bhi.n	8007298 <__ssputs_r+0x70>
 800723c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007240:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007244:	d026      	beq.n	8007294 <__ssputs_r+0x6c>
 8007246:	6965      	ldr	r5, [r4, #20]
 8007248:	6909      	ldr	r1, [r1, #16]
 800724a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800724e:	eba3 0901 	sub.w	r9, r3, r1
 8007252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007256:	1c7b      	adds	r3, r7, #1
 8007258:	444b      	add	r3, r9
 800725a:	106d      	asrs	r5, r5, #1
 800725c:	429d      	cmp	r5, r3
 800725e:	bf38      	it	cc
 8007260:	461d      	movcc	r5, r3
 8007262:	0553      	lsls	r3, r2, #21
 8007264:	d527      	bpl.n	80072b6 <__ssputs_r+0x8e>
 8007266:	4629      	mov	r1, r5
 8007268:	f7ff fbd8 	bl	8006a1c <_malloc_r>
 800726c:	4606      	mov	r6, r0
 800726e:	b360      	cbz	r0, 80072ca <__ssputs_r+0xa2>
 8007270:	464a      	mov	r2, r9
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	f000 fa02 	bl	800767c <memcpy>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800727e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	6126      	str	r6, [r4, #16]
 8007286:	444e      	add	r6, r9
 8007288:	6026      	str	r6, [r4, #0]
 800728a:	463e      	mov	r6, r7
 800728c:	6165      	str	r5, [r4, #20]
 800728e:	eba5 0509 	sub.w	r5, r5, r9
 8007292:	60a5      	str	r5, [r4, #8]
 8007294:	42be      	cmp	r6, r7
 8007296:	d900      	bls.n	800729a <__ssputs_r+0x72>
 8007298:	463e      	mov	r6, r7
 800729a:	4632      	mov	r2, r6
 800729c:	4641      	mov	r1, r8
 800729e:	6820      	ldr	r0, [r4, #0]
 80072a0:	f000 f9c2 	bl	8007628 <memmove>
 80072a4:	2000      	movs	r0, #0
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	1b9b      	subs	r3, r3, r6
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	4433      	add	r3, r6
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b6:	462a      	mov	r2, r5
 80072b8:	f000 fa32 	bl	8007720 <_realloc_r>
 80072bc:	4606      	mov	r6, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1e0      	bne.n	8007284 <__ssputs_r+0x5c>
 80072c2:	4650      	mov	r0, sl
 80072c4:	6921      	ldr	r1, [r4, #16]
 80072c6:	f7ff fb37 	bl	8006938 <_free_r>
 80072ca:	230c      	movs	r3, #12
 80072cc:	f8ca 3000 	str.w	r3, [sl]
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	e7e9      	b.n	80072b2 <__ssputs_r+0x8a>
	...

080072e0 <_svfiprintf_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4698      	mov	r8, r3
 80072e6:	898b      	ldrh	r3, [r1, #12]
 80072e8:	4607      	mov	r7, r0
 80072ea:	061b      	lsls	r3, r3, #24
 80072ec:	460d      	mov	r5, r1
 80072ee:	4614      	mov	r4, r2
 80072f0:	b09d      	sub	sp, #116	@ 0x74
 80072f2:	d510      	bpl.n	8007316 <_svfiprintf_r+0x36>
 80072f4:	690b      	ldr	r3, [r1, #16]
 80072f6:	b973      	cbnz	r3, 8007316 <_svfiprintf_r+0x36>
 80072f8:	2140      	movs	r1, #64	@ 0x40
 80072fa:	f7ff fb8f 	bl	8006a1c <_malloc_r>
 80072fe:	6028      	str	r0, [r5, #0]
 8007300:	6128      	str	r0, [r5, #16]
 8007302:	b930      	cbnz	r0, 8007312 <_svfiprintf_r+0x32>
 8007304:	230c      	movs	r3, #12
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800730c:	b01d      	add	sp, #116	@ 0x74
 800730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007312:	2340      	movs	r3, #64	@ 0x40
 8007314:	616b      	str	r3, [r5, #20]
 8007316:	2300      	movs	r3, #0
 8007318:	9309      	str	r3, [sp, #36]	@ 0x24
 800731a:	2320      	movs	r3, #32
 800731c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007320:	2330      	movs	r3, #48	@ 0x30
 8007322:	f04f 0901 	mov.w	r9, #1
 8007326:	f8cd 800c 	str.w	r8, [sp, #12]
 800732a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80074c4 <_svfiprintf_r+0x1e4>
 800732e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007332:	4623      	mov	r3, r4
 8007334:	469a      	mov	sl, r3
 8007336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733a:	b10a      	cbz	r2, 8007340 <_svfiprintf_r+0x60>
 800733c:	2a25      	cmp	r2, #37	@ 0x25
 800733e:	d1f9      	bne.n	8007334 <_svfiprintf_r+0x54>
 8007340:	ebba 0b04 	subs.w	fp, sl, r4
 8007344:	d00b      	beq.n	800735e <_svfiprintf_r+0x7e>
 8007346:	465b      	mov	r3, fp
 8007348:	4622      	mov	r2, r4
 800734a:	4629      	mov	r1, r5
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff ff6b 	bl	8007228 <__ssputs_r>
 8007352:	3001      	adds	r0, #1
 8007354:	f000 80a7 	beq.w	80074a6 <_svfiprintf_r+0x1c6>
 8007358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735a:	445a      	add	r2, fp
 800735c:	9209      	str	r2, [sp, #36]	@ 0x24
 800735e:	f89a 3000 	ldrb.w	r3, [sl]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 809f 	beq.w	80074a6 <_svfiprintf_r+0x1c6>
 8007368:	2300      	movs	r3, #0
 800736a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800736e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007372:	f10a 0a01 	add.w	sl, sl, #1
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	9307      	str	r3, [sp, #28]
 800737a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800737e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007380:	4654      	mov	r4, sl
 8007382:	2205      	movs	r2, #5
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	484e      	ldr	r0, [pc, #312]	@ (80074c4 <_svfiprintf_r+0x1e4>)
 800738a:	f7fe fc68 	bl	8005c5e <memchr>
 800738e:	9a04      	ldr	r2, [sp, #16]
 8007390:	b9d8      	cbnz	r0, 80073ca <_svfiprintf_r+0xea>
 8007392:	06d0      	lsls	r0, r2, #27
 8007394:	bf44      	itt	mi
 8007396:	2320      	movmi	r3, #32
 8007398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739c:	0711      	lsls	r1, r2, #28
 800739e:	bf44      	itt	mi
 80073a0:	232b      	movmi	r3, #43	@ 0x2b
 80073a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a6:	f89a 3000 	ldrb.w	r3, [sl]
 80073aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ac:	d015      	beq.n	80073da <_svfiprintf_r+0xfa>
 80073ae:	4654      	mov	r4, sl
 80073b0:	2000      	movs	r0, #0
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	9a07      	ldr	r2, [sp, #28]
 80073b8:	4621      	mov	r1, r4
 80073ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073be:	3b30      	subs	r3, #48	@ 0x30
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d94b      	bls.n	800745c <_svfiprintf_r+0x17c>
 80073c4:	b1b0      	cbz	r0, 80073f4 <_svfiprintf_r+0x114>
 80073c6:	9207      	str	r2, [sp, #28]
 80073c8:	e014      	b.n	80073f4 <_svfiprintf_r+0x114>
 80073ca:	eba0 0308 	sub.w	r3, r0, r8
 80073ce:	fa09 f303 	lsl.w	r3, r9, r3
 80073d2:	4313      	orrs	r3, r2
 80073d4:	46a2      	mov	sl, r4
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	e7d2      	b.n	8007380 <_svfiprintf_r+0xa0>
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	1d19      	adds	r1, r3, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	9103      	str	r1, [sp, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfbb      	ittet	lt
 80073e6:	425b      	neglt	r3, r3
 80073e8:	f042 0202 	orrlt.w	r2, r2, #2
 80073ec:	9307      	strge	r3, [sp, #28]
 80073ee:	9307      	strlt	r3, [sp, #28]
 80073f0:	bfb8      	it	lt
 80073f2:	9204      	strlt	r2, [sp, #16]
 80073f4:	7823      	ldrb	r3, [r4, #0]
 80073f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f8:	d10a      	bne.n	8007410 <_svfiprintf_r+0x130>
 80073fa:	7863      	ldrb	r3, [r4, #1]
 80073fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fe:	d132      	bne.n	8007466 <_svfiprintf_r+0x186>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	3402      	adds	r4, #2
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	9203      	str	r2, [sp, #12]
 800740a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80074c8 <_svfiprintf_r+0x1e8>
 8007414:	2203      	movs	r2, #3
 8007416:	4650      	mov	r0, sl
 8007418:	7821      	ldrb	r1, [r4, #0]
 800741a:	f7fe fc20 	bl	8005c5e <memchr>
 800741e:	b138      	cbz	r0, 8007430 <_svfiprintf_r+0x150>
 8007420:	2240      	movs	r2, #64	@ 0x40
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	eba0 000a 	sub.w	r0, r0, sl
 8007428:	4082      	lsls	r2, r0
 800742a:	4313      	orrs	r3, r2
 800742c:	3401      	adds	r4, #1
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007434:	2206      	movs	r2, #6
 8007436:	4825      	ldr	r0, [pc, #148]	@ (80074cc <_svfiprintf_r+0x1ec>)
 8007438:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800743c:	f7fe fc0f 	bl	8005c5e <memchr>
 8007440:	2800      	cmp	r0, #0
 8007442:	d036      	beq.n	80074b2 <_svfiprintf_r+0x1d2>
 8007444:	4b22      	ldr	r3, [pc, #136]	@ (80074d0 <_svfiprintf_r+0x1f0>)
 8007446:	bb1b      	cbnz	r3, 8007490 <_svfiprintf_r+0x1b0>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	3307      	adds	r3, #7
 800744c:	f023 0307 	bic.w	r3, r3, #7
 8007450:	3308      	adds	r3, #8
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007456:	4433      	add	r3, r6
 8007458:	9309      	str	r3, [sp, #36]	@ 0x24
 800745a:	e76a      	b.n	8007332 <_svfiprintf_r+0x52>
 800745c:	460c      	mov	r4, r1
 800745e:	2001      	movs	r0, #1
 8007460:	fb0c 3202 	mla	r2, ip, r2, r3
 8007464:	e7a8      	b.n	80073b8 <_svfiprintf_r+0xd8>
 8007466:	2300      	movs	r3, #0
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	4619      	mov	r1, r3
 800746e:	3401      	adds	r4, #1
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	4620      	mov	r0, r4
 8007474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007478:	3a30      	subs	r2, #48	@ 0x30
 800747a:	2a09      	cmp	r2, #9
 800747c:	d903      	bls.n	8007486 <_svfiprintf_r+0x1a6>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0c6      	beq.n	8007410 <_svfiprintf_r+0x130>
 8007482:	9105      	str	r1, [sp, #20]
 8007484:	e7c4      	b.n	8007410 <_svfiprintf_r+0x130>
 8007486:	4604      	mov	r4, r0
 8007488:	2301      	movs	r3, #1
 800748a:	fb0c 2101 	mla	r1, ip, r1, r2
 800748e:	e7f0      	b.n	8007472 <_svfiprintf_r+0x192>
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462a      	mov	r2, r5
 8007496:	4638      	mov	r0, r7
 8007498:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <_svfiprintf_r+0x1f4>)
 800749a:	a904      	add	r1, sp, #16
 800749c:	f7fd fe7c 	bl	8005198 <_printf_float>
 80074a0:	1c42      	adds	r2, r0, #1
 80074a2:	4606      	mov	r6, r0
 80074a4:	d1d6      	bne.n	8007454 <_svfiprintf_r+0x174>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	065b      	lsls	r3, r3, #25
 80074aa:	f53f af2d 	bmi.w	8007308 <_svfiprintf_r+0x28>
 80074ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074b0:	e72c      	b.n	800730c <_svfiprintf_r+0x2c>
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	462a      	mov	r2, r5
 80074b8:	4638      	mov	r0, r7
 80074ba:	4b06      	ldr	r3, [pc, #24]	@ (80074d4 <_svfiprintf_r+0x1f4>)
 80074bc:	a904      	add	r1, sp, #16
 80074be:	f7fe f909 	bl	80056d4 <_printf_i>
 80074c2:	e7ed      	b.n	80074a0 <_svfiprintf_r+0x1c0>
 80074c4:	08008c98 	.word	0x08008c98
 80074c8:	08008c9e 	.word	0x08008c9e
 80074cc:	08008ca2 	.word	0x08008ca2
 80074d0:	08005199 	.word	0x08005199
 80074d4:	08007229 	.word	0x08007229

080074d8 <__sflush_r>:
 80074d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	0716      	lsls	r6, r2, #28
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	d454      	bmi.n	8007590 <__sflush_r+0xb8>
 80074e6:	684b      	ldr	r3, [r1, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc02      	bgt.n	80074f2 <__sflush_r+0x1a>
 80074ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dd48      	ble.n	8007584 <__sflush_r+0xac>
 80074f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074f4:	2e00      	cmp	r6, #0
 80074f6:	d045      	beq.n	8007584 <__sflush_r+0xac>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074fe:	682f      	ldr	r7, [r5, #0]
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	d030      	beq.n	8007568 <__sflush_r+0x90>
 8007506:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	0759      	lsls	r1, r3, #29
 800750c:	d505      	bpl.n	800751a <__sflush_r+0x42>
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	1ad2      	subs	r2, r2, r3
 8007512:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007514:	b10b      	cbz	r3, 800751a <__sflush_r+0x42>
 8007516:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	2300      	movs	r3, #0
 800751c:	4628      	mov	r0, r5
 800751e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	47b0      	blx	r6
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	d106      	bne.n	8007538 <__sflush_r+0x60>
 800752a:	6829      	ldr	r1, [r5, #0]
 800752c:	291d      	cmp	r1, #29
 800752e:	d82b      	bhi.n	8007588 <__sflush_r+0xb0>
 8007530:	4a28      	ldr	r2, [pc, #160]	@ (80075d4 <__sflush_r+0xfc>)
 8007532:	40ca      	lsrs	r2, r1
 8007534:	07d6      	lsls	r6, r2, #31
 8007536:	d527      	bpl.n	8007588 <__sflush_r+0xb0>
 8007538:	2200      	movs	r2, #0
 800753a:	6062      	str	r2, [r4, #4]
 800753c:	6922      	ldr	r2, [r4, #16]
 800753e:	04d9      	lsls	r1, r3, #19
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	d504      	bpl.n	800754e <__sflush_r+0x76>
 8007544:	1c42      	adds	r2, r0, #1
 8007546:	d101      	bne.n	800754c <__sflush_r+0x74>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b903      	cbnz	r3, 800754e <__sflush_r+0x76>
 800754c:	6560      	str	r0, [r4, #84]	@ 0x54
 800754e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007550:	602f      	str	r7, [r5, #0]
 8007552:	b1b9      	cbz	r1, 8007584 <__sflush_r+0xac>
 8007554:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007558:	4299      	cmp	r1, r3
 800755a:	d002      	beq.n	8007562 <__sflush_r+0x8a>
 800755c:	4628      	mov	r0, r5
 800755e:	f7ff f9eb 	bl	8006938 <_free_r>
 8007562:	2300      	movs	r3, #0
 8007564:	6363      	str	r3, [r4, #52]	@ 0x34
 8007566:	e00d      	b.n	8007584 <__sflush_r+0xac>
 8007568:	2301      	movs	r3, #1
 800756a:	4628      	mov	r0, r5
 800756c:	47b0      	blx	r6
 800756e:	4602      	mov	r2, r0
 8007570:	1c50      	adds	r0, r2, #1
 8007572:	d1c9      	bne.n	8007508 <__sflush_r+0x30>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0c6      	beq.n	8007508 <__sflush_r+0x30>
 800757a:	2b1d      	cmp	r3, #29
 800757c:	d001      	beq.n	8007582 <__sflush_r+0xaa>
 800757e:	2b16      	cmp	r3, #22
 8007580:	d11d      	bne.n	80075be <__sflush_r+0xe6>
 8007582:	602f      	str	r7, [r5, #0]
 8007584:	2000      	movs	r0, #0
 8007586:	e021      	b.n	80075cc <__sflush_r+0xf4>
 8007588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758c:	b21b      	sxth	r3, r3
 800758e:	e01a      	b.n	80075c6 <__sflush_r+0xee>
 8007590:	690f      	ldr	r7, [r1, #16]
 8007592:	2f00      	cmp	r7, #0
 8007594:	d0f6      	beq.n	8007584 <__sflush_r+0xac>
 8007596:	0793      	lsls	r3, r2, #30
 8007598:	bf18      	it	ne
 800759a:	2300      	movne	r3, #0
 800759c:	680e      	ldr	r6, [r1, #0]
 800759e:	bf08      	it	eq
 80075a0:	694b      	ldreq	r3, [r1, #20]
 80075a2:	1bf6      	subs	r6, r6, r7
 80075a4:	600f      	str	r7, [r1, #0]
 80075a6:	608b      	str	r3, [r1, #8]
 80075a8:	2e00      	cmp	r6, #0
 80075aa:	ddeb      	ble.n	8007584 <__sflush_r+0xac>
 80075ac:	4633      	mov	r3, r6
 80075ae:	463a      	mov	r2, r7
 80075b0:	4628      	mov	r0, r5
 80075b2:	6a21      	ldr	r1, [r4, #32]
 80075b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80075b8:	47e0      	blx	ip
 80075ba:	2800      	cmp	r0, #0
 80075bc:	dc07      	bgt.n	80075ce <__sflush_r+0xf6>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ce:	4407      	add	r7, r0
 80075d0:	1a36      	subs	r6, r6, r0
 80075d2:	e7e9      	b.n	80075a8 <__sflush_r+0xd0>
 80075d4:	20400001 	.word	0x20400001

080075d8 <_fflush_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	690b      	ldr	r3, [r1, #16]
 80075dc:	4605      	mov	r5, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	b913      	cbnz	r3, 80075e8 <_fflush_r+0x10>
 80075e2:	2500      	movs	r5, #0
 80075e4:	4628      	mov	r0, r5
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	b118      	cbz	r0, 80075f2 <_fflush_r+0x1a>
 80075ea:	6a03      	ldr	r3, [r0, #32]
 80075ec:	b90b      	cbnz	r3, 80075f2 <_fflush_r+0x1a>
 80075ee:	f7fe fa1b 	bl	8005a28 <__sinit>
 80075f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f3      	beq.n	80075e2 <_fflush_r+0xa>
 80075fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075fc:	07d0      	lsls	r0, r2, #31
 80075fe:	d404      	bmi.n	800760a <_fflush_r+0x32>
 8007600:	0599      	lsls	r1, r3, #22
 8007602:	d402      	bmi.n	800760a <_fflush_r+0x32>
 8007604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007606:	f7fe fb28 	bl	8005c5a <__retarget_lock_acquire_recursive>
 800760a:	4628      	mov	r0, r5
 800760c:	4621      	mov	r1, r4
 800760e:	f7ff ff63 	bl	80074d8 <__sflush_r>
 8007612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007614:	4605      	mov	r5, r0
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d4e4      	bmi.n	80075e4 <_fflush_r+0xc>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	059b      	lsls	r3, r3, #22
 800761e:	d4e1      	bmi.n	80075e4 <_fflush_r+0xc>
 8007620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007622:	f7fe fb1b 	bl	8005c5c <__retarget_lock_release_recursive>
 8007626:	e7dd      	b.n	80075e4 <_fflush_r+0xc>

08007628 <memmove>:
 8007628:	4288      	cmp	r0, r1
 800762a:	b510      	push	{r4, lr}
 800762c:	eb01 0402 	add.w	r4, r1, r2
 8007630:	d902      	bls.n	8007638 <memmove+0x10>
 8007632:	4284      	cmp	r4, r0
 8007634:	4623      	mov	r3, r4
 8007636:	d807      	bhi.n	8007648 <memmove+0x20>
 8007638:	1e43      	subs	r3, r0, #1
 800763a:	42a1      	cmp	r1, r4
 800763c:	d008      	beq.n	8007650 <memmove+0x28>
 800763e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007646:	e7f8      	b.n	800763a <memmove+0x12>
 8007648:	4601      	mov	r1, r0
 800764a:	4402      	add	r2, r0
 800764c:	428a      	cmp	r2, r1
 800764e:	d100      	bne.n	8007652 <memmove+0x2a>
 8007650:	bd10      	pop	{r4, pc}
 8007652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800765a:	e7f7      	b.n	800764c <memmove+0x24>

0800765c <_sbrk_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	2300      	movs	r3, #0
 8007660:	4d05      	ldr	r5, [pc, #20]	@ (8007678 <_sbrk_r+0x1c>)
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fa fb38 	bl	8001cdc <_sbrk>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_sbrk_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_sbrk_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20000db4 	.word	0x20000db4

0800767c <memcpy>:
 800767c:	440a      	add	r2, r1
 800767e:	4291      	cmp	r1, r2
 8007680:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007684:	d100      	bne.n	8007688 <memcpy+0xc>
 8007686:	4770      	bx	lr
 8007688:	b510      	push	{r4, lr}
 800768a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800768e:	4291      	cmp	r1, r2
 8007690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007694:	d1f9      	bne.n	800768a <memcpy+0xe>
 8007696:	bd10      	pop	{r4, pc}

08007698 <__assert_func>:
 8007698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800769a:	4614      	mov	r4, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <__assert_func+0x2c>)
 80076a0:	4605      	mov	r5, r0
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68d8      	ldr	r0, [r3, #12]
 80076a6:	b14c      	cbz	r4, 80076bc <__assert_func+0x24>
 80076a8:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <__assert_func+0x30>)
 80076aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076ae:	9100      	str	r1, [sp, #0]
 80076b0:	462b      	mov	r3, r5
 80076b2:	4906      	ldr	r1, [pc, #24]	@ (80076cc <__assert_func+0x34>)
 80076b4:	f000 f870 	bl	8007798 <fiprintf>
 80076b8:	f000 f880 	bl	80077bc <abort>
 80076bc:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <__assert_func+0x38>)
 80076be:	461c      	mov	r4, r3
 80076c0:	e7f3      	b.n	80076aa <__assert_func+0x12>
 80076c2:	bf00      	nop
 80076c4:	20000024 	.word	0x20000024
 80076c8:	08008cb3 	.word	0x08008cb3
 80076cc:	08008cc0 	.word	0x08008cc0
 80076d0:	08008cee 	.word	0x08008cee

080076d4 <_calloc_r>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	fba1 5402 	umull	r5, r4, r1, r2
 80076da:	b934      	cbnz	r4, 80076ea <_calloc_r+0x16>
 80076dc:	4629      	mov	r1, r5
 80076de:	f7ff f99d 	bl	8006a1c <_malloc_r>
 80076e2:	4606      	mov	r6, r0
 80076e4:	b928      	cbnz	r0, 80076f2 <_calloc_r+0x1e>
 80076e6:	4630      	mov	r0, r6
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	220c      	movs	r2, #12
 80076ec:	2600      	movs	r6, #0
 80076ee:	6002      	str	r2, [r0, #0]
 80076f0:	e7f9      	b.n	80076e6 <_calloc_r+0x12>
 80076f2:	462a      	mov	r2, r5
 80076f4:	4621      	mov	r1, r4
 80076f6:	f7fe fa32 	bl	8005b5e <memset>
 80076fa:	e7f4      	b.n	80076e6 <_calloc_r+0x12>

080076fc <__ascii_mbtowc>:
 80076fc:	b082      	sub	sp, #8
 80076fe:	b901      	cbnz	r1, 8007702 <__ascii_mbtowc+0x6>
 8007700:	a901      	add	r1, sp, #4
 8007702:	b142      	cbz	r2, 8007716 <__ascii_mbtowc+0x1a>
 8007704:	b14b      	cbz	r3, 800771a <__ascii_mbtowc+0x1e>
 8007706:	7813      	ldrb	r3, [r2, #0]
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	1e10      	subs	r0, r2, #0
 800770e:	bf18      	it	ne
 8007710:	2001      	movne	r0, #1
 8007712:	b002      	add	sp, #8
 8007714:	4770      	bx	lr
 8007716:	4610      	mov	r0, r2
 8007718:	e7fb      	b.n	8007712 <__ascii_mbtowc+0x16>
 800771a:	f06f 0001 	mvn.w	r0, #1
 800771e:	e7f8      	b.n	8007712 <__ascii_mbtowc+0x16>

08007720 <_realloc_r>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4607      	mov	r7, r0
 8007726:	4614      	mov	r4, r2
 8007728:	460d      	mov	r5, r1
 800772a:	b921      	cbnz	r1, 8007736 <_realloc_r+0x16>
 800772c:	4611      	mov	r1, r2
 800772e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007732:	f7ff b973 	b.w	8006a1c <_malloc_r>
 8007736:	b92a      	cbnz	r2, 8007744 <_realloc_r+0x24>
 8007738:	f7ff f8fe 	bl	8006938 <_free_r>
 800773c:	4625      	mov	r5, r4
 800773e:	4628      	mov	r0, r5
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	f000 f841 	bl	80077ca <_malloc_usable_size_r>
 8007748:	4284      	cmp	r4, r0
 800774a:	4606      	mov	r6, r0
 800774c:	d802      	bhi.n	8007754 <_realloc_r+0x34>
 800774e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007752:	d8f4      	bhi.n	800773e <_realloc_r+0x1e>
 8007754:	4621      	mov	r1, r4
 8007756:	4638      	mov	r0, r7
 8007758:	f7ff f960 	bl	8006a1c <_malloc_r>
 800775c:	4680      	mov	r8, r0
 800775e:	b908      	cbnz	r0, 8007764 <_realloc_r+0x44>
 8007760:	4645      	mov	r5, r8
 8007762:	e7ec      	b.n	800773e <_realloc_r+0x1e>
 8007764:	42b4      	cmp	r4, r6
 8007766:	4622      	mov	r2, r4
 8007768:	4629      	mov	r1, r5
 800776a:	bf28      	it	cs
 800776c:	4632      	movcs	r2, r6
 800776e:	f7ff ff85 	bl	800767c <memcpy>
 8007772:	4629      	mov	r1, r5
 8007774:	4638      	mov	r0, r7
 8007776:	f7ff f8df 	bl	8006938 <_free_r>
 800777a:	e7f1      	b.n	8007760 <_realloc_r+0x40>

0800777c <__ascii_wctomb>:
 800777c:	4603      	mov	r3, r0
 800777e:	4608      	mov	r0, r1
 8007780:	b141      	cbz	r1, 8007794 <__ascii_wctomb+0x18>
 8007782:	2aff      	cmp	r2, #255	@ 0xff
 8007784:	d904      	bls.n	8007790 <__ascii_wctomb+0x14>
 8007786:	228a      	movs	r2, #138	@ 0x8a
 8007788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	4770      	bx	lr
 8007790:	2001      	movs	r0, #1
 8007792:	700a      	strb	r2, [r1, #0]
 8007794:	4770      	bx	lr
	...

08007798 <fiprintf>:
 8007798:	b40e      	push	{r1, r2, r3}
 800779a:	b503      	push	{r0, r1, lr}
 800779c:	4601      	mov	r1, r0
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	4805      	ldr	r0, [pc, #20]	@ (80077b8 <fiprintf+0x20>)
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f000 f83d 	bl	8007828 <_vfiprintf_r>
 80077ae:	b002      	add	sp, #8
 80077b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b4:	b003      	add	sp, #12
 80077b6:	4770      	bx	lr
 80077b8:	20000024 	.word	0x20000024

080077bc <abort>:
 80077bc:	2006      	movs	r0, #6
 80077be:	b508      	push	{r3, lr}
 80077c0:	f000 fa06 	bl	8007bd0 <raise>
 80077c4:	2001      	movs	r0, #1
 80077c6:	f7fa fa14 	bl	8001bf2 <_exit>

080077ca <_malloc_usable_size_r>:
 80077ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ce:	1f18      	subs	r0, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfbc      	itt	lt
 80077d4:	580b      	ldrlt	r3, [r1, r0]
 80077d6:	18c0      	addlt	r0, r0, r3
 80077d8:	4770      	bx	lr

080077da <__sfputc_r>:
 80077da:	6893      	ldr	r3, [r2, #8]
 80077dc:	b410      	push	{r4}
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	6093      	str	r3, [r2, #8]
 80077e4:	da07      	bge.n	80077f6 <__sfputc_r+0x1c>
 80077e6:	6994      	ldr	r4, [r2, #24]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	db01      	blt.n	80077f0 <__sfputc_r+0x16>
 80077ec:	290a      	cmp	r1, #10
 80077ee:	d102      	bne.n	80077f6 <__sfputc_r+0x1c>
 80077f0:	bc10      	pop	{r4}
 80077f2:	f000 b931 	b.w	8007a58 <__swbuf_r>
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	1c58      	adds	r0, r3, #1
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	7019      	strb	r1, [r3, #0]
 80077fe:	4608      	mov	r0, r1
 8007800:	bc10      	pop	{r4}
 8007802:	4770      	bx	lr

08007804 <__sfputs_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	4614      	mov	r4, r2
 800780c:	18d5      	adds	r5, r2, r3
 800780e:	42ac      	cmp	r4, r5
 8007810:	d101      	bne.n	8007816 <__sfputs_r+0x12>
 8007812:	2000      	movs	r0, #0
 8007814:	e007      	b.n	8007826 <__sfputs_r+0x22>
 8007816:	463a      	mov	r2, r7
 8007818:	4630      	mov	r0, r6
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	f7ff ffdc 	bl	80077da <__sfputc_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d1f3      	bne.n	800780e <__sfputs_r+0xa>
 8007826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007828 <_vfiprintf_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	460d      	mov	r5, r1
 800782e:	4614      	mov	r4, r2
 8007830:	4698      	mov	r8, r3
 8007832:	4606      	mov	r6, r0
 8007834:	b09d      	sub	sp, #116	@ 0x74
 8007836:	b118      	cbz	r0, 8007840 <_vfiprintf_r+0x18>
 8007838:	6a03      	ldr	r3, [r0, #32]
 800783a:	b90b      	cbnz	r3, 8007840 <_vfiprintf_r+0x18>
 800783c:	f7fe f8f4 	bl	8005a28 <__sinit>
 8007840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007842:	07d9      	lsls	r1, r3, #31
 8007844:	d405      	bmi.n	8007852 <_vfiprintf_r+0x2a>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	059a      	lsls	r2, r3, #22
 800784a:	d402      	bmi.n	8007852 <_vfiprintf_r+0x2a>
 800784c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784e:	f7fe fa04 	bl	8005c5a <__retarget_lock_acquire_recursive>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	071b      	lsls	r3, r3, #28
 8007856:	d501      	bpl.n	800785c <_vfiprintf_r+0x34>
 8007858:	692b      	ldr	r3, [r5, #16]
 800785a:	b99b      	cbnz	r3, 8007884 <_vfiprintf_r+0x5c>
 800785c:	4629      	mov	r1, r5
 800785e:	4630      	mov	r0, r6
 8007860:	f000 f938 	bl	8007ad4 <__swsetup_r>
 8007864:	b170      	cbz	r0, 8007884 <_vfiprintf_r+0x5c>
 8007866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007868:	07dc      	lsls	r4, r3, #31
 800786a:	d504      	bpl.n	8007876 <_vfiprintf_r+0x4e>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007870:	b01d      	add	sp, #116	@ 0x74
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d4f7      	bmi.n	800786c <_vfiprintf_r+0x44>
 800787c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800787e:	f7fe f9ed 	bl	8005c5c <__retarget_lock_release_recursive>
 8007882:	e7f3      	b.n	800786c <_vfiprintf_r+0x44>
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	@ 0x24
 8007888:	2320      	movs	r3, #32
 800788a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800788e:	2330      	movs	r3, #48	@ 0x30
 8007890:	f04f 0901 	mov.w	r9, #1
 8007894:	f8cd 800c 	str.w	r8, [sp, #12]
 8007898:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007a44 <_vfiprintf_r+0x21c>
 800789c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078a0:	4623      	mov	r3, r4
 80078a2:	469a      	mov	sl, r3
 80078a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a8:	b10a      	cbz	r2, 80078ae <_vfiprintf_r+0x86>
 80078aa:	2a25      	cmp	r2, #37	@ 0x25
 80078ac:	d1f9      	bne.n	80078a2 <_vfiprintf_r+0x7a>
 80078ae:	ebba 0b04 	subs.w	fp, sl, r4
 80078b2:	d00b      	beq.n	80078cc <_vfiprintf_r+0xa4>
 80078b4:	465b      	mov	r3, fp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ffa2 	bl	8007804 <__sfputs_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f000 80a7 	beq.w	8007a14 <_vfiprintf_r+0x1ec>
 80078c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c8:	445a      	add	r2, fp
 80078ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 809f 	beq.w	8007a14 <_vfiprintf_r+0x1ec>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e0:	f10a 0a01 	add.w	sl, sl, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80078ee:	4654      	mov	r4, sl
 80078f0:	2205      	movs	r2, #5
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	4853      	ldr	r0, [pc, #332]	@ (8007a44 <_vfiprintf_r+0x21c>)
 80078f8:	f7fe f9b1 	bl	8005c5e <memchr>
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	b9d8      	cbnz	r0, 8007938 <_vfiprintf_r+0x110>
 8007900:	06d1      	lsls	r1, r2, #27
 8007902:	bf44      	itt	mi
 8007904:	2320      	movmi	r3, #32
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800790a:	0713      	lsls	r3, r2, #28
 800790c:	bf44      	itt	mi
 800790e:	232b      	movmi	r3, #43	@ 0x2b
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b2a      	cmp	r3, #42	@ 0x2a
 800791a:	d015      	beq.n	8007948 <_vfiprintf_r+0x120>
 800791c:	4654      	mov	r4, sl
 800791e:	2000      	movs	r0, #0
 8007920:	f04f 0c0a 	mov.w	ip, #10
 8007924:	9a07      	ldr	r2, [sp, #28]
 8007926:	4621      	mov	r1, r4
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	@ 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94b      	bls.n	80079ca <_vfiprintf_r+0x1a2>
 8007932:	b1b0      	cbz	r0, 8007962 <_vfiprintf_r+0x13a>
 8007934:	9207      	str	r2, [sp, #28]
 8007936:	e014      	b.n	8007962 <_vfiprintf_r+0x13a>
 8007938:	eba0 0308 	sub.w	r3, r0, r8
 800793c:	fa09 f303 	lsl.w	r3, r9, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	46a2      	mov	sl, r4
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	e7d2      	b.n	80078ee <_vfiprintf_r+0xc6>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfbb      	ittet	lt
 8007954:	425b      	neglt	r3, r3
 8007956:	f042 0202 	orrlt.w	r2, r2, #2
 800795a:	9307      	strge	r3, [sp, #28]
 800795c:	9307      	strlt	r3, [sp, #28]
 800795e:	bfb8      	it	lt
 8007960:	9204      	strlt	r2, [sp, #16]
 8007962:	7823      	ldrb	r3, [r4, #0]
 8007964:	2b2e      	cmp	r3, #46	@ 0x2e
 8007966:	d10a      	bne.n	800797e <_vfiprintf_r+0x156>
 8007968:	7863      	ldrb	r3, [r4, #1]
 800796a:	2b2a      	cmp	r3, #42	@ 0x2a
 800796c:	d132      	bne.n	80079d4 <_vfiprintf_r+0x1ac>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	3402      	adds	r4, #2
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	9203      	str	r2, [sp, #12]
 8007978:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007a48 <_vfiprintf_r+0x220>
 8007982:	2203      	movs	r2, #3
 8007984:	4650      	mov	r0, sl
 8007986:	7821      	ldrb	r1, [r4, #0]
 8007988:	f7fe f969 	bl	8005c5e <memchr>
 800798c:	b138      	cbz	r0, 800799e <_vfiprintf_r+0x176>
 800798e:	2240      	movs	r2, #64	@ 0x40
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	eba0 000a 	sub.w	r0, r0, sl
 8007996:	4082      	lsls	r2, r0
 8007998:	4313      	orrs	r3, r2
 800799a:	3401      	adds	r4, #1
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a2:	2206      	movs	r2, #6
 80079a4:	4829      	ldr	r0, [pc, #164]	@ (8007a4c <_vfiprintf_r+0x224>)
 80079a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079aa:	f7fe f958 	bl	8005c5e <memchr>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d03f      	beq.n	8007a32 <_vfiprintf_r+0x20a>
 80079b2:	4b27      	ldr	r3, [pc, #156]	@ (8007a50 <_vfiprintf_r+0x228>)
 80079b4:	bb1b      	cbnz	r3, 80079fe <_vfiprintf_r+0x1d6>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	3307      	adds	r3, #7
 80079ba:	f023 0307 	bic.w	r3, r3, #7
 80079be:	3308      	adds	r3, #8
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c4:	443b      	add	r3, r7
 80079c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c8:	e76a      	b.n	80078a0 <_vfiprintf_r+0x78>
 80079ca:	460c      	mov	r4, r1
 80079cc:	2001      	movs	r0, #1
 80079ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d2:	e7a8      	b.n	8007926 <_vfiprintf_r+0xfe>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f04f 0c0a 	mov.w	ip, #10
 80079da:	4619      	mov	r1, r3
 80079dc:	3401      	adds	r4, #1
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	4620      	mov	r0, r4
 80079e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e6:	3a30      	subs	r2, #48	@ 0x30
 80079e8:	2a09      	cmp	r2, #9
 80079ea:	d903      	bls.n	80079f4 <_vfiprintf_r+0x1cc>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0c6      	beq.n	800797e <_vfiprintf_r+0x156>
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	e7c4      	b.n	800797e <_vfiprintf_r+0x156>
 80079f4:	4604      	mov	r4, r0
 80079f6:	2301      	movs	r3, #1
 80079f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fc:	e7f0      	b.n	80079e0 <_vfiprintf_r+0x1b8>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4630      	mov	r0, r6
 8007a06:	4b13      	ldr	r3, [pc, #76]	@ (8007a54 <_vfiprintf_r+0x22c>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	f7fd fbc5 	bl	8005198 <_printf_float>
 8007a0e:	4607      	mov	r7, r0
 8007a10:	1c78      	adds	r0, r7, #1
 8007a12:	d1d6      	bne.n	80079c2 <_vfiprintf_r+0x19a>
 8007a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a16:	07d9      	lsls	r1, r3, #31
 8007a18:	d405      	bmi.n	8007a26 <_vfiprintf_r+0x1fe>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	059a      	lsls	r2, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_vfiprintf_r+0x1fe>
 8007a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a22:	f7fe f91b 	bl	8005c5c <__retarget_lock_release_recursive>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	065b      	lsls	r3, r3, #25
 8007a2a:	f53f af1f 	bmi.w	800786c <_vfiprintf_r+0x44>
 8007a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a30:	e71e      	b.n	8007870 <_vfiprintf_r+0x48>
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4b06      	ldr	r3, [pc, #24]	@ (8007a54 <_vfiprintf_r+0x22c>)
 8007a3c:	a904      	add	r1, sp, #16
 8007a3e:	f7fd fe49 	bl	80056d4 <_printf_i>
 8007a42:	e7e4      	b.n	8007a0e <_vfiprintf_r+0x1e6>
 8007a44:	08008c98 	.word	0x08008c98
 8007a48:	08008c9e 	.word	0x08008c9e
 8007a4c:	08008ca2 	.word	0x08008ca2
 8007a50:	08005199 	.word	0x08005199
 8007a54:	08007805 	.word	0x08007805

08007a58 <__swbuf_r>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	460e      	mov	r6, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	4605      	mov	r5, r0
 8007a60:	b118      	cbz	r0, 8007a6a <__swbuf_r+0x12>
 8007a62:	6a03      	ldr	r3, [r0, #32]
 8007a64:	b90b      	cbnz	r3, 8007a6a <__swbuf_r+0x12>
 8007a66:	f7fd ffdf 	bl	8005a28 <__sinit>
 8007a6a:	69a3      	ldr	r3, [r4, #24]
 8007a6c:	60a3      	str	r3, [r4, #8]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	071a      	lsls	r2, r3, #28
 8007a72:	d501      	bpl.n	8007a78 <__swbuf_r+0x20>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	b943      	cbnz	r3, 8007a8a <__swbuf_r+0x32>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f82a 	bl	8007ad4 <__swsetup_r>
 8007a80:	b118      	cbz	r0, 8007a8a <__swbuf_r+0x32>
 8007a82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a86:	4638      	mov	r0, r7
 8007a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	b2f6      	uxtb	r6, r6
 8007a90:	1a98      	subs	r0, r3, r2
 8007a92:	6963      	ldr	r3, [r4, #20]
 8007a94:	4637      	mov	r7, r6
 8007a96:	4283      	cmp	r3, r0
 8007a98:	dc05      	bgt.n	8007aa6 <__swbuf_r+0x4e>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7ff fd9b 	bl	80075d8 <_fflush_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1ed      	bne.n	8007a82 <__swbuf_r+0x2a>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	701e      	strb	r6, [r3, #0]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x6e>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d5e1      	bpl.n	8007a86 <__swbuf_r+0x2e>
 8007ac2:	2e0a      	cmp	r6, #10
 8007ac4:	d1df      	bne.n	8007a86 <__swbuf_r+0x2e>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff fd85 	bl	80075d8 <_fflush_r>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0d9      	beq.n	8007a86 <__swbuf_r+0x2e>
 8007ad2:	e7d6      	b.n	8007a82 <__swbuf_r+0x2a>

08007ad4 <__swsetup_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4b29      	ldr	r3, [pc, #164]	@ (8007b7c <__swsetup_r+0xa8>)
 8007ad8:	4605      	mov	r5, r0
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	460c      	mov	r4, r1
 8007ade:	b118      	cbz	r0, 8007ae8 <__swsetup_r+0x14>
 8007ae0:	6a03      	ldr	r3, [r0, #32]
 8007ae2:	b90b      	cbnz	r3, 8007ae8 <__swsetup_r+0x14>
 8007ae4:	f7fd ffa0 	bl	8005a28 <__sinit>
 8007ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aec:	0719      	lsls	r1, r3, #28
 8007aee:	d422      	bmi.n	8007b36 <__swsetup_r+0x62>
 8007af0:	06da      	lsls	r2, r3, #27
 8007af2:	d407      	bmi.n	8007b04 <__swsetup_r+0x30>
 8007af4:	2209      	movs	r2, #9
 8007af6:	602a      	str	r2, [r5, #0]
 8007af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	e033      	b.n	8007b6c <__swsetup_r+0x98>
 8007b04:	0758      	lsls	r0, r3, #29
 8007b06:	d512      	bpl.n	8007b2e <__swsetup_r+0x5a>
 8007b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b0a:	b141      	cbz	r1, 8007b1e <__swsetup_r+0x4a>
 8007b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d002      	beq.n	8007b1a <__swsetup_r+0x46>
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7fe ff0f 	bl	8006938 <_free_r>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f043 0308 	orr.w	r3, r3, #8
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	b94b      	cbnz	r3, 8007b4e <__swsetup_r+0x7a>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b44:	d003      	beq.n	8007b4e <__swsetup_r+0x7a>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f000 f882 	bl	8007c52 <__smakebuf_r>
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	f013 0201 	ands.w	r2, r3, #1
 8007b56:	d00a      	beq.n	8007b6e <__swsetup_r+0x9a>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60a2      	str	r2, [r4, #8]
 8007b5c:	6962      	ldr	r2, [r4, #20]
 8007b5e:	4252      	negs	r2, r2
 8007b60:	61a2      	str	r2, [r4, #24]
 8007b62:	6922      	ldr	r2, [r4, #16]
 8007b64:	b942      	cbnz	r2, 8007b78 <__swsetup_r+0xa4>
 8007b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b6a:	d1c5      	bne.n	8007af8 <__swsetup_r+0x24>
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	0799      	lsls	r1, r3, #30
 8007b70:	bf58      	it	pl
 8007b72:	6962      	ldrpl	r2, [r4, #20]
 8007b74:	60a2      	str	r2, [r4, #8]
 8007b76:	e7f4      	b.n	8007b62 <__swsetup_r+0x8e>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7f7      	b.n	8007b6c <__swsetup_r+0x98>
 8007b7c:	20000024 	.word	0x20000024

08007b80 <_raise_r>:
 8007b80:	291f      	cmp	r1, #31
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	4605      	mov	r5, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	d904      	bls.n	8007b94 <_raise_r+0x14>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b96:	b112      	cbz	r2, 8007b9e <_raise_r+0x1e>
 8007b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b9c:	b94b      	cbnz	r3, 8007bb2 <_raise_r+0x32>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 f830 	bl	8007c04 <_getpid_r>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f000 b817 	b.w	8007be0 <_kill_r>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d00a      	beq.n	8007bcc <_raise_r+0x4c>
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <_raise_r+0x42>
 8007bba:	2316      	movs	r3, #22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7e7      	b.n	8007b92 <_raise_r+0x12>
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007bca:	4798      	blx	r3
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e7e0      	b.n	8007b92 <_raise_r+0x12>

08007bd0 <raise>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <raise+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7ff bfd3 	b.w	8007b80 <_raise_r>
 8007bda:	bf00      	nop
 8007bdc:	20000024 	.word	0x20000024

08007be0 <_kill_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	2300      	movs	r3, #0
 8007be4:	4d06      	ldr	r5, [pc, #24]	@ (8007c00 <_kill_r+0x20>)
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	f7f9 fff0 	bl	8001bd2 <_kill>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d102      	bne.n	8007bfc <_kill_r+0x1c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	b103      	cbz	r3, 8007bfc <_kill_r+0x1c>
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000db4 	.word	0x20000db4

08007c04 <_getpid_r>:
 8007c04:	f7f9 bfde 	b.w	8001bc4 <_getpid>

08007c08 <__swhatbuf_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	4615      	mov	r5, r2
 8007c12:	2900      	cmp	r1, #0
 8007c14:	461e      	mov	r6, r3
 8007c16:	b096      	sub	sp, #88	@ 0x58
 8007c18:	da0c      	bge.n	8007c34 <__swhatbuf_r+0x2c>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c22:	bf14      	ite	ne
 8007c24:	2340      	movne	r3, #64	@ 0x40
 8007c26:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	6031      	str	r1, [r6, #0]
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	b016      	add	sp, #88	@ 0x58
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	466a      	mov	r2, sp
 8007c36:	f000 f849 	bl	8007ccc <_fstat_r>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	dbed      	blt.n	8007c1a <__swhatbuf_r+0x12>
 8007c3e:	9901      	ldr	r1, [sp, #4]
 8007c40:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c44:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c48:	4259      	negs	r1, r3
 8007c4a:	4159      	adcs	r1, r3
 8007c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c50:	e7eb      	b.n	8007c2a <__swhatbuf_r+0x22>

08007c52 <__smakebuf_r>:
 8007c52:	898b      	ldrh	r3, [r1, #12]
 8007c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c56:	079d      	lsls	r5, r3, #30
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	d507      	bpl.n	8007c6e <__smakebuf_r+0x1c>
 8007c5e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	2301      	movs	r3, #1
 8007c68:	6163      	str	r3, [r4, #20]
 8007c6a:	b003      	add	sp, #12
 8007c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6e:	466a      	mov	r2, sp
 8007c70:	ab01      	add	r3, sp, #4
 8007c72:	f7ff ffc9 	bl	8007c08 <__swhatbuf_r>
 8007c76:	9f00      	ldr	r7, [sp, #0]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7fe fecd 	bl	8006a1c <_malloc_r>
 8007c82:	b948      	cbnz	r0, 8007c98 <__smakebuf_r+0x46>
 8007c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c88:	059a      	lsls	r2, r3, #22
 8007c8a:	d4ee      	bmi.n	8007c6a <__smakebuf_r+0x18>
 8007c8c:	f023 0303 	bic.w	r3, r3, #3
 8007c90:	f043 0302 	orr.w	r3, r3, #2
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	e7e2      	b.n	8007c5e <__smakebuf_r+0xc>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	6020      	str	r0, [r4, #0]
 8007ca8:	b15b      	cbz	r3, 8007cc2 <__smakebuf_r+0x70>
 8007caa:	4630      	mov	r0, r6
 8007cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb0:	f000 f81e 	bl	8007cf0 <_isatty_r>
 8007cb4:	b128      	cbz	r0, 8007cc2 <__smakebuf_r+0x70>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f023 0303 	bic.w	r3, r3, #3
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	431d      	orrs	r5, r3
 8007cc6:	81a5      	strh	r5, [r4, #12]
 8007cc8:	e7cf      	b.n	8007c6a <__smakebuf_r+0x18>
	...

08007ccc <_fstat_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4d06      	ldr	r5, [pc, #24]	@ (8007cec <_fstat_r+0x20>)
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	f7f9 ffd9 	bl	8001c90 <_fstat>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d102      	bne.n	8007ce8 <_fstat_r+0x1c>
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	b103      	cbz	r3, 8007ce8 <_fstat_r+0x1c>
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	bd38      	pop	{r3, r4, r5, pc}
 8007cea:	bf00      	nop
 8007cec:	20000db4 	.word	0x20000db4

08007cf0 <_isatty_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4d05      	ldr	r5, [pc, #20]	@ (8007d0c <_isatty_r+0x1c>)
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7f9 ffd7 	bl	8001cae <_isatty>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_isatty_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_isatty_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000db4 	.word	0x20000db4

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
