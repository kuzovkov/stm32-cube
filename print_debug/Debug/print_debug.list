
print_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005b14  08005b14  00006b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be4  08005be4  00006be4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bec  08005bec  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bec  08005bec  00006bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005bf4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005c64  00007070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005c64  00007210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c71  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e13  00000000  00000000  0000cd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058f  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ed7  00000000  00000000  0000f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092f6  00000000  00000000  00027736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b08  00000000  00000000  00030a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000b3578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b59d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005af8 	.word	0x08005af8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005af8 	.word	0x08005af8

0800014c <_stack_init>:
 800014c:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
 8000150:	4770      	bx	lr
 8000152:	bf00      	nop

08000154 <_mainCRTStartup>:
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <_mainCRTStartup+0x60>)
 8000156:	2b00      	cmp	r3, #0
 8000158:	bf08      	it	eq
 800015a:	4b13      	ldreq	r3, [pc, #76]	@ (80001a8 <_mainCRTStartup+0x54>)
 800015c:	469d      	mov	sp, r3
 800015e:	f7ff fff5 	bl	800014c <_stack_init>
 8000162:	2100      	movs	r1, #0
 8000164:	468b      	mov	fp, r1
 8000166:	460f      	mov	r7, r1
 8000168:	4813      	ldr	r0, [pc, #76]	@ (80001b8 <_mainCRTStartup+0x64>)
 800016a:	4a14      	ldr	r2, [pc, #80]	@ (80001bc <_mainCRTStartup+0x68>)
 800016c:	1a12      	subs	r2, r2, r0
 800016e:	f004 fd1c 	bl	8004baa <memset>
 8000172:	4b0e      	ldr	r3, [pc, #56]	@ (80001ac <_mainCRTStartup+0x58>)
 8000174:	2b00      	cmp	r3, #0
 8000176:	d000      	beq.n	800017a <_mainCRTStartup+0x26>
 8000178:	4798      	blx	r3
 800017a:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <_mainCRTStartup+0x5c>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d000      	beq.n	8000182 <_mainCRTStartup+0x2e>
 8000180:	4798      	blx	r3
 8000182:	2000      	movs	r0, #0
 8000184:	2100      	movs	r1, #0
 8000186:	0004      	movs	r4, r0
 8000188:	000d      	movs	r5, r1
 800018a:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <_mainCRTStartup+0x6c>)
 800018c:	2800      	cmp	r0, #0
 800018e:	d002      	beq.n	8000196 <_mainCRTStartup+0x42>
 8000190:	480c      	ldr	r0, [pc, #48]	@ (80001c4 <_mainCRTStartup+0x70>)
 8000192:	f3af 8000 	nop.w
 8000196:	f004 fdbb 	bl	8004d10 <__libc_init_array>
 800019a:	0020      	movs	r0, r4
 800019c:	0029      	movs	r1, r5
 800019e:	f000 f845 	bl	800022c <main>
 80001a2:	f004 fa87 	bl	80046b4 <exit>
 80001a6:	bf00      	nop
 80001a8:	00080000 	.word	0x00080000
	...
 80001b8:	20000070 	.word	0x20000070
 80001bc:	20000210 	.word	0x20000210
	...
 80001c8:	08005bf4 	.word	0x08005bf4
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	20000070 	.word	0x20000070
 80001d8:	20000210 	.word	0x20000210

080001dc <PINA_0_INIT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PINA_0_INIT(void) //Button PA0
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001e0:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <PINA_0_INIT+0x48>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <PINA_0_INIT+0x48>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6193      	str	r3, [r2, #24]
  GPIOA->CRL &= ~GPIO_CRL_MODE0_0;
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <PINA_0_INIT+0x4c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <PINA_0_INIT+0x4c>)
 80001f2:	f023 0301 	bic.w	r3, r3, #1
 80001f6:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~GPIO_CRL_MODE0_1;
 80001f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000228 <PINA_0_INIT+0x4c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000228 <PINA_0_INIT+0x4c>)
 80001fe:	f023 0302 	bic.w	r3, r3, #2
 8000202:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~GPIO_CRL_CNF0_0;
 8000204:	4b08      	ldr	r3, [pc, #32]	@ (8000228 <PINA_0_INIT+0x4c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	@ (8000228 <PINA_0_INIT+0x4c>)
 800020a:	f023 0304 	bic.w	r3, r3, #4
 800020e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 8000210:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <PINA_0_INIT+0x4c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a04      	ldr	r2, [pc, #16]	@ (8000228 <PINA_0_INIT+0x4c>)
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	6013      	str	r3, [r2, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40021000 	.word	0x40021000
 8000228:	40010800 	.word	0x40010800

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t delay = 500;
 8000232:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000236:	60bb      	str	r3, [r7, #8]
	uint8_t buttonState = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 fb7e 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f85a 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f89e 	bl	8000384 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  PINA_0_INIT();
 8000248:	f7ff ffc8 	bl	80001dc <PINA_0_INIT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//мигание светодиодом на плате, при нажатии на кнопку мигают еще 2 yf PC13 и PB5
	pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //работает так и так
 800024c:	2101      	movs	r1, #1
 800024e:	4824      	ldr	r0, [pc, #144]	@ (80002e0 <main+0xb4>)
 8000250:	f003 f872 	bl	8003338 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	71fb      	strb	r3, [r7, #7]
	//pinState = READ_BIT(GPIOA->IDR, GPIO_IDR_IDR0);
    if (pinState == GPIO_PIN_SET){
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d102      	bne.n	8000264 <main+0x38>
		buttonState = 1;
 800025e:	2301      	movs	r3, #1
 8000260:	73fb      	strb	r3, [r7, #15]
 8000262:	e001      	b.n	8000268 <main+0x3c>
	} else {
		buttonState = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2104      	movs	r1, #4
 800026c:	481d      	ldr	r0, [pc, #116]	@ (80002e4 <main+0xb8>)
 800026e:	f003 f87a 	bl	8003366 <HAL_GPIO_WritePin>
	if (buttonState){
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00a      	beq.n	800028e <main+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027e:	481a      	ldr	r0, [pc, #104]	@ (80002e8 <main+0xbc>)
 8000280:	f003 f871 	bl	8003366 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2120      	movs	r1, #32
 8000288:	4816      	ldr	r0, [pc, #88]	@ (80002e4 <main+0xb8>)
 800028a:	f003 f86c 	bl	8003366 <HAL_GPIO_WritePin>
	}
    HAL_Delay(delay);
 800028e:	68b8      	ldr	r0, [r7, #8]
 8000290:	f000 fc16 	bl	8000ac0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	4812      	ldr	r0, [pc, #72]	@ (80002e4 <main+0xb8>)
 800029a:	f003 f864 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a4:	4810      	ldr	r0, [pc, #64]	@ (80002e8 <main+0xbc>)
 80002a6:	f003 f85e 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <main+0xb8>)
 80002b0:	f003 f859 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 80002b4:	68b8      	ldr	r0, [r7, #8]
 80002b6:	f000 fc03 	bl	8000ac0 <HAL_Delay>

	printf("Count value: %d\n", cnt);
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <main+0xc0>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4619      	mov	r1, r3
 80002c0:	480b      	ldr	r0, [pc, #44]	@ (80002f0 <main+0xc4>)
 80002c2:	f004 fc1b 	bl	8004afc <iprintf>
	cnt++;
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <main+0xc0>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <main+0xc0>)
 80002d0:	701a      	strb	r2, [r3, #0]
	fflush(stdout);
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <main+0xc8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4618      	mov	r0, r3
 80002da:	f004 faa5 	bl	8004828 <fflush>
	pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //работает так и так
 80002de:	e7b5      	b.n	800024c <main+0x20>
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40010c00 	.word	0x40010c00
 80002e8:	40011000 	.word	0x40011000
 80002ec:	2000008c 	.word	0x2000008c
 80002f0:	08005b38 	.word	0x08005b38
 80002f4:	20000020 	.word	0x20000020

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	@ 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	@ 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 fc4f 	bl	8004baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000336:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f003 faef 	bl	8003924 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800034c:	f000 f896 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2302      	movs	r3, #2
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fd5c 	bl	8003e28 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000376:	f000 f881 	bl	800047c <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3740      	adds	r7, #64	@ 0x40
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b34      	ldr	r3, [pc, #208]	@ (800046c <MX_GPIO_Init+0xe8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a33      	ldr	r2, [pc, #204]	@ (800046c <MX_GPIO_Init+0xe8>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b31      	ldr	r3, [pc, #196]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b0:	4b2e      	ldr	r3, [pc, #184]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a2d      	ldr	r2, [pc, #180]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0320 	and.w	r3, r3, #32
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b28      	ldr	r3, [pc, #160]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a27      	ldr	r2, [pc, #156]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b25      	ldr	r3, [pc, #148]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b22      	ldr	r3, [pc, #136]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a21      	ldr	r2, [pc, #132]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_GPIO_Init+0xe8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fe:	481c      	ldr	r0, [pc, #112]	@ (8000470 <MX_GPIO_Init+0xec>)
 8000400:	f002 ffb1 	bl	8003366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2124      	movs	r1, #36	@ 0x24
 8000408:	481a      	ldr	r0, [pc, #104]	@ (8000474 <MX_GPIO_Init+0xf0>)
 800040a:	f002 ffac 	bl	8003366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800040e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2302      	movs	r3, #2
 800041e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4812      	ldr	r0, [pc, #72]	@ (8000470 <MX_GPIO_Init+0xec>)
 8000428:	f002 fd46 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2302      	movs	r3, #2
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	480d      	ldr	r0, [pc, #52]	@ (8000478 <MX_GPIO_Init+0xf4>)
 8000444:	f002 fd38 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8000448:	2324      	movs	r3, #36	@ 0x24
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_GPIO_Init+0xf0>)
 8000460:	f002 fd2a 	bl	8002eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40011000 	.word	0x40011000
 8000474:	40010c00 	.word	0x40010c00
 8000478:	40010800 	.word	0x40010800

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <Error_Handler+0x8>

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <HAL_MspInit+0x5c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <HAL_MspInit+0x5c>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <HAL_MspInit+0x60>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <HAL_MspInit+0x60>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010000 	.word	0x40010000

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <NMI_Handler+0x4>

080004f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <MemManage_Handler+0x4>

08000504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <UsageFault_Handler+0x4>

08000514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 fa68 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <ITM_SendChar>:
#define DEMCR *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <ITM_SendChar+0x44>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <ITM_SendChar+0x44>)
 8000554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000558:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1 << 0);
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <ITM_SendChar+0x48>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <ITM_SendChar+0x48>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6013      	str	r3, [r2, #0]
	while (!(ITM_STIMULUS_PORT0 & 1));
 8000566:	bf00      	nop
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f8      	beq.n	8000568 <ITM_SendChar+0x24>
	ITM_STIMULUS_PORT0 = ch;
 8000576:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	e000edfc 	.word	0xe000edfc
 800058c:	e0000e00 	.word	0xe0000e00

08000590 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_getpid>:

int _getpid(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return 1;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_kill>:

int _kill(int pid, int sig)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005b4:	f004 fba6 	bl	8004d04 <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2216      	movs	r2, #22
 80005bc:	601a      	str	r2, [r3, #0]
  return -1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_exit>:

void _exit (int status)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffe7 	bl	80005aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <_exit+0x12>

080005e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e00a      	b.n	8000608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f2:	f3af 8000 	nop.w
 80005f6:	4601      	mov	r1, r0
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	b2ca      	uxtb	r2, r1
 8000600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf0      	blt.n	80005f2 <_read+0x12>
  }

  return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	e009      	b.n	8000640 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	60ba      	str	r2, [r7, #8]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff85 	bl	8000544 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf1      	blt.n	800062c <_write+0x12>
  }
  return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_close>:

int _close(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000678:	605a      	str	r2, [r3, #4]
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <_isatty>:

int _isatty(int file)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_open>:

int _open(char *path, int flags, ...)
{
 80006b2:	b40e      	push	{r1, r2, r3}
 80006b4:	b480      	push	{r7}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	b003      	add	sp, #12
 80006ca:	4770      	bx	lr

080006cc <_wait>:

int _wait(int *status)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
 80006d4:	f004 fb16 	bl	8004d04 <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220a      	movs	r2, #10
 80006dc:	601a      	str	r2, [r3, #0]
  return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_unlink>:

int _unlink(char *name)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
 80006f2:	f004 fb07 	bl	8004d04 <__errno>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
  return -1;
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_times>:

int _times(struct tms *buf)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <_stat>:

int _stat(char *file, struct stat *st)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800072e:	605a      	str	r2, [r3, #4]
  return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <_link>:

int _link(char *old, char *new)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
 8000746:	f004 fadd 	bl	8004d04 <__errno>
 800074a:	4603      	mov	r3, r0
 800074c:	221f      	movs	r2, #31
 800074e:	601a      	str	r2, [r3, #0]
  return -1;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_fork>:

int _fork(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  errno = EAGAIN;
 8000760:	f004 fad0 	bl	8004d04 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220b      	movs	r2, #11
 8000768:	601a      	str	r2, [r3, #0]
  return -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}

08000772 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	60f8      	str	r0, [r7, #12]
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
 800077e:	f004 fac1 	bl	8004d04 <__errno>
 8000782:	4603      	mov	r3, r0
 8000784:	220c      	movs	r2, #12
 8000786:	601a      	str	r2, [r3, #0]
  return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f004 fa9e 	bl	8004d04 <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	20000094 	.word	0x20000094
 80007fc:	20000210 	.word	0x20000210

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800081e:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <SystemCoreClockUpdate+0xd0>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f003 030c 	and.w	r3, r3, #12
 8000826:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b08      	cmp	r3, #8
 800082c:	d011      	beq.n	8000852 <SystemCoreClockUpdate+0x46>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b08      	cmp	r3, #8
 8000832:	d83a      	bhi.n	80008aa <SystemCoreClockUpdate+0x9e>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <SystemCoreClockUpdate+0x36>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d004      	beq.n	800084a <SystemCoreClockUpdate+0x3e>
 8000840:	e033      	b.n	80008aa <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000842:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 8000844:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <SystemCoreClockUpdate+0xd8>)
 8000846:	601a      	str	r2, [r3, #0]
      break;
 8000848:	e033      	b.n	80008b2 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800084a:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 800084c:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <SystemCoreClockUpdate+0xd8>)
 800084e:	601a      	str	r2, [r3, #0]
      break;
 8000850:	e02f      	b.n	80008b2 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000852:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <SystemCoreClockUpdate+0xd0>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800085a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <SystemCoreClockUpdate+0xd0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000864:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	0c9b      	lsrs	r3, r3, #18
 800086a:	3302      	adds	r3, #2
 800086c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <SystemCoreClockUpdate+0xdc>)
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 800087e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000880:	e017      	b.n	80008b2 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <SystemCoreClockUpdate+0xd0>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <SystemCoreClockUpdate+0xdc>)
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 8000898:	6013      	str	r3, [r2, #0]
      break;
 800089a:	e00a      	b.n	80008b2 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4a11      	ldr	r2, [pc, #68]	@ (80008e4 <SystemCoreClockUpdate+0xd8>)
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 80008a6:	6013      	str	r3, [r2, #0]
      break;
 80008a8:	e003      	b.n	80008b2 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <SystemCoreClockUpdate+0xd8>)
 80008ae:	601a      	str	r2, [r3, #0]
      break;
 80008b0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <SystemCoreClockUpdate+0xd0>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <SystemCoreClockUpdate+0xe0>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	fa22 f303 	lsr.w	r3, r2, r3
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <SystemCoreClockUpdate+0xd4>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	007a1200 	.word	0x007a1200
 80008e8:	003d0900 	.word	0x003d0900
 80008ec:	08005b70 	.word	0x08005b70

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff ff86 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f6:	490c      	ldr	r1, [pc, #48]	@ (8000928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f8:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800090c:	4c09      	ldr	r4, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f004 f9f9 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc85 	bl	800022c <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800092c:	08005bf4 	.word	0x08005bf4
  ldr r2, =_sbss
 8000930:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000934:	20000210 	.word	0x20000210

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 fb69 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f82c 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fd96 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_DeInit+0x2c>)
 800096e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000972:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <HAL_DeInit+0x2c>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_DeInit+0x2c>)
 800097c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000980:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000982:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <HAL_DeInit+0x2c>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000988:	f000 f80c 	bl	80009a4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fb6f 	bl	80010b2 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	f000 fb25 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	2000000c 	.word	0x2000000c

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	20000098 	.word	0x20000098

08000a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	@ (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000098 	.word	0x20000098

08000a48 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <HAL_GetTickPrio+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_SetTickFreq+0x48>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d012      	beq.n	8000a9a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_SetTickFreq+0x48>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_SetTickFreq+0x48>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_SetTickFreq+0x4c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff93 	bl	80009b0 <HAL_InitTick>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8000a94:	4a03      	ldr	r2, [pc, #12]	@ (8000aa4 <HAL_SetTickFreq+0x48>)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000010 	.word	0x20000010
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	@ (8000abc <HAL_GetTickFreq+0x10>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000010 	.word	0x20000010

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffb4 	bl	8000a34 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffa4 	bl	8000a34 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000010 	.word	0x20000010

08000b08 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <HAL_SuspendTick+0x18>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <HAL_SuspendTick+0x18>)
 8000b12:	f023 0302 	bic.w	r3, r3, #2
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <HAL_ResumeTick+0x18>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <HAL_ResumeTick+0x18>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return __STM32F1xx_HAL_VERSION;
 8000b44:	4b02      	ldr	r3, [pc, #8]	@ (8000b50 <HAL_GetHalVersion+0x10>)
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	01010a00 	.word	0x01010a00

08000b54 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetREVID+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	0c1b      	lsrs	r3, r3, #16
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e0042000 	.word	0xe0042000

08000b6c <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <HAL_GetDEVID+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e0042000 	.word	0xe0042000

08000b84 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000b88:	4b02      	ldr	r3, [pc, #8]	@ (8000b94 <HAL_GetUIDw0+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	1ffff7e8 	.word	0x1ffff7e8

08000b98 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000b9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ba8 <HAL_GetUIDw1+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	1ffff7ec 	.word	0x1ffff7ec

08000bac <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000bb0:	4b02      	ldr	r3, [pc, #8]	@ (8000bbc <HAL_GetUIDw2+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	1ffff7f0 	.word	0x1ffff7f0

08000bc0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4a03      	ldr	r2, [pc, #12]	@ (8000bd8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6053      	str	r3, [r2, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	e0042000 	.word	0xe0042000

08000bdc <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a03      	ldr	r2, [pc, #12]	@ (8000bf4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	6053      	str	r3, [r2, #4]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e0042000 	.word	0xe0042000

08000bf8 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a03      	ldr	r2, [pc, #12]	@ (8000c10 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	6053      	str	r3, [r2, #4]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	e0042000 	.word	0xe0042000

08000c14 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000c1e:	f023 0302 	bic.w	r3, r3, #2
 8000c22:	6053      	str	r3, [r2, #4]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e0042000 	.word	0xe0042000

08000c30 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4a03      	ldr	r2, [pc, #12]	@ (8000c48 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6053      	str	r3, [r2, #4]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e0042000 	.word	0xe0042000

08000c4c <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000c56:	f023 0304 	bic.w	r3, r3, #4
 8000c5a:	6053      	str	r3, [r2, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	e0042000 	.word	0xe0042000

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4906      	ldr	r1, [pc, #24]	@ (8000d00 <__NVIC_EnableIRQ+0x34>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db12      	blt.n	8000d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	490a      	ldr	r1, [pc, #40]	@ (8000d48 <__NVIC_DisableIRQ+0x44>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	3320      	adds	r3, #32
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d30:	f3bf 8f4f 	dsb	sy
}
 8000d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d36:	f3bf 8f6f 	isb	sy
}
 8000d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0e      	blt.n	8000d7c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <__NVIC_GetPendingIRQ+0x3c>)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	3340      	adds	r3, #64	@ 0x40
 8000d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 031f 	and.w	r3, r3, #31
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	e000      	b.n	8000d7e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000d7c:	2300      	movs	r3, #0
  }
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0c      	blt.n	8000db8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_SetPendingIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	3340      	adds	r3, #64	@ 0x40
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0c      	blt.n	8000df4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	@ (8000e00 <__NVIC_ClearPendingIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	3360      	adds	r3, #96	@ 0x60
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0e      	blt.n	8000e34 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <__NVIC_GetActive+0x3c>)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	3380      	adds	r3, #128	@ 0x80
 8000e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	e000      	b.n	8000e36 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8000e34:	2300      	movs	r3, #0
  }
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db09      	blt.n	8000ebe <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <__NVIC_GetPriority+0x44>)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	e009      	b.n	8000ed2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <__NVIC_GetPriority+0x48>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	7e1b      	ldrb	r3, [r3, #24]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	b2db      	uxtb	r3, r3
  }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f1c3 0307 	rsb	r3, r3, #7
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	bf28      	it	cs
 8000f68:	2304      	movcs	r3, #4
 8000f6a:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d902      	bls.n	8000f7a <NVIC_DecodePriority+0x32>
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3b03      	subs	r3, #3
 8000f78:	e000      	b.n	8000f7c <NVIC_DecodePriority+0x34>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	40da      	lsrs	r2, r3
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb8:	f3bf 8f4f 	dsb	sy
}
 8000fbc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <__NVIC_SystemReset+0x24>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fc6:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <__NVIC_SystemReset+0x24>)
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_SystemReset+0x28>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <__NVIC_SystemReset+0x20>
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	05fa0004 	.word	0x05fa0004

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001004:	f7ff ff1e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fe1b 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff fe30 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff44 	bl	8000ee4 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff feed 	bl	8000e44 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe23 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fe31 	bl	8000d04 <__NVIC_DisableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80010ae:	f7ff ff81 	bl	8000fb4 <__NVIC_SystemReset>

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff90 	bl	8000fe0 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 80010ce:	f7ff fdef 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fed3 	bl	8000e98 <__NVIC_GetPriority>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	f7ff ff26 	bl	8000f48 <NVIC_DecodePriority>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe3a 	bl	8000d8c <__NVIC_SetPendingIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe0c 	bl	8000d4c <__NVIC_GetPendingIRQ>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe3b 	bl	8000dc8 <__NVIC_ClearPendingIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe4b 	bl	8000e04 <__NVIC_GetActive>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d106      	bne.n	8001194 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001192:	e005      	b.n	80011a0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011b4:	f000 f802 	bl	80011bc <HAL_SYSTICK_Callback>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e043      	b.n	8001266 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HAL_DMA_Init+0xa8>)
 80011e6:	4413      	add	r3, r2
 80011e8:	4a22      	ldr	r2, [pc, #136]	@ (8001274 <HAL_DMA_Init+0xac>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	009a      	lsls	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001278 <HAL_DMA_Init+0xb0>)
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001212:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	bffdfff8 	.word	0xbffdfff8
 8001274:	cccccccd 	.word	0xcccccccd
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e046      	b.n	800131c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_DMA_DeInit+0xac>)
 80012c6:	4413      	add	r3, r2
 80012c8:	4a18      	ldr	r2, [pc, #96]	@ (800132c <HAL_DMA_DeInit+0xb0>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	009a      	lsls	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <HAL_DMA_DeInit+0xb4>)
 80012da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	bffdfff8 	.word	0xbffdfff8
 800132c:	cccccccd 	.word	0xcccccccd
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_DMA_Start+0x20>
 8001350:	2302      	movs	r3, #2
 8001352:	e02e      	b.n	80013b2 <HAL_DMA_Start+0x7e>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d11d      	bne.n	80013a4 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fc75 	bl	8001c7c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e005      	b.n	80013b0 <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80013ac:	2302      	movs	r3, #2
 80013ae:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_DMA_Start_IT+0x20>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e04b      	b.n	8001472 <HAL_DMA_Start_IT+0xb8>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d13a      	bne.n	8001464 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fc32 	bl	8001c7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 020e 	orr.w	r2, r2, #14
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e00f      	b.n	8001452 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0204 	bic.w	r2, r2, #4
 8001440:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 020a 	orr.w	r2, r2, #10
 8001450:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e005      	b.n	8001470 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800146c:	2302      	movs	r3, #2
 800146e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001470:	7dfb      	ldrb	r3, [r7, #23]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d008      	beq.n	80014a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2204      	movs	r2, #4
 8001496:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e020      	b.n	80014e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f202 	lsl.w	r2, r1, r2
 80014d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d005      	beq.n	8001514 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e051      	b.n	80015b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 020e 	bic.w	r2, r2, #14
 8001522:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <HAL_DMA_Abort_IT+0xd4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d029      	beq.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <HAL_DMA_Abort_IT+0xd8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d022      	beq.n	800158e <HAL_DMA_Abort_IT+0x9e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <HAL_DMA_Abort_IT+0xdc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01a      	beq.n	8001588 <HAL_DMA_Abort_IT+0x98>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1e      	ldr	r2, [pc, #120]	@ (80015d0 <HAL_DMA_Abort_IT+0xe0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d012      	beq.n	8001582 <HAL_DMA_Abort_IT+0x92>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <HAL_DMA_Abort_IT+0xe4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00a      	beq.n	800157c <HAL_DMA_Abort_IT+0x8c>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <HAL_DMA_Abort_IT+0xe8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d102      	bne.n	8001576 <HAL_DMA_Abort_IT+0x86>
 8001570:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001574:	e00e      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 8001576:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800157a:	e00b      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 800157c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001580:	e008      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 8001582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001586:	e005      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 8001588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158c:	e002      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 800158e:	2310      	movs	r3, #16
 8001590:	e000      	b.n	8001594 <HAL_DMA_Abort_IT+0xa4>
 8001592:	2301      	movs	r3, #1
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <HAL_DMA_Abort_IT+0xec>)
 8001596:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
    } 
  }
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020008 	.word	0x40020008
 80015c8:	4002001c 	.word	0x4002001c
 80015cc:	40020030 	.word	0x40020030
 80015d0:	40020044 	.word	0x40020044
 80015d4:	40020058 	.word	0x40020058
 80015d8:	4002006c 	.word	0x4002006c
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2204      	movs	r2, #4
 8001600:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e167      	b.n	80018de <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001622:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e15a      	b.n	80018de <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d131      	bne.n	8001692 <HAL_DMA_PollForTransfer+0xb2>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a88      	ldr	r2, [pc, #544]	@ (8001854 <HAL_DMA_PollForTransfer+0x274>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d029      	beq.n	800168c <HAL_DMA_PollForTransfer+0xac>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a86      	ldr	r2, [pc, #536]	@ (8001858 <HAL_DMA_PollForTransfer+0x278>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d022      	beq.n	8001688 <HAL_DMA_PollForTransfer+0xa8>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a85      	ldr	r2, [pc, #532]	@ (800185c <HAL_DMA_PollForTransfer+0x27c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d01a      	beq.n	8001682 <HAL_DMA_PollForTransfer+0xa2>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a83      	ldr	r2, [pc, #524]	@ (8001860 <HAL_DMA_PollForTransfer+0x280>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d012      	beq.n	800167c <HAL_DMA_PollForTransfer+0x9c>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a82      	ldr	r2, [pc, #520]	@ (8001864 <HAL_DMA_PollForTransfer+0x284>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00a      	beq.n	8001676 <HAL_DMA_PollForTransfer+0x96>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a80      	ldr	r2, [pc, #512]	@ (8001868 <HAL_DMA_PollForTransfer+0x288>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d102      	bne.n	8001670 <HAL_DMA_PollForTransfer+0x90>
 800166a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800166e:	e00e      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 8001670:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001674:	e00b      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 8001676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800167a:	e008      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 800167c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001680:	e005      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 8001682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001686:	e002      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 8001688:	2320      	movs	r3, #32
 800168a:	e000      	b.n	800168e <HAL_DMA_PollForTransfer+0xae>
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e030      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x114>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6f      	ldr	r2, [pc, #444]	@ (8001854 <HAL_DMA_PollForTransfer+0x274>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d029      	beq.n	80016f0 <HAL_DMA_PollForTransfer+0x110>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6d      	ldr	r2, [pc, #436]	@ (8001858 <HAL_DMA_PollForTransfer+0x278>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d022      	beq.n	80016ec <HAL_DMA_PollForTransfer+0x10c>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6c      	ldr	r2, [pc, #432]	@ (800185c <HAL_DMA_PollForTransfer+0x27c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d01a      	beq.n	80016e6 <HAL_DMA_PollForTransfer+0x106>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001860 <HAL_DMA_PollForTransfer+0x280>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d012      	beq.n	80016e0 <HAL_DMA_PollForTransfer+0x100>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a69      	ldr	r2, [pc, #420]	@ (8001864 <HAL_DMA_PollForTransfer+0x284>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00a      	beq.n	80016da <HAL_DMA_PollForTransfer+0xfa>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a67      	ldr	r2, [pc, #412]	@ (8001868 <HAL_DMA_PollForTransfer+0x288>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d102      	bne.n	80016d4 <HAL_DMA_PollForTransfer+0xf4>
 80016ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d2:	e00e      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016d8:	e00b      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016da:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80016de:	e008      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016e4:	e005      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ea:	e002      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016ec:	2340      	movs	r3, #64	@ 0x40
 80016ee:	e000      	b.n	80016f2 <HAL_DMA_PollForTransfer+0x112>
 80016f0:	2304      	movs	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff f99e 	bl	8000a34 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80016fa:	e06b      	b.n	80017d4 <HAL_DMA_PollForTransfer+0x1f4>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80016fc:	4b5b      	ldr	r3, [pc, #364]	@ (800186c <HAL_DMA_PollForTransfer+0x28c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4953      	ldr	r1, [pc, #332]	@ (8001854 <HAL_DMA_PollForTransfer+0x274>)
 8001706:	428b      	cmp	r3, r1
 8001708:	d029      	beq.n	800175e <HAL_DMA_PollForTransfer+0x17e>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4952      	ldr	r1, [pc, #328]	@ (8001858 <HAL_DMA_PollForTransfer+0x278>)
 8001710:	428b      	cmp	r3, r1
 8001712:	d022      	beq.n	800175a <HAL_DMA_PollForTransfer+0x17a>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4950      	ldr	r1, [pc, #320]	@ (800185c <HAL_DMA_PollForTransfer+0x27c>)
 800171a:	428b      	cmp	r3, r1
 800171c:	d01a      	beq.n	8001754 <HAL_DMA_PollForTransfer+0x174>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	494f      	ldr	r1, [pc, #316]	@ (8001860 <HAL_DMA_PollForTransfer+0x280>)
 8001724:	428b      	cmp	r3, r1
 8001726:	d012      	beq.n	800174e <HAL_DMA_PollForTransfer+0x16e>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <HAL_DMA_PollForTransfer+0x284>)
 800172e:	428b      	cmp	r3, r1
 8001730:	d00a      	beq.n	8001748 <HAL_DMA_PollForTransfer+0x168>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	494c      	ldr	r1, [pc, #304]	@ (8001868 <HAL_DMA_PollForTransfer+0x288>)
 8001738:	428b      	cmp	r3, r1
 800173a:	d102      	bne.n	8001742 <HAL_DMA_PollForTransfer+0x162>
 800173c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001740:	e00e      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 8001742:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001746:	e00b      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 8001748:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800174c:	e008      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 800174e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001752:	e005      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 8001754:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001758:	e002      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	e000      	b.n	8001760 <HAL_DMA_PollForTransfer+0x180>
 800175e:	2308      	movs	r3, #8
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d017      	beq.n	8001796 <HAL_DMA_PollForTransfer+0x1b6>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0a3      	b.n	80018de <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800179c:	d01a      	beq.n	80017d4 <HAL_DMA_PollForTransfer+0x1f4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_DMA_PollForTransfer+0x1d4>
 80017a4:	f7ff f946 	bl	8000a34 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d20f      	bcs.n	80017d4 <HAL_DMA_PollForTransfer+0x1f4>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e084      	b.n	80018de <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <HAL_DMA_PollForTransfer+0x28c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d08d      	beq.n	80016fc <HAL_DMA_PollForTransfer+0x11c>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d144      	bne.n	8001870 <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <HAL_DMA_PollForTransfer+0x274>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d029      	beq.n	8001844 <HAL_DMA_PollForTransfer+0x264>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_DMA_PollForTransfer+0x278>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d022      	beq.n	8001840 <HAL_DMA_PollForTransfer+0x260>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a17      	ldr	r2, [pc, #92]	@ (800185c <HAL_DMA_PollForTransfer+0x27c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d01a      	beq.n	800183a <HAL_DMA_PollForTransfer+0x25a>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <HAL_DMA_PollForTransfer+0x280>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d012      	beq.n	8001834 <HAL_DMA_PollForTransfer+0x254>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <HAL_DMA_PollForTransfer+0x284>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00a      	beq.n	800182e <HAL_DMA_PollForTransfer+0x24e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <HAL_DMA_PollForTransfer+0x288>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d102      	bne.n	8001828 <HAL_DMA_PollForTransfer+0x248>
 8001822:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001826:	e00e      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 8001828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800182c:	e00b      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 800182e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001832:	e008      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 8001834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001838:	e005      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 800183a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800183e:	e002      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 8001840:	2320      	movs	r3, #32
 8001842:	e000      	b.n	8001846 <HAL_DMA_PollForTransfer+0x266>
 8001844:	2302      	movs	r3, #2
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <HAL_DMA_PollForTransfer+0x28c>)
 8001848:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001852:	e03f      	b.n	80018d4 <HAL_DMA_PollForTransfer+0x2f4>
 8001854:	40020008 	.word	0x40020008
 8001858:	4002001c 	.word	0x4002001c
 800185c:	40020030 	.word	0x40020030
 8001860:	40020044 	.word	0x40020044
 8001864:	40020058 	.word	0x40020058
 8001868:	4002006c 	.word	0x4002006c
 800186c:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_DMA_PollForTransfer+0x308>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d029      	beq.n	80018ce <HAL_DMA_PollForTransfer+0x2ee>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <HAL_DMA_PollForTransfer+0x30c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d022      	beq.n	80018ca <HAL_DMA_PollForTransfer+0x2ea>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_DMA_PollForTransfer+0x310>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01a      	beq.n	80018c4 <HAL_DMA_PollForTransfer+0x2e4>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <HAL_DMA_PollForTransfer+0x314>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d012      	beq.n	80018be <HAL_DMA_PollForTransfer+0x2de>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_DMA_PollForTransfer+0x318>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00a      	beq.n	80018b8 <HAL_DMA_PollForTransfer+0x2d8>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <HAL_DMA_PollForTransfer+0x31c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d102      	bne.n	80018b2 <HAL_DMA_PollForTransfer+0x2d2>
 80018ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018b0:	e00e      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018b6:	e00b      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018bc:	e008      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018c2:	e005      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c8:	e002      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018ca:	2340      	movs	r3, #64	@ 0x40
 80018cc:	e000      	b.n	80018d0 <HAL_DMA_PollForTransfer+0x2f0>
 80018ce:	2304      	movs	r3, #4
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_DMA_PollForTransfer+0x320>)
 80018d2:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020008 	.word	0x40020008
 80018ec:	4002001c 	.word	0x4002001c
 80018f0:	40020030 	.word	0x40020030
 80018f4:	40020044 	.word	0x40020044
 80018f8:	40020058 	.word	0x40020058
 80018fc:	4002006c 	.word	0x4002006c
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d04f      	beq.n	80019cc <HAL_DMA_IRQHandler+0xc8>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d04a      	beq.n	80019cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a66      	ldr	r2, [pc, #408]	@ (8001af4 <HAL_DMA_IRQHandler+0x1f0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d029      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xae>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a65      	ldr	r2, [pc, #404]	@ (8001af8 <HAL_DMA_IRQHandler+0x1f4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <HAL_DMA_IRQHandler+0xaa>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <HAL_DMA_IRQHandler+0x1f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xa4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a62      	ldr	r2, [pc, #392]	@ (8001b00 <HAL_DMA_IRQHandler+0x1fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d012      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x9e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a60      	ldr	r2, [pc, #384]	@ (8001b04 <HAL_DMA_IRQHandler+0x200>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00a      	beq.n	800199c <HAL_DMA_IRQHandler+0x98>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5f      	ldr	r2, [pc, #380]	@ (8001b08 <HAL_DMA_IRQHandler+0x204>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d102      	bne.n	8001996 <HAL_DMA_IRQHandler+0x92>
 8001990:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001994:	e00e      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 8001996:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800199a:	e00b      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 800199c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019a0:	e008      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019a6:	e005      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ac:	e002      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019ae:	2340      	movs	r3, #64	@ 0x40
 80019b0:	e000      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019b2:	2304      	movs	r3, #4
 80019b4:	4a55      	ldr	r2, [pc, #340]	@ (8001b0c <HAL_DMA_IRQHandler+0x208>)
 80019b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8094 	beq.w	8001aea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019ca:	e08e      	b.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	2202      	movs	r2, #2
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d056      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x186>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d051      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10b      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020a 	bic.w	r2, r2, #10
 8001a02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a38      	ldr	r2, [pc, #224]	@ (8001af4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d029      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x166>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a37      	ldr	r2, [pc, #220]	@ (8001af8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x162>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a35      	ldr	r2, [pc, #212]	@ (8001afc <HAL_DMA_IRQHandler+0x1f8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01a      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x15c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	@ (8001b00 <HAL_DMA_IRQHandler+0x1fc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x156>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a32      	ldr	r2, [pc, #200]	@ (8001b04 <HAL_DMA_IRQHandler+0x200>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00a      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x150>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a31      	ldr	r2, [pc, #196]	@ (8001b08 <HAL_DMA_IRQHandler+0x204>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d102      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x14a>
 8001a48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a4c:	e00e      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a52:	e00b      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a58:	e008      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5e:	e005      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a64:	e002      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a66:	2320      	movs	r3, #32
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_DMA_IRQHandler+0x208>)
 8001a6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d034      	beq.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a88:	e02f      	b.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2208      	movs	r2, #8
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d028      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020e 	bic.w	r2, r2, #14
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
    }
  }
  return;
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
}
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020008 	.word	0x40020008
 8001af8:	4002001c 	.word	0x4002001c
 8001afc:	40020030 	.word	0x40020030
 8001b00:	40020044 	.word	0x40020044
 8001b04:	40020058 	.word	0x40020058
 8001b08:	4002006c 	.word	0x4002006c
 8001b0c:	40020000 	.word	0x40020000

08001b10 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callback function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_RegisterCallback+0x20>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e031      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x84>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d120      	bne.n	8001b86 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d81a      	bhi.n	8001b80 <HAL_DMA_RegisterCallback+0x70>
 8001b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b50 <HAL_DMA_RegisterCallback+0x40>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001b61 	.word	0x08001b61
 8001b54:	08001b69 	.word	0x08001b69
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b79 	.word	0x08001b79
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8001b66:	e010      	b.n	8001b8a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;         
 8001b6e:	e00c      	b.n	8001b8a <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	631a      	str	r2, [r3, #48]	@ 0x30
      break;         
 8001b76:	e008      	b.n	8001b8a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001b7e:	e004      	b.n	8001b8a <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8001b84:	e001      	b.n	8001b8a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifier
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_UnRegisterCallback+0x1e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e041      	b.n	8001c42 <HAL_DMA_UnRegisterCallback+0xa2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d130      	bne.n	8001c34 <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d82a      	bhi.n	8001c2e <HAL_DMA_UnRegisterCallback+0x8e>
 8001bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <HAL_DMA_UnRegisterCallback+0x40>)
 8001bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bde:	bf00      	nop
 8001be0:	08001bf5 	.word	0x08001bf5
 8001be4:	08001bfd 	.word	0x08001bfd
 8001be8:	08001c05 	.word	0x08001c05
 8001bec:	08001c0d 	.word	0x08001c0d
 8001bf0:	08001c15 	.word	0x08001c15
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8001bfa:	e01d      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;         
 8001c02:	e019      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
      break;         
 8001c0a:	e015      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001c12:	e011      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	629a      	str	r2, [r3, #40]	@ 0x28
      hdma->XferHalfCpltCallback = NULL;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdma->XferErrorCallback = NULL;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hdma->XferAbortCallback = NULL;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001c2c:	e004      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>

    default:
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      break;
 8001c32:	e001      	b.n	8001c38 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d108      	bne.n	8001cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cba:	e007      	b.n	8001ccc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_EXTI_SetConfigLine+0x16>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08f      	b.n	8001e12 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001d04:	2201      	movs	r2, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d052      	beq.n	8001dc0 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	493c      	ldr	r1, [pc, #240]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
 8001d32:	e006      	b.n	8001d42 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8001d34:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4937      	ldr	r1, [pc, #220]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8001d4e:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4932      	ldr	r1, [pc, #200]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60cb      	str	r3, [r1, #12]
 8001d5a:	e006      	b.n	8001d6a <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	492d      	ldr	r1, [pc, #180]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001d72:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001d76:	d123      	bne.n	8001dc0 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));
      
      regval = AFIO->EXTICR[linepos >> 2u];
 8001d78:	4a29      	ldr	r2, [pc, #164]	@ (8001e20 <HAL_EXTI_SetConfigLine+0x148>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	60fb      	str	r3, [r7, #12]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
      AFIO->EXTICR[linepos >> 2u] = regval;
 8001db2:	491b      	ldr	r1, [pc, #108]	@ (8001e20 <HAL_EXTI_SetConfigLine+0x148>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4912      	ldr	r1, [pc, #72]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e006      	b.n	8001de8 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_EXTI_SetConfigLine+0x144>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40010000 	.word	0x40010000

08001e24 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_EXTI_GetConfigLine+0x16>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e061      	b.n	8001f02 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001e50:	2201      	movs	r2, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <HAL_EXTI_GetConfigLine+0xe8>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	e002      	b.n	8001e74 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_EXTI_GetConfigLine+0xe8>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d02d      	beq.n	8001f00 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_EXTI_GetConfigLine+0xe8>)
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_EXTI_GetConfigLine+0xe8>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001ed6:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001eda:	d111      	bne.n	8001f00 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = AFIO->EXTICR[linepos >> 2u];
 8001edc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <HAL_EXTI_GetConfigLine+0xec>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = (regval >> (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & AFIO_EXTICR1_EXTI0;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40010000 	.word	0x40010000

08001f14 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e04c      	b.n	8001fc0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001f30:	2201      	movs	r2, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4922      	ldr	r1, [pc, #136]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	491e      	ldr	r1, [pc, #120]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d02d      	beq.n	8001fbe <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8001f62:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4918      	ldr	r1, [pc, #96]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	4914      	ldr	r1, [pc, #80]	@ (8001fcc <HAL_EXTI_ClearConfigLine+0xb8>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001f86:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001f8a:	d118      	bne.n	8001fbe <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = AFIO->EXTICR[linepos >> 2u];
 8001f8c:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	60fb      	str	r3, [r7, #12]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
      AFIO->EXTICR[linepos >> 2u] = regval;
 8001fb0:	4907      	ldr	r1, [pc, #28]	@ (8001fd0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40010000 	.word	0x40010000

08001fd4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	605a      	str	r2, [r3, #4]
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ff8:	bf00      	nop
  }

  return status;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e003      	b.n	8002022 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2201      	movs	r2, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8002044:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_EXTI_IRQHandler+0x44>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8002054:	4a06      	ldr	r2, [pc, #24]	@ (8002070 <HAL_EXTI_IRQHandler+0x44>)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4798      	blx	r3
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010400 	.word	0x40010400

08002074 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8002088:	2201      	movs	r2, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <HAL_EXTI_GetPending+0x3c>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	401a      	ands	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	60fb      	str	r3, [r7, #12]
  return regval;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2201      	movs	r2, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_EXTI_ClearPending+0x2c>)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6153      	str	r3, [r2, #20]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2201      	movs	r2, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80020fc:	4a03      	ldr	r2, [pc, #12]	@ (800210c <HAL_EXTI_GenerateSWI+0x28>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6113      	str	r3, [r2, #16]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_FLASH_Program+0xd8>)
 800212c:	7e1b      	ldrb	r3, [r3, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_FLASH_Program+0x26>
 8002132:	2302      	movs	r3, #2
 8002134:	e054      	b.n	80021e0 <HAL_FLASH_Program+0xd0>
 8002136:	4b2c      	ldr	r3, [pc, #176]	@ (80021e8 <HAL_FLASH_Program+0xd8>)
 8002138:	2201      	movs	r2, #1
 800213a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800213c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002140:	f000 fa16 	bl	8002570 <FLASH_WaitForLastOperation>
 8002144:	4603      	mov	r3, r0
 8002146:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d144      	bne.n	80021d8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002154:	2301      	movs	r3, #1
 8002156:	757b      	strb	r3, [r7, #21]
 8002158:	e007      	b.n	800216a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d102      	bne.n	8002166 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002160:	2302      	movs	r3, #2
 8002162:	757b      	strb	r3, [r7, #21]
 8002164:	e001      	b.n	800216a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002166:	2304      	movs	r3, #4
 8002168:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800216a:	2300      	movs	r3, #0
 800216c:	75bb      	strb	r3, [r7, #22]
 800216e:	e02d      	b.n	80021cc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	005a      	lsls	r2, r3, #1
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	eb02 0c03 	add.w	ip, r2, r3
 800217a:	7dbb      	ldrb	r3, [r7, #22]
 800217c:	0119      	lsls	r1, r3, #4
 800217e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002182:	f1c1 0620 	rsb	r6, r1, #32
 8002186:	f1a1 0020 	sub.w	r0, r1, #32
 800218a:	fa22 f401 	lsr.w	r4, r2, r1
 800218e:	fa03 f606 	lsl.w	r6, r3, r6
 8002192:	4334      	orrs	r4, r6
 8002194:	fa23 f000 	lsr.w	r0, r3, r0
 8002198:	4304      	orrs	r4, r0
 800219a:	fa23 f501 	lsr.w	r5, r3, r1
 800219e:	b2a3      	uxth	r3, r4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4660      	mov	r0, ip
 80021a4:	f000 f9c8 	bl	8002538 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021ac:	f000 f9e0 	bl	8002570 <FLASH_WaitForLastOperation>
 80021b0:	4603      	mov	r3, r0
 80021b2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_FLASH_Program+0xdc>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <HAL_FLASH_Program+0xdc>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80021c6:	7dbb      	ldrb	r3, [r7, #22]
 80021c8:	3301      	adds	r3, #1
 80021ca:	75bb      	strb	r3, [r7, #22]
 80021cc:	7dba      	ldrb	r2, [r7, #22]
 80021ce:	7d7b      	ldrb	r3, [r7, #21]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d3cd      	bcc.n	8002170 <HAL_FLASH_Program+0x60>
 80021d4:	e000      	b.n	80021d8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80021d6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_FLASH_Program+0xd8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	761a      	strb	r2, [r3, #24]

  return status;
 80021de:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e8:	200000a0 	.word	0x200000a0
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_FLASH_Program_IT>:
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  }
#else
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_FLASH_Program_IT+0x78>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	4a18      	ldr	r2, [pc, #96]	@ (8002268 <HAL_FLASH_Program_IT+0x78>)
 8002208:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800220c:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */
  
  pFlash.Address = Address;
 800220e:	4a17      	ldr	r2, [pc, #92]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6093      	str	r3, [r2, #8]
  pFlash.Data = Data;
 8002214:	4915      	ldr	r1, [pc, #84]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 8002216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800221a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_FLASH_Program_IT+0x42>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
    /* Program halfword (16-bit) at a specified address. */
    pFlash.DataRemaining = 1U;
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 800222c:	2201      	movs	r2, #1
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	e00f      	b.n	8002252 <HAL_FLASH_Program_IT+0x62>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d106      	bne.n	8002246 <HAL_FLASH_Program_IT+0x56>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 800223a:	2204      	movs	r2, #4
 800223c:	701a      	strb	r2, [r3, #0]
    /* Program word (32-bit : 2*16-bit) at a specified address. */
    pFlash.DataRemaining = 2U;
 800223e:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 8002240:	2202      	movs	r2, #2
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	e005      	b.n	8002252 <HAL_FLASH_Program_IT+0x62>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 8002248:	2205      	movs	r2, #5
 800224a:	701a      	strb	r2, [r3, #0]
    /* Program double word (64-bit : 4*16-bit) at a specified address. */
    pFlash.DataRemaining = 4U;
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_FLASH_Program_IT+0x7c>)
 800224e:	2204      	movs	r2, #4
 8002250:	605a      	str	r2, [r3, #4]
  }

  /* Program halfword (16-bit) at a specified address. */
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8002252:	883b      	ldrh	r3, [r7, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	68b8      	ldr	r0, [r7, #8]
 8002258:	f000 f96e 	bl	8002538 <FLASH_Program_HalfWord>

  return status;
 800225c:	7dfb      	ldrb	r3, [r7, #23]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	200000a0 	.word	0x200000a0

08002270 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800227a:	4b6b      	ldr	r3, [pc, #428]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_FLASH_IRQHandler+0x22>
 8002286:	4b68      	ldr	r3, [pc, #416]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00e      	beq.n	80022b0 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002292:	4b66      	ldr	r3, [pc, #408]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002298:	4b64      	ldr	r3, [pc, #400]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 800229a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800229e:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80022a0:	f000 f9ac 	bl	80025fc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8cc 	bl	8002442 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80022aa:	4b60      	ldr	r3, [pc, #384]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80022b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a0 	beq.w	80023fe <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022be:	4b5a      	ldr	r3, [pc, #360]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 80022c0:	2220      	movs	r2, #32
 80022c2:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8097 	beq.w	80023fe <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80022d0:	4b56      	ldr	r3, [pc, #344]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d12d      	bne.n	8002336 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80022da:	4b54      	ldr	r3, [pc, #336]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022e2:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80022e4:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80022ec:	4b4f      	ldr	r3, [pc, #316]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f89c 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80022f8:	4b4c      	ldr	r3, [pc, #304]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002300:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002302:	4a4a      	ldr	r2, [pc, #296]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002308:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fdaf 	bl	8002e78 <FLASH_PageErase>
 800231a:	e070      	b.n	80023fe <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4a42      	ldr	r2, [pc, #264]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f87e 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>
 8002334:	e063      	b.n	80023fe <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d10c      	bne.n	800235a <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002340:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 f86f 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002352:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e051      	b.n	80023fe <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800235a:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	4a32      	ldr	r2, [pc, #200]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002362:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002364:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d024      	beq.n	80023b6 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	3302      	adds	r3, #2
 8002372:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002374:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002376:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 800237e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	0c02      	lsrs	r2, r0, #16
 800238c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002390:	0c0b      	lsrs	r3, r1, #16
 8002392:	4926      	ldr	r1, [pc, #152]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002394:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023aa:	b293      	uxth	r3, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8c2 	bl	8002538 <FLASH_Program_HalfWord>
 80023b4:	e023      	b.n	80023fe <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d105      	bne.n	80023cc <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f833 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>
 80023ca:	e011      	b.n	80023f0 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d106      	bne.n	80023e4 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	3b02      	subs	r3, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f827 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>
 80023e2:	e005      	b.n	80023f0 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	3b06      	subs	r3, #6
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f820 	bl	8002430 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023f6:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_FLASH_IRQHandler+0x1bc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800240e:	f023 0307 	bic.w	r3, r3, #7
 8002412:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <HAL_FLASH_IRQHandler+0x1b8>)
 800241a:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800241e:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022000 	.word	0x40022000
 800242c:	200000a0 	.word	0x200000a0

08002430 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <HAL_FLASH_Unlock+0x40>)
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_FLASH_Unlock+0x40>)
 800246c:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <HAL_FLASH_Unlock+0x44>)
 800246e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <HAL_FLASH_Unlock+0x40>)
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <HAL_FLASH_Unlock+0x48>)
 8002474:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_FLASH_Unlock+0x40>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002486:	79fb      	ldrb	r3, [r7, #7]
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	45670123 	.word	0x45670123
 800249c:	cdef89ab 	.word	0xcdef89ab

080024a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80024a4:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <HAL_FLASH_Lock+0x1c>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4a04      	ldr	r2, [pc, #16]	@ (80024bc <HAL_FLASH_Lock+0x1c>)
 80024aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_FLASH_OB_Unlock+0x2c>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_FLASH_OB_Unlock+0x2c>)
 80024d2:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <HAL_FLASH_OB_Unlock+0x30>)
 80024d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_FLASH_OB_Unlock+0x2c>)
 80024d8:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <HAL_FLASH_OB_Unlock+0x34>)
 80024da:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000
 80024f0:	45670123 	.word	0x45670123
 80024f4:	cdef89ab 	.word	0xcdef89ab

080024f8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_FLASH_OB_Lock+0x1c>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_FLASH_OB_Lock+0x1c>)
 8002502:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002506:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 800251c:	f7fe fdc5 	bl	80010aa <HAL_NVIC_SystemReset>
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002528:	4b02      	ldr	r3, [pc, #8]	@ (8002534 <HAL_FLASH_GetError+0x10>)
 800252a:	69db      	ldr	r3, [r3, #28]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	200000a0 	.word	0x200000a0

08002538 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <FLASH_Program_HalfWord+0x30>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <FLASH_Program_HalfWord+0x34>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	4a07      	ldr	r2, [pc, #28]	@ (800256c <FLASH_Program_HalfWord+0x34>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	801a      	strh	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200000a0 	.word	0x200000a0
 800256c:	40022000 	.word	0x40022000

08002570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7fe fa5c 	bl	8000a34 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800257e:	e010      	b.n	80025a2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002586:	d00c      	beq.n	80025a2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <FLASH_WaitForLastOperation+0x2e>
 800258e:	f7fe fa51 	bl	8000a34 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d201      	bcs.n	80025a2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e025      	b.n	80025ee <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e8      	bne.n	8002580 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025ba:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025bc:	2220      	movs	r2, #32
 80025be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025c0:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025d8:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <FLASH_WaitForLastOperation+0x88>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025e4:	f000 f80a 	bl	80025fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40022000 	.word	0x40022000

080025fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002606:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002612:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 800261c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002632:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 800263c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <FLASH_SetErrorCode+0x9c>)
 800265c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f240 1201 	movw	r2, #257	@ 0x101
 8002670:	4293      	cmp	r3, r2
 8002672:	d106      	bne.n	8002682 <FLASH_SetErrorCode+0x86>
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	61d3      	str	r3, [r2, #28]
}  
 8002680:	e002      	b.n	8002688 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002682:	4a04      	ldr	r2, [pc, #16]	@ (8002694 <FLASH_SetErrorCode+0x98>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60d3      	str	r3, [r2, #12]
}  
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000
 8002698:	200000a0 	.word	0x200000a0

0800269c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ae:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <HAL_FLASHEx_Erase+0xd0>)
 80026b0:	7e1b      	ldrb	r3, [r3, #24]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_FLASHEx_Erase+0x1e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e053      	b.n	8002762 <HAL_FLASHEx_Erase+0xc6>
 80026ba:	4b2c      	ldr	r3, [pc, #176]	@ (800276c <HAL_FLASHEx_Erase+0xd0>)
 80026bc:	2201      	movs	r2, #1
 80026be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d116      	bne.n	80026f6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026cc:	f7ff ff50 	bl	8002570 <FLASH_WaitForLastOperation>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d141      	bne.n	800275a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f000 f980 	bl	80029dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026e0:	f7ff ff46 	bl	8002570 <FLASH_WaitForLastOperation>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026e8:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <HAL_FLASHEx_Erase+0xd4>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a20      	ldr	r2, [pc, #128]	@ (8002770 <HAL_FLASHEx_Erase+0xd4>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6113      	str	r3, [r2, #16]
 80026f4:	e031      	b.n	800275a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026fa:	f7ff ff39 	bl	8002570 <FLASH_WaitForLastOperation>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d12a      	bne.n	800275a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800270a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	e019      	b.n	8002748 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002714:	68b8      	ldr	r0, [r7, #8]
 8002716:	f000 fbaf 	bl	8002e78 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800271a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800271e:	f7ff ff27 	bl	8002570 <FLASH_WaitForLastOperation>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_FLASHEx_Erase+0xd4>)
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_FLASHEx_Erase+0xd4>)
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	601a      	str	r2, [r3, #0]
            break;
 800273e:	e00c      	b.n	800275a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002746:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	029a      	lsls	r2, r3, #10
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4413      	add	r3, r2
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3dc      	bcc.n	8002714 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_FLASHEx_Erase+0xd0>)
 800275c:	2200      	movs	r2, #0
 800275e:	761a      	strb	r2, [r3, #24]

  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200000a0 	.word	0x200000a0
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <HAL_FLASHEx_Erase_IT+0x6c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_FLASHEx_Erase_IT+0x1a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e023      	b.n	80027d6 <HAL_FLASHEx_Erase_IT+0x62>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_FLASHEx_Erase_IT+0x70>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <HAL_FLASHEx_Erase_IT+0x70>)
 8002794:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002798:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  
#endif
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d108      	bne.n	80027b4 <HAL_FLASHEx_Erase_IT+0x40>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_FLASHEx_Erase_IT+0x6c>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f915 	bl	80029dc <FLASH_MassErase>
 80027b2:	e00f      	b.n	80027d4 <HAL_FLASHEx_Erase_IT+0x60>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <HAL_FLASHEx_Erase_IT+0x6c>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a08      	ldr	r2, [pc, #32]	@ (80027e0 <HAL_FLASHEx_Erase_IT+0x6c>)
 80027c0:	6053      	str	r3, [r2, #4]
    pFlash.Address = pEraseInit->PageAddress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <HAL_FLASHEx_Erase_IT+0x6c>)
 80027c8:	6093      	str	r3, [r2, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fb52 	bl	8002e78 <FLASH_PageErase>
  }

  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200000a0 	.word	0x200000a0
 80027e4:	40022000 	.word	0x40022000

080027e8 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 80027ee:	23a5      	movs	r3, #165	@ 0xa5
 80027f0:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80027f6:	f000 fb13 	bl	8002e20 <FLASH_OB_GetRDP>
 80027fa:	4603      	mov	r3, r0
 80027fc:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002802:	f7ff feb5 	bl	8002570 <FLASH_WaitForLastOperation>
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d123      	bne.n	8002858 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002810:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <HAL_FLASHEx_OBErase+0x7c>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002816:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4a13      	ldr	r2, [pc, #76]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a10      	ldr	r2, [pc, #64]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 8002828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282c:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800282e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002832:	f7ff fe9d 	bl	8002570 <FLASH_WaitForLastOperation>
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <HAL_FLASHEx_OBErase+0x80>)
 8002840:	f023 0320 	bic.w	r3, r3, #32
 8002844:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fa22 	bl	8002c98 <FLASH_OB_RDP_LevelConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8002858:	79fb      	ldrb	r3, [r7, #7]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200000a0 	.word	0x200000a0
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002878:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 800287a:	7e1b      	ldrb	r3, [r3, #24]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_FLASHEx_OBProgram+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e069      	b.n	8002958 <HAL_FLASHEx_OBProgram+0xec>
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 8002886:	2201      	movs	r2, #1
 8002888:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01a      	beq.n	80028cc <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f8b6 	bl	8002a14 <FLASH_OB_EnableWRP>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e006      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f950 	bl	8002b58 <FLASH_OB_DisableWRP>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80028c2:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	761a      	strb	r2, [r3, #24]
      return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	e045      	b.n	8002958 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7c1b      	ldrb	r3, [r3, #16]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f9db 	bl	8002c98 <FLASH_OB_RDP_LevelConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	761a      	strb	r2, [r3, #24]
      return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	e030      	b.n	8002958 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00e      	beq.n	8002920 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7c5b      	ldrb	r3, [r3, #17]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa16 	bl	8002d38 <FLASH_OB_UserConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002916:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 8002918:	2200      	movs	r2, #0
 800291a:	761a      	strb	r2, [r3, #24]
      return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	e01b      	b.n	8002958 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d011      	beq.n	8002950 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7e1b      	ldrb	r3, [r3, #24]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fa34 	bl	8002da4 <FLASH_OB_ProgramData>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 8002948:	2200      	movs	r2, #0
 800294a:	761a      	strb	r2, [r3, #24]
      return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	e003      	b.n	8002958 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_FLASHEx_OBProgram+0xf4>)
 8002952:	2200      	movs	r2, #0
 8002954:	761a      	strb	r2, [r3, #24]

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200000a0 	.word	0x200000a0

08002964 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2207      	movs	r2, #7
 8002970:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8002972:	f000 fa4b 	bl	8002e0c <FLASH_OB_GetWRP>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800297c:	f000 fa50 	bl	8002e20 <FLASH_OB_GetRDP>
 8002980:	4603      	mov	r3, r0
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002988:	f000 fa66 	bl	8002e58 <FLASH_OB_GetUser>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	745a      	strb	r2, [r3, #17]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t value = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_FLASHEx_OBGetUserData+0x38>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d105      	bne.n	80029bc <HAL_FLASHEx_OBGetUserData+0x20>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	0a9b      	lsrs	r3, r3, #10
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e004      	b.n	80029c6 <HAL_FLASHEx_OBGetUserData+0x2a>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	0c9b      	lsrs	r3, r3, #18
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	1ffff804 	.word	0x1ffff804
 80029d8:	40022000 	.word	0x40022000

080029dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <FLASH_MassErase+0x30>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <FLASH_MassErase+0x34>)
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <FLASH_MassErase+0x34>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <FLASH_MassErase+0x34>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <FLASH_MassErase+0x34>)
 80029fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a00:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	200000a0 	.word	0x200000a0
 8002a10:	40022000 	.word	0x40022000

08002a14 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a24:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8002a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a2a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a30:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a36:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8002a38:	f000 f9e8 	bl	8002e0c <FLASH_OB_GetWRP>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4013      	ands	r3, r2
 8002a44:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0e1b      	lsrs	r3, r3, #24
 8002a66:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a6c:	f7ff fd80 	bl	8002570 <FLASH_WaitForLastOperation>
 8002a70:	4603      	mov	r3, r0
 8002a72:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d162      	bne.n	8002b40 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <FLASH_OB_EnableWRP+0x138>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002a80:	f7ff feb2 	bl	80027e8 <HAL_FLASHEx_OBErase>
 8002a84:	4603      	mov	r3, r0
 8002a86:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d158      	bne.n	8002b40 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002a8e:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <FLASH_OB_EnableWRP+0x13c>)
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	4a2f      	ldr	r2, [pc, #188]	@ (8002b50 <FLASH_OB_EnableWRP+0x13c>)
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002a9a:	8abb      	ldrh	r3, [r7, #20]
 8002a9c:	2bff      	cmp	r3, #255	@ 0xff
 8002a9e:	d00d      	beq.n	8002abc <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002aa2:	891b      	ldrh	r3, [r3, #8]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	492b      	ldr	r1, [pc, #172]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002aa8:	8abb      	ldrh	r3, [r7, #20]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ab0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ab4:	f7ff fd5c 	bl	8002570 <FLASH_WaitForLastOperation>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d110      	bne.n	8002ae4 <FLASH_OB_EnableWRP+0xd0>
 8002ac2:	8a7b      	ldrh	r3, [r7, #18]
 8002ac4:	2bff      	cmp	r3, #255	@ 0xff
 8002ac6:	d00d      	beq.n	8002ae4 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002aca:	895b      	ldrh	r3, [r3, #10]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4921      	ldr	r1, [pc, #132]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ad8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002adc:	f7ff fd48 	bl	8002570 <FLASH_WaitForLastOperation>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d110      	bne.n	8002b0c <FLASH_OB_EnableWRP+0xf8>
 8002aea:	8a3b      	ldrh	r3, [r7, #16]
 8002aec:	2bff      	cmp	r3, #255	@ 0xff
 8002aee:	d00d      	beq.n	8002b0c <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8002af0:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002af2:	899b      	ldrh	r3, [r3, #12]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4917      	ldr	r1, [pc, #92]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002af8:	8a3b      	ldrh	r3, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b00:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b04:	f7ff fd34 	bl	8002570 <FLASH_WaitForLastOperation>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d110      	bne.n	8002b34 <FLASH_OB_EnableWRP+0x120>
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	2bff      	cmp	r3, #255	@ 0xff
 8002b16:	d00d      	beq.n	8002b34 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002b1a:	89db      	ldrh	r3, [r3, #14]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	490d      	ldr	r1, [pc, #52]	@ (8002b54 <FLASH_OB_EnableWRP+0x140>)
 8002b20:	89fb      	ldrh	r3, [r7, #14]
 8002b22:	4013      	ands	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b2c:	f7ff fd20 	bl	8002570 <FLASH_WaitForLastOperation>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <FLASH_OB_EnableWRP+0x13c>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <FLASH_OB_EnableWRP+0x13c>)
 8002b3a:	f023 0310 	bic.w	r3, r3, #16
 8002b3e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200000a0 	.word	0x200000a0
 8002b50:	40022000 	.word	0x40022000
 8002b54:	1ffff800 	.word	0x1ffff800

08002b58 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b68:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8002b6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b6e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b74:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002b76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b7a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002b7c:	f000 f946 	bl	8002e0c <FLASH_OB_GetWRP>
 8002b80:	4602      	mov	r2, r0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0e1b      	lsrs	r3, r3, #24
 8002ba8:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002baa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bae:	f7ff fcdf 	bl	8002570 <FLASH_WaitForLastOperation>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d162      	bne.n	8002c82 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bbc:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <FLASH_OB_DisableWRP+0x134>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002bc2:	f7ff fe11 	bl	80027e8 <HAL_FLASHEx_OBErase>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d158      	bne.n	8002c82 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c90 <FLASH_OB_DisableWRP+0x138>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c90 <FLASH_OB_DisableWRP+0x138>)
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002bdc:	8abb      	ldrh	r3, [r7, #20]
 8002bde:	2bff      	cmp	r3, #255	@ 0xff
 8002be0:	d00d      	beq.n	8002bfe <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002be4:	891b      	ldrh	r3, [r3, #8]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	492a      	ldr	r1, [pc, #168]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002bea:	8abb      	ldrh	r3, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bf6:	f7ff fcbb 	bl	8002570 <FLASH_WaitForLastOperation>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d110      	bne.n	8002c26 <FLASH_OB_DisableWRP+0xce>
 8002c04:	8a7b      	ldrh	r3, [r7, #18]
 8002c06:	2bff      	cmp	r3, #255	@ 0xff
 8002c08:	d00d      	beq.n	8002c26 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c0c:	895b      	ldrh	r3, [r3, #10]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	4920      	ldr	r1, [pc, #128]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c12:	8a7b      	ldrh	r3, [r7, #18]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c1a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c1e:	f7ff fca7 	bl	8002570 <FLASH_WaitForLastOperation>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <FLASH_OB_DisableWRP+0xf6>
 8002c2c:	8a3b      	ldrh	r3, [r7, #16]
 8002c2e:	2bff      	cmp	r3, #255	@ 0xff
 8002c30:	d00d      	beq.n	8002c4e <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8002c32:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c34:	899b      	ldrh	r3, [r3, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c3a:	8a3b      	ldrh	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c46:	f7ff fc93 	bl	8002570 <FLASH_WaitForLastOperation>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <FLASH_OB_DisableWRP+0x11e>
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d00d      	beq.n	8002c76 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c5c:	89db      	ldrh	r3, [r3, #14]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	@ (8002c94 <FLASH_OB_DisableWRP+0x13c>)
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c6e:	f7ff fc7f 	bl	8002570 <FLASH_WaitForLastOperation>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <FLASH_OB_DisableWRP+0x138>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <FLASH_OB_DisableWRP+0x138>)
 8002c7c:	f023 0310 	bic.w	r3, r3, #16
 8002c80:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200000a0 	.word	0x200000a0
 8002c90:	40022000 	.word	0x40022000
 8002c94:	1ffff800 	.word	0x1ffff800

08002c98 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ca6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002caa:	f7ff fc61 	bl	8002570 <FLASH_WaitForLastOperation>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d133      	bne.n	8002d20 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <FLASH_OB_RDP_LevelConfig+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002cc4:	f043 0320 	orr.w	r3, r3, #32
 8002cc8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cd4:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cd6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cda:	f7ff fc49 	bl	8002570 <FLASH_WaitForLastOperation>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002ce2:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002ce8:	f023 0320 	bic.w	r3, r3, #32
 8002cec:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d115      	bne.n	8002d20 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	b292      	uxth	r2, r2
 8002d06:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002d08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d0c:	f7ff fc30 	bl	8002570 <FLASH_WaitForLastOperation>
 8002d10:	4603      	mov	r3, r0
 8002d12:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d1a:	f023 0310 	bic.w	r3, r3, #16
 8002d1e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200000a0 	.word	0x200000a0
 8002d30:	40022000 	.word	0x40022000
 8002d34:	1ffff800 	.word	0x1ffff800

08002d38 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d4a:	f7ff fc11 	bl	8002570 <FLASH_WaitForLastOperation>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11a      	bne.n	8002d8e <FLASH_OB_UserConfig+0x56>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <FLASH_OB_UserConfig+0x60>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <FLASH_OB_UserConfig+0x64>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <FLASH_OB_UserConfig+0x64>)
 8002d64:	f043 0310 	orr.w	r3, r3, #16
 8002d68:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <FLASH_OB_UserConfig+0x68>)
 8002d74:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d7a:	f7ff fbf9 	bl	8002570 <FLASH_WaitForLastOperation>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <FLASH_OB_UserConfig+0x64>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <FLASH_OB_UserConfig+0x64>)
 8002d88:	f023 0310 	bic.w	r3, r3, #16
 8002d8c:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200000a0 	.word	0x200000a0
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	1ffff800 	.word	0x1ffff800

08002da4 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002db4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002db8:	f7ff fbda 	bl	8002570 <FLASH_WaitForLastOperation>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <FLASH_OB_ProgramData+0x60>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <FLASH_OB_ProgramData+0x64>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <FLASH_OB_ProgramData+0x64>)
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002de0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002de4:	f7ff fbc4 	bl	8002570 <FLASH_WaitForLastOperation>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <FLASH_OB_ProgramData+0x64>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <FLASH_OB_ProgramData+0x64>)
 8002df2:	f023 0310 	bic.w	r3, r3, #16
 8002df6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200000a0 	.word	0x200000a0
 8002e08:	40022000 	.word	0x40022000

08002e0c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002e10:	4b02      	ldr	r3, [pc, #8]	@ (8002e1c <FLASH_OB_GetWRP+0x10>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40022000 	.word	0x40022000

08002e20 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8002e26:	23a5      	movs	r3, #165	@ 0xa5
 8002e28:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <FLASH_OB_GetRDP+0x34>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d102      	bne.n	8002e44 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	e001      	b.n	8002e48 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8002e44:	23a5      	movs	r3, #165	@ 0xa5
 8002e46:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40022000 	.word	0x40022000

08002e58 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <FLASH_OB_GetUser+0x1c>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000

08002e78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <FLASH_PageErase+0x38>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <FLASH_PageErase+0x3c>)
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <FLASH_PageErase+0x3c>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e92:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <FLASH_PageErase+0x3c>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <FLASH_PageErase+0x3c>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4a05      	ldr	r2, [pc, #20]	@ (8002eb4 <FLASH_PageErase+0x3c>)
 8002e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	200000a0 	.word	0x200000a0
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b08b      	sub	sp, #44	@ 0x2c
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e169      	b.n	80031a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f040 8158 	bne.w	800319a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a9a      	ldr	r2, [pc, #616]	@ (8003158 <HAL_GPIO_Init+0x2a0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d05e      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002ef4:	4a98      	ldr	r2, [pc, #608]	@ (8003158 <HAL_GPIO_Init+0x2a0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d875      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002efa:	4a98      	ldr	r2, [pc, #608]	@ (800315c <HAL_GPIO_Init+0x2a4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d058      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f00:	4a96      	ldr	r2, [pc, #600]	@ (800315c <HAL_GPIO_Init+0x2a4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d86f      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f06:	4a96      	ldr	r2, [pc, #600]	@ (8003160 <HAL_GPIO_Init+0x2a8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d052      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f0c:	4a94      	ldr	r2, [pc, #592]	@ (8003160 <HAL_GPIO_Init+0x2a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d869      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f12:	4a94      	ldr	r2, [pc, #592]	@ (8003164 <HAL_GPIO_Init+0x2ac>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04c      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f18:	4a92      	ldr	r2, [pc, #584]	@ (8003164 <HAL_GPIO_Init+0x2ac>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d863      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f1e:	4a92      	ldr	r2, [pc, #584]	@ (8003168 <HAL_GPIO_Init+0x2b0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d046      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f24:	4a90      	ldr	r2, [pc, #576]	@ (8003168 <HAL_GPIO_Init+0x2b0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d85d      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f2a:	2b12      	cmp	r3, #18
 8002f2c:	d82a      	bhi.n	8002f84 <HAL_GPIO_Init+0xcc>
 8002f2e:	2b12      	cmp	r3, #18
 8002f30:	d859      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_GPIO_Init+0x80>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002fb3 	.word	0x08002fb3
 8002f3c:	08002f8d 	.word	0x08002f8d
 8002f40:	08002f9f 	.word	0x08002f9f
 8002f44:	08002fe1 	.word	0x08002fe1
 8002f48:	08002fe7 	.word	0x08002fe7
 8002f4c:	08002fe7 	.word	0x08002fe7
 8002f50:	08002fe7 	.word	0x08002fe7
 8002f54:	08002fe7 	.word	0x08002fe7
 8002f58:	08002fe7 	.word	0x08002fe7
 8002f5c:	08002fe7 	.word	0x08002fe7
 8002f60:	08002fe7 	.word	0x08002fe7
 8002f64:	08002fe7 	.word	0x08002fe7
 8002f68:	08002fe7 	.word	0x08002fe7
 8002f6c:	08002fe7 	.word	0x08002fe7
 8002f70:	08002fe7 	.word	0x08002fe7
 8002f74:	08002fe7 	.word	0x08002fe7
 8002f78:	08002fe7 	.word	0x08002fe7
 8002f7c:	08002f95 	.word	0x08002f95
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	4a79      	ldr	r2, [pc, #484]	@ (800316c <HAL_GPIO_Init+0x2b4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8a:	e02c      	b.n	8002fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e029      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e024      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	623b      	str	r3, [r7, #32]
          break;
 8002fa6:	e01f      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	330c      	adds	r3, #12
 8002fae:	623b      	str	r3, [r7, #32]
          break;
 8002fb0:	e01a      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e013      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	611a      	str	r2, [r3, #16]
          break;
 8002fd2:	e009      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	615a      	str	r2, [r3, #20]
          break;
 8002fde:	e003      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          break;
 8002fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2bff      	cmp	r3, #255	@ 0xff
 8002fec:	d801      	bhi.n	8002ff2 <HAL_GPIO_Init+0x13a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	e001      	b.n	8002ff6 <HAL_GPIO_Init+0x13e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2bff      	cmp	r3, #255	@ 0xff
 8002ffc:	d802      	bhi.n	8003004 <HAL_GPIO_Init+0x14c>
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x152>
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	3b08      	subs	r3, #8
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	210f      	movs	r1, #15
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80b1 	beq.w	800319a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003038:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a4c      	ldr	r2, [pc, #304]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003050:	4a48      	ldr	r2, [pc, #288]	@ (8003174 <HAL_GPIO_Init+0x2bc>)
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a40      	ldr	r2, [pc, #256]	@ (8003178 <HAL_GPIO_Init+0x2c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <HAL_GPIO_Init+0x1ec>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3f      	ldr	r2, [pc, #252]	@ (800317c <HAL_GPIO_Init+0x2c4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00d      	beq.n	80030a0 <HAL_GPIO_Init+0x1e8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3e      	ldr	r2, [pc, #248]	@ (8003180 <HAL_GPIO_Init+0x2c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <HAL_GPIO_Init+0x1e4>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3d      	ldr	r2, [pc, #244]	@ (8003184 <HAL_GPIO_Init+0x2cc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_GPIO_Init+0x1e0>
 8003094:	2303      	movs	r3, #3
 8003096:	e006      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 8003098:	2304      	movs	r3, #4
 800309a:	e004      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 800309c:	2302      	movs	r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 80030a4:	2300      	movs	r3, #0
 80030a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a8:	f002 0203 	and.w	r2, r2, #3
 80030ac:	0092      	lsls	r2, r2, #2
 80030ae:	4093      	lsls	r3, r2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b6:	492f      	ldr	r1, [pc, #188]	@ (8003174 <HAL_GPIO_Init+0x2bc>)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	492c      	ldr	r1, [pc, #176]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030de:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4928      	ldr	r1, [pc, #160]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030f8:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4922      	ldr	r1, [pc, #136]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	60cb      	str	r3, [r1, #12]
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003106:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	43db      	mvns	r3, r3
 800310e:	491e      	ldr	r1, [pc, #120]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003110:	4013      	ands	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4918      	ldr	r1, [pc, #96]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800312e:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	43db      	mvns	r3, r3
 8003136:	4914      	ldr	r1, [pc, #80]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003138:	4013      	ands	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d021      	beq.n	800318c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003148:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	490e      	ldr	r1, [pc, #56]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e021      	b.n	800319a <HAL_GPIO_Init+0x2e2>
 8003156:	bf00      	nop
 8003158:	10320000 	.word	0x10320000
 800315c:	10310000 	.word	0x10310000
 8003160:	10220000 	.word	0x10220000
 8003164:	10210000 	.word	0x10210000
 8003168:	10120000 	.word	0x10120000
 800316c:	10110000 	.word	0x10110000
 8003170:	40021000 	.word	0x40021000
 8003174:	40010000 	.word	0x40010000
 8003178:	40010800 	.word	0x40010800
 800317c:	40010c00 	.word	0x40010c00
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_GPIO_Init+0x304>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	43db      	mvns	r3, r3
 8003194:	4909      	ldr	r1, [pc, #36]	@ (80031bc <HAL_GPIO_Init+0x304>)
 8003196:	4013      	ands	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f ae8e 	bne.w	8002ecc <HAL_GPIO_Init+0x14>
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	372c      	adds	r7, #44	@ 0x2c
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80031ce:	e09a      	b.n	8003306 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808d 	beq.w	8003300 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80031e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003320 <HAL_GPIO_DeInit+0x160>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a46      	ldr	r2, [pc, #280]	@ (8003324 <HAL_GPIO_DeInit+0x164>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_DeInit+0x78>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a45      	ldr	r2, [pc, #276]	@ (8003328 <HAL_GPIO_DeInit+0x168>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_DeInit+0x74>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a44      	ldr	r2, [pc, #272]	@ (800332c <HAL_GPIO_DeInit+0x16c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_DeInit+0x70>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a43      	ldr	r2, [pc, #268]	@ (8003330 <HAL_GPIO_DeInit+0x170>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_DeInit+0x6c>
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_GPIO_DeInit+0x7a>
 800322c:	2304      	movs	r3, #4
 800322e:	e004      	b.n	800323a <HAL_GPIO_DeInit+0x7a>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_DeInit+0x7a>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_DeInit+0x7a>
 8003238:	2300      	movs	r3, #0
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	429a      	cmp	r2, r3
 8003248:	d132      	bne.n	80032b0 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800324a:	4b3a      	ldr	r3, [pc, #232]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	43db      	mvns	r3, r3
 8003252:	4938      	ldr	r1, [pc, #224]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 8003254:	4013      	ands	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003258:	4b36      	ldr	r3, [pc, #216]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	43db      	mvns	r3, r3
 8003260:	4934      	ldr	r1, [pc, #208]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 8003262:	4013      	ands	r3, r2
 8003264:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003266:	4b33      	ldr	r3, [pc, #204]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	43db      	mvns	r3, r3
 800326e:	4931      	ldr	r1, [pc, #196]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 8003270:	4013      	ands	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003274:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	43db      	mvns	r3, r3
 800327c:	492d      	ldr	r1, [pc, #180]	@ (8003334 <HAL_GPIO_DeInit+0x174>)
 800327e:	4013      	ands	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_GPIO_DeInit+0x160>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	481f      	ldr	r0, [pc, #124]	@ (8003320 <HAL_GPIO_DeInit+0x160>)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	400a      	ands	r2, r1
 80032aa:	3302      	adds	r3, #2
 80032ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2bff      	cmp	r3, #255	@ 0xff
 80032b4:	d801      	bhi.n	80032ba <HAL_GPIO_DeInit+0xfa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e001      	b.n	80032be <HAL_GPIO_DeInit+0xfe>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2bff      	cmp	r3, #255	@ 0xff
 80032c4:	d802      	bhi.n	80032cc <HAL_GPIO_DeInit+0x10c>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	e002      	b.n	80032d2 <HAL_GPIO_DeInit+0x112>
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	3b08      	subs	r3, #8
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	210f      	movs	r1, #15
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	401a      	ands	r2, r3
 80032e4:	2104      	movs	r1, #4
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	431a      	orrs	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f af5e 	bne.w	80031d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40010000 	.word	0x40010000
 8003324:	40010800 	.word	0x40010800
 8003328:	40010c00 	.word	0x40010c00
 800332c:	40011000 	.word	0x40011000
 8003330:	40011400 	.word	0x40011400
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
 8003372:	4613      	mov	r3, r2
 8003374:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003376:	787b      	ldrb	r3, [r7, #1]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003382:	e003      	b.n	800338c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	041a      	lsls	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	400b      	ands	r3, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80033d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
	...

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342e:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f806 	bl	8003448 <HAL_GPIO_EXTI_Callback>
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8003466:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <HAL_GPIOEx_ConfigEventout+0x28>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	430b      	orrs	r3, r1
 8003474:	4903      	ldr	r1, [pc, #12]	@ (8003484 <HAL_GPIOEx_ConfigEventout+0x28>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40010000 	.word	0x40010000

08003488 <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_GPIOEx_EnableEventout+0x18>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_GPIOEx_EnableEventout+0x18>)
 8003492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40010000 	.word	0x40010000

080034a4 <HAL_GPIOEx_DisableEventout>:
/**
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 80034a8:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <HAL_GPIOEx_DisableEventout+0x18>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a03      	ldr	r2, [pc, #12]	@ (80034bc <HAL_GPIOEx_DisableEventout+0x18>)
 80034ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40010000 	.word	0x40010000

080034c0 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80034c4:	bf20      	wfe
  __asm volatile( "nop" );
 80034c6:	bf00      	nop
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_PWR_DeInit>:
/**
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_PWR_DeInit+0x24>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	4a06      	ldr	r2, [pc, #24]	@ (80034f4 <HAL_PWR_DeInit+0x24>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6113      	str	r3, [r2, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 80034e0:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <HAL_PWR_DeInit+0x24>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	4a03      	ldr	r2, [pc, #12]	@ (80034f4 <HAL_PWR_DeInit+0x24>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6113      	str	r3, [r2, #16]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_PWR_EnableBkUpAccess+0x14>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	420e0020 	.word	0x420e0020

08003510 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <HAL_PWR_DisableBkUpAccess+0x14>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	420e0020 	.word	0x420e0020

08003528 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <HAL_PWR_ConfigPVD+0xb4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4927      	ldr	r1, [pc, #156]	@ (80035dc <HAL_PWR_ConfigPVD+0xb4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a26      	ldr	r2, [pc, #152]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800354e:	4b24      	ldr	r3, [pc, #144]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a23      	ldr	r2, [pc, #140]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800355a:	4b21      	ldr	r3, [pc, #132]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4a20      	ldr	r2, [pc, #128]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003564:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003566:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 800356c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003570:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4a11      	ldr	r2, [pc, #68]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a0:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a0b      	ldr	r2, [pc, #44]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <HAL_PWR_ConfigPVD+0xb8>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	60d3      	str	r3, [r2, #12]
  }
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40007000 	.word	0x40007000
 80035e0:	40010400 	.word	0x40010400

080035e4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_PWR_EnablePVD+0x14>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	420e0010 	.word	0x420e0010

080035fc <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_PWR_DisablePVD+0x14>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	420e0010 	.word	0x420e0010

08003614 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003628:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	461a      	mov	r2, r3
 800363a:	2301      	movs	r3, #1
 800363c:	6013      	str	r3, [r2, #0]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	10838020 	.word	0x10838020

0800364c <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	60bb      	str	r3, [r7, #8]
  return result;
 8003660:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_PWR_DisableWakeUpPin+0x34>)
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	461a      	mov	r2, r3
 8003672:	2300      	movs	r3, #0
 8003674:	6013      	str	r3, [r2, #0]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	10838020 	.word	0x10838020

08003684 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4a08      	ldr	r2, [pc, #32]	@ (80036b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80036a2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80036a4:	e002      	b.n	80036ac <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80036a6:	bf40      	sev
    __WFE();
 80036a8:	bf20      	wfe
    __WFE();
 80036aa:	bf20      	wfe
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80036c8:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <HAL_PWR_EnterSTOPMode+0x5c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_PWR_EnterSTOPMode+0x5c>)
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80036d4:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <HAL_PWR_EnterSTOPMode+0x5c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 0201 	bic.w	r2, r3, #1
 80036dc:	490e      	ldr	r1, [pc, #56]	@ (8003718 <HAL_PWR_EnterSTOPMode+0x5c>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036e4:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_PWR_EnterSTOPMode+0x60>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <HAL_PWR_EnterSTOPMode+0x60>)
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80036f6:	bf30      	wfi
 80036f8:	e004      	b.n	8003704 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80036fa:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80036fc:	f7ff fee0 	bl	80034c0 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8003700:	f7ff fede 	bl	80034c0 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_PWR_EnterSTOPMode+0x60>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_PWR_EnterSTOPMode+0x60>)
 800370a:	f023 0304 	bic.w	r3, r3, #4
 800370e:	6113      	str	r3, [r2, #16]
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40007000 	.word	0x40007000
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003724:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	4a05      	ldr	r2, [pc, #20]	@ (800374c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800373c:	bf30      	wfi
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_PWR_EnableSleepOnExit+0x18>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	4a03      	ldr	r2, [pc, #12]	@ (8003768 <HAL_PWR_EnableSleepOnExit+0x18>)
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	6113      	str	r3, [r2, #16]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <HAL_PWR_DisableSleepOnExit+0x18>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a03      	ldr	r2, [pc, #12]	@ (8003784 <HAL_PWR_DisableSleepOnExit+0x18>)
 8003776:	f023 0302 	bic.w	r3, r3, #2
 800377a:	6113      	str	r3, [r2, #16]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800378c:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <HAL_PWR_EnableSEVOnPend+0x18>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	4a03      	ldr	r2, [pc, #12]	@ (80037a0 <HAL_PWR_EnableSEVOnPend+0x18>)
 8003792:	f043 0310 	orr.w	r3, r3, #16
 8003796:	6113      	str	r3, [r2, #16]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <HAL_PWR_DisableSEVOnPend+0x18>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	4a03      	ldr	r2, [pc, #12]	@ (80037bc <HAL_PWR_DisableSEVOnPend+0x18>)
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	6113      	str	r3, [r2, #16]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80037d0:	f000 f808 	bl	80037e4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80037d4:	4b02      	ldr	r3, [pc, #8]	@ (80037e0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80037d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80037da:	615a      	str	r2, [r3, #20]
  }
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037f6:	f7fd f91d 	bl	8000a34 <HAL_GetTick>
 80037fa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037fc:	4b45      	ldr	r3, [pc, #276]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a44      	ldr	r2, [pc, #272]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380a:	f7fd f913 	bl	8000a34 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e077      	b.n	800390c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800381c:	4b3d      	ldr	r3, [pc, #244]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003828:	4b3a      	ldr	r3, [pc, #232]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003830:	4a38      	ldr	r2, [pc, #224]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 8003832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003836:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003838:	f7fd f8fc 	bl	8000a34 <HAL_GetTick>
 800383c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800383e:	4b35      	ldr	r3, [pc, #212]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003846:	f7fd f8f5 	bl	8000a34 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e057      	b.n	800390c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800385c:	4b2d      	ldr	r3, [pc, #180]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ee      	bne.n	8003846 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003868:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_RCC_DeInit+0x128>)
 800386a:	4a2c      	ldr	r2, [pc, #176]	@ (800391c <HAL_RCC_DeInit+0x12c>)
 800386c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800386e:	4b2c      	ldr	r3, [pc, #176]	@ (8003920 <HAL_RCC_DeInit+0x130>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd f89c 	bl	80009b0 <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e044      	b.n	800390c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003882:	f7fd f8d7 	bl	8000a34 <HAL_GetTick>
 8003886:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003888:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fd f8cd 	bl	8000a34 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e031      	b.n	800390c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80038a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80038b4:	4b17      	ldr	r3, [pc, #92]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80038ba:	f7fd f8bb 	bl	8000a34 <HAL_GetTick>
 80038be:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80038c0:	4b14      	ldr	r3, [pc, #80]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038c6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80038ca:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ce:	f7fd f8b1 	bl	8000a34 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	@ 0x64
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e015      	b.n	800390c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80038ec:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a08      	ldr	r2, [pc, #32]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003902:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <HAL_RCC_DeInit+0x124>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	20000008 	.word	0x20000008
 800391c:	007a1200 	.word	0x007a1200
 8003920:	2000000c 	.word	0x2000000c

08003924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e272      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8087 	beq.w	8003a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003944:	4b92      	ldr	r3, [pc, #584]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b04      	cmp	r3, #4
 800394e:	d00c      	beq.n	800396a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003950:	4b8f      	ldr	r3, [pc, #572]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b08      	cmp	r3, #8
 800395a:	d112      	bne.n	8003982 <HAL_RCC_OscConfig+0x5e>
 800395c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003968:	d10b      	bne.n	8003982 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396a:	4b89      	ldr	r3, [pc, #548]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d06c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x12c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d168      	bne.n	8003a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e24c      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x76>
 800398c:	4b80      	ldr	r3, [pc, #512]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7f      	ldr	r2, [pc, #508]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e02e      	b.n	80039f8 <HAL_RCC_OscConfig+0xd4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x98>
 80039a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b78      	ldr	r3, [pc, #480]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a77      	ldr	r2, [pc, #476]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xd4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0xbc>
 80039c6:	4b72      	ldr	r3, [pc, #456]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a71      	ldr	r2, [pc, #452]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xd4>
 80039e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b68      	ldr	r3, [pc, #416]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a67      	ldr	r2, [pc, #412]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd f818 	bl	8000a34 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd f814 	bl	8000a34 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e200      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xe4>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd f804 	bl	8000a34 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd f800 	bl	8000a34 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1ec      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b53      	ldr	r3, [pc, #332]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x10c>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d063      	beq.n	8003b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d11c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x18c>
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x176>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1c0      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4939      	ldr	r1, [pc, #228]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	e03a      	b.n	8003b26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fc ffb9 	bl	8000a34 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fc ffb5 	bl	8000a34 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e1a1      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4927      	ldr	r1, [pc, #156]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fc ff98 	bl	8000a34 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fc ff94 	bl	8000a34 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e180      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03a      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d019      	beq.n	8003b6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b40:	f7fc ff78 	bl	8000a34 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fc ff74 	bl	8000a34 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e160      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b66:	2001      	movs	r0, #1
 8003b68:	f000 fbe4 	bl	8004334 <RCC_Delay>
 8003b6c:	e01c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <HAL_RCC_OscConfig+0x274>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fc ff5e 	bl	8000a34 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7a:	e00f      	b.n	8003b9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fc ff5a 	bl	8000a34 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d908      	bls.n	8003b9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e146      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	42420000 	.word	0x42420000
 8003b98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	4b92      	ldr	r3, [pc, #584]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e9      	bne.n	8003b7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a6 	beq.w	8003d02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b8b      	ldr	r3, [pc, #556]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4b88      	ldr	r3, [pc, #544]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4a87      	ldr	r2, [pc, #540]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	61d3      	str	r3, [r2, #28]
 8003bd2:	4b85      	ldr	r3, [pc, #532]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b82      	ldr	r3, [pc, #520]	@ (8003dec <HAL_RCC_OscConfig+0x4c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bee:	4b7f      	ldr	r3, [pc, #508]	@ (8003dec <HAL_RCC_OscConfig+0x4c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dec <HAL_RCC_OscConfig+0x4c8>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fc ff1b 	bl	8000a34 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fc ff17 	bl	8000a34 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	@ 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e103      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	4b75      	ldr	r3, [pc, #468]	@ (8003dec <HAL_RCC_OscConfig+0x4c8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x312>
 8003c28:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6213      	str	r3, [r2, #32]
 8003c34:	e02d      	b.n	8003c92 <HAL_RCC_OscConfig+0x36e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x334>
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a69      	ldr	r2, [pc, #420]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	4b67      	ldr	r3, [pc, #412]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a66      	ldr	r2, [pc, #408]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	e01c      	b.n	8003c92 <HAL_RCC_OscConfig+0x36e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCC_OscConfig+0x356>
 8003c60:	4b61      	ldr	r3, [pc, #388]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	4a60      	ldr	r2, [pc, #384]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6213      	str	r3, [r2, #32]
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4a5d      	ldr	r2, [pc, #372]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6213      	str	r3, [r2, #32]
 8003c78:	e00b      	b.n	8003c92 <HAL_RCC_OscConfig+0x36e>
 8003c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6213      	str	r3, [r2, #32]
 8003c86:	4b58      	ldr	r3, [pc, #352]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a57      	ldr	r2, [pc, #348]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fc fecb 	bl	8000a34 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fc fec7 	bl	8000a34 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0b1      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x37e>
 8003cc4:	e014      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc6:	f7fc feb5 	bl	8000a34 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fc feb1 	bl	8000a34 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e09b      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce4:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8087 	beq.w	8003e1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d0c:	4b36      	ldr	r3, [pc, #216]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d061      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d146      	bne.n	8003dae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b33      	ldr	r3, [pc, #204]	@ (8003df0 <HAL_RCC_OscConfig+0x4cc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fc fe85 	bl	8000a34 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fc fe81 	bl	8000a34 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e06d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	d108      	bne.n	8003d68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4921      	ldr	r1, [pc, #132]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d68:	4b1f      	ldr	r3, [pc, #124]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a19      	ldr	r1, [r3, #32]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	491b      	ldr	r1, [pc, #108]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x4cc>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fc fe55 	bl	8000a34 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fc fe51 	bl	8000a34 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e03d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da0:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x46a>
 8003dac:	e035      	b.n	8003e1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b10      	ldr	r3, [pc, #64]	@ (8003df0 <HAL_RCC_OscConfig+0x4cc>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fc fe3e 	bl	8000a34 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fc fe3a 	bl	8000a34 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e026      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x498>
 8003dda:	e01e      	b.n	8003e1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e019      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_RCC_OscConfig+0x500>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0d0      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d910      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b67      	ldr	r3, [pc, #412]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	4965      	ldr	r1, [pc, #404]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b63      	ldr	r3, [pc, #396]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0b8      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e84:	4b59      	ldr	r3, [pc, #356]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a58      	ldr	r2, [pc, #352]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e9c:	4b53      	ldr	r3, [pc, #332]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea8:	4b50      	ldr	r3, [pc, #320]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	494d      	ldr	r1, [pc, #308]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d040      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	4b47      	ldr	r3, [pc, #284]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d115      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07f      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee6:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e073      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06b      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f06:	4b39      	ldr	r3, [pc, #228]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4936      	ldr	r1, [pc, #216]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f18:	f7fc fd8c 	bl	8000a34 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f20:	f7fc fd88 	bl	8000a34 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e053      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	4b2d      	ldr	r3, [pc, #180]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 020c 	and.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1eb      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f48:	4b27      	ldr	r3, [pc, #156]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d210      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 0207 	bic.w	r2, r3, #7
 8003f5e:	4922      	ldr	r1, [pc, #136]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b20      	ldr	r3, [pc, #128]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e032      	b.n	8003fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4916      	ldr	r1, [pc, #88]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fa2:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	490e      	ldr	r1, [pc, #56]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fb6:	f000 f871 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	490a      	ldr	r1, [pc, #40]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	5ccb      	ldrb	r3, [r1, r3]
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	4a09      	ldr	r2, [pc, #36]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8003fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fcea 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08005b70 	.word	0x08005b70
 8003ff4:	20000008 	.word	0x20000008
 8003ff8:	2000000c 	.word	0x2000000c

08003ffc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8004008:	f107 0318 	add.w	r3, r7, #24
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800401a:	2303      	movs	r3, #3
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8004022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004026:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <HAL_RCC_MCOConfig+0x68>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <HAL_RCC_MCOConfig+0x68>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	6193      	str	r3, [r2, #24]
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_MCOConfig+0x68>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004040:	f107 0318 	add.w	r3, r7, #24
 8004044:	4619      	mov	r1, r3
 8004046:	4808      	ldr	r0, [pc, #32]	@ (8004068 <HAL_RCC_MCOConfig+0x6c>)
 8004048:	f7fe ff36 	bl	8002eb8 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_MCOConfig+0x68>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004054:	4903      	ldr	r1, [pc, #12]	@ (8004064 <HAL_RCC_MCOConfig+0x68>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	@ 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	40010800 	.word	0x40010800

0800406c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <HAL_RCC_EnableCSS+0x14>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	4242004c 	.word	0x4242004c

08004084 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_RCC_DisableCSS+0x14>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	4242004c 	.word	0x4242004c

0800409c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d002      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x30>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x36>
 80040ca:	e027      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040cc:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	613b      	str	r3, [r7, #16]
      break;
 80040d0:	e027      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	4a17      	ldr	r2, [pc, #92]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ea:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x94>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0c5b      	lsrs	r3, r3, #17
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	4a11      	ldr	r2, [pc, #68]	@ (800413c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x98>)
 80040fe:	fb03 f202 	mul.w	r2, r3, r2
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e004      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0c      	ldr	r2, [pc, #48]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	613b      	str	r3, [r7, #16]
      break;
 800411a:	e002      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x98>)
 800411e:	613b      	str	r3, [r7, #16]
      break;
 8004120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004122:	693b      	ldr	r3, [r7, #16]
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	007a1200 	.word	0x007a1200
 8004138:	08005b88 	.word	0x08005b88
 800413c:	08005b98 	.word	0x08005b98
 8004140:	003d0900 	.word	0x003d0900

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b02      	ldr	r3, [pc, #8]	@ (8004154 <HAL_RCC_GetHCLKFreq+0x10>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000008 	.word	0x20000008

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff2 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08005b80 	.word	0x08005b80

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffde 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0adb      	lsrs	r3, r3, #11
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	@ (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08005b80 	.word	0x08005b80

080041a8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	220f      	movs	r2, #15
 80041b4:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80041b6:	4b3c      	ldr	r3, [pc, #240]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c2:	d104      	bne.n	80041ce <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e00e      	b.n	80041ec <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 80041ce:	4b36      	ldr	r3, [pc, #216]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041da:	d104      	bne.n	80041e6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	e002      	b.n	80041ec <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80041ec:	4b2e      	ldr	r3, [pc, #184]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d103      	bne.n	800420c <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	611a      	str	r2, [r3, #16]
 800420a:	e002      	b.n	8004212 <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8004212:	4b25      	ldr	r3, [pc, #148]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	08db      	lsrs	r3, r3, #3
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	615a      	str	r2, [r3, #20]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d103      	bne.n	8004234 <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2205      	movs	r2, #5
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e00c      	b.n	800424e <HAL_RCC_GetOscConfig+0xa6>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8004234:	4b1c      	ldr	r3, [pc, #112]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d103      	bne.n	8004248 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	e002      	b.n	800424e <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d103      	bne.n	8004262 <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	619a      	str	r2, [r3, #24]
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  }


  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004274:	d103      	bne.n	800427e <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	61da      	str	r2, [r3, #28]
 800427c:	e002      	b.n	8004284 <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_RCC_GetOscConfig+0x100>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000

080042ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	220f      	movs	r2, #15
 80042ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042bc:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <HAL_RCC_GetClockConfig+0x58>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0203 	and.w	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <HAL_RCC_GetClockConfig+0x58>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_RCC_GetClockConfig+0x58>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <HAL_RCC_GetClockConfig+0x58>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	08db      	lsrs	r3, r3, #3
 80042e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCC_GetClockConfig+0x5c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	d104      	bne.n	8004326 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800431c:	f000 f828 	bl	8004370 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004322:	2280      	movs	r2, #128	@ 0x80
 8004324:	701a      	strb	r2, [r3, #0]
  }
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	4002100a 	.word	0x4002100a

08004334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <RCC_Delay+0x34>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <RCC_Delay+0x38>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a5b      	lsrs	r3, r3, #9
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004350:	bf00      	nop
  }
  while (Delay --);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	60fa      	str	r2, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f9      	bne.n	8004350 <RCC_Delay+0x1c>
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	20000008 	.word	0x20000008
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d07d      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004398:	2300      	movs	r3, #0
 800439a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439c:	4b4f      	ldr	r3, [pc, #316]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10d      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4a4b      	ldr	r2, [pc, #300]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b2:	61d3      	str	r3, [r2, #28]
 80043b4:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c4:	4b46      	ldr	r3, [pc, #280]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d118      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d0:	4b43      	ldr	r3, [pc, #268]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a42      	ldr	r2, [pc, #264]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043dc:	f7fc fb2a 	bl	8000a34 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	e008      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e4:	f7fc fb26 	bl	8000a34 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e06d      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	4b3a      	ldr	r3, [pc, #232]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004402:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d027      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004420:	4b2e      	ldr	r3, [pc, #184]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004428:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442a:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004430:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004436:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d014      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fc faf5 	bl	8000a34 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fc faf1 	bl	8000a34 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e036      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ee      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004470:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4917      	ldr	r1, [pc, #92]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	4313      	orrs	r3, r2
 8004480:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4a13      	ldr	r2, [pc, #76]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004492:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a0:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	490b      	ldr	r1, [pc, #44]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044be:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4904      	ldr	r1, [pc, #16]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40007000 	.word	0x40007000
 80044e4:	42420440 	.word	0x42420440

080044e8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t srcclk = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	60fb      	str	r3, [r7, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f043 0202 	orr.w	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 8004516:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40021000 	.word	0x40021000

08004548 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b10      	cmp	r3, #16
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b10      	cmp	r3, #16
 800456e:	f200 808a 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d045      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d075      	beq.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800457e:	e082      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004580:	4b46      	ldr	r3, [pc, #280]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004586:	4b45      	ldr	r3, [pc, #276]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d07b      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	4a41      	ldr	r2, [pc, #260]	@ (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
 800459e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d015      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045aa:	4b3c      	ldr	r3, [pc, #240]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0c5b      	lsrs	r3, r3, #17
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045c4:	4a38      	ldr	r2, [pc, #224]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4a34      	ldr	r2, [pc, #208]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ec:	d102      	bne.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	61bb      	str	r3, [r7, #24]
      break;
 80045f2:	e04a      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4a2d      	ldr	r2, [pc, #180]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	61bb      	str	r3, [r7, #24]
      break;
 8004602:	e042      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004614:	d108      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e01f      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800462e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004632:	d109      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004640:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e00f      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004652:	d11c      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004654:	4b11      	ldr	r3, [pc, #68]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d016      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004660:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004664:	61bb      	str	r3, [r7, #24]
      break;
 8004666:	e012      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004668:	e011      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800466a:	f7ff fd89 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0b9b      	lsrs	r3, r3, #14
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	3301      	adds	r3, #1
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
      break;
 8004684:	e004      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800468e:	bf00      	nop
    }
  }
  return (frequency);
 8004690:	69bb      	ldr	r3, [r7, #24]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	08005b9c 	.word	0x08005b9c
 80046a4:	08005bac 	.word	0x08005bac
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	003d0900 	.word	0x003d0900
 80046b0:	aaaaaaab 	.word	0xaaaaaaab

080046b4 <exit>:
 80046b4:	b508      	push	{r3, lr}
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <exit+0x1c>)
 80046b8:	4604      	mov	r4, r0
 80046ba:	b113      	cbz	r3, 80046c2 <exit+0xe>
 80046bc:	2100      	movs	r1, #0
 80046be:	f3af 8000 	nop.w
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <exit+0x20>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b103      	cbz	r3, 80046ca <exit+0x16>
 80046c8:	4798      	blx	r3
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7fb ff7d 	bl	80005ca <_exit>
 80046d0:	00000000 	.word	0x00000000
 80046d4:	200001f8 	.word	0x200001f8

080046d8 <__sflush_r>:
 80046d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	0716      	lsls	r6, r2, #28
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	d454      	bmi.n	8004790 <__sflush_r+0xb8>
 80046e6:	684b      	ldr	r3, [r1, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dc02      	bgt.n	80046f2 <__sflush_r+0x1a>
 80046ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd48      	ble.n	8004784 <__sflush_r+0xac>
 80046f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	d045      	beq.n	8004784 <__sflush_r+0xac>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046fe:	682f      	ldr	r7, [r5, #0]
 8004700:	6a21      	ldr	r1, [r4, #32]
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	d030      	beq.n	8004768 <__sflush_r+0x90>
 8004706:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	0759      	lsls	r1, r3, #29
 800470c:	d505      	bpl.n	800471a <__sflush_r+0x42>
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004714:	b10b      	cbz	r3, 800471a <__sflush_r+0x42>
 8004716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	2300      	movs	r3, #0
 800471c:	4628      	mov	r0, r5
 800471e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004720:	6a21      	ldr	r1, [r4, #32]
 8004722:	47b0      	blx	r6
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	d106      	bne.n	8004738 <__sflush_r+0x60>
 800472a:	6829      	ldr	r1, [r5, #0]
 800472c:	291d      	cmp	r1, #29
 800472e:	d82b      	bhi.n	8004788 <__sflush_r+0xb0>
 8004730:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <__sflush_r+0xfc>)
 8004732:	40ca      	lsrs	r2, r1
 8004734:	07d6      	lsls	r6, r2, #31
 8004736:	d527      	bpl.n	8004788 <__sflush_r+0xb0>
 8004738:	2200      	movs	r2, #0
 800473a:	6062      	str	r2, [r4, #4]
 800473c:	6922      	ldr	r2, [r4, #16]
 800473e:	04d9      	lsls	r1, r3, #19
 8004740:	6022      	str	r2, [r4, #0]
 8004742:	d504      	bpl.n	800474e <__sflush_r+0x76>
 8004744:	1c42      	adds	r2, r0, #1
 8004746:	d101      	bne.n	800474c <__sflush_r+0x74>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b903      	cbnz	r3, 800474e <__sflush_r+0x76>
 800474c:	6560      	str	r0, [r4, #84]	@ 0x54
 800474e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004750:	602f      	str	r7, [r5, #0]
 8004752:	b1b9      	cbz	r1, 8004784 <__sflush_r+0xac>
 8004754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004758:	4299      	cmp	r1, r3
 800475a:	d002      	beq.n	8004762 <__sflush_r+0x8a>
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fb07 	bl	8004d70 <_free_r>
 8004762:	2300      	movs	r3, #0
 8004764:	6363      	str	r3, [r4, #52]	@ 0x34
 8004766:	e00d      	b.n	8004784 <__sflush_r+0xac>
 8004768:	2301      	movs	r3, #1
 800476a:	4628      	mov	r0, r5
 800476c:	47b0      	blx	r6
 800476e:	4602      	mov	r2, r0
 8004770:	1c50      	adds	r0, r2, #1
 8004772:	d1c9      	bne.n	8004708 <__sflush_r+0x30>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0c6      	beq.n	8004708 <__sflush_r+0x30>
 800477a:	2b1d      	cmp	r3, #29
 800477c:	d001      	beq.n	8004782 <__sflush_r+0xaa>
 800477e:	2b16      	cmp	r3, #22
 8004780:	d11d      	bne.n	80047be <__sflush_r+0xe6>
 8004782:	602f      	str	r7, [r5, #0]
 8004784:	2000      	movs	r0, #0
 8004786:	e021      	b.n	80047cc <__sflush_r+0xf4>
 8004788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478c:	b21b      	sxth	r3, r3
 800478e:	e01a      	b.n	80047c6 <__sflush_r+0xee>
 8004790:	690f      	ldr	r7, [r1, #16]
 8004792:	2f00      	cmp	r7, #0
 8004794:	d0f6      	beq.n	8004784 <__sflush_r+0xac>
 8004796:	0793      	lsls	r3, r2, #30
 8004798:	bf18      	it	ne
 800479a:	2300      	movne	r3, #0
 800479c:	680e      	ldr	r6, [r1, #0]
 800479e:	bf08      	it	eq
 80047a0:	694b      	ldreq	r3, [r1, #20]
 80047a2:	1bf6      	subs	r6, r6, r7
 80047a4:	600f      	str	r7, [r1, #0]
 80047a6:	608b      	str	r3, [r1, #8]
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	ddeb      	ble.n	8004784 <__sflush_r+0xac>
 80047ac:	4633      	mov	r3, r6
 80047ae:	463a      	mov	r2, r7
 80047b0:	4628      	mov	r0, r5
 80047b2:	6a21      	ldr	r1, [r4, #32]
 80047b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80047b8:	47e0      	blx	ip
 80047ba:	2800      	cmp	r0, #0
 80047bc:	dc07      	bgt.n	80047ce <__sflush_r+0xf6>
 80047be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ce:	4407      	add	r7, r0
 80047d0:	1a36      	subs	r6, r6, r0
 80047d2:	e7e9      	b.n	80047a8 <__sflush_r+0xd0>
 80047d4:	20400001 	.word	0x20400001

080047d8 <_fflush_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	4605      	mov	r5, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b913      	cbnz	r3, 80047e8 <_fflush_r+0x10>
 80047e2:	2500      	movs	r5, #0
 80047e4:	4628      	mov	r0, r5
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	b118      	cbz	r0, 80047f2 <_fflush_r+0x1a>
 80047ea:	6a03      	ldr	r3, [r0, #32]
 80047ec:	b90b      	cbnz	r3, 80047f2 <_fflush_r+0x1a>
 80047ee:	f000 f925 	bl	8004a3c <__sinit>
 80047f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f3      	beq.n	80047e2 <_fflush_r+0xa>
 80047fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047fc:	07d0      	lsls	r0, r2, #31
 80047fe:	d404      	bmi.n	800480a <_fflush_r+0x32>
 8004800:	0599      	lsls	r1, r3, #22
 8004802:	d402      	bmi.n	800480a <_fflush_r+0x32>
 8004804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004806:	f000 faac 	bl	8004d62 <__retarget_lock_acquire_recursive>
 800480a:	4628      	mov	r0, r5
 800480c:	4621      	mov	r1, r4
 800480e:	f7ff ff63 	bl	80046d8 <__sflush_r>
 8004812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004814:	4605      	mov	r5, r0
 8004816:	07da      	lsls	r2, r3, #31
 8004818:	d4e4      	bmi.n	80047e4 <_fflush_r+0xc>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	059b      	lsls	r3, r3, #22
 800481e:	d4e1      	bmi.n	80047e4 <_fflush_r+0xc>
 8004820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004822:	f000 faa4 	bl	8004d6e <__retarget_lock_release_recursive>
 8004826:	e7dd      	b.n	80047e4 <_fflush_r+0xc>

08004828 <fflush>:
 8004828:	4601      	mov	r1, r0
 800482a:	b920      	cbnz	r0, 8004836 <fflush+0xe>
 800482c:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <fflush+0x18>)
 800482e:	4905      	ldr	r1, [pc, #20]	@ (8004844 <fflush+0x1c>)
 8004830:	4805      	ldr	r0, [pc, #20]	@ (8004848 <fflush+0x20>)
 8004832:	f000 b937 	b.w	8004aa4 <_fwalk_sglue>
 8004836:	4b05      	ldr	r3, [pc, #20]	@ (800484c <fflush+0x24>)
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f7ff bfcd 	b.w	80047d8 <_fflush_r>
 800483e:	bf00      	nop
 8004840:	20000014 	.word	0x20000014
 8004844:	080047d9 	.word	0x080047d9
 8004848:	20000024 	.word	0x20000024
 800484c:	20000020 	.word	0x20000020

08004850 <std>:
 8004850:	2300      	movs	r3, #0
 8004852:	b510      	push	{r4, lr}
 8004854:	4604      	mov	r4, r0
 8004856:	e9c0 3300 	strd	r3, r3, [r0]
 800485a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800485e:	6083      	str	r3, [r0, #8]
 8004860:	8181      	strh	r1, [r0, #12]
 8004862:	6643      	str	r3, [r0, #100]	@ 0x64
 8004864:	81c2      	strh	r2, [r0, #14]
 8004866:	6183      	str	r3, [r0, #24]
 8004868:	4619      	mov	r1, r3
 800486a:	2208      	movs	r2, #8
 800486c:	305c      	adds	r0, #92	@ 0x5c
 800486e:	f000 f99c 	bl	8004baa <memset>
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <std+0x58>)
 8004874:	6224      	str	r4, [r4, #32]
 8004876:	6263      	str	r3, [r4, #36]	@ 0x24
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <std+0x5c>)
 800487a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <std+0x60>)
 800487e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <std+0x64>)
 8004882:	6323      	str	r3, [r4, #48]	@ 0x30
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <std+0x68>)
 8004886:	429c      	cmp	r4, r3
 8004888:	d006      	beq.n	8004898 <std+0x48>
 800488a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800488e:	4294      	cmp	r4, r2
 8004890:	d002      	beq.n	8004898 <std+0x48>
 8004892:	33d0      	adds	r3, #208	@ 0xd0
 8004894:	429c      	cmp	r4, r3
 8004896:	d105      	bne.n	80048a4 <std+0x54>
 8004898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a0:	f000 ba5b 	b.w	8004d5a <__retarget_lock_init_recursive>
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	08004b21 	.word	0x08004b21
 80048ac:	08004b47 	.word	0x08004b47
 80048b0:	08004b7f 	.word	0x08004b7f
 80048b4:	08004ba3 	.word	0x08004ba3
 80048b8:	200000c0 	.word	0x200000c0

080048bc <stdio_exit_handler>:
 80048bc:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <stdio_exit_handler+0xc>)
 80048be:	4903      	ldr	r1, [pc, #12]	@ (80048cc <stdio_exit_handler+0x10>)
 80048c0:	4803      	ldr	r0, [pc, #12]	@ (80048d0 <stdio_exit_handler+0x14>)
 80048c2:	f000 b8ef 	b.w	8004aa4 <_fwalk_sglue>
 80048c6:	bf00      	nop
 80048c8:	20000014 	.word	0x20000014
 80048cc:	080047d9 	.word	0x080047d9
 80048d0:	20000024 	.word	0x20000024

080048d4 <cleanup_stdio>:
 80048d4:	6841      	ldr	r1, [r0, #4]
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <cleanup_stdio+0x34>)
 80048d8:	b510      	push	{r4, lr}
 80048da:	4299      	cmp	r1, r3
 80048dc:	4604      	mov	r4, r0
 80048de:	d001      	beq.n	80048e4 <cleanup_stdio+0x10>
 80048e0:	f7ff ff7a 	bl	80047d8 <_fflush_r>
 80048e4:	68a1      	ldr	r1, [r4, #8]
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <cleanup_stdio+0x38>)
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <cleanup_stdio+0x1e>
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7ff ff73 	bl	80047d8 <_fflush_r>
 80048f2:	68e1      	ldr	r1, [r4, #12]
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <cleanup_stdio+0x3c>)
 80048f6:	4299      	cmp	r1, r3
 80048f8:	d004      	beq.n	8004904 <cleanup_stdio+0x30>
 80048fa:	4620      	mov	r0, r4
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f7ff bf6a 	b.w	80047d8 <_fflush_r>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	200000c0 	.word	0x200000c0
 800490c:	20000128 	.word	0x20000128
 8004910:	20000190 	.word	0x20000190

08004914 <__fp_lock>:
 8004914:	b508      	push	{r3, lr}
 8004916:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004918:	07da      	lsls	r2, r3, #31
 800491a:	d405      	bmi.n	8004928 <__fp_lock+0x14>
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	059b      	lsls	r3, r3, #22
 8004920:	d402      	bmi.n	8004928 <__fp_lock+0x14>
 8004922:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8004924:	f000 fa1d 	bl	8004d62 <__retarget_lock_acquire_recursive>
 8004928:	2000      	movs	r0, #0
 800492a:	bd08      	pop	{r3, pc}

0800492c <__fp_unlock>:
 800492c:	b508      	push	{r3, lr}
 800492e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004930:	07da      	lsls	r2, r3, #31
 8004932:	d405      	bmi.n	8004940 <__fp_unlock+0x14>
 8004934:	898b      	ldrh	r3, [r1, #12]
 8004936:	059b      	lsls	r3, r3, #22
 8004938:	d402      	bmi.n	8004940 <__fp_unlock+0x14>
 800493a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800493c:	f000 fa17 	bl	8004d6e <__retarget_lock_release_recursive>
 8004940:	2000      	movs	r0, #0
 8004942:	bd08      	pop	{r3, pc}

08004944 <global_stdio_init.part.0>:
 8004944:	b510      	push	{r4, lr}
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <global_stdio_init.part.0+0x30>)
 8004948:	4c0b      	ldr	r4, [pc, #44]	@ (8004978 <global_stdio_init.part.0+0x34>)
 800494a:	4a0c      	ldr	r2, [pc, #48]	@ (800497c <global_stdio_init.part.0+0x38>)
 800494c:	4620      	mov	r0, r4
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	2104      	movs	r1, #4
 8004952:	2200      	movs	r2, #0
 8004954:	f7ff ff7c 	bl	8004850 <std>
 8004958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800495c:	2201      	movs	r2, #1
 800495e:	2109      	movs	r1, #9
 8004960:	f7ff ff76 	bl	8004850 <std>
 8004964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004968:	2202      	movs	r2, #2
 800496a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496e:	2112      	movs	r1, #18
 8004970:	f7ff bf6e 	b.w	8004850 <std>
 8004974:	200001f8 	.word	0x200001f8
 8004978:	200000c0 	.word	0x200000c0
 800497c:	080048bd 	.word	0x080048bd

08004980 <__sfp_lock_acquire>:
 8004980:	4801      	ldr	r0, [pc, #4]	@ (8004988 <__sfp_lock_acquire+0x8>)
 8004982:	f000 b9ee 	b.w	8004d62 <__retarget_lock_acquire_recursive>
 8004986:	bf00      	nop
 8004988:	20000207 	.word	0x20000207

0800498c <__sfp_lock_release>:
 800498c:	4801      	ldr	r0, [pc, #4]	@ (8004994 <__sfp_lock_release+0x8>)
 800498e:	f000 b9ee 	b.w	8004d6e <__retarget_lock_release_recursive>
 8004992:	bf00      	nop
 8004994:	20000207 	.word	0x20000207

08004998 <__sfp>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	4607      	mov	r7, r0
 800499c:	f7ff fff0 	bl	8004980 <__sfp_lock_acquire>
 80049a0:	4b23      	ldr	r3, [pc, #140]	@ (8004a30 <__sfp+0x98>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b90b      	cbnz	r3, 80049aa <__sfp+0x12>
 80049a6:	f7ff ffcd 	bl	8004944 <global_stdio_init.part.0>
 80049aa:	4e22      	ldr	r6, [pc, #136]	@ (8004a34 <__sfp+0x9c>)
 80049ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	d50f      	bpl.n	80049d4 <__sfp+0x3c>
 80049b4:	6835      	ldr	r5, [r6, #0]
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	d137      	bne.n	8004a2a <__sfp+0x92>
 80049ba:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80049be:	4638      	mov	r0, r7
 80049c0:	f000 fa40 	bl	8004e44 <_malloc_r>
 80049c4:	4604      	mov	r4, r0
 80049c6:	bb28      	cbnz	r0, 8004a14 <__sfp+0x7c>
 80049c8:	6030      	str	r0, [r6, #0]
 80049ca:	f7ff ffdf 	bl	800498c <__sfp_lock_release>
 80049ce:	230c      	movs	r3, #12
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	e01b      	b.n	8004a0c <__sfp+0x74>
 80049d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049d8:	b9d5      	cbnz	r5, 8004a10 <__sfp+0x78>
 80049da:	4b17      	ldr	r3, [pc, #92]	@ (8004a38 <__sfp+0xa0>)
 80049dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049e0:	60e3      	str	r3, [r4, #12]
 80049e2:	6665      	str	r5, [r4, #100]	@ 0x64
 80049e4:	f000 f9b9 	bl	8004d5a <__retarget_lock_init_recursive>
 80049e8:	f7ff ffd0 	bl	800498c <__sfp_lock_release>
 80049ec:	2208      	movs	r2, #8
 80049ee:	4629      	mov	r1, r5
 80049f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049f8:	6025      	str	r5, [r4, #0]
 80049fa:	61a5      	str	r5, [r4, #24]
 80049fc:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8004a00:	f000 f8d3 	bl	8004baa <memset>
 8004a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8004a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a10:	3468      	adds	r4, #104	@ 0x68
 8004a12:	e7cd      	b.n	80049b0 <__sfp+0x18>
 8004a14:	2304      	movs	r3, #4
 8004a16:	6005      	str	r5, [r0, #0]
 8004a18:	6043      	str	r3, [r0, #4]
 8004a1a:	300c      	adds	r0, #12
 8004a1c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004a20:	4629      	mov	r1, r5
 8004a22:	60a0      	str	r0, [r4, #8]
 8004a24:	f000 f8c1 	bl	8004baa <memset>
 8004a28:	6034      	str	r4, [r6, #0]
 8004a2a:	6836      	ldr	r6, [r6, #0]
 8004a2c:	e7be      	b.n	80049ac <__sfp+0x14>
 8004a2e:	bf00      	nop
 8004a30:	200001f8 	.word	0x200001f8
 8004a34:	20000014 	.word	0x20000014
 8004a38:	ffff0001 	.word	0xffff0001

08004a3c <__sinit>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4604      	mov	r4, r0
 8004a40:	f7ff ff9e 	bl	8004980 <__sfp_lock_acquire>
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	b11b      	cbz	r3, 8004a50 <__sinit+0x14>
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	f7ff bf9e 	b.w	800498c <__sfp_lock_release>
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__sinit+0x28>)
 8004a52:	6223      	str	r3, [r4, #32]
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <__sinit+0x2c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f5      	bne.n	8004a48 <__sinit+0xc>
 8004a5c:	f7ff ff72 	bl	8004944 <global_stdio_init.part.0>
 8004a60:	e7f2      	b.n	8004a48 <__sinit+0xc>
 8004a62:	bf00      	nop
 8004a64:	080048d5 	.word	0x080048d5
 8004a68:	200001f8 	.word	0x200001f8

08004a6c <__fp_lock_all>:
 8004a6c:	b508      	push	{r3, lr}
 8004a6e:	f7ff ff87 	bl	8004980 <__sfp_lock_acquire>
 8004a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a76:	2000      	movs	r0, #0
 8004a78:	4a01      	ldr	r2, [pc, #4]	@ (8004a80 <__fp_lock_all+0x14>)
 8004a7a:	4902      	ldr	r1, [pc, #8]	@ (8004a84 <__fp_lock_all+0x18>)
 8004a7c:	f000 b812 	b.w	8004aa4 <_fwalk_sglue>
 8004a80:	20000014 	.word	0x20000014
 8004a84:	08004915 	.word	0x08004915

08004a88 <__fp_unlock_all>:
 8004a88:	b508      	push	{r3, lr}
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	4a03      	ldr	r2, [pc, #12]	@ (8004a9c <__fp_unlock_all+0x14>)
 8004a8e:	4904      	ldr	r1, [pc, #16]	@ (8004aa0 <__fp_unlock_all+0x18>)
 8004a90:	f000 f808 	bl	8004aa4 <_fwalk_sglue>
 8004a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a98:	f7ff bf78 	b.w	800498c <__sfp_lock_release>
 8004a9c:	20000014 	.word	0x20000014
 8004aa0:	0800492d 	.word	0x0800492d

08004aa4 <_fwalk_sglue>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	4688      	mov	r8, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab8:	d505      	bpl.n	8004ac6 <_fwalk_sglue+0x22>
 8004aba:	6824      	ldr	r4, [r4, #0]
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	d1f7      	bne.n	8004ab0 <_fwalk_sglue+0xc>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d907      	bls.n	8004adc <_fwalk_sglue+0x38>
 8004acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	d003      	beq.n	8004adc <_fwalk_sglue+0x38>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	47c0      	blx	r8
 8004ada:	4306      	orrs	r6, r0
 8004adc:	3568      	adds	r5, #104	@ 0x68
 8004ade:	e7e9      	b.n	8004ab4 <_fwalk_sglue+0x10>

08004ae0 <_iprintf_r>:
 8004ae0:	b40e      	push	{r1, r2, r3}
 8004ae2:	b503      	push	{r0, r1, lr}
 8004ae4:	ab03      	add	r3, sp, #12
 8004ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aea:	6881      	ldr	r1, [r0, #8]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	f000 fa69 	bl	8004fc4 <_vfiprintf_r>
 8004af2:	b002      	add	sp, #8
 8004af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af8:	b003      	add	sp, #12
 8004afa:	4770      	bx	lr

08004afc <iprintf>:
 8004afc:	b40f      	push	{r0, r1, r2, r3}
 8004afe:	b507      	push	{r0, r1, r2, lr}
 8004b00:	4906      	ldr	r1, [pc, #24]	@ (8004b1c <iprintf+0x20>)
 8004b02:	ab04      	add	r3, sp, #16
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b0a:	6881      	ldr	r1, [r0, #8]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	f000 fa59 	bl	8004fc4 <_vfiprintf_r>
 8004b12:	b003      	add	sp, #12
 8004b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b18:	b004      	add	sp, #16
 8004b1a:	4770      	bx	lr
 8004b1c:	20000020 	.word	0x20000020

08004b20 <__sread>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	460c      	mov	r4, r1
 8004b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b28:	f000 f8c8 	bl	8004cbc <_read_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	bfab      	itete	ge
 8004b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b32:	89a3      	ldrhlt	r3, [r4, #12]
 8004b34:	181b      	addge	r3, r3, r0
 8004b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b3a:	bfac      	ite	ge
 8004b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b3e:	81a3      	strhlt	r3, [r4, #12]
 8004b40:	bd10      	pop	{r4, pc}

08004b42 <__seofread>:
 8004b42:	2000      	movs	r0, #0
 8004b44:	4770      	bx	lr

08004b46 <__swrite>:
 8004b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	461f      	mov	r7, r3
 8004b4c:	898b      	ldrh	r3, [r1, #12]
 8004b4e:	4605      	mov	r5, r0
 8004b50:	05db      	lsls	r3, r3, #23
 8004b52:	460c      	mov	r4, r1
 8004b54:	4616      	mov	r6, r2
 8004b56:	d505      	bpl.n	8004b64 <__swrite+0x1e>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b60:	f000 f89a 	bl	8004c98 <_lseek_r>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	4632      	mov	r2, r6
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	463b      	mov	r3, r7
 8004b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	f000 b8b1 	b.w	8004ce0 <_write_r>

08004b7e <__sseek>:
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	460c      	mov	r4, r1
 8004b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b86:	f000 f887 	bl	8004c98 <_lseek_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	bf15      	itete	ne
 8004b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b9a:	81a3      	strheq	r3, [r4, #12]
 8004b9c:	bf18      	it	ne
 8004b9e:	81a3      	strhne	r3, [r4, #12]
 8004ba0:	bd10      	pop	{r4, pc}

08004ba2 <__sclose>:
 8004ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba6:	f000 b809 	b.w	8004bbc <_close_r>

08004baa <memset>:
 8004baa:	4603      	mov	r3, r0
 8004bac:	4402      	add	r2, r0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d100      	bne.n	8004bb4 <memset+0xa>
 8004bb2:	4770      	bx	lr
 8004bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb8:	e7f9      	b.n	8004bae <memset+0x4>
	...

08004bbc <_close_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4d05      	ldr	r5, [pc, #20]	@ (8004bd8 <_close_r+0x1c>)
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fb fd43 	bl	8000652 <_close>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_close_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_close_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200001fc 	.word	0x200001fc

08004bdc <_reclaim_reent>:
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c94 <_reclaim_reent+0xb8>)
 8004bde:	b570      	push	{r4, r5, r6, lr}
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4604      	mov	r4, r0
 8004be4:	4283      	cmp	r3, r0
 8004be6:	d053      	beq.n	8004c90 <_reclaim_reent+0xb4>
 8004be8:	69c3      	ldr	r3, [r0, #28]
 8004bea:	b31b      	cbz	r3, 8004c34 <_reclaim_reent+0x58>
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	b163      	cbz	r3, 8004c0a <_reclaim_reent+0x2e>
 8004bf0:	2500      	movs	r5, #0
 8004bf2:	69e3      	ldr	r3, [r4, #28]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	5959      	ldr	r1, [r3, r5]
 8004bf8:	b9b1      	cbnz	r1, 8004c28 <_reclaim_reent+0x4c>
 8004bfa:	3504      	adds	r5, #4
 8004bfc:	2d80      	cmp	r5, #128	@ 0x80
 8004bfe:	d1f8      	bne.n	8004bf2 <_reclaim_reent+0x16>
 8004c00:	69e3      	ldr	r3, [r4, #28]
 8004c02:	4620      	mov	r0, r4
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	f000 f8b3 	bl	8004d70 <_free_r>
 8004c0a:	69e3      	ldr	r3, [r4, #28]
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	b111      	cbz	r1, 8004c16 <_reclaim_reent+0x3a>
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f8ad 	bl	8004d70 <_free_r>
 8004c16:	69e3      	ldr	r3, [r4, #28]
 8004c18:	689d      	ldr	r5, [r3, #8]
 8004c1a:	b15d      	cbz	r5, 8004c34 <_reclaim_reent+0x58>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4620      	mov	r0, r4
 8004c20:	682d      	ldr	r5, [r5, #0]
 8004c22:	f000 f8a5 	bl	8004d70 <_free_r>
 8004c26:	e7f8      	b.n	8004c1a <_reclaim_reent+0x3e>
 8004c28:	680e      	ldr	r6, [r1, #0]
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 f8a0 	bl	8004d70 <_free_r>
 8004c30:	4631      	mov	r1, r6
 8004c32:	e7e1      	b.n	8004bf8 <_reclaim_reent+0x1c>
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	b111      	cbz	r1, 8004c3e <_reclaim_reent+0x62>
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f899 	bl	8004d70 <_free_r>
 8004c3e:	69e1      	ldr	r1, [r4, #28]
 8004c40:	b111      	cbz	r1, 8004c48 <_reclaim_reent+0x6c>
 8004c42:	4620      	mov	r0, r4
 8004c44:	f000 f894 	bl	8004d70 <_free_r>
 8004c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c4a:	b111      	cbz	r1, 8004c52 <_reclaim_reent+0x76>
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 f88f 	bl	8004d70 <_free_r>
 8004c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c54:	b111      	cbz	r1, 8004c5c <_reclaim_reent+0x80>
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 f88a 	bl	8004d70 <_free_r>
 8004c5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004c5e:	b111      	cbz	r1, 8004c66 <_reclaim_reent+0x8a>
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f885 	bl	8004d70 <_free_r>
 8004c66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004c68:	b111      	cbz	r1, 8004c70 <_reclaim_reent+0x94>
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f880 	bl	8004d70 <_free_r>
 8004c70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004c72:	b111      	cbz	r1, 8004c7a <_reclaim_reent+0x9e>
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 f87b 	bl	8004d70 <_free_r>
 8004c7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c7c:	b111      	cbz	r1, 8004c84 <_reclaim_reent+0xa8>
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 f876 	bl	8004d70 <_free_r>
 8004c84:	6a23      	ldr	r3, [r4, #32]
 8004c86:	b11b      	cbz	r3, 8004c90 <_reclaim_reent+0xb4>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c8e:	4718      	bx	r3
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	bf00      	nop
 8004c94:	20000020 	.word	0x20000020

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4d05      	ldr	r5, [pc, #20]	@ (8004cb8 <_lseek_r+0x20>)
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fb fcf7 	bl	800069a <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200001fc 	.word	0x200001fc

08004cbc <_read_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4d05      	ldr	r5, [pc, #20]	@ (8004cdc <_read_r+0x20>)
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fb fc88 	bl	80005e0 <_read>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_read_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_read_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200001fc 	.word	0x200001fc

08004ce0 <_write_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4d05      	ldr	r5, [pc, #20]	@ (8004d00 <_write_r+0x20>)
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fb fc93 	bl	800061a <_write>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_write_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_write_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200001fc 	.word	0x200001fc

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	@ (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000020 	.word	0x20000020

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	2600      	movs	r6, #0
 8004d14:	4d0c      	ldr	r5, [pc, #48]	@ (8004d48 <__libc_init_array+0x38>)
 8004d16:	4c0d      	ldr	r4, [pc, #52]	@ (8004d4c <__libc_init_array+0x3c>)
 8004d18:	1b64      	subs	r4, r4, r5
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	f000 feec 	bl	8005afc <_init>
 8004d24:	2600      	movs	r6, #0
 8004d26:	4d0a      	ldr	r5, [pc, #40]	@ (8004d50 <__libc_init_array+0x40>)
 8004d28:	4c0a      	ldr	r4, [pc, #40]	@ (8004d54 <__libc_init_array+0x44>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	08005bec 	.word	0x08005bec
 8004d4c:	08005bec 	.word	0x08005bec
 8004d50:	08005bec 	.word	0x08005bec
 8004d54:	08005bf0 	.word	0x08005bf0

08004d58 <__retarget_lock_init>:
 8004d58:	4770      	bx	lr

08004d5a <__retarget_lock_init_recursive>:
 8004d5a:	4770      	bx	lr

08004d5c <__retarget_lock_close>:
 8004d5c:	4770      	bx	lr

08004d5e <__retarget_lock_close_recursive>:
 8004d5e:	4770      	bx	lr

08004d60 <__retarget_lock_acquire>:
 8004d60:	4770      	bx	lr

08004d62 <__retarget_lock_acquire_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <__retarget_lock_try_acquire>:
 8004d64:	2001      	movs	r0, #1
 8004d66:	4770      	bx	lr

08004d68 <__retarget_lock_try_acquire_recursive>:
 8004d68:	2001      	movs	r0, #1
 8004d6a:	4770      	bx	lr

08004d6c <__retarget_lock_release>:
 8004d6c:	4770      	bx	lr

08004d6e <__retarget_lock_release_recursive>:
 8004d6e:	4770      	bx	lr

08004d70 <_free_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d040      	beq.n	8004dfa <_free_r+0x8a>
 8004d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7c:	1f0c      	subs	r4, r1, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfb8      	it	lt
 8004d82:	18e4      	addlt	r4, r4, r3
 8004d84:	f000 f8de 	bl	8004f44 <__malloc_lock>
 8004d88:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <_free_r+0x8c>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	b933      	cbnz	r3, 8004d9c <_free_r+0x2c>
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	6014      	str	r4, [r2, #0]
 8004d92:	4628      	mov	r0, r5
 8004d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d98:	f000 b8da 	b.w	8004f50 <__malloc_unlock>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d908      	bls.n	8004db2 <_free_r+0x42>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf01      	itttt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	e7ed      	b.n	8004d8e <_free_r+0x1e>
 8004db2:	461a      	mov	r2, r3
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b10b      	cbz	r3, 8004dbc <_free_r+0x4c>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d9fa      	bls.n	8004db2 <_free_r+0x42>
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	1850      	adds	r0, r2, r1
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d10b      	bne.n	8004ddc <_free_r+0x6c>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	1850      	adds	r0, r2, r1
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	d1e0      	bne.n	8004d92 <_free_r+0x22>
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4408      	add	r0, r1
 8004dd6:	6010      	str	r0, [r2, #0]
 8004dd8:	6053      	str	r3, [r2, #4]
 8004dda:	e7da      	b.n	8004d92 <_free_r+0x22>
 8004ddc:	d902      	bls.n	8004de4 <_free_r+0x74>
 8004dde:	230c      	movs	r3, #12
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	e7d6      	b.n	8004d92 <_free_r+0x22>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1809      	addeq	r1, r1, r0
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	6054      	str	r4, [r2, #4]
 8004df8:	e7cb      	b.n	8004d92 <_free_r+0x22>
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	2000020c 	.word	0x2000020c

08004e00 <sbrk_aligned>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4e0f      	ldr	r6, [pc, #60]	@ (8004e40 <sbrk_aligned+0x40>)
 8004e04:	460c      	mov	r4, r1
 8004e06:	6831      	ldr	r1, [r6, #0]
 8004e08:	4605      	mov	r5, r0
 8004e0a:	b911      	cbnz	r1, 8004e12 <sbrk_aligned+0x12>
 8004e0c:	f000 fd8e 	bl	800592c <_sbrk_r>
 8004e10:	6030      	str	r0, [r6, #0]
 8004e12:	4621      	mov	r1, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 fd89 	bl	800592c <_sbrk_r>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	d103      	bne.n	8004e26 <sbrk_aligned+0x26>
 8004e1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e22:	4620      	mov	r0, r4
 8004e24:	bd70      	pop	{r4, r5, r6, pc}
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d0f8      	beq.n	8004e22 <sbrk_aligned+0x22>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 fd7a 	bl	800592c <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d1f2      	bne.n	8004e22 <sbrk_aligned+0x22>
 8004e3c:	e7ef      	b.n	8004e1e <sbrk_aligned+0x1e>
 8004e3e:	bf00      	nop
 8004e40:	20000208 	.word	0x20000208

08004e44 <_malloc_r>:
 8004e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e48:	1ccd      	adds	r5, r1, #3
 8004e4a:	f025 0503 	bic.w	r5, r5, #3
 8004e4e:	3508      	adds	r5, #8
 8004e50:	2d0c      	cmp	r5, #12
 8004e52:	bf38      	it	cc
 8004e54:	250c      	movcc	r5, #12
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	4606      	mov	r6, r0
 8004e5a:	db01      	blt.n	8004e60 <_malloc_r+0x1c>
 8004e5c:	42a9      	cmp	r1, r5
 8004e5e:	d904      	bls.n	8004e6a <_malloc_r+0x26>
 8004e60:	230c      	movs	r3, #12
 8004e62:	6033      	str	r3, [r6, #0]
 8004e64:	2000      	movs	r0, #0
 8004e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f40 <_malloc_r+0xfc>
 8004e6e:	f000 f869 	bl	8004f44 <__malloc_lock>
 8004e72:	f8d8 3000 	ldr.w	r3, [r8]
 8004e76:	461c      	mov	r4, r3
 8004e78:	bb44      	cbnz	r4, 8004ecc <_malloc_r+0x88>
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffbf 	bl	8004e00 <sbrk_aligned>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	4604      	mov	r4, r0
 8004e86:	d158      	bne.n	8004f3a <_malloc_r+0xf6>
 8004e88:	f8d8 4000 	ldr.w	r4, [r8]
 8004e8c:	4627      	mov	r7, r4
 8004e8e:	2f00      	cmp	r7, #0
 8004e90:	d143      	bne.n	8004f1a <_malloc_r+0xd6>
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	d04b      	beq.n	8004f2e <_malloc_r+0xea>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	4639      	mov	r1, r7
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	eb04 0903 	add.w	r9, r4, r3
 8004ea0:	f000 fd44 	bl	800592c <_sbrk_r>
 8004ea4:	4581      	cmp	r9, r0
 8004ea6:	d142      	bne.n	8004f2e <_malloc_r+0xea>
 8004ea8:	6821      	ldr	r1, [r4, #0]
 8004eaa:	4630      	mov	r0, r6
 8004eac:	1a6d      	subs	r5, r5, r1
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f7ff ffa6 	bl	8004e00 <sbrk_aligned>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d03a      	beq.n	8004f2e <_malloc_r+0xea>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	442b      	add	r3, r5
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	bb62      	cbnz	r2, 8004f20 <_malloc_r+0xdc>
 8004ec6:	f8c8 7000 	str.w	r7, [r8]
 8004eca:	e00f      	b.n	8004eec <_malloc_r+0xa8>
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	1b52      	subs	r2, r2, r5
 8004ed0:	d420      	bmi.n	8004f14 <_malloc_r+0xd0>
 8004ed2:	2a0b      	cmp	r2, #11
 8004ed4:	d917      	bls.n	8004f06 <_malloc_r+0xc2>
 8004ed6:	1961      	adds	r1, r4, r5
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	6025      	str	r5, [r4, #0]
 8004edc:	bf18      	it	ne
 8004ede:	6059      	strne	r1, [r3, #4]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	bf08      	it	eq
 8004ee4:	f8c8 1000 	streq.w	r1, [r8]
 8004ee8:	5162      	str	r2, [r4, r5]
 8004eea:	604b      	str	r3, [r1, #4]
 8004eec:	4630      	mov	r0, r6
 8004eee:	f000 f82f 	bl	8004f50 <__malloc_unlock>
 8004ef2:	f104 000b 	add.w	r0, r4, #11
 8004ef6:	1d23      	adds	r3, r4, #4
 8004ef8:	f020 0007 	bic.w	r0, r0, #7
 8004efc:	1ac2      	subs	r2, r0, r3
 8004efe:	bf1c      	itt	ne
 8004f00:	1a1b      	subne	r3, r3, r0
 8004f02:	50a3      	strne	r3, [r4, r2]
 8004f04:	e7af      	b.n	8004e66 <_malloc_r+0x22>
 8004f06:	6862      	ldr	r2, [r4, #4]
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	bf0c      	ite	eq
 8004f0c:	f8c8 2000 	streq.w	r2, [r8]
 8004f10:	605a      	strne	r2, [r3, #4]
 8004f12:	e7eb      	b.n	8004eec <_malloc_r+0xa8>
 8004f14:	4623      	mov	r3, r4
 8004f16:	6864      	ldr	r4, [r4, #4]
 8004f18:	e7ae      	b.n	8004e78 <_malloc_r+0x34>
 8004f1a:	463c      	mov	r4, r7
 8004f1c:	687f      	ldr	r7, [r7, #4]
 8004f1e:	e7b6      	b.n	8004e8e <_malloc_r+0x4a>
 8004f20:	461a      	mov	r2, r3
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d1fb      	bne.n	8004f20 <_malloc_r+0xdc>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6053      	str	r3, [r2, #4]
 8004f2c:	e7de      	b.n	8004eec <_malloc_r+0xa8>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	4630      	mov	r0, r6
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	f000 f80c 	bl	8004f50 <__malloc_unlock>
 8004f38:	e794      	b.n	8004e64 <_malloc_r+0x20>
 8004f3a:	6005      	str	r5, [r0, #0]
 8004f3c:	e7d6      	b.n	8004eec <_malloc_r+0xa8>
 8004f3e:	bf00      	nop
 8004f40:	2000020c 	.word	0x2000020c

08004f44 <__malloc_lock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	@ (8004f4c <__malloc_lock+0x8>)
 8004f46:	f7ff bf0c 	b.w	8004d62 <__retarget_lock_acquire_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	20000204 	.word	0x20000204

08004f50 <__malloc_unlock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__malloc_unlock+0x8>)
 8004f52:	f7ff bf0c 	b.w	8004d6e <__retarget_lock_release_recursive>
 8004f56:	bf00      	nop
 8004f58:	20000204 	.word	0x20000204

08004f5c <__sfputc_r>:
 8004f5c:	6893      	ldr	r3, [r2, #8]
 8004f5e:	b410      	push	{r4}
 8004f60:	3b01      	subs	r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	6093      	str	r3, [r2, #8]
 8004f66:	da07      	bge.n	8004f78 <__sfputc_r+0x1c>
 8004f68:	6994      	ldr	r4, [r2, #24]
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	db01      	blt.n	8004f72 <__sfputc_r+0x16>
 8004f6e:	290a      	cmp	r1, #10
 8004f70:	d102      	bne.n	8004f78 <__sfputc_r+0x1c>
 8004f72:	bc10      	pop	{r4}
 8004f74:	f000 bc24 	b.w	80057c0 <__swbuf_r>
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	1c58      	adds	r0, r3, #1
 8004f7c:	6010      	str	r0, [r2, #0]
 8004f7e:	7019      	strb	r1, [r3, #0]
 8004f80:	4608      	mov	r0, r1
 8004f82:	bc10      	pop	{r4}
 8004f84:	4770      	bx	lr

08004f86 <__sfputs_r>:
 8004f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f88:	4606      	mov	r6, r0
 8004f8a:	460f      	mov	r7, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	18d5      	adds	r5, r2, r3
 8004f90:	42ac      	cmp	r4, r5
 8004f92:	d101      	bne.n	8004f98 <__sfputs_r+0x12>
 8004f94:	2000      	movs	r0, #0
 8004f96:	e007      	b.n	8004fa8 <__sfputs_r+0x22>
 8004f98:	463a      	mov	r2, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa0:	f7ff ffdc 	bl	8004f5c <__sfputc_r>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d1f3      	bne.n	8004f90 <__sfputs_r+0xa>
 8004fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004faa <__sprint_r>:
 8004faa:	6893      	ldr	r3, [r2, #8]
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4614      	mov	r4, r2
 8004fb0:	b133      	cbz	r3, 8004fc0 <__sprint_r+0x16>
 8004fb2:	f000 fab9 	bl	8005528 <__sfvwrite_r>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60a3      	str	r3, [r4, #8]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	bd10      	pop	{r4, pc}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	e7fa      	b.n	8004fba <__sprint_r+0x10>

08004fc4 <_vfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	460d      	mov	r5, r1
 8004fca:	4614      	mov	r4, r2
 8004fcc:	4698      	mov	r8, r3
 8004fce:	4606      	mov	r6, r0
 8004fd0:	b09d      	sub	sp, #116	@ 0x74
 8004fd2:	b118      	cbz	r0, 8004fdc <_vfiprintf_r+0x18>
 8004fd4:	6a03      	ldr	r3, [r0, #32]
 8004fd6:	b90b      	cbnz	r3, 8004fdc <_vfiprintf_r+0x18>
 8004fd8:	f7ff fd30 	bl	8004a3c <__sinit>
 8004fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fde:	07d9      	lsls	r1, r3, #31
 8004fe0:	d405      	bmi.n	8004fee <_vfiprintf_r+0x2a>
 8004fe2:	89ab      	ldrh	r3, [r5, #12]
 8004fe4:	059a      	lsls	r2, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_vfiprintf_r+0x2a>
 8004fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fea:	f7ff feba 	bl	8004d62 <__retarget_lock_acquire_recursive>
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	d501      	bpl.n	8004ff8 <_vfiprintf_r+0x34>
 8004ff4:	692b      	ldr	r3, [r5, #16]
 8004ff6:	b99b      	cbnz	r3, 8005020 <_vfiprintf_r+0x5c>
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f000 fc26 	bl	800584c <__swsetup_r>
 8005000:	b170      	cbz	r0, 8005020 <_vfiprintf_r+0x5c>
 8005002:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005004:	07dc      	lsls	r4, r3, #31
 8005006:	d504      	bpl.n	8005012 <_vfiprintf_r+0x4e>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800500c:	b01d      	add	sp, #116	@ 0x74
 800500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	0598      	lsls	r0, r3, #22
 8005016:	d4f7      	bmi.n	8005008 <_vfiprintf_r+0x44>
 8005018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501a:	f7ff fea8 	bl	8004d6e <__retarget_lock_release_recursive>
 800501e:	e7f3      	b.n	8005008 <_vfiprintf_r+0x44>
 8005020:	2300      	movs	r3, #0
 8005022:	9309      	str	r3, [sp, #36]	@ 0x24
 8005024:	2320      	movs	r3, #32
 8005026:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800502a:	2330      	movs	r3, #48	@ 0x30
 800502c:	f04f 0901 	mov.w	r9, #1
 8005030:	f8cd 800c 	str.w	r8, [sp, #12]
 8005034:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80051e0 <_vfiprintf_r+0x21c>
 8005038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800503c:	4623      	mov	r3, r4
 800503e:	469a      	mov	sl, r3
 8005040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005044:	b10a      	cbz	r2, 800504a <_vfiprintf_r+0x86>
 8005046:	2a25      	cmp	r2, #37	@ 0x25
 8005048:	d1f9      	bne.n	800503e <_vfiprintf_r+0x7a>
 800504a:	ebba 0b04 	subs.w	fp, sl, r4
 800504e:	d00b      	beq.n	8005068 <_vfiprintf_r+0xa4>
 8005050:	465b      	mov	r3, fp
 8005052:	4622      	mov	r2, r4
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff ff95 	bl	8004f86 <__sfputs_r>
 800505c:	3001      	adds	r0, #1
 800505e:	f000 80a7 	beq.w	80051b0 <_vfiprintf_r+0x1ec>
 8005062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005064:	445a      	add	r2, fp
 8005066:	9209      	str	r2, [sp, #36]	@ 0x24
 8005068:	f89a 3000 	ldrb.w	r3, [sl]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 809f 	beq.w	80051b0 <_vfiprintf_r+0x1ec>
 8005072:	2300      	movs	r3, #0
 8005074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800507c:	f10a 0a01 	add.w	sl, sl, #1
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	9307      	str	r3, [sp, #28]
 8005084:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005088:	931a      	str	r3, [sp, #104]	@ 0x68
 800508a:	4654      	mov	r4, sl
 800508c:	2205      	movs	r2, #5
 800508e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005092:	4853      	ldr	r0, [pc, #332]	@ (80051e0 <_vfiprintf_r+0x21c>)
 8005094:	f000 fc5a 	bl	800594c <memchr>
 8005098:	9a04      	ldr	r2, [sp, #16]
 800509a:	b9d8      	cbnz	r0, 80050d4 <_vfiprintf_r+0x110>
 800509c:	06d1      	lsls	r1, r2, #27
 800509e:	bf44      	itt	mi
 80050a0:	2320      	movmi	r3, #32
 80050a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050a6:	0713      	lsls	r3, r2, #28
 80050a8:	bf44      	itt	mi
 80050aa:	232b      	movmi	r3, #43	@ 0x2b
 80050ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050b0:	f89a 3000 	ldrb.w	r3, [sl]
 80050b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050b6:	d015      	beq.n	80050e4 <_vfiprintf_r+0x120>
 80050b8:	4654      	mov	r4, sl
 80050ba:	2000      	movs	r0, #0
 80050bc:	f04f 0c0a 	mov.w	ip, #10
 80050c0:	9a07      	ldr	r2, [sp, #28]
 80050c2:	4621      	mov	r1, r4
 80050c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c8:	3b30      	subs	r3, #48	@ 0x30
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d94b      	bls.n	8005166 <_vfiprintf_r+0x1a2>
 80050ce:	b1b0      	cbz	r0, 80050fe <_vfiprintf_r+0x13a>
 80050d0:	9207      	str	r2, [sp, #28]
 80050d2:	e014      	b.n	80050fe <_vfiprintf_r+0x13a>
 80050d4:	eba0 0308 	sub.w	r3, r0, r8
 80050d8:	fa09 f303 	lsl.w	r3, r9, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	46a2      	mov	sl, r4
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	e7d2      	b.n	800508a <_vfiprintf_r+0xc6>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d19      	adds	r1, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9103      	str	r1, [sp, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfbb      	ittet	lt
 80050f0:	425b      	neglt	r3, r3
 80050f2:	f042 0202 	orrlt.w	r2, r2, #2
 80050f6:	9307      	strge	r3, [sp, #28]
 80050f8:	9307      	strlt	r3, [sp, #28]
 80050fa:	bfb8      	it	lt
 80050fc:	9204      	strlt	r2, [sp, #16]
 80050fe:	7823      	ldrb	r3, [r4, #0]
 8005100:	2b2e      	cmp	r3, #46	@ 0x2e
 8005102:	d10a      	bne.n	800511a <_vfiprintf_r+0x156>
 8005104:	7863      	ldrb	r3, [r4, #1]
 8005106:	2b2a      	cmp	r3, #42	@ 0x2a
 8005108:	d132      	bne.n	8005170 <_vfiprintf_r+0x1ac>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	3402      	adds	r4, #2
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	9203      	str	r2, [sp, #12]
 8005114:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005118:	9305      	str	r3, [sp, #20]
 800511a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80051e4 <_vfiprintf_r+0x220>
 800511e:	2203      	movs	r2, #3
 8005120:	4650      	mov	r0, sl
 8005122:	7821      	ldrb	r1, [r4, #0]
 8005124:	f000 fc12 	bl	800594c <memchr>
 8005128:	b138      	cbz	r0, 800513a <_vfiprintf_r+0x176>
 800512a:	2240      	movs	r2, #64	@ 0x40
 800512c:	9b04      	ldr	r3, [sp, #16]
 800512e:	eba0 000a 	sub.w	r0, r0, sl
 8005132:	4082      	lsls	r2, r0
 8005134:	4313      	orrs	r3, r2
 8005136:	3401      	adds	r4, #1
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513e:	2206      	movs	r2, #6
 8005140:	4829      	ldr	r0, [pc, #164]	@ (80051e8 <_vfiprintf_r+0x224>)
 8005142:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005146:	f000 fc01 	bl	800594c <memchr>
 800514a:	2800      	cmp	r0, #0
 800514c:	d03f      	beq.n	80051ce <_vfiprintf_r+0x20a>
 800514e:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <_vfiprintf_r+0x228>)
 8005150:	bb1b      	cbnz	r3, 800519a <_vfiprintf_r+0x1d6>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	3307      	adds	r3, #7
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	3308      	adds	r3, #8
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005160:	443b      	add	r3, r7
 8005162:	9309      	str	r3, [sp, #36]	@ 0x24
 8005164:	e76a      	b.n	800503c <_vfiprintf_r+0x78>
 8005166:	460c      	mov	r4, r1
 8005168:	2001      	movs	r0, #1
 800516a:	fb0c 3202 	mla	r2, ip, r2, r3
 800516e:	e7a8      	b.n	80050c2 <_vfiprintf_r+0xfe>
 8005170:	2300      	movs	r3, #0
 8005172:	f04f 0c0a 	mov.w	ip, #10
 8005176:	4619      	mov	r1, r3
 8005178:	3401      	adds	r4, #1
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	4620      	mov	r0, r4
 800517e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005182:	3a30      	subs	r2, #48	@ 0x30
 8005184:	2a09      	cmp	r2, #9
 8005186:	d903      	bls.n	8005190 <_vfiprintf_r+0x1cc>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0c6      	beq.n	800511a <_vfiprintf_r+0x156>
 800518c:	9105      	str	r1, [sp, #20]
 800518e:	e7c4      	b.n	800511a <_vfiprintf_r+0x156>
 8005190:	4604      	mov	r4, r0
 8005192:	2301      	movs	r3, #1
 8005194:	fb0c 2101 	mla	r1, ip, r1, r2
 8005198:	e7f0      	b.n	800517c <_vfiprintf_r+0x1b8>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4630      	mov	r0, r6
 80051a2:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <_vfiprintf_r+0x22c>)
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	f3af 8000 	nop.w
 80051aa:	4607      	mov	r7, r0
 80051ac:	1c78      	adds	r0, r7, #1
 80051ae:	d1d6      	bne.n	800515e <_vfiprintf_r+0x19a>
 80051b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051b2:	07d9      	lsls	r1, r3, #31
 80051b4:	d405      	bmi.n	80051c2 <_vfiprintf_r+0x1fe>
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	059a      	lsls	r2, r3, #22
 80051ba:	d402      	bmi.n	80051c2 <_vfiprintf_r+0x1fe>
 80051bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051be:	f7ff fdd6 	bl	8004d6e <__retarget_lock_release_recursive>
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	065b      	lsls	r3, r3, #25
 80051c6:	f53f af1f 	bmi.w	8005008 <_vfiprintf_r+0x44>
 80051ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051cc:	e71e      	b.n	800500c <_vfiprintf_r+0x48>
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4630      	mov	r0, r6
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <_vfiprintf_r+0x22c>)
 80051d8:	a904      	add	r1, sp, #16
 80051da:	f000 f887 	bl	80052ec <_printf_i>
 80051de:	e7e4      	b.n	80051aa <_vfiprintf_r+0x1e6>
 80051e0:	08005bae 	.word	0x08005bae
 80051e4:	08005bb4 	.word	0x08005bb4
 80051e8:	08005bb8 	.word	0x08005bb8
 80051ec:	00000000 	.word	0x00000000
 80051f0:	08004f87 	.word	0x08004f87

080051f4 <vfiprintf>:
 80051f4:	4613      	mov	r3, r2
 80051f6:	460a      	mov	r2, r1
 80051f8:	4601      	mov	r1, r0
 80051fa:	4802      	ldr	r0, [pc, #8]	@ (8005204 <vfiprintf+0x10>)
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f7ff bee1 	b.w	8004fc4 <_vfiprintf_r>
 8005202:	bf00      	nop
 8005204:	20000020 	.word	0x20000020

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4616      	mov	r6, r2
 800520e:	4698      	mov	r8, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	4607      	mov	r7, r0
 8005216:	4293      	cmp	r3, r2
 8005218:	bfb8      	it	lt
 800521a:	4613      	movlt	r3, r2
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005222:	460c      	mov	r4, r1
 8005224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005228:	b10a      	cbz	r2, 800522e <_printf_common+0x26>
 800522a:	3301      	adds	r3, #1
 800522c:	6033      	str	r3, [r6, #0]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	0699      	lsls	r1, r3, #26
 8005232:	bf42      	ittt	mi
 8005234:	6833      	ldrmi	r3, [r6, #0]
 8005236:	3302      	addmi	r3, #2
 8005238:	6033      	strmi	r3, [r6, #0]
 800523a:	6825      	ldr	r5, [r4, #0]
 800523c:	f015 0506 	ands.w	r5, r5, #6
 8005240:	d106      	bne.n	8005250 <_printf_common+0x48>
 8005242:	f104 0a19 	add.w	sl, r4, #25
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	6832      	ldr	r2, [r6, #0]
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	42ab      	cmp	r3, r5
 800524e:	dc2b      	bgt.n	80052a8 <_printf_common+0xa0>
 8005250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	3b00      	subs	r3, #0
 8005258:	bf18      	it	ne
 800525a:	2301      	movne	r3, #1
 800525c:	0692      	lsls	r2, r2, #26
 800525e:	d430      	bmi.n	80052c2 <_printf_common+0xba>
 8005260:	4641      	mov	r1, r8
 8005262:	4638      	mov	r0, r7
 8005264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005268:	47c8      	blx	r9
 800526a:	3001      	adds	r0, #1
 800526c:	d023      	beq.n	80052b6 <_printf_common+0xae>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	6922      	ldr	r2, [r4, #16]
 8005272:	f003 0306 	and.w	r3, r3, #6
 8005276:	2b04      	cmp	r3, #4
 8005278:	bf14      	ite	ne
 800527a:	2500      	movne	r5, #0
 800527c:	6833      	ldreq	r3, [r6, #0]
 800527e:	f04f 0600 	mov.w	r6, #0
 8005282:	bf08      	it	eq
 8005284:	68e5      	ldreq	r5, [r4, #12]
 8005286:	f104 041a 	add.w	r4, r4, #26
 800528a:	bf08      	it	eq
 800528c:	1aed      	subeq	r5, r5, r3
 800528e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005292:	bf08      	it	eq
 8005294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005298:	4293      	cmp	r3, r2
 800529a:	bfc4      	itt	gt
 800529c:	1a9b      	subgt	r3, r3, r2
 800529e:	18ed      	addgt	r5, r5, r3
 80052a0:	42b5      	cmp	r5, r6
 80052a2:	d11a      	bne.n	80052da <_printf_common+0xd2>
 80052a4:	2000      	movs	r0, #0
 80052a6:	e008      	b.n	80052ba <_printf_common+0xb2>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4652      	mov	r2, sl
 80052ac:	4641      	mov	r1, r8
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c8      	blx	r9
 80052b2:	3001      	adds	r0, #1
 80052b4:	d103      	bne.n	80052be <_printf_common+0xb6>
 80052b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	3501      	adds	r5, #1
 80052c0:	e7c1      	b.n	8005246 <_printf_common+0x3e>
 80052c2:	2030      	movs	r0, #48	@ 0x30
 80052c4:	18e1      	adds	r1, r4, r3
 80052c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052d0:	4422      	add	r2, r4
 80052d2:	3302      	adds	r3, #2
 80052d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052d8:	e7c2      	b.n	8005260 <_printf_common+0x58>
 80052da:	2301      	movs	r3, #1
 80052dc:	4622      	mov	r2, r4
 80052de:	4641      	mov	r1, r8
 80052e0:	4638      	mov	r0, r7
 80052e2:	47c8      	blx	r9
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0e6      	beq.n	80052b6 <_printf_common+0xae>
 80052e8:	3601      	adds	r6, #1
 80052ea:	e7d9      	b.n	80052a0 <_printf_common+0x98>

080052ec <_printf_i>:
 80052ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	7e0f      	ldrb	r7, [r1, #24]
 80052f2:	4691      	mov	r9, r2
 80052f4:	2f78      	cmp	r7, #120	@ 0x78
 80052f6:	4680      	mov	r8, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	469a      	mov	sl, r3
 80052fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005302:	d807      	bhi.n	8005314 <_printf_i+0x28>
 8005304:	2f62      	cmp	r7, #98	@ 0x62
 8005306:	d80a      	bhi.n	800531e <_printf_i+0x32>
 8005308:	2f00      	cmp	r7, #0
 800530a:	f000 80d1 	beq.w	80054b0 <_printf_i+0x1c4>
 800530e:	2f58      	cmp	r7, #88	@ 0x58
 8005310:	f000 80b8 	beq.w	8005484 <_printf_i+0x198>
 8005314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800531c:	e03a      	b.n	8005394 <_printf_i+0xa8>
 800531e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005322:	2b15      	cmp	r3, #21
 8005324:	d8f6      	bhi.n	8005314 <_printf_i+0x28>
 8005326:	a101      	add	r1, pc, #4	@ (adr r1, 800532c <_printf_i+0x40>)
 8005328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800532c:	08005385 	.word	0x08005385
 8005330:	08005399 	.word	0x08005399
 8005334:	08005315 	.word	0x08005315
 8005338:	08005315 	.word	0x08005315
 800533c:	08005315 	.word	0x08005315
 8005340:	08005315 	.word	0x08005315
 8005344:	08005399 	.word	0x08005399
 8005348:	08005315 	.word	0x08005315
 800534c:	08005315 	.word	0x08005315
 8005350:	08005315 	.word	0x08005315
 8005354:	08005315 	.word	0x08005315
 8005358:	08005497 	.word	0x08005497
 800535c:	080053c3 	.word	0x080053c3
 8005360:	08005451 	.word	0x08005451
 8005364:	08005315 	.word	0x08005315
 8005368:	08005315 	.word	0x08005315
 800536c:	080054b9 	.word	0x080054b9
 8005370:	08005315 	.word	0x08005315
 8005374:	080053c3 	.word	0x080053c3
 8005378:	08005315 	.word	0x08005315
 800537c:	08005315 	.word	0x08005315
 8005380:	08005459 	.word	0x08005459
 8005384:	6833      	ldr	r3, [r6, #0]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6032      	str	r2, [r6, #0]
 800538c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e09c      	b.n	80054d2 <_printf_i+0x1e6>
 8005398:	6833      	ldr	r3, [r6, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6031      	str	r1, [r6, #0]
 80053a0:	0606      	lsls	r6, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xbc>
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	e003      	b.n	80053b0 <_printf_i+0xc4>
 80053a8:	0645      	lsls	r5, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xb8>
 80053ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	da03      	bge.n	80053bc <_printf_i+0xd0>
 80053b4:	232d      	movs	r3, #45	@ 0x2d
 80053b6:	426d      	negs	r5, r5
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053bc:	230a      	movs	r3, #10
 80053be:	4858      	ldr	r0, [pc, #352]	@ (8005520 <_printf_i+0x234>)
 80053c0:	e011      	b.n	80053e6 <_printf_i+0xfa>
 80053c2:	6821      	ldr	r1, [r4, #0]
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	0608      	lsls	r0, r1, #24
 80053c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053cc:	d402      	bmi.n	80053d4 <_printf_i+0xe8>
 80053ce:	0649      	lsls	r1, r1, #25
 80053d0:	bf48      	it	mi
 80053d2:	b2ad      	uxthmi	r5, r5
 80053d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053d6:	6033      	str	r3, [r6, #0]
 80053d8:	bf14      	ite	ne
 80053da:	230a      	movne	r3, #10
 80053dc:	2308      	moveq	r3, #8
 80053de:	4850      	ldr	r0, [pc, #320]	@ (8005520 <_printf_i+0x234>)
 80053e0:	2100      	movs	r1, #0
 80053e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053e6:	6866      	ldr	r6, [r4, #4]
 80053e8:	2e00      	cmp	r6, #0
 80053ea:	60a6      	str	r6, [r4, #8]
 80053ec:	db05      	blt.n	80053fa <_printf_i+0x10e>
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	432e      	orrs	r6, r5
 80053f2:	f021 0104 	bic.w	r1, r1, #4
 80053f6:	6021      	str	r1, [r4, #0]
 80053f8:	d04b      	beq.n	8005492 <_printf_i+0x1a6>
 80053fa:	4616      	mov	r6, r2
 80053fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005400:	fb03 5711 	mls	r7, r3, r1, r5
 8005404:	5dc7      	ldrb	r7, [r0, r7]
 8005406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800540a:	462f      	mov	r7, r5
 800540c:	42bb      	cmp	r3, r7
 800540e:	460d      	mov	r5, r1
 8005410:	d9f4      	bls.n	80053fc <_printf_i+0x110>
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10b      	bne.n	800542e <_printf_i+0x142>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	07df      	lsls	r7, r3, #31
 800541a:	d508      	bpl.n	800542e <_printf_i+0x142>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6861      	ldr	r1, [r4, #4]
 8005420:	4299      	cmp	r1, r3
 8005422:	bfde      	ittt	le
 8005424:	2330      	movle	r3, #48	@ 0x30
 8005426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800542a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800542e:	1b92      	subs	r2, r2, r6
 8005430:	6122      	str	r2, [r4, #16]
 8005432:	464b      	mov	r3, r9
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f8cd a000 	str.w	sl, [sp]
 800543c:	aa03      	add	r2, sp, #12
 800543e:	f7ff fee3 	bl	8005208 <_printf_common>
 8005442:	3001      	adds	r0, #1
 8005444:	d14a      	bne.n	80054dc <_printf_i+0x1f0>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800544a:	b004      	add	sp, #16
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f043 0320 	orr.w	r3, r3, #32
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	2778      	movs	r7, #120	@ 0x78
 800545a:	4832      	ldr	r0, [pc, #200]	@ (8005524 <_printf_i+0x238>)
 800545c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	061f      	lsls	r7, r3, #24
 8005466:	f851 5b04 	ldr.w	r5, [r1], #4
 800546a:	d402      	bmi.n	8005472 <_printf_i+0x186>
 800546c:	065f      	lsls	r7, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2ad      	uxthmi	r5, r5
 8005472:	6031      	str	r1, [r6, #0]
 8005474:	07d9      	lsls	r1, r3, #31
 8005476:	bf44      	itt	mi
 8005478:	f043 0320 	orrmi.w	r3, r3, #32
 800547c:	6023      	strmi	r3, [r4, #0]
 800547e:	b11d      	cbz	r5, 8005488 <_printf_i+0x19c>
 8005480:	2310      	movs	r3, #16
 8005482:	e7ad      	b.n	80053e0 <_printf_i+0xf4>
 8005484:	4826      	ldr	r0, [pc, #152]	@ (8005520 <_printf_i+0x234>)
 8005486:	e7e9      	b.n	800545c <_printf_i+0x170>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f023 0320 	bic.w	r3, r3, #32
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e7f6      	b.n	8005480 <_printf_i+0x194>
 8005492:	4616      	mov	r6, r2
 8005494:	e7bd      	b.n	8005412 <_printf_i+0x126>
 8005496:	6833      	ldr	r3, [r6, #0]
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1d18      	adds	r0, r3, #4
 800549c:	6961      	ldr	r1, [r4, #20]
 800549e:	6030      	str	r0, [r6, #0]
 80054a0:	062e      	lsls	r6, r5, #24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0x1be>
 80054a6:	6019      	str	r1, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <_printf_i+0x1c4>
 80054aa:	0668      	lsls	r0, r5, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0x1ba>
 80054ae:	8019      	strh	r1, [r3, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	4616      	mov	r6, r2
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	e7bc      	b.n	8005432 <_printf_i+0x146>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	2100      	movs	r1, #0
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	681e      	ldr	r6, [r3, #0]
 80054c2:	6862      	ldr	r2, [r4, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 fa41 	bl	800594c <memchr>
 80054ca:	b108      	cbz	r0, 80054d0 <_printf_i+0x1e4>
 80054cc:	1b80      	subs	r0, r0, r6
 80054ce:	6060      	str	r0, [r4, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	2300      	movs	r3, #0
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054da:	e7aa      	b.n	8005432 <_printf_i+0x146>
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	47d0      	blx	sl
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0ad      	beq.n	8005446 <_printf_i+0x15a>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	079b      	lsls	r3, r3, #30
 80054ee:	d413      	bmi.n	8005518 <_printf_i+0x22c>
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	4298      	cmp	r0, r3
 80054f6:	bfb8      	it	lt
 80054f8:	4618      	movlt	r0, r3
 80054fa:	e7a6      	b.n	800544a <_printf_i+0x15e>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4632      	mov	r2, r6
 8005500:	4649      	mov	r1, r9
 8005502:	4640      	mov	r0, r8
 8005504:	47d0      	blx	sl
 8005506:	3001      	adds	r0, #1
 8005508:	d09d      	beq.n	8005446 <_printf_i+0x15a>
 800550a:	3501      	adds	r5, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	9903      	ldr	r1, [sp, #12]
 8005510:	1a5b      	subs	r3, r3, r1
 8005512:	42ab      	cmp	r3, r5
 8005514:	dcf2      	bgt.n	80054fc <_printf_i+0x210>
 8005516:	e7eb      	b.n	80054f0 <_printf_i+0x204>
 8005518:	2500      	movs	r5, #0
 800551a:	f104 0619 	add.w	r6, r4, #25
 800551e:	e7f5      	b.n	800550c <_printf_i+0x220>
 8005520:	08005bbf 	.word	0x08005bbf
 8005524:	08005bd0 	.word	0x08005bd0

08005528 <__sfvwrite_r>:
 8005528:	6893      	ldr	r3, [r2, #8]
 800552a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552e:	4606      	mov	r6, r0
 8005530:	460c      	mov	r4, r1
 8005532:	4691      	mov	r9, r2
 8005534:	b91b      	cbnz	r3, 800553e <__sfvwrite_r+0x16>
 8005536:	2000      	movs	r0, #0
 8005538:	b003      	add	sp, #12
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	898b      	ldrh	r3, [r1, #12]
 8005540:	0718      	lsls	r0, r3, #28
 8005542:	d550      	bpl.n	80055e6 <__sfvwrite_r+0xbe>
 8005544:	690b      	ldr	r3, [r1, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d04d      	beq.n	80055e6 <__sfvwrite_r+0xbe>
 800554a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800554e:	f8d9 8000 	ldr.w	r8, [r9]
 8005552:	f013 0702 	ands.w	r7, r3, #2
 8005556:	d16b      	bne.n	8005630 <__sfvwrite_r+0x108>
 8005558:	f013 0301 	ands.w	r3, r3, #1
 800555c:	f000 809c 	beq.w	8005698 <__sfvwrite_r+0x170>
 8005560:	4638      	mov	r0, r7
 8005562:	46ba      	mov	sl, r7
 8005564:	46bb      	mov	fp, r7
 8005566:	f1bb 0f00 	cmp.w	fp, #0
 800556a:	f000 8103 	beq.w	8005774 <__sfvwrite_r+0x24c>
 800556e:	b950      	cbnz	r0, 8005586 <__sfvwrite_r+0x5e>
 8005570:	465a      	mov	r2, fp
 8005572:	210a      	movs	r1, #10
 8005574:	4650      	mov	r0, sl
 8005576:	f000 f9e9 	bl	800594c <memchr>
 800557a:	2800      	cmp	r0, #0
 800557c:	f000 8100 	beq.w	8005780 <__sfvwrite_r+0x258>
 8005580:	3001      	adds	r0, #1
 8005582:	eba0 070a 	sub.w	r7, r0, sl
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	6921      	ldr	r1, [r4, #16]
 800558a:	455f      	cmp	r7, fp
 800558c:	463a      	mov	r2, r7
 800558e:	bf28      	it	cs
 8005590:	465a      	movcs	r2, fp
 8005592:	4288      	cmp	r0, r1
 8005594:	68a5      	ldr	r5, [r4, #8]
 8005596:	6963      	ldr	r3, [r4, #20]
 8005598:	f240 80f5 	bls.w	8005786 <__sfvwrite_r+0x25e>
 800559c:	441d      	add	r5, r3
 800559e:	42aa      	cmp	r2, r5
 80055a0:	f340 80f1 	ble.w	8005786 <__sfvwrite_r+0x25e>
 80055a4:	4651      	mov	r1, sl
 80055a6:	462a      	mov	r2, r5
 80055a8:	f000 f9a6 	bl	80058f8 <memmove>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	4621      	mov	r1, r4
 80055b0:	442b      	add	r3, r5
 80055b2:	4630      	mov	r0, r6
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	f7ff f90f 	bl	80047d8 <_fflush_r>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d167      	bne.n	800568e <__sfvwrite_r+0x166>
 80055be:	1b7f      	subs	r7, r7, r5
 80055c0:	f040 80f9 	bne.w	80057b6 <__sfvwrite_r+0x28e>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff f906 	bl	80047d8 <_fflush_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d15e      	bne.n	800568e <__sfvwrite_r+0x166>
 80055d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80055d4:	44aa      	add	sl, r5
 80055d6:	1b5b      	subs	r3, r3, r5
 80055d8:	ebab 0b05 	sub.w	fp, fp, r5
 80055dc:	f8c9 3008 	str.w	r3, [r9, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1c0      	bne.n	8005566 <__sfvwrite_r+0x3e>
 80055e4:	e7a7      	b.n	8005536 <__sfvwrite_r+0xe>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f92f 	bl	800584c <__swsetup_r>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d0ab      	beq.n	800554a <__sfvwrite_r+0x22>
 80055f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055f6:	e79f      	b.n	8005538 <__sfvwrite_r+0x10>
 80055f8:	e9d8 a500 	ldrd	sl, r5, [r8]
 80055fc:	f108 0808 	add.w	r8, r8, #8
 8005600:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8005604:	6a21      	ldr	r1, [r4, #32]
 8005606:	2d00      	cmp	r5, #0
 8005608:	d0f6      	beq.n	80055f8 <__sfvwrite_r+0xd0>
 800560a:	42bd      	cmp	r5, r7
 800560c:	462b      	mov	r3, r5
 800560e:	4652      	mov	r2, sl
 8005610:	bf28      	it	cs
 8005612:	463b      	movcs	r3, r7
 8005614:	4630      	mov	r0, r6
 8005616:	47d8      	blx	fp
 8005618:	2800      	cmp	r0, #0
 800561a:	dd38      	ble.n	800568e <__sfvwrite_r+0x166>
 800561c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005620:	4482      	add	sl, r0
 8005622:	1a1b      	subs	r3, r3, r0
 8005624:	1a2d      	subs	r5, r5, r0
 8005626:	f8c9 3008 	str.w	r3, [r9, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e8      	bne.n	8005600 <__sfvwrite_r+0xd8>
 800562e:	e782      	b.n	8005536 <__sfvwrite_r+0xe>
 8005630:	f04f 0a00 	mov.w	sl, #0
 8005634:	4f61      	ldr	r7, [pc, #388]	@ (80057bc <__sfvwrite_r+0x294>)
 8005636:	4655      	mov	r5, sl
 8005638:	e7e2      	b.n	8005600 <__sfvwrite_r+0xd8>
 800563a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800563e:	f108 0808 	add.w	r8, r8, #8
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	68a2      	ldr	r2, [r4, #8]
 800564a:	f1ba 0f00 	cmp.w	sl, #0
 800564e:	d0f4      	beq.n	800563a <__sfvwrite_r+0x112>
 8005650:	0599      	lsls	r1, r3, #22
 8005652:	d563      	bpl.n	800571c <__sfvwrite_r+0x1f4>
 8005654:	4552      	cmp	r2, sl
 8005656:	d836      	bhi.n	80056c6 <__sfvwrite_r+0x19e>
 8005658:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800565c:	d033      	beq.n	80056c6 <__sfvwrite_r+0x19e>
 800565e:	6921      	ldr	r1, [r4, #16]
 8005660:	6965      	ldr	r5, [r4, #20]
 8005662:	eba0 0b01 	sub.w	fp, r0, r1
 8005666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800566e:	f10b 0201 	add.w	r2, fp, #1
 8005672:	106d      	asrs	r5, r5, #1
 8005674:	4452      	add	r2, sl
 8005676:	4295      	cmp	r5, r2
 8005678:	bf38      	it	cc
 800567a:	4615      	movcc	r5, r2
 800567c:	055b      	lsls	r3, r3, #21
 800567e:	d53d      	bpl.n	80056fc <__sfvwrite_r+0x1d4>
 8005680:	4629      	mov	r1, r5
 8005682:	4630      	mov	r0, r6
 8005684:	f7ff fbde 	bl	8004e44 <_malloc_r>
 8005688:	b948      	cbnz	r0, 800569e <__sfvwrite_r+0x176>
 800568a:	230c      	movs	r3, #12
 800568c:	6033      	str	r3, [r6, #0]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	e7ac      	b.n	80055f2 <__sfvwrite_r+0xca>
 8005698:	461f      	mov	r7, r3
 800569a:	469a      	mov	sl, r3
 800569c:	e7d1      	b.n	8005642 <__sfvwrite_r+0x11a>
 800569e:	465a      	mov	r2, fp
 80056a0:	6921      	ldr	r1, [r4, #16]
 80056a2:	9001      	str	r0, [sp, #4]
 80056a4:	f000 f960 	bl	8005968 <memcpy>
 80056a8:	89a2      	ldrh	r2, [r4, #12]
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80056b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056b4:	81a2      	strh	r2, [r4, #12]
 80056b6:	4652      	mov	r2, sl
 80056b8:	6123      	str	r3, [r4, #16]
 80056ba:	6165      	str	r5, [r4, #20]
 80056bc:	445b      	add	r3, fp
 80056be:	eba5 050b 	sub.w	r5, r5, fp
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	60a5      	str	r5, [r4, #8]
 80056c6:	4552      	cmp	r2, sl
 80056c8:	bf28      	it	cs
 80056ca:	4652      	movcs	r2, sl
 80056cc:	4655      	mov	r5, sl
 80056ce:	4639      	mov	r1, r7
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	9201      	str	r2, [sp, #4]
 80056d4:	f000 f910 	bl	80058f8 <memmove>
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	9a01      	ldr	r2, [sp, #4]
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	60a3      	str	r3, [r4, #8]
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	4413      	add	r3, r2
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80056ea:	442f      	add	r7, r5
 80056ec:	1b5b      	subs	r3, r3, r5
 80056ee:	ebaa 0a05 	sub.w	sl, sl, r5
 80056f2:	f8c9 3008 	str.w	r3, [r9, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1a3      	bne.n	8005642 <__sfvwrite_r+0x11a>
 80056fa:	e71c      	b.n	8005536 <__sfvwrite_r+0xe>
 80056fc:	462a      	mov	r2, r5
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 f940 	bl	8005984 <_realloc_r>
 8005704:	4603      	mov	r3, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d1d5      	bne.n	80056b6 <__sfvwrite_r+0x18e>
 800570a:	4630      	mov	r0, r6
 800570c:	6921      	ldr	r1, [r4, #16]
 800570e:	f7ff fb2f 	bl	8004d70 <_free_r>
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	e7b6      	b.n	800568a <__sfvwrite_r+0x162>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	4283      	cmp	r3, r0
 8005720:	d302      	bcc.n	8005728 <__sfvwrite_r+0x200>
 8005722:	6961      	ldr	r1, [r4, #20]
 8005724:	4551      	cmp	r1, sl
 8005726:	d915      	bls.n	8005754 <__sfvwrite_r+0x22c>
 8005728:	4552      	cmp	r2, sl
 800572a:	bf28      	it	cs
 800572c:	4652      	movcs	r2, sl
 800572e:	4615      	mov	r5, r2
 8005730:	4639      	mov	r1, r7
 8005732:	f000 f8e1 	bl	80058f8 <memmove>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	1b5b      	subs	r3, r3, r5
 800573c:	442a      	add	r2, r5
 800573e:	60a3      	str	r3, [r4, #8]
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1cf      	bne.n	80056e6 <__sfvwrite_r+0x1be>
 8005746:	4621      	mov	r1, r4
 8005748:	4630      	mov	r0, r6
 800574a:	f7ff f845 	bl	80047d8 <_fflush_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	d0c9      	beq.n	80056e6 <__sfvwrite_r+0x1be>
 8005752:	e79c      	b.n	800568e <__sfvwrite_r+0x166>
 8005754:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005758:	4553      	cmp	r3, sl
 800575a:	bf28      	it	cs
 800575c:	4653      	movcs	r3, sl
 800575e:	fb93 f3f1 	sdiv	r3, r3, r1
 8005762:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005764:	434b      	muls	r3, r1
 8005766:	463a      	mov	r2, r7
 8005768:	4630      	mov	r0, r6
 800576a:	6a21      	ldr	r1, [r4, #32]
 800576c:	47a8      	blx	r5
 800576e:	1e05      	subs	r5, r0, #0
 8005770:	dcb9      	bgt.n	80056e6 <__sfvwrite_r+0x1be>
 8005772:	e78c      	b.n	800568e <__sfvwrite_r+0x166>
 8005774:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8005778:	2000      	movs	r0, #0
 800577a:	f108 0808 	add.w	r8, r8, #8
 800577e:	e6f2      	b.n	8005566 <__sfvwrite_r+0x3e>
 8005780:	f10b 0701 	add.w	r7, fp, #1
 8005784:	e6ff      	b.n	8005586 <__sfvwrite_r+0x5e>
 8005786:	4293      	cmp	r3, r2
 8005788:	dc08      	bgt.n	800579c <__sfvwrite_r+0x274>
 800578a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800578c:	4652      	mov	r2, sl
 800578e:	4630      	mov	r0, r6
 8005790:	6a21      	ldr	r1, [r4, #32]
 8005792:	47a8      	blx	r5
 8005794:	1e05      	subs	r5, r0, #0
 8005796:	f73f af12 	bgt.w	80055be <__sfvwrite_r+0x96>
 800579a:	e778      	b.n	800568e <__sfvwrite_r+0x166>
 800579c:	4651      	mov	r1, sl
 800579e:	9201      	str	r2, [sp, #4]
 80057a0:	f000 f8aa 	bl	80058f8 <memmove>
 80057a4:	9a01      	ldr	r2, [sp, #4]
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	4615      	mov	r5, r2
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	e703      	b.n	80055be <__sfvwrite_r+0x96>
 80057b6:	2001      	movs	r0, #1
 80057b8:	e70a      	b.n	80055d0 <__sfvwrite_r+0xa8>
 80057ba:	bf00      	nop
 80057bc:	7ffffc00 	.word	0x7ffffc00

080057c0 <__swbuf_r>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	460e      	mov	r6, r1
 80057c4:	4614      	mov	r4, r2
 80057c6:	4605      	mov	r5, r0
 80057c8:	b118      	cbz	r0, 80057d2 <__swbuf_r+0x12>
 80057ca:	6a03      	ldr	r3, [r0, #32]
 80057cc:	b90b      	cbnz	r3, 80057d2 <__swbuf_r+0x12>
 80057ce:	f7ff f935 	bl	8004a3c <__sinit>
 80057d2:	69a3      	ldr	r3, [r4, #24]
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	071a      	lsls	r2, r3, #28
 80057da:	d501      	bpl.n	80057e0 <__swbuf_r+0x20>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	b943      	cbnz	r3, 80057f2 <__swbuf_r+0x32>
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 f832 	bl	800584c <__swsetup_r>
 80057e8:	b118      	cbz	r0, 80057f2 <__swbuf_r+0x32>
 80057ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80057ee:	4638      	mov	r0, r7
 80057f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6922      	ldr	r2, [r4, #16]
 80057f6:	b2f6      	uxtb	r6, r6
 80057f8:	1a98      	subs	r0, r3, r2
 80057fa:	6963      	ldr	r3, [r4, #20]
 80057fc:	4637      	mov	r7, r6
 80057fe:	4283      	cmp	r3, r0
 8005800:	dc05      	bgt.n	800580e <__swbuf_r+0x4e>
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f7fe ffe7 	bl	80047d8 <_fflush_r>
 800580a:	2800      	cmp	r0, #0
 800580c:	d1ed      	bne.n	80057ea <__swbuf_r+0x2a>
 800580e:	68a3      	ldr	r3, [r4, #8]
 8005810:	3b01      	subs	r3, #1
 8005812:	60a3      	str	r3, [r4, #8]
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	701e      	strb	r6, [r3, #0]
 800581c:	6962      	ldr	r2, [r4, #20]
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	429a      	cmp	r2, r3
 8005822:	d004      	beq.n	800582e <__swbuf_r+0x6e>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	07db      	lsls	r3, r3, #31
 8005828:	d5e1      	bpl.n	80057ee <__swbuf_r+0x2e>
 800582a:	2e0a      	cmp	r6, #10
 800582c:	d1df      	bne.n	80057ee <__swbuf_r+0x2e>
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f7fe ffd1 	bl	80047d8 <_fflush_r>
 8005836:	2800      	cmp	r0, #0
 8005838:	d0d9      	beq.n	80057ee <__swbuf_r+0x2e>
 800583a:	e7d6      	b.n	80057ea <__swbuf_r+0x2a>

0800583c <__swbuf>:
 800583c:	4b02      	ldr	r3, [pc, #8]	@ (8005848 <__swbuf+0xc>)
 800583e:	460a      	mov	r2, r1
 8005840:	4601      	mov	r1, r0
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	f7ff bfbc 	b.w	80057c0 <__swbuf_r>
 8005848:	20000020 	.word	0x20000020

0800584c <__swsetup_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <__swsetup_r+0xa8>)
 8005850:	4605      	mov	r5, r0
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	460c      	mov	r4, r1
 8005856:	b118      	cbz	r0, 8005860 <__swsetup_r+0x14>
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	b90b      	cbnz	r3, 8005860 <__swsetup_r+0x14>
 800585c:	f7ff f8ee 	bl	8004a3c <__sinit>
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	0719      	lsls	r1, r3, #28
 8005866:	d422      	bmi.n	80058ae <__swsetup_r+0x62>
 8005868:	06da      	lsls	r2, r3, #27
 800586a:	d407      	bmi.n	800587c <__swsetup_r+0x30>
 800586c:	2209      	movs	r2, #9
 800586e:	602a      	str	r2, [r5, #0]
 8005870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	e033      	b.n	80058e4 <__swsetup_r+0x98>
 800587c:	0758      	lsls	r0, r3, #29
 800587e:	d512      	bpl.n	80058a6 <__swsetup_r+0x5a>
 8005880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005882:	b141      	cbz	r1, 8005896 <__swsetup_r+0x4a>
 8005884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005888:	4299      	cmp	r1, r3
 800588a:	d002      	beq.n	8005892 <__swsetup_r+0x46>
 800588c:	4628      	mov	r0, r5
 800588e:	f7ff fa6f 	bl	8004d70 <_free_r>
 8005892:	2300      	movs	r3, #0
 8005894:	6363      	str	r3, [r4, #52]	@ 0x34
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	2300      	movs	r3, #0
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	b94b      	cbnz	r3, 80058c6 <__swsetup_r+0x7a>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058bc:	d003      	beq.n	80058c6 <__swsetup_r+0x7a>
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 f8b2 	bl	8005a2a <__smakebuf_r>
 80058c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ca:	f013 0201 	ands.w	r2, r3, #1
 80058ce:	d00a      	beq.n	80058e6 <__swsetup_r+0x9a>
 80058d0:	2200      	movs	r2, #0
 80058d2:	60a2      	str	r2, [r4, #8]
 80058d4:	6962      	ldr	r2, [r4, #20]
 80058d6:	4252      	negs	r2, r2
 80058d8:	61a2      	str	r2, [r4, #24]
 80058da:	6922      	ldr	r2, [r4, #16]
 80058dc:	b942      	cbnz	r2, 80058f0 <__swsetup_r+0xa4>
 80058de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058e2:	d1c5      	bne.n	8005870 <__swsetup_r+0x24>
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	0799      	lsls	r1, r3, #30
 80058e8:	bf58      	it	pl
 80058ea:	6962      	ldrpl	r2, [r4, #20]
 80058ec:	60a2      	str	r2, [r4, #8]
 80058ee:	e7f4      	b.n	80058da <__swsetup_r+0x8e>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e7f7      	b.n	80058e4 <__swsetup_r+0x98>
 80058f4:	20000020 	.word	0x20000020

080058f8 <memmove>:
 80058f8:	4288      	cmp	r0, r1
 80058fa:	b510      	push	{r4, lr}
 80058fc:	eb01 0402 	add.w	r4, r1, r2
 8005900:	d902      	bls.n	8005908 <memmove+0x10>
 8005902:	4284      	cmp	r4, r0
 8005904:	4623      	mov	r3, r4
 8005906:	d807      	bhi.n	8005918 <memmove+0x20>
 8005908:	1e43      	subs	r3, r0, #1
 800590a:	42a1      	cmp	r1, r4
 800590c:	d008      	beq.n	8005920 <memmove+0x28>
 800590e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005916:	e7f8      	b.n	800590a <memmove+0x12>
 8005918:	4601      	mov	r1, r0
 800591a:	4402      	add	r2, r0
 800591c:	428a      	cmp	r2, r1
 800591e:	d100      	bne.n	8005922 <memmove+0x2a>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800592a:	e7f7      	b.n	800591c <memmove+0x24>

0800592c <_sbrk_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	2300      	movs	r3, #0
 8005930:	4d05      	ldr	r5, [pc, #20]	@ (8005948 <_sbrk_r+0x1c>)
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fa ff2c 	bl	8000794 <_sbrk>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_sbrk_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_sbrk_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200001fc 	.word	0x200001fc

0800594c <memchr>:
 800594c:	4603      	mov	r3, r0
 800594e:	b510      	push	{r4, lr}
 8005950:	b2c9      	uxtb	r1, r1
 8005952:	4402      	add	r2, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	4618      	mov	r0, r3
 8005958:	d101      	bne.n	800595e <memchr+0x12>
 800595a:	2000      	movs	r0, #0
 800595c:	e003      	b.n	8005966 <memchr+0x1a>
 800595e:	7804      	ldrb	r4, [r0, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	428c      	cmp	r4, r1
 8005964:	d1f6      	bne.n	8005954 <memchr+0x8>
 8005966:	bd10      	pop	{r4, pc}

08005968 <memcpy>:
 8005968:	440a      	add	r2, r1
 800596a:	4291      	cmp	r1, r2
 800596c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005970:	d100      	bne.n	8005974 <memcpy+0xc>
 8005972:	4770      	bx	lr
 8005974:	b510      	push	{r4, lr}
 8005976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800597a:	4291      	cmp	r1, r2
 800597c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005980:	d1f9      	bne.n	8005976 <memcpy+0xe>
 8005982:	bd10      	pop	{r4, pc}

08005984 <_realloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4607      	mov	r7, r0
 800598a:	4614      	mov	r4, r2
 800598c:	460d      	mov	r5, r1
 800598e:	b921      	cbnz	r1, 800599a <_realloc_r+0x16>
 8005990:	4611      	mov	r1, r2
 8005992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005996:	f7ff ba55 	b.w	8004e44 <_malloc_r>
 800599a:	b92a      	cbnz	r2, 80059a8 <_realloc_r+0x24>
 800599c:	f7ff f9e8 	bl	8004d70 <_free_r>
 80059a0:	4625      	mov	r5, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f000 f89e 	bl	8005ae8 <_malloc_usable_size_r>
 80059ac:	4284      	cmp	r4, r0
 80059ae:	4606      	mov	r6, r0
 80059b0:	d802      	bhi.n	80059b8 <_realloc_r+0x34>
 80059b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059b6:	d8f4      	bhi.n	80059a2 <_realloc_r+0x1e>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff fa42 	bl	8004e44 <_malloc_r>
 80059c0:	4680      	mov	r8, r0
 80059c2:	b908      	cbnz	r0, 80059c8 <_realloc_r+0x44>
 80059c4:	4645      	mov	r5, r8
 80059c6:	e7ec      	b.n	80059a2 <_realloc_r+0x1e>
 80059c8:	42b4      	cmp	r4, r6
 80059ca:	4622      	mov	r2, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	bf28      	it	cs
 80059d0:	4632      	movcs	r2, r6
 80059d2:	f7ff ffc9 	bl	8005968 <memcpy>
 80059d6:	4629      	mov	r1, r5
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff f9c9 	bl	8004d70 <_free_r>
 80059de:	e7f1      	b.n	80059c4 <_realloc_r+0x40>

080059e0 <__swhatbuf_r>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	460c      	mov	r4, r1
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	4615      	mov	r5, r2
 80059ea:	2900      	cmp	r1, #0
 80059ec:	461e      	mov	r6, r3
 80059ee:	b096      	sub	sp, #88	@ 0x58
 80059f0:	da0c      	bge.n	8005a0c <__swhatbuf_r+0x2c>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	2100      	movs	r1, #0
 80059f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059fa:	bf14      	ite	ne
 80059fc:	2340      	movne	r3, #64	@ 0x40
 80059fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a02:	2000      	movs	r0, #0
 8005a04:	6031      	str	r1, [r6, #0]
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	b016      	add	sp, #88	@ 0x58
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	466a      	mov	r2, sp
 8005a0e:	f000 f849 	bl	8005aa4 <_fstat_r>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	dbed      	blt.n	80059f2 <__swhatbuf_r+0x12>
 8005a16:	9901      	ldr	r1, [sp, #4]
 8005a18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a20:	4259      	negs	r1, r3
 8005a22:	4159      	adcs	r1, r3
 8005a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a28:	e7eb      	b.n	8005a02 <__swhatbuf_r+0x22>

08005a2a <__smakebuf_r>:
 8005a2a:	898b      	ldrh	r3, [r1, #12]
 8005a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2e:	079d      	lsls	r5, r3, #30
 8005a30:	4606      	mov	r6, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	d507      	bpl.n	8005a46 <__smakebuf_r+0x1c>
 8005a36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a3a:	6023      	str	r3, [r4, #0]
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	6163      	str	r3, [r4, #20]
 8005a42:	b003      	add	sp, #12
 8005a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a46:	466a      	mov	r2, sp
 8005a48:	ab01      	add	r3, sp, #4
 8005a4a:	f7ff ffc9 	bl	80059e0 <__swhatbuf_r>
 8005a4e:	9f00      	ldr	r7, [sp, #0]
 8005a50:	4605      	mov	r5, r0
 8005a52:	4639      	mov	r1, r7
 8005a54:	4630      	mov	r0, r6
 8005a56:	f7ff f9f5 	bl	8004e44 <_malloc_r>
 8005a5a:	b948      	cbnz	r0, 8005a70 <__smakebuf_r+0x46>
 8005a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a60:	059a      	lsls	r2, r3, #22
 8005a62:	d4ee      	bmi.n	8005a42 <__smakebuf_r+0x18>
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	e7e2      	b.n	8005a36 <__smakebuf_r+0xc>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	6020      	str	r0, [r4, #0]
 8005a80:	b15b      	cbz	r3, 8005a9a <__smakebuf_r+0x70>
 8005a82:	4630      	mov	r0, r6
 8005a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a88:	f000 f81e 	bl	8005ac8 <_isatty_r>
 8005a8c:	b128      	cbz	r0, 8005a9a <__smakebuf_r+0x70>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	431d      	orrs	r5, r3
 8005a9e:	81a5      	strh	r5, [r4, #12]
 8005aa0:	e7cf      	b.n	8005a42 <__smakebuf_r+0x18>
	...

08005aa4 <_fstat_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4d06      	ldr	r5, [pc, #24]	@ (8005ac4 <_fstat_r+0x20>)
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	f7fa fdd9 	bl	8000668 <_fstat>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d102      	bne.n	8005ac0 <_fstat_r+0x1c>
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	b103      	cbz	r3, 8005ac0 <_fstat_r+0x1c>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200001fc 	.word	0x200001fc

08005ac8 <_isatty_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	2300      	movs	r3, #0
 8005acc:	4d05      	ldr	r5, [pc, #20]	@ (8005ae4 <_isatty_r+0x1c>)
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fa fdd7 	bl	8000686 <_isatty>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_isatty_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_isatty_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200001fc 	.word	0x200001fc

08005ae8 <_malloc_usable_size_r>:
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f18      	subs	r0, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbc      	itt	lt
 8005af2:	580b      	ldrlt	r3, [r1, r0]
 8005af4:	18c0      	addlt	r0, r0, r3
 8005af6:	4770      	bx	lr

08005af8 <__EH_FRAME_BEGIN__>:
 8005af8:	0000 0000                                   ....

08005afc <_init>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr

08005b08 <_fini>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr
