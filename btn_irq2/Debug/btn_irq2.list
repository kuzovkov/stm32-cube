
btn_irq2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080027d0  080027d0  000037d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002868  08002868  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002868  08002868  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002868  08002868  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800286c  0800286c  0000386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002870  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080028d8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080028d8  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006de3  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001556  00000000  00000000  0000ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000525  00000000  00000000  0000caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eaa  00000000  00000000  0000cfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000783f  00000000  00000000  00024e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b8d  00000000  00000000  0002c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b123b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c8  00000000  00000000  000b1280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b3448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b8 	.word	0x080027b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080027b8 	.word	0x080027b8

0800014c <_write>:
#error Unknown compilator
#else
#include <unistd.h>

int _write(int fd, const void *buf, size_t count)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	int res = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	617b      	str	r3, [r7, #20]
	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d002      	beq.n	8000168 <_write+0x1c>
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	2b02      	cmp	r3, #2
 8000166:	d112      	bne.n	800018e <_write+0x42>
		// write data to UART
		HAL_StatusTypeDef hal_res = HAL_UART_Transmit(&huart1, (uint8_t*) buf, count, HAL_MAX_DELAY);
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	b29a      	uxth	r2, r3
 800016c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000170:	68b9      	ldr	r1, [r7, #8]
 8000172:	480b      	ldr	r0, [pc, #44]	@ (80001a0 <_write+0x54>)
 8000174:	f001 fa14 	bl	80015a0 <HAL_UART_Transmit>
 8000178:	4603      	mov	r3, r0
 800017a:	74fb      	strb	r3, [r7, #19]
		res = hal_res == HAL_OK ? count : -1;
 800017c:	7cfb      	ldrb	r3, [r7, #19]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d101      	bne.n	8000186 <_write+0x3a>
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	e001      	b.n	800018a <_write+0x3e>
 8000186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800018a:	617b      	str	r3, [r7, #20]
	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800018c:	e002      	b.n	8000194 <_write+0x48>
	} else {
		res = -1;
 800018e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000192:	617b      	str	r3, [r7, #20]
	}
	return res;
 8000194:	697b      	ldr	r3, [r7, #20]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3718      	adds	r7, #24
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20000084 	.word	0x20000084

080001a4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	80fb      	strh	r3, [r7, #6]
	//
	// Входной аргумент GPIO_Pin представляет из себя битовую
	// маску с номером пина, откуда пришло прерывание.
	// Его значение равно одной из следующих констант:
	// - GPIO_PIN_0...GPIO_PIN_N
	int btn_state = HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	4619      	mov	r1, r3
 80001b2:	4811      	ldr	r0, [pc, #68]	@ (80001f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80001b4:	f000 fd4c 	bl	8000c50 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	60fb      	str	r3, [r7, #12]
	printf("HAL_GPIO_EXTI_Callback, GPIO_Pin: %d \n", GPIO_Pin);
 80001bc:	88fb      	ldrh	r3, [r7, #6]
 80001be:	4619      	mov	r1, r3
 80001c0:	480e      	ldr	r0, [pc, #56]	@ (80001fc <HAL_GPIO_EXTI_Callback+0x58>)
 80001c2:	f001 fc83 	bl	8001acc <iprintf>
	printf("btn_state: %d \n", btn_state);
 80001c6:	68f9      	ldr	r1, [r7, #12]
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <HAL_GPIO_EXTI_Callback+0x5c>)
 80001ca:	f001 fc7f 	bl	8001acc <iprintf>
	if (btn_state)
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d005      	beq.n	80001e0 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2104      	movs	r1, #4
 80001d8:	480a      	ldr	r0, [pc, #40]	@ (8000204 <HAL_GPIO_EXTI_Callback+0x60>)
 80001da:	f000 fd50 	bl	8000c7e <HAL_GPIO_WritePin>
 80001de:	e004      	b.n	80001ea <HAL_GPIO_EXTI_Callback+0x46>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2104      	movs	r1, #4
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <HAL_GPIO_EXTI_Callback+0x60>)
 80001e6:	f000 fd4a 	bl	8000c7e <HAL_GPIO_WritePin>
	}
	// Перед выходом из прерывания на всякий случай
	// очистим его бит в EXTI. Это поможет избежать "зацикливания"
	// прерывания если при работе с пинами мы снова сформировали
	// импульс, который инициировал данное прерываниеснова.
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80001ea:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <HAL_GPIO_EXTI_Callback+0x64>)
 80001ec:	88fb      	ldrh	r3, [r7, #6]
 80001ee:	6153      	str	r3, [r2, #20]
}
 80001f0:	bf00      	nop
 80001f2:	3710      	adds	r7, #16
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40010800 	.word	0x40010800
 80001fc:	080027d0 	.word	0x080027d0
 8000200:	080027f8 	.word	0x080027f8
 8000204:	40010c00 	.word	0x40010c00
 8000208:	40010400 	.word	0x40010400

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 fa2a 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f806 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f86a 	bl	80002f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800021c:	f000 f83e 	bl	800029c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x14>

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fc9f 	bl	8001b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd40 	bl	8000ce0 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f899 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f000 ffae 	bl	80011e4 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f885 	bl	800039c <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	4a12      	ldr	r2, [pc, #72]	@ (80002ec <MX_USART1_UART_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a6:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f001 f914 	bl	8001500 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002de:	f000 f85d 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000084 	.word	0x20000084
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b21      	ldr	r3, [pc, #132]	@ (800038c <MX_GPIO_Init+0x9c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a20      	ldr	r2, [pc, #128]	@ (800038c <MX_GPIO_Init+0x9c>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b1e      	ldr	r3, [pc, #120]	@ (800038c <MX_GPIO_Init+0x9c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <MX_GPIO_Init+0x9c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <MX_GPIO_Init+0x9c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <MX_GPIO_Init+0x9c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2104      	movs	r1, #4
 8000338:	4815      	ldr	r0, [pc, #84]	@ (8000390 <MX_GPIO_Init+0xa0>)
 800033a:	f000 fca0 	bl	8000c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800033e:	2301      	movs	r3, #1
 8000340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000342:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <MX_GPIO_Init+0xa4>)
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000346:	2302      	movs	r3, #2
 8000348:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	4619      	mov	r1, r3
 8000350:	4811      	ldr	r0, [pc, #68]	@ (8000398 <MX_GPIO_Init+0xa8>)
 8000352:	f000 faf9 	bl	8000948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000356:	2304      	movs	r3, #4
 8000358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	4808      	ldr	r0, [pc, #32]	@ (8000390 <MX_GPIO_Init+0xa0>)
 800036e:	f000 faeb 	bl	8000948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	2006      	movs	r0, #6
 8000378:	f000 faaf 	bl	80008da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800037c:	2006      	movs	r0, #6
 800037e:	f000 fac8 	bl	8000912 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	bf00      	nop
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40010c00 	.word	0x40010c00
 8000394:	10310000 	.word	0x10310000
 8000398:	40010800 	.word	0x40010800

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x8>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1c      	ldr	r2, [pc, #112]	@ (8000498 <HAL_UART_MspInit+0x8c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d131      	bne.n	8000490 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <HAL_UART_MspInit+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <HAL_UART_MspInit+0x90>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <HAL_UART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <HAL_UART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a14      	ldr	r2, [pc, #80]	@ (800049c <HAL_UART_MspInit+0x90>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <HAL_UART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800045c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <HAL_UART_MspInit+0x94>)
 8000472:	f000 fa69 	bl	8000948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <HAL_UART_MspInit+0x94>)
 800048c:	f000 fa5c 	bl	8000948 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40013800 	.word	0x40013800
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <NMI_Handler+0x4>

080004ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f8fe 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000500:	2001      	movs	r0, #1
 8000502:	f000 fbd5 	bl	8000cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}

0800050a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e00a      	b.n	8000532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051c:	f3af 8000 	nop.w
 8000520:	4601      	mov	r1, r0
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	b2ca      	uxtb	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	dbf0      	blt.n	800051c <_read+0x12>
  }

  return len;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800056a:	605a      	str	r2, [r3, #4]
  return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <_isatty>:

int _isatty(int file)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f001 fb1e 	bl	8001c14 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20005000 	.word	0x20005000
 8000604:	00000400 	.word	0x00000400
 8000608:	200000cc 	.word	0x200000cc
 800060c:	20000220 	.word	0x20000220

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff fff8 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000622:	490c      	ldr	r1, [pc, #48]	@ (8000654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000624:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000638:	4c09      	ldr	r4, [pc, #36]	@ (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f001 faeb 	bl	8001c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fddf 	bl	800020c <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000658:	08002870 	.word	0x08002870
  ldr r2, =_sbss
 800065c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000660:	20000220 	.word	0x20000220

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f923 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fe90 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f93b 	bl	800092e <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006d0:	f000 f903 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000004 	.word	0x20000004

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	@ (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000008 	.word	0x20000008
 8000714:	200000d0 	.word	0x200000d0

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	@ (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	200000d0 	.word	0x200000d0

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <__NVIC_EnableIRQ+0x34>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff2d 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff42 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff35 	bl	8000790 <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa2 	bl	8000880 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000948:	b480      	push	{r7}
 800094a:	b08b      	sub	sp, #44	@ 0x2c
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095a:	e169      	b.n	8000c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800095c:	2201      	movs	r2, #1
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	429a      	cmp	r2, r3
 8000976:	f040 8158 	bne.w	8000c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a9a      	ldr	r2, [pc, #616]	@ (8000be8 <HAL_GPIO_Init+0x2a0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d05e      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 8000984:	4a98      	ldr	r2, [pc, #608]	@ (8000be8 <HAL_GPIO_Init+0x2a0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d875      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 800098a:	4a98      	ldr	r2, [pc, #608]	@ (8000bec <HAL_GPIO_Init+0x2a4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d058      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 8000990:	4a96      	ldr	r2, [pc, #600]	@ (8000bec <HAL_GPIO_Init+0x2a4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d86f      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 8000996:	4a96      	ldr	r2, [pc, #600]	@ (8000bf0 <HAL_GPIO_Init+0x2a8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d052      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 800099c:	4a94      	ldr	r2, [pc, #592]	@ (8000bf0 <HAL_GPIO_Init+0x2a8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d869      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009a2:	4a94      	ldr	r2, [pc, #592]	@ (8000bf4 <HAL_GPIO_Init+0x2ac>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d04c      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 80009a8:	4a92      	ldr	r2, [pc, #584]	@ (8000bf4 <HAL_GPIO_Init+0x2ac>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d863      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009ae:	4a92      	ldr	r2, [pc, #584]	@ (8000bf8 <HAL_GPIO_Init+0x2b0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d046      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
 80009b4:	4a90      	ldr	r2, [pc, #576]	@ (8000bf8 <HAL_GPIO_Init+0x2b0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d85d      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d82a      	bhi.n	8000a14 <HAL_GPIO_Init+0xcc>
 80009be:	2b12      	cmp	r3, #18
 80009c0:	d859      	bhi.n	8000a76 <HAL_GPIO_Init+0x12e>
 80009c2:	a201      	add	r2, pc, #4	@ (adr r2, 80009c8 <HAL_GPIO_Init+0x80>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a1d 	.word	0x08000a1d
 80009d0:	08000a2f 	.word	0x08000a2f
 80009d4:	08000a71 	.word	0x08000a71
 80009d8:	08000a77 	.word	0x08000a77
 80009dc:	08000a77 	.word	0x08000a77
 80009e0:	08000a77 	.word	0x08000a77
 80009e4:	08000a77 	.word	0x08000a77
 80009e8:	08000a77 	.word	0x08000a77
 80009ec:	08000a77 	.word	0x08000a77
 80009f0:	08000a77 	.word	0x08000a77
 80009f4:	08000a77 	.word	0x08000a77
 80009f8:	08000a77 	.word	0x08000a77
 80009fc:	08000a77 	.word	0x08000a77
 8000a00:	08000a77 	.word	0x08000a77
 8000a04:	08000a77 	.word	0x08000a77
 8000a08:	08000a77 	.word	0x08000a77
 8000a0c:	08000a25 	.word	0x08000a25
 8000a10:	08000a39 	.word	0x08000a39
 8000a14:	4a79      	ldr	r2, [pc, #484]	@ (8000bfc <HAL_GPIO_Init+0x2b4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a1a:	e02c      	b.n	8000a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e029      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e024      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	3308      	adds	r3, #8
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e01f      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	330c      	adds	r3, #12
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e01a      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e013      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	611a      	str	r2, [r3, #16]
          break;
 8000a62:	e009      	b.n	8000a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2308      	movs	r3, #8
 8000a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	615a      	str	r2, [r3, #20]
          break;
 8000a6e:	e003      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x130>
          break;
 8000a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2bff      	cmp	r3, #255	@ 0xff
 8000a7c:	d801      	bhi.n	8000a82 <HAL_GPIO_Init+0x13a>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	e001      	b.n	8000a86 <HAL_GPIO_Init+0x13e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3304      	adds	r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d802      	bhi.n	8000a94 <HAL_GPIO_Init+0x14c>
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_Init+0x152>
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	3b08      	subs	r3, #8
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	6a39      	ldr	r1, [r7, #32]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 80b1 	beq.w	8000c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c00 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ae0:	4a48      	ldr	r2, [pc, #288]	@ (8000c04 <HAL_GPIO_Init+0x2bc>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	220f      	movs	r2, #15
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a40      	ldr	r2, [pc, #256]	@ (8000c08 <HAL_GPIO_Init+0x2c0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d013      	beq.n	8000b34 <HAL_GPIO_Init+0x1ec>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c0c <HAL_GPIO_Init+0x2c4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1e8>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3e      	ldr	r2, [pc, #248]	@ (8000c10 <HAL_GPIO_Init+0x2c8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1e4>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c14 <HAL_GPIO_Init+0x2cc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1e0>
 8000b24:	2303      	movs	r3, #3
 8000b26:	e006      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	e004      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <HAL_GPIO_Init+0x1ee>
 8000b34:	2300      	movs	r3, #0
 8000b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b38:	f002 0203 	and.w	r2, r2, #3
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b46:	492f      	ldr	r1, [pc, #188]	@ (8000c04 <HAL_GPIO_Init+0x2bc>)
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b60:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	492c      	ldr	r1, [pc, #176]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	608b      	str	r3, [r1, #8]
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4928      	ldr	r1, [pc, #160]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	4922      	ldr	r1, [pc, #136]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	60cb      	str	r3, [r1, #12]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	491e      	ldr	r1, [pc, #120]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4918      	ldr	r1, [pc, #96]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4914      	ldr	r1, [pc, #80]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d021      	beq.n	8000c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	490e      	ldr	r1, [pc, #56]	@ (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
 8000be4:	e021      	b.n	8000c2a <HAL_GPIO_Init+0x2e2>
 8000be6:	bf00      	nop
 8000be8:	10320000 	.word	0x10320000
 8000bec:	10310000 	.word	0x10310000
 8000bf0:	10220000 	.word	0x10220000
 8000bf4:	10210000 	.word	0x10210000
 8000bf8:	10120000 	.word	0x10120000
 8000bfc:	10110000 	.word	0x10110000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40011400 	.word	0x40011400
 8000c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <HAL_GPIO_Init+0x304>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4909      	ldr	r1, [pc, #36]	@ (8000c4c <HAL_GPIO_Init+0x304>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f47f ae8e 	bne.w	800095c <HAL_GPIO_Init+0x14>
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	372c      	adds	r7, #44	@ 0x2c
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e001      	b.n	8000c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	807b      	strh	r3, [r7, #2]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c8e:	787b      	ldrb	r3, [r7, #1]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c9a:	e003      	b.n	8000ca4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	041a      	lsls	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa68 	bl	80001a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e272      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8087 	beq.w	8000e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d00:	4b92      	ldr	r3, [pc, #584]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d00c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d112      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5e>
 8000d18:	4b8c      	ldr	r3, [pc, #560]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d24:	d10b      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	4b89      	ldr	r3, [pc, #548]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06c      	beq.n	8000e0c <HAL_RCC_OscConfig+0x12c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d168      	bne.n	8000e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e24c      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d46:	d106      	bne.n	8000d56 <HAL_RCC_OscConfig+0x76>
 8000d48:	4b80      	ldr	r3, [pc, #512]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e02e      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x98>
 8000d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7a      	ldr	r2, [pc, #488]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b78      	ldr	r3, [pc, #480]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a77      	ldr	r2, [pc, #476]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e01d      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d80:	d10c      	bne.n	8000d9c <HAL_RCC_OscConfig+0xbc>
 8000d82:	4b72      	ldr	r3, [pc, #456]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a71      	ldr	r2, [pc, #452]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a6e      	ldr	r2, [pc, #440]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e00b      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b68      	ldr	r3, [pc, #416]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a67      	ldr	r2, [pc, #412]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d013      	beq.n	8000de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fcac 	bl	8000718 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fca8 	bl	8000718 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	@ 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e200      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0xe4>
 8000de2:	e014      	b.n	8000e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc98 	bl	8000718 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fc94 	bl	8000718 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	@ 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e1ec      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	4b53      	ldr	r3, [pc, #332]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x10c>
 8000e0a:	e000      	b.n	8000e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d063      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00b      	beq.n	8000e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e26:	4b49      	ldr	r3, [pc, #292]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d11c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x18c>
 8000e32:	4b46      	ldr	r3, [pc, #280]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d116      	bne.n	8000e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	4b43      	ldr	r3, [pc, #268]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x176>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e1c0      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4939      	ldr	r1, [pc, #228]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6a:	e03a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d020      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e74:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fc4d 	bl	8000718 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e82:	f7ff fc49 	bl	8000718 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e1a1      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4927      	ldr	r1, [pc, #156]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	600b      	str	r3, [r1, #0]
 8000eb4:	e015      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fc2c 	bl	8000718 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc28 	bl	8000718 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e180      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d03a      	beq.n	8000f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d019      	beq.n	8000f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc0c 	bl	8000718 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc08 	bl	8000718 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e160      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f0      	beq.n	8000f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 face 	bl	80014c4 <RCC_Delay>
 8000f28:	e01c      	b.n	8000f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fbf2 	bl	8000718 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f36:	e00f      	b.n	8000f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbee 	bl	8000718 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d908      	bls.n	8000f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e146      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	42420000 	.word	0x42420000
 8000f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f58:	4b92      	ldr	r3, [pc, #584]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e9      	bne.n	8000f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a6 	beq.w	80010be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f76:	4b8b      	ldr	r3, [pc, #556]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b88      	ldr	r3, [pc, #544]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a87      	ldr	r2, [pc, #540]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b85      	ldr	r3, [pc, #532]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b82      	ldr	r3, [pc, #520]	@ (80011a8 <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000faa:	4b7f      	ldr	r3, [pc, #508]	@ (80011a8 <HAL_RCC_OscConfig+0x4c8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7e      	ldr	r2, [pc, #504]	@ (80011a8 <HAL_RCC_OscConfig+0x4c8>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fbaf 	bl	8000718 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fbe:	f7ff fbab 	bl	8000718 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	@ 0x64
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e103      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4b75      	ldr	r3, [pc, #468]	@ (80011a8 <HAL_RCC_OscConfig+0x4c8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x312>
 8000fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6213      	str	r3, [r2, #32]
 8000ff0:	e02d      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x334>
 8000ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a69      	ldr	r2, [pc, #420]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	4b67      	ldr	r3, [pc, #412]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a66      	ldr	r2, [pc, #408]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	6213      	str	r3, [r2, #32]
 8001012:	e01c      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d10c      	bne.n	8001036 <HAL_RCC_OscConfig+0x356>
 800101c:	4b61      	ldr	r3, [pc, #388]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a60      	ldr	r2, [pc, #384]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	4b5e      	ldr	r3, [pc, #376]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a5d      	ldr	r2, [pc, #372]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	e00b      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8001036:	4b5b      	ldr	r3, [pc, #364]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a5a      	ldr	r2, [pc, #360]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	4b58      	ldr	r3, [pc, #352]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a57      	ldr	r2, [pc, #348]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d015      	beq.n	8001082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb5f 	bl	8000718 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff fb5b 	bl	8000718 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e0b1      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0ee      	beq.n	800105e <HAL_RCC_OscConfig+0x37e>
 8001080:	e014      	b.n	80010ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fb49 	bl	8000718 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108a:	f7ff fb45 	bl	8000718 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e09b      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1ee      	bne.n	800108a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d105      	bne.n	80010be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b2:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a3b      	ldr	r2, [pc, #236]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c8:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d061      	beq.n	8001198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d146      	bne.n	800116a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <HAL_RCC_OscConfig+0x4cc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb19 	bl	8000718 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fb15 	bl	8000718 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e06d      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001110:	d108      	bne.n	8001124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4921      	ldr	r1, [pc, #132]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a19      	ldr	r1, [r3, #32]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	430b      	orrs	r3, r1
 8001136:	491b      	ldr	r1, [pc, #108]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_RCC_OscConfig+0x4cc>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fae9 	bl	8000718 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fae5 	bl	8000718 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e03d      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x46a>
 8001168:	e035      	b.n	80011d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_RCC_OscConfig+0x4cc>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fad2 	bl	8000718 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff face 	bl	8000718 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e026      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x498>
 8001196:	e01e      	b.n	80011d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d107      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e019      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
 80011ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_RCC_OscConfig+0x500>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0d0      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f8:	4b6a      	ldr	r3, [pc, #424]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d910      	bls.n	8001228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b67      	ldr	r3, [pc, #412]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	4965      	ldr	r1, [pc, #404]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0b8      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001240:	4b59      	ldr	r3, [pc, #356]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a58      	ldr	r2, [pc, #352]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800124a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001258:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001264:	4b50      	ldr	r3, [pc, #320]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	494d      	ldr	r1, [pc, #308]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d040      	beq.n	8001304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d115      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e07f      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a2:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e073      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06b      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4b39      	ldr	r3, [pc, #228]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f023 0203 	bic.w	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4936      	ldr	r1, [pc, #216]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d4:	f7ff fa20 	bl	8000718 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fa1c 	bl	8000718 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e053      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 020c 	and.w	r2, r3, #12
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429a      	cmp	r2, r3
 8001302:	d1eb      	bne.n	80012dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001304:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d210      	bcs.n	8001334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 0207 	bic.w	r2, r3, #7
 800131a:	4922      	ldr	r1, [pc, #136]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d001      	beq.n	8001334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e032      	b.n	800139a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4916      	ldr	r1, [pc, #88]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	490e      	ldr	r1, [pc, #56]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001372:	f000 f821 	bl	80013b8 <HAL_RCC_GetSysClockFreq>
 8001376:	4602      	mov	r2, r0
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	490a      	ldr	r1, [pc, #40]	@ (80013ac <HAL_RCC_ClockConfig+0x1c8>)
 8001384:	5ccb      	ldrb	r3, [r1, r3]
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_RCC_ClockConfig+0x1cc>)
 800138c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f97e 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	08002808 	.word	0x08002808
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_RCC_GetSysClockFreq+0x94>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d002      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x30>
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_GetSysClockFreq+0x36>
 80013e6:	e027      	b.n	8001438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ea:	613b      	str	r3, [r7, #16]
      break;
 80013ec:	e027      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_RCC_GetSysClockFreq+0x94>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0c5b      	lsrs	r3, r3, #17
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x98>)
 800141a:	fb03 f202 	mul.w	r2, r3, r2
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e004      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <HAL_RCC_GetSysClockFreq+0xa4>)
 800142c:	fb02 f303 	mul.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	613b      	str	r3, [r7, #16]
      break;
 8001436:	e002      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x98>)
 800143a:	613b      	str	r3, [r7, #16]
      break;
 800143c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800143e:	693b      	ldr	r3, [r7, #16]
}
 8001440:	4618      	mov	r0, r3
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	007a1200 	.word	0x007a1200
 8001454:	08002820 	.word	0x08002820
 8001458:	08002830 	.word	0x08002830
 800145c:	003d0900 	.word	0x003d0900

08001460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <HAL_RCC_GetHCLKFreq+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000000 	.word	0x20000000

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001478:	f7ff fff2 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	@ (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	08002818 	.word	0x08002818

0800149c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a0:	f7ff ffde 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0adb      	lsrs	r3, r3, #11
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4903      	ldr	r1, [pc, #12]	@ (80014c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08002818 	.word	0x08002818

080014c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <RCC_Delay+0x34>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <RCC_Delay+0x38>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0a5b      	lsrs	r3, r3, #9
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e0:	bf00      	nop
  }
  while (Delay --);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	60fa      	str	r2, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <RCC_Delay+0x1c>
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000000 	.word	0x20000000
 80014fc:	10624dd3 	.word	0x10624dd3

08001500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e042      	b.n	8001598 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7fe ff70 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	@ 0x24
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f971 	bl	800182c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d175      	bne.n	80016ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_UART_Transmit+0x2c>
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e06e      	b.n	80016ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2221      	movs	r2, #33	@ 0x21
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015de:	f7ff f89b 	bl	8000718 <HAL_GetTick>
 80015e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	88fa      	ldrh	r2, [r7, #6]
 80015ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015f8:	d108      	bne.n	800160c <HAL_UART_Transmit+0x6c>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d104      	bne.n	800160c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e003      	b.n	8001614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001614:	e02e      	b.n	8001674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2200      	movs	r2, #0
 800161e:	2180      	movs	r1, #128	@ 0x80
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f848 	bl	80016b6 <UART_WaitOnFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e03a      	b.n	80016ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10b      	bne.n	8001656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800164c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	3302      	adds	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	e007      	b.n	8001666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3301      	adds	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001678:	b29b      	uxth	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1cb      	bne.n	8001616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2200      	movs	r2, #0
 8001686:	2140      	movs	r1, #64	@ 0x40
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f814 	bl	80016b6 <UART_WaitOnFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e006      	b.n	80016ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4613      	mov	r3, r2
 80016c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016c6:	e03b      	b.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ce:	d037      	beq.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d0:	f7ff f822 	bl	8000718 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	6a3a      	ldr	r2, [r7, #32]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d302      	bcc.n	80016e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e03a      	b.n	8001760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b80      	cmp	r3, #128	@ 0x80
 80016fc:	d020      	beq.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b40      	cmp	r3, #64	@ 0x40
 8001702:	d01d      	beq.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b08      	cmp	r3, #8
 8001710:	d116      	bne.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f81d 	bl	8001768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2208      	movs	r2, #8
 8001732:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e00f      	b.n	8001760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4013      	ands	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	429a      	cmp	r2, r3
 800175c:	d0b4      	beq.n	80016c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001768:	b480      	push	{r7}
 800176a:	b095      	sub	sp, #84	@ 0x54
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	330c      	adds	r3, #12
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177a:	e853 3f00 	ldrex	r3, [r3]
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	330c      	adds	r3, #12
 800178e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001790:	643a      	str	r2, [r7, #64]	@ 0x40
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001798:	e841 2300 	strex	r3, r2, [r1]
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800179e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e5      	bne.n	8001770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3314      	adds	r3, #20
 80017aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	e853 3f00 	ldrex	r3, [r3]
 80017b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3314      	adds	r3, #20
 80017c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017cc:	e841 2300 	strex	r3, r2, [r1]
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e5      	bne.n	80017a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d119      	bne.n	8001814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	330c      	adds	r3, #12
 80017e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	e853 3f00 	ldrex	r3, [r3]
 80017ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f023 0310 	bic.w	r3, r3, #16
 80017f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	330c      	adds	r3, #12
 80017fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001800:	61ba      	str	r2, [r7, #24]
 8001802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	e841 2300 	strex	r3, r2, [r1]
 800180c:	613b      	str	r3, [r7, #16]
   return(result);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e5      	bne.n	80017e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001822:	bf00      	nop
 8001824:	3754      	adds	r7, #84	@ 0x54
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001866:	f023 030c 	bic.w	r3, r3, #12
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	430b      	orrs	r3, r1
 8001872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2c      	ldr	r2, [pc, #176]	@ (8001940 <UART_SetConfig+0x114>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d103      	bne.n	800189c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001894:	f7ff fe02 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	e002      	b.n	80018a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800189c:	f7ff fdea 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80018a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	009a      	lsls	r2, r3, #2
 80018ac:	441a      	add	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <UART_SetConfig+0x118>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	0119      	lsls	r1, r3, #4
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <UART_SetConfig+0x118>)
 80018da:	fba3 0302 	umull	r0, r3, r3, r2
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2064      	movs	r0, #100	@ 0x64
 80018e2:	fb00 f303 	mul.w	r3, r0, r3
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	3332      	adds	r3, #50	@ 0x32
 80018ec:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <UART_SetConfig+0x118>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f8:	4419      	add	r1, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009a      	lsls	r2, r3, #2
 8001904:	441a      	add	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <UART_SetConfig+0x118>)
 8001912:	fba3 0302 	umull	r0, r3, r3, r2
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	fb00 f303 	mul.w	r3, r0, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	3332      	adds	r3, #50	@ 0x32
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <UART_SetConfig+0x118>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	f003 020f 	and.w	r2, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	440a      	add	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013800 	.word	0x40013800
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <std>:
 8001948:	2300      	movs	r3, #0
 800194a:	b510      	push	{r4, lr}
 800194c:	4604      	mov	r4, r0
 800194e:	e9c0 3300 	strd	r3, r3, [r0]
 8001952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001956:	6083      	str	r3, [r0, #8]
 8001958:	8181      	strh	r1, [r0, #12]
 800195a:	6643      	str	r3, [r0, #100]	@ 0x64
 800195c:	81c2      	strh	r2, [r0, #14]
 800195e:	6183      	str	r3, [r0, #24]
 8001960:	4619      	mov	r1, r3
 8001962:	2208      	movs	r2, #8
 8001964:	305c      	adds	r0, #92	@ 0x5c
 8001966:	f000 f906 	bl	8001b76 <memset>
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <std+0x58>)
 800196c:	6224      	str	r4, [r4, #32]
 800196e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <std+0x5c>)
 8001972:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <std+0x60>)
 8001976:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <std+0x64>)
 800197a:	6323      	str	r3, [r4, #48]	@ 0x30
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <std+0x68>)
 800197e:	429c      	cmp	r4, r3
 8001980:	d006      	beq.n	8001990 <std+0x48>
 8001982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001986:	4294      	cmp	r4, r2
 8001988:	d002      	beq.n	8001990 <std+0x48>
 800198a:	33d0      	adds	r3, #208	@ 0xd0
 800198c:	429c      	cmp	r4, r3
 800198e:	d105      	bne.n	800199c <std+0x54>
 8001990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001998:	f000 b966 	b.w	8001c68 <__retarget_lock_init_recursive>
 800199c:	bd10      	pop	{r4, pc}
 800199e:	bf00      	nop
 80019a0:	08001af1 	.word	0x08001af1
 80019a4:	08001b13 	.word	0x08001b13
 80019a8:	08001b4b 	.word	0x08001b4b
 80019ac:	08001b6f 	.word	0x08001b6f
 80019b0:	200000d4 	.word	0x200000d4

080019b4 <stdio_exit_handler>:
 80019b4:	4a02      	ldr	r2, [pc, #8]	@ (80019c0 <stdio_exit_handler+0xc>)
 80019b6:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <stdio_exit_handler+0x10>)
 80019b8:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <stdio_exit_handler+0x14>)
 80019ba:	f000 b869 	b.w	8001a90 <_fwalk_sglue>
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	080024fd 	.word	0x080024fd
 80019c8:	2000001c 	.word	0x2000001c

080019cc <cleanup_stdio>:
 80019cc:	6841      	ldr	r1, [r0, #4]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <cleanup_stdio+0x34>)
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4299      	cmp	r1, r3
 80019d4:	4604      	mov	r4, r0
 80019d6:	d001      	beq.n	80019dc <cleanup_stdio+0x10>
 80019d8:	f000 fd90 	bl	80024fc <_fflush_r>
 80019dc:	68a1      	ldr	r1, [r4, #8]
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <cleanup_stdio+0x38>)
 80019e0:	4299      	cmp	r1, r3
 80019e2:	d002      	beq.n	80019ea <cleanup_stdio+0x1e>
 80019e4:	4620      	mov	r0, r4
 80019e6:	f000 fd89 	bl	80024fc <_fflush_r>
 80019ea:	68e1      	ldr	r1, [r4, #12]
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <cleanup_stdio+0x3c>)
 80019ee:	4299      	cmp	r1, r3
 80019f0:	d004      	beq.n	80019fc <cleanup_stdio+0x30>
 80019f2:	4620      	mov	r0, r4
 80019f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f8:	f000 bd80 	b.w	80024fc <_fflush_r>
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	200000d4 	.word	0x200000d4
 8001a04:	2000013c 	.word	0x2000013c
 8001a08:	200001a4 	.word	0x200001a4

08001a0c <global_stdio_init.part.0>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <global_stdio_init.part.0+0x30>)
 8001a10:	4c0b      	ldr	r4, [pc, #44]	@ (8001a40 <global_stdio_init.part.0+0x34>)
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <global_stdio_init.part.0+0x38>)
 8001a14:	4620      	mov	r0, r4
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	2104      	movs	r1, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f7ff ff94 	bl	8001948 <std>
 8001a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001a24:	2201      	movs	r2, #1
 8001a26:	2109      	movs	r1, #9
 8001a28:	f7ff ff8e 	bl	8001948 <std>
 8001a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001a30:	2202      	movs	r2, #2
 8001a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a36:	2112      	movs	r1, #18
 8001a38:	f7ff bf86 	b.w	8001948 <std>
 8001a3c:	2000020c 	.word	0x2000020c
 8001a40:	200000d4 	.word	0x200000d4
 8001a44:	080019b5 	.word	0x080019b5

08001a48 <__sfp_lock_acquire>:
 8001a48:	4801      	ldr	r0, [pc, #4]	@ (8001a50 <__sfp_lock_acquire+0x8>)
 8001a4a:	f000 b90e 	b.w	8001c6a <__retarget_lock_acquire_recursive>
 8001a4e:	bf00      	nop
 8001a50:	20000215 	.word	0x20000215

08001a54 <__sfp_lock_release>:
 8001a54:	4801      	ldr	r0, [pc, #4]	@ (8001a5c <__sfp_lock_release+0x8>)
 8001a56:	f000 b909 	b.w	8001c6c <__retarget_lock_release_recursive>
 8001a5a:	bf00      	nop
 8001a5c:	20000215 	.word	0x20000215

08001a60 <__sinit>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4604      	mov	r4, r0
 8001a64:	f7ff fff0 	bl	8001a48 <__sfp_lock_acquire>
 8001a68:	6a23      	ldr	r3, [r4, #32]
 8001a6a:	b11b      	cbz	r3, 8001a74 <__sinit+0x14>
 8001a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a70:	f7ff bff0 	b.w	8001a54 <__sfp_lock_release>
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <__sinit+0x28>)
 8001a76:	6223      	str	r3, [r4, #32]
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__sinit+0x2c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f5      	bne.n	8001a6c <__sinit+0xc>
 8001a80:	f7ff ffc4 	bl	8001a0c <global_stdio_init.part.0>
 8001a84:	e7f2      	b.n	8001a6c <__sinit+0xc>
 8001a86:	bf00      	nop
 8001a88:	080019cd 	.word	0x080019cd
 8001a8c:	2000020c 	.word	0x2000020c

08001a90 <_fwalk_sglue>:
 8001a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a94:	4607      	mov	r7, r0
 8001a96:	4688      	mov	r8, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8001aa4:	d505      	bpl.n	8001ab2 <_fwalk_sglue+0x22>
 8001aa6:	6824      	ldr	r4, [r4, #0]
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d1f7      	bne.n	8001a9c <_fwalk_sglue+0xc>
 8001aac:	4630      	mov	r0, r6
 8001aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ab2:	89ab      	ldrh	r3, [r5, #12]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d907      	bls.n	8001ac8 <_fwalk_sglue+0x38>
 8001ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001abc:	3301      	adds	r3, #1
 8001abe:	d003      	beq.n	8001ac8 <_fwalk_sglue+0x38>
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	47c0      	blx	r8
 8001ac6:	4306      	orrs	r6, r0
 8001ac8:	3568      	adds	r5, #104	@ 0x68
 8001aca:	e7e9      	b.n	8001aa0 <_fwalk_sglue+0x10>

08001acc <iprintf>:
 8001acc:	b40f      	push	{r0, r1, r2, r3}
 8001ace:	b507      	push	{r0, r1, r2, lr}
 8001ad0:	4906      	ldr	r1, [pc, #24]	@ (8001aec <iprintf+0x20>)
 8001ad2:	ab04      	add	r3, sp, #16
 8001ad4:	6808      	ldr	r0, [r1, #0]
 8001ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ada:	6881      	ldr	r1, [r0, #8]
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f000 f9e5 	bl	8001eac <_vfiprintf_r>
 8001ae2:	b003      	add	sp, #12
 8001ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ae8:	b004      	add	sp, #16
 8001aea:	4770      	bx	lr
 8001aec:	20000018 	.word	0x20000018

08001af0 <__sread>:
 8001af0:	b510      	push	{r4, lr}
 8001af2:	460c      	mov	r4, r1
 8001af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af8:	f000 f868 	bl	8001bcc <_read_r>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	bfab      	itete	ge
 8001b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001b02:	89a3      	ldrhlt	r3, [r4, #12]
 8001b04:	181b      	addge	r3, r3, r0
 8001b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001b0a:	bfac      	ite	ge
 8001b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001b0e:	81a3      	strhlt	r3, [r4, #12]
 8001b10:	bd10      	pop	{r4, pc}

08001b12 <__swrite>:
 8001b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b16:	461f      	mov	r7, r3
 8001b18:	898b      	ldrh	r3, [r1, #12]
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4616      	mov	r6, r2
 8001b22:	d505      	bpl.n	8001b30 <__swrite+0x1e>
 8001b24:	2302      	movs	r3, #2
 8001b26:	2200      	movs	r2, #0
 8001b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2c:	f000 f83c 	bl	8001ba8 <_lseek_r>
 8001b30:	89a3      	ldrh	r3, [r4, #12]
 8001b32:	4632      	mov	r2, r6
 8001b34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b38:	81a3      	strh	r3, [r4, #12]
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b46:	f000 b853 	b.w	8001bf0 <_write_r>

08001b4a <__sseek>:
 8001b4a:	b510      	push	{r4, lr}
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b52:	f000 f829 	bl	8001ba8 <_lseek_r>
 8001b56:	1c43      	adds	r3, r0, #1
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	bf15      	itete	ne
 8001b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b66:	81a3      	strheq	r3, [r4, #12]
 8001b68:	bf18      	it	ne
 8001b6a:	81a3      	strhne	r3, [r4, #12]
 8001b6c:	bd10      	pop	{r4, pc}

08001b6e <__sclose>:
 8001b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b72:	f000 b809 	b.w	8001b88 <_close_r>

08001b76 <memset>:
 8001b76:	4603      	mov	r3, r0
 8001b78:	4402      	add	r2, r0
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <memset+0xa>
 8001b7e:	4770      	bx	lr
 8001b80:	f803 1b01 	strb.w	r1, [r3], #1
 8001b84:	e7f9      	b.n	8001b7a <memset+0x4>
	...

08001b88 <_close_r>:
 8001b88:	b538      	push	{r3, r4, r5, lr}
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	4d05      	ldr	r5, [pc, #20]	@ (8001ba4 <_close_r+0x1c>)
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	602b      	str	r3, [r5, #0]
 8001b94:	f7fe fcd6 	bl	8000544 <_close>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_close_r+0x1a>
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_close_r+0x1a>
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	20000210 	.word	0x20000210

08001ba8 <_lseek_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4d05      	ldr	r5, [pc, #20]	@ (8001bc8 <_lseek_r+0x20>)
 8001bb4:	602a      	str	r2, [r5, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7fe fce8 	bl	800058c <_lseek>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_lseek_r+0x1e>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_lseek_r+0x1e>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000210 	.word	0x20000210

08001bcc <_read_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4d05      	ldr	r5, [pc, #20]	@ (8001bec <_read_r+0x20>)
 8001bd8:	602a      	str	r2, [r5, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f7fe fc95 	bl	800050a <_read>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_read_r+0x1e>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_read_r+0x1e>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	20000210 	.word	0x20000210

08001bf0 <_write_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4d05      	ldr	r5, [pc, #20]	@ (8001c10 <_write_r+0x20>)
 8001bfc:	602a      	str	r2, [r5, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7fe faa4 	bl	800014c <_write>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_write_r+0x1e>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_write_r+0x1e>
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	20000210 	.word	0x20000210

08001c14 <__errno>:
 8001c14:	4b01      	ldr	r3, [pc, #4]	@ (8001c1c <__errno+0x8>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000018 	.word	0x20000018

08001c20 <__libc_init_array>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	2600      	movs	r6, #0
 8001c24:	4d0c      	ldr	r5, [pc, #48]	@ (8001c58 <__libc_init_array+0x38>)
 8001c26:	4c0d      	ldr	r4, [pc, #52]	@ (8001c5c <__libc_init_array+0x3c>)
 8001c28:	1b64      	subs	r4, r4, r5
 8001c2a:	10a4      	asrs	r4, r4, #2
 8001c2c:	42a6      	cmp	r6, r4
 8001c2e:	d109      	bne.n	8001c44 <__libc_init_array+0x24>
 8001c30:	f000 fdc2 	bl	80027b8 <_init>
 8001c34:	2600      	movs	r6, #0
 8001c36:	4d0a      	ldr	r5, [pc, #40]	@ (8001c60 <__libc_init_array+0x40>)
 8001c38:	4c0a      	ldr	r4, [pc, #40]	@ (8001c64 <__libc_init_array+0x44>)
 8001c3a:	1b64      	subs	r4, r4, r5
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	42a6      	cmp	r6, r4
 8001c40:	d105      	bne.n	8001c4e <__libc_init_array+0x2e>
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c48:	4798      	blx	r3
 8001c4a:	3601      	adds	r6, #1
 8001c4c:	e7ee      	b.n	8001c2c <__libc_init_array+0xc>
 8001c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c52:	4798      	blx	r3
 8001c54:	3601      	adds	r6, #1
 8001c56:	e7f2      	b.n	8001c3e <__libc_init_array+0x1e>
 8001c58:	08002868 	.word	0x08002868
 8001c5c:	08002868 	.word	0x08002868
 8001c60:	08002868 	.word	0x08002868
 8001c64:	0800286c 	.word	0x0800286c

08001c68 <__retarget_lock_init_recursive>:
 8001c68:	4770      	bx	lr

08001c6a <__retarget_lock_acquire_recursive>:
 8001c6a:	4770      	bx	lr

08001c6c <__retarget_lock_release_recursive>:
 8001c6c:	4770      	bx	lr
	...

08001c70 <_free_r>:
 8001c70:	b538      	push	{r3, r4, r5, lr}
 8001c72:	4605      	mov	r5, r0
 8001c74:	2900      	cmp	r1, #0
 8001c76:	d040      	beq.n	8001cfa <_free_r+0x8a>
 8001c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c7c:	1f0c      	subs	r4, r1, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bfb8      	it	lt
 8001c82:	18e4      	addlt	r4, r4, r3
 8001c84:	f000 f8de 	bl	8001e44 <__malloc_lock>
 8001c88:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <_free_r+0x8c>)
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	b933      	cbnz	r3, 8001c9c <_free_r+0x2c>
 8001c8e:	6063      	str	r3, [r4, #4]
 8001c90:	6014      	str	r4, [r2, #0]
 8001c92:	4628      	mov	r0, r5
 8001c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c98:	f000 b8da 	b.w	8001e50 <__malloc_unlock>
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	d908      	bls.n	8001cb2 <_free_r+0x42>
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	1821      	adds	r1, r4, r0
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	bf01      	itttt	eq
 8001ca8:	6819      	ldreq	r1, [r3, #0]
 8001caa:	685b      	ldreq	r3, [r3, #4]
 8001cac:	1809      	addeq	r1, r1, r0
 8001cae:	6021      	streq	r1, [r4, #0]
 8001cb0:	e7ed      	b.n	8001c8e <_free_r+0x1e>
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	b10b      	cbz	r3, 8001cbc <_free_r+0x4c>
 8001cb8:	42a3      	cmp	r3, r4
 8001cba:	d9fa      	bls.n	8001cb2 <_free_r+0x42>
 8001cbc:	6811      	ldr	r1, [r2, #0]
 8001cbe:	1850      	adds	r0, r2, r1
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d10b      	bne.n	8001cdc <_free_r+0x6c>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	4401      	add	r1, r0
 8001cc8:	1850      	adds	r0, r2, r1
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	d1e0      	bne.n	8001c92 <_free_r+0x22>
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4408      	add	r0, r1
 8001cd6:	6010      	str	r0, [r2, #0]
 8001cd8:	6053      	str	r3, [r2, #4]
 8001cda:	e7da      	b.n	8001c92 <_free_r+0x22>
 8001cdc:	d902      	bls.n	8001ce4 <_free_r+0x74>
 8001cde:	230c      	movs	r3, #12
 8001ce0:	602b      	str	r3, [r5, #0]
 8001ce2:	e7d6      	b.n	8001c92 <_free_r+0x22>
 8001ce4:	6820      	ldr	r0, [r4, #0]
 8001ce6:	1821      	adds	r1, r4, r0
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	bf01      	itttt	eq
 8001cec:	6819      	ldreq	r1, [r3, #0]
 8001cee:	685b      	ldreq	r3, [r3, #4]
 8001cf0:	1809      	addeq	r1, r1, r0
 8001cf2:	6021      	streq	r1, [r4, #0]
 8001cf4:	6063      	str	r3, [r4, #4]
 8001cf6:	6054      	str	r4, [r2, #4]
 8001cf8:	e7cb      	b.n	8001c92 <_free_r+0x22>
 8001cfa:	bd38      	pop	{r3, r4, r5, pc}
 8001cfc:	2000021c 	.word	0x2000021c

08001d00 <sbrk_aligned>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	4e0f      	ldr	r6, [pc, #60]	@ (8001d40 <sbrk_aligned+0x40>)
 8001d04:	460c      	mov	r4, r1
 8001d06:	6831      	ldr	r1, [r6, #0]
 8001d08:	4605      	mov	r5, r0
 8001d0a:	b911      	cbnz	r1, 8001d12 <sbrk_aligned+0x12>
 8001d0c:	f000 fcb2 	bl	8002674 <_sbrk_r>
 8001d10:	6030      	str	r0, [r6, #0]
 8001d12:	4621      	mov	r1, r4
 8001d14:	4628      	mov	r0, r5
 8001d16:	f000 fcad 	bl	8002674 <_sbrk_r>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	d103      	bne.n	8001d26 <sbrk_aligned+0x26>
 8001d1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001d22:	4620      	mov	r0, r4
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	1cc4      	adds	r4, r0, #3
 8001d28:	f024 0403 	bic.w	r4, r4, #3
 8001d2c:	42a0      	cmp	r0, r4
 8001d2e:	d0f8      	beq.n	8001d22 <sbrk_aligned+0x22>
 8001d30:	1a21      	subs	r1, r4, r0
 8001d32:	4628      	mov	r0, r5
 8001d34:	f000 fc9e 	bl	8002674 <_sbrk_r>
 8001d38:	3001      	adds	r0, #1
 8001d3a:	d1f2      	bne.n	8001d22 <sbrk_aligned+0x22>
 8001d3c:	e7ef      	b.n	8001d1e <sbrk_aligned+0x1e>
 8001d3e:	bf00      	nop
 8001d40:	20000218 	.word	0x20000218

08001d44 <_malloc_r>:
 8001d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d48:	1ccd      	adds	r5, r1, #3
 8001d4a:	f025 0503 	bic.w	r5, r5, #3
 8001d4e:	3508      	adds	r5, #8
 8001d50:	2d0c      	cmp	r5, #12
 8001d52:	bf38      	it	cc
 8001d54:	250c      	movcc	r5, #12
 8001d56:	2d00      	cmp	r5, #0
 8001d58:	4606      	mov	r6, r0
 8001d5a:	db01      	blt.n	8001d60 <_malloc_r+0x1c>
 8001d5c:	42a9      	cmp	r1, r5
 8001d5e:	d904      	bls.n	8001d6a <_malloc_r+0x26>
 8001d60:	230c      	movs	r3, #12
 8001d62:	6033      	str	r3, [r6, #0]
 8001d64:	2000      	movs	r0, #0
 8001d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e40 <_malloc_r+0xfc>
 8001d6e:	f000 f869 	bl	8001e44 <__malloc_lock>
 8001d72:	f8d8 3000 	ldr.w	r3, [r8]
 8001d76:	461c      	mov	r4, r3
 8001d78:	bb44      	cbnz	r4, 8001dcc <_malloc_r+0x88>
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff ffbf 	bl	8001d00 <sbrk_aligned>
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	4604      	mov	r4, r0
 8001d86:	d158      	bne.n	8001e3a <_malloc_r+0xf6>
 8001d88:	f8d8 4000 	ldr.w	r4, [r8]
 8001d8c:	4627      	mov	r7, r4
 8001d8e:	2f00      	cmp	r7, #0
 8001d90:	d143      	bne.n	8001e1a <_malloc_r+0xd6>
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	d04b      	beq.n	8001e2e <_malloc_r+0xea>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	4639      	mov	r1, r7
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	eb04 0903 	add.w	r9, r4, r3
 8001da0:	f000 fc68 	bl	8002674 <_sbrk_r>
 8001da4:	4581      	cmp	r9, r0
 8001da6:	d142      	bne.n	8001e2e <_malloc_r+0xea>
 8001da8:	6821      	ldr	r1, [r4, #0]
 8001daa:	4630      	mov	r0, r6
 8001dac:	1a6d      	subs	r5, r5, r1
 8001dae:	4629      	mov	r1, r5
 8001db0:	f7ff ffa6 	bl	8001d00 <sbrk_aligned>
 8001db4:	3001      	adds	r0, #1
 8001db6:	d03a      	beq.n	8001e2e <_malloc_r+0xea>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	442b      	add	r3, r5
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	bb62      	cbnz	r2, 8001e20 <_malloc_r+0xdc>
 8001dc6:	f8c8 7000 	str.w	r7, [r8]
 8001dca:	e00f      	b.n	8001dec <_malloc_r+0xa8>
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	1b52      	subs	r2, r2, r5
 8001dd0:	d420      	bmi.n	8001e14 <_malloc_r+0xd0>
 8001dd2:	2a0b      	cmp	r2, #11
 8001dd4:	d917      	bls.n	8001e06 <_malloc_r+0xc2>
 8001dd6:	1961      	adds	r1, r4, r5
 8001dd8:	42a3      	cmp	r3, r4
 8001dda:	6025      	str	r5, [r4, #0]
 8001ddc:	bf18      	it	ne
 8001dde:	6059      	strne	r1, [r3, #4]
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	bf08      	it	eq
 8001de4:	f8c8 1000 	streq.w	r1, [r8]
 8001de8:	5162      	str	r2, [r4, r5]
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	4630      	mov	r0, r6
 8001dee:	f000 f82f 	bl	8001e50 <__malloc_unlock>
 8001df2:	f104 000b 	add.w	r0, r4, #11
 8001df6:	1d23      	adds	r3, r4, #4
 8001df8:	f020 0007 	bic.w	r0, r0, #7
 8001dfc:	1ac2      	subs	r2, r0, r3
 8001dfe:	bf1c      	itt	ne
 8001e00:	1a1b      	subne	r3, r3, r0
 8001e02:	50a3      	strne	r3, [r4, r2]
 8001e04:	e7af      	b.n	8001d66 <_malloc_r+0x22>
 8001e06:	6862      	ldr	r2, [r4, #4]
 8001e08:	42a3      	cmp	r3, r4
 8001e0a:	bf0c      	ite	eq
 8001e0c:	f8c8 2000 	streq.w	r2, [r8]
 8001e10:	605a      	strne	r2, [r3, #4]
 8001e12:	e7eb      	b.n	8001dec <_malloc_r+0xa8>
 8001e14:	4623      	mov	r3, r4
 8001e16:	6864      	ldr	r4, [r4, #4]
 8001e18:	e7ae      	b.n	8001d78 <_malloc_r+0x34>
 8001e1a:	463c      	mov	r4, r7
 8001e1c:	687f      	ldr	r7, [r7, #4]
 8001e1e:	e7b6      	b.n	8001d8e <_malloc_r+0x4a>
 8001e20:	461a      	mov	r2, r3
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d1fb      	bne.n	8001e20 <_malloc_r+0xdc>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6053      	str	r3, [r2, #4]
 8001e2c:	e7de      	b.n	8001dec <_malloc_r+0xa8>
 8001e2e:	230c      	movs	r3, #12
 8001e30:	4630      	mov	r0, r6
 8001e32:	6033      	str	r3, [r6, #0]
 8001e34:	f000 f80c 	bl	8001e50 <__malloc_unlock>
 8001e38:	e794      	b.n	8001d64 <_malloc_r+0x20>
 8001e3a:	6005      	str	r5, [r0, #0]
 8001e3c:	e7d6      	b.n	8001dec <_malloc_r+0xa8>
 8001e3e:	bf00      	nop
 8001e40:	2000021c 	.word	0x2000021c

08001e44 <__malloc_lock>:
 8001e44:	4801      	ldr	r0, [pc, #4]	@ (8001e4c <__malloc_lock+0x8>)
 8001e46:	f7ff bf10 	b.w	8001c6a <__retarget_lock_acquire_recursive>
 8001e4a:	bf00      	nop
 8001e4c:	20000214 	.word	0x20000214

08001e50 <__malloc_unlock>:
 8001e50:	4801      	ldr	r0, [pc, #4]	@ (8001e58 <__malloc_unlock+0x8>)
 8001e52:	f7ff bf0b 	b.w	8001c6c <__retarget_lock_release_recursive>
 8001e56:	bf00      	nop
 8001e58:	20000214 	.word	0x20000214

08001e5c <__sfputc_r>:
 8001e5c:	6893      	ldr	r3, [r2, #8]
 8001e5e:	b410      	push	{r4}
 8001e60:	3b01      	subs	r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	6093      	str	r3, [r2, #8]
 8001e66:	da07      	bge.n	8001e78 <__sfputc_r+0x1c>
 8001e68:	6994      	ldr	r4, [r2, #24]
 8001e6a:	42a3      	cmp	r3, r4
 8001e6c:	db01      	blt.n	8001e72 <__sfputc_r+0x16>
 8001e6e:	290a      	cmp	r1, #10
 8001e70:	d102      	bne.n	8001e78 <__sfputc_r+0x1c>
 8001e72:	bc10      	pop	{r4}
 8001e74:	f000 bb6a 	b.w	800254c <__swbuf_r>
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	1c58      	adds	r0, r3, #1
 8001e7c:	6010      	str	r0, [r2, #0]
 8001e7e:	7019      	strb	r1, [r3, #0]
 8001e80:	4608      	mov	r0, r1
 8001e82:	bc10      	pop	{r4}
 8001e84:	4770      	bx	lr

08001e86 <__sfputs_r>:
 8001e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e88:	4606      	mov	r6, r0
 8001e8a:	460f      	mov	r7, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	18d5      	adds	r5, r2, r3
 8001e90:	42ac      	cmp	r4, r5
 8001e92:	d101      	bne.n	8001e98 <__sfputs_r+0x12>
 8001e94:	2000      	movs	r0, #0
 8001e96:	e007      	b.n	8001ea8 <__sfputs_r+0x22>
 8001e98:	463a      	mov	r2, r7
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea0:	f7ff ffdc 	bl	8001e5c <__sfputc_r>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d1f3      	bne.n	8001e90 <__sfputs_r+0xa>
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001eac <_vfiprintf_r>:
 8001eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb0:	460d      	mov	r5, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	4698      	mov	r8, r3
 8001eb6:	4606      	mov	r6, r0
 8001eb8:	b09d      	sub	sp, #116	@ 0x74
 8001eba:	b118      	cbz	r0, 8001ec4 <_vfiprintf_r+0x18>
 8001ebc:	6a03      	ldr	r3, [r0, #32]
 8001ebe:	b90b      	cbnz	r3, 8001ec4 <_vfiprintf_r+0x18>
 8001ec0:	f7ff fdce 	bl	8001a60 <__sinit>
 8001ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ec6:	07d9      	lsls	r1, r3, #31
 8001ec8:	d405      	bmi.n	8001ed6 <_vfiprintf_r+0x2a>
 8001eca:	89ab      	ldrh	r3, [r5, #12]
 8001ecc:	059a      	lsls	r2, r3, #22
 8001ece:	d402      	bmi.n	8001ed6 <_vfiprintf_r+0x2a>
 8001ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ed2:	f7ff feca 	bl	8001c6a <__retarget_lock_acquire_recursive>
 8001ed6:	89ab      	ldrh	r3, [r5, #12]
 8001ed8:	071b      	lsls	r3, r3, #28
 8001eda:	d501      	bpl.n	8001ee0 <_vfiprintf_r+0x34>
 8001edc:	692b      	ldr	r3, [r5, #16]
 8001ede:	b99b      	cbnz	r3, 8001f08 <_vfiprintf_r+0x5c>
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f000 fb70 	bl	80025c8 <__swsetup_r>
 8001ee8:	b170      	cbz	r0, 8001f08 <_vfiprintf_r+0x5c>
 8001eea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001eec:	07dc      	lsls	r4, r3, #31
 8001eee:	d504      	bpl.n	8001efa <_vfiprintf_r+0x4e>
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ef4:	b01d      	add	sp, #116	@ 0x74
 8001ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001efa:	89ab      	ldrh	r3, [r5, #12]
 8001efc:	0598      	lsls	r0, r3, #22
 8001efe:	d4f7      	bmi.n	8001ef0 <_vfiprintf_r+0x44>
 8001f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f02:	f7ff feb3 	bl	8001c6c <__retarget_lock_release_recursive>
 8001f06:	e7f3      	b.n	8001ef0 <_vfiprintf_r+0x44>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f12:	2330      	movs	r3, #48	@ 0x30
 8001f14:	f04f 0901 	mov.w	r9, #1
 8001f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80020c8 <_vfiprintf_r+0x21c>
 8001f20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f24:	4623      	mov	r3, r4
 8001f26:	469a      	mov	sl, r3
 8001f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f2c:	b10a      	cbz	r2, 8001f32 <_vfiprintf_r+0x86>
 8001f2e:	2a25      	cmp	r2, #37	@ 0x25
 8001f30:	d1f9      	bne.n	8001f26 <_vfiprintf_r+0x7a>
 8001f32:	ebba 0b04 	subs.w	fp, sl, r4
 8001f36:	d00b      	beq.n	8001f50 <_vfiprintf_r+0xa4>
 8001f38:	465b      	mov	r3, fp
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	4630      	mov	r0, r6
 8001f40:	f7ff ffa1 	bl	8001e86 <__sfputs_r>
 8001f44:	3001      	adds	r0, #1
 8001f46:	f000 80a7 	beq.w	8002098 <_vfiprintf_r+0x1ec>
 8001f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f4c:	445a      	add	r2, fp
 8001f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f50:	f89a 3000 	ldrb.w	r3, [sl]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 809f 	beq.w	8002098 <_vfiprintf_r+0x1ec>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f64:	f10a 0a01 	add.w	sl, sl, #1
 8001f68:	9304      	str	r3, [sp, #16]
 8001f6a:	9307      	str	r3, [sp, #28]
 8001f6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f70:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f72:	4654      	mov	r4, sl
 8001f74:	2205      	movs	r2, #5
 8001f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f7a:	4853      	ldr	r0, [pc, #332]	@ (80020c8 <_vfiprintf_r+0x21c>)
 8001f7c:	f000 fb8a 	bl	8002694 <memchr>
 8001f80:	9a04      	ldr	r2, [sp, #16]
 8001f82:	b9d8      	cbnz	r0, 8001fbc <_vfiprintf_r+0x110>
 8001f84:	06d1      	lsls	r1, r2, #27
 8001f86:	bf44      	itt	mi
 8001f88:	2320      	movmi	r3, #32
 8001f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f8e:	0713      	lsls	r3, r2, #28
 8001f90:	bf44      	itt	mi
 8001f92:	232b      	movmi	r3, #43	@ 0x2b
 8001f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f98:	f89a 3000 	ldrb.w	r3, [sl]
 8001f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f9e:	d015      	beq.n	8001fcc <_vfiprintf_r+0x120>
 8001fa0:	4654      	mov	r4, sl
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f04f 0c0a 	mov.w	ip, #10
 8001fa8:	9a07      	ldr	r2, [sp, #28]
 8001faa:	4621      	mov	r1, r4
 8001fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fb0:	3b30      	subs	r3, #48	@ 0x30
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d94b      	bls.n	800204e <_vfiprintf_r+0x1a2>
 8001fb6:	b1b0      	cbz	r0, 8001fe6 <_vfiprintf_r+0x13a>
 8001fb8:	9207      	str	r2, [sp, #28]
 8001fba:	e014      	b.n	8001fe6 <_vfiprintf_r+0x13a>
 8001fbc:	eba0 0308 	sub.w	r3, r0, r8
 8001fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	46a2      	mov	sl, r4
 8001fc8:	9304      	str	r3, [sp, #16]
 8001fca:	e7d2      	b.n	8001f72 <_vfiprintf_r+0xc6>
 8001fcc:	9b03      	ldr	r3, [sp, #12]
 8001fce:	1d19      	adds	r1, r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	9103      	str	r1, [sp, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bfbb      	ittet	lt
 8001fd8:	425b      	neglt	r3, r3
 8001fda:	f042 0202 	orrlt.w	r2, r2, #2
 8001fde:	9307      	strge	r3, [sp, #28]
 8001fe0:	9307      	strlt	r3, [sp, #28]
 8001fe2:	bfb8      	it	lt
 8001fe4:	9204      	strlt	r2, [sp, #16]
 8001fe6:	7823      	ldrb	r3, [r4, #0]
 8001fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fea:	d10a      	bne.n	8002002 <_vfiprintf_r+0x156>
 8001fec:	7863      	ldrb	r3, [r4, #1]
 8001fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ff0:	d132      	bne.n	8002058 <_vfiprintf_r+0x1ac>
 8001ff2:	9b03      	ldr	r3, [sp, #12]
 8001ff4:	3402      	adds	r4, #2
 8001ff6:	1d1a      	adds	r2, r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	9203      	str	r2, [sp, #12]
 8001ffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002000:	9305      	str	r3, [sp, #20]
 8002002:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80020cc <_vfiprintf_r+0x220>
 8002006:	2203      	movs	r2, #3
 8002008:	4650      	mov	r0, sl
 800200a:	7821      	ldrb	r1, [r4, #0]
 800200c:	f000 fb42 	bl	8002694 <memchr>
 8002010:	b138      	cbz	r0, 8002022 <_vfiprintf_r+0x176>
 8002012:	2240      	movs	r2, #64	@ 0x40
 8002014:	9b04      	ldr	r3, [sp, #16]
 8002016:	eba0 000a 	sub.w	r0, r0, sl
 800201a:	4082      	lsls	r2, r0
 800201c:	4313      	orrs	r3, r2
 800201e:	3401      	adds	r4, #1
 8002020:	9304      	str	r3, [sp, #16]
 8002022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002026:	2206      	movs	r2, #6
 8002028:	4829      	ldr	r0, [pc, #164]	@ (80020d0 <_vfiprintf_r+0x224>)
 800202a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800202e:	f000 fb31 	bl	8002694 <memchr>
 8002032:	2800      	cmp	r0, #0
 8002034:	d03f      	beq.n	80020b6 <_vfiprintf_r+0x20a>
 8002036:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <_vfiprintf_r+0x228>)
 8002038:	bb1b      	cbnz	r3, 8002082 <_vfiprintf_r+0x1d6>
 800203a:	9b03      	ldr	r3, [sp, #12]
 800203c:	3307      	adds	r3, #7
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	3308      	adds	r3, #8
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002048:	443b      	add	r3, r7
 800204a:	9309      	str	r3, [sp, #36]	@ 0x24
 800204c:	e76a      	b.n	8001f24 <_vfiprintf_r+0x78>
 800204e:	460c      	mov	r4, r1
 8002050:	2001      	movs	r0, #1
 8002052:	fb0c 3202 	mla	r2, ip, r2, r3
 8002056:	e7a8      	b.n	8001faa <_vfiprintf_r+0xfe>
 8002058:	2300      	movs	r3, #0
 800205a:	f04f 0c0a 	mov.w	ip, #10
 800205e:	4619      	mov	r1, r3
 8002060:	3401      	adds	r4, #1
 8002062:	9305      	str	r3, [sp, #20]
 8002064:	4620      	mov	r0, r4
 8002066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800206a:	3a30      	subs	r2, #48	@ 0x30
 800206c:	2a09      	cmp	r2, #9
 800206e:	d903      	bls.n	8002078 <_vfiprintf_r+0x1cc>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0c6      	beq.n	8002002 <_vfiprintf_r+0x156>
 8002074:	9105      	str	r1, [sp, #20]
 8002076:	e7c4      	b.n	8002002 <_vfiprintf_r+0x156>
 8002078:	4604      	mov	r4, r0
 800207a:	2301      	movs	r3, #1
 800207c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002080:	e7f0      	b.n	8002064 <_vfiprintf_r+0x1b8>
 8002082:	ab03      	add	r3, sp, #12
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	462a      	mov	r2, r5
 8002088:	4630      	mov	r0, r6
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <_vfiprintf_r+0x22c>)
 800208c:	a904      	add	r1, sp, #16
 800208e:	f3af 8000 	nop.w
 8002092:	4607      	mov	r7, r0
 8002094:	1c78      	adds	r0, r7, #1
 8002096:	d1d6      	bne.n	8002046 <_vfiprintf_r+0x19a>
 8002098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800209a:	07d9      	lsls	r1, r3, #31
 800209c:	d405      	bmi.n	80020aa <_vfiprintf_r+0x1fe>
 800209e:	89ab      	ldrh	r3, [r5, #12]
 80020a0:	059a      	lsls	r2, r3, #22
 80020a2:	d402      	bmi.n	80020aa <_vfiprintf_r+0x1fe>
 80020a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020a6:	f7ff fde1 	bl	8001c6c <__retarget_lock_release_recursive>
 80020aa:	89ab      	ldrh	r3, [r5, #12]
 80020ac:	065b      	lsls	r3, r3, #25
 80020ae:	f53f af1f 	bmi.w	8001ef0 <_vfiprintf_r+0x44>
 80020b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020b4:	e71e      	b.n	8001ef4 <_vfiprintf_r+0x48>
 80020b6:	ab03      	add	r3, sp, #12
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	462a      	mov	r2, r5
 80020bc:	4630      	mov	r0, r6
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <_vfiprintf_r+0x22c>)
 80020c0:	a904      	add	r1, sp, #16
 80020c2:	f000 f87d 	bl	80021c0 <_printf_i>
 80020c6:	e7e4      	b.n	8002092 <_vfiprintf_r+0x1e6>
 80020c8:	08002832 	.word	0x08002832
 80020cc:	08002838 	.word	0x08002838
 80020d0:	0800283c 	.word	0x0800283c
 80020d4:	00000000 	.word	0x00000000
 80020d8:	08001e87 	.word	0x08001e87

080020dc <_printf_common>:
 80020dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e0:	4616      	mov	r6, r2
 80020e2:	4698      	mov	r8, r3
 80020e4:	688a      	ldr	r2, [r1, #8]
 80020e6:	690b      	ldr	r3, [r1, #16]
 80020e8:	4607      	mov	r7, r0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bfb8      	it	lt
 80020ee:	4613      	movlt	r3, r2
 80020f0:	6033      	str	r3, [r6, #0]
 80020f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020f6:	460c      	mov	r4, r1
 80020f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020fc:	b10a      	cbz	r2, 8002102 <_printf_common+0x26>
 80020fe:	3301      	adds	r3, #1
 8002100:	6033      	str	r3, [r6, #0]
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	0699      	lsls	r1, r3, #26
 8002106:	bf42      	ittt	mi
 8002108:	6833      	ldrmi	r3, [r6, #0]
 800210a:	3302      	addmi	r3, #2
 800210c:	6033      	strmi	r3, [r6, #0]
 800210e:	6825      	ldr	r5, [r4, #0]
 8002110:	f015 0506 	ands.w	r5, r5, #6
 8002114:	d106      	bne.n	8002124 <_printf_common+0x48>
 8002116:	f104 0a19 	add.w	sl, r4, #25
 800211a:	68e3      	ldr	r3, [r4, #12]
 800211c:	6832      	ldr	r2, [r6, #0]
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	42ab      	cmp	r3, r5
 8002122:	dc2b      	bgt.n	800217c <_printf_common+0xa0>
 8002124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	3b00      	subs	r3, #0
 800212c:	bf18      	it	ne
 800212e:	2301      	movne	r3, #1
 8002130:	0692      	lsls	r2, r2, #26
 8002132:	d430      	bmi.n	8002196 <_printf_common+0xba>
 8002134:	4641      	mov	r1, r8
 8002136:	4638      	mov	r0, r7
 8002138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800213c:	47c8      	blx	r9
 800213e:	3001      	adds	r0, #1
 8002140:	d023      	beq.n	800218a <_printf_common+0xae>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	6922      	ldr	r2, [r4, #16]
 8002146:	f003 0306 	and.w	r3, r3, #6
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf14      	ite	ne
 800214e:	2500      	movne	r5, #0
 8002150:	6833      	ldreq	r3, [r6, #0]
 8002152:	f04f 0600 	mov.w	r6, #0
 8002156:	bf08      	it	eq
 8002158:	68e5      	ldreq	r5, [r4, #12]
 800215a:	f104 041a 	add.w	r4, r4, #26
 800215e:	bf08      	it	eq
 8002160:	1aed      	subeq	r5, r5, r3
 8002162:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002166:	bf08      	it	eq
 8002168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800216c:	4293      	cmp	r3, r2
 800216e:	bfc4      	itt	gt
 8002170:	1a9b      	subgt	r3, r3, r2
 8002172:	18ed      	addgt	r5, r5, r3
 8002174:	42b5      	cmp	r5, r6
 8002176:	d11a      	bne.n	80021ae <_printf_common+0xd2>
 8002178:	2000      	movs	r0, #0
 800217a:	e008      	b.n	800218e <_printf_common+0xb2>
 800217c:	2301      	movs	r3, #1
 800217e:	4652      	mov	r2, sl
 8002180:	4641      	mov	r1, r8
 8002182:	4638      	mov	r0, r7
 8002184:	47c8      	blx	r9
 8002186:	3001      	adds	r0, #1
 8002188:	d103      	bne.n	8002192 <_printf_common+0xb6>
 800218a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800218e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002192:	3501      	adds	r5, #1
 8002194:	e7c1      	b.n	800211a <_printf_common+0x3e>
 8002196:	2030      	movs	r0, #48	@ 0x30
 8002198:	18e1      	adds	r1, r4, r3
 800219a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021a4:	4422      	add	r2, r4
 80021a6:	3302      	adds	r3, #2
 80021a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021ac:	e7c2      	b.n	8002134 <_printf_common+0x58>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4622      	mov	r2, r4
 80021b2:	4641      	mov	r1, r8
 80021b4:	4638      	mov	r0, r7
 80021b6:	47c8      	blx	r9
 80021b8:	3001      	adds	r0, #1
 80021ba:	d0e6      	beq.n	800218a <_printf_common+0xae>
 80021bc:	3601      	adds	r6, #1
 80021be:	e7d9      	b.n	8002174 <_printf_common+0x98>

080021c0 <_printf_i>:
 80021c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021c4:	7e0f      	ldrb	r7, [r1, #24]
 80021c6:	4691      	mov	r9, r2
 80021c8:	2f78      	cmp	r7, #120	@ 0x78
 80021ca:	4680      	mov	r8, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	469a      	mov	sl, r3
 80021d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021d6:	d807      	bhi.n	80021e8 <_printf_i+0x28>
 80021d8:	2f62      	cmp	r7, #98	@ 0x62
 80021da:	d80a      	bhi.n	80021f2 <_printf_i+0x32>
 80021dc:	2f00      	cmp	r7, #0
 80021de:	f000 80d1 	beq.w	8002384 <_printf_i+0x1c4>
 80021e2:	2f58      	cmp	r7, #88	@ 0x58
 80021e4:	f000 80b8 	beq.w	8002358 <_printf_i+0x198>
 80021e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021f0:	e03a      	b.n	8002268 <_printf_i+0xa8>
 80021f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021f6:	2b15      	cmp	r3, #21
 80021f8:	d8f6      	bhi.n	80021e8 <_printf_i+0x28>
 80021fa:	a101      	add	r1, pc, #4	@ (adr r1, 8002200 <_printf_i+0x40>)
 80021fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002200:	08002259 	.word	0x08002259
 8002204:	0800226d 	.word	0x0800226d
 8002208:	080021e9 	.word	0x080021e9
 800220c:	080021e9 	.word	0x080021e9
 8002210:	080021e9 	.word	0x080021e9
 8002214:	080021e9 	.word	0x080021e9
 8002218:	0800226d 	.word	0x0800226d
 800221c:	080021e9 	.word	0x080021e9
 8002220:	080021e9 	.word	0x080021e9
 8002224:	080021e9 	.word	0x080021e9
 8002228:	080021e9 	.word	0x080021e9
 800222c:	0800236b 	.word	0x0800236b
 8002230:	08002297 	.word	0x08002297
 8002234:	08002325 	.word	0x08002325
 8002238:	080021e9 	.word	0x080021e9
 800223c:	080021e9 	.word	0x080021e9
 8002240:	0800238d 	.word	0x0800238d
 8002244:	080021e9 	.word	0x080021e9
 8002248:	08002297 	.word	0x08002297
 800224c:	080021e9 	.word	0x080021e9
 8002250:	080021e9 	.word	0x080021e9
 8002254:	0800232d 	.word	0x0800232d
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	1d1a      	adds	r2, r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6032      	str	r2, [r6, #0]
 8002260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002268:	2301      	movs	r3, #1
 800226a:	e09c      	b.n	80023a6 <_printf_i+0x1e6>
 800226c:	6833      	ldr	r3, [r6, #0]
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	1d19      	adds	r1, r3, #4
 8002272:	6031      	str	r1, [r6, #0]
 8002274:	0606      	lsls	r6, r0, #24
 8002276:	d501      	bpl.n	800227c <_printf_i+0xbc>
 8002278:	681d      	ldr	r5, [r3, #0]
 800227a:	e003      	b.n	8002284 <_printf_i+0xc4>
 800227c:	0645      	lsls	r5, r0, #25
 800227e:	d5fb      	bpl.n	8002278 <_printf_i+0xb8>
 8002280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002284:	2d00      	cmp	r5, #0
 8002286:	da03      	bge.n	8002290 <_printf_i+0xd0>
 8002288:	232d      	movs	r3, #45	@ 0x2d
 800228a:	426d      	negs	r5, r5
 800228c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002290:	230a      	movs	r3, #10
 8002292:	4858      	ldr	r0, [pc, #352]	@ (80023f4 <_printf_i+0x234>)
 8002294:	e011      	b.n	80022ba <_printf_i+0xfa>
 8002296:	6821      	ldr	r1, [r4, #0]
 8002298:	6833      	ldr	r3, [r6, #0]
 800229a:	0608      	lsls	r0, r1, #24
 800229c:	f853 5b04 	ldr.w	r5, [r3], #4
 80022a0:	d402      	bmi.n	80022a8 <_printf_i+0xe8>
 80022a2:	0649      	lsls	r1, r1, #25
 80022a4:	bf48      	it	mi
 80022a6:	b2ad      	uxthmi	r5, r5
 80022a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80022aa:	6033      	str	r3, [r6, #0]
 80022ac:	bf14      	ite	ne
 80022ae:	230a      	movne	r3, #10
 80022b0:	2308      	moveq	r3, #8
 80022b2:	4850      	ldr	r0, [pc, #320]	@ (80023f4 <_printf_i+0x234>)
 80022b4:	2100      	movs	r1, #0
 80022b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022ba:	6866      	ldr	r6, [r4, #4]
 80022bc:	2e00      	cmp	r6, #0
 80022be:	60a6      	str	r6, [r4, #8]
 80022c0:	db05      	blt.n	80022ce <_printf_i+0x10e>
 80022c2:	6821      	ldr	r1, [r4, #0]
 80022c4:	432e      	orrs	r6, r5
 80022c6:	f021 0104 	bic.w	r1, r1, #4
 80022ca:	6021      	str	r1, [r4, #0]
 80022cc:	d04b      	beq.n	8002366 <_printf_i+0x1a6>
 80022ce:	4616      	mov	r6, r2
 80022d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80022d4:	fb03 5711 	mls	r7, r3, r1, r5
 80022d8:	5dc7      	ldrb	r7, [r0, r7]
 80022da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022de:	462f      	mov	r7, r5
 80022e0:	42bb      	cmp	r3, r7
 80022e2:	460d      	mov	r5, r1
 80022e4:	d9f4      	bls.n	80022d0 <_printf_i+0x110>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d10b      	bne.n	8002302 <_printf_i+0x142>
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	07df      	lsls	r7, r3, #31
 80022ee:	d508      	bpl.n	8002302 <_printf_i+0x142>
 80022f0:	6923      	ldr	r3, [r4, #16]
 80022f2:	6861      	ldr	r1, [r4, #4]
 80022f4:	4299      	cmp	r1, r3
 80022f6:	bfde      	ittt	le
 80022f8:	2330      	movle	r3, #48	@ 0x30
 80022fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002302:	1b92      	subs	r2, r2, r6
 8002304:	6122      	str	r2, [r4, #16]
 8002306:	464b      	mov	r3, r9
 8002308:	4621      	mov	r1, r4
 800230a:	4640      	mov	r0, r8
 800230c:	f8cd a000 	str.w	sl, [sp]
 8002310:	aa03      	add	r2, sp, #12
 8002312:	f7ff fee3 	bl	80020dc <_printf_common>
 8002316:	3001      	adds	r0, #1
 8002318:	d14a      	bne.n	80023b0 <_printf_i+0x1f0>
 800231a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800231e:	b004      	add	sp, #16
 8002320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	6023      	str	r3, [r4, #0]
 800232c:	2778      	movs	r7, #120	@ 0x78
 800232e:	4832      	ldr	r0, [pc, #200]	@ (80023f8 <_printf_i+0x238>)
 8002330:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	6831      	ldr	r1, [r6, #0]
 8002338:	061f      	lsls	r7, r3, #24
 800233a:	f851 5b04 	ldr.w	r5, [r1], #4
 800233e:	d402      	bmi.n	8002346 <_printf_i+0x186>
 8002340:	065f      	lsls	r7, r3, #25
 8002342:	bf48      	it	mi
 8002344:	b2ad      	uxthmi	r5, r5
 8002346:	6031      	str	r1, [r6, #0]
 8002348:	07d9      	lsls	r1, r3, #31
 800234a:	bf44      	itt	mi
 800234c:	f043 0320 	orrmi.w	r3, r3, #32
 8002350:	6023      	strmi	r3, [r4, #0]
 8002352:	b11d      	cbz	r5, 800235c <_printf_i+0x19c>
 8002354:	2310      	movs	r3, #16
 8002356:	e7ad      	b.n	80022b4 <_printf_i+0xf4>
 8002358:	4826      	ldr	r0, [pc, #152]	@ (80023f4 <_printf_i+0x234>)
 800235a:	e7e9      	b.n	8002330 <_printf_i+0x170>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f023 0320 	bic.w	r3, r3, #32
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	e7f6      	b.n	8002354 <_printf_i+0x194>
 8002366:	4616      	mov	r6, r2
 8002368:	e7bd      	b.n	80022e6 <_printf_i+0x126>
 800236a:	6833      	ldr	r3, [r6, #0]
 800236c:	6825      	ldr	r5, [r4, #0]
 800236e:	1d18      	adds	r0, r3, #4
 8002370:	6961      	ldr	r1, [r4, #20]
 8002372:	6030      	str	r0, [r6, #0]
 8002374:	062e      	lsls	r6, r5, #24
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	d501      	bpl.n	800237e <_printf_i+0x1be>
 800237a:	6019      	str	r1, [r3, #0]
 800237c:	e002      	b.n	8002384 <_printf_i+0x1c4>
 800237e:	0668      	lsls	r0, r5, #25
 8002380:	d5fb      	bpl.n	800237a <_printf_i+0x1ba>
 8002382:	8019      	strh	r1, [r3, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	4616      	mov	r6, r2
 8002388:	6123      	str	r3, [r4, #16]
 800238a:	e7bc      	b.n	8002306 <_printf_i+0x146>
 800238c:	6833      	ldr	r3, [r6, #0]
 800238e:	2100      	movs	r1, #0
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	6032      	str	r2, [r6, #0]
 8002394:	681e      	ldr	r6, [r3, #0]
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	4630      	mov	r0, r6
 800239a:	f000 f97b 	bl	8002694 <memchr>
 800239e:	b108      	cbz	r0, 80023a4 <_printf_i+0x1e4>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	6060      	str	r0, [r4, #4]
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2300      	movs	r3, #0
 80023aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023ae:	e7aa      	b.n	8002306 <_printf_i+0x146>
 80023b0:	4632      	mov	r2, r6
 80023b2:	4649      	mov	r1, r9
 80023b4:	4640      	mov	r0, r8
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	47d0      	blx	sl
 80023ba:	3001      	adds	r0, #1
 80023bc:	d0ad      	beq.n	800231a <_printf_i+0x15a>
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	079b      	lsls	r3, r3, #30
 80023c2:	d413      	bmi.n	80023ec <_printf_i+0x22c>
 80023c4:	68e0      	ldr	r0, [r4, #12]
 80023c6:	9b03      	ldr	r3, [sp, #12]
 80023c8:	4298      	cmp	r0, r3
 80023ca:	bfb8      	it	lt
 80023cc:	4618      	movlt	r0, r3
 80023ce:	e7a6      	b.n	800231e <_printf_i+0x15e>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4632      	mov	r2, r6
 80023d4:	4649      	mov	r1, r9
 80023d6:	4640      	mov	r0, r8
 80023d8:	47d0      	blx	sl
 80023da:	3001      	adds	r0, #1
 80023dc:	d09d      	beq.n	800231a <_printf_i+0x15a>
 80023de:	3501      	adds	r5, #1
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	9903      	ldr	r1, [sp, #12]
 80023e4:	1a5b      	subs	r3, r3, r1
 80023e6:	42ab      	cmp	r3, r5
 80023e8:	dcf2      	bgt.n	80023d0 <_printf_i+0x210>
 80023ea:	e7eb      	b.n	80023c4 <_printf_i+0x204>
 80023ec:	2500      	movs	r5, #0
 80023ee:	f104 0619 	add.w	r6, r4, #25
 80023f2:	e7f5      	b.n	80023e0 <_printf_i+0x220>
 80023f4:	08002843 	.word	0x08002843
 80023f8:	08002854 	.word	0x08002854

080023fc <__sflush_r>:
 80023fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	0716      	lsls	r6, r2, #28
 8002404:	4605      	mov	r5, r0
 8002406:	460c      	mov	r4, r1
 8002408:	d454      	bmi.n	80024b4 <__sflush_r+0xb8>
 800240a:	684b      	ldr	r3, [r1, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	dc02      	bgt.n	8002416 <__sflush_r+0x1a>
 8002410:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	dd48      	ble.n	80024a8 <__sflush_r+0xac>
 8002416:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002418:	2e00      	cmp	r6, #0
 800241a:	d045      	beq.n	80024a8 <__sflush_r+0xac>
 800241c:	2300      	movs	r3, #0
 800241e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002422:	682f      	ldr	r7, [r5, #0]
 8002424:	6a21      	ldr	r1, [r4, #32]
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	d030      	beq.n	800248c <__sflush_r+0x90>
 800242a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	0759      	lsls	r1, r3, #29
 8002430:	d505      	bpl.n	800243e <__sflush_r+0x42>
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002438:	b10b      	cbz	r3, 800243e <__sflush_r+0x42>
 800243a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800243c:	1ad2      	subs	r2, r2, r3
 800243e:	2300      	movs	r3, #0
 8002440:	4628      	mov	r0, r5
 8002442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002444:	6a21      	ldr	r1, [r4, #32]
 8002446:	47b0      	blx	r6
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	d106      	bne.n	800245c <__sflush_r+0x60>
 800244e:	6829      	ldr	r1, [r5, #0]
 8002450:	291d      	cmp	r1, #29
 8002452:	d82b      	bhi.n	80024ac <__sflush_r+0xb0>
 8002454:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <__sflush_r+0xfc>)
 8002456:	40ca      	lsrs	r2, r1
 8002458:	07d6      	lsls	r6, r2, #31
 800245a:	d527      	bpl.n	80024ac <__sflush_r+0xb0>
 800245c:	2200      	movs	r2, #0
 800245e:	6062      	str	r2, [r4, #4]
 8002460:	6922      	ldr	r2, [r4, #16]
 8002462:	04d9      	lsls	r1, r3, #19
 8002464:	6022      	str	r2, [r4, #0]
 8002466:	d504      	bpl.n	8002472 <__sflush_r+0x76>
 8002468:	1c42      	adds	r2, r0, #1
 800246a:	d101      	bne.n	8002470 <__sflush_r+0x74>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b903      	cbnz	r3, 8002472 <__sflush_r+0x76>
 8002470:	6560      	str	r0, [r4, #84]	@ 0x54
 8002472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002474:	602f      	str	r7, [r5, #0]
 8002476:	b1b9      	cbz	r1, 80024a8 <__sflush_r+0xac>
 8002478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800247c:	4299      	cmp	r1, r3
 800247e:	d002      	beq.n	8002486 <__sflush_r+0x8a>
 8002480:	4628      	mov	r0, r5
 8002482:	f7ff fbf5 	bl	8001c70 <_free_r>
 8002486:	2300      	movs	r3, #0
 8002488:	6363      	str	r3, [r4, #52]	@ 0x34
 800248a:	e00d      	b.n	80024a8 <__sflush_r+0xac>
 800248c:	2301      	movs	r3, #1
 800248e:	4628      	mov	r0, r5
 8002490:	47b0      	blx	r6
 8002492:	4602      	mov	r2, r0
 8002494:	1c50      	adds	r0, r2, #1
 8002496:	d1c9      	bne.n	800242c <__sflush_r+0x30>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0c6      	beq.n	800242c <__sflush_r+0x30>
 800249e:	2b1d      	cmp	r3, #29
 80024a0:	d001      	beq.n	80024a6 <__sflush_r+0xaa>
 80024a2:	2b16      	cmp	r3, #22
 80024a4:	d11d      	bne.n	80024e2 <__sflush_r+0xe6>
 80024a6:	602f      	str	r7, [r5, #0]
 80024a8:	2000      	movs	r0, #0
 80024aa:	e021      	b.n	80024f0 <__sflush_r+0xf4>
 80024ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	e01a      	b.n	80024ea <__sflush_r+0xee>
 80024b4:	690f      	ldr	r7, [r1, #16]
 80024b6:	2f00      	cmp	r7, #0
 80024b8:	d0f6      	beq.n	80024a8 <__sflush_r+0xac>
 80024ba:	0793      	lsls	r3, r2, #30
 80024bc:	bf18      	it	ne
 80024be:	2300      	movne	r3, #0
 80024c0:	680e      	ldr	r6, [r1, #0]
 80024c2:	bf08      	it	eq
 80024c4:	694b      	ldreq	r3, [r1, #20]
 80024c6:	1bf6      	subs	r6, r6, r7
 80024c8:	600f      	str	r7, [r1, #0]
 80024ca:	608b      	str	r3, [r1, #8]
 80024cc:	2e00      	cmp	r6, #0
 80024ce:	ddeb      	ble.n	80024a8 <__sflush_r+0xac>
 80024d0:	4633      	mov	r3, r6
 80024d2:	463a      	mov	r2, r7
 80024d4:	4628      	mov	r0, r5
 80024d6:	6a21      	ldr	r1, [r4, #32]
 80024d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80024dc:	47e0      	blx	ip
 80024de:	2800      	cmp	r0, #0
 80024e0:	dc07      	bgt.n	80024f2 <__sflush_r+0xf6>
 80024e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f2:	4407      	add	r7, r0
 80024f4:	1a36      	subs	r6, r6, r0
 80024f6:	e7e9      	b.n	80024cc <__sflush_r+0xd0>
 80024f8:	20400001 	.word	0x20400001

080024fc <_fflush_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	690b      	ldr	r3, [r1, #16]
 8002500:	4605      	mov	r5, r0
 8002502:	460c      	mov	r4, r1
 8002504:	b913      	cbnz	r3, 800250c <_fflush_r+0x10>
 8002506:	2500      	movs	r5, #0
 8002508:	4628      	mov	r0, r5
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	b118      	cbz	r0, 8002516 <_fflush_r+0x1a>
 800250e:	6a03      	ldr	r3, [r0, #32]
 8002510:	b90b      	cbnz	r3, 8002516 <_fflush_r+0x1a>
 8002512:	f7ff faa5 	bl	8001a60 <__sinit>
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f3      	beq.n	8002506 <_fflush_r+0xa>
 800251e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002520:	07d0      	lsls	r0, r2, #31
 8002522:	d404      	bmi.n	800252e <_fflush_r+0x32>
 8002524:	0599      	lsls	r1, r3, #22
 8002526:	d402      	bmi.n	800252e <_fflush_r+0x32>
 8002528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800252a:	f7ff fb9e 	bl	8001c6a <__retarget_lock_acquire_recursive>
 800252e:	4628      	mov	r0, r5
 8002530:	4621      	mov	r1, r4
 8002532:	f7ff ff63 	bl	80023fc <__sflush_r>
 8002536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002538:	4605      	mov	r5, r0
 800253a:	07da      	lsls	r2, r3, #31
 800253c:	d4e4      	bmi.n	8002508 <_fflush_r+0xc>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	059b      	lsls	r3, r3, #22
 8002542:	d4e1      	bmi.n	8002508 <_fflush_r+0xc>
 8002544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002546:	f7ff fb91 	bl	8001c6c <__retarget_lock_release_recursive>
 800254a:	e7dd      	b.n	8002508 <_fflush_r+0xc>

0800254c <__swbuf_r>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	460e      	mov	r6, r1
 8002550:	4614      	mov	r4, r2
 8002552:	4605      	mov	r5, r0
 8002554:	b118      	cbz	r0, 800255e <__swbuf_r+0x12>
 8002556:	6a03      	ldr	r3, [r0, #32]
 8002558:	b90b      	cbnz	r3, 800255e <__swbuf_r+0x12>
 800255a:	f7ff fa81 	bl	8001a60 <__sinit>
 800255e:	69a3      	ldr	r3, [r4, #24]
 8002560:	60a3      	str	r3, [r4, #8]
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	071a      	lsls	r2, r3, #28
 8002566:	d501      	bpl.n	800256c <__swbuf_r+0x20>
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	b943      	cbnz	r3, 800257e <__swbuf_r+0x32>
 800256c:	4621      	mov	r1, r4
 800256e:	4628      	mov	r0, r5
 8002570:	f000 f82a 	bl	80025c8 <__swsetup_r>
 8002574:	b118      	cbz	r0, 800257e <__swbuf_r+0x32>
 8002576:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800257a:	4638      	mov	r0, r7
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	6922      	ldr	r2, [r4, #16]
 8002582:	b2f6      	uxtb	r6, r6
 8002584:	1a98      	subs	r0, r3, r2
 8002586:	6963      	ldr	r3, [r4, #20]
 8002588:	4637      	mov	r7, r6
 800258a:	4283      	cmp	r3, r0
 800258c:	dc05      	bgt.n	800259a <__swbuf_r+0x4e>
 800258e:	4621      	mov	r1, r4
 8002590:	4628      	mov	r0, r5
 8002592:	f7ff ffb3 	bl	80024fc <_fflush_r>
 8002596:	2800      	cmp	r0, #0
 8002598:	d1ed      	bne.n	8002576 <__swbuf_r+0x2a>
 800259a:	68a3      	ldr	r3, [r4, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60a3      	str	r3, [r4, #8]
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	6022      	str	r2, [r4, #0]
 80025a6:	701e      	strb	r6, [r3, #0]
 80025a8:	6962      	ldr	r2, [r4, #20]
 80025aa:	1c43      	adds	r3, r0, #1
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d004      	beq.n	80025ba <__swbuf_r+0x6e>
 80025b0:	89a3      	ldrh	r3, [r4, #12]
 80025b2:	07db      	lsls	r3, r3, #31
 80025b4:	d5e1      	bpl.n	800257a <__swbuf_r+0x2e>
 80025b6:	2e0a      	cmp	r6, #10
 80025b8:	d1df      	bne.n	800257a <__swbuf_r+0x2e>
 80025ba:	4621      	mov	r1, r4
 80025bc:	4628      	mov	r0, r5
 80025be:	f7ff ff9d 	bl	80024fc <_fflush_r>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0d9      	beq.n	800257a <__swbuf_r+0x2e>
 80025c6:	e7d6      	b.n	8002576 <__swbuf_r+0x2a>

080025c8 <__swsetup_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <__swsetup_r+0xa8>)
 80025cc:	4605      	mov	r5, r0
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	460c      	mov	r4, r1
 80025d2:	b118      	cbz	r0, 80025dc <__swsetup_r+0x14>
 80025d4:	6a03      	ldr	r3, [r0, #32]
 80025d6:	b90b      	cbnz	r3, 80025dc <__swsetup_r+0x14>
 80025d8:	f7ff fa42 	bl	8001a60 <__sinit>
 80025dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025e0:	0719      	lsls	r1, r3, #28
 80025e2:	d422      	bmi.n	800262a <__swsetup_r+0x62>
 80025e4:	06da      	lsls	r2, r3, #27
 80025e6:	d407      	bmi.n	80025f8 <__swsetup_r+0x30>
 80025e8:	2209      	movs	r2, #9
 80025ea:	602a      	str	r2, [r5, #0]
 80025ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025f4:	81a3      	strh	r3, [r4, #12]
 80025f6:	e033      	b.n	8002660 <__swsetup_r+0x98>
 80025f8:	0758      	lsls	r0, r3, #29
 80025fa:	d512      	bpl.n	8002622 <__swsetup_r+0x5a>
 80025fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025fe:	b141      	cbz	r1, 8002612 <__swsetup_r+0x4a>
 8002600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002604:	4299      	cmp	r1, r3
 8002606:	d002      	beq.n	800260e <__swsetup_r+0x46>
 8002608:	4628      	mov	r0, r5
 800260a:	f7ff fb31 	bl	8001c70 <_free_r>
 800260e:	2300      	movs	r3, #0
 8002610:	6363      	str	r3, [r4, #52]	@ 0x34
 8002612:	89a3      	ldrh	r3, [r4, #12]
 8002614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002618:	81a3      	strh	r3, [r4, #12]
 800261a:	2300      	movs	r3, #0
 800261c:	6063      	str	r3, [r4, #4]
 800261e:	6923      	ldr	r3, [r4, #16]
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	89a3      	ldrh	r3, [r4, #12]
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	81a3      	strh	r3, [r4, #12]
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	b94b      	cbnz	r3, 8002642 <__swsetup_r+0x7a>
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002638:	d003      	beq.n	8002642 <__swsetup_r+0x7a>
 800263a:	4621      	mov	r1, r4
 800263c:	4628      	mov	r0, r5
 800263e:	f000 f85c 	bl	80026fa <__smakebuf_r>
 8002642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002646:	f013 0201 	ands.w	r2, r3, #1
 800264a:	d00a      	beq.n	8002662 <__swsetup_r+0x9a>
 800264c:	2200      	movs	r2, #0
 800264e:	60a2      	str	r2, [r4, #8]
 8002650:	6962      	ldr	r2, [r4, #20]
 8002652:	4252      	negs	r2, r2
 8002654:	61a2      	str	r2, [r4, #24]
 8002656:	6922      	ldr	r2, [r4, #16]
 8002658:	b942      	cbnz	r2, 800266c <__swsetup_r+0xa4>
 800265a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800265e:	d1c5      	bne.n	80025ec <__swsetup_r+0x24>
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	0799      	lsls	r1, r3, #30
 8002664:	bf58      	it	pl
 8002666:	6962      	ldrpl	r2, [r4, #20]
 8002668:	60a2      	str	r2, [r4, #8]
 800266a:	e7f4      	b.n	8002656 <__swsetup_r+0x8e>
 800266c:	2000      	movs	r0, #0
 800266e:	e7f7      	b.n	8002660 <__swsetup_r+0x98>
 8002670:	20000018 	.word	0x20000018

08002674 <_sbrk_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	2300      	movs	r3, #0
 8002678:	4d05      	ldr	r5, [pc, #20]	@ (8002690 <_sbrk_r+0x1c>)
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	f7fd ff90 	bl	80005a4 <_sbrk>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_sbrk_r+0x1a>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_sbrk_r+0x1a>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000210 	.word	0x20000210

08002694 <memchr>:
 8002694:	4603      	mov	r3, r0
 8002696:	b510      	push	{r4, lr}
 8002698:	b2c9      	uxtb	r1, r1
 800269a:	4402      	add	r2, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	d101      	bne.n	80026a6 <memchr+0x12>
 80026a2:	2000      	movs	r0, #0
 80026a4:	e003      	b.n	80026ae <memchr+0x1a>
 80026a6:	7804      	ldrb	r4, [r0, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	428c      	cmp	r4, r1
 80026ac:	d1f6      	bne.n	800269c <memchr+0x8>
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <__swhatbuf_r>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	460c      	mov	r4, r1
 80026b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b8:	4615      	mov	r5, r2
 80026ba:	2900      	cmp	r1, #0
 80026bc:	461e      	mov	r6, r3
 80026be:	b096      	sub	sp, #88	@ 0x58
 80026c0:	da0c      	bge.n	80026dc <__swhatbuf_r+0x2c>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	2100      	movs	r1, #0
 80026c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80026ca:	bf14      	ite	ne
 80026cc:	2340      	movne	r3, #64	@ 0x40
 80026ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80026d2:	2000      	movs	r0, #0
 80026d4:	6031      	str	r1, [r6, #0]
 80026d6:	602b      	str	r3, [r5, #0]
 80026d8:	b016      	add	sp, #88	@ 0x58
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	466a      	mov	r2, sp
 80026de:	f000 f849 	bl	8002774 <_fstat_r>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	dbed      	blt.n	80026c2 <__swhatbuf_r+0x12>
 80026e6:	9901      	ldr	r1, [sp, #4]
 80026e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80026ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80026f0:	4259      	negs	r1, r3
 80026f2:	4159      	adcs	r1, r3
 80026f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f8:	e7eb      	b.n	80026d2 <__swhatbuf_r+0x22>

080026fa <__smakebuf_r>:
 80026fa:	898b      	ldrh	r3, [r1, #12]
 80026fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026fe:	079d      	lsls	r5, r3, #30
 8002700:	4606      	mov	r6, r0
 8002702:	460c      	mov	r4, r1
 8002704:	d507      	bpl.n	8002716 <__smakebuf_r+0x1c>
 8002706:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800270a:	6023      	str	r3, [r4, #0]
 800270c:	6123      	str	r3, [r4, #16]
 800270e:	2301      	movs	r3, #1
 8002710:	6163      	str	r3, [r4, #20]
 8002712:	b003      	add	sp, #12
 8002714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002716:	466a      	mov	r2, sp
 8002718:	ab01      	add	r3, sp, #4
 800271a:	f7ff ffc9 	bl	80026b0 <__swhatbuf_r>
 800271e:	9f00      	ldr	r7, [sp, #0]
 8002720:	4605      	mov	r5, r0
 8002722:	4639      	mov	r1, r7
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff fb0d 	bl	8001d44 <_malloc_r>
 800272a:	b948      	cbnz	r0, 8002740 <__smakebuf_r+0x46>
 800272c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002730:	059a      	lsls	r2, r3, #22
 8002732:	d4ee      	bmi.n	8002712 <__smakebuf_r+0x18>
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	e7e2      	b.n	8002706 <__smakebuf_r+0xc>
 8002740:	89a3      	ldrh	r3, [r4, #12]
 8002742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800274a:	81a3      	strh	r3, [r4, #12]
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	6020      	str	r0, [r4, #0]
 8002750:	b15b      	cbz	r3, 800276a <__smakebuf_r+0x70>
 8002752:	4630      	mov	r0, r6
 8002754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002758:	f000 f81e 	bl	8002798 <_isatty_r>
 800275c:	b128      	cbz	r0, 800276a <__smakebuf_r+0x70>
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	81a3      	strh	r3, [r4, #12]
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	431d      	orrs	r5, r3
 800276e:	81a5      	strh	r5, [r4, #12]
 8002770:	e7cf      	b.n	8002712 <__smakebuf_r+0x18>
	...

08002774 <_fstat_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d06      	ldr	r5, [pc, #24]	@ (8002794 <_fstat_r+0x20>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f7fd feea 	bl	800055a <_fstat>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d102      	bne.n	8002790 <_fstat_r+0x1c>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b103      	cbz	r3, 8002790 <_fstat_r+0x1c>
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	20000210 	.word	0x20000210

08002798 <_isatty_r>:
 8002798:	b538      	push	{r3, r4, r5, lr}
 800279a:	2300      	movs	r3, #0
 800279c:	4d05      	ldr	r5, [pc, #20]	@ (80027b4 <_isatty_r+0x1c>)
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	602b      	str	r3, [r5, #0]
 80027a4:	f7fd fee8 	bl	8000578 <_isatty>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d102      	bne.n	80027b2 <_isatty_r+0x1a>
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	b103      	cbz	r3, 80027b2 <_isatty_r+0x1a>
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	20000210 	.word	0x20000210

080027b8 <_init>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr

080027c4 <_fini>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr
