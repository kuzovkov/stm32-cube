
display2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b0  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004244  08004244  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004244  08004244  00006014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004244  08004244  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800424c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000014  08004260  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000a30  08004260  00006a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d24  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001960  00000000  00000000  0000cd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000567  00000000  00000000  0000ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017276  00000000  00000000  0000f37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000858e  00000000  00000000  000265f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082714  00000000  00000000  0002eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c30  00000000  00000000  000b12dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b2f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c7c 	.word	0x08002c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002c7c 	.word	0x08002c7c

0800014c <ST7789_Demo>:
	  HAL_SPI_Transmit(&hspi1, color, 2, HAL_MAX_DELAY);
	}
}

void ST7789_Demo(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b087      	sub	sp, #28
 8000150:	af04      	add	r7, sp, #16
    // 1. Тест заливки цветами
    ST7789_FillScreen(ST7789_COLOR_RED);
 8000152:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000156:	f000 fbbb 	bl	80008d0 <ST7789_FillScreen>
    HAL_Delay(500);
 800015a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800015e:	f001 f8f7 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_GREEN);
 8000162:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000166:	f000 fbb3 	bl	80008d0 <ST7789_FillScreen>
    HAL_Delay(500);
 800016a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800016e:	f001 f8ef 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_BLUE);
 8000172:	201f      	movs	r0, #31
 8000174:	f000 fbac 	bl	80008d0 <ST7789_FillScreen>
    HAL_Delay(500);
 8000178:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800017c:	f001 f8e8 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_BLACK);
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fba5 	bl	80008d0 <ST7789_FillScreen>
    HAL_Delay(500);
 8000186:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800018a:	f001 f8e1 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_WHITE);
 800018e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000192:	f000 fb9d 	bl	80008d0 <ST7789_FillScreen>
    HAL_Delay(500);
 8000196:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800019a:	f001 f8d9 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_BLACK);
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fb96 	bl	80008d0 <ST7789_FillScreen>

    // 2. Текст
    ST7789_PutString(10, 10, "ST7789 Demo", Font_16x26, ST7789_COLOR_YELLOW, ST7789_COLOR_BLACK);
 80001a4:	4b58      	ldr	r3, [pc, #352]	@ (8000308 <ST7789_Demo+0x1bc>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	9202      	str	r2, [sp, #8]
 80001aa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001ae:	9201      	str	r2, [sp, #4]
 80001b0:	685a      	ldr	r2, [r3, #4]
 80001b2:	9200      	str	r2, [sp, #0]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a55      	ldr	r2, [pc, #340]	@ (800030c <ST7789_Demo+0x1c0>)
 80001b8:	210a      	movs	r1, #10
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 ff24 	bl	8001008 <ST7789_PutString>
    HAL_Delay(1000);
 80001c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c4:	f001 f8c4 	bl	8001350 <HAL_Delay>

    // 3. Геометрические фигуры
    ST7789_DrawRectangle(20, 60, 100, 100, ST7789_COLOR_RED);        // прямоугольник
 80001c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80001cc:	9300      	str	r3, [sp, #0]
 80001ce:	2364      	movs	r3, #100	@ 0x64
 80001d0:	2264      	movs	r2, #100	@ 0x64
 80001d2:	213c      	movs	r1, #60	@ 0x3c
 80001d4:	2014      	movs	r0, #20
 80001d6:	f000 fc6d 	bl	8000ab4 <ST7789_DrawRectangle>
    ST7789_DrawFilledRectangle(130, 60, 210, 100, ST7789_COLOR_BLUE);// залитый прямоугольник
 80001da:	231f      	movs	r3, #31
 80001dc:	9300      	str	r3, [sp, #0]
 80001de:	2364      	movs	r3, #100	@ 0x64
 80001e0:	22d2      	movs	r2, #210	@ 0xd2
 80001e2:	213c      	movs	r1, #60	@ 0x3c
 80001e4:	2082      	movs	r0, #130	@ 0x82
 80001e6:	f000 fc9c 	bl	8000b22 <ST7789_DrawFilledRectangle>
    HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ee:	f001 f8af 	bl	8001350 <HAL_Delay>

    ST7789_DrawCircle(60, 160, 40, ST7789_COLOR_GREEN);             // окружность
 80001f2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	21a0      	movs	r1, #160	@ 0xa0
 80001fa:	203c      	movs	r0, #60	@ 0x3c
 80001fc:	f000 fcdd 	bl	8000bba <ST7789_DrawCircle>
    ST7789_DrawFilledCircle(180, 160, 30, ST7789_COLOR_MAGENTA);    // залитая окружность
 8000200:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000204:	221e      	movs	r2, #30
 8000206:	21a0      	movs	r1, #160	@ 0xa0
 8000208:	20b4      	movs	r0, #180	@ 0xb4
 800020a:	f000 fdb0 	bl	8000d6e <ST7789_DrawFilledCircle>
    HAL_Delay(1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000212:	f001 f89d 	bl	8001350 <HAL_Delay>

    // 4. Линии
    ST7789_DrawLine(0, 0, 239, 239, ST7789_COLOR_CYAN);   // диагональ
 8000216:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	23ef      	movs	r3, #239	@ 0xef
 800021e:	22ef      	movs	r2, #239	@ 0xef
 8000220:	2100      	movs	r1, #0
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fbba 	bl	800099c <ST7789_DrawLine>
    ST7789_DrawLine(0, 239, 239, 0, ST7789_COLOR_ORANGE); // другая диагональ
 8000228:	f64f 43c0 	movw	r3, #64704	@ 0xfcc0
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2300      	movs	r3, #0
 8000230:	22ef      	movs	r2, #239	@ 0xef
 8000232:	21ef      	movs	r1, #239	@ 0xef
 8000234:	2000      	movs	r0, #0
 8000236:	f000 fbb1 	bl	800099c <ST7789_DrawLine>
    HAL_Delay(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800023e:	f001 f887 	bl	8001350 <HAL_Delay>

    // 5. "Шахматка"
    for (uint16_t y = 0; y < 240; y += 30)
 8000242:	2300      	movs	r3, #0
 8000244:	80fb      	strh	r3, [r7, #6]
 8000246:	e033      	b.n	80002b0 <ST7789_Demo+0x164>
    {
        for (uint16_t x = 0; x < 240; x += 30)
 8000248:	2300      	movs	r3, #0
 800024a:	80bb      	strh	r3, [r7, #4]
 800024c:	e02a      	b.n	80002a4 <ST7789_Demo+0x158>
        {
            if (((x + y) / 30) % 2 == 0)
 800024e:	88ba      	ldrh	r2, [r7, #4]
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	4413      	add	r3, r2
 8000254:	4a2e      	ldr	r2, [pc, #184]	@ (8000310 <ST7789_Demo+0x1c4>)
 8000256:	fb82 1203 	smull	r1, r2, r2, r3
 800025a:	441a      	add	r2, r3
 800025c:	1112      	asrs	r2, r2, #4
 800025e:	17db      	asrs	r3, r3, #31
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d10d      	bne.n	8000286 <ST7789_Demo+0x13a>
                ST7789_DrawFilledRectangle(x, y, x + 29, y + 29, ST7789_COLOR_WHITE);
 800026a:	88bb      	ldrh	r3, [r7, #4]
 800026c:	331d      	adds	r3, #29
 800026e:	b29a      	uxth	r2, r3
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	331d      	adds	r3, #29
 8000274:	b29b      	uxth	r3, r3
 8000276:	88f9      	ldrh	r1, [r7, #6]
 8000278:	88b8      	ldrh	r0, [r7, #4]
 800027a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800027e:	9400      	str	r4, [sp, #0]
 8000280:	f000 fc4f 	bl	8000b22 <ST7789_DrawFilledRectangle>
 8000284:	e00b      	b.n	800029e <ST7789_Demo+0x152>
            else
                ST7789_DrawFilledRectangle(x, y, x + 29, y + 29, ST7789_COLOR_BLACK);
 8000286:	88bb      	ldrh	r3, [r7, #4]
 8000288:	331d      	adds	r3, #29
 800028a:	b29a      	uxth	r2, r3
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	331d      	adds	r3, #29
 8000290:	b29b      	uxth	r3, r3
 8000292:	88f9      	ldrh	r1, [r7, #6]
 8000294:	88b8      	ldrh	r0, [r7, #4]
 8000296:	2400      	movs	r4, #0
 8000298:	9400      	str	r4, [sp, #0]
 800029a:	f000 fc42 	bl	8000b22 <ST7789_DrawFilledRectangle>
        for (uint16_t x = 0; x < 240; x += 30)
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	331e      	adds	r3, #30
 80002a2:	80bb      	strh	r3, [r7, #4]
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	2bef      	cmp	r3, #239	@ 0xef
 80002a8:	d9d1      	bls.n	800024e <ST7789_Demo+0x102>
    for (uint16_t y = 0; y < 240; y += 30)
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	331e      	adds	r3, #30
 80002ae:	80fb      	strh	r3, [r7, #6]
 80002b0:	88fb      	ldrh	r3, [r7, #6]
 80002b2:	2bef      	cmp	r3, #239	@ 0xef
 80002b4:	d9c8      	bls.n	8000248 <ST7789_Demo+0xfc>
        }
    }
    HAL_Delay(2000);
 80002b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002ba:	f001 f849 	bl	8001350 <HAL_Delay>
    ST7789_FillScreen(ST7789_COLOR_BLACK);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fb06 	bl	80008d0 <ST7789_FillScreen>
    ST7789_DrawBitmap(112, 112, 16, 16, smiley_bitmap);
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <ST7789_Demo+0x1c8>)
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2310      	movs	r3, #16
 80002ca:	2210      	movs	r2, #16
 80002cc:	2170      	movs	r1, #112	@ 0x70
 80002ce:	2070      	movs	r0, #112	@ 0x70
 80002d0:	f000 f824 	bl	800031c <ST7789_DrawBitmap>
    HAL_Delay(3000);
 80002d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002d8:	f001 f83a 	bl	8001350 <HAL_Delay>


    // 6. Возврат к чёрному экрану
    ST7789_FillScreen(ST7789_COLOR_BLACK);
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 faf7 	bl	80008d0 <ST7789_FillScreen>
    ST7789_PutString(30, 100, "Demo Done!", Font_16x26, ST7789_COLOR_GREEN, ST7789_COLOR_BLACK);
 80002e2:	4b09      	ldr	r3, [pc, #36]	@ (8000308 <ST7789_Demo+0x1bc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	9202      	str	r2, [sp, #8]
 80002e8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80002ec:	9201      	str	r2, [sp, #4]
 80002ee:	685a      	ldr	r2, [r3, #4]
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	@ (8000318 <ST7789_Demo+0x1cc>)
 80002f6:	2164      	movs	r1, #100	@ 0x64
 80002f8:	201e      	movs	r0, #30
 80002fa:	f000 fe85 	bl	8001008 <ST7789_PutString>
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	08002c94 	.word	0x08002c94
 8000310:	88888889 	.word	0x88888889
 8000314:	08002cd4 	.word	0x08002cd4
 8000318:	08002ca0 	.word	0x08002ca0

0800031c <ST7789_DrawBitmap>:

void ST7789_DrawBitmap(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *bitmap)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4604      	mov	r4, r0
 8000324:	4608      	mov	r0, r1
 8000326:	4611      	mov	r1, r2
 8000328:	461a      	mov	r2, r3
 800032a:	4623      	mov	r3, r4
 800032c:	80fb      	strh	r3, [r7, #6]
 800032e:	4603      	mov	r3, r0
 8000330:	80bb      	strh	r3, [r7, #4]
 8000332:	460b      	mov	r3, r1
 8000334:	807b      	strh	r3, [r7, #2]
 8000336:	4613      	mov	r3, r2
 8000338:	803b      	strh	r3, [r7, #0]
	ST7789_SetWindowAddress(x, y, x + w - 1, y + h - 1);
 800033a:	88fa      	ldrh	r2, [r7, #6]
 800033c:	887b      	ldrh	r3, [r7, #2]
 800033e:	4413      	add	r3, r2
 8000340:	b29b      	uxth	r3, r3
 8000342:	3b01      	subs	r3, #1
 8000344:	b29c      	uxth	r4, r3
 8000346:	88ba      	ldrh	r2, [r7, #4]
 8000348:	883b      	ldrh	r3, [r7, #0]
 800034a:	4413      	add	r3, r2
 800034c:	b29b      	uxth	r3, r3
 800034e:	3b01      	subs	r3, #1
 8000350:	b29b      	uxth	r3, r3
 8000352:	88b9      	ldrh	r1, [r7, #4]
 8000354:	88f8      	ldrh	r0, [r7, #6]
 8000356:	4622      	mov	r2, r4
 8000358:	f000 fa72 	bl	8000840 <ST7789_SetWindowAddress>

    // отправляем массив как данные
    for (uint32_t i = 0; i < w * h; i++)
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e018      	b.n	8000394 <ST7789_DrawBitmap+0x78>
    {
        uint8_t data[2];
        data[0] = bitmap[i] >> 8;      // старший байт
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	6a3a      	ldr	r2, [r7, #32]
 8000368:	4413      	add	r3, r2
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	0a1b      	lsrs	r3, r3, #8
 800036e:	b29b      	uxth	r3, r3
 8000370:	b2db      	uxtb	r3, r3
 8000372:	723b      	strb	r3, [r7, #8]
        data[1] = bitmap[i] & 0xFF;    // младший байт
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	6a3a      	ldr	r2, [r7, #32]
 800037a:	4413      	add	r3, r2
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	727b      	strb	r3, [r7, #9]
        ST7789_TransmitData(data, 2);
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2102      	movs	r1, #2
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f93f 	bl	800060c <ST7789_TransmitData>
    for (uint32_t i = 0; i < w * h; i++)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3301      	adds	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	887b      	ldrh	r3, [r7, #2]
 8000396:	883a      	ldrh	r2, [r7, #0]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d3de      	bcc.n	8000362 <ST7789_DrawBitmap+0x46>
    }
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd90      	pop	{r4, r7, pc}
	...

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 ff6a 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f814 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 f8a6 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f000 f886 	bl	80004d0 <MX_DMA_Init>
  MX_SPI1_Init();
 80003c4:	f000 f84e 	bl	8000464 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //test_display();
  //HAL_Delay(5000);
  /* USER CODE END 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //BLK (включаем подсветку)
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4804      	ldr	r0, [pc, #16]	@ (80003e0 <main+0x30>)
 80003ce:	f001 fc63 	bl	8001c98 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ST7789_Init();
 80003d2:	f000 f963 	bl	800069c <ST7789_Init>

  //ST7789_FillScreen(ST7789_COLOR_BLACK);
  //ST7789_PutString(10, 10, "Hello", Font_16x26, ST7789_COLOR_RED, ST7789_COLOR_BLACK);

  ST7789_Demo();
 80003d6:	f7ff feb9 	bl	800014c <ST7789_Demo>

  while (1)
 80003da:	bf00      	nop
 80003dc:	e7fd      	b.n	80003da <main+0x2a>
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	@ 0x40
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2228      	movs	r2, #40	@ 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fc15 	bl	8002c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000406:	2302      	movs	r3, #2
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	2310      	movs	r3, #16
 8000410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000416:	2300      	movs	r3, #0
 8000418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fc4f 	bl	8001cc8 <HAL_RCC_OscConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000430:	f000 f89e 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
 8000436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2302      	movs	r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2101      	movs	r1, #1
 800044c:	4618      	mov	r0, r3
 800044e:	f001 febd 	bl	80021cc <HAL_RCC_ClockConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000458:	f000 f88a 	bl	8000570 <Error_Handler>
  }
}
 800045c:	bf00      	nop
 800045e:	3740      	adds	r7, #64	@ 0x40
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <MX_SPI1_Init+0x64>)
 800046a:	4a18      	ldr	r2, [pc, #96]	@ (80004cc <MX_SPI1_Init+0x68>)
 800046c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046e:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <MX_SPI1_Init+0x64>)
 8000470:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000474:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000476:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <MX_SPI1_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <MX_SPI1_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <MX_SPI1_Init+0x64>)
 8000484:	2202      	movs	r2, #2
 8000486:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <MX_SPI1_Init+0x64>)
 800048a:	2201      	movs	r2, #1
 800048c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_SPI1_Init+0x64>)
 8000490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000494:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_SPI1_Init+0x64>)
 8000498:	2208      	movs	r2, #8
 800049a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049c:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <MX_SPI1_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_SPI1_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <MX_SPI1_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_SPI1_Init+0x64>)
 80004b0:	220a      	movs	r2, #10
 80004b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b4:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <MX_SPI1_Init+0x64>)
 80004b6:	f001 ffe5 	bl	8002484 <HAL_SPI_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004c0:	f000 f856 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000030 	.word	0x20000030
 80004cc:	40013000 	.word	0x40013000

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_DMA_Init+0x38>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a0b      	ldr	r2, [pc, #44]	@ (8000508 <MX_DMA_Init+0x38>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_DMA_Init+0x38>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200d      	movs	r0, #13
 80004f4:	f001 f827 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004f8:	200d      	movs	r0, #13
 80004fa:	f001 f840 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_GPIO_Init+0x5c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <MX_GPIO_Init+0x5c>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_GPIO_Init+0x5c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	210e      	movs	r1, #14
 800053c:	480b      	ldr	r0, [pc, #44]	@ (800056c <MX_GPIO_Init+0x60>)
 800053e:	f001 fbab 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000542:	230e      	movs	r3, #14
 8000544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2302      	movs	r3, #2
 8000550:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	4619      	mov	r1, r3
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_GPIO_Init+0x60>)
 800055a:	f001 fa19 	bl	8001990 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <ST7789_TransmitCommand>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Enum ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Struct ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ST7789_TransmitCommand(ST7789_CMDTypeDef CMD)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	
	/* ---------------- Select Chip ----------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	480c      	ldr	r0, [pc, #48]	@ (80005bc <ST7789_TransmitCommand+0x40>)
 800058c:	f001 fb84 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* ------------- Set to Command Mode ------------ */
	ST7789_GPIO_WritePin(ST7789_DC_GPIO_PORT, ST7789_DC_GPIO_PIN, ST7789_GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	4809      	ldr	r0, [pc, #36]	@ (80005bc <ST7789_TransmitCommand+0x40>)
 8000596:	f001 fb7f 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	ST7789_SPI_Transmit(&CMD, 1, ST7789_SPI_TIMEOUT);
 800059a:	1df9      	adds	r1, r7, #7
 800059c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a0:	2201      	movs	r2, #1
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <ST7789_TransmitCommand+0x44>)
 80005a4:	f001 fff2 	bl	800258c <HAL_SPI_Transmit>
	
	/* ---------------- Unselect Chip --------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <ST7789_TransmitCommand+0x40>)
 80005ae:	f001 fb73 	bl	8001c98 <HAL_GPIO_WritePin>
	
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800
 80005c0:	20000030 	.word	0x20000030

080005c4 <ST7789_TransmitSingleData>:

void ST7789_TransmitSingleData(uint8_t Data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	
	/* ---------------- Select Chip ----------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2110      	movs	r1, #16
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <ST7789_TransmitSingleData+0x40>)
 80005d4:	f001 fb60 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* -------------- Set to Data Mode -------------- */
	ST7789_GPIO_WritePin(ST7789_DC_GPIO_PORT, ST7789_DC_GPIO_PIN, ST7789_GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2104      	movs	r1, #4
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <ST7789_TransmitSingleData+0x40>)
 80005de:	f001 fb5b 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	ST7789_SPI_Transmit(&Data, 1, ST7789_SPI_TIMEOUT);
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e8:	2201      	movs	r2, #1
 80005ea:	4807      	ldr	r0, [pc, #28]	@ (8000608 <ST7789_TransmitSingleData+0x44>)
 80005ec:	f001 ffce 	bl	800258c <HAL_SPI_Transmit>
	
	/* ---------------- Unselect Chip --------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <ST7789_TransmitSingleData+0x40>)
 80005f6:	f001 fb4f 	bl	8001c98 <HAL_GPIO_WritePin>
	
	
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010800 	.word	0x40010800
 8000608:	20000030 	.word	0x20000030

0800060c <ST7789_TransmitData>:

void ST7789_TransmitData(uint8_t *Data, uint32_t Size)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	
	uint16_t tSize;
	
	/* ---------------- Select Chip ----------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	481e      	ldr	r0, [pc, #120]	@ (8000694 <ST7789_TransmitData+0x88>)
 800061c:	f001 fb3c 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* -------------- Set to Data Mode -------------- */
	ST7789_GPIO_WritePin(ST7789_DC_GPIO_PORT, ST7789_DC_GPIO_PIN, ST7789_GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2104      	movs	r1, #4
 8000624:	481b      	ldr	r0, [pc, #108]	@ (8000694 <ST7789_TransmitData+0x88>)
 8000626:	f001 fb37 	bl	8001c98 <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */	
	while (Size > 0)
 800062a:	e026      	b.n	800067a <ST7789_TransmitData+0x6e>
	{
		
		/* ~~~~~~~~~~~~~~~ Calculate transmit size ~~~~~~~~~~~~~~~ */
		tSize = Size > UINT16_MAX ? UINT16_MAX : Size;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000632:	4293      	cmp	r3, r2
 8000634:	bf28      	it	cs
 8000636:	4613      	movcs	r3, r2
 8000638:	81fb      	strh	r3, [r7, #14]
		
		/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		#ifdef ST7789_USE_DMA
		
		if (ST7789_DMA_MIN_SIZE <= Size)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d90d      	bls.n	800065c <ST7789_TransmitData+0x50>
		{
			ST7789_SPI_Transmit_DMA(Data, tSize);
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	461a      	mov	r2, r3
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <ST7789_TransmitData+0x8c>)
 8000648:	f002 f8e4 	bl	8002814 <HAL_SPI_Transmit_DMA>
			while (ST7789_SPI.State != ST7789_SPI_STATE_READY) { }
 800064c:	bf00      	nop
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <ST7789_TransmitData+0x8c>)
 8000650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b01      	cmp	r3, #1
 8000658:	d1f9      	bne.n	800064e <ST7789_TransmitData+0x42>
 800065a:	e006      	b.n	800066a <ST7789_TransmitData+0x5e>
			//while (ST7789_SPI.hdmatx->State != ST7789_DMA_STATE_READY) { }
		}
		else
		{
			ST7789_SPI_Transmit(Data, tSize, ST7789_SPI_TIMEOUT);
 800065c:	89fa      	ldrh	r2, [r7, #14]
 800065e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <ST7789_TransmitData+0x8c>)
 8000666:	f001 ff91 	bl	800258c <HAL_SPI_Transmit>
		
		ST7789_SPI_Transmit(Data, tSize, ST7789_SPI_TIMEOUT);
		
		#endif
		
		Data += tSize;
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	607b      	str	r3, [r7, #4]
		Size -= tSize;
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	603b      	str	r3, [r7, #0]
	while (Size > 0)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1d5      	bne.n	800062c <ST7789_TransmitData+0x20>
		
	}
	
	/* ---------------- Unselect Chip --------------- */
	ST7789_GPIO_WritePin(ST7789_CS_GPIO_PORT, ST7789_CS_GPIO_PIN, ST7789_GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2110      	movs	r1, #16
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <ST7789_TransmitData+0x88>)
 8000686:	f001 fb07 	bl	8001c98 <HAL_GPIO_WritePin>

}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010800 	.word	0x40010800
 8000698:	20000030 	.word	0x20000030

0800069c <ST7789_Init>:

/* ......................... Initialize ........................ */
void ST7789_Init(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b08b      	sub	sp, #44	@ 0x2c
 80006a0:	af00      	add	r7, sp, #0
	
	uint8_t PorchSetting_Default[5] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80006a2:	4a4c      	ldr	r2, [pc, #304]	@ (80007d4 <ST7789_Init+0x138>)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	6018      	str	r0, [r3, #0]
 80006ae:	3304      	adds	r3, #4
 80006b0:	7019      	strb	r1, [r3, #0]
	uint8_t PVGAMCTRL_Default[14] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80006b2:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <ST7789_Init+0x13c>)
 80006b4:	f107 0410 	add.w	r4, r7, #16
 80006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ba:	c407      	stmia	r4!, {r0, r1, r2}
 80006bc:	8023      	strh	r3, [r4, #0]
	uint8_t NVGAMCTRL_Default[14] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <ST7789_Init+0x140>)
 80006c0:	463c      	mov	r4, r7
 80006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c4:	c407      	stmia	r4!, {r0, r1, r2}
 80006c6:	8023      	strh	r3, [r4, #0]
	
	#ifdef ST7789_USE_DMA
	
	memset(LCDBuffer, 0, sizeof(LCDBuffer));
 80006c8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80006cc:	2100      	movs	r1, #0
 80006ce:	4844      	ldr	r0, [pc, #272]	@ (80007e0 <ST7789_Init+0x144>)
 80006d0:	f002 faa7 	bl	8002c22 <memset>
	
	#endif
		
	/* ----------------- Reset Chip ----------------- */
	ST7789_Delay(25);
 80006d4:	2019      	movs	r0, #25
 80006d6:	f000 fe3b 	bl	8001350 <HAL_Delay>
	ST7789_GPIO_WritePin(ST7789_RST_GPIO_PORT, ST7789_RST_GPIO_PIN, ST7789_GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4841      	ldr	r0, [pc, #260]	@ (80007e4 <ST7789_Init+0x148>)
 80006e0:	f001 fada 	bl	8001c98 <HAL_GPIO_WritePin>
	ST7789_Delay(25);
 80006e4:	2019      	movs	r0, #25
 80006e6:	f000 fe33 	bl	8001350 <HAL_Delay>
	ST7789_GPIO_WritePin(ST7789_RST_GPIO_PORT, ST7789_RST_GPIO_PIN, ST7789_GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2102      	movs	r1, #2
 80006ee:	483d      	ldr	r0, [pc, #244]	@ (80007e4 <ST7789_Init+0x148>)
 80006f0:	f001 fad2 	bl	8001c98 <HAL_GPIO_WritePin>
	ST7789_Delay(50);
 80006f4:	2032      	movs	r0, #50	@ 0x32
 80006f6:	f000 fe2b 	bl	8001350 <HAL_Delay>
	
	/* ---------------------------------------------- */
	ST7789_TransmitCommand(ST7789_CMD_COLMOD); // Set Color Mode
 80006fa:	203a      	movs	r0, #58	@ 0x3a
 80006fc:	f7ff ff3e 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_COLOR_MODE_16BIT);
 8000700:	2055      	movs	r0, #85	@ 0x55
 8000702:	f7ff ff5f 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_PORCTRL); // Set Porch Control
 8000706:	20b2      	movs	r0, #178	@ 0xb2
 8000708:	f7ff ff38 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitData(PorchSetting_Default, 5);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff7a 	bl	800060c <ST7789_TransmitData>
	
	ST7789_SetRotation(ST7789_ROTATION); // Set Display Rotation
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f865 	bl	80007e8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
	ST7789_TransmitCommand(ST7789_CMD_GCTRL); // Gate Control
 800071e:	20b7      	movs	r0, #183	@ 0xb7
 8000720:	f7ff ff2c 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_GCTRL);
 8000724:	2035      	movs	r0, #53	@ 0x35
 8000726:	f7ff ff4d 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_VCOMS); // VCOM setting
 800072a:	20bb      	movs	r0, #187	@ 0xbb
 800072c:	f7ff ff26 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_VCOMS); // 0.725v (Default: 0.75v -> 0x20)
 8000730:	2019      	movs	r0, #25
 8000732:	f7ff ff47 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_LCMCTRL); // LCM Control
 8000736:	20c0      	movs	r0, #192	@ 0xc0
 8000738:	f7ff ff20 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_LCMCTRL);
 800073c:	202c      	movs	r0, #44	@ 0x2c
 800073e:	f7ff ff41 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_VDVVRHEN); // VDV and VRH Command Enable
 8000742:	20c2      	movs	r0, #194	@ 0xc2
 8000744:	f7ff ff1a 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_VDVVRHEN);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ff3b 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_VRHS); // VRH set
 800074e:	20c3      	movs	r0, #195	@ 0xc3
 8000750:	f7ff ff14 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_VRHS); // +-4.45v (Default: +-4.1v -> 0x0B)
 8000754:	2012      	movs	r0, #18
 8000756:	f7ff ff35 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_VDVS); // VDV set
 800075a:	20c4      	movs	r0, #196	@ 0xc4
 800075c:	f7ff ff0e 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_VDVS);
 8000760:	2020      	movs	r0, #32
 8000762:	f7ff ff2f 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_FRCTRL2); // Frame Rate Control in Normal Mode
 8000766:	20c6      	movs	r0, #198	@ 0xc6
 8000768:	f7ff ff08 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_FRCTRL2); // Default value (60HZ)
 800076c:	200f      	movs	r0, #15
 800076e:	f7ff ff29 	bl	80005c4 <ST7789_TransmitSingleData>
	
	ST7789_TransmitCommand(ST7789_CMD_PWCTRL1); // Power control
 8000772:	20d0      	movs	r0, #208	@ 0xd0
 8000774:	f7ff ff02 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitSingleData(ST7789_REG_DEF_PWCTRL1H);
 8000778:	20a4      	movs	r0, #164	@ 0xa4
 800077a:	f7ff ff23 	bl	80005c4 <ST7789_TransmitSingleData>
	ST7789_TransmitSingleData(ST7789_REG_DEF_PWCTRL1L);
 800077e:	20a1      	movs	r0, #161	@ 0xa1
 8000780:	f7ff ff20 	bl	80005c4 <ST7789_TransmitSingleData>
	
	/* Division line */
	ST7789_TransmitCommand(ST7789_CMD_PVGAMCTRL);
 8000784:	20e0      	movs	r0, #224	@ 0xe0
 8000786:	f7ff fef9 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitData(PVGAMCTRL_Default, 14);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	210e      	movs	r1, #14
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff3b 	bl	800060c <ST7789_TransmitData>
	
	ST7789_TransmitCommand(ST7789_CMD_NVGAMCTRL);
 8000796:	20e1      	movs	r0, #225	@ 0xe1
 8000798:	f7ff fef0 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitData(NVGAMCTRL_Default, 14);
 800079c:	463b      	mov	r3, r7
 800079e:	210e      	movs	r1, #14
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff33 	bl	800060c <ST7789_TransmitData>
	
	ST7789_TransmitCommand(ST7789_CMD_INVON); // Inversion ON
 80007a6:	2021      	movs	r0, #33	@ 0x21
 80007a8:	f7ff fee8 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitCommand(ST7789_CMD_SLPOUT); // Out of sleep mode
 80007ac:	2011      	movs	r0, #17
 80007ae:	f7ff fee5 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitCommand(ST7789_CMD_NORON); // Normal Display on
 80007b2:	2013      	movs	r0, #19
 80007b4:	f7ff fee2 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitCommand(ST7789_CMD_DISPON); // Main screen turned on
 80007b8:	2029      	movs	r0, #41	@ 0x29
 80007ba:	f7ff fedf 	bl	800057c <ST7789_TransmitCommand>
	
	ST7789_Delay(50);
 80007be:	2032      	movs	r0, #50	@ 0x32
 80007c0:	f000 fdc6 	bl	8001350 <HAL_Delay>
	ST7789_FillScreen(ST7789_COLOR_BLACK); // Fill with Black.
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 f883 	bl	80008d0 <ST7789_FillScreen>
	
}
 80007ca:	bf00      	nop
 80007cc:	372c      	adds	r7, #44	@ 0x2c
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08002cac 	.word	0x08002cac
 80007d8:	08002cb4 	.word	0x08002cb4
 80007dc:	08002cc4 	.word	0x08002cc4
 80007e0:	200000cc 	.word	0x200000cc
 80007e4:	40010800 	.word	0x40010800

080007e8 <ST7789_SetRotation>:

/* .......................... Control .......................... */
void ST7789_SetRotation(uint8_t Rotation)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	
	ST7789_TransmitCommand(ST7789_CMD_MADCTL);
 80007f2:	2036      	movs	r0, #54	@ 0x36
 80007f4:	f7ff fec2 	bl	800057c <ST7789_TransmitCommand>
	
	switch (Rotation)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d81a      	bhi.n	8000834 <ST7789_SetRotation+0x4c>
 80007fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <ST7789_SetRotation+0x1c>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000815 	.word	0x08000815
 8000808:	0800081d 	.word	0x0800081d
 800080c:	08000825 	.word	0x08000825
 8000810:	0800082d 	.word	0x0800082d
	{
		case 0:
		ST7789_TransmitSingleData(ST7789_REG_DEF_MADCTL_MX | ST7789_REG_DEF_MADCTL_MY | ST7789_REG_DEF_MADCTL_RGB);
 8000814:	20c0      	movs	r0, #192	@ 0xc0
 8000816:	f7ff fed5 	bl	80005c4 <ST7789_TransmitSingleData>
		break;
 800081a:	e00c      	b.n	8000836 <ST7789_SetRotation+0x4e>
		case 1:
		ST7789_TransmitSingleData(ST7789_REG_DEF_MADCTL_MY | ST7789_REG_DEF_MADCTL_MV | ST7789_REG_DEF_MADCTL_RGB);
 800081c:	20a0      	movs	r0, #160	@ 0xa0
 800081e:	f7ff fed1 	bl	80005c4 <ST7789_TransmitSingleData>
		break;
 8000822:	e008      	b.n	8000836 <ST7789_SetRotation+0x4e>
		case 2:
		ST7789_TransmitSingleData(ST7789_REG_DEF_MADCTL_RGB);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fecd 	bl	80005c4 <ST7789_TransmitSingleData>
		break;
 800082a:	e004      	b.n	8000836 <ST7789_SetRotation+0x4e>
		case 3:
		ST7789_TransmitSingleData(ST7789_REG_DEF_MADCTL_MX | ST7789_REG_DEF_MADCTL_MV | ST7789_REG_DEF_MADCTL_RGB);
 800082c:	2060      	movs	r0, #96	@ 0x60
 800082e:	f7ff fec9 	bl	80005c4 <ST7789_TransmitSingleData>
		break;
 8000832:	e000      	b.n	8000836 <ST7789_SetRotation+0x4e>
		default:
		break;
 8000834:	bf00      	nop
	}
	
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop

08000840 <ST7789_SetWindowAddress>:

void ST7789_SetWindowAddress(uint16_t XStart, uint16_t YStart, uint16_t XEnd, uint16_t YEnd)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4604      	mov	r4, r0
 8000848:	4608      	mov	r0, r1
 800084a:	4611      	mov	r1, r2
 800084c:	461a      	mov	r2, r3
 800084e:	4623      	mov	r3, r4
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	4603      	mov	r3, r0
 8000854:	80bb      	strh	r3, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
 800085a:	4613      	mov	r3, r2
 800085c:	803b      	strh	r3, [r7, #0]
	
	XStart = XStart + ST7789_XS;
	XEnd   = XEnd + ST7789_XS;
	
	uint8_t ColumnAddress[4] = {XStart >> 8, XStart & 0xFF, XEnd >> 8, XEnd & 0xFF};
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	733b      	strb	r3, [r7, #12]
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	737b      	strb	r3, [r7, #13]
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	b29b      	uxth	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73bb      	strb	r3, [r7, #14]
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]
	
	YStart = YStart + ST7789_YS;
	YEnd   = YEnd + ST7789_YS;
	
	uint8_t RowAddress[4] = {YStart >> 8, YStart & 0xFF, YEnd >> 8, YEnd & 0xFF};
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	723b      	strb	r3, [r7, #8]
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	727b      	strb	r3, [r7, #9]
 800088e:	883b      	ldrh	r3, [r7, #0]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	72bb      	strb	r3, [r7, #10]
 8000898:	883b      	ldrh	r3, [r7, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	72fb      	strb	r3, [r7, #11]
	
	/* ------------- Set Column Address ------------- */
	ST7789_TransmitCommand(ST7789_CMD_CASET);
 800089e:	202a      	movs	r0, #42	@ 0x2a
 80008a0:	f7ff fe6c 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitData(ColumnAddress, sizeof(ColumnAddress));
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2104      	movs	r1, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff feae 	bl	800060c <ST7789_TransmitData>
	
	/* -------------- Set Row Address --------------- */
	ST7789_TransmitCommand(ST7789_CMD_RASET);
 80008b0:	202b      	movs	r0, #43	@ 0x2b
 80008b2:	f7ff fe63 	bl	800057c <ST7789_TransmitCommand>
	ST7789_TransmitData(RowAddress, sizeof(RowAddress));
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fea5 	bl	800060c <ST7789_TransmitData>
	
	/* ------------- Write Param to RAM ------------- */
	ST7789_TransmitCommand(ST7789_CMD_RAMWR);
 80008c2:	202c      	movs	r0, #44	@ 0x2c
 80008c4:	f7ff fe5a 	bl	800057c <ST7789_TransmitCommand>
	
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <ST7789_FillScreen>:
	}
	
}

void ST7789_FillScreen(ST7789_ColorTypeDef Color)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]

	#ifndef ST7789_USE_DMA
	uint16_t heightCounter;
	#endif

	uint16_t packetSize = ST7789_HEIGHT_MODIFIED / ST7789_HOR_LEN;
 80008da:	2330      	movs	r3, #48	@ 0x30
 80008dc:	81fb      	strh	r3, [r7, #14]
	
	#ifdef ST7789_USE_DMA

	uint32_t colorCounter;
	uint16_t newColor = (Color & 0xFF) << 8|(Color >> 8);
 80008de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	81bb      	strh	r3, [r7, #12]

	#else
	uint8_t colorBuff[2] = {Color >> 8, Color & 0xFF};
	#endif
	
	ST7789_SetWindowAddress(0, 0, ST7789_WIDTH_MODIFIED - 1, ST7789_HEIGHT_MODIFIED - 1);
 80008f4:	23ef      	movs	r3, #239	@ 0xef
 80008f6:	22ef      	movs	r2, #239	@ 0xef
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ffa0 	bl	8000840 <ST7789_SetWindowAddress>
	
	/* ------------- Transmit LCD Buffer ------------ */
	#ifdef ST7789_USE_DMA
	
	for (colorCounter = 0; colorCounter < (sizeof(LCDBuffer) / 2); colorCounter++)
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e007      	b.n	8000916 <ST7789_FillScreen+0x46>
	{
		LCDBuffer[colorCounter] = newColor;
 8000906:	4910      	ldr	r1, [pc, #64]	@ (8000948 <ST7789_FillScreen+0x78>)
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	89ba      	ldrh	r2, [r7, #12]
 800090c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (colorCounter = 0; colorCounter < (sizeof(LCDBuffer) / 2); colorCounter++)
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	3301      	adds	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800091c:	d3f3      	bcc.n	8000906 <ST7789_FillScreen+0x36>
	}
	
	for (widthCounter = 0; widthCounter < packetSize; widthCounter++)
 800091e:	2300      	movs	r3, #0
 8000920:	82fb      	strh	r3, [r7, #22]
 8000922:	e007      	b.n	8000934 <ST7789_FillScreen+0x64>
	{
		ST7789_TransmitData((uint8_t *)LCDBuffer, sizeof(LCDBuffer));
 8000924:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <ST7789_FillScreen+0x78>)
 800092a:	f7ff fe6f 	bl	800060c <ST7789_TransmitData>
	for (widthCounter = 0; widthCounter < packetSize; widthCounter++)
 800092e:	8afb      	ldrh	r3, [r7, #22]
 8000930:	3301      	adds	r3, #1
 8000932:	82fb      	strh	r3, [r7, #22]
 8000934:	8afa      	ldrh	r2, [r7, #22]
 8000936:	89fb      	ldrh	r3, [r7, #14]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3f3      	bcc.n	8000924 <ST7789_FillScreen+0x54>
		}
	}
	
	#endif
	
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000cc 	.word	0x200000cc

0800094c <ST7789_DrawPixel>:

/* .......................... Drawing .......................... */
void ST7789_DrawPixel(uint16_t XPos, uint16_t YPos, ST7789_ColorTypeDef Color)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	460b      	mov	r3, r1
 8000958:	80bb      	strh	r3, [r7, #4]
 800095a:	4613      	mov	r3, r2
 800095c:	807b      	strh	r3, [r7, #2]
	
	uint8_t colorBuff[2] = {Color >> 8, Color & 0xFF};
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	733b      	strb	r3, [r7, #12]
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	737b      	strb	r3, [r7, #13]
	
	/* ---------------- Size Control ---------------- */
	if ((XPos < 0) || (XPos >= ST7789_WIDTH_MODIFIED) || (YPos < 0) || (YPos >= ST7789_HEIGHT_MODIFIED))
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2bef      	cmp	r3, #239	@ 0xef
 8000972:	d80f      	bhi.n	8000994 <ST7789_DrawPixel+0x48>
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	2bef      	cmp	r3, #239	@ 0xef
 8000978:	d80c      	bhi.n	8000994 <ST7789_DrawPixel+0x48>
	{
		return;
	}
	
	ST7789_SetWindowAddress(XPos, YPos, XPos, YPos);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	88b9      	ldrh	r1, [r7, #4]
 8000980:	88f8      	ldrh	r0, [r7, #6]
 8000982:	f7ff ff5d 	bl	8000840 <ST7789_SetWindowAddress>
	
	/* ---------------- Write Pixel ----------------- */
	ST7789_TransmitData(colorBuff, sizeof(colorBuff));
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe3d 	bl	800060c <ST7789_TransmitData>
 8000992:	e000      	b.n	8000996 <ST7789_DrawPixel+0x4a>
		return;
 8000994:	bf00      	nop
	
}
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <ST7789_DrawLine>:
	ST7789_Fill(XPos - 1, YPos - 1, XPos + 1, YPos + 1, Color);
	
}

void ST7789_DrawLine(uint16_t XStart, uint16_t YStart, uint16_t XEnd, uint16_t YEnd, ST7789_ColorTypeDef Color)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
	
	uint16_t Swap;
	uint8_t  Steep = abs(YEnd - YStart) > abs(XEnd - XStart);
 80009ba:	883a      	ldrh	r2, [r7, #0]
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009c8:	8879      	ldrh	r1, [r7, #2]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	429a      	cmp	r2, r3
 80009d6:	bfcc      	ite	gt
 80009d8:	2301      	movgt	r3, #1
 80009da:	2300      	movle	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	74fb      	strb	r3, [r7, #19]
	int16_t yDif;
	int16_t err;
	int16_t yStep;
	
	/* ------------------ Swap XY ------------------- */
	if (Steep)
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00b      	beq.n	80009fe <ST7789_DrawLine+0x62>
	{
		
		Swap   = XStart;
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	823b      	strh	r3, [r7, #16]
		XStart = YStart;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	80fb      	strh	r3, [r7, #6]
		YStart = Swap;
 80009ee:	8a3b      	ldrh	r3, [r7, #16]
 80009f0:	80bb      	strh	r3, [r7, #4]
		
		Swap   = XEnd;
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	823b      	strh	r3, [r7, #16]
		XEnd   = YEnd;
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	807b      	strh	r3, [r7, #2]
		YEnd   = Swap;
 80009fa:	8a3b      	ldrh	r3, [r7, #16]
 80009fc:	803b      	strh	r3, [r7, #0]
		
	}
	
	/* -------------- Swap XStart/XEnd -------------- */
	if (XStart > XEnd)
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d90b      	bls.n	8000a1e <ST7789_DrawLine+0x82>
	{
		
		Swap   = XStart;
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	823b      	strh	r3, [r7, #16]
		XStart = XEnd;
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	80fb      	strh	r3, [r7, #6]
		XEnd   = Swap;
 8000a0e:	8a3b      	ldrh	r3, [r7, #16]
 8000a10:	807b      	strh	r3, [r7, #2]
		
		Swap   = YStart;
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	823b      	strh	r3, [r7, #16]
		YStart = YEnd;
 8000a16:	883b      	ldrh	r3, [r7, #0]
 8000a18:	80bb      	strh	r3, [r7, #4]
		YEnd   = Swap;
 8000a1a:	8a3b      	ldrh	r3, [r7, #16]
 8000a1c:	803b      	strh	r3, [r7, #0]
		
	}
	
	/* ------------ Calculate Line Length ----------- */
	xDif = XEnd - XStart;
 8000a1e:	887a      	ldrh	r2, [r7, #2]
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	81fb      	strh	r3, [r7, #14]
	yDif = abs(YEnd - YStart);
 8000a28:	883a      	ldrh	r2, [r7, #0]
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	81bb      	strh	r3, [r7, #12]
	
	err = xDif / 2;
 8000a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3a:	0fda      	lsrs	r2, r3, #31
 8000a3c:	4413      	add	r3, r2
 8000a3e:	105b      	asrs	r3, r3, #1
 8000a40:	82fb      	strh	r3, [r7, #22]
	
	/* ------------- Modify Y Direction ------------- */
	if (YStart < YEnd)
 8000a42:	88ba      	ldrh	r2, [r7, #4]
 8000a44:	883b      	ldrh	r3, [r7, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d202      	bcs.n	8000a50 <ST7789_DrawLine+0xb4>
	{
		yStep = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	82bb      	strh	r3, [r7, #20]
 8000a4e:	e028      	b.n	8000aa2 <ST7789_DrawLine+0x106>
	}
	else
	{
		yStep = -1;
 8000a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a54:	82bb      	strh	r3, [r7, #20]
	}
	
	/* ----------------- Draw Line ------------------ */
	for (; XStart <= XEnd; XStart++)
 8000a56:	e024      	b.n	8000aa2 <ST7789_DrawLine+0x106>
	{
		
		if (Steep)
 8000a58:	7cfb      	ldrb	r3, [r7, #19]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <ST7789_DrawLine+0xd0>
		{
			ST7789_DrawPixel(YStart, XStart, Color);
 8000a5e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a60:	88f9      	ldrh	r1, [r7, #6]
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff71 	bl	800094c <ST7789_DrawPixel>
 8000a6a:	e005      	b.n	8000a78 <ST7789_DrawLine+0xdc>
		}
		else
		{
			ST7789_DrawPixel(XStart, YStart, Color);
 8000a6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a6e:	88b9      	ldrh	r1, [r7, #4]
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff6a 	bl	800094c <ST7789_DrawPixel>
		}
		
		err -= yDif;
 8000a78:	8afa      	ldrh	r2, [r7, #22]
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	82fb      	strh	r3, [r7, #22]
		
		if (err < 0)
 8000a82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da08      	bge.n	8000a9c <ST7789_DrawLine+0x100>
		{
			YStart += yStep;
 8000a8a:	8aba      	ldrh	r2, [r7, #20]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	80bb      	strh	r3, [r7, #4]
			err    += xDif;
 8000a92:	8afa      	ldrh	r2, [r7, #22]
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	4413      	add	r3, r2
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	82fb      	strh	r3, [r7, #22]
	for (; XStart <= XEnd; XStart++)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d9d6      	bls.n	8000a58 <ST7789_DrawLine+0xbc>
		}
		
	}
	
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}

08000ab4 <ST7789_DrawRectangle>:

void ST7789_DrawRectangle(uint16_t XStart, uint16_t YStart, uint16_t XEnd, uint16_t YEnd, ST7789_ColorTypeDef Color)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	
	/* ------------ Write Rectangle Lines ----------- */
	ST7789_DrawLine(XStart, YStart, XEnd, YStart, Color);
 8000ad2:	88bc      	ldrh	r4, [r7, #4]
 8000ad4:	887a      	ldrh	r2, [r7, #2]
 8000ad6:	88b9      	ldrh	r1, [r7, #4]
 8000ad8:	88f8      	ldrh	r0, [r7, #6]
 8000ada:	8b3b      	ldrh	r3, [r7, #24]
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	4623      	mov	r3, r4
 8000ae0:	f7ff ff5c 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(XStart, YStart, XStart, YEnd, Color);
 8000ae4:	883c      	ldrh	r4, [r7, #0]
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	88b9      	ldrh	r1, [r7, #4]
 8000aea:	88f8      	ldrh	r0, [r7, #6]
 8000aec:	8b3b      	ldrh	r3, [r7, #24]
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	4623      	mov	r3, r4
 8000af2:	f7ff ff53 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(XStart, YEnd, XEnd, YEnd, Color);
 8000af6:	883c      	ldrh	r4, [r7, #0]
 8000af8:	887a      	ldrh	r2, [r7, #2]
 8000afa:	8839      	ldrh	r1, [r7, #0]
 8000afc:	88f8      	ldrh	r0, [r7, #6]
 8000afe:	8b3b      	ldrh	r3, [r7, #24]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4623      	mov	r3, r4
 8000b04:	f7ff ff4a 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(XEnd, YStart, XEnd, YEnd, Color);
 8000b08:	883c      	ldrh	r4, [r7, #0]
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	88b9      	ldrh	r1, [r7, #4]
 8000b0e:	8878      	ldrh	r0, [r7, #2]
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4623      	mov	r3, r4
 8000b16:	f7ff ff41 	bl	800099c <ST7789_DrawLine>
	
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}

08000b22 <ST7789_DrawFilledRectangle>:

void ST7789_DrawFilledRectangle(uint16_t XPos, uint16_t YPos, uint16_t Width, uint16_t Height, ST7789_ColorTypeDef Color)
{
 8000b22:	b590      	push	{r4, r7, lr}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af02      	add	r7, sp, #8
 8000b28:	4604      	mov	r4, r0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4623      	mov	r3, r4
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4603      	mov	r3, r0
 8000b36:	80bb      	strh	r3, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	803b      	strh	r3, [r7, #0]
	
	uint8_t heightCounter;
	
	/* -------------- Position Control -------------- */
	if (XPos >= ST7789_WIDTH_MODIFIED || YPos >= ST7789_HEIGHT_MODIFIED)
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	2bef      	cmp	r3, #239	@ 0xef
 8000b44:	d835      	bhi.n	8000bb2 <ST7789_DrawFilledRectangle+0x90>
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	2bef      	cmp	r3, #239	@ 0xef
 8000b4a:	d832      	bhi.n	8000bb2 <ST7789_DrawFilledRectangle+0x90>
	{
		return;
	}
	
	/* ---------------- Size Control ---------------- */
	if ((XPos + Width) >= ST7789_WIDTH_MODIFIED)
 8000b4c:	88fa      	ldrh	r2, [r7, #6]
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	4413      	add	r3, r2
 8000b52:	2bef      	cmp	r3, #239	@ 0xef
 8000b54:	dd03      	ble.n	8000b5e <ST7789_DrawFilledRectangle+0x3c>
	{
		Width = ST7789_WIDTH_MODIFIED - XPos;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b5c:	807b      	strh	r3, [r7, #2]
	}
	
	if ((YPos + Height) >= ST7789_HEIGHT_MODIFIED)
 8000b5e:	88ba      	ldrh	r2, [r7, #4]
 8000b60:	883b      	ldrh	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	2bef      	cmp	r3, #239	@ 0xef
 8000b66:	dd03      	ble.n	8000b70 <ST7789_DrawFilledRectangle+0x4e>
	{
		Height = ST7789_HEIGHT_MODIFIED - YPos;
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b6e:	803b      	strh	r3, [r7, #0]
	}
	
	/* ----------------- Draw Lines ----------------- */
	for (heightCounter = 0; heightCounter <= Height; heightCounter++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e017      	b.n	8000ba6 <ST7789_DrawFilledRectangle+0x84>
	{
		ST7789_DrawLine(XPos, YPos + heightCounter, XPos + Width, YPos + heightCounter, Color);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29c      	uxth	r4, r3
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	88f8      	ldrh	r0, [r7, #6]
 8000b94:	8c3b      	ldrh	r3, [r7, #32]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	f7ff fefe 	bl	800099c <ST7789_DrawLine>
	for (heightCounter = 0; heightCounter <= Height; heightCounter++)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	883a      	ldrh	r2, [r7, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d2e2      	bcs.n	8000b76 <ST7789_DrawFilledRectangle+0x54>
 8000bb0:	e000      	b.n	8000bb4 <ST7789_DrawFilledRectangle+0x92>
		return;
 8000bb2:	bf00      	nop
	}
	
}
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}

08000bba <ST7789_DrawCircle>:

void ST7789_DrawCircle(uint16_t XPos, uint16_t YPos, uint8_t Radius, ST7789_ColorTypeDef Color)
{
 8000bba:	b590      	push	{r4, r7, lr}
 8000bbc:	b087      	sub	sp, #28
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4623      	mov	r3, r4
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80bb      	strh	r3, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	803b      	strh	r3, [r7, #0]
	
	int16_t f = 1 - Radius;
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f1c3 0301 	rsb	r3, r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * Radius;
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	03d2      	lsls	r2, r2, #15
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	823b      	strh	r3, [r7, #16]
	int16_t y = Radius;
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	81fb      	strh	r3, [r7, #14]
	
	/* ------------ Write Circle Pixels ------------- */
	ST7789_DrawPixel(XPos, YPos + Radius, Color);
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	883a      	ldrh	r2, [r7, #0]
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe9c 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos, YPos - Radius, Color);
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	883a      	ldrh	r2, [r7, #0]
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe92 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos + Radius, YPos, Color);
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	883a      	ldrh	r2, [r7, #0]
 8000c34:	88b9      	ldrh	r1, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe88 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos - Radius, YPos, Color);
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	88b9      	ldrh	r1, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe7e 	bl	800094c <ST7789_DrawPixel>
	
	while (x < y)
 8000c50:	e081      	b.n	8000d56 <ST7789_DrawCircle+0x19c>
	{
		
		if (f >= 0)
 8000c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0e      	blt.n	8000c78 <ST7789_DrawCircle+0xbe>
		{
			y--;
 8000c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c66:	8a7b      	ldrh	r3, [r7, #18]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c6e:	8afa      	ldrh	r2, [r7, #22]
 8000c70:	8a7b      	ldrh	r3, [r7, #18]
 8000c72:	4413      	add	r3, r2
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	82fb      	strh	r3, [r7, #22]
		}
		
		x++;
 8000c78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000c84:	8abb      	ldrh	r3, [r7, #20]
 8000c86:	3302      	adds	r3, #2
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000c8c:	8afa      	ldrh	r2, [r7, #22]
 8000c8e:	8abb      	ldrh	r3, [r7, #20]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(XPos + x, YPos + y, Color);
 8000c96:	8a3a      	ldrh	r2, [r7, #16]
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b298      	uxth	r0, r3
 8000c9e:	89fa      	ldrh	r2, [r7, #14]
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	883a      	ldrh	r2, [r7, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f7ff fe4f 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos - x, YPos + y, Color);
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	89fa      	ldrh	r2, [r7, #14]
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	883a      	ldrh	r2, [r7, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f7ff fe43 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos + x, YPos - y, Color);
 8000cc6:	8a3a      	ldrh	r2, [r7, #16]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	88ba      	ldrh	r2, [r7, #4]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	883a      	ldrh	r2, [r7, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff fe37 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos - x, YPos - y, Color);
 8000cde:	8a3b      	ldrh	r3, [r7, #16]
 8000ce0:	88fa      	ldrh	r2, [r7, #6]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	88ba      	ldrh	r2, [r7, #4]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	883a      	ldrh	r2, [r7, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fe2b 	bl	800094c <ST7789_DrawPixel>

		ST7789_DrawPixel(XPos + y, YPos + x, Color);
 8000cf6:	89fa      	ldrh	r2, [r7, #14]
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	8a3a      	ldrh	r2, [r7, #16]
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	883a      	ldrh	r2, [r7, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fe1f 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos - y, YPos + x, Color);
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b298      	uxth	r0, r3
 8000d16:	8a3a      	ldrh	r2, [r7, #16]
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	883a      	ldrh	r2, [r7, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fe13 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos + y, YPos - x, Color);
 8000d26:	89fa      	ldrh	r2, [r7, #14]
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	8a3b      	ldrh	r3, [r7, #16]
 8000d30:	88ba      	ldrh	r2, [r7, #4]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	883a      	ldrh	r2, [r7, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fe07 	bl	800094c <ST7789_DrawPixel>
		ST7789_DrawPixel(XPos - y, YPos - x, Color);
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b298      	uxth	r0, r3
 8000d46:	8a3b      	ldrh	r3, [r7, #16]
 8000d48:	88ba      	ldrh	r2, [r7, #4]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	883a      	ldrh	r2, [r7, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fdfb 	bl	800094c <ST7789_DrawPixel>
	while (x < y)
 8000d56:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f6ff af77 	blt.w	8000c52 <ST7789_DrawCircle+0x98>
		
	}
	
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <ST7789_DrawFilledCircle>:

void ST7789_DrawFilledCircle(int16_t XPos, int16_t YPos, int16_t Radius, ST7789_ColorTypeDef Color)
{
 8000d6e:	b590      	push	{r4, r7, lr}
 8000d70:	b089      	sub	sp, #36	@ 0x24
 8000d72:	af02      	add	r7, sp, #8
 8000d74:	4604      	mov	r4, r0
 8000d76:	4608      	mov	r0, r1
 8000d78:	4611      	mov	r1, r2
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	80fb      	strh	r3, [r7, #6]
 8000d80:	4603      	mov	r3, r0
 8000d82:	80bb      	strh	r3, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	803b      	strh	r3, [r7, #0]
	
	int16_t f = 1 - Radius;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	f1c3 0301 	rsb	r3, r3, #1
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * Radius;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	823b      	strh	r3, [r7, #16]
	int16_t y = Radius;
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	81fb      	strh	r3, [r7, #14]
	
	/* ------------ Write Circle Pixels ------------- */
	ST7789_DrawPixel(XPos, YPos + Radius, Color);
 8000db0:	88f8      	ldrh	r0, [r7, #6]
 8000db2:	88ba      	ldrh	r2, [r7, #4]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4413      	add	r3, r2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	883a      	ldrh	r2, [r7, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fdc5 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos, YPos - Radius, Color);
 8000dc2:	88f8      	ldrh	r0, [r7, #6]
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	883a      	ldrh	r2, [r7, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff fdbc 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos + Radius, YPos, Color);
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	883a      	ldrh	r2, [r7, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fdb3 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawPixel(XPos - Radius, YPos, Color);
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	88b9      	ldrh	r1, [r7, #4]
 8000df0:	883a      	ldrh	r2, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fdaa 	bl	800094c <ST7789_DrawPixel>
	ST7789_DrawLine(XPos - Radius, YPos, XPos + Radius, YPos, Color);
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	88b9      	ldrh	r1, [r7, #4]
 8000e02:	88fa      	ldrh	r2, [r7, #6]
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	4413      	add	r3, r2
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	88bc      	ldrh	r4, [r7, #4]
 8000e0c:	883b      	ldrh	r3, [r7, #0]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4623      	mov	r3, r4
 8000e12:	f7ff fdc3 	bl	800099c <ST7789_DrawLine>
	
	while (x < y)
 8000e16:	e079      	b.n	8000f0c <ST7789_DrawFilledCircle+0x19e>
	{
		
		if (f >= 0)
 8000e18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0e      	blt.n	8000e3e <ST7789_DrawFilledCircle+0xd0>
		{
			y--;
 8000e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000e2c:	8a7b      	ldrh	r3, [r7, #18]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000e34:	8afa      	ldrh	r2, [r7, #22]
 8000e36:	8a7b      	ldrh	r3, [r7, #18]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	82fb      	strh	r3, [r7, #22]
		}
		
		x++;
 8000e3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000e4a:	8abb      	ldrh	r3, [r7, #20]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000e52:	8afa      	ldrh	r2, [r7, #22]
 8000e54:	8abb      	ldrh	r3, [r7, #20]
 8000e56:	4413      	add	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	82fb      	strh	r3, [r7, #22]
		
		ST7789_DrawLine(XPos - x, YPos + y, XPos + x, YPos + y, Color);
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	8a3b      	ldrh	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	b298      	uxth	r0, r3
 8000e64:	88ba      	ldrh	r2, [r7, #4]
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	8a3b      	ldrh	r3, [r7, #16]
 8000e70:	4413      	add	r3, r2
 8000e72:	b29c      	uxth	r4, r3
 8000e74:	88ba      	ldrh	r2, [r7, #4]
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	883b      	ldrh	r3, [r7, #0]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	4622      	mov	r2, r4
 8000e84:	f7ff fd8a 	bl	800099c <ST7789_DrawLine>
		ST7789_DrawLine(XPos + x, YPos - y, XPos - x, YPos - y, Color);
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	8a3b      	ldrh	r3, [r7, #16]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b298      	uxth	r0, r3
 8000e90:	88ba      	ldrh	r2, [r7, #4]
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b299      	uxth	r1, r3
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	8a3b      	ldrh	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b29c      	uxth	r4, r3
 8000ea0:	88ba      	ldrh	r2, [r7, #4]
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	883b      	ldrh	r3, [r7, #0]
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	4622      	mov	r2, r4
 8000eb0:	f7ff fd74 	bl	800099c <ST7789_DrawLine>
		
		ST7789_DrawLine(XPos + y, YPos + x, XPos - y, YPos + x, Color);
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	88ba      	ldrh	r2, [r7, #4]
 8000ebe:	8a3b      	ldrh	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29c      	uxth	r4, r3
 8000ecc:	88ba      	ldrh	r2, [r7, #4]
 8000ece:	8a3b      	ldrh	r3, [r7, #16]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	883b      	ldrh	r3, [r7, #0]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	4622      	mov	r2, r4
 8000edc:	f7ff fd5e 	bl	800099c <ST7789_DrawLine>
		ST7789_DrawLine(XPos + y, YPos - x, XPos - y, YPos - x, Color);
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b298      	uxth	r0, r3
 8000ee8:	88ba      	ldrh	r2, [r7, #4]
 8000eea:	8a3b      	ldrh	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b29c      	uxth	r4, r3
 8000ef8:	88ba      	ldrh	r2, [r7, #4]
 8000efa:	8a3b      	ldrh	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	883b      	ldrh	r3, [r7, #0]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	4622      	mov	r2, r4
 8000f08:	f7ff fd48 	bl	800099c <ST7789_DrawLine>
	while (x < y)
 8000f0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f6ff af7f 	blt.w	8000e18 <ST7789_DrawFilledCircle+0xaa>
		
	}
	
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <ST7789_PutChar>:
	
}

/* ........................... Text ............................ */
void ST7789_PutChar(uint16_t XPos, uint16_t YPos, char Ch, ST7789_FontTypeDef Font, ST7789_ColorTypeDef Color, ST7789_ColorTypeDef BackgroundColor)
{
 8000f24:	b082      	sub	sp, #8
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b088      	sub	sp, #32
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
 8000f32:	460b      	mov	r3, r1
 8000f34:	80bb      	strh	r3, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	70fb      	strb	r3, [r7, #3]
	
	uint32_t heightCounter;
	uint32_t widthCounter;
	uint32_t fontByte;
	
	uint8_t colorBuff[2]   = {Color >> 8, Color & 0xFF};
 8000f3a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	743b      	strb	r3, [r7, #16]
 8000f44:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	747b      	strb	r3, [r7, #17]
	uint8_t bgColorBuff[2] = {BackgroundColor >> 8, BackgroundColor & 0xFF};
 8000f4a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	737b      	strb	r3, [r7, #13]
	
	/* --------------- Transmit Data ---------------- */
	ST7789_SetWindowAddress(XPos, YPos, XPos + Font.Width - 1, YPos + Font.Height - 1);
 8000f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f5e:	461a      	mov	r2, r3
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4413      	add	r3, r2
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f6e:	4619      	mov	r1, r3
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	440b      	add	r3, r1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	88b9      	ldrh	r1, [r7, #4]
 8000f7c:	88f8      	ldrh	r0, [r7, #6]
 8000f7e:	f7ff fc5f 	bl	8000840 <ST7789_SetWindowAddress>

	for (heightCounter = 0; heightCounter < Font.Height; heightCounter++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e031      	b.n	8000fec <ST7789_PutChar+0xc8>
	{
		
		fontByte = Font.Data[(Ch - 32) * Font.Height + heightCounter];
 8000f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	3b20      	subs	r3, #32
 8000f8e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
		
		for (widthCounter = 0; widthCounter < Font.Width; widthCounter++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	e017      	b.n	8000fda <ST7789_PutChar+0xb6>
		{
			
			if ((fontByte << widthCounter) & 0x8000)
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <ST7789_PutChar+0xa4>
			{
				ST7789_TransmitData(colorBuff, sizeof(colorBuff));
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb23 	bl	800060c <ST7789_TransmitData>
 8000fc6:	e005      	b.n	8000fd4 <ST7789_PutChar+0xb0>
			}
			else
			{
				ST7789_TransmitData(bgColorBuff, sizeof(bgColorBuff));
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fb1c 	bl	800060c <ST7789_TransmitData>
		for (widthCounter = 0; widthCounter < Font.Width; widthCounter++)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fde:	461a      	mov	r2, r3
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3e1      	bcc.n	8000faa <ST7789_PutChar+0x86>
	for (heightCounter = 0; heightCounter < Font.Height; heightCounter++)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d3c7      	bcc.n	8000f88 <ST7789_PutChar+0x64>
			
		}
		
	}
	
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001004:	b002      	add	sp, #8
 8001006:	4770      	bx	lr

08001008 <ST7789_PutString>:

void ST7789_PutString(uint16_t XPos, uint16_t YPos, const char *Str, ST7789_FontTypeDef Font, ST7789_ColorTypeDef Color, ST7789_ColorTypeDef BackgroundColor)
{
 8001008:	b082      	sub	sp, #8
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af04      	add	r7, sp, #16
 8001010:	603a      	str	r2, [r7, #0]
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	460b      	mov	r3, r1
 800101a:	80bb      	strh	r3, [r7, #4]
	
	/* --------------- Put Characters --------------- */
	while (*Str)
 800101c:	e02d      	b.n	800107a <ST7789_PutString+0x72>
	{
		
		if (XPos + Font.Width >= ST7789_WIDTH_MODIFIED)
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	7d3a      	ldrb	r2, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	2bef      	cmp	r3, #239	@ 0xef
 8001026:	dd13      	ble.n	8001050 <ST7789_PutString+0x48>
		{
			
			XPos  = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	80fb      	strh	r3, [r7, #6]
			YPos += Font.Height;
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	461a      	mov	r2, r3
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	80bb      	strh	r3, [r7, #4]
			
			if (YPos + Font.Height >= ST7789_HEIGHT_MODIFIED)
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	7d7a      	ldrb	r2, [r7, #21]
 800103a:	4413      	add	r3, r2
 800103c:	2bef      	cmp	r3, #239	@ 0xef
 800103e:	dc21      	bgt.n	8001084 <ST7789_PutString+0x7c>
			{
				break;
			}
			
			/* Skip space in the beginning of the new line */
			if (*Str == ' ')
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b20      	cmp	r3, #32
 8001046:	d103      	bne.n	8001050 <ST7789_PutString+0x48>
			{
				Str++;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	603b      	str	r3, [r7, #0]
				continue;
 800104e:	e014      	b.n	800107a <ST7789_PutString+0x72>
			}
			
		}
		
		ST7789_PutChar(XPos, YPos, *Str, Font, Color, BackgroundColor);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	88b9      	ldrh	r1, [r7, #4]
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	8c3b      	ldrh	r3, [r7, #32]
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	8bbb      	ldrh	r3, [r7, #28]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f7ff ff5d 	bl	8000f24 <ST7789_PutChar>
		
		XPos += Font.Width;
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	461a      	mov	r2, r3
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	4413      	add	r3, r2
 8001072:	80fb      	strh	r3, [r7, #6]
		Str++;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
	while (*Str)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1cd      	bne.n	800101e <ST7789_PutString+0x16>
		
	}
	
}
 8001082:	e000      	b.n	8001086 <ST7789_PutString+0x7e>
				break;
 8001084:	bf00      	nop
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001090:	b002      	add	sp, #8
 8001092:	4770      	bx	lr

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_MspInit+0x5c>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <HAL_MspInit+0x5c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_MspInit+0x5c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <HAL_MspInit+0x5c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_MspInit+0x60>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_MspInit+0x60>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000

080010f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a28      	ldr	r2, [pc, #160]	@ (80011b4 <HAL_SPI_MspInit+0xbc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d149      	bne.n	80011ac <HAL_SPI_MspInit+0xb4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a26      	ldr	r2, [pc, #152]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 800111e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_SPI_MspInit+0xc0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001148:	23a0      	movs	r3, #160	@ 0xa0
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	4818      	ldr	r0, [pc, #96]	@ (80011bc <HAL_SPI_MspInit+0xc4>)
 800115c:	f000 fc18 	bl	8001990 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001160:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001162:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_SPI_MspInit+0xcc>)
 8001164:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001168:	2210      	movs	r2, #16
 800116a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 800118c:	2200      	movs	r2, #0
 800118e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001190:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 8001192:	f000 fa0f 	bl	80015b4 <HAL_DMA_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800119c:	f7ff f9e8 	bl	8000570 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 80011a4:	649a      	str	r2, [r3, #72]	@ 0x48
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_SPI_MspInit+0xc8>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013000 	.word	0x40013000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	20000088 	.word	0x20000088
 80011c4:	40020030 	.word	0x40020030

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <NMI_Handler+0x4>

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <MemManage_Handler+0x4>

080011e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <UsageFault_Handler+0x4>

080011f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f87e 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <DMA1_Channel3_IRQHandler+0x10>)
 8001226:	f000 fa7f 	bl	8001728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000088 	.word	0x20000088

08001234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff fff8 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001246:	490c      	ldr	r1, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001248:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <LoopFillZerobss+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800125c:	4c09      	ldr	r4, [pc, #36]	@ (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f001 fce3 	bl	8002c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff f89f 	bl	80003b0 <main>
  bx lr
 8001272:	4770      	bx	lr
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800127c:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 8001280:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001284:	20000a30 	.word	0x20000a30

08001288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_2_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f947 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fef4 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f95f 	bl	800159a <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f4:	f000 f927 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000008 	.word	0x20000008
 8001310:	20000010 	.word	0x20000010
 8001314:	2000000c 	.word	0x2000000c

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <HAL_IncTick+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000010 	.word	0x20000010
 8001338:	20000a2c 	.word	0x20000a2c

0800133c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	@ (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000a2c 	.word	0x20000a2c

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fff0 	bl	800133c <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffe0 	bl	800133c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000010 	.word	0x20000010

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4906      	ldr	r1, [pc, #24]	@ (8001430 <__NVIC_EnableIRQ+0x34>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001510:	f7ff ff90 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	@ (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff2d 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff42 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff35 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e043      	b.n	8001652 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_DMA_Init+0xa8>)
 80015d2:	4413      	add	r3, r2
 80015d4:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <HAL_DMA_Init+0xac>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	009a      	lsls	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <HAL_DMA_Init+0xb0>)
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001602:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	bffdfff8 	.word	0xbffdfff8
 8001660:	cccccccd 	.word	0xcccccccd
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Start_IT+0x20>
 8001684:	2302      	movs	r3, #2
 8001686:	e04b      	b.n	8001720 <HAL_DMA_Start_IT+0xb8>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d13a      	bne.n	8001712 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f937 	bl	8001934 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 020e 	orr.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e00f      	b.n	8001700 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 020a 	orr.w	r2, r2, #10
 80016fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e005      	b.n	800171e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	2204      	movs	r2, #4
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d04f      	beq.n	80017f0 <HAL_DMA_IRQHandler+0xc8>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d04a      	beq.n	80017f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a66      	ldr	r2, [pc, #408]	@ (8001918 <HAL_DMA_IRQHandler+0x1f0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d029      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xae>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a65      	ldr	r2, [pc, #404]	@ (800191c <HAL_DMA_IRQHandler+0x1f4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d022      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xaa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a63      	ldr	r2, [pc, #396]	@ (8001920 <HAL_DMA_IRQHandler+0x1f8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01a      	beq.n	80017cc <HAL_DMA_IRQHandler+0xa4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a62      	ldr	r2, [pc, #392]	@ (8001924 <HAL_DMA_IRQHandler+0x1fc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d012      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x9e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a60      	ldr	r2, [pc, #384]	@ (8001928 <HAL_DMA_IRQHandler+0x200>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x98>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a5f      	ldr	r2, [pc, #380]	@ (800192c <HAL_DMA_IRQHandler+0x204>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <HAL_DMA_IRQHandler+0x92>
 80017b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017b8:	e00e      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017be:	e00b      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017c4:	e008      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ca:	e005      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d0:	e002      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0xb0>
 80017d6:	2304      	movs	r3, #4
 80017d8:	4a55      	ldr	r2, [pc, #340]	@ (8001930 <HAL_DMA_IRQHandler+0x208>)
 80017da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8094 	beq.w	800190e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	e08e      	b.n	800190e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2202      	movs	r2, #2
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d056      	beq.n	80018ae <HAL_DMA_IRQHandler+0x186>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d051      	beq.n	80018ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 020a 	bic.w	r2, r2, #10
 8001826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a38      	ldr	r2, [pc, #224]	@ (8001918 <HAL_DMA_IRQHandler+0x1f0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d029      	beq.n	800188e <HAL_DMA_IRQHandler+0x166>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a37      	ldr	r2, [pc, #220]	@ (800191c <HAL_DMA_IRQHandler+0x1f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <HAL_DMA_IRQHandler+0x162>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a35      	ldr	r2, [pc, #212]	@ (8001920 <HAL_DMA_IRQHandler+0x1f8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01a      	beq.n	8001884 <HAL_DMA_IRQHandler+0x15c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a34      	ldr	r2, [pc, #208]	@ (8001924 <HAL_DMA_IRQHandler+0x1fc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d012      	beq.n	800187e <HAL_DMA_IRQHandler+0x156>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a32      	ldr	r2, [pc, #200]	@ (8001928 <HAL_DMA_IRQHandler+0x200>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x150>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a31      	ldr	r2, [pc, #196]	@ (800192c <HAL_DMA_IRQHandler+0x204>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d102      	bne.n	8001872 <HAL_DMA_IRQHandler+0x14a>
 800186c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001870:	e00e      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 8001872:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001876:	e00b      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 8001878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187c:	e008      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 800187e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001882:	e005      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 8001884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001888:	e002      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 800188a:	2320      	movs	r3, #32
 800188c:	e000      	b.n	8001890 <HAL_DMA_IRQHandler+0x168>
 800188e:	2302      	movs	r3, #2
 8001890:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <HAL_DMA_IRQHandler+0x208>)
 8001892:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d034      	beq.n	800190e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018ac:	e02f      	b.n	800190e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d028      	beq.n	8001910 <HAL_DMA_IRQHandler+0x1e8>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d023      	beq.n	8001910 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
    }
  }
  return;
 800190e:	bf00      	nop
 8001910:	bf00      	nop
}
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020008 	.word	0x40020008
 800191c:	4002001c 	.word	0x4002001c
 8001920:	40020030 	.word	0x40020030
 8001924:	40020044 	.word	0x40020044
 8001928:	40020058 	.word	0x40020058
 800192c:	4002006c 	.word	0x4002006c
 8001930:	40020000 	.word	0x40020000

08001934 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b10      	cmp	r3, #16
 8001960:	d108      	bne.n	8001974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001972:	e007      	b.n	8001984 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b08b      	sub	sp, #44	@ 0x2c
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e169      	b.n	8001c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a4:	2201      	movs	r2, #1
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8158 	bne.w	8001c72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d05e      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019cc:	4a98      	ldr	r2, [pc, #608]	@ (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d875      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019d2:	4a98      	ldr	r2, [pc, #608]	@ (8001c34 <HAL_GPIO_Init+0x2a4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d058      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019d8:	4a96      	ldr	r2, [pc, #600]	@ (8001c34 <HAL_GPIO_Init+0x2a4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d86f      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019de:	4a96      	ldr	r2, [pc, #600]	@ (8001c38 <HAL_GPIO_Init+0x2a8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d052      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019e4:	4a94      	ldr	r2, [pc, #592]	@ (8001c38 <HAL_GPIO_Init+0x2a8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d869      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019ea:	4a94      	ldr	r2, [pc, #592]	@ (8001c3c <HAL_GPIO_Init+0x2ac>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04c      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019f0:	4a92      	ldr	r2, [pc, #584]	@ (8001c3c <HAL_GPIO_Init+0x2ac>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d863      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019f6:	4a92      	ldr	r2, [pc, #584]	@ (8001c40 <HAL_GPIO_Init+0x2b0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d046      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019fc:	4a90      	ldr	r2, [pc, #576]	@ (8001c40 <HAL_GPIO_Init+0x2b0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d85d      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d82a      	bhi.n	8001a5c <HAL_GPIO_Init+0xcc>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d859      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <HAL_GPIO_Init+0x80>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a65 	.word	0x08001a65
 8001a18:	08001a77 	.word	0x08001a77
 8001a1c:	08001ab9 	.word	0x08001ab9
 8001a20:	08001abf 	.word	0x08001abf
 8001a24:	08001abf 	.word	0x08001abf
 8001a28:	08001abf 	.word	0x08001abf
 8001a2c:	08001abf 	.word	0x08001abf
 8001a30:	08001abf 	.word	0x08001abf
 8001a34:	08001abf 	.word	0x08001abf
 8001a38:	08001abf 	.word	0x08001abf
 8001a3c:	08001abf 	.word	0x08001abf
 8001a40:	08001abf 	.word	0x08001abf
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001abf 	.word	0x08001abf
 8001a4c:	08001abf 	.word	0x08001abf
 8001a50:	08001abf 	.word	0x08001abf
 8001a54:	08001a6d 	.word	0x08001a6d
 8001a58:	08001a81 	.word	0x08001a81
 8001a5c:	4a79      	ldr	r2, [pc, #484]	@ (8001c44 <HAL_GPIO_Init+0x2b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a62:	e02c      	b.n	8001abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e029      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e024      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e01f      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	330c      	adds	r3, #12
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e01a      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e013      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	611a      	str	r2, [r3, #16]
          break;
 8001aaa:	e009      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	615a      	str	r2, [r3, #20]
          break;
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          break;
 8001abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d801      	bhi.n	8001aca <HAL_GPIO_Init+0x13a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_Init+0x13e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2bff      	cmp	r3, #255	@ 0xff
 8001ad4:	d802      	bhi.n	8001adc <HAL_GPIO_Init+0x14c>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x152>
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	210f      	movs	r1, #15
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	6a39      	ldr	r1, [r7, #32]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80b1 	beq.w	8001c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b10:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a4c      	ldr	r2, [pc, #304]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b28:	4a48      	ldr	r2, [pc, #288]	@ (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a40      	ldr	r2, [pc, #256]	@ (8001c50 <HAL_GPIO_Init+0x2c0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_GPIO_Init+0x1ec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3f      	ldr	r2, [pc, #252]	@ (8001c54 <HAL_GPIO_Init+0x2c4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <HAL_GPIO_Init+0x1e8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d007      	beq.n	8001b74 <HAL_GPIO_Init+0x1e4>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a3d      	ldr	r2, [pc, #244]	@ (8001c5c <HAL_GPIO_Init+0x2cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_GPIO_Init+0x1e0>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b70:	2304      	movs	r3, #4
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b8e:	492f      	ldr	r1, [pc, #188]	@ (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	492c      	ldr	r1, [pc, #176]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4928      	ldr	r1, [pc, #160]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4922      	ldr	r1, [pc, #136]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	491e      	ldr	r1, [pc, #120]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4914      	ldr	r1, [pc, #80]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d021      	beq.n	8001c64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e021      	b.n	8001c72 <HAL_GPIO_Init+0x2e2>
 8001c2e:	bf00      	nop
 8001c30:	10320000 	.word	0x10320000
 8001c34:	10310000 	.word	0x10310000
 8001c38:	10220000 	.word	0x10220000
 8001c3c:	10210000 	.word	0x10210000
 8001c40:	10120000 	.word	0x10120000
 8001c44:	10110000 	.word	0x10110000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40010800 	.word	0x40010800
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	40011000 	.word	0x40011000
 8001c5c:	40011400 	.word	0x40011400
 8001c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4909      	ldr	r1, [pc, #36]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f ae8e 	bne.w	80019a4 <HAL_GPIO_Init+0x14>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	372c      	adds	r7, #44	@ 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e272      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b92      	ldr	r3, [pc, #584]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
 8001d00:	4b8c      	ldr	r3, [pc, #560]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b89      	ldr	r3, [pc, #548]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x12c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e24c      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x76>
 8001d30:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a7f      	ldr	r2, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b78      	ldr	r3, [pc, #480]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xbc>
 8001d6a:	4b72      	ldr	r3, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a71      	ldr	r2, [pc, #452]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b68      	ldr	r3, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff faca 	bl	800133c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fac6 	bl	800133c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e200      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe4>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fab6 	bl	800133c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fab2 	bl	800133c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1ec      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x10c>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1c0      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4939      	ldr	r1, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fa6b 	bl	800133c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fa67 	bl	800133c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1a1      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4927      	ldr	r1, [pc, #156]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fa4a 	bl	800133c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa46 	bl	800133c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e180      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03a      	beq.n	8001f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fa2a 	bl	800133c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fa26 	bl	800133c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e160      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 fa9c 	bl	8002448 <RCC_Delay>
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fa10 	bl	800133c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fa0c 	bl	800133c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e146      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000
 8001f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e9      	bne.n	8001f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a6 	beq.w	80020a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b88      	ldr	r3, [pc, #544]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a87      	ldr	r2, [pc, #540]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b85      	ldr	r3, [pc, #532]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b82      	ldr	r3, [pc, #520]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b7f      	ldr	r3, [pc, #508]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7e      	ldr	r2, [pc, #504]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f9cd 	bl	800133c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff f9c9 	bl	800133c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	@ 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e103      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b75      	ldr	r3, [pc, #468]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x312>
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02d      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x334>
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a69      	ldr	r2, [pc, #420]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b67      	ldr	r3, [pc, #412]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a66      	ldr	r2, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e01c      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x356>
 8002004:	4b61      	ldr	r3, [pc, #388]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 800201e:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a5a      	ldr	r2, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b58      	ldr	r3, [pc, #352]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a57      	ldr	r2, [pc, #348]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7ff f97d 	bl	800133c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7ff f979 	bl	800133c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0b1      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCC_OscConfig+0x37e>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff f967 	bl	800133c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff f963 	bl	800133c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e09b      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a3b      	ldr	r2, [pc, #236]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d061      	beq.n	8002180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d146      	bne.n	8002152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff f937 	bl	800133c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f933 	bl	800133c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e06d      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e4:	4b29      	ldr	r3, [pc, #164]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4921      	ldr	r1, [pc, #132]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a19      	ldr	r1, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	430b      	orrs	r3, r1
 800211e:	491b      	ldr	r1, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff f907 	bl	800133c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff f903 	bl	800133c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e03d      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x46a>
 8002150:	e035      	b.n	80021be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff f8f0 	bl	800133c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f8ec 	bl	800133c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e026      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x498>
 800217e:	e01e      	b.n	80021be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e019      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_OscConfig+0x500>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d0      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b67      	ldr	r3, [pc, #412]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4965      	ldr	r1, [pc, #404]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b63      	ldr	r3, [pc, #396]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002228:	4b59      	ldr	r3, [pc, #356]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002240:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a52      	ldr	r2, [pc, #328]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800224a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	494d      	ldr	r1, [pc, #308]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d040      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e073      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06b      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4936      	ldr	r1, [pc, #216]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7ff f83e 	bl	800133c <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff f83a 	bl	800133c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e053      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d210      	bcs.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	4922      	ldr	r1, [pc, #136]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e032      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4916      	ldr	r1, [pc, #88]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490e      	ldr	r1, [pc, #56]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235a:	f000 f821 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490a      	ldr	r1, [pc, #40]	@ (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1cc>)
 8002374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x1d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff9c 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
 8002394:	08004220 	.word	0x08004220
 8002398:	20000008 	.word	0x20000008
 800239c:	2000000c 	.word	0x2000000c

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x94>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ce:	e027      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d2:	613b      	str	r3, [r7, #16]
      break;
 80023d4:	e027      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x94>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0c5b      	lsrs	r3, r3, #17
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	4a11      	ldr	r2, [pc, #68]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e004      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	613b      	str	r3, [r7, #16]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	693b      	ldr	r3, [r7, #16]
}
 8002428:	4618      	mov	r0, r3
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	08004230 	.word	0x08004230
 8002440:	08004240 	.word	0x08004240
 8002444:	003d0900 	.word	0x003d0900

08002448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <RCC_Delay+0x34>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <RCC_Delay+0x38>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002464:	bf00      	nop
  }
  while (Delay --);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <RCC_Delay+0x1c>
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20000008 	.word	0x20000008
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e076      	b.n	8002584 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024a6:	d009      	beq.n	80024bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
 80024ae:	e005      	b.n	80024bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fe0e 	bl	80010f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	0c1a      	lsrs	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f002 0204 	and.w	r2, r2, #4
 8002562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800259c:	f7fe fece 	bl	800133c <HAL_GetTick>
 80025a0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	e12a      	b.n	800280c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x36>
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e122      	b.n	800280c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_SPI_Transmit+0x48>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e11b      	b.n	800280c <HAL_SPI_Transmit+0x280>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2203      	movs	r2, #3
 80025e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002622:	d10f      	bne.n	8002644 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002642:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264e:	2b40      	cmp	r3, #64	@ 0x40
 8002650:	d007      	beq.n	8002662 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800266a:	d152      	bne.n	8002712 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_Transmit+0xee>
 8002674:	8b7b      	ldrh	r3, [r7, #26]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d145      	bne.n	8002706 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800269e:	e032      	b.n	8002706 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d112      	bne.n	80026d4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026d2:	e018      	b.n	8002706 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026d4:	f7fe fe32 	bl	800133c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d803      	bhi.n	80026ec <HAL_SPI_Transmit+0x160>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ea:	d102      	bne.n	80026f2 <HAL_SPI_Transmit+0x166>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e082      	b.n	800280c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1c7      	bne.n	80026a0 <HAL_SPI_Transmit+0x114>
 8002710:	e053      	b.n	80027ba <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Transmit+0x194>
 800271a:	8b7b      	ldrh	r3, [r7, #26]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d147      	bne.n	80027b0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002746:	e033      	b.n	80027b0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d113      	bne.n	800277e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800277c:	e018      	b.n	80027b0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277e:	f7fe fddd 	bl	800133c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d803      	bhi.n	8002796 <HAL_SPI_Transmit+0x20a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002794:	d102      	bne.n	800279c <HAL_SPI_Transmit+0x210>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e02d      	b.n	800280c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1c6      	bne.n	8002748 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f9fe 	bl	8002bc0 <SPI_EndRxTxTransaction>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800280a:	2300      	movs	r3, #0
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	e097      	b.n	8002962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_SPI_Transmit_DMA+0x2a>
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e08f      	b.n	8002962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_SPI_Transmit_DMA+0x3c>
 800284c:	2302      	movs	r3, #2
 800284e:	e088      	b.n	8002962 <HAL_SPI_Transmit_DMA+0x14e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2203      	movs	r2, #3
 800285c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800289e:	d10f      	bne.n	80028c0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c4:	4a29      	ldr	r2, [pc, #164]	@ (800296c <HAL_SPI_Transmit_DMA+0x158>)
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_SPI_Transmit_DMA+0x15c>)
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	4a27      	ldr	r2, [pc, #156]	@ (8002974 <HAL_SPI_Transmit_DMA+0x160>)
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	2200      	movs	r2, #0
 80028de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	4619      	mov	r1, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028f8:	f7fe feb6 	bl	8001668 <HAL_DMA_Start_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e023      	b.n	8002962 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d007      	beq.n	8002938 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0220 	orr.w	r2, r2, #32
 800294e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0202 	orr.w	r2, r2, #2
 800295e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	08002a55 	.word	0x08002a55
 8002970:	080029af 	.word	0x080029af
 8002974:	08002a71 	.word	0x08002a71

08002978 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029bc:	f7fe fcbe 	bl	800133c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d03b      	beq.n	8002a48 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0220 	bic.w	r2, r2, #32
 80029de:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0202 	bic.w	r2, r2, #2
 80029ee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	2164      	movs	r1, #100	@ 0x64
 80029f4:	6978      	ldr	r0, [r7, #20]
 80029f6:	f000 f8e3 	bl	8002bc0 <SPI_EndRxTxTransaction>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a40:	6978      	ldr	r0, [r7, #20]
 8002a42:	f7ff ffab 	bl	800299c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a46:	e002      	b.n	8002a4e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f7ff ff95 	bl	8002978 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff91 	bl	800298a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0203 	bic.w	r2, r2, #3
 8002a8c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff ff7a 	bl	800299c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ac0:	f7fe fc3c 	bl	800133c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ad0:	f7fe fc34 	bl	800133c <HAL_GetTick>
 8002ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad6:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	015b      	lsls	r3, r3, #5
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae6:	e054      	b.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aee:	d050      	beq.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002af0:	f7fe fc24 	bl	800133c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d902      	bls.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d13d      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b1e:	d111      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b28:	d004      	beq.n	8002b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d107      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b4c:	d10f      	bne.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e017      	b.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d19b      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000008 	.word	0x20000008

08002bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff ff6a 	bl	8002ab0 <SPI_WaitFlagStateUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e013      	b.n	8002c1a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2180      	movs	r1, #128	@ 0x80
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff ff57 	bl	8002ab0 <SPI_WaitFlagStateUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e000      	b.n	8002c1a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <memset>:
 8002c22:	4603      	mov	r3, r0
 8002c24:	4402      	add	r2, r0
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d100      	bne.n	8002c2c <memset+0xa>
 8002c2a:	4770      	bx	lr
 8002c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8002c30:	e7f9      	b.n	8002c26 <memset+0x4>
	...

08002c34 <__libc_init_array>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	2600      	movs	r6, #0
 8002c38:	4d0c      	ldr	r5, [pc, #48]	@ (8002c6c <__libc_init_array+0x38>)
 8002c3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002c70 <__libc_init_array+0x3c>)
 8002c3c:	1b64      	subs	r4, r4, r5
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	42a6      	cmp	r6, r4
 8002c42:	d109      	bne.n	8002c58 <__libc_init_array+0x24>
 8002c44:	f000 f81a 	bl	8002c7c <_init>
 8002c48:	2600      	movs	r6, #0
 8002c4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002c74 <__libc_init_array+0x40>)
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c78 <__libc_init_array+0x44>)
 8002c4e:	1b64      	subs	r4, r4, r5
 8002c50:	10a4      	asrs	r4, r4, #2
 8002c52:	42a6      	cmp	r6, r4
 8002c54:	d105      	bne.n	8002c62 <__libc_init_array+0x2e>
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5c:	4798      	blx	r3
 8002c5e:	3601      	adds	r6, #1
 8002c60:	e7ee      	b.n	8002c40 <__libc_init_array+0xc>
 8002c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c66:	4798      	blx	r3
 8002c68:	3601      	adds	r6, #1
 8002c6a:	e7f2      	b.n	8002c52 <__libc_init_array+0x1e>
 8002c6c:	08004244 	.word	0x08004244
 8002c70:	08004244 	.word	0x08004244
 8002c74:	08004244 	.word	0x08004244
 8002c78:	08004248 	.word	0x08004248

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
