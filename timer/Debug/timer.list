
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ee0  08002ee0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ee0  08002ee0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee0  08002ee0  00003ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ee4  08002ee4  00003ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ee8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002ef4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20000104  08002ef4  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f26  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015fe  00000000  00000000  0000bf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0000d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000733  00000000  00000000  0000deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016626  00000000  00000000  0000e5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095f9  00000000  00000000  00024c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008428a  00000000  00000000  0002e202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b248c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000b24d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b4bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea4 	.word	0x08002ea4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002ea4 	.word	0x08002ea4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fe17 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 fafb 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fc4f 	bl	8000dc0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000522:	f000 fb8f 	bl	8000c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000526:	f000 fbe7 	bl	8000cf8 <MX_TIM4_Init>
  MX_TIM1_Init();
 800052a:	f000 fb39 	bl	8000ba0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // local variable with pointer to timer struct
  TIM_HandleTypeDef *tim3 = &htim3;
 800052e:	4b7a      	ldr	r3, [pc, #488]	@ (8000718 <main+0x208>)
 8000530:	61bb      	str	r3, [r7, #24]
  TIM_HandleTypeDef *tim4 = &htim4;
 8000532:	4b7a      	ldr	r3, [pc, #488]	@ (800071c <main+0x20c>)
 8000534:	617b      	str	r3, [r7, #20]
  TIM_HandleTypeDef *tim1 = &htim1;
 8000536:	4b7a      	ldr	r3, [pc, #488]	@ (8000720 <main+0x210>)
 8000538:	613b      	str	r3, [r7, #16]
  // timer channel
  uint32_t tim_led_channel2 = TIM_CHANNEL_2;
 800053a:	2304      	movs	r3, #4
 800053c:	60fb      	str	r3, [r7, #12]
  uint32_t tim_led_channel1 = TIM_CHANNEL_1;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  uint32_t tim_led_cnt_tick_freq;
  // helper variables for timer parameters calculations
  uint32_t arr_value;
  uint32_t cc_value;
  // reset CCR register
  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, 0);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <main+0x42>
 8000548:	69bb      	ldr	r3, [r7, #24]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000550:	e013      	b.n	800057a <main+0x6a>
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d104      	bne.n	8000562 <main+0x52>
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000560:	e00b      	b.n	800057a <main+0x6a>
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	2b08      	cmp	r3, #8
 8000566:	d104      	bne.n	8000572 <main+0x62>
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000570:	e003      	b.n	800057a <main+0x6a>
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, 0);
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d104      	bne.n	800058a <main+0x7a>
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	@ 0x34
 8000588:	e013      	b.n	80005b2 <main+0xa2>
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d104      	bne.n	800059a <main+0x8a>
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	6393      	str	r3, [r2, #56]	@ 0x38
 8000598:	e00b      	b.n	80005b2 <main+0xa2>
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d104      	bne.n	80005aa <main+0x9a>
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005a8:	e003      	b.n	80005b2 <main+0xa2>
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, 0);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d104      	bne.n	80005c2 <main+0xb2>
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c0:	e013      	b.n	80005ea <main+0xda>
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d104      	bne.n	80005d2 <main+0xc2>
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80005d0:	e00b      	b.n	80005ea <main+0xda>
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d104      	bne.n	80005e2 <main+0xd2>
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005e0:	e003      	b.n	80005ea <main+0xda>
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	6413      	str	r3, [r2, #64]	@ 0x40
  // run timer
  HAL_TIM_PWM_Start(tim3, tim_led_channel2);
 80005ea:	68f9      	ldr	r1, [r7, #12]
 80005ec:	69b8      	ldr	r0, [r7, #24]
 80005ee:	f001 fdc5 	bl	800217c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(tim4, tim_led_channel1);
 80005f2:	68b9      	ldr	r1, [r7, #8]
 80005f4:	6978      	ldr	r0, [r7, #20]
 80005f6:	f001 fdc1 	bl	800217c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(tim4, tim_led_channel2);
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	6978      	ldr	r0, [r7, #20]
 80005fe:	f001 fdbd 	bl	800217c <HAL_TIM_PWM_Start>
  // calculate timer tick frequency: f_tick = f_sysclcock
  // f_tick = f_sysclcock / (CDK * (PSK + 1));
  tim_led_cnt_tick_freq = SystemCoreClock;
 8000602:	4b48      	ldr	r3, [pc, #288]	@ (8000724 <main+0x214>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	61fb      	str	r3, [r7, #28]
  switch (__HAL_TIM_GET_CLOCKDIVISION(tim3)) {
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000616:	d00b      	beq.n	8000630 <main+0x120>
 8000618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800061c:	d80d      	bhi.n	800063a <main+0x12a>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00a      	beq.n	8000638 <main+0x128>
 8000622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000626:	d108      	bne.n	800063a <main+0x12a>
	  case TIM_CLOCKDIVISION_DIV1:
		  tim_led_cnt_tick_freq /= 1;
		  break;
	  case TIM_CLOCKDIVISION_DIV2:
		  tim_led_cnt_tick_freq /= 2;
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
		  break;
 800062e:	e004      	b.n	800063a <main+0x12a>
	  case TIM_CLOCKDIVISION_DIV4:
		  tim_led_cnt_tick_freq /= 4;
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
		  break;
 8000636:	e000      	b.n	800063a <main+0x12a>
		  break;
 8000638:	bf00      	nop
  }
  tim_led_cnt_tick_freq /= (tim3->Instance->PSC + 1);
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000640:	3301      	adds	r3, #1
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	fbb2 f3f3 	udiv	r3, r2, r3
 8000648:	61fb      	str	r3, [r7, #28]

  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера TIM1
 800064a:	4835      	ldr	r0, [pc, #212]	@ (8000720 <main+0x210>)
 800064c:	f001 fcf4 	bl	8002038 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // PWN signal with 0.0 duty cycle (i.e. output is always 0)
	  arr_value = 999;
 8000650:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000654:	607b      	str	r3, [r7, #4]
	  cc_value = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(tim3, arr_value);
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, cc_value);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d104      	bne.n	8000678 <main+0x168>
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
 8000676:	e013      	b.n	80006a0 <main+0x190>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b04      	cmp	r3, #4
 800067c:	d104      	bne.n	8000688 <main+0x178>
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	6393      	str	r3, [r2, #56]	@ 0x38
 8000686:	e00b      	b.n	80006a0 <main+0x190>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d104      	bne.n	8000698 <main+0x188>
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000696:	e003      	b.n	80006a0 <main+0x190>
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40



	  __HAL_TIM_SET_AUTORELOAD(tim4, arr_value);
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, cc_value);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d104      	bne.n	80006be <main+0x1ae>
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80006bc:	e013      	b.n	80006e6 <main+0x1d6>
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d104      	bne.n	80006ce <main+0x1be>
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80006cc:	e00b      	b.n	80006e6 <main+0x1d6>
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d104      	bne.n	80006de <main+0x1ce>
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006dc:	e003      	b.n	80006e6 <main+0x1d6>
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, cc_value);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d104      	bne.n	80006f6 <main+0x1e6>
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f4:	e01c      	b.n	8000730 <main+0x220>
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d104      	bne.n	8000706 <main+0x1f6>
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6393      	str	r3, [r2, #56]	@ 0x38
 8000704:	e014      	b.n	8000730 <main+0x220>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b08      	cmp	r3, #8
 800070a:	d10d      	bne.n	8000728 <main+0x218>
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000714:	e00c      	b.n	8000730 <main+0x220>
 8000716:	bf00      	nop
 8000718:	20000070 	.word	0x20000070
 800071c:	200000b8 	.word	0x200000b8
 8000720:	20000028 	.word	0x20000028
 8000724:	20000000 	.word	0x20000000
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_Delay(2000);
 8000730:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000734:	f000 fd6a 	bl	800120c <HAL_Delay>
	  // PWM signal
	  // frequency: 1000 Hz
	  // duty cycle: 0.5
	  arr_value = tim_led_cnt_tick_freq / 1000 - 1;
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	4a79      	ldr	r2, [pc, #484]	@ (8000920 <main+0x410>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	099b      	lsrs	r3, r3, #6
 8000742:	3b01      	subs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
	  cc_value = (arr_value + 1) * 0.5f;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fe68 	bl	8000420 <__aeabi_ui2f>
 8000750:	4603      	mov	r3, r0
 8000752:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fcf8 	bl	800014c <__aeabi_fmul>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff feb6 	bl	80004d0 <__aeabi_f2uiz>
 8000764:	4603      	mov	r3, r0
 8000766:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(tim3, arr_value);
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, cc_value);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <main+0x276>
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
 8000784:	e013      	b.n	80007ae <main+0x29e>
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d104      	bne.n	8000796 <main+0x286>
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	6393      	str	r3, [r2, #56]	@ 0x38
 8000794:	e00b      	b.n	80007ae <main+0x29e>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b08      	cmp	r3, #8
 800079a:	d104      	bne.n	80007a6 <main+0x296>
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007a4:	e003      	b.n	80007ae <main+0x29e>
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40

	  __HAL_TIM_SET_AUTORELOAD(tim4, arr_value);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, cc_value);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d104      	bne.n	80007cc <main+0x2bc>
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	e013      	b.n	80007f4 <main+0x2e4>
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d104      	bne.n	80007dc <main+0x2cc>
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80007da:	e00b      	b.n	80007f4 <main+0x2e4>
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d104      	bne.n	80007ec <main+0x2dc>
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007ea:	e003      	b.n	80007f4 <main+0x2e4>
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, cc_value);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d104      	bne.n	8000804 <main+0x2f4>
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
 8000802:	e013      	b.n	800082c <main+0x31c>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d104      	bne.n	8000814 <main+0x304>
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	6393      	str	r3, [r2, #56]	@ 0x38
 8000812:	e00b      	b.n	800082c <main+0x31c>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b08      	cmp	r3, #8
 8000818:	d104      	bne.n	8000824 <main+0x314>
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000822:	e003      	b.n	800082c <main+0x31c>
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40


	  HAL_Delay(2000);
 800082c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000830:	f000 fcec 	bl	800120c <HAL_Delay>
	  // PWM signal
	  // frequency: 2000 Hz
	  // duty cycle: 0.2
	  arr_value = tim_led_cnt_tick_freq / 2000 - 1;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	4a3a      	ldr	r2, [pc, #232]	@ (8000920 <main+0x410>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	09db      	lsrs	r3, r3, #7
 800083e:	3b01      	subs	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
	  cc_value = (arr_value + 1) * 0.2f;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fdea 	bl	8000420 <__aeabi_ui2f>
 800084c:	4603      	mov	r3, r0
 800084e:	4935      	ldr	r1, [pc, #212]	@ (8000924 <main+0x414>)
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fc7b 	bl	800014c <__aeabi_fmul>
 8000856:	4603      	mov	r3, r0
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe39 	bl	80004d0 <__aeabi_f2uiz>
 800085e:	4603      	mov	r3, r0
 8000860:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(tim3, arr_value);
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	62da      	str	r2, [r3, #44]	@ 0x2c
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, cc_value);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d104      	bne.n	8000880 <main+0x370>
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34
 800087e:	e013      	b.n	80008a8 <main+0x398>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d104      	bne.n	8000890 <main+0x380>
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	6393      	str	r3, [r2, #56]	@ 0x38
 800088e:	e00b      	b.n	80008a8 <main+0x398>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d104      	bne.n	80008a0 <main+0x390>
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800089e:	e003      	b.n	80008a8 <main+0x398>
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_AUTORELOAD(tim4, arr_value);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, cc_value);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <main+0x3b6>
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c4:	e013      	b.n	80008ee <main+0x3de>
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d104      	bne.n	80008d6 <main+0x3c6>
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80008d4:	e00b      	b.n	80008ee <main+0x3de>
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b08      	cmp	r3, #8
 80008da:	d104      	bne.n	80008e6 <main+0x3d6>
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008e4:	e003      	b.n	80008ee <main+0x3de>
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, cc_value);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <main+0x3ee>
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80008fc:	e018      	b.n	8000930 <main+0x420>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d104      	bne.n	800090e <main+0x3fe>
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	6393      	str	r3, [r2, #56]	@ 0x38
 800090c:	e010      	b.n	8000930 <main+0x420>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d109      	bne.n	8000928 <main+0x418>
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800091c:	e008      	b.n	8000930 <main+0x420>
 800091e:	bf00      	nop
 8000920:	10624dd3 	.word	0x10624dd3
 8000924:	3e4ccccd 	.word	0x3e4ccccd
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_Delay(2000);
 8000930:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000934:	f000 fc6a 	bl	800120c <HAL_Delay>
	  // PWM signal
	  // frequency: 2000 Hz
	  // duty cycle: 0.8
	  arr_value = tim_led_cnt_tick_freq / 2000 - 1;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	4a74      	ldr	r2, [pc, #464]	@ (8000b0c <main+0x5fc>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	09db      	lsrs	r3, r3, #7
 8000942:	3b01      	subs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
	  cc_value = (arr_value + 1) * 0.8f;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd68 	bl	8000420 <__aeabi_ui2f>
 8000950:	4603      	mov	r3, r0
 8000952:	496f      	ldr	r1, [pc, #444]	@ (8000b10 <main+0x600>)
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fbf9 	bl	800014c <__aeabi_fmul>
 800095a:	4603      	mov	r3, r0
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fdb7 	bl	80004d0 <__aeabi_f2uiz>
 8000962:	4603      	mov	r3, r0
 8000964:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(tim3, arr_value);
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, cc_value);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d104      	bne.n	8000984 <main+0x474>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
 8000982:	e013      	b.n	80009ac <main+0x49c>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d104      	bne.n	8000994 <main+0x484>
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	6393      	str	r3, [r2, #56]	@ 0x38
 8000992:	e00b      	b.n	80009ac <main+0x49c>
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b08      	cmp	r3, #8
 8000998:	d104      	bne.n	80009a4 <main+0x494>
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009a2:	e003      	b.n	80009ac <main+0x49c>
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_AUTORELOAD(tim4, arr_value);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, cc_value);
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <main+0x4ba>
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c8:	e013      	b.n	80009f2 <main+0x4e2>
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d104      	bne.n	80009da <main+0x4ca>
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80009d8:	e00b      	b.n	80009f2 <main+0x4e2>
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d104      	bne.n	80009ea <main+0x4da>
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009e8:	e003      	b.n	80009f2 <main+0x4e2>
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, cc_value);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <main+0x4f2>
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a00:	e013      	b.n	8000a2a <main+0x51a>
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d104      	bne.n	8000a12 <main+0x502>
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a10:	e00b      	b.n	8000a2a <main+0x51a>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d104      	bne.n	8000a22 <main+0x512>
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a20:	e003      	b.n	8000a2a <main+0x51a>
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_Delay(2000);
 8000a2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a2e:	f000 fbed 	bl	800120c <HAL_Delay>
	  // PWN signal with 1.0 duty cycle (i.e. output is always 1)
	  arr_value = 999;
 8000a32:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000a36:	607b      	str	r3, [r7, #4]
	  cc_value = 1000;
 8000a38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3c:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(tim3, arr_value);
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim3, tim_led_channel2, cc_value);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <main+0x54c>
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	e013      	b.n	8000a84 <main+0x574>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d104      	bne.n	8000a6c <main+0x55c>
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a6a:	e00b      	b.n	8000a84 <main+0x574>
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d104      	bne.n	8000a7c <main+0x56c>
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a7a:	e003      	b.n	8000a84 <main+0x574>
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_AUTORELOAD(tim4, arr_value);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel1, cc_value);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <main+0x592>
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa0:	e013      	b.n	8000aca <main+0x5ba>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d104      	bne.n	8000ab2 <main+0x5a2>
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ab0:	e00b      	b.n	8000aca <main+0x5ba>
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d104      	bne.n	8000ac2 <main+0x5b2>
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ac0:	e003      	b.n	8000aca <main+0x5ba>
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(tim4, tim_led_channel2, cc_value);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <main+0x5ca>
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad8:	e013      	b.n	8000b02 <main+0x5f2>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d104      	bne.n	8000aea <main+0x5da>
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ae8:	e00b      	b.n	8000b02 <main+0x5f2>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d104      	bne.n	8000afa <main+0x5ea>
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000af8:	e003      	b.n	8000b02 <main+0x5f2>
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_Delay(2000);
 8000b02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b06:	f000 fb81 	bl	800120c <HAL_Delay>
	  arr_value = 999;
 8000b0a:	e5a1      	b.n	8000650 <main+0x140>
 8000b0c:	10624dd3 	.word	0x10624dd3
 8000b10:	3f4ccccd 	.word	0x3f4ccccd

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b090      	sub	sp, #64	@ 0x40
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2228      	movs	r2, #40	@ 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f992 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fe3d 	bl	80017dc <HAL_RCC_OscConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b68:	f000 f990 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b70:	2302      	movs	r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2102      	movs	r1, #2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f8aa 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b92:	f000 f97b 	bl	8000e8c <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3740      	adds	r7, #64	@ 0x40
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bbe:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <MX_TIM1_Init+0xa0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bc4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bd2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000bec:	f001 f9d4 	bl	8001f98 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bf6:	f000 f949 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000c08:	f001 fd0c 	bl	8002624 <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c12:	f000 f93b 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <MX_TIM1_Init+0x9c>)
 8000c24:	f002 f8a2 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c2e:	f000 f92d 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c66:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c68:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <MX_TIM3_Init+0xb0>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c6e:	2205      	movs	r2, #5
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000c8e:	f001 fa25 	bl	80020dc <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f8f8 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000cac:	f002 f85e 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cb6:	f000 f8e9 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	@ 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8000cbe:	23c8      	movs	r3, #200	@ 0xc8
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2204      	movs	r2, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000cd2:	f001 fbe5 	bl	80024a0 <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cdc:	f000 f8d6 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <MX_TIM3_Init+0xac>)
 8000ce2:	f000 f963 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000070 	.word	0x20000070
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d1c:	4a27      	ldr	r2, [pc, #156]	@ (8000dbc <MX_TIM4_Init+0xc4>)
 8000d1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d22:	2205      	movs	r2, #5
 8000d24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d40:	481d      	ldr	r0, [pc, #116]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d42:	f001 f9cb 	bl	80020dc <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d4c:	f000 f89e 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4816      	ldr	r0, [pc, #88]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d60:	f002 f804 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d6a:	f000 f88f 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	@ 0x60
 8000d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8000d72:	23c8      	movs	r3, #200	@ 0xc8
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d86:	f001 fb8b 	bl	80024a0 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d90:	f000 f87c 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2204      	movs	r2, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000d9c:	f001 fb80 	bl	80024a0 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000da6:	f000 f871 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000daa:	4803      	ldr	r0, [pc, #12]	@ (8000db8 <MX_TIM4_Init+0xc0>)
 8000dac:	f000 f8fe 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000b8 	.word	0x200000b8
 8000dbc:	40000800 	.word	0x40000800

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_GPIO_Init+0xc0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3a:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <MX_GPIO_Init+0xc4>)
 8000e3c:	f000 fc9c 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <MX_GPIO_Init+0xc4>)
 8000e5a:	f000 fb09 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_GPIO_Init+0xc8>)
 8000e74:	f000 fafc 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <Error_Handler+0x8>

08000e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_MspInit+0x60>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_MspInit+0x60>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <HAL_TIM_Base_MspInit+0x44>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d113      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_TIM_Base_MspInit+0x48>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <HAL_TIM_Base_MspInit+0x48>)
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_TIM_Base_MspInit+0x48>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2019      	movs	r0, #25
 8000f2c:	f000 fa69 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f30:	2019      	movs	r0, #25
 8000f32:	f000 fa82 	bl	800143a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40012c00 	.word	0x40012c00
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0x58>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10c      	bne.n	8000f74 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f72:	e010      	b.n	8000f96 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x60>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10b      	bne.n	8000f96 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40000800 	.word	0x40000800

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <HAL_TIM_MspPostInit+0xb8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d12a      	bne.n	8001022 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481d      	ldr	r0, [pc, #116]	@ (800106c <HAL_TIM_MspPostInit+0xc0>)
 8000ff8:	f000 fa3a 	bl	8001470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_TIM_MspPostInit+0xc4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <HAL_TIM_MspPostInit+0xc4>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001020:	e01c      	b.n	800105c <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <HAL_TIM_MspPostInit+0xc8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d117      	bne.n	800105c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <HAL_TIM_MspPostInit+0xbc>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001044:	23c0      	movs	r3, #192	@ 0xc0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <HAL_TIM_MspPostInit+0xc0>)
 8001058:	f000 fa0a 	bl	8001470 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40000400 	.word	0x40000400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010c00 	.word	0x40010c00
 8001070:	40010000 	.word	0x40010000
 8001074:	40000800 	.word	0x40000800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <NMI_Handler+0x4>

08001080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <MemManage_Handler+0x4>

08001090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <UsageFault_Handler+0x4>

080010a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f884 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <TIM1_UP_IRQHandler+0x18>)
 80010da:	f000 fb65 	bl	80017a8 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <TIM1_UP_IRQHandler+0x1c>)
 80010e0:	f001 f8ee 	bl	80022c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40011000 	.word	0x40011000
 80010ec:	20000028 	.word	0x20000028

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010fc:	f7ff fff8 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001102:	490c      	ldr	r1, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001104:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001118:	4c09      	ldr	r4, [pc, #36]	@ (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f001 fe99 	bl	8002e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f7ff f9f1 	bl	8000510 <main>
  bx lr
 800112e:	4770      	bx	lr
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001138:	08002ee8 	.word	0x08002ee8
  ldr r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001140:	20000104 	.word	0x20000104

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f947 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fe98 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f95f 	bl	8001456 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b0:	f000 f927 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x1c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x20>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a03      	ldr	r2, [pc, #12]	@ (80011f4 <HAL_IncTick+0x20>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000100 	.word	0x20000100

080011f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <HAL_GetTick+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000100 	.word	0x20000100

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fff0 	bl	80011f8 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffe0 	bl	80011f8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4906      	ldr	r1, [pc, #24]	@ (80012ec <__NVIC_EnableIRQ+0x34>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff2d 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff42 	bl	800129c <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff35 	bl	80012b8 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b08b      	sub	sp, #44	@ 0x2c
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e169      	b.n	8001758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001484:	2201      	movs	r2, #1
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 8158 	bne.w	8001752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001710 <HAL_GPIO_Init+0x2a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d05e      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014ac:	4a98      	ldr	r2, [pc, #608]	@ (8001710 <HAL_GPIO_Init+0x2a0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d875      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014b2:	4a98      	ldr	r2, [pc, #608]	@ (8001714 <HAL_GPIO_Init+0x2a4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d058      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014b8:	4a96      	ldr	r2, [pc, #600]	@ (8001714 <HAL_GPIO_Init+0x2a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d86f      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014be:	4a96      	ldr	r2, [pc, #600]	@ (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d052      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014c4:	4a94      	ldr	r2, [pc, #592]	@ (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d869      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ca:	4a94      	ldr	r2, [pc, #592]	@ (800171c <HAL_GPIO_Init+0x2ac>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d04c      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014d0:	4a92      	ldr	r2, [pc, #584]	@ (800171c <HAL_GPIO_Init+0x2ac>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d863      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014d6:	4a92      	ldr	r2, [pc, #584]	@ (8001720 <HAL_GPIO_Init+0x2b0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d046      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014dc:	4a90      	ldr	r2, [pc, #576]	@ (8001720 <HAL_GPIO_Init+0x2b0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d85d      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d82a      	bhi.n	800153c <HAL_GPIO_Init+0xcc>
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d859      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ea:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <HAL_GPIO_Init+0x80>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	08001545 	.word	0x08001545
 80014f8:	08001557 	.word	0x08001557
 80014fc:	08001599 	.word	0x08001599
 8001500:	0800159f 	.word	0x0800159f
 8001504:	0800159f 	.word	0x0800159f
 8001508:	0800159f 	.word	0x0800159f
 800150c:	0800159f 	.word	0x0800159f
 8001510:	0800159f 	.word	0x0800159f
 8001514:	0800159f 	.word	0x0800159f
 8001518:	0800159f 	.word	0x0800159f
 800151c:	0800159f 	.word	0x0800159f
 8001520:	0800159f 	.word	0x0800159f
 8001524:	0800159f 	.word	0x0800159f
 8001528:	0800159f 	.word	0x0800159f
 800152c:	0800159f 	.word	0x0800159f
 8001530:	0800159f 	.word	0x0800159f
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001561 	.word	0x08001561
 800153c:	4a79      	ldr	r2, [pc, #484]	@ (8001724 <HAL_GPIO_Init+0x2b4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001542:	e02c      	b.n	800159e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e029      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	3304      	adds	r3, #4
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e024      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	3308      	adds	r3, #8
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e01f      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	330c      	adds	r3, #12
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e01a      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001572:	2304      	movs	r3, #4
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e013      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001580:	2308      	movs	r3, #8
 8001582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	611a      	str	r2, [r3, #16]
          break;
 800158a:	e009      	b.n	80015a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	615a      	str	r2, [r3, #20]
          break;
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          break;
 800159e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2bff      	cmp	r3, #255	@ 0xff
 80015a4:	d801      	bhi.n	80015aa <HAL_GPIO_Init+0x13a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_Init+0x13e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3304      	adds	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2bff      	cmp	r3, #255	@ 0xff
 80015b4:	d802      	bhi.n	80015bc <HAL_GPIO_Init+0x14c>
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x152>
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	3b08      	subs	r3, #8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	210f      	movs	r1, #15
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80b1 	beq.w	8001752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001608:	4a48      	ldr	r2, [pc, #288]	@ (800172c <HAL_GPIO_Init+0x2bc>)
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a40      	ldr	r2, [pc, #256]	@ (8001730 <HAL_GPIO_Init+0x2c0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3f      	ldr	r2, [pc, #252]	@ (8001734 <HAL_GPIO_Init+0x2c4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3e      	ldr	r2, [pc, #248]	@ (8001738 <HAL_GPIO_Init+0x2c8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3d      	ldr	r2, [pc, #244]	@ (800173c <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1e0>
 800164c:	2303      	movs	r3, #3
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001650:	2304      	movs	r3, #4
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800165c:	2300      	movs	r3, #0
 800165e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166e:	492f      	ldr	r1, [pc, #188]	@ (800172c <HAL_GPIO_Init+0x2bc>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	492c      	ldr	r1, [pc, #176]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001696:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4928      	ldr	r1, [pc, #160]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4922      	ldr	r1, [pc, #136]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	491e      	ldr	r1, [pc, #120]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4918      	ldr	r1, [pc, #96]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4914      	ldr	r1, [pc, #80]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d021      	beq.n	8001744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	490e      	ldr	r1, [pc, #56]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e021      	b.n	8001752 <HAL_GPIO_Init+0x2e2>
 800170e:	bf00      	nop
 8001710:	10320000 	.word	0x10320000
 8001714:	10310000 	.word	0x10310000
 8001718:	10220000 	.word	0x10220000
 800171c:	10210000 	.word	0x10210000
 8001720:	10120000 	.word	0x10120000
 8001724:	10110000 	.word	0x10110000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40011400 	.word	0x40011400
 8001740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_GPIO_Init+0x304>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	43db      	mvns	r3, r3
 800174c:	4909      	ldr	r1, [pc, #36]	@ (8001774 <HAL_GPIO_Init+0x304>)
 800174e:	4013      	ands	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae8e 	bne.w	8001484 <HAL_GPIO_Init+0x14>
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	372c      	adds	r7, #44	@ 0x2c
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43d9      	mvns	r1, r3
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	400b      	ands	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	611a      	str	r2, [r3, #16]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e272      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b92      	ldr	r3, [pc, #584]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001808:	4b8f      	ldr	r3, [pc, #572]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
 8001814:	4b8c      	ldr	r3, [pc, #560]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b89      	ldr	r3, [pc, #548]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x12c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e24c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x76>
 8001844:	4b80      	ldr	r3, [pc, #512]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a77      	ldr	r2, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xbc>
 800187e:	4b72      	ldr	r3, [pc, #456]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a71      	ldr	r2, [pc, #452]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6f      	ldr	r3, [pc, #444]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001898:	4b6b      	ldr	r3, [pc, #428]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b68      	ldr	r3, [pc, #416]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a67      	ldr	r2, [pc, #412]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc9e 	bl	80011f8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc9a 	bl	80011f8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	@ 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e200      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe4>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc8a 	bl	80011f8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc86 	bl	80011f8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	@ 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1ec      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x10c>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b4c      	ldr	r3, [pc, #304]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001922:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
 800192e:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1c0      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4939      	ldr	r1, [pc, #228]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e03a      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <HAL_RCC_OscConfig+0x270>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fc3f 	bl	80011f8 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fc3b 	bl	80011f8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1a1      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4927      	ldr	r1, [pc, #156]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <HAL_RCC_OscConfig+0x270>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fc1e 	bl	80011f8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fc1a 	bl	80011f8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e180      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03a      	beq.n	8001a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fbfe 	bl	80011f8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fbfa 	bl	80011f8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e160      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fa9c 	bl	8001f5c <RCC_Delay>
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fbe4 	bl	80011f8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fbe0 	bl	80011f8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e146      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b92      	ldr	r3, [pc, #584]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e9      	bne.n	8001a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a6 	beq.w	8001bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a87      	ldr	r2, [pc, #540]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b85      	ldr	r3, [pc, #532]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x4c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca4 <HAL_RCC_OscConfig+0x4c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ca4 <HAL_RCC_OscConfig+0x4c8>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fba1 	bl	80011f8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff fb9d 	bl	80011f8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	@ 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e103      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b75      	ldr	r3, [pc, #468]	@ (8001ca4 <HAL_RCC_OscConfig+0x4c8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x312>
 8001ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e02d      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001af6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a69      	ldr	r2, [pc, #420]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b67      	ldr	r3, [pc, #412]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a66      	ldr	r2, [pc, #408]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	e01c      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x356>
 8001b18:	4b61      	ldr	r3, [pc, #388]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b58      	ldr	r3, [pc, #352]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a57      	ldr	r2, [pc, #348]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d015      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fb51 	bl	80011f8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fb4d 	bl	80011f8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0b1      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ee      	beq.n	8001b5a <HAL_RCC_OscConfig+0x37e>
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fb3b 	bl	80011f8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fb37 	bl	80011f8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e09b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d061      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d146      	bne.n	8001c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fb0b 	bl	80011f8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff fb07 	bl	80011f8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e06d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4921      	ldr	r1, [pc, #132]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	430b      	orrs	r3, r1
 8001c32:	491b      	ldr	r1, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fadb 	bl	80011f8 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fad7 	bl	80011f8 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e03d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x46a>
 8001c64:	e035      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fac4 	bl	80011f8 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fac0 	bl	80011f8 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e026      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x498>
 8001c92:	e01e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e019      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_OscConfig+0x500>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0d0      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b67      	ldr	r3, [pc, #412]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4965      	ldr	r1, [pc, #404]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b63      	ldr	r3, [pc, #396]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b8      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a58      	ldr	r2, [pc, #352]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d54:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b50      	ldr	r3, [pc, #320]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	494d      	ldr	r1, [pc, #308]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d040      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d115      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e073      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06b      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b39      	ldr	r3, [pc, #228]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4936      	ldr	r1, [pc, #216]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fa12 	bl	80011f8 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff fa0e 	bl	80011f8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e053      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d210      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4922      	ldr	r1, [pc, #136]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e032      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4916      	ldr	r1, [pc, #88]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	490e      	ldr	r1, [pc, #56]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e6e:	f000 f821 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	490a      	ldr	r1, [pc, #40]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a09      	ldr	r2, [pc, #36]	@ (8001eac <HAL_RCC_ClockConfig+0x1cc>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f970 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08002ebc 	.word	0x08002ebc
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x36>
 8001ee2:	e027      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	e027      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0c5b      	lsrs	r3, r3, #17
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f16:	fb03 f202 	mul.w	r2, r3, r2
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e004      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	613b      	str	r3, [r7, #16]
      break;
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f36:	613b      	str	r3, [r7, #16]
      break;
 8001f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3a:	693b      	ldr	r3, [r7, #16]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	08002ecc 	.word	0x08002ecc
 8001f54:	08002edc 	.word	0x08002edc
 8001f58:	003d0900 	.word	0x003d0900

08001f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <RCC_Delay+0x34>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <RCC_Delay+0x38>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f78:	bf00      	nop
  }
  while (Delay --);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	60fa      	str	r2, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <RCC_Delay+0x1c>
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000000 	.word	0x20000000
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e041      	b.n	800202e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe ff9c 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 fc18 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e03a      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_TIM_Base_Start_IT+0x98>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207a:	d009      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x58>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d010      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800

080020dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe ff20 	bl	8000f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fb76 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_TIM_PWM_Start+0x24>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e022      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d109      	bne.n	80021ba <HAL_TIM_PWM_Start+0x3e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e015      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d109      	bne.n	80021d4 <HAL_TIM_PWM_Start+0x58>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e008      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e05e      	b.n	80022ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_PWM_Start+0x82>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021fc:	e013      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start+0x92>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800220c:	e00b      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0xa2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800221c:	e003      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fd78 	bl	8002d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_TIM_PWM_Start+0x138>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d107      	bne.n	800224e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_TIM_PWM_Start+0x138>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d009      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <HAL_TIM_PWM_Start+0x13c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <HAL_TIM_PWM_Start+0x140>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d010      	beq.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	e007      	b.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0202 	mvn.w	r2, #2
 80022f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa63 	bl	80027d6 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa56 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fa65 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d020      	beq.n	8002370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0204 	mvn.w	r2, #4
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa3d 	bl	80027d6 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa30 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa3f 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d020      	beq.n	80023bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0208 	mvn.w	r2, #8
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2204      	movs	r2, #4
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa17 	bl	80027d6 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa0a 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa19 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d020      	beq.n	8002408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0210 	mvn.w	r2, #16
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2208      	movs	r2, #8
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9f1 	bl	80027d6 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9e4 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9f3 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0201 	mvn.w	r2, #1
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f9c3 	bl	80027b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fcf5 	bl	8002e3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9c3 	bl	80027fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0220 	mvn.w	r2, #32
 8002490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fcc8 	bl	8002e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0ae      	b.n	800261c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	f200 809f 	bhi.w	800260c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024ce:	a201      	add	r2, pc, #4	@ (adr r2, 80024d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	08002509 	.word	0x08002509
 80024d8:	0800260d 	.word	0x0800260d
 80024dc:	0800260d 	.word	0x0800260d
 80024e0:	0800260d 	.word	0x0800260d
 80024e4:	08002549 	.word	0x08002549
 80024e8:	0800260d 	.word	0x0800260d
 80024ec:	0800260d 	.word	0x0800260d
 80024f0:	0800260d 	.word	0x0800260d
 80024f4:	0800258b 	.word	0x0800258b
 80024f8:	0800260d 	.word	0x0800260d
 80024fc:	0800260d 	.word	0x0800260d
 8002500:	0800260d 	.word	0x0800260d
 8002504:	080025cb 	.word	0x080025cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f9ea 	bl	80028e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6999      	ldr	r1, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	619a      	str	r2, [r3, #24]
      break;
 8002546:	e064      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fa30 	bl	80029b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6999      	ldr	r1, [r3, #24]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	021a      	lsls	r2, r3, #8
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	619a      	str	r2, [r3, #24]
      break;
 8002588:	e043      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa79 	bl	8002a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0208 	orr.w	r2, r2, #8
 80025a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0204 	bic.w	r2, r2, #4
 80025b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69d9      	ldr	r1, [r3, #28]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	61da      	str	r2, [r3, #28]
      break;
 80025c8:	e023      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fac3 	bl	8002b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69d9      	ldr	r1, [r3, #28]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	021a      	lsls	r2, r3, #8
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	61da      	str	r2, [r3, #28]
      break;
 800260a:	e002      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	75fb      	strb	r3, [r7, #23]
      break;
 8002610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e0b4      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x186>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd4>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002686:	f000 8086 	beq.w	8002796 <HAL_TIM_ConfigClockSource+0x172>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b70      	cmp	r3, #112	@ 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xa6>
 8002694:	2b70      	cmp	r3, #112	@ 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b60      	cmp	r3, #96	@ 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x11a>
 800269c:	2b60      	cmp	r3, #96	@ 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b50      	cmp	r3, #80	@ 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xfa>
 80026a4:	2b50      	cmp	r3, #80	@ 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b40      	cmp	r3, #64	@ 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x13a>
 80026ac:	2b40      	cmp	r3, #64	@ 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b30      	cmp	r3, #48	@ 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b30      	cmp	r3, #48	@ 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15a>
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	f000 fb04 	bl	8002ce6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04f      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002708:	f000 faed 	bl	8002ce6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa64 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	@ 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fabb 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fa82 	bl	8002c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	@ 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 faab 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	461a      	mov	r2, r3
 800276c:	f000 fa44 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	@ 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa9b 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fa92 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800278e:	e003      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a2f      	ldr	r2, [pc, #188]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a2c      	ldr	r2, [pc, #176]	@ (80028e0 <TIM_Base_SetConfig+0xd4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <TIM_Base_SetConfig+0xd8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <TIM_Base_SetConfig+0xd4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1e      	ldr	r2, [pc, #120]	@ (80028e4 <TIM_Base_SetConfig+0xd8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]
  }
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800

080028e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f023 0201 	bic.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 0302 	bic.w	r3, r3, #2
 8002930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <TIM_OC1_SetConfig+0xc8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10c      	bne.n	800295e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0308 	bic.w	r3, r3, #8
 800294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <TIM_OC1_SetConfig+0xc8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d111      	bne.n	800298a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800296c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 0210 	bic.w	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0320 	bic.w	r3, r3, #32
 80029fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <TIM_OC2_SetConfig+0xd0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10d      	bne.n	8002a30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <TIM_OC2_SetConfig+0xd0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d113      	bne.n	8002a60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00

08002a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <TIM_OC3_SetConfig+0xd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <TIM_OC3_SetConfig+0xd0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d113      	bne.n	8002b32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00

08002b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <TIM_OC4_SetConfig+0x98>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40012c00 	.word	0x40012c00

08002bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 030a 	bic.w	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	031b      	lsls	r3, r3, #12
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	621a      	str	r2, [r3, #32]
}
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f043 0307 	orr.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e046      	b.n	8002e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00e      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d009      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10c      	bne.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800

08002e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <memset>:
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4402      	add	r2, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <__libc_init_array>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	2600      	movs	r6, #0
 8002e60:	4d0c      	ldr	r5, [pc, #48]	@ (8002e94 <__libc_init_array+0x38>)
 8002e62:	4c0d      	ldr	r4, [pc, #52]	@ (8002e98 <__libc_init_array+0x3c>)
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	42a6      	cmp	r6, r4
 8002e6a:	d109      	bne.n	8002e80 <__libc_init_array+0x24>
 8002e6c:	f000 f81a 	bl	8002ea4 <_init>
 8002e70:	2600      	movs	r6, #0
 8002e72:	4d0a      	ldr	r5, [pc, #40]	@ (8002e9c <__libc_init_array+0x40>)
 8002e74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea0 <__libc_init_array+0x44>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d105      	bne.n	8002e8a <__libc_init_array+0x2e>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e84:	4798      	blx	r3
 8002e86:	3601      	adds	r6, #1
 8002e88:	e7ee      	b.n	8002e68 <__libc_init_array+0xc>
 8002e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8e:	4798      	blx	r3
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7f2      	b.n	8002e7a <__libc_init_array+0x1e>
 8002e94:	08002ee0 	.word	0x08002ee0
 8002e98:	08002ee0 	.word	0x08002ee0
 8002e9c:	08002ee0 	.word	0x08002ee0
 8002ea0:	08002ee4 	.word	0x08002ee4

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
