
uart_at_protocol2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba0  08003ba0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba8  08003ba8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003bb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  2000005c  08003c0c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2000064c  08003c0c  0000564c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000795f  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b1  00000000  00000000  0000c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000560  00000000  00000000  0000e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eda  00000000  00000000  0000edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fd1  00000000  00000000  00025cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c19  00000000  00000000  0002dca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b08bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a0  00000000  00000000  000b0900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b2ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003968 	.word	0x08003968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003968 	.word	0x08003968

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <input_buf_init>:
static volatile bool tx_busy = false;
/**
* Initialize input_line_buf_t object.
*/
int input_buf_init(input_buf_t *input_buf, UART_HandleTypeDef *huart)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	memset((void*) input_buf->buf, 0, INPUT_BUF_SIZE);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2280      	movs	r2, #128	@ 0x80
 800016a:	2100      	movs	r1, #0
 800016c:	4618      	mov	r0, r3
 800016e:	f002 faf5 	bl	800275c <memset>
	input_buf->pos = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	input_buf->huart = huart;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	// enable interrupt
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000182:	4b06      	ldr	r3, [pc, #24]	@ (800019c <input_buf_init+0x40>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	68da      	ldr	r2, [r3, #12]
 8000188:	4b04      	ldr	r3, [pc, #16]	@ (800019c <input_buf_init+0x40>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f042 0220 	orr.w	r2, r2, #32
 8000190:	60da      	str	r2, [r3, #12]
	return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	20000078 	.word	0x20000078

080001a0 <input_buf_read_content>:
/**
* Read current content of the buffer.
*/
int input_buf_read_content(input_buf_t *input_buf, char *output)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	int pos = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	60fb      	str	r3, [r7, #12]
	// copy data to `output` buffer
	for (int i = 0; i < INPUT_BUF_SIZE; i++) {
 80001ae:	2300      	movs	r3, #0
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	e013      	b.n	80001dc <input_buf_read_content+0x3c>
		output[i] = input_buf->buf[pos];
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	683a      	ldr	r2, [r7, #0]
 80001b8:	4413      	add	r3, r2
 80001ba:	6879      	ldr	r1, [r7, #4]
 80001bc:	68fa      	ldr	r2, [r7, #12]
 80001be:	440a      	add	r2, r1
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	b2d2      	uxtb	r2, r2
 80001c4:	701a      	strb	r2, [r3, #0]
		pos++;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	3301      	adds	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
		if (pos >= INPUT_BUF_SIZE) {
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80001d0:	dd01      	ble.n	80001d6 <input_buf_read_content+0x36>
			pos = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < INPUT_BUF_SIZE; i++) {
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	3301      	adds	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	2b7f      	cmp	r3, #127	@ 0x7f
 80001e0:	dde8      	ble.n	80001b4 <input_buf_read_content+0x14>
		}
	}
	return INPUT_BUF_SIZE;
 80001e2:	2380      	movs	r3, #128	@ 0x80
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <input_buffer_clear>:

void input_buffer_clear(input_buf_t *input_buf)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b082      	sub	sp, #8
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
	memset((void*) input_buf->buf, 0, INPUT_BUF_SIZE);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2280      	movs	r2, #128	@ 0x80
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 faad 	bl	800275c <memset>
	input_buf->pos = 0;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2200      	movs	r2, #0
 8000206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <output_buf_init>:

/**
* Initialize output_buf_t object.
*/
int output_buf_init(output_buf_t *output_buf, UART_HandleTypeDef *huart)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b082      	sub	sp, #8
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
 800021a:	6039      	str	r1, [r7, #0]
	memset((void*) output_buf->buf, 0, OUTPUT_BUF_ZIZE);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2280      	movs	r2, #128	@ 0x80
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fa9a 	bl	800275c <memset>
	output_buf->start = 0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	output_buf->end = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	output_buf->huart = huart;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	return 0;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <advance_index>:


static inline uint16_t advance_index(uint16_t idx)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	4603      	mov	r3, r0
 8000252:	80fb      	strh	r3, [r7, #6]
	return (uint16_t)((idx + 1) % TX_BUFFER_SIZE);
 8000254:	88fb      	ldrh	r3, [r7, #6]
 8000256:	3301      	adds	r3, #1
 8000258:	425a      	negs	r2, r3
 800025a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800025e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000262:	bf58      	it	pl
 8000264:	4253      	negpl	r3, r2
 8000266:	b29b      	uxth	r3, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
	...

08000274 <uart_tx_start_if_needed>:

static void uart_tx_start_if_needed(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	if (!tx_busy && tx_head != tx_tail)
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <uart_tx_start_if_needed+0x64>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d021      	beq.n	80002ce <uart_tx_start_if_needed+0x5a>
 800028a:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <uart_tx_start_if_needed+0x68>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	b29a      	uxth	r2, r3
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <uart_tx_start_if_needed+0x6c>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	b29b      	uxth	r3, r3
 8000296:	429a      	cmp	r2, r3
 8000298:	d019      	beq.n	80002ce <uart_tx_start_if_needed+0x5a>
	{
		tx_busy = true;
 800029a:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <uart_tx_start_if_needed+0x64>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
		uint8_t b = tx_buffer[tx_tail];
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <uart_tx_start_if_needed+0x6c>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <uart_tx_start_if_needed+0x70>)
 80002aa:	5c9b      	ldrb	r3, [r3, r2]
 80002ac:	71fb      	strb	r3, [r7, #7]
		tx_tail = advance_index(tx_tail);
 80002ae:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <uart_tx_start_if_needed+0x6c>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ffc8 	bl	800024a <advance_index>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <uart_tx_start_if_needed+0x6c>)
 80002c0:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &b, 1);
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	2201      	movs	r2, #1
 80002c6:	4619      	mov	r1, r3
 80002c8:	4807      	ldr	r0, [pc, #28]	@ (80002e8 <uart_tx_start_if_needed+0x74>)
 80002ca:	f001 fc95 	bl	8001bf8 <HAL_UART_Transmit_IT>
	}
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200004f8 	.word	0x200004f8
 80002dc:	200004f4 	.word	0x200004f4
 80002e0:	200004f6 	.word	0x200004f6
 80002e4:	200002f4 	.word	0x200002f4
 80002e8:	20000078 	.word	0x20000078

080002ec <uart_write_bytes>:

static void uart_write_bytes(const uint8_t *data, uint16_t len)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < len; i++)
 80002f8:	2300      	movs	r3, #0
 80002fa:	81fb      	strh	r3, [r7, #14]
 80002fc:	e01c      	b.n	8000338 <uart_write_bytes+0x4c>
	{
		uint16_t next = advance_index(tx_head);
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <uart_write_bytes+0x64>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	b29b      	uxth	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ffa0 	bl	800024a <advance_index>
 800030a:	4603      	mov	r3, r0
 800030c:	81bb      	strh	r3, [r7, #12]
		// drop if buffer full (simple handling)
		if (next == tx_tail)
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <uart_write_bytes+0x68>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	89ba      	ldrh	r2, [r7, #12]
 8000316:	429a      	cmp	r2, r3
 8000318:	d013      	beq.n	8000342 <uart_write_bytes+0x56>
			break;
		tx_buffer[tx_head] = data[i];
 800031a:	89fb      	ldrh	r3, [r7, #14]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	4a0b      	ldr	r2, [pc, #44]	@ (8000350 <uart_write_bytes+0x64>)
 8000322:	8812      	ldrh	r2, [r2, #0]
 8000324:	b292      	uxth	r2, r2
 8000326:	7819      	ldrb	r1, [r3, #0]
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <uart_write_bytes+0x6c>)
 800032a:	5499      	strb	r1, [r3, r2]
		tx_head = next;
 800032c:	4a08      	ldr	r2, [pc, #32]	@ (8000350 <uart_write_bytes+0x64>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < len; i++)
 8000332:	89fb      	ldrh	r3, [r7, #14]
 8000334:	3301      	adds	r3, #1
 8000336:	81fb      	strh	r3, [r7, #14]
 8000338:	89fa      	ldrh	r2, [r7, #14]
 800033a:	887b      	ldrh	r3, [r7, #2]
 800033c:	429a      	cmp	r2, r3
 800033e:	d3de      	bcc.n	80002fe <uart_write_bytes+0x12>
 8000340:	e000      	b.n	8000344 <uart_write_bytes+0x58>
			break;
 8000342:	bf00      	nop
	}
	uart_tx_start_if_needed();
 8000344:	f7ff ff96 	bl	8000274 <uart_tx_start_if_needed>
}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200004f4 	.word	0x200004f4
 8000354:	200004f6 	.word	0x200004f6
 8000358:	200002f4 	.word	0x200002f4

0800035c <uart_write_str>:

static void uart_write_str(const char *s)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uart_write_bytes((const uint8_t *)s, (uint16_t)strlen(s));
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff fef1 	bl	800014c <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	b29b      	uxth	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ffbb 	bl	80002ec <uart_write_bytes>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <uart_write_line>:


static void uart_write_line(const char *s)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	uart_write_str(s);
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ffe7 	bl	800035c <uart_write_str>
	uart_write_str("\r\n");
 800038e:	4803      	ldr	r0, [pc, #12]	@ (800039c <uart_write_line+0x1c>)
 8000390:	f7ff ffe4 	bl	800035c <uart_write_str>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	08003980 	.word	0x08003980

080003a0 <process_command>:


int process_command(const char *cmd)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0ae      	sub	sp, #184	@ 0xb8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	char buf[128];
	int n = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
	int cmd_len = strlen(cmd);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff fecd 	bl	800014c <strlen>
 80003b2:	4603      	mov	r3, r0
 80003b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	sscanf(cmd, "AT+MODE=%*d%n", &n);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	461a      	mov	r2, r3
 80003be:	4971      	ldr	r1, [pc, #452]	@ (8000584 <process_command+0x1e4>)
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f002 f99d 	bl	8002700 <siscanf>
	if (n == cmd_len) {
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d11d      	bne.n	800040c <process_command+0x6c>
		int i1;
		sscanf(cmd, "AT+MODE=%d", &i1);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	461a      	mov	r2, r3
 80003d6:	496c      	ldr	r1, [pc, #432]	@ (8000588 <process_command+0x1e8>)
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f002 f991 	bl	8002700 <siscanf>
		if (i1 == 1){
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d106      	bne.n	80003f2 <process_command+0x52>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2104      	movs	r1, #4
 80003e8:	4868      	ldr	r0, [pc, #416]	@ (800058c <process_command+0x1ec>)
 80003ea:	f000 ff6a 	bl	80012c2 <HAL_GPIO_WritePin>
			return 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e0c3      	b.n	800057a <process_command+0x1da>
		} else if (i1 == 0){
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d106      	bne.n	8000406 <process_command+0x66>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2104      	movs	r1, #4
 80003fc:	4863      	ldr	r0, [pc, #396]	@ (800058c <process_command+0x1ec>)
 80003fe:	f000 ff60 	bl	80012c2 <HAL_GPIO_WritePin>
			return 0;
 8000402:	2300      	movs	r3, #0
 8000404:	e0b9      	b.n	800057a <process_command+0x1da>
		} else {
			return -1;
 8000406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800040a:	e0b6      	b.n	800057a <process_command+0x1da>
		}
	}
	sscanf(cmd, "AT+MODE?%n", &n);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	461a      	mov	r2, r3
 8000412:	495f      	ldr	r1, [pc, #380]	@ (8000590 <process_command+0x1f0>)
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f002 f973 	bl	8002700 <siscanf>
	if (n == cmd_len) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000420:	429a      	cmp	r2, r3
 8000422:	d115      	bne.n	8000450 <process_command+0xb0>
		GPIO_PinState pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000424:	2104      	movs	r1, #4
 8000426:	4859      	ldr	r0, [pc, #356]	@ (800058c <process_command+0x1ec>)
 8000428:	f000 ff34 	bl	8001294 <HAL_GPIO_ReadPin>
 800042c:	4603      	mov	r3, r0
 800042e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
		sprintf(buf, "+MODE:%d", pin_state);
 8000432:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	4956      	ldr	r1, [pc, #344]	@ (8000594 <process_command+0x1f4>)
 800043c:	4618      	mov	r0, r3
 800043e:	f002 f93d 	bl	80026bc <siprintf>
		uart_write_line(buf);
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff9a 	bl	8000380 <uart_write_line>
		return 0;
 800044c:	2300      	movs	r3, #0
 800044e:	e094      	b.n	800057a <process_command+0x1da>
	}
	sscanf(cmd, "AT+TIME%n", &n);
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	461a      	mov	r2, r3
 8000456:	4950      	ldr	r1, [pc, #320]	@ (8000598 <process_command+0x1f8>)
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f002 f951 	bl	8002700 <siscanf>
	if (n == cmd_len) {
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000464:	429a      	cmp	r2, r3
 8000466:	d113      	bne.n	8000490 <process_command+0xf0>
		int time = HAL_GetTick();
 8000468:	f000 fbc6 	bl	8000bf8 <HAL_GetTick>
 800046c:	4603      	mov	r3, r0
 800046e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sprintf(buf, "+TIME:%i", time);
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800047a:	4948      	ldr	r1, [pc, #288]	@ (800059c <process_command+0x1fc>)
 800047c:	4618      	mov	r0, r3
 800047e:	f002 f91d 	bl	80026bc <siprintf>
		uart_write_line(buf);
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff7a 	bl	8000380 <uart_write_line>
		return 0;
 800048c:	2300      	movs	r3, #0
 800048e:	e074      	b.n	800057a <process_command+0x1da>
	}
	sscanf(cmd, "AT+BLINK=%*d%n", &n);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	461a      	mov	r2, r3
 8000496:	4942      	ldr	r1, [pc, #264]	@ (80005a0 <process_command+0x200>)
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f002 f931 	bl	8002700 <siscanf>
	if (n == cmd_len) {
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d166      	bne.n	8000576 <process_command+0x1d6>
		int count;
		sscanf(cmd, "AT+BLINK=%d", &count);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	461a      	mov	r2, r3
 80004ae:	493d      	ldr	r1, [pc, #244]	@ (80005a4 <process_command+0x204>)
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f002 f925 	bl	8002700 <siscanf>
		if (count > 0 && count < 11){
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	dd59      	ble.n	8000570 <process_command+0x1d0>
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	2b0a      	cmp	r3, #10
 80004c0:	dc56      	bgt.n	8000570 <process_command+0x1d0>
			GPIO_PinState pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80004c2:	2104      	movs	r1, #4
 80004c4:	4831      	ldr	r0, [pc, #196]	@ (800058c <process_command+0x1ec>)
 80004c6:	f000 fee5 	bl	8001294 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	482d      	ldr	r0, [pc, #180]	@ (800058c <process_command+0x1ec>)
 80004d6:	f000 fef4 	bl	80012c2 <HAL_GPIO_WritePin>
			for (int i = 0; i < 72000; i++){};
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80004e0:	e004      	b.n	80004ec <process_command+0x14c>
 80004e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80004e6:	3301      	adds	r3, #1
 80004e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80004ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80004f0:	4a2d      	ldr	r2, [pc, #180]	@ (80005a8 <process_command+0x208>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	ddf5      	ble.n	80004e2 <process_command+0x142>
			for (int i = 0; i < count; i++ ){
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80004fc:	e02a      	b.n	8000554 <process_command+0x1b4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2104      	movs	r1, #4
 8000502:	4822      	ldr	r0, [pc, #136]	@ (800058c <process_command+0x1ec>)
 8000504:	f000 fedd 	bl	80012c2 <HAL_GPIO_WritePin>
				for (int i = 0; i < 360000; i++){};
 8000508:	2300      	movs	r3, #0
 800050a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800050e:	e004      	b.n	800051a <process_command+0x17a>
 8000510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000514:	3301      	adds	r3, #1
 8000516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800051a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800051e:	4a23      	ldr	r2, [pc, #140]	@ (80005ac <process_command+0x20c>)
 8000520:	4293      	cmp	r3, r2
 8000522:	ddf5      	ble.n	8000510 <process_command+0x170>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	4818      	ldr	r0, [pc, #96]	@ (800058c <process_command+0x1ec>)
 800052a:	f000 feca 	bl	80012c2 <HAL_GPIO_WritePin>
				for (int i = 0; i < 360000; i++){};
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000534:	e004      	b.n	8000540 <process_command+0x1a0>
 8000536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800053a:	3301      	adds	r3, #1
 800053c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000544:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <process_command+0x20c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	ddf5      	ble.n	8000536 <process_command+0x196>
			for (int i = 0; i < count; i++ ){
 800054a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800054e:	3301      	adds	r3, #1
 8000550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800055a:	429a      	cmp	r2, r3
 800055c:	dbcf      	blt.n	80004fe <process_command+0x15e>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, pin_state);
 800055e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000562:	461a      	mov	r2, r3
 8000564:	2104      	movs	r1, #4
 8000566:	4809      	ldr	r0, [pc, #36]	@ (800058c <process_command+0x1ec>)
 8000568:	f000 feab 	bl	80012c2 <HAL_GPIO_WritePin>
			return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	e004      	b.n	800057a <process_command+0x1da>
		} else {
			return -1;
 8000570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000574:	e001      	b.n	800057a <process_command+0x1da>
		}
	}
	return -2;
 8000576:	f06f 0301 	mvn.w	r3, #1
}
 800057a:	4618      	mov	r0, r3
 800057c:	37b8      	adds	r7, #184	@ 0xb8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	08003984 	.word	0x08003984
 8000588:	08003994 	.word	0x08003994
 800058c:	40010c00 	.word	0x40010c00
 8000590:	080039a0 	.word	0x080039a0
 8000594:	080039ac 	.word	0x080039ac
 8000598:	080039b8 	.word	0x080039b8
 800059c:	080039c4 	.word	0x080039c4
 80005a0:	080039d0 	.word	0x080039d0
 80005a4:	080039e0 	.word	0x080039e0
 80005a8:	0001193f 	.word	0x0001193f
 80005ac:	00057e3f 	.word	0x00057e3f

080005b0 <HAL_UART_RxCpltCallback>:

// RX complete callback - collect lines ended with \r or \n
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a31      	ldr	r2, [pc, #196]	@ (8000684 <HAL_UART_RxCpltCallback+0xd4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d15c      	bne.n	800067c <HAL_UART_RxCpltCallback+0xcc>
	{
		uint8_t ch = project_input_buf.buf[project_input_buf.pos];
 80005c2:	4b31      	ldr	r3, [pc, #196]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005ca:	5cd3      	ldrb	r3, [r2, r3]
 80005cc:	73fb      	strb	r3, [r7, #15]
		if (ch == '\r' || ch == '\n')
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b0d      	cmp	r3, #13
 80005d2:	d002      	beq.n	80005da <HAL_UART_RxCpltCallback+0x2a>
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	d133      	bne.n	8000642 <HAL_UART_RxCpltCallback+0x92>
		{
			if (project_input_buf.pos > 0)
 80005da:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d041      	beq.n	8000668 <HAL_UART_RxCpltCallback+0xb8>
			{
				project_input_buf.buf[project_input_buf.pos] = '\0';
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005ea:	4a27      	ldr	r2, [pc, #156]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
				input_buf_read_content(&project_input_buf, input_buf);
 80005f0:	4926      	ldr	r1, [pc, #152]	@ (800068c <HAL_UART_RxCpltCallback+0xdc>)
 80005f2:	4825      	ldr	r0, [pc, #148]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 80005f4:	f7ff fdd4 	bl	80001a0 <input_buf_read_content>
				status = process_command(input_buf);
 80005f8:	4824      	ldr	r0, [pc, #144]	@ (800068c <HAL_UART_RxCpltCallback+0xdc>)
 80005fa:	f7ff fed1 	bl	80003a0 <process_command>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a23      	ldr	r2, [pc, #140]	@ (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 8000602:	6013      	str	r3, [r2, #0]
				if (status == 0){
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x66>
				  sprintf(output_buf, "\nOK");
 800060c:	4921      	ldr	r1, [pc, #132]	@ (8000694 <HAL_UART_RxCpltCallback+0xe4>)
 800060e:	4822      	ldr	r0, [pc, #136]	@ (8000698 <HAL_UART_RxCpltCallback+0xe8>)
 8000610:	f002 f854 	bl	80026bc <siprintf>
 8000614:	e00e      	b.n	8000634 <HAL_UART_RxCpltCallback+0x84>
				} else if (status == -2){
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <HAL_UART_RxCpltCallback+0xe0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f113 0f02 	cmn.w	r3, #2
 800061e:	d105      	bne.n	800062c <HAL_UART_RxCpltCallback+0x7c>
				  sprintf(output_buf, "\nUNKNOWN COMMAND: `%s`", input_buf);
 8000620:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <HAL_UART_RxCpltCallback+0xdc>)
 8000622:	491e      	ldr	r1, [pc, #120]	@ (800069c <HAL_UART_RxCpltCallback+0xec>)
 8000624:	481c      	ldr	r0, [pc, #112]	@ (8000698 <HAL_UART_RxCpltCallback+0xe8>)
 8000626:	f002 f849 	bl	80026bc <siprintf>
 800062a:	e003      	b.n	8000634 <HAL_UART_RxCpltCallback+0x84>
				} else {
				  sprintf(output_buf, "\nERROR");
 800062c:	491c      	ldr	r1, [pc, #112]	@ (80006a0 <HAL_UART_RxCpltCallback+0xf0>)
 800062e:	481a      	ldr	r0, [pc, #104]	@ (8000698 <HAL_UART_RxCpltCallback+0xe8>)
 8000630:	f002 f844 	bl	80026bc <siprintf>
				}
				uart_write_line(output_buf);
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <HAL_UART_RxCpltCallback+0xe8>)
 8000636:	f7ff fea3 	bl	8000380 <uart_write_line>
				input_buffer_clear(&project_input_buf);
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 800063c:	f7ff fdd7 	bl	80001ee <input_buffer_clear>
			if (project_input_buf.pos > 0)
 8000640:	e012      	b.n	8000668 <HAL_UART_RxCpltCallback+0xb8>
			}
		}
		else
		{
			if (project_input_buf.pos > (INPUT_BUF_SIZE - 1)){
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 8000644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000648:	2b7f      	cmp	r3, #127	@ 0x7f
 800064a:	d903      	bls.n	8000654 <HAL_UART_RxCpltCallback+0xa4>
				project_input_buf.pos = 0;
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			}
			project_input_buf.buf[project_input_buf.pos++] = (char)ch;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 8000656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	490a      	ldr	r1, [pc, #40]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 800065e:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
 8000662:	4909      	ldr	r1, [pc, #36]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	54ca      	strb	r2, [r1, r3]
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&(project_input_buf.buf[project_input_buf.pos]), 1);
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 800066a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800066e:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <HAL_UART_RxCpltCallback+0xd8>)
 8000670:	4413      	add	r3, r2
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <HAL_UART_RxCpltCallback+0xf4>)
 8000678:	f001 faf3 	bl	8001c62 <HAL_UART_Receive_IT>
	}
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40013800 	.word	0x40013800
 8000688:	200000c0 	.word	0x200000c0
 800068c:	200001d4 	.word	0x200001d4
 8000690:	200002f0 	.word	0x200002f0
 8000694:	080039ec 	.word	0x080039ec
 8000698:	20000258 	.word	0x20000258
 800069c:	080039f0 	.word	0x080039f0
 80006a0:	08003a08 	.word	0x08003a08
 80006a4:	20000078 	.word	0x20000078

080006a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a15      	ldr	r2, [pc, #84]	@ (800070c <HAL_UART_TxCpltCallback+0x64>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d123      	bne.n	8000702 <HAL_UART_TxCpltCallback+0x5a>
	{
		if (tx_tail != tx_head)
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_UART_TxCpltCallback+0x68>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_UART_TxCpltCallback+0x6c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d018      	beq.n	80006fc <HAL_UART_TxCpltCallback+0x54>
		{
			uint8_t b = tx_buffer[tx_tail];
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_UART_TxCpltCallback+0x68>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <HAL_UART_TxCpltCallback+0x70>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
 80006d6:	73fb      	strb	r3, [r7, #15]
			tx_tail = advance_index(tx_tail);
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <HAL_UART_TxCpltCallback+0x68>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fdb3 	bl	800024a <advance_index>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <HAL_UART_TxCpltCallback+0x68>)
 80006ea:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &b, 1);
 80006ec:	f107 030f 	add.w	r3, r7, #15
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	@ (800071c <HAL_UART_TxCpltCallback+0x74>)
 80006f6:	f001 fa7f 	bl	8001bf8 <HAL_UART_Transmit_IT>
		else
		{
			tx_busy = false;
		}
	}
}
 80006fa:	e002      	b.n	8000702 <HAL_UART_TxCpltCallback+0x5a>
			tx_busy = false;
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_UART_TxCpltCallback+0x78>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013800 	.word	0x40013800
 8000710:	200004f6 	.word	0x200004f6
 8000714:	200004f4 	.word	0x200004f4
 8000718:	200002f4 	.word	0x200002f4
 800071c:	20000078 	.word	0x20000078
 8000720:	200004f8 	.word	0x200004f8

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fa0e 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f824 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f888 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000734:	f000 f85c 	bl	80007f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  input_buf_init(&project_input_buf, &huart1);
 8000738:	490b      	ldr	r1, [pc, #44]	@ (8000768 <main+0x44>)
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <main+0x48>)
 800073c:	f7ff fd0e 	bl	800015c <input_buf_init>
  output_buf_init(&project_output_buf, &huart1);
 8000740:	4909      	ldr	r1, [pc, #36]	@ (8000768 <main+0x44>)
 8000742:	480b      	ldr	r0, [pc, #44]	@ (8000770 <main+0x4c>)
 8000744:	f7ff fd65 	bl	8000212 <output_buf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start RX interrupt for single byte reception
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&(project_input_buf.buf[project_input_buf.pos]), 1);
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <main+0x48>)
 800074a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800074e:	4a07      	ldr	r2, [pc, #28]	@ (800076c <main+0x48>)
 8000750:	4413      	add	r3, r2
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	@ (8000768 <main+0x44>)
 8000758:	f001 fa83 	bl	8001c62 <HAL_UART_Receive_IT>
  // Announce ready
  uart_write_line("READY");
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <main+0x50>)
 800075e:	f7ff fe0f 	bl	8000380 <uart_write_line>

  while (1)
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0x3e>
 8000766:	bf00      	nop
 8000768:	20000078 	.word	0x20000078
 800076c:	200000c0 	.word	0x200000c0
 8000770:	20000148 	.word	0x20000148
 8000774:	08003a10 	.word	0x08003a10

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	@ 0x40
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2228      	movs	r2, #40	@ 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ffe8 	bl	800275c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fdc2 	bl	8001338 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007ba:	f000 f899 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f830 	bl	800183c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f885 	bl	80008f0 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3740      	adds	r7, #64	@ 0x40
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART1_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000828:	f001 f996 	bl	8001b58 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f85d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000078 	.word	0x20000078
 8000840:	40013800 	.word	0x40013800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a1a      	ldr	r2, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]



  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000888:	2301      	movs	r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4619      	mov	r1, r3
 800089a:	4813      	ldr	r0, [pc, #76]	@ (80008e8 <MX_GPIO_Init+0xa4>)
 800089c:	f000 fb76 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_GPIO_Init+0xa8>)
 80008b8:	f000 fb68 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	480a      	ldr	r0, [pc, #40]	@ (80008ec <MX_GPIO_Init+0xa8>)
 80008c2:	f000 fcfe 	bl	80012c2 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2101      	movs	r1, #1
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 fa75 	bl	8000dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f000 fa8e 	bl	8000df2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	10110000 	.word	0x10110000
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_MspInit+0x5c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x5c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_MspInit+0x60>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4a04      	ldr	r2, [pc, #16]	@ (800095c <HAL_MspInit+0x60>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	40010000 	.word	0x40010000

08000960 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <HAL_UART_MspInit+0x9c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d139      	bne.n	80009f4 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a1e      	ldr	r2, [pc, #120]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <HAL_UART_MspInit+0xa4>)
 80009c6:	f000 fae1 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <HAL_UART_MspInit+0xa4>)
 80009e0:	f000 fad4 	bl	8000f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	2025      	movs	r0, #37	@ 0x25
 80009ea:	f000 f9e6 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ee:	2025      	movs	r0, #37	@ 0x25
 80009f0:	f000 f9ff 	bl	8000df2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8bc 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fc45 	bl	80012f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  //input_buf_process_rxne_it(&project_input_buf);
  //output_buf_process_txe_it(&project_output_buf);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <USART1_IRQHandler+0x10>)
 8000a76:	f001 f919 	bl	8001cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000078 	.word	0x20000078

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f001 fe5a 	bl	800276c <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20005000 	.word	0x20005000
 8000ae4:	00001000 	.word	0x00001000
 8000ae8:	200004fc 	.word	0x200004fc
 8000aec:	20000650 	.word	0x20000650

08000af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff fff8 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b02:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b18:	4c09      	ldr	r4, [pc, #36]	@ (8000b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fe27 	bl	8002778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fdfb 	bl	8000724 <main>
  bx lr
 8000b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b38:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 8000b3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b40:	2000064c 	.word	0x2000064c

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f923 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff feca 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f93b 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	f000 f903 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_IncTick+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a03      	ldr	r2, [pc, #12]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000500 	.word	0x20000500

08000bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b02      	ldr	r3, [pc, #8]	@ (8000c08 <HAL_GetTick+0x10>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000500 	.word	0x20000500

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4906      	ldr	r1, [pc, #24]	@ (8000ca4 <__NVIC_EnableIRQ+0x34>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d84:	f7ff ff90 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff2d 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff42 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff35 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa2 	bl	8000d60 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d008      	beq.n	8000e50 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2204      	movs	r2, #4
 8000e42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e020      	b.n	8000e92 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 020e 	bic.w	r2, r2, #14
 8000e5e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d005      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e051      	b.n	8000f64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a22      	ldr	r2, [pc, #136]	@ (8000f70 <HAL_DMA_Abort_IT+0xd4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d029      	beq.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <HAL_DMA_Abort_IT+0xd8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d022      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x9e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <HAL_DMA_Abort_IT+0xdc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01a      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x98>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <HAL_DMA_Abort_IT+0xe0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d012      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x92>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <HAL_DMA_Abort_IT+0xe4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00a      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x8c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_DMA_Abort_IT+0xe8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d102      	bne.n	8000f22 <HAL_DMA_Abort_IT+0x86>
 8000f1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f20:	e00e      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f26:	e00b      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2c:	e008      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	e005      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f38:	e002      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	e000      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	4a11      	ldr	r2, [pc, #68]	@ (8000f88 <HAL_DMA_Abort_IT+0xec>)
 8000f42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	4798      	blx	r3
    } 
  }
  return status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020008 	.word	0x40020008
 8000f74:	4002001c 	.word	0x4002001c
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	40020058 	.word	0x40020058
 8000f84:	4002006c 	.word	0x4002006c
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	@ 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fec:	4a92      	ldr	r2, [pc, #584]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xcc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_GPIO_Init+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	@ (8001240 <HAL_GPIO_Init+0x2b4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x130>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x13a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x13e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x14c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x152>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <HAL_GPIO_Init+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_GPIO_Init+0x2c4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_GPIO_Init+0x2c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <HAL_GPIO_Init+0x2cc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1e0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492c      	ldr	r1, [pc, #176]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4922      	ldr	r1, [pc, #136]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4918      	ldr	r1, [pc, #96]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2e2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <HAL_GPIO_Init+0x304>)
 800126a:	4013      	ands	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f ae8e 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	@ 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f806 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e272      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b92      	ldr	r3, [pc, #584]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001364:	4b8f      	ldr	r3, [pc, #572]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
 8001370:	4b8c      	ldr	r3, [pc, #560]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b89      	ldr	r3, [pc, #548]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06c      	beq.n	8001464 <HAL_RCC_OscConfig+0x12c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d168      	bne.n	8001464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e24c      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x76>
 80013a0:	4b80      	ldr	r3, [pc, #512]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a7f      	ldr	r2, [pc, #508]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b7b      	ldr	r3, [pc, #492]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7a      	ldr	r2, [pc, #488]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b78      	ldr	r3, [pc, #480]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a77      	ldr	r2, [pc, #476]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0xbc>
 80013da:	4b72      	ldr	r3, [pc, #456]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a71      	ldr	r2, [pc, #452]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b6f      	ldr	r3, [pc, #444]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6e      	ldr	r2, [pc, #440]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013f4:	4b6b      	ldr	r3, [pc, #428]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b68      	ldr	r3, [pc, #416]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a67      	ldr	r2, [pc, #412]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fbf0 	bl	8000bf8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fbec 	bl	8000bf8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e200      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xe4>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fbdc 	bl	8000bf8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fbd8 	bl	8000bf8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1ec      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x10c>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	4b4c      	ldr	r3, [pc, #304]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147e:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
 800148a:	4b46      	ldr	r3, [pc, #280]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c0      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4939      	ldr	r1, [pc, #228]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb91 	bl	8000bf8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fb8d 	bl	8000bf8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a1      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4927      	ldr	r1, [pc, #156]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb70 	bl	8000bf8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fb6c 	bl	8000bf8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e180      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d03a      	beq.n	80015bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_RCC_OscConfig+0x274>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fb50 	bl	8000bf8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fb4c 	bl	8000bf8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e160      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 face 	bl	8001b1c <RCC_Delay>
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_RCC_OscConfig+0x274>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb36 	bl	8000bf8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00f      	b.n	80015b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fb32 	bl	8000bf8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e146      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	42420000 	.word	0x42420000
 80015ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b92      	ldr	r3, [pc, #584]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e9      	bne.n	8001590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a6 	beq.w	8001716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b8b      	ldr	r3, [pc, #556]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a87      	ldr	r2, [pc, #540]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b85      	ldr	r3, [pc, #532]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b82      	ldr	r3, [pc, #520]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7e      	ldr	r2, [pc, #504]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff faf3 	bl	8000bf8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff faef 	bl	8000bf8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	@ 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e103      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b75      	ldr	r3, [pc, #468]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x312>
 800163c:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a6e      	ldr	r2, [pc, #440]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x334>
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a69      	ldr	r2, [pc, #420]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b67      	ldr	r3, [pc, #412]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a66      	ldr	r2, [pc, #408]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x356>
 8001674:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a60      	ldr	r2, [pc, #384]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b5e      	ldr	r3, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a5d      	ldr	r2, [pc, #372]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800168e:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a5a      	ldr	r2, [pc, #360]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b58      	ldr	r3, [pc, #352]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff faa3 	bl	8000bf8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fa9f 	bl	8000bf8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0b1      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b4b      	ldr	r3, [pc, #300]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x37e>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fa8d 	bl	8000bf8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fa89 	bl	8000bf8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e09b      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a3b      	ldr	r2, [pc, #236]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d061      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d146      	bne.n	80017c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa5d 	bl	8000bf8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fa59 	bl	8000bf8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e06d      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4921      	ldr	r1, [pc, #132]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a19      	ldr	r1, [r3, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	430b      	orrs	r3, r1
 800178e:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fa2d 	bl	8000bf8 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff fa29 	bl	8000bf8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e03d      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x46a>
 80017c0:	e035      	b.n	800182e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fa16 	bl	8000bf8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa12 	bl	8000bf8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e026      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x498>
 80017ee:	e01e      	b.n	800182e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e019      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
 8001804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_OscConfig+0x500>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	429a      	cmp	r2, r3
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0d0      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b6a      	ldr	r3, [pc, #424]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0207 	bic.w	r2, r3, #7
 8001866:	4965      	ldr	r1, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d040      	beq.n	800195c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e073      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06b      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4936      	ldr	r1, [pc, #216]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff f964 	bl	8000bf8 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff f960 	bl	8000bf8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e053      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d210      	bcs.n	800198c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4922      	ldr	r1, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1cc>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1d0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f8c2 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08003a24 	.word	0x08003a24
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x30>
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3e:	e027      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	613b      	str	r3, [r7, #16]
      break;
 8001a44:	e027      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0c9b      	lsrs	r3, r3, #18
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0c5b      	lsrs	r3, r3, #17
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a72:	fb03 f202 	mul.w	r2, r3, r2
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e004      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	693b      	ldr	r3, [r7, #16]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	007a1200 	.word	0x007a1200
 8001aac:	08003a3c 	.word	0x08003a3c
 8001ab0:	08003a4c 	.word	0x08003a4c
 8001ab4:	003d0900 	.word	0x003d0900

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff2 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08003a34 	.word	0x08003a34

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	@ (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08003a34 	.word	0x08003a34

08001b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <RCC_Delay+0x34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <RCC_Delay+0x38>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b38:	bf00      	nop
  }
  while (Delay --);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	60fa      	str	r2, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <RCC_Delay+0x1c>
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000000 	.word	0x20000000
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e042      	b.n	8001bf0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe feee 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	@ 0x24
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fcff 	bl	80025a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d121      	bne.n	8001c56 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_UART_Transmit_IT+0x26>
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01a      	b.n	8001c58 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2221      	movs	r2, #33	@ 0x21
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d112      	bne.n	8001ca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_UART_Receive_IT+0x26>
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e00b      	b.n	8001ca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 faad 	bl	80021f8 <UART_Start_Receive_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	e000      	b.n	8001ca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0ba      	sub	sp, #232	@ 0xe8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_UART_IRQHandler+0x66>
 8001cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fb8a 	bl	8002424 <UART_Receive_IT>
      return;
 8001d10:	e25b      	b.n	80021ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80de 	beq.w	8001ed8 <HAL_UART_IRQHandler+0x22c>
 8001d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80d1 	beq.w	8001ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_UART_IRQHandler+0xae>
 8001d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_UART_IRQHandler+0xd2>
 8001d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_UART_IRQHandler+0xf6>
 8001d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d011      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x126>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f043 0208 	orr.w	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 81f2 	beq.w	80021c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_UART_IRQHandler+0x14e>
 8001de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb15 	bl	8002424 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <HAL_UART_IRQHandler+0x17a>
 8001e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04f      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa1f 	bl	800226a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d041      	beq.n	8001ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e48:	e853 3f00 	ldrex	r3, [r3]
 8001e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3314      	adds	r3, #20
 8001e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e76:	e841 2300 	strex	r3, r2, [r1]
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1d9      	bne.n	8001e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d013      	beq.n	8001eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e92:	4a7e      	ldr	r2, [pc, #504]	@ (800208c <HAL_UART_IRQHandler+0x3e0>)
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fffe 	bl	8000e9c <HAL_DMA_Abort_IT>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	e00e      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f98a 	bl	80021d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	e00a      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f986 	bl	80021d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec4:	e006      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f982 	bl	80021d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001ed2:	e175      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed4:	bf00      	nop
    return;
 8001ed6:	e173      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 814f 	bne.w	8002180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8148 	beq.w	8002180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8141 	beq.w	8002180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80b6 	beq.w	8002090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8145 	beq.w	80021c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f42:	429a      	cmp	r2, r3
 8001f44:	f080 813e 	bcs.w	80021c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	f000 8088 	beq.w	800206c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	330c      	adds	r3, #12
 8001f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f6a:	e853 3f00 	ldrex	r3, [r3]
 8001f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001f88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f98:	e841 2300 	strex	r3, r2, [r1]
 8001f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1d9      	bne.n	8001f5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3314      	adds	r3, #20
 8001fae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb2:	e853 3f00 	ldrex	r3, [r3]
 8001fb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fcc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001fd8:	e841 2300 	strex	r3, r2, [r1]
 8001fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e1      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3314      	adds	r3, #20
 8001fea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fee:	e853 3f00 	ldrex	r3, [r3]
 8001ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3314      	adds	r3, #20
 8002004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002008:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800200a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800200e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002010:	e841 2300 	strex	r3, r2, [r1]
 8002014:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e3      	bne.n	8001fe4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	f023 0310 	bic.w	r3, r3, #16
 8002040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	330c      	adds	r3, #12
 800204a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800204e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002050:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002056:	e841 2300 	strex	r3, r2, [r1]
 800205a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800205c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e3      	bne.n	800202a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fedd 	bl	8000e26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800207a:	b29b      	uxth	r3, r3
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	b29b      	uxth	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8ad 	bl	80021e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002088:	e09c      	b.n	80021c4 <HAL_UART_IRQHandler+0x518>
 800208a:	bf00      	nop
 800208c:	0800232f 	.word	0x0800232f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 808e 	beq.w	80021c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8089 	beq.w	80021c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c0:	e853 3f00 	ldrex	r3, [r3]
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020da:	647a      	str	r2, [r7, #68]	@ 0x44
 80020dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80020e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1e3      	bne.n	80020b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3314      	adds	r3, #20
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	e853 3f00 	ldrex	r3, [r3]
 80020fc:	623b      	str	r3, [r7, #32]
   return(result);
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002112:	633a      	str	r2, [r7, #48]	@ 0x30
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800211a:	e841 2300 	strex	r3, r2, [r1]
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1e3      	bne.n	80020ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	330c      	adds	r3, #12
 800213a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	e853 3f00 	ldrex	r3, [r3]
 8002142:	60fb      	str	r3, [r7, #12]
   return(result);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0310 	bic.w	r3, r3, #16
 800214a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002158:	61fa      	str	r2, [r7, #28]
 800215a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215c:	69b9      	ldr	r1, [r7, #24]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	e841 2300 	strex	r3, r2, [r1]
 8002164:	617b      	str	r3, [r7, #20]
   return(result);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e3      	bne.n	8002134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f832 	bl	80021e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800217e:	e023      	b.n	80021c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <HAL_UART_IRQHandler+0x4f4>
 800218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8dc 	bl	8002356 <UART_Transmit_IT>
    return;
 800219e:	e014      	b.n	80021ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <HAL_UART_IRQHandler+0x51e>
 80021ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f91b 	bl	80023f4 <UART_EndTransmit_IT>
    return;
 80021be:	e004      	b.n	80021ca <HAL_UART_IRQHandler+0x51e>
    return;
 80021c0:	bf00      	nop
 80021c2:	e002      	b.n	80021ca <HAL_UART_IRQHandler+0x51e>
      return;
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <HAL_UART_IRQHandler+0x51e>
      return;
 80021c8:	bf00      	nop
  }
}
 80021ca:	37e8      	adds	r7, #232	@ 0xe8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2222      	movs	r2, #34	@ 0x22
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800226a:	b480      	push	{r7}
 800226c:	b095      	sub	sp, #84	@ 0x54
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227c:	e853 3f00 	ldrex	r3, [r3]
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002292:	643a      	str	r2, [r7, #64]	@ 0x40
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800229a:	e841 2300 	strex	r3, r2, [r1]
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e5      	bne.n	8002272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3314      	adds	r3, #20
 80022ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e5      	bne.n	80022a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d119      	bne.n	8002316 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	e853 3f00 	ldrex	r3, [r3]
 80022f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f023 0310 	bic.w	r3, r3, #16
 80022f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002302:	61ba      	str	r2, [r7, #24]
 8002304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002306:	6979      	ldr	r1, [r7, #20]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	e841 2300 	strex	r3, r2, [r1]
 800230e:	613b      	str	r3, [r7, #16]
   return(result);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e5      	bne.n	80022e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002324:	bf00      	nop
 8002326:	3754      	adds	r7, #84	@ 0x54
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ff41 	bl	80021d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b21      	cmp	r3, #33	@ 0x21
 8002368:	d13e      	bne.n	80023e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002372:	d114      	bne.n	800239e <UART_Transmit_IT+0x48>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d110      	bne.n	800239e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	1c9a      	adds	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e008      	b.n	80023b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	1c59      	adds	r1, r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6211      	str	r1, [r2, #32]
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe f947 	bl	80006a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	@ 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b22      	cmp	r3, #34	@ 0x22
 8002436:	f040 80ae 	bne.w	8002596 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002442:	d117      	bne.n	8002474 <UART_Receive_IT+0x50>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002462:	b29a      	uxth	r2, r3
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	1c9a      	adds	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28
 8002472:	e026      	b.n	80024c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002486:	d007      	beq.n	8002498 <UART_Receive_IT+0x74>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <UART_Receive_IT+0x82>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e008      	b.n	80024b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4619      	mov	r1, r3
 80024d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d15d      	bne.n	8002592 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0220 	bic.w	r2, r2, #32
 80024e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	2b01      	cmp	r3, #1
 800251a:	d135      	bne.n	8002588 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	613b      	str	r3, [r7, #16]
   return(result);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f023 0310 	bic.w	r3, r3, #16
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002542:	623a      	str	r2, [r7, #32]
 8002544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002546:	69f9      	ldr	r1, [r7, #28]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	e841 2300 	strex	r3, r2, [r1]
 800254e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e5      	bne.n	8002522 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b10      	cmp	r3, #16
 8002562:	d10a      	bne.n	800257a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fe2e 	bl	80021e2 <HAL_UARTEx_RxEventCallback>
 8002586:	e002      	b.n	800258e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fe f811 	bl	80005b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e002      	b.n	8002598 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3730      	adds	r7, #48	@ 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025da:	f023 030c 	bic.w	r3, r3, #12
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	@ (80026b4 <UART_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7ff fa74 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	e002      	b.n	8002616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002610:	f7ff fa5c 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4a22      	ldr	r2, [pc, #136]	@ (80026b8 <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	0119      	lsls	r1, r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <UART_SetConfig+0x118>)
 800264e:	fba3 0302 	umull	r0, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2064      	movs	r0, #100	@ 0x64
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	3332      	adds	r3, #50	@ 0x32
 8002660:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <UART_SetConfig+0x118>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266c:	4419      	add	r1, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <UART_SetConfig+0x118>)
 8002686:	fba3 0302 	umull	r0, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2064      	movs	r0, #100	@ 0x64
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	3332      	adds	r3, #50	@ 0x32
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <UART_SetConfig+0x118>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	440a      	add	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013800 	.word	0x40013800
 80026b8:	51eb851f 	.word	0x51eb851f

080026bc <siprintf>:
 80026bc:	b40e      	push	{r1, r2, r3}
 80026be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026c2:	b510      	push	{r4, lr}
 80026c4:	2400      	movs	r4, #0
 80026c6:	b09d      	sub	sp, #116	@ 0x74
 80026c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80026ca:	9002      	str	r0, [sp, #8]
 80026cc:	9006      	str	r0, [sp, #24]
 80026ce:	9107      	str	r1, [sp, #28]
 80026d0:	9104      	str	r1, [sp, #16]
 80026d2:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <siprintf+0x3c>)
 80026d4:	4909      	ldr	r1, [pc, #36]	@ (80026fc <siprintf+0x40>)
 80026d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80026da:	9105      	str	r1, [sp, #20]
 80026dc:	6800      	ldr	r0, [r0, #0]
 80026de:	a902      	add	r1, sp, #8
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80026e4:	f000 f9c0 	bl	8002a68 <_svfiprintf_r>
 80026e8:	9b02      	ldr	r3, [sp, #8]
 80026ea:	701c      	strb	r4, [r3, #0]
 80026ec:	b01d      	add	sp, #116	@ 0x74
 80026ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f2:	b003      	add	sp, #12
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	ffff0208 	.word	0xffff0208

08002700 <siscanf>:
 8002700:	b40e      	push	{r1, r2, r3}
 8002702:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8002706:	b570      	push	{r4, r5, r6, lr}
 8002708:	2500      	movs	r5, #0
 800270a:	b09d      	sub	sp, #116	@ 0x74
 800270c:	ac21      	add	r4, sp, #132	@ 0x84
 800270e:	f854 6b04 	ldr.w	r6, [r4], #4
 8002712:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002716:	951b      	str	r5, [sp, #108]	@ 0x6c
 8002718:	9002      	str	r0, [sp, #8]
 800271a:	9006      	str	r0, [sp, #24]
 800271c:	f7fd fd16 	bl	800014c <strlen>
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <siscanf+0x50>)
 8002722:	9003      	str	r0, [sp, #12]
 8002724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272a:	9007      	str	r0, [sp, #28]
 800272c:	4809      	ldr	r0, [pc, #36]	@ (8002754 <siscanf+0x54>)
 800272e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002732:	4632      	mov	r2, r6
 8002734:	4623      	mov	r3, r4
 8002736:	a902      	add	r1, sp, #8
 8002738:	6800      	ldr	r0, [r0, #0]
 800273a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800273c:	9514      	str	r5, [sp, #80]	@ 0x50
 800273e:	9401      	str	r4, [sp, #4]
 8002740:	f000 fae8 	bl	8002d14 <__ssvfiscanf_r>
 8002744:	b01d      	add	sp, #116	@ 0x74
 8002746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800274a:	b003      	add	sp, #12
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	08002759 	.word	0x08002759
 8002754:	2000000c 	.word	0x2000000c

08002758 <__seofread>:
 8002758:	2000      	movs	r0, #0
 800275a:	4770      	bx	lr

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <__errno>:
 800276c:	4b01      	ldr	r3, [pc, #4]	@ (8002774 <__errno+0x8>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c

08002778 <__libc_init_array>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2600      	movs	r6, #0
 800277c:	4d0c      	ldr	r5, [pc, #48]	@ (80027b0 <__libc_init_array+0x38>)
 800277e:	4c0d      	ldr	r4, [pc, #52]	@ (80027b4 <__libc_init_array+0x3c>)
 8002780:	1b64      	subs	r4, r4, r5
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	42a6      	cmp	r6, r4
 8002786:	d109      	bne.n	800279c <__libc_init_array+0x24>
 8002788:	f001 f8ee 	bl	8003968 <_init>
 800278c:	2600      	movs	r6, #0
 800278e:	4d0a      	ldr	r5, [pc, #40]	@ (80027b8 <__libc_init_array+0x40>)
 8002790:	4c0a      	ldr	r4, [pc, #40]	@ (80027bc <__libc_init_array+0x44>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	42a6      	cmp	r6, r4
 8002798:	d105      	bne.n	80027a6 <__libc_init_array+0x2e>
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a0:	4798      	blx	r3
 80027a2:	3601      	adds	r6, #1
 80027a4:	e7ee      	b.n	8002784 <__libc_init_array+0xc>
 80027a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027aa:	4798      	blx	r3
 80027ac:	3601      	adds	r6, #1
 80027ae:	e7f2      	b.n	8002796 <__libc_init_array+0x1e>
 80027b0:	08003ba8 	.word	0x08003ba8
 80027b4:	08003ba8 	.word	0x08003ba8
 80027b8:	08003ba8 	.word	0x08003ba8
 80027bc:	08003bac 	.word	0x08003bac

080027c0 <__retarget_lock_acquire_recursive>:
 80027c0:	4770      	bx	lr

080027c2 <__retarget_lock_release_recursive>:
 80027c2:	4770      	bx	lr

080027c4 <_free_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	4605      	mov	r5, r0
 80027c8:	2900      	cmp	r1, #0
 80027ca:	d040      	beq.n	800284e <_free_r+0x8a>
 80027cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027d0:	1f0c      	subs	r4, r1, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bfb8      	it	lt
 80027d6:	18e4      	addlt	r4, r4, r3
 80027d8:	f000 f8de 	bl	8002998 <__malloc_lock>
 80027dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <_free_r+0x8c>)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	b933      	cbnz	r3, 80027f0 <_free_r+0x2c>
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	6014      	str	r4, [r2, #0]
 80027e6:	4628      	mov	r0, r5
 80027e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ec:	f000 b8da 	b.w	80029a4 <__malloc_unlock>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d908      	bls.n	8002806 <_free_r+0x42>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	1821      	adds	r1, r4, r0
 80027f8:	428b      	cmp	r3, r1
 80027fa:	bf01      	itttt	eq
 80027fc:	6819      	ldreq	r1, [r3, #0]
 80027fe:	685b      	ldreq	r3, [r3, #4]
 8002800:	1809      	addeq	r1, r1, r0
 8002802:	6021      	streq	r1, [r4, #0]
 8002804:	e7ed      	b.n	80027e2 <_free_r+0x1e>
 8002806:	461a      	mov	r2, r3
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b10b      	cbz	r3, 8002810 <_free_r+0x4c>
 800280c:	42a3      	cmp	r3, r4
 800280e:	d9fa      	bls.n	8002806 <_free_r+0x42>
 8002810:	6811      	ldr	r1, [r2, #0]
 8002812:	1850      	adds	r0, r2, r1
 8002814:	42a0      	cmp	r0, r4
 8002816:	d10b      	bne.n	8002830 <_free_r+0x6c>
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	4401      	add	r1, r0
 800281c:	1850      	adds	r0, r2, r1
 800281e:	4283      	cmp	r3, r0
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	d1e0      	bne.n	80027e6 <_free_r+0x22>
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4408      	add	r0, r1
 800282a:	6010      	str	r0, [r2, #0]
 800282c:	6053      	str	r3, [r2, #4]
 800282e:	e7da      	b.n	80027e6 <_free_r+0x22>
 8002830:	d902      	bls.n	8002838 <_free_r+0x74>
 8002832:	230c      	movs	r3, #12
 8002834:	602b      	str	r3, [r5, #0]
 8002836:	e7d6      	b.n	80027e6 <_free_r+0x22>
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	1821      	adds	r1, r4, r0
 800283c:	428b      	cmp	r3, r1
 800283e:	bf01      	itttt	eq
 8002840:	6819      	ldreq	r1, [r3, #0]
 8002842:	685b      	ldreq	r3, [r3, #4]
 8002844:	1809      	addeq	r1, r1, r0
 8002846:	6021      	streq	r1, [r4, #0]
 8002848:	6063      	str	r3, [r4, #4]
 800284a:	6054      	str	r4, [r2, #4]
 800284c:	e7cb      	b.n	80027e6 <_free_r+0x22>
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	20000648 	.word	0x20000648

08002854 <sbrk_aligned>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4e0f      	ldr	r6, [pc, #60]	@ (8002894 <sbrk_aligned+0x40>)
 8002858:	460c      	mov	r4, r1
 800285a:	6831      	ldr	r1, [r6, #0]
 800285c:	4605      	mov	r5, r0
 800285e:	b911      	cbnz	r1, 8002866 <sbrk_aligned+0x12>
 8002860:	f000 ff34 	bl	80036cc <_sbrk_r>
 8002864:	6030      	str	r0, [r6, #0]
 8002866:	4621      	mov	r1, r4
 8002868:	4628      	mov	r0, r5
 800286a:	f000 ff2f 	bl	80036cc <_sbrk_r>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d103      	bne.n	800287a <sbrk_aligned+0x26>
 8002872:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002876:	4620      	mov	r0, r4
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	1cc4      	adds	r4, r0, #3
 800287c:	f024 0403 	bic.w	r4, r4, #3
 8002880:	42a0      	cmp	r0, r4
 8002882:	d0f8      	beq.n	8002876 <sbrk_aligned+0x22>
 8002884:	1a21      	subs	r1, r4, r0
 8002886:	4628      	mov	r0, r5
 8002888:	f000 ff20 	bl	80036cc <_sbrk_r>
 800288c:	3001      	adds	r0, #1
 800288e:	d1f2      	bne.n	8002876 <sbrk_aligned+0x22>
 8002890:	e7ef      	b.n	8002872 <sbrk_aligned+0x1e>
 8002892:	bf00      	nop
 8002894:	20000644 	.word	0x20000644

08002898 <_malloc_r>:
 8002898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800289c:	1ccd      	adds	r5, r1, #3
 800289e:	f025 0503 	bic.w	r5, r5, #3
 80028a2:	3508      	adds	r5, #8
 80028a4:	2d0c      	cmp	r5, #12
 80028a6:	bf38      	it	cc
 80028a8:	250c      	movcc	r5, #12
 80028aa:	2d00      	cmp	r5, #0
 80028ac:	4606      	mov	r6, r0
 80028ae:	db01      	blt.n	80028b4 <_malloc_r+0x1c>
 80028b0:	42a9      	cmp	r1, r5
 80028b2:	d904      	bls.n	80028be <_malloc_r+0x26>
 80028b4:	230c      	movs	r3, #12
 80028b6:	6033      	str	r3, [r6, #0]
 80028b8:	2000      	movs	r0, #0
 80028ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002994 <_malloc_r+0xfc>
 80028c2:	f000 f869 	bl	8002998 <__malloc_lock>
 80028c6:	f8d8 3000 	ldr.w	r3, [r8]
 80028ca:	461c      	mov	r4, r3
 80028cc:	bb44      	cbnz	r4, 8002920 <_malloc_r+0x88>
 80028ce:	4629      	mov	r1, r5
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7ff ffbf 	bl	8002854 <sbrk_aligned>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	4604      	mov	r4, r0
 80028da:	d158      	bne.n	800298e <_malloc_r+0xf6>
 80028dc:	f8d8 4000 	ldr.w	r4, [r8]
 80028e0:	4627      	mov	r7, r4
 80028e2:	2f00      	cmp	r7, #0
 80028e4:	d143      	bne.n	800296e <_malloc_r+0xd6>
 80028e6:	2c00      	cmp	r4, #0
 80028e8:	d04b      	beq.n	8002982 <_malloc_r+0xea>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	4639      	mov	r1, r7
 80028ee:	4630      	mov	r0, r6
 80028f0:	eb04 0903 	add.w	r9, r4, r3
 80028f4:	f000 feea 	bl	80036cc <_sbrk_r>
 80028f8:	4581      	cmp	r9, r0
 80028fa:	d142      	bne.n	8002982 <_malloc_r+0xea>
 80028fc:	6821      	ldr	r1, [r4, #0]
 80028fe:	4630      	mov	r0, r6
 8002900:	1a6d      	subs	r5, r5, r1
 8002902:	4629      	mov	r1, r5
 8002904:	f7ff ffa6 	bl	8002854 <sbrk_aligned>
 8002908:	3001      	adds	r0, #1
 800290a:	d03a      	beq.n	8002982 <_malloc_r+0xea>
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	442b      	add	r3, r5
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	f8d8 3000 	ldr.w	r3, [r8]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	bb62      	cbnz	r2, 8002974 <_malloc_r+0xdc>
 800291a:	f8c8 7000 	str.w	r7, [r8]
 800291e:	e00f      	b.n	8002940 <_malloc_r+0xa8>
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	1b52      	subs	r2, r2, r5
 8002924:	d420      	bmi.n	8002968 <_malloc_r+0xd0>
 8002926:	2a0b      	cmp	r2, #11
 8002928:	d917      	bls.n	800295a <_malloc_r+0xc2>
 800292a:	1961      	adds	r1, r4, r5
 800292c:	42a3      	cmp	r3, r4
 800292e:	6025      	str	r5, [r4, #0]
 8002930:	bf18      	it	ne
 8002932:	6059      	strne	r1, [r3, #4]
 8002934:	6863      	ldr	r3, [r4, #4]
 8002936:	bf08      	it	eq
 8002938:	f8c8 1000 	streq.w	r1, [r8]
 800293c:	5162      	str	r2, [r4, r5]
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	4630      	mov	r0, r6
 8002942:	f000 f82f 	bl	80029a4 <__malloc_unlock>
 8002946:	f104 000b 	add.w	r0, r4, #11
 800294a:	1d23      	adds	r3, r4, #4
 800294c:	f020 0007 	bic.w	r0, r0, #7
 8002950:	1ac2      	subs	r2, r0, r3
 8002952:	bf1c      	itt	ne
 8002954:	1a1b      	subne	r3, r3, r0
 8002956:	50a3      	strne	r3, [r4, r2]
 8002958:	e7af      	b.n	80028ba <_malloc_r+0x22>
 800295a:	6862      	ldr	r2, [r4, #4]
 800295c:	42a3      	cmp	r3, r4
 800295e:	bf0c      	ite	eq
 8002960:	f8c8 2000 	streq.w	r2, [r8]
 8002964:	605a      	strne	r2, [r3, #4]
 8002966:	e7eb      	b.n	8002940 <_malloc_r+0xa8>
 8002968:	4623      	mov	r3, r4
 800296a:	6864      	ldr	r4, [r4, #4]
 800296c:	e7ae      	b.n	80028cc <_malloc_r+0x34>
 800296e:	463c      	mov	r4, r7
 8002970:	687f      	ldr	r7, [r7, #4]
 8002972:	e7b6      	b.n	80028e2 <_malloc_r+0x4a>
 8002974:	461a      	mov	r2, r3
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	42a3      	cmp	r3, r4
 800297a:	d1fb      	bne.n	8002974 <_malloc_r+0xdc>
 800297c:	2300      	movs	r3, #0
 800297e:	6053      	str	r3, [r2, #4]
 8002980:	e7de      	b.n	8002940 <_malloc_r+0xa8>
 8002982:	230c      	movs	r3, #12
 8002984:	4630      	mov	r0, r6
 8002986:	6033      	str	r3, [r6, #0]
 8002988:	f000 f80c 	bl	80029a4 <__malloc_unlock>
 800298c:	e794      	b.n	80028b8 <_malloc_r+0x20>
 800298e:	6005      	str	r5, [r0, #0]
 8002990:	e7d6      	b.n	8002940 <_malloc_r+0xa8>
 8002992:	bf00      	nop
 8002994:	20000648 	.word	0x20000648

08002998 <__malloc_lock>:
 8002998:	4801      	ldr	r0, [pc, #4]	@ (80029a0 <__malloc_lock+0x8>)
 800299a:	f7ff bf11 	b.w	80027c0 <__retarget_lock_acquire_recursive>
 800299e:	bf00      	nop
 80029a0:	20000640 	.word	0x20000640

080029a4 <__malloc_unlock>:
 80029a4:	4801      	ldr	r0, [pc, #4]	@ (80029ac <__malloc_unlock+0x8>)
 80029a6:	f7ff bf0c 	b.w	80027c2 <__retarget_lock_release_recursive>
 80029aa:	bf00      	nop
 80029ac:	20000640 	.word	0x20000640

080029b0 <__ssputs_r>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	461f      	mov	r7, r3
 80029b6:	688e      	ldr	r6, [r1, #8]
 80029b8:	4682      	mov	sl, r0
 80029ba:	42be      	cmp	r6, r7
 80029bc:	460c      	mov	r4, r1
 80029be:	4690      	mov	r8, r2
 80029c0:	680b      	ldr	r3, [r1, #0]
 80029c2:	d82d      	bhi.n	8002a20 <__ssputs_r+0x70>
 80029c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029cc:	d026      	beq.n	8002a1c <__ssputs_r+0x6c>
 80029ce:	6965      	ldr	r5, [r4, #20]
 80029d0:	6909      	ldr	r1, [r1, #16]
 80029d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d6:	eba3 0901 	sub.w	r9, r3, r1
 80029da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029de:	1c7b      	adds	r3, r7, #1
 80029e0:	444b      	add	r3, r9
 80029e2:	106d      	asrs	r5, r5, #1
 80029e4:	429d      	cmp	r5, r3
 80029e6:	bf38      	it	cc
 80029e8:	461d      	movcc	r5, r3
 80029ea:	0553      	lsls	r3, r2, #21
 80029ec:	d527      	bpl.n	8002a3e <__ssputs_r+0x8e>
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7ff ff52 	bl	8002898 <_malloc_r>
 80029f4:	4606      	mov	r6, r0
 80029f6:	b360      	cbz	r0, 8002a52 <__ssputs_r+0xa2>
 80029f8:	464a      	mov	r2, r9
 80029fa:	6921      	ldr	r1, [r4, #16]
 80029fc:	f000 fe84 	bl	8003708 <memcpy>
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0a:	81a3      	strh	r3, [r4, #12]
 8002a0c:	6126      	str	r6, [r4, #16]
 8002a0e:	444e      	add	r6, r9
 8002a10:	6026      	str	r6, [r4, #0]
 8002a12:	463e      	mov	r6, r7
 8002a14:	6165      	str	r5, [r4, #20]
 8002a16:	eba5 0509 	sub.w	r5, r5, r9
 8002a1a:	60a5      	str	r5, [r4, #8]
 8002a1c:	42be      	cmp	r6, r7
 8002a1e:	d900      	bls.n	8002a22 <__ssputs_r+0x72>
 8002a20:	463e      	mov	r6, r7
 8002a22:	4632      	mov	r2, r6
 8002a24:	4641      	mov	r1, r8
 8002a26:	6820      	ldr	r0, [r4, #0]
 8002a28:	f000 fe35 	bl	8003696 <memmove>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	68a3      	ldr	r3, [r4, #8]
 8002a30:	1b9b      	subs	r3, r3, r6
 8002a32:	60a3      	str	r3, [r4, #8]
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	4433      	add	r3, r6
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3e:	462a      	mov	r2, r5
 8002a40:	f000 fe70 	bl	8003724 <_realloc_r>
 8002a44:	4606      	mov	r6, r0
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d1e0      	bne.n	8002a0c <__ssputs_r+0x5c>
 8002a4a:	4650      	mov	r0, sl
 8002a4c:	6921      	ldr	r1, [r4, #16]
 8002a4e:	f7ff feb9 	bl	80027c4 <_free_r>
 8002a52:	230c      	movs	r3, #12
 8002a54:	f8ca 3000 	str.w	r3, [sl]
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a62:	81a3      	strh	r3, [r4, #12]
 8002a64:	e7e9      	b.n	8002a3a <__ssputs_r+0x8a>
	...

08002a68 <_svfiprintf_r>:
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	4698      	mov	r8, r3
 8002a6e:	898b      	ldrh	r3, [r1, #12]
 8002a70:	4607      	mov	r7, r0
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	460d      	mov	r5, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	b09d      	sub	sp, #116	@ 0x74
 8002a7a:	d510      	bpl.n	8002a9e <_svfiprintf_r+0x36>
 8002a7c:	690b      	ldr	r3, [r1, #16]
 8002a7e:	b973      	cbnz	r3, 8002a9e <_svfiprintf_r+0x36>
 8002a80:	2140      	movs	r1, #64	@ 0x40
 8002a82:	f7ff ff09 	bl	8002898 <_malloc_r>
 8002a86:	6028      	str	r0, [r5, #0]
 8002a88:	6128      	str	r0, [r5, #16]
 8002a8a:	b930      	cbnz	r0, 8002a9a <_svfiprintf_r+0x32>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a94:	b01d      	add	sp, #116	@ 0x74
 8002a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9a:	2340      	movs	r3, #64	@ 0x40
 8002a9c:	616b      	str	r3, [r5, #20]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002aa8:	2330      	movs	r3, #48	@ 0x30
 8002aaa:	f04f 0901 	mov.w	r9, #1
 8002aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ab2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c4c <_svfiprintf_r+0x1e4>
 8002ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002aba:	4623      	mov	r3, r4
 8002abc:	469a      	mov	sl, r3
 8002abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ac2:	b10a      	cbz	r2, 8002ac8 <_svfiprintf_r+0x60>
 8002ac4:	2a25      	cmp	r2, #37	@ 0x25
 8002ac6:	d1f9      	bne.n	8002abc <_svfiprintf_r+0x54>
 8002ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8002acc:	d00b      	beq.n	8002ae6 <_svfiprintf_r+0x7e>
 8002ace:	465b      	mov	r3, fp
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	f7ff ff6b 	bl	80029b0 <__ssputs_r>
 8002ada:	3001      	adds	r0, #1
 8002adc:	f000 80a7 	beq.w	8002c2e <_svfiprintf_r+0x1c6>
 8002ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ae2:	445a      	add	r2, fp
 8002ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 809f 	beq.w	8002c2e <_svfiprintf_r+0x1c6>
 8002af0:	2300      	movs	r3, #0
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002afa:	f10a 0a01 	add.w	sl, sl, #1
 8002afe:	9304      	str	r3, [sp, #16]
 8002b00:	9307      	str	r3, [sp, #28]
 8002b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b08:	4654      	mov	r4, sl
 8002b0a:	2205      	movs	r2, #5
 8002b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b10:	484e      	ldr	r0, [pc, #312]	@ (8002c4c <_svfiprintf_r+0x1e4>)
 8002b12:	f000 fdeb 	bl	80036ec <memchr>
 8002b16:	9a04      	ldr	r2, [sp, #16]
 8002b18:	b9d8      	cbnz	r0, 8002b52 <_svfiprintf_r+0xea>
 8002b1a:	06d0      	lsls	r0, r2, #27
 8002b1c:	bf44      	itt	mi
 8002b1e:	2320      	movmi	r3, #32
 8002b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b24:	0711      	lsls	r1, r2, #28
 8002b26:	bf44      	itt	mi
 8002b28:	232b      	movmi	r3, #43	@ 0x2b
 8002b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b34:	d015      	beq.n	8002b62 <_svfiprintf_r+0xfa>
 8002b36:	4654      	mov	r4, sl
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f04f 0c0a 	mov.w	ip, #10
 8002b3e:	9a07      	ldr	r2, [sp, #28]
 8002b40:	4621      	mov	r1, r4
 8002b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b46:	3b30      	subs	r3, #48	@ 0x30
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d94b      	bls.n	8002be4 <_svfiprintf_r+0x17c>
 8002b4c:	b1b0      	cbz	r0, 8002b7c <_svfiprintf_r+0x114>
 8002b4e:	9207      	str	r2, [sp, #28]
 8002b50:	e014      	b.n	8002b7c <_svfiprintf_r+0x114>
 8002b52:	eba0 0308 	sub.w	r3, r0, r8
 8002b56:	fa09 f303 	lsl.w	r3, r9, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	46a2      	mov	sl, r4
 8002b5e:	9304      	str	r3, [sp, #16]
 8002b60:	e7d2      	b.n	8002b08 <_svfiprintf_r+0xa0>
 8002b62:	9b03      	ldr	r3, [sp, #12]
 8002b64:	1d19      	adds	r1, r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	9103      	str	r1, [sp, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfbb      	ittet	lt
 8002b6e:	425b      	neglt	r3, r3
 8002b70:	f042 0202 	orrlt.w	r2, r2, #2
 8002b74:	9307      	strge	r3, [sp, #28]
 8002b76:	9307      	strlt	r3, [sp, #28]
 8002b78:	bfb8      	it	lt
 8002b7a:	9204      	strlt	r2, [sp, #16]
 8002b7c:	7823      	ldrb	r3, [r4, #0]
 8002b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b80:	d10a      	bne.n	8002b98 <_svfiprintf_r+0x130>
 8002b82:	7863      	ldrb	r3, [r4, #1]
 8002b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b86:	d132      	bne.n	8002bee <_svfiprintf_r+0x186>
 8002b88:	9b03      	ldr	r3, [sp, #12]
 8002b8a:	3402      	adds	r4, #2
 8002b8c:	1d1a      	adds	r2, r3, #4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	9203      	str	r2, [sp, #12]
 8002b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b96:	9305      	str	r3, [sp, #20]
 8002b98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c50 <_svfiprintf_r+0x1e8>
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4650      	mov	r0, sl
 8002ba0:	7821      	ldrb	r1, [r4, #0]
 8002ba2:	f000 fda3 	bl	80036ec <memchr>
 8002ba6:	b138      	cbz	r0, 8002bb8 <_svfiprintf_r+0x150>
 8002ba8:	2240      	movs	r2, #64	@ 0x40
 8002baa:	9b04      	ldr	r3, [sp, #16]
 8002bac:	eba0 000a 	sub.w	r0, r0, sl
 8002bb0:	4082      	lsls	r2, r0
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	3401      	adds	r4, #1
 8002bb6:	9304      	str	r3, [sp, #16]
 8002bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	4825      	ldr	r0, [pc, #148]	@ (8002c54 <_svfiprintf_r+0x1ec>)
 8002bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bc4:	f000 fd92 	bl	80036ec <memchr>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d036      	beq.n	8002c3a <_svfiprintf_r+0x1d2>
 8002bcc:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <_svfiprintf_r+0x1f0>)
 8002bce:	bb1b      	cbnz	r3, 8002c18 <_svfiprintf_r+0x1b0>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	f023 0307 	bic.w	r3, r3, #7
 8002bd8:	3308      	adds	r3, #8
 8002bda:	9303      	str	r3, [sp, #12]
 8002bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bde:	4433      	add	r3, r6
 8002be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002be2:	e76a      	b.n	8002aba <_svfiprintf_r+0x52>
 8002be4:	460c      	mov	r4, r1
 8002be6:	2001      	movs	r0, #1
 8002be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bec:	e7a8      	b.n	8002b40 <_svfiprintf_r+0xd8>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f04f 0c0a 	mov.w	ip, #10
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	3401      	adds	r4, #1
 8002bf8:	9305      	str	r3, [sp, #20]
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c00:	3a30      	subs	r2, #48	@ 0x30
 8002c02:	2a09      	cmp	r2, #9
 8002c04:	d903      	bls.n	8002c0e <_svfiprintf_r+0x1a6>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0c6      	beq.n	8002b98 <_svfiprintf_r+0x130>
 8002c0a:	9105      	str	r1, [sp, #20]
 8002c0c:	e7c4      	b.n	8002b98 <_svfiprintf_r+0x130>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	2301      	movs	r3, #1
 8002c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c16:	e7f0      	b.n	8002bfa <_svfiprintf_r+0x192>
 8002c18:	ab03      	add	r3, sp, #12
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	462a      	mov	r2, r5
 8002c1e:	4638      	mov	r0, r7
 8002c20:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <_svfiprintf_r+0x1f4>)
 8002c22:	a904      	add	r1, sp, #16
 8002c24:	f3af 8000 	nop.w
 8002c28:	1c42      	adds	r2, r0, #1
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	d1d6      	bne.n	8002bdc <_svfiprintf_r+0x174>
 8002c2e:	89ab      	ldrh	r3, [r5, #12]
 8002c30:	065b      	lsls	r3, r3, #25
 8002c32:	f53f af2d 	bmi.w	8002a90 <_svfiprintf_r+0x28>
 8002c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c38:	e72c      	b.n	8002a94 <_svfiprintf_r+0x2c>
 8002c3a:	ab03      	add	r3, sp, #12
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	462a      	mov	r2, r5
 8002c40:	4638      	mov	r0, r7
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <_svfiprintf_r+0x1f4>)
 8002c44:	a904      	add	r1, sp, #16
 8002c46:	f000 fa4b 	bl	80030e0 <_printf_i>
 8002c4a:	e7ed      	b.n	8002c28 <_svfiprintf_r+0x1c0>
 8002c4c:	08003a4e 	.word	0x08003a4e
 8002c50:	08003a54 	.word	0x08003a54
 8002c54:	08003a58 	.word	0x08003a58
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	080029b1 	.word	0x080029b1

08002c60 <_sungetc_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	1c4b      	adds	r3, r1, #1
 8002c64:	4614      	mov	r4, r2
 8002c66:	d103      	bne.n	8002c70 <_sungetc_r+0x10>
 8002c68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	8993      	ldrh	r3, [r2, #12]
 8002c72:	b2cd      	uxtb	r5, r1
 8002c74:	f023 0320 	bic.w	r3, r3, #32
 8002c78:	8193      	strh	r3, [r2, #12]
 8002c7a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	b18b      	cbz	r3, 8002ca4 <_sungetc_r+0x44>
 8002c80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c82:	4293      	cmp	r3, r2
 8002c84:	dd08      	ble.n	8002c98 <_sungetc_r+0x38>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	1e5a      	subs	r2, r3, #1
 8002c8a:	6022      	str	r2, [r4, #0]
 8002c8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	e7e9      	b.n	8002c6c <_sungetc_r+0xc>
 8002c98:	4621      	mov	r1, r4
 8002c9a:	f000 fcc4 	bl	8003626 <__submore>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d0f1      	beq.n	8002c86 <_sungetc_r+0x26>
 8002ca2:	e7e1      	b.n	8002c68 <_sungetc_r+0x8>
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	b151      	cbz	r1, 8002cc0 <_sungetc_r+0x60>
 8002caa:	4299      	cmp	r1, r3
 8002cac:	d208      	bcs.n	8002cc0 <_sungetc_r+0x60>
 8002cae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002cb2:	42a9      	cmp	r1, r5
 8002cb4:	d104      	bne.n	8002cc0 <_sungetc_r+0x60>
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	3201      	adds	r2, #1
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	6062      	str	r2, [r4, #4]
 8002cbe:	e7d5      	b.n	8002c6c <_sungetc_r+0xc>
 8002cc0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8002cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cca:	2303      	movs	r3, #3
 8002ccc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002cce:	4623      	mov	r3, r4
 8002cd0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e7dc      	b.n	8002c94 <_sungetc_r+0x34>

08002cda <__ssrefill_r>:
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	460c      	mov	r4, r1
 8002cde:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002ce0:	b169      	cbz	r1, 8002cfe <__ssrefill_r+0x24>
 8002ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ce6:	4299      	cmp	r1, r3
 8002ce8:	d001      	beq.n	8002cee <__ssrefill_r+0x14>
 8002cea:	f7ff fd6b 	bl	80027c4 <_free_r>
 8002cee:	2000      	movs	r0, #0
 8002cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cf2:	6360      	str	r0, [r4, #52]	@ 0x34
 8002cf4:	6063      	str	r3, [r4, #4]
 8002cf6:	b113      	cbz	r3, 8002cfe <__ssrefill_r+0x24>
 8002cf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	6923      	ldr	r3, [r4, #16]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	6063      	str	r3, [r4, #4]
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	f043 0320 	orr.w	r3, r3, #32
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	e7f3      	b.n	8002cfc <__ssrefill_r+0x22>

08002d14 <__ssvfiscanf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	460c      	mov	r4, r1
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4606      	mov	r6, r0
 8002d1e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8002d22:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8002d26:	49ab      	ldr	r1, [pc, #684]	@ (8002fd4 <__ssvfiscanf_r+0x2c0>)
 8002d28:	f10d 0804 	add.w	r8, sp, #4
 8002d2c:	91a0      	str	r1, [sp, #640]	@ 0x280
 8002d2e:	49aa      	ldr	r1, [pc, #680]	@ (8002fd8 <__ssvfiscanf_r+0x2c4>)
 8002d30:	4faa      	ldr	r7, [pc, #680]	@ (8002fdc <__ssvfiscanf_r+0x2c8>)
 8002d32:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8002d36:	91a1      	str	r1, [sp, #644]	@ 0x284
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f892 9000 	ldrb.w	r9, [r2]
 8002d3e:	f1b9 0f00 	cmp.w	r9, #0
 8002d42:	f000 8159 	beq.w	8002ff8 <__ssvfiscanf_r+0x2e4>
 8002d46:	f817 3009 	ldrb.w	r3, [r7, r9]
 8002d4a:	1c55      	adds	r5, r2, #1
 8002d4c:	f013 0308 	ands.w	r3, r3, #8
 8002d50:	d019      	beq.n	8002d86 <__ssvfiscanf_r+0x72>
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dd0f      	ble.n	8002d78 <__ssvfiscanf_r+0x64>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	5cba      	ldrb	r2, [r7, r2]
 8002d5e:	0712      	lsls	r2, r2, #28
 8002d60:	d401      	bmi.n	8002d66 <__ssvfiscanf_r+0x52>
 8002d62:	462a      	mov	r2, r5
 8002d64:	e7e9      	b.n	8002d3a <__ssvfiscanf_r+0x26>
 8002d66:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002d68:	3301      	adds	r3, #1
 8002d6a:	3201      	adds	r2, #1
 8002d6c:	9245      	str	r2, [sp, #276]	@ 0x114
 8002d6e:	6862      	ldr	r2, [r4, #4]
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	3a01      	subs	r2, #1
 8002d74:	6062      	str	r2, [r4, #4]
 8002d76:	e7ec      	b.n	8002d52 <__ssvfiscanf_r+0x3e>
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002d7e:	4798      	blx	r3
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d0e9      	beq.n	8002d58 <__ssvfiscanf_r+0x44>
 8002d84:	e7ed      	b.n	8002d62 <__ssvfiscanf_r+0x4e>
 8002d86:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8002d8a:	f040 8086 	bne.w	8002e9a <__ssvfiscanf_r+0x186>
 8002d8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8002d90:	9343      	str	r3, [sp, #268]	@ 0x10c
 8002d92:	7853      	ldrb	r3, [r2, #1]
 8002d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d96:	bf04      	itt	eq
 8002d98:	2310      	moveq	r3, #16
 8002d9a:	1c95      	addeq	r5, r2, #2
 8002d9c:	f04f 020a 	mov.w	r2, #10
 8002da0:	bf08      	it	eq
 8002da2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002da4:	46aa      	mov	sl, r5
 8002da6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002daa:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d91e      	bls.n	8002df0 <__ssvfiscanf_r+0xdc>
 8002db2:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8002fe0 <__ssvfiscanf_r+0x2cc>
 8002db6:	2203      	movs	r2, #3
 8002db8:	4658      	mov	r0, fp
 8002dba:	f000 fc97 	bl	80036ec <memchr>
 8002dbe:	b138      	cbz	r0, 8002dd0 <__ssvfiscanf_r+0xbc>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4655      	mov	r5, sl
 8002dc4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002dc6:	eba0 000b 	sub.w	r0, r0, fp
 8002dca:	4083      	lsls	r3, r0
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	9341      	str	r3, [sp, #260]	@ 0x104
 8002dd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dd4:	2b78      	cmp	r3, #120	@ 0x78
 8002dd6:	d806      	bhi.n	8002de6 <__ssvfiscanf_r+0xd2>
 8002dd8:	2b57      	cmp	r3, #87	@ 0x57
 8002dda:	d810      	bhi.n	8002dfe <__ssvfiscanf_r+0xea>
 8002ddc:	2b25      	cmp	r3, #37	@ 0x25
 8002dde:	d05c      	beq.n	8002e9a <__ssvfiscanf_r+0x186>
 8002de0:	d856      	bhi.n	8002e90 <__ssvfiscanf_r+0x17c>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d074      	beq.n	8002ed0 <__ssvfiscanf_r+0x1bc>
 8002de6:	2303      	movs	r3, #3
 8002de8:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002dea:	230a      	movs	r3, #10
 8002dec:	9342      	str	r3, [sp, #264]	@ 0x108
 8002dee:	e087      	b.n	8002f00 <__ssvfiscanf_r+0x1ec>
 8002df0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8002df2:	4655      	mov	r5, sl
 8002df4:	fb02 1103 	mla	r1, r2, r3, r1
 8002df8:	3930      	subs	r1, #48	@ 0x30
 8002dfa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002dfc:	e7d2      	b.n	8002da4 <__ssvfiscanf_r+0x90>
 8002dfe:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8002e02:	2a20      	cmp	r2, #32
 8002e04:	d8ef      	bhi.n	8002de6 <__ssvfiscanf_r+0xd2>
 8002e06:	a101      	add	r1, pc, #4	@ (adr r1, 8002e0c <__ssvfiscanf_r+0xf8>)
 8002e08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002e0c:	08002edf 	.word	0x08002edf
 8002e10:	08002de7 	.word	0x08002de7
 8002e14:	08002de7 	.word	0x08002de7
 8002e18:	08002f39 	.word	0x08002f39
 8002e1c:	08002de7 	.word	0x08002de7
 8002e20:	08002de7 	.word	0x08002de7
 8002e24:	08002de7 	.word	0x08002de7
 8002e28:	08002de7 	.word	0x08002de7
 8002e2c:	08002de7 	.word	0x08002de7
 8002e30:	08002de7 	.word	0x08002de7
 8002e34:	08002de7 	.word	0x08002de7
 8002e38:	08002f4f 	.word	0x08002f4f
 8002e3c:	08002f35 	.word	0x08002f35
 8002e40:	08002e97 	.word	0x08002e97
 8002e44:	08002e97 	.word	0x08002e97
 8002e48:	08002e97 	.word	0x08002e97
 8002e4c:	08002de7 	.word	0x08002de7
 8002e50:	08002ef1 	.word	0x08002ef1
 8002e54:	08002de7 	.word	0x08002de7
 8002e58:	08002de7 	.word	0x08002de7
 8002e5c:	08002de7 	.word	0x08002de7
 8002e60:	08002de7 	.word	0x08002de7
 8002e64:	08002f5f 	.word	0x08002f5f
 8002e68:	08002ef9 	.word	0x08002ef9
 8002e6c:	08002ed7 	.word	0x08002ed7
 8002e70:	08002de7 	.word	0x08002de7
 8002e74:	08002de7 	.word	0x08002de7
 8002e78:	08002f5b 	.word	0x08002f5b
 8002e7c:	08002de7 	.word	0x08002de7
 8002e80:	08002f35 	.word	0x08002f35
 8002e84:	08002de7 	.word	0x08002de7
 8002e88:	08002de7 	.word	0x08002de7
 8002e8c:	08002edf 	.word	0x08002edf
 8002e90:	3b45      	subs	r3, #69	@ 0x45
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d8a7      	bhi.n	8002de6 <__ssvfiscanf_r+0xd2>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e031      	b.n	8002efe <__ssvfiscanf_r+0x1ea>
 8002e9a:	6863      	ldr	r3, [r4, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dd0d      	ble.n	8002ebc <__ssvfiscanf_r+0x1a8>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	454a      	cmp	r2, r9
 8002ea6:	f040 80a7 	bne.w	8002ff8 <__ssvfiscanf_r+0x2e4>
 8002eaa:	3301      	adds	r3, #1
 8002eac:	6862      	ldr	r2, [r4, #4]
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	6062      	str	r2, [r4, #4]
 8002eb8:	9345      	str	r3, [sp, #276]	@ 0x114
 8002eba:	e752      	b.n	8002d62 <__ssvfiscanf_r+0x4e>
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002ec2:	4798      	blx	r3
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d0eb      	beq.n	8002ea0 <__ssvfiscanf_r+0x18c>
 8002ec8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	f040 808c 	bne.w	8002fe8 <__ssvfiscanf_r+0x2d4>
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ed4:	e08c      	b.n	8002ff0 <__ssvfiscanf_r+0x2dc>
 8002ed6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	9241      	str	r2, [sp, #260]	@ 0x104
 8002ede:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee4:	9241      	str	r2, [sp, #260]	@ 0x104
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	2b6e      	cmp	r3, #110	@ 0x6e
 8002eea:	9242      	str	r2, [sp, #264]	@ 0x108
 8002eec:	d902      	bls.n	8002ef4 <__ssvfiscanf_r+0x1e0>
 8002eee:	e005      	b.n	8002efc <__ssvfiscanf_r+0x1e8>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9342      	str	r3, [sp, #264]	@ 0x108
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e002      	b.n	8002efe <__ssvfiscanf_r+0x1ea>
 8002ef8:	2308      	movs	r3, #8
 8002efa:	9342      	str	r3, [sp, #264]	@ 0x108
 8002efc:	2304      	movs	r3, #4
 8002efe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002f00:	6863      	ldr	r3, [r4, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	dd39      	ble.n	8002f7a <__ssvfiscanf_r+0x266>
 8002f06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002f08:	0659      	lsls	r1, r3, #25
 8002f0a:	d404      	bmi.n	8002f16 <__ssvfiscanf_r+0x202>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	5cba      	ldrb	r2, [r7, r2]
 8002f12:	0712      	lsls	r2, r2, #28
 8002f14:	d438      	bmi.n	8002f88 <__ssvfiscanf_r+0x274>
 8002f16:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	dc47      	bgt.n	8002fac <__ssvfiscanf_r+0x298>
 8002f1c:	466b      	mov	r3, sp
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4630      	mov	r0, r6
 8002f22:	a941      	add	r1, sp, #260	@ 0x104
 8002f24:	f000 f9fa 	bl	800331c <_scanf_chars>
 8002f28:	2801      	cmp	r0, #1
 8002f2a:	d065      	beq.n	8002ff8 <__ssvfiscanf_r+0x2e4>
 8002f2c:	2802      	cmp	r0, #2
 8002f2e:	f47f af18 	bne.w	8002d62 <__ssvfiscanf_r+0x4e>
 8002f32:	e7c9      	b.n	8002ec8 <__ssvfiscanf_r+0x1b4>
 8002f34:	220a      	movs	r2, #10
 8002f36:	e7d7      	b.n	8002ee8 <__ssvfiscanf_r+0x1d4>
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	f000 fb3a 	bl	80035b4 <__sccl>
 8002f40:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002f42:	4605      	mov	r5, r0
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	9341      	str	r3, [sp, #260]	@ 0x104
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e7d7      	b.n	8002efe <__ssvfiscanf_r+0x1ea>
 8002f4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f54:	9341      	str	r3, [sp, #260]	@ 0x104
 8002f56:	2300      	movs	r3, #0
 8002f58:	e7d1      	b.n	8002efe <__ssvfiscanf_r+0x1ea>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e7cf      	b.n	8002efe <__ssvfiscanf_r+0x1ea>
 8002f5e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002f60:	06c3      	lsls	r3, r0, #27
 8002f62:	f53f aefe 	bmi.w	8002d62 <__ssvfiscanf_r+0x4e>
 8002f66:	9b00      	ldr	r3, [sp, #0]
 8002f68:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002f6a:	1d19      	adds	r1, r3, #4
 8002f6c:	9100      	str	r1, [sp, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	07c0      	lsls	r0, r0, #31
 8002f72:	bf4c      	ite	mi
 8002f74:	801a      	strhmi	r2, [r3, #0]
 8002f76:	601a      	strpl	r2, [r3, #0]
 8002f78:	e6f3      	b.n	8002d62 <__ssvfiscanf_r+0x4e>
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002f80:	4798      	blx	r3
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d0bf      	beq.n	8002f06 <__ssvfiscanf_r+0x1f2>
 8002f86:	e79f      	b.n	8002ec8 <__ssvfiscanf_r+0x1b4>
 8002f88:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002f8a:	3201      	adds	r2, #1
 8002f8c:	9245      	str	r2, [sp, #276]	@ 0x114
 8002f8e:	6862      	ldr	r2, [r4, #4]
 8002f90:	3a01      	subs	r2, #1
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	6062      	str	r2, [r4, #4]
 8002f96:	dd02      	ble.n	8002f9e <__ssvfiscanf_r+0x28a>
 8002f98:	3301      	adds	r3, #1
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	e7b6      	b.n	8002f0c <__ssvfiscanf_r+0x1f8>
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002fa4:	4798      	blx	r3
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d0b0      	beq.n	8002f0c <__ssvfiscanf_r+0x1f8>
 8002faa:	e78d      	b.n	8002ec8 <__ssvfiscanf_r+0x1b4>
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	dc06      	bgt.n	8002fbe <__ssvfiscanf_r+0x2aa>
 8002fb0:	466b      	mov	r3, sp
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	a941      	add	r1, sp, #260	@ 0x104
 8002fb8:	f000 fa0a 	bl	80033d0 <_scanf_i>
 8002fbc:	e7b4      	b.n	8002f28 <__ssvfiscanf_r+0x214>
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <__ssvfiscanf_r+0x2d0>)
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f43f aece 	beq.w	8002d62 <__ssvfiscanf_r+0x4e>
 8002fc6:	466b      	mov	r3, sp
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4630      	mov	r0, r6
 8002fcc:	a941      	add	r1, sp, #260	@ 0x104
 8002fce:	f3af 8000 	nop.w
 8002fd2:	e7a9      	b.n	8002f28 <__ssvfiscanf_r+0x214>
 8002fd4:	08002c61 	.word	0x08002c61
 8002fd8:	08002cdb 	.word	0x08002cdb
 8002fdc:	08003a9d 	.word	0x08003a9d
 8002fe0:	08003a54 	.word	0x08003a54
 8002fe4:	00000000 	.word	0x00000000
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	065b      	lsls	r3, r3, #25
 8002fec:	f53f af70 	bmi.w	8002ed0 <__ssvfiscanf_r+0x1bc>
 8002ff0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002ffa:	e7f9      	b.n	8002ff0 <__ssvfiscanf_r+0x2dc>

08002ffc <_printf_common>:
 8002ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003000:	4616      	mov	r6, r2
 8003002:	4698      	mov	r8, r3
 8003004:	688a      	ldr	r2, [r1, #8]
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	4607      	mov	r7, r0
 800300a:	4293      	cmp	r3, r2
 800300c:	bfb8      	it	lt
 800300e:	4613      	movlt	r3, r2
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003016:	460c      	mov	r4, r1
 8003018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800301c:	b10a      	cbz	r2, 8003022 <_printf_common+0x26>
 800301e:	3301      	adds	r3, #1
 8003020:	6033      	str	r3, [r6, #0]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0699      	lsls	r1, r3, #26
 8003026:	bf42      	ittt	mi
 8003028:	6833      	ldrmi	r3, [r6, #0]
 800302a:	3302      	addmi	r3, #2
 800302c:	6033      	strmi	r3, [r6, #0]
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	f015 0506 	ands.w	r5, r5, #6
 8003034:	d106      	bne.n	8003044 <_printf_common+0x48>
 8003036:	f104 0a19 	add.w	sl, r4, #25
 800303a:	68e3      	ldr	r3, [r4, #12]
 800303c:	6832      	ldr	r2, [r6, #0]
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	42ab      	cmp	r3, r5
 8003042:	dc2b      	bgt.n	800309c <_printf_common+0xa0>
 8003044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	3b00      	subs	r3, #0
 800304c:	bf18      	it	ne
 800304e:	2301      	movne	r3, #1
 8003050:	0692      	lsls	r2, r2, #26
 8003052:	d430      	bmi.n	80030b6 <_printf_common+0xba>
 8003054:	4641      	mov	r1, r8
 8003056:	4638      	mov	r0, r7
 8003058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800305c:	47c8      	blx	r9
 800305e:	3001      	adds	r0, #1
 8003060:	d023      	beq.n	80030aa <_printf_common+0xae>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	f003 0306 	and.w	r3, r3, #6
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf14      	ite	ne
 800306e:	2500      	movne	r5, #0
 8003070:	6833      	ldreq	r3, [r6, #0]
 8003072:	f04f 0600 	mov.w	r6, #0
 8003076:	bf08      	it	eq
 8003078:	68e5      	ldreq	r5, [r4, #12]
 800307a:	f104 041a 	add.w	r4, r4, #26
 800307e:	bf08      	it	eq
 8003080:	1aed      	subeq	r5, r5, r3
 8003082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003086:	bf08      	it	eq
 8003088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800308c:	4293      	cmp	r3, r2
 800308e:	bfc4      	itt	gt
 8003090:	1a9b      	subgt	r3, r3, r2
 8003092:	18ed      	addgt	r5, r5, r3
 8003094:	42b5      	cmp	r5, r6
 8003096:	d11a      	bne.n	80030ce <_printf_common+0xd2>
 8003098:	2000      	movs	r0, #0
 800309a:	e008      	b.n	80030ae <_printf_common+0xb2>
 800309c:	2301      	movs	r3, #1
 800309e:	4652      	mov	r2, sl
 80030a0:	4641      	mov	r1, r8
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c8      	blx	r9
 80030a6:	3001      	adds	r0, #1
 80030a8:	d103      	bne.n	80030b2 <_printf_common+0xb6>
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b2:	3501      	adds	r5, #1
 80030b4:	e7c1      	b.n	800303a <_printf_common+0x3e>
 80030b6:	2030      	movs	r0, #48	@ 0x30
 80030b8:	18e1      	adds	r1, r4, r3
 80030ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030c4:	4422      	add	r2, r4
 80030c6:	3302      	adds	r3, #2
 80030c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030cc:	e7c2      	b.n	8003054 <_printf_common+0x58>
 80030ce:	2301      	movs	r3, #1
 80030d0:	4622      	mov	r2, r4
 80030d2:	4641      	mov	r1, r8
 80030d4:	4638      	mov	r0, r7
 80030d6:	47c8      	blx	r9
 80030d8:	3001      	adds	r0, #1
 80030da:	d0e6      	beq.n	80030aa <_printf_common+0xae>
 80030dc:	3601      	adds	r6, #1
 80030de:	e7d9      	b.n	8003094 <_printf_common+0x98>

080030e0 <_printf_i>:
 80030e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	7e0f      	ldrb	r7, [r1, #24]
 80030e6:	4691      	mov	r9, r2
 80030e8:	2f78      	cmp	r7, #120	@ 0x78
 80030ea:	4680      	mov	r8, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	469a      	mov	sl, r3
 80030f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030f6:	d807      	bhi.n	8003108 <_printf_i+0x28>
 80030f8:	2f62      	cmp	r7, #98	@ 0x62
 80030fa:	d80a      	bhi.n	8003112 <_printf_i+0x32>
 80030fc:	2f00      	cmp	r7, #0
 80030fe:	f000 80d1 	beq.w	80032a4 <_printf_i+0x1c4>
 8003102:	2f58      	cmp	r7, #88	@ 0x58
 8003104:	f000 80b8 	beq.w	8003278 <_printf_i+0x198>
 8003108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800310c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003110:	e03a      	b.n	8003188 <_printf_i+0xa8>
 8003112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003116:	2b15      	cmp	r3, #21
 8003118:	d8f6      	bhi.n	8003108 <_printf_i+0x28>
 800311a:	a101      	add	r1, pc, #4	@ (adr r1, 8003120 <_printf_i+0x40>)
 800311c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003120:	08003179 	.word	0x08003179
 8003124:	0800318d 	.word	0x0800318d
 8003128:	08003109 	.word	0x08003109
 800312c:	08003109 	.word	0x08003109
 8003130:	08003109 	.word	0x08003109
 8003134:	08003109 	.word	0x08003109
 8003138:	0800318d 	.word	0x0800318d
 800313c:	08003109 	.word	0x08003109
 8003140:	08003109 	.word	0x08003109
 8003144:	08003109 	.word	0x08003109
 8003148:	08003109 	.word	0x08003109
 800314c:	0800328b 	.word	0x0800328b
 8003150:	080031b7 	.word	0x080031b7
 8003154:	08003245 	.word	0x08003245
 8003158:	08003109 	.word	0x08003109
 800315c:	08003109 	.word	0x08003109
 8003160:	080032ad 	.word	0x080032ad
 8003164:	08003109 	.word	0x08003109
 8003168:	080031b7 	.word	0x080031b7
 800316c:	08003109 	.word	0x08003109
 8003170:	08003109 	.word	0x08003109
 8003174:	0800324d 	.word	0x0800324d
 8003178:	6833      	ldr	r3, [r6, #0]
 800317a:	1d1a      	adds	r2, r3, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6032      	str	r2, [r6, #0]
 8003180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003188:	2301      	movs	r3, #1
 800318a:	e09c      	b.n	80032c6 <_printf_i+0x1e6>
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	1d19      	adds	r1, r3, #4
 8003192:	6031      	str	r1, [r6, #0]
 8003194:	0606      	lsls	r6, r0, #24
 8003196:	d501      	bpl.n	800319c <_printf_i+0xbc>
 8003198:	681d      	ldr	r5, [r3, #0]
 800319a:	e003      	b.n	80031a4 <_printf_i+0xc4>
 800319c:	0645      	lsls	r5, r0, #25
 800319e:	d5fb      	bpl.n	8003198 <_printf_i+0xb8>
 80031a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	da03      	bge.n	80031b0 <_printf_i+0xd0>
 80031a8:	232d      	movs	r3, #45	@ 0x2d
 80031aa:	426d      	negs	r5, r5
 80031ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031b0:	230a      	movs	r3, #10
 80031b2:	4858      	ldr	r0, [pc, #352]	@ (8003314 <_printf_i+0x234>)
 80031b4:	e011      	b.n	80031da <_printf_i+0xfa>
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	0608      	lsls	r0, r1, #24
 80031bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80031c0:	d402      	bmi.n	80031c8 <_printf_i+0xe8>
 80031c2:	0649      	lsls	r1, r1, #25
 80031c4:	bf48      	it	mi
 80031c6:	b2ad      	uxthmi	r5, r5
 80031c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	bf14      	ite	ne
 80031ce:	230a      	movne	r3, #10
 80031d0:	2308      	moveq	r3, #8
 80031d2:	4850      	ldr	r0, [pc, #320]	@ (8003314 <_printf_i+0x234>)
 80031d4:	2100      	movs	r1, #0
 80031d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031da:	6866      	ldr	r6, [r4, #4]
 80031dc:	2e00      	cmp	r6, #0
 80031de:	60a6      	str	r6, [r4, #8]
 80031e0:	db05      	blt.n	80031ee <_printf_i+0x10e>
 80031e2:	6821      	ldr	r1, [r4, #0]
 80031e4:	432e      	orrs	r6, r5
 80031e6:	f021 0104 	bic.w	r1, r1, #4
 80031ea:	6021      	str	r1, [r4, #0]
 80031ec:	d04b      	beq.n	8003286 <_printf_i+0x1a6>
 80031ee:	4616      	mov	r6, r2
 80031f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80031f4:	fb03 5711 	mls	r7, r3, r1, r5
 80031f8:	5dc7      	ldrb	r7, [r0, r7]
 80031fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031fe:	462f      	mov	r7, r5
 8003200:	42bb      	cmp	r3, r7
 8003202:	460d      	mov	r5, r1
 8003204:	d9f4      	bls.n	80031f0 <_printf_i+0x110>
 8003206:	2b08      	cmp	r3, #8
 8003208:	d10b      	bne.n	8003222 <_printf_i+0x142>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	07df      	lsls	r7, r3, #31
 800320e:	d508      	bpl.n	8003222 <_printf_i+0x142>
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	6861      	ldr	r1, [r4, #4]
 8003214:	4299      	cmp	r1, r3
 8003216:	bfde      	ittt	le
 8003218:	2330      	movle	r3, #48	@ 0x30
 800321a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800321e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003222:	1b92      	subs	r2, r2, r6
 8003224:	6122      	str	r2, [r4, #16]
 8003226:	464b      	mov	r3, r9
 8003228:	4621      	mov	r1, r4
 800322a:	4640      	mov	r0, r8
 800322c:	f8cd a000 	str.w	sl, [sp]
 8003230:	aa03      	add	r2, sp, #12
 8003232:	f7ff fee3 	bl	8002ffc <_printf_common>
 8003236:	3001      	adds	r0, #1
 8003238:	d14a      	bne.n	80032d0 <_printf_i+0x1f0>
 800323a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800323e:	b004      	add	sp, #16
 8003240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	6023      	str	r3, [r4, #0]
 800324c:	2778      	movs	r7, #120	@ 0x78
 800324e:	4832      	ldr	r0, [pc, #200]	@ (8003318 <_printf_i+0x238>)
 8003250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	6831      	ldr	r1, [r6, #0]
 8003258:	061f      	lsls	r7, r3, #24
 800325a:	f851 5b04 	ldr.w	r5, [r1], #4
 800325e:	d402      	bmi.n	8003266 <_printf_i+0x186>
 8003260:	065f      	lsls	r7, r3, #25
 8003262:	bf48      	it	mi
 8003264:	b2ad      	uxthmi	r5, r5
 8003266:	6031      	str	r1, [r6, #0]
 8003268:	07d9      	lsls	r1, r3, #31
 800326a:	bf44      	itt	mi
 800326c:	f043 0320 	orrmi.w	r3, r3, #32
 8003270:	6023      	strmi	r3, [r4, #0]
 8003272:	b11d      	cbz	r5, 800327c <_printf_i+0x19c>
 8003274:	2310      	movs	r3, #16
 8003276:	e7ad      	b.n	80031d4 <_printf_i+0xf4>
 8003278:	4826      	ldr	r0, [pc, #152]	@ (8003314 <_printf_i+0x234>)
 800327a:	e7e9      	b.n	8003250 <_printf_i+0x170>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f023 0320 	bic.w	r3, r3, #32
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	e7f6      	b.n	8003274 <_printf_i+0x194>
 8003286:	4616      	mov	r6, r2
 8003288:	e7bd      	b.n	8003206 <_printf_i+0x126>
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	6825      	ldr	r5, [r4, #0]
 800328e:	1d18      	adds	r0, r3, #4
 8003290:	6961      	ldr	r1, [r4, #20]
 8003292:	6030      	str	r0, [r6, #0]
 8003294:	062e      	lsls	r6, r5, #24
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	d501      	bpl.n	800329e <_printf_i+0x1be>
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	e002      	b.n	80032a4 <_printf_i+0x1c4>
 800329e:	0668      	lsls	r0, r5, #25
 80032a0:	d5fb      	bpl.n	800329a <_printf_i+0x1ba>
 80032a2:	8019      	strh	r1, [r3, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	4616      	mov	r6, r2
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	e7bc      	b.n	8003226 <_printf_i+0x146>
 80032ac:	6833      	ldr	r3, [r6, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	1d1a      	adds	r2, r3, #4
 80032b2:	6032      	str	r2, [r6, #0]
 80032b4:	681e      	ldr	r6, [r3, #0]
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 fa17 	bl	80036ec <memchr>
 80032be:	b108      	cbz	r0, 80032c4 <_printf_i+0x1e4>
 80032c0:	1b80      	subs	r0, r0, r6
 80032c2:	6060      	str	r0, [r4, #4]
 80032c4:	6863      	ldr	r3, [r4, #4]
 80032c6:	6123      	str	r3, [r4, #16]
 80032c8:	2300      	movs	r3, #0
 80032ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ce:	e7aa      	b.n	8003226 <_printf_i+0x146>
 80032d0:	4632      	mov	r2, r6
 80032d2:	4649      	mov	r1, r9
 80032d4:	4640      	mov	r0, r8
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	47d0      	blx	sl
 80032da:	3001      	adds	r0, #1
 80032dc:	d0ad      	beq.n	800323a <_printf_i+0x15a>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	079b      	lsls	r3, r3, #30
 80032e2:	d413      	bmi.n	800330c <_printf_i+0x22c>
 80032e4:	68e0      	ldr	r0, [r4, #12]
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	4298      	cmp	r0, r3
 80032ea:	bfb8      	it	lt
 80032ec:	4618      	movlt	r0, r3
 80032ee:	e7a6      	b.n	800323e <_printf_i+0x15e>
 80032f0:	2301      	movs	r3, #1
 80032f2:	4632      	mov	r2, r6
 80032f4:	4649      	mov	r1, r9
 80032f6:	4640      	mov	r0, r8
 80032f8:	47d0      	blx	sl
 80032fa:	3001      	adds	r0, #1
 80032fc:	d09d      	beq.n	800323a <_printf_i+0x15a>
 80032fe:	3501      	adds	r5, #1
 8003300:	68e3      	ldr	r3, [r4, #12]
 8003302:	9903      	ldr	r1, [sp, #12]
 8003304:	1a5b      	subs	r3, r3, r1
 8003306:	42ab      	cmp	r3, r5
 8003308:	dcf2      	bgt.n	80032f0 <_printf_i+0x210>
 800330a:	e7eb      	b.n	80032e4 <_printf_i+0x204>
 800330c:	2500      	movs	r5, #0
 800330e:	f104 0619 	add.w	r6, r4, #25
 8003312:	e7f5      	b.n	8003300 <_printf_i+0x220>
 8003314:	08003a5f 	.word	0x08003a5f
 8003318:	08003a70 	.word	0x08003a70

0800331c <_scanf_chars>:
 800331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003320:	4615      	mov	r5, r2
 8003322:	688a      	ldr	r2, [r1, #8]
 8003324:	4680      	mov	r8, r0
 8003326:	460c      	mov	r4, r1
 8003328:	b932      	cbnz	r2, 8003338 <_scanf_chars+0x1c>
 800332a:	698a      	ldr	r2, [r1, #24]
 800332c:	2a00      	cmp	r2, #0
 800332e:	bf14      	ite	ne
 8003330:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8003334:	2201      	moveq	r2, #1
 8003336:	608a      	str	r2, [r1, #8]
 8003338:	2700      	movs	r7, #0
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80033cc <_scanf_chars+0xb0>
 8003340:	06d1      	lsls	r1, r2, #27
 8003342:	bf5f      	itttt	pl
 8003344:	681a      	ldrpl	r2, [r3, #0]
 8003346:	1d11      	addpl	r1, r2, #4
 8003348:	6019      	strpl	r1, [r3, #0]
 800334a:	6816      	ldrpl	r6, [r2, #0]
 800334c:	69a0      	ldr	r0, [r4, #24]
 800334e:	b188      	cbz	r0, 8003374 <_scanf_chars+0x58>
 8003350:	2801      	cmp	r0, #1
 8003352:	d107      	bne.n	8003364 <_scanf_chars+0x48>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	6963      	ldr	r3, [r4, #20]
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	b953      	cbnz	r3, 8003374 <_scanf_chars+0x58>
 800335e:	2f00      	cmp	r7, #0
 8003360:	d031      	beq.n	80033c6 <_scanf_chars+0xaa>
 8003362:	e022      	b.n	80033aa <_scanf_chars+0x8e>
 8003364:	2802      	cmp	r0, #2
 8003366:	d120      	bne.n	80033aa <_scanf_chars+0x8e>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003370:	071b      	lsls	r3, r3, #28
 8003372:	d41a      	bmi.n	80033aa <_scanf_chars+0x8e>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	3701      	adds	r7, #1
 8003378:	06da      	lsls	r2, r3, #27
 800337a:	bf5e      	ittt	pl
 800337c:	682b      	ldrpl	r3, [r5, #0]
 800337e:	781b      	ldrbpl	r3, [r3, #0]
 8003380:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003384:	682a      	ldr	r2, [r5, #0]
 8003386:	686b      	ldr	r3, [r5, #4]
 8003388:	3201      	adds	r2, #1
 800338a:	602a      	str	r2, [r5, #0]
 800338c:	68a2      	ldr	r2, [r4, #8]
 800338e:	3b01      	subs	r3, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	606b      	str	r3, [r5, #4]
 8003394:	60a2      	str	r2, [r4, #8]
 8003396:	b142      	cbz	r2, 80033aa <_scanf_chars+0x8e>
 8003398:	2b00      	cmp	r3, #0
 800339a:	dcd7      	bgt.n	800334c <_scanf_chars+0x30>
 800339c:	4629      	mov	r1, r5
 800339e:	4640      	mov	r0, r8
 80033a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80033a4:	4798      	blx	r3
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0d0      	beq.n	800334c <_scanf_chars+0x30>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	f013 0310 	ands.w	r3, r3, #16
 80033b0:	d105      	bne.n	80033be <_scanf_chars+0xa2>
 80033b2:	68e2      	ldr	r2, [r4, #12]
 80033b4:	3201      	adds	r2, #1
 80033b6:	60e2      	str	r2, [r4, #12]
 80033b8:	69a2      	ldr	r2, [r4, #24]
 80033ba:	b102      	cbz	r2, 80033be <_scanf_chars+0xa2>
 80033bc:	7033      	strb	r3, [r6, #0]
 80033be:	2000      	movs	r0, #0
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	443b      	add	r3, r7
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ca:	bf00      	nop
 80033cc:	08003a9d 	.word	0x08003a9d

080033d0 <_scanf_i>:
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	460c      	mov	r4, r1
 80033d6:	4698      	mov	r8, r3
 80033d8:	4b72      	ldr	r3, [pc, #456]	@ (80035a4 <_scanf_i+0x1d4>)
 80033da:	b087      	sub	sp, #28
 80033dc:	4682      	mov	sl, r0
 80033de:	4616      	mov	r6, r2
 80033e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033e4:	ab03      	add	r3, sp, #12
 80033e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033ea:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <_scanf_i+0x1d8>)
 80033ec:	69a1      	ldr	r1, [r4, #24]
 80033ee:	4a6f      	ldr	r2, [pc, #444]	@ (80035ac <_scanf_i+0x1dc>)
 80033f0:	4627      	mov	r7, r4
 80033f2:	2903      	cmp	r1, #3
 80033f4:	bf08      	it	eq
 80033f6:	461a      	moveq	r2, r3
 80033f8:	68a3      	ldr	r3, [r4, #8]
 80033fa:	9201      	str	r2, [sp, #4]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003402:	bf81      	itttt	hi
 8003404:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003408:	eb03 0905 	addhi.w	r9, r3, r5
 800340c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003410:	60a3      	strhi	r3, [r4, #8]
 8003412:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003416:	bf98      	it	ls
 8003418:	f04f 0900 	movls.w	r9, #0
 800341c:	463d      	mov	r5, r7
 800341e:	f04f 0b00 	mov.w	fp, #0
 8003422:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	6831      	ldr	r1, [r6, #0]
 800342a:	ab03      	add	r3, sp, #12
 800342c:	2202      	movs	r2, #2
 800342e:	7809      	ldrb	r1, [r1, #0]
 8003430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003434:	f000 f95a 	bl	80036ec <memchr>
 8003438:	b328      	cbz	r0, 8003486 <_scanf_i+0xb6>
 800343a:	f1bb 0f01 	cmp.w	fp, #1
 800343e:	d159      	bne.n	80034f4 <_scanf_i+0x124>
 8003440:	6862      	ldr	r2, [r4, #4]
 8003442:	b92a      	cbnz	r2, 8003450 <_scanf_i+0x80>
 8003444:	2108      	movs	r1, #8
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	6061      	str	r1, [r4, #4]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003456:	6022      	str	r2, [r4, #0]
 8003458:	68a2      	ldr	r2, [r4, #8]
 800345a:	1e51      	subs	r1, r2, #1
 800345c:	60a1      	str	r1, [r4, #8]
 800345e:	b192      	cbz	r2, 8003486 <_scanf_i+0xb6>
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	1c51      	adds	r1, r2, #1
 8003464:	6031      	str	r1, [r6, #0]
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	f805 2b01 	strb.w	r2, [r5], #1
 800346c:	6872      	ldr	r2, [r6, #4]
 800346e:	3a01      	subs	r2, #1
 8003470:	2a00      	cmp	r2, #0
 8003472:	6072      	str	r2, [r6, #4]
 8003474:	dc07      	bgt.n	8003486 <_scanf_i+0xb6>
 8003476:	4631      	mov	r1, r6
 8003478:	4650      	mov	r0, sl
 800347a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800347e:	4790      	blx	r2
 8003480:	2800      	cmp	r0, #0
 8003482:	f040 8085 	bne.w	8003590 <_scanf_i+0x1c0>
 8003486:	f10b 0b01 	add.w	fp, fp, #1
 800348a:	f1bb 0f03 	cmp.w	fp, #3
 800348e:	d1cb      	bne.n	8003428 <_scanf_i+0x58>
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	b90b      	cbnz	r3, 8003498 <_scanf_i+0xc8>
 8003494:	230a      	movs	r3, #10
 8003496:	6063      	str	r3, [r4, #4]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	4945      	ldr	r1, [pc, #276]	@ (80035b0 <_scanf_i+0x1e0>)
 800349c:	6960      	ldr	r0, [r4, #20]
 800349e:	1ac9      	subs	r1, r1, r3
 80034a0:	f000 f888 	bl	80035b4 <__sccl>
 80034a4:	f04f 0b00 	mov.w	fp, #0
 80034a8:	68a3      	ldr	r3, [r4, #8]
 80034aa:	6822      	ldr	r2, [r4, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03d      	beq.n	800352c <_scanf_i+0x15c>
 80034b0:	6831      	ldr	r1, [r6, #0]
 80034b2:	6960      	ldr	r0, [r4, #20]
 80034b4:	f891 c000 	ldrb.w	ip, [r1]
 80034b8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80034bc:	2800      	cmp	r0, #0
 80034be:	d035      	beq.n	800352c <_scanf_i+0x15c>
 80034c0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80034c4:	d124      	bne.n	8003510 <_scanf_i+0x140>
 80034c6:	0510      	lsls	r0, r2, #20
 80034c8:	d522      	bpl.n	8003510 <_scanf_i+0x140>
 80034ca:	f10b 0b01 	add.w	fp, fp, #1
 80034ce:	f1b9 0f00 	cmp.w	r9, #0
 80034d2:	d003      	beq.n	80034dc <_scanf_i+0x10c>
 80034d4:	3301      	adds	r3, #1
 80034d6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80034da:	60a3      	str	r3, [r4, #8]
 80034dc:	6873      	ldr	r3, [r6, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	6073      	str	r3, [r6, #4]
 80034e4:	dd1b      	ble.n	800351e <_scanf_i+0x14e>
 80034e6:	6833      	ldr	r3, [r6, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	6033      	str	r3, [r6, #0]
 80034ec:	68a3      	ldr	r3, [r4, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	e7d9      	b.n	80034a8 <_scanf_i+0xd8>
 80034f4:	f1bb 0f02 	cmp.w	fp, #2
 80034f8:	d1ae      	bne.n	8003458 <_scanf_i+0x88>
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003500:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003504:	d1c4      	bne.n	8003490 <_scanf_i+0xc0>
 8003506:	2110      	movs	r1, #16
 8003508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350c:	6061      	str	r1, [r4, #4]
 800350e:	e7a2      	b.n	8003456 <_scanf_i+0x86>
 8003510:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003514:	6022      	str	r2, [r4, #0]
 8003516:	780b      	ldrb	r3, [r1, #0]
 8003518:	f805 3b01 	strb.w	r3, [r5], #1
 800351c:	e7de      	b.n	80034dc <_scanf_i+0x10c>
 800351e:	4631      	mov	r1, r6
 8003520:	4650      	mov	r0, sl
 8003522:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003526:	4798      	blx	r3
 8003528:	2800      	cmp	r0, #0
 800352a:	d0df      	beq.n	80034ec <_scanf_i+0x11c>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	05d9      	lsls	r1, r3, #23
 8003530:	d50d      	bpl.n	800354e <_scanf_i+0x17e>
 8003532:	42bd      	cmp	r5, r7
 8003534:	d909      	bls.n	800354a <_scanf_i+0x17a>
 8003536:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800353a:	4632      	mov	r2, r6
 800353c:	4650      	mov	r0, sl
 800353e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003542:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8003546:	4798      	blx	r3
 8003548:	464d      	mov	r5, r9
 800354a:	42bd      	cmp	r5, r7
 800354c:	d028      	beq.n	80035a0 <_scanf_i+0x1d0>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	f012 0210 	ands.w	r2, r2, #16
 8003554:	d113      	bne.n	800357e <_scanf_i+0x1ae>
 8003556:	702a      	strb	r2, [r5, #0]
 8003558:	4639      	mov	r1, r7
 800355a:	6863      	ldr	r3, [r4, #4]
 800355c:	4650      	mov	r0, sl
 800355e:	9e01      	ldr	r6, [sp, #4]
 8003560:	47b0      	blx	r6
 8003562:	f8d8 3000 	ldr.w	r3, [r8]
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	f8c8 2000 	str.w	r2, [r8]
 800356e:	f011 0f20 	tst.w	r1, #32
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	d00f      	beq.n	8003596 <_scanf_i+0x1c6>
 8003576:	6018      	str	r0, [r3, #0]
 8003578:	68e3      	ldr	r3, [r4, #12]
 800357a:	3301      	adds	r3, #1
 800357c:	60e3      	str	r3, [r4, #12]
 800357e:	2000      	movs	r0, #0
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	1bed      	subs	r5, r5, r7
 8003584:	445d      	add	r5, fp
 8003586:	442b      	add	r3, r5
 8003588:	6123      	str	r3, [r4, #16]
 800358a:	b007      	add	sp, #28
 800358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003590:	f04f 0b00 	mov.w	fp, #0
 8003594:	e7ca      	b.n	800352c <_scanf_i+0x15c>
 8003596:	07ca      	lsls	r2, r1, #31
 8003598:	bf4c      	ite	mi
 800359a:	8018      	strhmi	r0, [r3, #0]
 800359c:	6018      	strpl	r0, [r3, #0]
 800359e:	e7eb      	b.n	8003578 <_scanf_i+0x1a8>
 80035a0:	2001      	movs	r0, #1
 80035a2:	e7f2      	b.n	800358a <_scanf_i+0x1ba>
 80035a4:	08003a18 	.word	0x08003a18
 80035a8:	08003875 	.word	0x08003875
 80035ac:	08003955 	.word	0x08003955
 80035b0:	08003a91 	.word	0x08003a91

080035b4 <__sccl>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	780b      	ldrb	r3, [r1, #0]
 80035b8:	4604      	mov	r4, r0
 80035ba:	2b5e      	cmp	r3, #94	@ 0x5e
 80035bc:	bf0b      	itete	eq
 80035be:	784b      	ldrbeq	r3, [r1, #1]
 80035c0:	1c4a      	addne	r2, r1, #1
 80035c2:	1c8a      	addeq	r2, r1, #2
 80035c4:	2100      	movne	r1, #0
 80035c6:	bf08      	it	eq
 80035c8:	2101      	moveq	r1, #1
 80035ca:	3801      	subs	r0, #1
 80035cc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80035d0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80035d4:	42a8      	cmp	r0, r5
 80035d6:	d1fb      	bne.n	80035d0 <__sccl+0x1c>
 80035d8:	b90b      	cbnz	r3, 80035de <__sccl+0x2a>
 80035da:	1e50      	subs	r0, r2, #1
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	f081 0101 	eor.w	r1, r1, #1
 80035e2:	4610      	mov	r0, r2
 80035e4:	54e1      	strb	r1, [r4, r3]
 80035e6:	4602      	mov	r2, r0
 80035e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80035ec:	2d2d      	cmp	r5, #45	@ 0x2d
 80035ee:	d005      	beq.n	80035fc <__sccl+0x48>
 80035f0:	2d5d      	cmp	r5, #93	@ 0x5d
 80035f2:	d016      	beq.n	8003622 <__sccl+0x6e>
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	d0f1      	beq.n	80035dc <__sccl+0x28>
 80035f8:	462b      	mov	r3, r5
 80035fa:	e7f2      	b.n	80035e2 <__sccl+0x2e>
 80035fc:	7846      	ldrb	r6, [r0, #1]
 80035fe:	2e5d      	cmp	r6, #93	@ 0x5d
 8003600:	d0fa      	beq.n	80035f8 <__sccl+0x44>
 8003602:	42b3      	cmp	r3, r6
 8003604:	dcf8      	bgt.n	80035f8 <__sccl+0x44>
 8003606:	461a      	mov	r2, r3
 8003608:	3002      	adds	r0, #2
 800360a:	3201      	adds	r2, #1
 800360c:	4296      	cmp	r6, r2
 800360e:	54a1      	strb	r1, [r4, r2]
 8003610:	dcfb      	bgt.n	800360a <__sccl+0x56>
 8003612:	1af2      	subs	r2, r6, r3
 8003614:	3a01      	subs	r2, #1
 8003616:	42b3      	cmp	r3, r6
 8003618:	bfa8      	it	ge
 800361a:	2200      	movge	r2, #0
 800361c:	1c5d      	adds	r5, r3, #1
 800361e:	18ab      	adds	r3, r5, r2
 8003620:	e7e1      	b.n	80035e6 <__sccl+0x32>
 8003622:	4610      	mov	r0, r2
 8003624:	e7da      	b.n	80035dc <__sccl+0x28>

08003626 <__submore>:
 8003626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362a:	460c      	mov	r4, r1
 800362c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800362e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003632:	4299      	cmp	r1, r3
 8003634:	d11b      	bne.n	800366e <__submore+0x48>
 8003636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800363a:	f7ff f92d 	bl	8002898 <_malloc_r>
 800363e:	b918      	cbnz	r0, 8003648 <__submore+0x22>
 8003640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800364e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003652:	6360      	str	r0, [r4, #52]	@ 0x34
 8003654:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003658:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800365c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003660:	7043      	strb	r3, [r0, #1]
 8003662:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003666:	7003      	strb	r3, [r0, #0]
 8003668:	6020      	str	r0, [r4, #0]
 800366a:	2000      	movs	r0, #0
 800366c:	e7ea      	b.n	8003644 <__submore+0x1e>
 800366e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003670:	0077      	lsls	r7, r6, #1
 8003672:	463a      	mov	r2, r7
 8003674:	f000 f856 	bl	8003724 <_realloc_r>
 8003678:	4605      	mov	r5, r0
 800367a:	2800      	cmp	r0, #0
 800367c:	d0e0      	beq.n	8003640 <__submore+0x1a>
 800367e:	eb00 0806 	add.w	r8, r0, r6
 8003682:	4601      	mov	r1, r0
 8003684:	4632      	mov	r2, r6
 8003686:	4640      	mov	r0, r8
 8003688:	f000 f83e 	bl	8003708 <memcpy>
 800368c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003690:	f8c4 8000 	str.w	r8, [r4]
 8003694:	e7e9      	b.n	800366a <__submore+0x44>

08003696 <memmove>:
 8003696:	4288      	cmp	r0, r1
 8003698:	b510      	push	{r4, lr}
 800369a:	eb01 0402 	add.w	r4, r1, r2
 800369e:	d902      	bls.n	80036a6 <memmove+0x10>
 80036a0:	4284      	cmp	r4, r0
 80036a2:	4623      	mov	r3, r4
 80036a4:	d807      	bhi.n	80036b6 <memmove+0x20>
 80036a6:	1e43      	subs	r3, r0, #1
 80036a8:	42a1      	cmp	r1, r4
 80036aa:	d008      	beq.n	80036be <memmove+0x28>
 80036ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036b4:	e7f8      	b.n	80036a8 <memmove+0x12>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4402      	add	r2, r0
 80036ba:	428a      	cmp	r2, r1
 80036bc:	d100      	bne.n	80036c0 <memmove+0x2a>
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036c8:	e7f7      	b.n	80036ba <memmove+0x24>
	...

080036cc <_sbrk_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	2300      	movs	r3, #0
 80036d0:	4d05      	ldr	r5, [pc, #20]	@ (80036e8 <_sbrk_r+0x1c>)
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	f7fd f9d4 	bl	8000a84 <_sbrk>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d102      	bne.n	80036e6 <_sbrk_r+0x1a>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	b103      	cbz	r3, 80036e6 <_sbrk_r+0x1a>
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	2000063c 	.word	0x2000063c

080036ec <memchr>:
 80036ec:	4603      	mov	r3, r0
 80036ee:	b510      	push	{r4, lr}
 80036f0:	b2c9      	uxtb	r1, r1
 80036f2:	4402      	add	r2, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	d101      	bne.n	80036fe <memchr+0x12>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e003      	b.n	8003706 <memchr+0x1a>
 80036fe:	7804      	ldrb	r4, [r0, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	428c      	cmp	r4, r1
 8003704:	d1f6      	bne.n	80036f4 <memchr+0x8>
 8003706:	bd10      	pop	{r4, pc}

08003708 <memcpy>:
 8003708:	440a      	add	r2, r1
 800370a:	4291      	cmp	r1, r2
 800370c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003710:	d100      	bne.n	8003714 <memcpy+0xc>
 8003712:	4770      	bx	lr
 8003714:	b510      	push	{r4, lr}
 8003716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371a:	4291      	cmp	r1, r2
 800371c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003720:	d1f9      	bne.n	8003716 <memcpy+0xe>
 8003722:	bd10      	pop	{r4, pc}

08003724 <_realloc_r>:
 8003724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003728:	4607      	mov	r7, r0
 800372a:	4614      	mov	r4, r2
 800372c:	460d      	mov	r5, r1
 800372e:	b921      	cbnz	r1, 800373a <_realloc_r+0x16>
 8003730:	4611      	mov	r1, r2
 8003732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003736:	f7ff b8af 	b.w	8002898 <_malloc_r>
 800373a:	b92a      	cbnz	r2, 8003748 <_realloc_r+0x24>
 800373c:	f7ff f842 	bl	80027c4 <_free_r>
 8003740:	4625      	mov	r5, r4
 8003742:	4628      	mov	r0, r5
 8003744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003748:	f000 f906 	bl	8003958 <_malloc_usable_size_r>
 800374c:	4284      	cmp	r4, r0
 800374e:	4606      	mov	r6, r0
 8003750:	d802      	bhi.n	8003758 <_realloc_r+0x34>
 8003752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003756:	d8f4      	bhi.n	8003742 <_realloc_r+0x1e>
 8003758:	4621      	mov	r1, r4
 800375a:	4638      	mov	r0, r7
 800375c:	f7ff f89c 	bl	8002898 <_malloc_r>
 8003760:	4680      	mov	r8, r0
 8003762:	b908      	cbnz	r0, 8003768 <_realloc_r+0x44>
 8003764:	4645      	mov	r5, r8
 8003766:	e7ec      	b.n	8003742 <_realloc_r+0x1e>
 8003768:	42b4      	cmp	r4, r6
 800376a:	4622      	mov	r2, r4
 800376c:	4629      	mov	r1, r5
 800376e:	bf28      	it	cs
 8003770:	4632      	movcs	r2, r6
 8003772:	f7ff ffc9 	bl	8003708 <memcpy>
 8003776:	4629      	mov	r1, r5
 8003778:	4638      	mov	r0, r7
 800377a:	f7ff f823 	bl	80027c4 <_free_r>
 800377e:	e7f1      	b.n	8003764 <_realloc_r+0x40>

08003780 <_strtol_l.isra.0>:
 8003780:	2b24      	cmp	r3, #36	@ 0x24
 8003782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003786:	4686      	mov	lr, r0
 8003788:	4690      	mov	r8, r2
 800378a:	d801      	bhi.n	8003790 <_strtol_l.isra.0+0x10>
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <_strtol_l.isra.0+0x1e>
 8003790:	f7fe ffec 	bl	800276c <__errno>
 8003794:	2316      	movs	r3, #22
 8003796:	6003      	str	r3, [r0, #0]
 8003798:	2000      	movs	r0, #0
 800379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379e:	460d      	mov	r5, r1
 80037a0:	4833      	ldr	r0, [pc, #204]	@ (8003870 <_strtol_l.isra.0+0xf0>)
 80037a2:	462a      	mov	r2, r5
 80037a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037a8:	5d06      	ldrb	r6, [r0, r4]
 80037aa:	f016 0608 	ands.w	r6, r6, #8
 80037ae:	d1f8      	bne.n	80037a2 <_strtol_l.isra.0+0x22>
 80037b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80037b2:	d110      	bne.n	80037d6 <_strtol_l.isra.0+0x56>
 80037b4:	2601      	movs	r6, #1
 80037b6:	782c      	ldrb	r4, [r5, #0]
 80037b8:	1c95      	adds	r5, r2, #2
 80037ba:	f033 0210 	bics.w	r2, r3, #16
 80037be:	d115      	bne.n	80037ec <_strtol_l.isra.0+0x6c>
 80037c0:	2c30      	cmp	r4, #48	@ 0x30
 80037c2:	d10d      	bne.n	80037e0 <_strtol_l.isra.0+0x60>
 80037c4:	782a      	ldrb	r2, [r5, #0]
 80037c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80037ca:	2a58      	cmp	r2, #88	@ 0x58
 80037cc:	d108      	bne.n	80037e0 <_strtol_l.isra.0+0x60>
 80037ce:	786c      	ldrb	r4, [r5, #1]
 80037d0:	3502      	adds	r5, #2
 80037d2:	2310      	movs	r3, #16
 80037d4:	e00a      	b.n	80037ec <_strtol_l.isra.0+0x6c>
 80037d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80037d8:	bf04      	itt	eq
 80037da:	782c      	ldrbeq	r4, [r5, #0]
 80037dc:	1c95      	addeq	r5, r2, #2
 80037de:	e7ec      	b.n	80037ba <_strtol_l.isra.0+0x3a>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f6      	bne.n	80037d2 <_strtol_l.isra.0+0x52>
 80037e4:	2c30      	cmp	r4, #48	@ 0x30
 80037e6:	bf14      	ite	ne
 80037e8:	230a      	movne	r3, #10
 80037ea:	2308      	moveq	r3, #8
 80037ec:	2200      	movs	r2, #0
 80037ee:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80037f2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80037f6:	fbbc f9f3 	udiv	r9, ip, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8003800:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003804:	2f09      	cmp	r7, #9
 8003806:	d80f      	bhi.n	8003828 <_strtol_l.isra.0+0xa8>
 8003808:	463c      	mov	r4, r7
 800380a:	42a3      	cmp	r3, r4
 800380c:	dd1b      	ble.n	8003846 <_strtol_l.isra.0+0xc6>
 800380e:	1c57      	adds	r7, r2, #1
 8003810:	d007      	beq.n	8003822 <_strtol_l.isra.0+0xa2>
 8003812:	4581      	cmp	r9, r0
 8003814:	d314      	bcc.n	8003840 <_strtol_l.isra.0+0xc0>
 8003816:	d101      	bne.n	800381c <_strtol_l.isra.0+0x9c>
 8003818:	45a2      	cmp	sl, r4
 800381a:	db11      	blt.n	8003840 <_strtol_l.isra.0+0xc0>
 800381c:	2201      	movs	r2, #1
 800381e:	fb00 4003 	mla	r0, r0, r3, r4
 8003822:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003826:	e7eb      	b.n	8003800 <_strtol_l.isra.0+0x80>
 8003828:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800382c:	2f19      	cmp	r7, #25
 800382e:	d801      	bhi.n	8003834 <_strtol_l.isra.0+0xb4>
 8003830:	3c37      	subs	r4, #55	@ 0x37
 8003832:	e7ea      	b.n	800380a <_strtol_l.isra.0+0x8a>
 8003834:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003838:	2f19      	cmp	r7, #25
 800383a:	d804      	bhi.n	8003846 <_strtol_l.isra.0+0xc6>
 800383c:	3c57      	subs	r4, #87	@ 0x57
 800383e:	e7e4      	b.n	800380a <_strtol_l.isra.0+0x8a>
 8003840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003844:	e7ed      	b.n	8003822 <_strtol_l.isra.0+0xa2>
 8003846:	1c53      	adds	r3, r2, #1
 8003848:	d108      	bne.n	800385c <_strtol_l.isra.0+0xdc>
 800384a:	2322      	movs	r3, #34	@ 0x22
 800384c:	4660      	mov	r0, ip
 800384e:	f8ce 3000 	str.w	r3, [lr]
 8003852:	f1b8 0f00 	cmp.w	r8, #0
 8003856:	d0a0      	beq.n	800379a <_strtol_l.isra.0+0x1a>
 8003858:	1e69      	subs	r1, r5, #1
 800385a:	e006      	b.n	800386a <_strtol_l.isra.0+0xea>
 800385c:	b106      	cbz	r6, 8003860 <_strtol_l.isra.0+0xe0>
 800385e:	4240      	negs	r0, r0
 8003860:	f1b8 0f00 	cmp.w	r8, #0
 8003864:	d099      	beq.n	800379a <_strtol_l.isra.0+0x1a>
 8003866:	2a00      	cmp	r2, #0
 8003868:	d1f6      	bne.n	8003858 <_strtol_l.isra.0+0xd8>
 800386a:	f8c8 1000 	str.w	r1, [r8]
 800386e:	e794      	b.n	800379a <_strtol_l.isra.0+0x1a>
 8003870:	08003a9d 	.word	0x08003a9d

08003874 <_strtol_r>:
 8003874:	f7ff bf84 	b.w	8003780 <_strtol_l.isra.0>

08003878 <_strtoul_l.isra.0>:
 8003878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800387c:	4686      	mov	lr, r0
 800387e:	460d      	mov	r5, r1
 8003880:	4e33      	ldr	r6, [pc, #204]	@ (8003950 <_strtoul_l.isra.0+0xd8>)
 8003882:	4628      	mov	r0, r5
 8003884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003888:	5d37      	ldrb	r7, [r6, r4]
 800388a:	f017 0708 	ands.w	r7, r7, #8
 800388e:	d1f8      	bne.n	8003882 <_strtoul_l.isra.0+0xa>
 8003890:	2c2d      	cmp	r4, #45	@ 0x2d
 8003892:	d110      	bne.n	80038b6 <_strtoul_l.isra.0+0x3e>
 8003894:	2701      	movs	r7, #1
 8003896:	782c      	ldrb	r4, [r5, #0]
 8003898:	1c85      	adds	r5, r0, #2
 800389a:	f033 0010 	bics.w	r0, r3, #16
 800389e:	d115      	bne.n	80038cc <_strtoul_l.isra.0+0x54>
 80038a0:	2c30      	cmp	r4, #48	@ 0x30
 80038a2:	d10d      	bne.n	80038c0 <_strtoul_l.isra.0+0x48>
 80038a4:	7828      	ldrb	r0, [r5, #0]
 80038a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80038aa:	2858      	cmp	r0, #88	@ 0x58
 80038ac:	d108      	bne.n	80038c0 <_strtoul_l.isra.0+0x48>
 80038ae:	786c      	ldrb	r4, [r5, #1]
 80038b0:	3502      	adds	r5, #2
 80038b2:	2310      	movs	r3, #16
 80038b4:	e00a      	b.n	80038cc <_strtoul_l.isra.0+0x54>
 80038b6:	2c2b      	cmp	r4, #43	@ 0x2b
 80038b8:	bf04      	itt	eq
 80038ba:	782c      	ldrbeq	r4, [r5, #0]
 80038bc:	1c85      	addeq	r5, r0, #2
 80038be:	e7ec      	b.n	800389a <_strtoul_l.isra.0+0x22>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f6      	bne.n	80038b2 <_strtoul_l.isra.0+0x3a>
 80038c4:	2c30      	cmp	r4, #48	@ 0x30
 80038c6:	bf14      	ite	ne
 80038c8:	230a      	movne	r3, #10
 80038ca:	2308      	moveq	r3, #8
 80038cc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80038d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80038d4:	2600      	movs	r6, #0
 80038d6:	fb03 f908 	mul.w	r9, r3, r8
 80038da:	4630      	mov	r0, r6
 80038dc:	ea6f 0909 	mvn.w	r9, r9
 80038e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80038e4:	f1bc 0f09 	cmp.w	ip, #9
 80038e8:	d810      	bhi.n	800390c <_strtoul_l.isra.0+0x94>
 80038ea:	4664      	mov	r4, ip
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	dd1e      	ble.n	800392e <_strtoul_l.isra.0+0xb6>
 80038f0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80038f4:	d007      	beq.n	8003906 <_strtoul_l.isra.0+0x8e>
 80038f6:	4580      	cmp	r8, r0
 80038f8:	d316      	bcc.n	8003928 <_strtoul_l.isra.0+0xb0>
 80038fa:	d101      	bne.n	8003900 <_strtoul_l.isra.0+0x88>
 80038fc:	45a1      	cmp	r9, r4
 80038fe:	db13      	blt.n	8003928 <_strtoul_l.isra.0+0xb0>
 8003900:	2601      	movs	r6, #1
 8003902:	fb00 4003 	mla	r0, r0, r3, r4
 8003906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800390a:	e7e9      	b.n	80038e0 <_strtoul_l.isra.0+0x68>
 800390c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003910:	f1bc 0f19 	cmp.w	ip, #25
 8003914:	d801      	bhi.n	800391a <_strtoul_l.isra.0+0xa2>
 8003916:	3c37      	subs	r4, #55	@ 0x37
 8003918:	e7e8      	b.n	80038ec <_strtoul_l.isra.0+0x74>
 800391a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800391e:	f1bc 0f19 	cmp.w	ip, #25
 8003922:	d804      	bhi.n	800392e <_strtoul_l.isra.0+0xb6>
 8003924:	3c57      	subs	r4, #87	@ 0x57
 8003926:	e7e1      	b.n	80038ec <_strtoul_l.isra.0+0x74>
 8003928:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800392c:	e7eb      	b.n	8003906 <_strtoul_l.isra.0+0x8e>
 800392e:	1c73      	adds	r3, r6, #1
 8003930:	d106      	bne.n	8003940 <_strtoul_l.isra.0+0xc8>
 8003932:	2322      	movs	r3, #34	@ 0x22
 8003934:	4630      	mov	r0, r6
 8003936:	f8ce 3000 	str.w	r3, [lr]
 800393a:	b932      	cbnz	r2, 800394a <_strtoul_l.isra.0+0xd2>
 800393c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003940:	b107      	cbz	r7, 8003944 <_strtoul_l.isra.0+0xcc>
 8003942:	4240      	negs	r0, r0
 8003944:	2a00      	cmp	r2, #0
 8003946:	d0f9      	beq.n	800393c <_strtoul_l.isra.0+0xc4>
 8003948:	b106      	cbz	r6, 800394c <_strtoul_l.isra.0+0xd4>
 800394a:	1e69      	subs	r1, r5, #1
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	e7f5      	b.n	800393c <_strtoul_l.isra.0+0xc4>
 8003950:	08003a9d 	.word	0x08003a9d

08003954 <_strtoul_r>:
 8003954:	f7ff bf90 	b.w	8003878 <_strtoul_l.isra.0>

08003958 <_malloc_usable_size_r>:
 8003958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395c:	1f18      	subs	r0, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfbc      	itt	lt
 8003962:	580b      	ldrlt	r3, [r1, r0]
 8003964:	18c0      	addlt	r0, r0, r3
 8003966:	4770      	bx	lr

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
