
uart_at_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039dc  080039dc  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039e4  080039e4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000049e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039e8  080039e8  000049e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000005c  08003a48  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000438  08003a48  00005438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007969  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001787  00000000  00000000  0000c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000542  00000000  00000000  0000e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001768a  00000000  00000000  0000eda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008018  00000000  00000000  0002642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008449c  00000000  00000000  0002e444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b28e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  000b2924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b4c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037b0 	.word	0x080037b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080037b0 	.word	0x080037b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <input_buf_init>:
int len;
/**
* Initialize input_line_buf_t object.
*/
int input_buf_init(input_buf_t *input_buf, UART_HandleTypeDef *huart)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	memset((void*) input_buf->buf, 0, INPUT_BUF_SIZE);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2280      	movs	r2, #128	@ 0x80
 800016a:	2100      	movs	r1, #0
 800016c:	4618      	mov	r0, r3
 800016e:	f002 fa19 	bl	80025a4 <memset>
	input_buf->pos = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	input_buf->huart = huart;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	// enable interrupt
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000182:	4b06      	ldr	r3, [pc, #24]	@ (800019c <input_buf_init+0x40>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	68da      	ldr	r2, [r3, #12]
 8000188:	4b04      	ldr	r3, [pc, #16]	@ (800019c <input_buf_init+0x40>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f042 0220 	orr.w	r2, r2, #32
 8000190:	60da      	str	r2, [r3, #12]
	return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	20000078 	.word	0x20000078

080001a0 <input_buf_read_content>:
/**
* Read current content of the buffer.
*/
int input_buf_read_content(input_buf_t *input_buf, char *output)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	int pos = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	60fb      	str	r3, [r7, #12]
	// copy data to `output` buffer
	for (int i = 0; i < INPUT_BUF_SIZE; i++) {
 80001ae:	2300      	movs	r3, #0
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	e013      	b.n	80001dc <input_buf_read_content+0x3c>
		output[i] = input_buf->buf[pos];
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	683a      	ldr	r2, [r7, #0]
 80001b8:	4413      	add	r3, r2
 80001ba:	6879      	ldr	r1, [r7, #4]
 80001bc:	68fa      	ldr	r2, [r7, #12]
 80001be:	440a      	add	r2, r1
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	b2d2      	uxtb	r2, r2
 80001c4:	701a      	strb	r2, [r3, #0]
		pos++;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	3301      	adds	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
		if (pos >= INPUT_BUF_SIZE) {
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80001d0:	dd01      	ble.n	80001d6 <input_buf_read_content+0x36>
			pos = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < INPUT_BUF_SIZE; i++) {
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	3301      	adds	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	2b7f      	cmp	r3, #127	@ 0x7f
 80001e0:	dde8      	ble.n	80001b4 <input_buf_read_content+0x14>
		}
	}
	return INPUT_BUF_SIZE;
 80001e2:	2380      	movs	r3, #128	@ 0x80
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <input_buffer_clear>:

void input_buffer_clear(input_buf_t *input_buf)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b082      	sub	sp, #8
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
	memset((void*) input_buf->buf, 0, INPUT_BUF_SIZE);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2280      	movs	r2, #128	@ 0x80
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 f9d1 	bl	80025a4 <memset>
	input_buf->pos = 0;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2200      	movs	r2, #0
 8000206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <input_buf_process_rxne_it>:

/**
* Process UART interruption.
*/
int input_buf_process_rxne_it(input_buf_t *input_buf)
{
 8000212:	b480      	push	{r7}
 8000214:	b085      	sub	sp, #20
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
// ignore interrupt if it isn't related with received data
	if (!__HAL_UART_GET_FLAG(input_buf->huart, UART_FLAG_RXNE)) {
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f003 0320 	and.w	r3, r3, #32
 8000228:	2b20      	cmp	r3, #32
 800022a:	d001      	beq.n	8000230 <input_buf_process_rxne_it+0x1e>
		return 0;
 800022c:	2300      	movs	r3, #0
 800022e:	e01b      	b.n	8000268 <input_buf_process_rxne_it+0x56>
	}
	// process received data
	char sym = input_buf->huart->Instance->DR;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	72fb      	strb	r3, [r7, #11]
	// save symbol into buffer
	size_t pos = input_buf->pos;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000242:	60fb      	str	r3, [r7, #12]
	input_buf->buf[pos] = sym;
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	4413      	add	r3, r2
 800024a:	7afa      	ldrb	r2, [r7, #11]
 800024c:	701a      	strb	r2, [r3, #0]
	pos++;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	3301      	adds	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
	if (pos >= INPUT_BUF_SIZE) {
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2b7f      	cmp	r3, #127	@ 0x7f
 8000258:	d901      	bls.n	800025e <input_buf_process_rxne_it+0x4c>
		pos = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
	}
	input_buf->pos = pos;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	return 0;
 8000266:	2300      	movs	r3, #0
}
 8000268:	4618      	mov	r0, r3
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr

08000272 <output_buf_init>:

/**
* Initialize output_buf_t object.
*/
int output_buf_init(output_buf_t *output_buf, UART_HandleTypeDef *huart)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
	memset((void*) output_buf->buf, 0, OUTPUT_BUF_ZIZE);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f98e 	bl	80025a4 <memset>
	output_buf->start = 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	output_buf->end = 0;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2200      	movs	r2, #0
 8000294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	output_buf->huart = huart;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	return 0;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <output_buf_send_str>:

/**
* Send data to UART;
*/
int output_buf_send_str(output_buf_t *output_buf, const char *str) {
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b084      	sub	sp, #16
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	6039      	str	r1, [r7, #0]
	if (output_buf->start != output_buf->end) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d002      	beq.n	80002ca <output_buf_send_str+0x20>
		// Error: previous transmission isn't completed
		return -1;
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002c8:	e024      	b.n	8000314 <output_buf_send_str+0x6a>
	}
	size_t str_len = strlen(str);
 80002ca:	6838      	ldr	r0, [r7, #0]
 80002cc:	f7ff ff3e 	bl	800014c <strlen>
 80002d0:	60f8      	str	r0, [r7, #12]
	if (str_len > sizeof(output_buf->buf)) {
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	2b80      	cmp	r3, #128	@ 0x80
 80002d6:	d902      	bls.n	80002de <output_buf_send_str+0x34>
		// Error: str is too long for internal buffer
		return -2;
 80002d8:	f06f 0301 	mvn.w	r3, #1
 80002dc:	e01a      	b.n	8000314 <output_buf_send_str+0x6a>
	}
	// copy buffer
	memcpy((void*) output_buf->buf, str, str_len);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	6839      	ldr	r1, [r7, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 f991 	bl	800260c <memcpy>
	output_buf->start = 0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	output_buf->end = str_len;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	// enable interrupts
	__HAL_UART_ENABLE_IT(output_buf->huart, UART_IT_TXE);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	68da      	ldr	r2, [r3, #12]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000310:	60da      	str	r2, [r3, #12]
	return 0;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <output_buf_process_txe_it>:

/**
* Process UART interruption.
*/
int output_buf_process_txe_it(output_buf_t *output_buf) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	// ignore interruption if it isn't related with data transmission
	if (!__HAL_UART_GET_FLAG(output_buf->huart, UART_FLAG_TXE)) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000332:	2b80      	cmp	r3, #128	@ 0x80
 8000334:	d001      	beq.n	800033a <output_buf_process_txe_it+0x1e>
		return 0;
 8000336:	2300      	movs	r3, #0
 8000338:	e028      	b.n	800038c <output_buf_process_txe_it+0x70>
	}
	if (output_buf->start == output_buf->end) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000346:	429a      	cmp	r2, r3
 8000348:	d10d      	bne.n	8000366 <output_buf_process_txe_it+0x4a>
		// all data has been transmitted. Stop interruptions
		__HAL_UART_DISABLE_IT(output_buf->huart, UART_IT_TXE);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000360:	60da      	str	r2, [r3, #12]
		return 0;
 8000362:	2300      	movs	r3, #0
 8000364:	e012      	b.n	800038c <output_buf_process_txe_it+0x70>
	}
	// move data from buffer to register
	output_buf->huart->Instance->DR = output_buf->buf[output_buf->start];
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	5cd3      	ldrb	r3, [r2, r3]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
	output_buf->start++;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
	...

08000398 <process_command>:

int process_command(const char *cmd)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0aa      	sub	sp, #168	@ 0xa8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	char buf[128];
	int n = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
	int cmd_len = strlen(cmd);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f7ff fed1 	bl	800014c <strlen>
 80003aa:	4603      	mov	r3, r0
 80003ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	sscanf(cmd, "AT+MODE=%*d%n", &n);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	461a      	mov	r2, r3
 80003b6:	4965      	ldr	r1, [pc, #404]	@ (800054c <process_command+0x1b4>)
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f002 f8c5 	bl	8002548 <siscanf>
	if (n == cmd_len) {
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d11d      	bne.n	8000404 <process_command+0x6c>
		int i1;
		sscanf(cmd, "AT+MODE=%d", &i1);
 80003c8:	f107 030c 	add.w	r3, r7, #12
 80003cc:	461a      	mov	r2, r3
 80003ce:	4960      	ldr	r1, [pc, #384]	@ (8000550 <process_command+0x1b8>)
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f002 f8b9 	bl	8002548 <siscanf>
		if (i1 == 1){
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d106      	bne.n	80003ea <process_command+0x52>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2104      	movs	r1, #4
 80003e0:	485c      	ldr	r0, [pc, #368]	@ (8000554 <process_command+0x1bc>)
 80003e2:	f000 ff12 	bl	800120a <HAL_GPIO_WritePin>
			return 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e0ac      	b.n	8000544 <process_command+0x1ac>
		} else if (i1 == 0){
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d106      	bne.n	80003fe <process_command+0x66>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	4857      	ldr	r0, [pc, #348]	@ (8000554 <process_command+0x1bc>)
 80003f6:	f000 ff08 	bl	800120a <HAL_GPIO_WritePin>
			return 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e0a2      	b.n	8000544 <process_command+0x1ac>
		} else {
			return -1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000402:	e09f      	b.n	8000544 <process_command+0x1ac>
		}
	}
	sscanf(cmd, "AT+MODE?%n", &n);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	461a      	mov	r2, r3
 800040a:	4953      	ldr	r1, [pc, #332]	@ (8000558 <process_command+0x1c0>)
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f002 f89b 	bl	8002548 <siscanf>
	if (n == cmd_len) {
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000418:	429a      	cmp	r2, r3
 800041a:	d11a      	bne.n	8000452 <process_command+0xba>
		GPIO_PinState pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 800041c:	2104      	movs	r1, #4
 800041e:	484d      	ldr	r0, [pc, #308]	@ (8000554 <process_command+0x1bc>)
 8000420:	f000 fedc 	bl	80011dc <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		sprintf(buf, "+MODE:%d", pin_state);
 800042a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	494a      	ldr	r1, [pc, #296]	@ (800055c <process_command+0x1c4>)
 8000434:	4618      	mov	r0, r3
 8000436:	f002 f865 	bl	8002504 <siprintf>
		while(output_buf_send_str(&project_output_buf, buf) != 0){};
 800043a:	bf00      	nop
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	4847      	ldr	r0, [pc, #284]	@ (8000560 <process_command+0x1c8>)
 8000444:	f7ff ff31 	bl	80002aa <output_buf_send_str>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1f6      	bne.n	800043c <process_command+0xa4>
		return 0;
 800044e:	2300      	movs	r3, #0
 8000450:	e078      	b.n	8000544 <process_command+0x1ac>
	}
	sscanf(cmd, "AT+TIME%n", &n);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	461a      	mov	r2, r3
 8000458:	4942      	ldr	r1, [pc, #264]	@ (8000564 <process_command+0x1cc>)
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f002 f874 	bl	8002548 <siscanf>
	if (n == cmd_len) {
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000466:	429a      	cmp	r2, r3
 8000468:	d118      	bne.n	800049c <process_command+0x104>
		int time = HAL_GetTick();
 800046a:	f000 fb45 	bl	8000af8 <HAL_GetTick>
 800046e:	4603      	mov	r3, r0
 8000470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		sprintf(buf, "+TIME:%i", time);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800047c:	493a      	ldr	r1, [pc, #232]	@ (8000568 <process_command+0x1d0>)
 800047e:	4618      	mov	r0, r3
 8000480:	f002 f840 	bl	8002504 <siprintf>
		while(output_buf_send_str(&project_output_buf, buf) != 0){};
 8000484:	bf00      	nop
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	4834      	ldr	r0, [pc, #208]	@ (8000560 <process_command+0x1c8>)
 800048e:	f7ff ff0c 	bl	80002aa <output_buf_send_str>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f6      	bne.n	8000486 <process_command+0xee>
		return 0;
 8000498:	2300      	movs	r3, #0
 800049a:	e053      	b.n	8000544 <process_command+0x1ac>
	}
	sscanf(cmd, "AT+BLINK=%*d%n", &n);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	461a      	mov	r2, r3
 80004a2:	4932      	ldr	r1, [pc, #200]	@ (800056c <process_command+0x1d4>)
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f002 f84f 	bl	8002548 <siscanf>
	if (n == cmd_len) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d145      	bne.n	8000540 <process_command+0x1a8>
		int count;
		sscanf(cmd, "AT+BLINK=%d", &count);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	461a      	mov	r2, r3
 80004ba:	492d      	ldr	r1, [pc, #180]	@ (8000570 <process_command+0x1d8>)
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f002 f843 	bl	8002548 <siscanf>
		if (count > 0 && count < 11){
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd38      	ble.n	800053a <process_command+0x1a2>
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	2b0a      	cmp	r3, #10
 80004cc:	dc35      	bgt.n	800053a <process_command+0x1a2>
			GPIO_PinState pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80004ce:	2104      	movs	r1, #4
 80004d0:	4820      	ldr	r0, [pc, #128]	@ (8000554 <process_command+0x1bc>)
 80004d2:	f000 fe83 	bl	80011dc <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	481c      	ldr	r0, [pc, #112]	@ (8000554 <process_command+0x1bc>)
 80004e2:	f000 fe92 	bl	800120a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80004e6:	2064      	movs	r0, #100	@ 0x64
 80004e8:	f000 fb10 	bl	8000b0c <HAL_Delay>
			for (int i = 0; i < count; i++ ){
 80004ec:	2300      	movs	r3, #0
 80004ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80004f2:	e014      	b.n	800051e <process_command+0x186>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2104      	movs	r1, #4
 80004f8:	4816      	ldr	r0, [pc, #88]	@ (8000554 <process_command+0x1bc>)
 80004fa:	f000 fe86 	bl	800120a <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80004fe:	20c8      	movs	r0, #200	@ 0xc8
 8000500:	f000 fb04 	bl	8000b0c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	4812      	ldr	r0, [pc, #72]	@ (8000554 <process_command+0x1bc>)
 800050a:	f000 fe7e 	bl	800120a <HAL_GPIO_WritePin>
				HAL_Delay(200);
 800050e:	20c8      	movs	r0, #200	@ 0xc8
 8000510:	f000 fafc 	bl	8000b0c <HAL_Delay>
			for (int i = 0; i < count; i++ ){
 8000514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000518:	3301      	adds	r3, #1
 800051a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000524:	429a      	cmp	r2, r3
 8000526:	dbe5      	blt.n	80004f4 <process_command+0x15c>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, pin_state);
 8000528:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800052c:	461a      	mov	r2, r3
 800052e:	2104      	movs	r1, #4
 8000530:	4808      	ldr	r0, [pc, #32]	@ (8000554 <process_command+0x1bc>)
 8000532:	f000 fe6a 	bl	800120a <HAL_GPIO_WritePin>
			return 0;
 8000536:	2300      	movs	r3, #0
 8000538:	e004      	b.n	8000544 <process_command+0x1ac>
		} else {
			return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800053e:	e001      	b.n	8000544 <process_command+0x1ac>
		}
	}
	return -2;
 8000540:	f06f 0301 	mvn.w	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	37a8      	adds	r7, #168	@ 0xa8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	080037c8 	.word	0x080037c8
 8000550:	080037d8 	.word	0x080037d8
 8000554:	40010c00 	.word	0x40010c00
 8000558:	080037e4 	.word	0x080037e4
 800055c:	080037f0 	.word	0x080037f0
 8000560:	20000148 	.word	0x20000148
 8000564:	080037fc 	.word	0x080037fc
 8000568:	08003808 	.word	0x08003808
 800056c:	08003814 	.word	0x08003814
 8000570:	08003824 	.word	0x08003824

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa66 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f872 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8d6 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f8aa 	bl	80006dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  input_buf_init(&project_input_buf, &huart1);
 8000588:	492b      	ldr	r1, [pc, #172]	@ (8000638 <main+0xc4>)
 800058a:	482c      	ldr	r0, [pc, #176]	@ (800063c <main+0xc8>)
 800058c:	f7ff fde6 	bl	800015c <input_buf_init>
  output_buf_init(&project_output_buf, &huart1);
 8000590:	4929      	ldr	r1, [pc, #164]	@ (8000638 <main+0xc4>)
 8000592:	482b      	ldr	r0, [pc, #172]	@ (8000640 <main+0xcc>)
 8000594:	f7ff fe6d 	bl	8000272 <output_buf_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // read input buffer content
	  size = input_buf_read_content(&project_input_buf, input_buf);
 8000598:	492a      	ldr	r1, [pc, #168]	@ (8000644 <main+0xd0>)
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0xc8>)
 800059c:	f7ff fe00 	bl	80001a0 <input_buf_read_content>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <main+0xd4>)
 80005a4:	6013      	str	r3, [r2, #0]
	  len = strlen(input_buf);
 80005a6:	4827      	ldr	r0, [pc, #156]	@ (8000644 <main+0xd0>)
 80005a8:	f7ff fdd0 	bl	800014c <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <main+0xd8>)
 80005b2:	601a      	str	r2, [r3, #0]
	  if (len){
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <main+0xd8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d038      	beq.n	800062e <main+0xba>
		  input_buffer_clear(&project_input_buf);
 80005bc:	481f      	ldr	r0, [pc, #124]	@ (800063c <main+0xc8>)
 80005be:	f7ff fe16 	bl	80001ee <input_buffer_clear>
		  status = process_command(input_buf);
 80005c2:	4820      	ldr	r0, [pc, #128]	@ (8000644 <main+0xd0>)
 80005c4:	f7ff fee8 	bl	8000398 <process_command>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <main+0xdc>)
 80005cc:	6013      	str	r3, [r2, #0]
		  if (status == 0){
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <main+0xdc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10c      	bne.n	80005f0 <main+0x7c>
			  sprintf(output_buf, "\nOK");
 80005d6:	491f      	ldr	r1, [pc, #124]	@ (8000654 <main+0xe0>)
 80005d8:	481f      	ldr	r0, [pc, #124]	@ (8000658 <main+0xe4>)
 80005da:	f001 ff93 	bl	8002504 <siprintf>
			  while(output_buf_send_str(&project_output_buf, output_buf) != 0 ){};
 80005de:	bf00      	nop
 80005e0:	491d      	ldr	r1, [pc, #116]	@ (8000658 <main+0xe4>)
 80005e2:	4817      	ldr	r0, [pc, #92]	@ (8000640 <main+0xcc>)
 80005e4:	f7ff fe61 	bl	80002aa <output_buf_send_str>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f8      	bne.n	80005e0 <main+0x6c>
 80005ee:	e01e      	b.n	800062e <main+0xba>
		  } else if (status == -2){
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <main+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f113 0f02 	cmn.w	r3, #2
 80005f8:	d10d      	bne.n	8000616 <main+0xa2>
			  sprintf(output_buf, "\nUNKNOWN COMMAND: `%s`", input_buf);
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <main+0xd0>)
 80005fc:	4917      	ldr	r1, [pc, #92]	@ (800065c <main+0xe8>)
 80005fe:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0xe4>)
 8000600:	f001 ff80 	bl	8002504 <siprintf>
			  while(output_buf_send_str(&project_output_buf, output_buf) != 0){};
 8000604:	bf00      	nop
 8000606:	4914      	ldr	r1, [pc, #80]	@ (8000658 <main+0xe4>)
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <main+0xcc>)
 800060a:	f7ff fe4e 	bl	80002aa <output_buf_send_str>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f8      	bne.n	8000606 <main+0x92>
 8000614:	e00b      	b.n	800062e <main+0xba>
		  } else {
			  sprintf(output_buf, "\nERROR");
 8000616:	4912      	ldr	r1, [pc, #72]	@ (8000660 <main+0xec>)
 8000618:	480f      	ldr	r0, [pc, #60]	@ (8000658 <main+0xe4>)
 800061a:	f001 ff73 	bl	8002504 <siprintf>
			  while(output_buf_send_str(&project_output_buf, output_buf) != 0){};
 800061e:	bf00      	nop
 8000620:	490d      	ldr	r1, [pc, #52]	@ (8000658 <main+0xe4>)
 8000622:	4807      	ldr	r0, [pc, #28]	@ (8000640 <main+0xcc>)
 8000624:	f7ff fe41 	bl	80002aa <output_buf_send_str>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f8      	bne.n	8000620 <main+0xac>
		  }
	  }
	   HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f000 fa6c 	bl	8000b0c <HAL_Delay>
	  size = input_buf_read_content(&project_input_buf, input_buf);
 8000634:	e7b0      	b.n	8000598 <main+0x24>
 8000636:	bf00      	nop
 8000638:	20000078 	.word	0x20000078
 800063c:	200000c0 	.word	0x200000c0
 8000640:	20000148 	.word	0x20000148
 8000644:	200001d4 	.word	0x200001d4
 8000648:	200002dc 	.word	0x200002dc
 800064c:	200002e4 	.word	0x200002e4
 8000650:	200002e0 	.word	0x200002e0
 8000654:	08003830 	.word	0x08003830
 8000658:	20000258 	.word	0x20000258
 800065c:	08003834 	.word	0x08003834
 8000660:	0800384c 	.word	0x0800384c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b090      	sub	sp, #64	@ 0x40
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2228      	movs	r2, #40	@ 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ff96 	bl	80025a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2310      	movs	r3, #16
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fdf0 	bl	8001280 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006a6:	f000 f899 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f85e 	bl	8001784 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f885 	bl	80007dc <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	@ 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART1_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART1_UART_Init+0x4c>)
 8000714:	f001 f9c4 	bl	8001aa0 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f85d 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000078 	.word	0x20000078
 800072c:	40013800 	.word	0x40013800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_GPIO_Init+0x9c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <MX_GPIO_Init+0x9c>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_GPIO_Init+0x9c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_GPIO_Init+0x9c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a1a      	ldr	r2, [pc, #104]	@ (80007cc <MX_GPIO_Init+0x9c>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_GPIO_Init+0x9c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]



  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000774:	2301      	movs	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4619      	mov	r1, r3
 8000786:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_GPIO_Init+0xa4>)
 8000788:	f000 fba4 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800078c:	2304      	movs	r3, #4
 800078e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_GPIO_Init+0xa8>)
 80007a4:	f000 fb96 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2104      	movs	r1, #4
 80007ac:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <MX_GPIO_Init+0xa8>)
 80007ae:	f000 fd2c 	bl	800120a <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	2006      	movs	r0, #6
 80007b8:	f000 faa3 	bl	8000d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007bc:	2006      	movs	r0, #6
 80007be:	f000 fabc 	bl	8000d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	10110000 	.word	0x10110000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <HAL_MspInit+0x5c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x5c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <HAL_MspInit+0x60>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_MspInit+0x60>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000

0800084c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <HAL_UART_MspInit+0x9c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d139      	bne.n	80008e0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <HAL_UART_MspInit+0xa0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800089c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480f      	ldr	r0, [pc, #60]	@ (80008f0 <HAL_UART_MspInit+0xa4>)
 80008b2:	f000 fb0f 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_UART_MspInit+0xa4>)
 80008cc:	f000 fb02 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2101      	movs	r1, #1
 80008d4:	2025      	movs	r0, #37	@ 0x25
 80008d6:	f000 fa14 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008da:	2025      	movs	r0, #37	@ 0x25
 80008dc:	f000 fa2d 	bl	8000d3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8c6 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fc73 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  input_buf_process_rxne_it(&project_input_buf);
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <USART1_IRQHandler+0x1c>)
 8000962:	f7ff fc56 	bl	8000212 <input_buf_process_rxne_it>
  output_buf_process_txe_it(&project_output_buf);
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <USART1_IRQHandler+0x20>)
 8000968:	f7ff fcd8 	bl	800031c <output_buf_process_txe_it>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <USART1_IRQHandler+0x24>)
 800096e:	f001 f8e7 	bl	8001b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000c0 	.word	0x200000c0
 800097c:	20000148 	.word	0x20000148
 8000980:	20000078 	.word	0x20000078

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f001 fdfe 	bl	80025b4 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20005000 	.word	0x20005000
 80009e4:	00001000 	.word	0x00001000
 80009e8:	200002e8 	.word	0x200002e8
 80009ec:	20000438 	.word	0x20000438

080009f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff fff8 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a02:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a04:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a18:	4c09      	ldr	r4, [pc, #36]	@ (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f001 fdcb 	bl	80025c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fda3 	bl	8000574 <main>
  bx lr
 8000a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a38:	080039ec 	.word	0x080039ec
  ldr r2, =_sbss
 8000a3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a40:	20000438 	.word	0x20000438

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_Init+0x28>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_Init+0x28>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f947 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fec0 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f95f 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 f927 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200002ec 	.word	0x200002ec

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	@ (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200002ec 	.word	0x200002ec

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4906      	ldr	r1, [pc, #24]	@ (8000bec <__NVIC_EnableIRQ+0x34>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	@ 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f7ff ff90 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff2d 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff42 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff35 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2204      	movs	r2, #4
 8000d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e020      	b.n	8000dda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 020e 	bic.w	r2, r2, #14
 8000da6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d005      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e051      	b.n	8000eac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 020e 	bic.w	r2, r2, #14
 8000e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <HAL_DMA_Abort_IT+0xd4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d029      	beq.n	8000e86 <HAL_DMA_Abort_IT+0xa2>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <HAL_DMA_Abort_IT+0xd8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d022      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x9e>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec0 <HAL_DMA_Abort_IT+0xdc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01a      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x98>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec4 <HAL_DMA_Abort_IT+0xe0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d012      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x92>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <HAL_DMA_Abort_IT+0xe4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00a      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x8c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_DMA_Abort_IT+0xe8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <HAL_DMA_Abort_IT+0x86>
 8000e64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e68:	e00e      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e6e:	e00b      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e74:	e008      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7a:	e005      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e80:	e002      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e82:	2310      	movs	r3, #16
 8000e84:	e000      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e86:	2301      	movs	r3, #1
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <HAL_DMA_Abort_IT+0xec>)
 8000e8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4798      	blx	r3
    } 
  }
  return status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020008 	.word	0x40020008
 8000ebc:	4002001c 	.word	0x4002001c
 8000ec0:	40020030 	.word	0x40020030
 8000ec4:	40020044 	.word	0x40020044
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	4002006c 	.word	0x4002006c
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b08b      	sub	sp, #44	@ 0x2c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e169      	b.n	80011bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8158 	bne.w	80011b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a9a      	ldr	r2, [pc, #616]	@ (8001174 <HAL_GPIO_Init+0x2a0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d05e      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f10:	4a98      	ldr	r2, [pc, #608]	@ (8001174 <HAL_GPIO_Init+0x2a0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d875      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f16:	4a98      	ldr	r2, [pc, #608]	@ (8001178 <HAL_GPIO_Init+0x2a4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d058      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f1c:	4a96      	ldr	r2, [pc, #600]	@ (8001178 <HAL_GPIO_Init+0x2a4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d86f      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f22:	4a96      	ldr	r2, [pc, #600]	@ (800117c <HAL_GPIO_Init+0x2a8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d052      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f28:	4a94      	ldr	r2, [pc, #592]	@ (800117c <HAL_GPIO_Init+0x2a8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d869      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f2e:	4a94      	ldr	r2, [pc, #592]	@ (8001180 <HAL_GPIO_Init+0x2ac>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d04c      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f34:	4a92      	ldr	r2, [pc, #584]	@ (8001180 <HAL_GPIO_Init+0x2ac>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d863      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f3a:	4a92      	ldr	r2, [pc, #584]	@ (8001184 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d046      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f40:	4a90      	ldr	r2, [pc, #576]	@ (8001184 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d85d      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d82a      	bhi.n	8000fa0 <HAL_GPIO_Init+0xcc>
 8000f4a:	2b12      	cmp	r3, #18
 8000f4c:	d859      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <HAL_GPIO_Init+0x80>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fa9 	.word	0x08000fa9
 8000f5c:	08000fbb 	.word	0x08000fbb
 8000f60:	08000ffd 	.word	0x08000ffd
 8000f64:	08001003 	.word	0x08001003
 8000f68:	08001003 	.word	0x08001003
 8000f6c:	08001003 	.word	0x08001003
 8000f70:	08001003 	.word	0x08001003
 8000f74:	08001003 	.word	0x08001003
 8000f78:	08001003 	.word	0x08001003
 8000f7c:	08001003 	.word	0x08001003
 8000f80:	08001003 	.word	0x08001003
 8000f84:	08001003 	.word	0x08001003
 8000f88:	08001003 	.word	0x08001003
 8000f8c:	08001003 	.word	0x08001003
 8000f90:	08001003 	.word	0x08001003
 8000f94:	08001003 	.word	0x08001003
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fc5 	.word	0x08000fc5
 8000fa0:	4a79      	ldr	r2, [pc, #484]	@ (8001188 <HAL_GPIO_Init+0x2b4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fa6:	e02c      	b.n	8001002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e029      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e024      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e01f      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e01a      	b.n	8001004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e013      	b.n	8001004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d105      	bne.n	8000ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	611a      	str	r2, [r3, #16]
          break;
 8000fee:	e009      	b.n	8001004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	615a      	str	r2, [r3, #20]
          break;
 8000ffa:	e003      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x130>
          break;
 8001002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2bff      	cmp	r3, #255	@ 0xff
 8001008:	d801      	bhi.n	800100e <HAL_GPIO_Init+0x13a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	e001      	b.n	8001012 <HAL_GPIO_Init+0x13e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3304      	adds	r3, #4
 8001012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2bff      	cmp	r3, #255	@ 0xff
 8001018:	d802      	bhi.n	8001020 <HAL_GPIO_Init+0x14c>
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x152>
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	3b08      	subs	r3, #8
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	210f      	movs	r1, #15
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	401a      	ands	r2, r3
 8001038:	6a39      	ldr	r1, [r7, #32]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80b1 	beq.w	80011b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001054:	4b4d      	ldr	r3, [pc, #308]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a4c      	ldr	r2, [pc, #304]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b4a      	ldr	r3, [pc, #296]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106c:	4a48      	ldr	r2, [pc, #288]	@ (8001190 <HAL_GPIO_Init+0x2bc>)
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a40      	ldr	r2, [pc, #256]	@ (8001194 <HAL_GPIO_Init+0x2c0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d013      	beq.n	80010c0 <HAL_GPIO_Init+0x1ec>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3f      	ldr	r2, [pc, #252]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00d      	beq.n	80010bc <HAL_GPIO_Init+0x1e8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3e      	ldr	r2, [pc, #248]	@ (800119c <HAL_GPIO_Init+0x2c8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3d      	ldr	r2, [pc, #244]	@ (80011a0 <HAL_GPIO_Init+0x2cc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010c0:	2300      	movs	r3, #0
 80010c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d2:	492f      	ldr	r1, [pc, #188]	@ (8001190 <HAL_GPIO_Init+0x2bc>)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	492c      	ldr	r1, [pc, #176]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4928      	ldr	r1, [pc, #160]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	4922      	ldr	r1, [pc, #136]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	491e      	ldr	r1, [pc, #120]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800112c:	4013      	ands	r3, r2
 800112e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4918      	ldr	r1, [pc, #96]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4914      	ldr	r1, [pc, #80]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001154:	4013      	ands	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d021      	beq.n	80011a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	490e      	ldr	r1, [pc, #56]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e021      	b.n	80011b6 <HAL_GPIO_Init+0x2e2>
 8001172:	bf00      	nop
 8001174:	10320000 	.word	0x10320000
 8001178:	10310000 	.word	0x10310000
 800117c:	10220000 	.word	0x10220000
 8001180:	10210000 	.word	0x10210000
 8001184:	10120000 	.word	0x10120000
 8001188:	10110000 	.word	0x10110000
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	40010800 	.word	0x40010800
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4909      	ldr	r1, [pc, #36]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	3301      	adds	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	fa22 f303 	lsr.w	r3, r2, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f47f ae8e 	bne.w	8000ee8 <HAL_GPIO_Init+0x14>
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	372c      	adds	r7, #44	@ 0x2c
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800121a:	787b      	ldrb	r3, [r7, #1]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001226:	e003      	b.n	8001230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
	...

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8087 	beq.w	80013ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a0:	4b92      	ldr	r3, [pc, #584]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d00c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d112      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
 80012b8:	4b8c      	ldr	r3, [pc, #560]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b89      	ldr	r3, [pc, #548]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d06c      	beq.n	80013ac <HAL_RCC_OscConfig+0x12c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d168      	bne.n	80013ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e24c      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x76>
 80012e8:	4b80      	ldr	r3, [pc, #512]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a7f      	ldr	r2, [pc, #508]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e02e      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7a      	ldr	r2, [pc, #488]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a77      	ldr	r2, [pc, #476]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0xbc>
 8001322:	4b72      	ldr	r3, [pc, #456]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a71      	ldr	r2, [pc, #452]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6f      	ldr	r3, [pc, #444]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6e      	ldr	r2, [pc, #440]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 800133c:	4b6b      	ldr	r3, [pc, #428]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6a      	ldr	r2, [pc, #424]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a67      	ldr	r2, [pc, #412]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fbcc 	bl	8000af8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fbc8 	bl	8000af8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e200      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5d      	ldr	r3, [pc, #372]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xe4>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fbb8 	bl	8000af8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fbb4 	bl	8000af8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1ec      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x10c>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ba:	4b4c      	ldr	r3, [pc, #304]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b43      	ldr	r3, [pc, #268]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c0      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4939      	ldr	r1, [pc, #228]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b36      	ldr	r3, [pc, #216]	@ (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb6d 	bl	8000af8 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fb69 	bl	8000af8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4927      	ldr	r1, [pc, #156]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb4c 	bl	8000af8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fb48 	bl	8000af8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e180      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03a      	beq.n	8001504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_RCC_OscConfig+0x274>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb2c 	bl	8000af8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fb28 	bl	8000af8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e160      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 face 	bl	8001a64 <RCC_Delay>
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_RCC_OscConfig+0x274>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fb12 	bl	8000af8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	e00f      	b.n	80014f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb0e 	bl	8000af8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d908      	bls.n	80014f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e146      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	42420000 	.word	0x42420000
 80014f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b92      	ldr	r3, [pc, #584]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e9      	bne.n	80014d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a6 	beq.w	800165e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b8b      	ldr	r3, [pc, #556]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b88      	ldr	r3, [pc, #544]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a87      	ldr	r2, [pc, #540]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b7f      	ldr	r3, [pc, #508]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7e      	ldr	r2, [pc, #504]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff facf 	bl	8000af8 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff facb 	bl	8000af8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	@ 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e103      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x312>
 8001584:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a6e      	ldr	r2, [pc, #440]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e02d      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x334>
 800159a:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a69      	ldr	r2, [pc, #420]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x356>
 80015bc:	4b61      	ldr	r3, [pc, #388]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a60      	ldr	r2, [pc, #384]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a5a      	ldr	r2, [pc, #360]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b58      	ldr	r3, [pc, #352]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a57      	ldr	r2, [pc, #348]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa7f 	bl	8000af8 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fa7b 	bl	8000af8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0b1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x37e>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fa69 	bl	8000af8 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fa65 	bl	8000af8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e09b      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a3b      	ldr	r2, [pc, #236]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d061      	beq.n	8001738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d146      	bne.n	800170a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b33      	ldr	r3, [pc, #204]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fa39 	bl	8000af8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fa35 	bl	8000af8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e06d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4921      	ldr	r1, [pc, #132]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a19      	ldr	r1, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	430b      	orrs	r3, r1
 80016d6:	491b      	ldr	r1, [pc, #108]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa09 	bl	8000af8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fa05 	bl	8000af8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x46a>
 8001708:	e035      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f9f2 	bl	8000af8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f9ee 	bl	8000af8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e026      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x498>
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e019      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_RCC_OscConfig+0x500>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4965      	ldr	r1, [pc, #404]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4936      	ldr	r1, [pc, #216]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f940 	bl	8000af8 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f93c 	bl	8000af8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4922      	ldr	r1, [pc, #136]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	@ (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f89e 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08003860 	.word	0x08003860
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x30>
 8001982:	2b08      	cmp	r3, #8
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x36>
 8001986:	e027      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	613b      	str	r3, [r7, #16]
      break;
 800198c:	e027      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x94>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0c5b      	lsrs	r3, r3, #17
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ba:	fb03 f202 	mul.w	r2, r3, r2
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e004      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	@ (80019fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	693b      	ldr	r3, [r7, #16]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	08003878 	.word	0x08003878
 80019f8:	08003888 	.word	0x08003888
 80019fc:	003d0900 	.word	0x003d0900

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	@ (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08003870 	.word	0x08003870

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	@ (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08003870 	.word	0x08003870

08001a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <RCC_Delay+0x34>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <RCC_Delay+0x38>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0a5b      	lsrs	r3, r3, #9
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a80:	bf00      	nop
  }
  while (Delay --);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f9      	bne.n	8001a80 <RCC_Delay+0x1c>
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	10624dd3 	.word	0x10624dd3

08001aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e042      	b.n	8001b38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fec0 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	@ 0x24
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fc7f 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0ba      	sub	sp, #232	@ 0xe8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_UART_IRQHandler+0x66>
 8001b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fb63 	bl	800226a <UART_Receive_IT>
      return;
 8001ba4:	e25b      	b.n	800205e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80de 	beq.w	8001d6c <HAL_UART_IRQHandler+0x22c>
 8001bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80d1 	beq.w	8001d6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_UART_IRQHandler+0xae>
 8001bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_UART_IRQHandler+0xd2>
 8001bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_UART_IRQHandler+0xf6>
 8001c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d011      	beq.n	8001c66 <HAL_UART_IRQHandler+0x126>
 8001c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f043 0208 	orr.w	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 81f2 	beq.w	8002054 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_UART_IRQHandler+0x14e>
 8001c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 faee 	bl	800226a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_UART_IRQHandler+0x17a>
 8001cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d04f      	beq.n	8001d5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9f8 	bl	80020b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d041      	beq.n	8001d52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cdc:	e853 3f00 	ldrex	r3, [r3]
 8001ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3314      	adds	r3, #20
 8001cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d0a:	e841 2300 	strex	r3, r2, [r1]
 8001d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1d9      	bne.n	8001cce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d013      	beq.n	8001d4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d26:	4a7e      	ldr	r2, [pc, #504]	@ (8001f20 <HAL_UART_IRQHandler+0x3e0>)
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f858 	bl	8000de4 <HAL_DMA_Abort_IT>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d44:	4610      	mov	r0, r2
 8001d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d48:	e00e      	b.n	8001d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f99c 	bl	8002088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d50:	e00a      	b.n	8001d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f998 	bl	8002088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d58:	e006      	b.n	8001d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f994 	bl	8002088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d66:	e175      	b.n	8002054 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	bf00      	nop
    return;
 8001d6a:	e173      	b.n	8002054 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	f040 814f 	bne.w	8002014 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8148 	beq.w	8002014 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8141 	beq.w	8002014 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b6 	beq.w	8001f24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8145 	beq.w	8002058 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	f080 813e 	bcs.w	8002058 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001de2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f000 8088 	beq.w	8001f00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	330c      	adds	r3, #12
 8001df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dfe:	e853 3f00 	ldrex	r3, [r3]
 8001e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	330c      	adds	r3, #12
 8001e18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e2c:	e841 2300 	strex	r3, r2, [r1]
 8001e30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1d9      	bne.n	8001df0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3314      	adds	r3, #20
 8001e42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e46:	e853 3f00 	ldrex	r3, [r3]
 8001e4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001e4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3314      	adds	r3, #20
 8001e5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e60:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e6c:	e841 2300 	strex	r3, r2, [r1]
 8001e70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e1      	bne.n	8001e3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3314      	adds	r3, #20
 8001e7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e82:	e853 3f00 	ldrex	r3, [r3]
 8001e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3314      	adds	r3, #20
 8001e98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ea2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ea4:	e841 2300 	strex	r3, r2, [r1]
 8001ea8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e3      	bne.n	8001e78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ec8:	e853 3f00 	ldrex	r3, [r3]
 8001ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed0:	f023 0310 	bic.w	r3, r3, #16
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	330c      	adds	r3, #12
 8001ede:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001ee2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ee4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e3      	bne.n	8001ebe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff37 	bl	8000d6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8bf 	bl	800209a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f1c:	e09c      	b.n	8002058 <HAL_UART_IRQHandler+0x518>
 8001f1e:	bf00      	nop
 8001f20:	08002175 	.word	0x08002175
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 808e 	beq.w	800205c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8089 	beq.w	800205c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	330c      	adds	r3, #12
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001f6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e3      	bne.n	8001f4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3314      	adds	r3, #20
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	623b      	str	r3, [r7, #32]
   return(result);
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001fa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fae:	e841 2300 	strex	r3, r2, [r1]
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e3      	bne.n	8001f82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	e853 3f00 	ldrex	r3, [r3]
 8001fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0310 	bic.w	r3, r3, #16
 8001fde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001fec:	61fa      	str	r2, [r7, #28]
 8001fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff0:	69b9      	ldr	r1, [r7, #24]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	e841 2300 	strex	r3, r2, [r1]
 8001ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e3      	bne.n	8001fc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f844 	bl	800209a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002012:	e023      	b.n	800205c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_UART_IRQHandler+0x4f4>
 8002020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8b5 	bl	800219c <UART_Transmit_IT>
    return;
 8002032:	e014      	b.n	800205e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <HAL_UART_IRQHandler+0x51e>
 8002040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8f4 	bl	800223a <UART_EndTransmit_IT>
    return;
 8002052:	e004      	b.n	800205e <HAL_UART_IRQHandler+0x51e>
    return;
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <HAL_UART_IRQHandler+0x51e>
      return;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <HAL_UART_IRQHandler+0x51e>
      return;
 800205c:	bf00      	nop
  }
}
 800205e:	37e8      	adds	r7, #232	@ 0xe8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b095      	sub	sp, #84	@ 0x54
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c2:	e853 3f00 	ldrex	r3, [r3]
 80020c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020e0:	e841 2300 	strex	r3, r2, [r1]
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80020e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e5      	bne.n	80020b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3314      	adds	r3, #20
 80020f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	e853 3f00 	ldrex	r3, [r3]
 80020fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3314      	adds	r3, #20
 800210a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800210c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800210e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002114:	e841 2300 	strex	r3, r2, [r1]
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e5      	bne.n	80020ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	2b01      	cmp	r3, #1
 8002126:	d119      	bne.n	800215c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	e853 3f00 	ldrex	r3, [r3]
 8002136:	60bb      	str	r3, [r7, #8]
   return(result);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f023 0310 	bic.w	r3, r3, #16
 800213e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002148:	61ba      	str	r2, [r7, #24]
 800214a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	e841 2300 	strex	r3, r2, [r1]
 8002154:	613b      	str	r3, [r7, #16]
   return(result);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e5      	bne.n	8002128 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800216a:	bf00      	nop
 800216c:	3754      	adds	r7, #84	@ 0x54
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff ff7a 	bl	8002088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b21      	cmp	r3, #33	@ 0x21
 80021ae:	d13e      	bne.n	800222e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b8:	d114      	bne.n	80021e4 <UART_Transmit_IT+0x48>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d110      	bne.n	80021e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	1c9a      	adds	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]
 80021e2:	e008      	b.n	80021f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6211      	str	r1, [r2, #32]
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002218:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002228:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002250:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff02 	bl	8002064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08c      	sub	sp, #48	@ 0x30
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b22      	cmp	r3, #34	@ 0x22
 800227c:	f040 80ae 	bne.w	80023dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002288:	d117      	bne.n	80022ba <UART_Receive_IT+0x50>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d113      	bne.n	80022ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	1c9a      	adds	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022b8:	e026      	b.n	8002308 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022cc:	d007      	beq.n	80022de <UART_Receive_IT+0x74>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10a      	bne.n	80022ec <UART_Receive_IT+0x82>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e008      	b.n	80022fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002318:	2b00      	cmp	r3, #0
 800231a:	d15d      	bne.n	80023d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0220 	bic.w	r2, r2, #32
 800232a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	2b01      	cmp	r3, #1
 8002360:	d135      	bne.n	80023ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	e853 3f00 	ldrex	r3, [r3]
 8002376:	613b      	str	r3, [r7, #16]
   return(result);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f023 0310 	bic.w	r3, r3, #16
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	623a      	str	r2, [r7, #32]
 800238a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238c:	69f9      	ldr	r1, [r7, #28]
 800238e:	6a3a      	ldr	r2, [r7, #32]
 8002390:	e841 2300 	strex	r3, r2, [r1]
 8002394:	61bb      	str	r3, [r7, #24]
   return(result);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e5      	bne.n	8002368 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d10a      	bne.n	80023c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fe67 	bl	800209a <HAL_UARTEx_RxEventCallback>
 80023cc:	e002      	b.n	80023d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fe51 	bl	8002076 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e002      	b.n	80023de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3730      	adds	r7, #48	@ 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002422:	f023 030c 	bic.w	r3, r3, #12
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	430b      	orrs	r3, r1
 800242e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2c      	ldr	r2, [pc, #176]	@ (80024fc <UART_SetConfig+0x114>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d103      	bne.n	8002458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002450:	f7ff faf4 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	e002      	b.n	800245e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002458:	f7ff fadc 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	4a22      	ldr	r2, [pc, #136]	@ (8002500 <UART_SetConfig+0x118>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	0119      	lsls	r1, r3, #4
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009a      	lsls	r2, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fbb2 f2f3 	udiv	r2, r2, r3
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <UART_SetConfig+0x118>)
 8002496:	fba3 0302 	umull	r0, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2064      	movs	r0, #100	@ 0x64
 800249e:	fb00 f303 	mul.w	r3, r0, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	@ 0x32
 80024a8:	4a15      	ldr	r2, [pc, #84]	@ (8002500 <UART_SetConfig+0x118>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	4419      	add	r1, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009a      	lsls	r2, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <UART_SetConfig+0x118>)
 80024ce:	fba3 0302 	umull	r0, r3, r3, r2
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2064      	movs	r0, #100	@ 0x64
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	3332      	adds	r3, #50	@ 0x32
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <UART_SetConfig+0x118>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	440a      	add	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40013800 	.word	0x40013800
 8002500:	51eb851f 	.word	0x51eb851f

08002504 <siprintf>:
 8002504:	b40e      	push	{r1, r2, r3}
 8002506:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800250a:	b510      	push	{r4, lr}
 800250c:	2400      	movs	r4, #0
 800250e:	b09d      	sub	sp, #116	@ 0x74
 8002510:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002512:	9002      	str	r0, [sp, #8]
 8002514:	9006      	str	r0, [sp, #24]
 8002516:	9107      	str	r1, [sp, #28]
 8002518:	9104      	str	r1, [sp, #16]
 800251a:	4809      	ldr	r0, [pc, #36]	@ (8002540 <siprintf+0x3c>)
 800251c:	4909      	ldr	r1, [pc, #36]	@ (8002544 <siprintf+0x40>)
 800251e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002522:	9105      	str	r1, [sp, #20]
 8002524:	6800      	ldr	r0, [r0, #0]
 8002526:	a902      	add	r1, sp, #8
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800252c:	f000 f9ce 	bl	80028cc <_svfiprintf_r>
 8002530:	9b02      	ldr	r3, [sp, #8]
 8002532:	701c      	strb	r4, [r3, #0]
 8002534:	b01d      	add	sp, #116	@ 0x74
 8002536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800253a:	b003      	add	sp, #12
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000000c 	.word	0x2000000c
 8002544:	ffff0208 	.word	0xffff0208

08002548 <siscanf>:
 8002548:	b40e      	push	{r1, r2, r3}
 800254a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800254e:	b570      	push	{r4, r5, r6, lr}
 8002550:	2500      	movs	r5, #0
 8002552:	b09d      	sub	sp, #116	@ 0x74
 8002554:	ac21      	add	r4, sp, #132	@ 0x84
 8002556:	f854 6b04 	ldr.w	r6, [r4], #4
 800255a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800255e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8002560:	9002      	str	r0, [sp, #8]
 8002562:	9006      	str	r0, [sp, #24]
 8002564:	f7fd fdf2 	bl	800014c <strlen>
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <siscanf+0x50>)
 800256a:	9003      	str	r0, [sp, #12]
 800256c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800256e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002572:	9007      	str	r0, [sp, #28]
 8002574:	4809      	ldr	r0, [pc, #36]	@ (800259c <siscanf+0x54>)
 8002576:	f8ad 3016 	strh.w	r3, [sp, #22]
 800257a:	4632      	mov	r2, r6
 800257c:	4623      	mov	r3, r4
 800257e:	a902      	add	r1, sp, #8
 8002580:	6800      	ldr	r0, [r0, #0]
 8002582:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002584:	9514      	str	r5, [sp, #80]	@ 0x50
 8002586:	9401      	str	r4, [sp, #4]
 8002588:	f000 faf6 	bl	8002b78 <__ssvfiscanf_r>
 800258c:	b01d      	add	sp, #116	@ 0x74
 800258e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002592:	b003      	add	sp, #12
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	080025a1 	.word	0x080025a1
 800259c:	2000000c 	.word	0x2000000c

080025a0 <__seofread>:
 80025a0:	2000      	movs	r0, #0
 80025a2:	4770      	bx	lr

080025a4 <memset>:
 80025a4:	4603      	mov	r3, r0
 80025a6:	4402      	add	r2, r0
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d100      	bne.n	80025ae <memset+0xa>
 80025ac:	4770      	bx	lr
 80025ae:	f803 1b01 	strb.w	r1, [r3], #1
 80025b2:	e7f9      	b.n	80025a8 <memset+0x4>

080025b4 <__errno>:
 80025b4:	4b01      	ldr	r3, [pc, #4]	@ (80025bc <__errno+0x8>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <__libc_init_array>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	2600      	movs	r6, #0
 80025c4:	4d0c      	ldr	r5, [pc, #48]	@ (80025f8 <__libc_init_array+0x38>)
 80025c6:	4c0d      	ldr	r4, [pc, #52]	@ (80025fc <__libc_init_array+0x3c>)
 80025c8:	1b64      	subs	r4, r4, r5
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	42a6      	cmp	r6, r4
 80025ce:	d109      	bne.n	80025e4 <__libc_init_array+0x24>
 80025d0:	f001 f8ee 	bl	80037b0 <_init>
 80025d4:	2600      	movs	r6, #0
 80025d6:	4d0a      	ldr	r5, [pc, #40]	@ (8002600 <__libc_init_array+0x40>)
 80025d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002604 <__libc_init_array+0x44>)
 80025da:	1b64      	subs	r4, r4, r5
 80025dc:	10a4      	asrs	r4, r4, #2
 80025de:	42a6      	cmp	r6, r4
 80025e0:	d105      	bne.n	80025ee <__libc_init_array+0x2e>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e8:	4798      	blx	r3
 80025ea:	3601      	adds	r6, #1
 80025ec:	e7ee      	b.n	80025cc <__libc_init_array+0xc>
 80025ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f2:	4798      	blx	r3
 80025f4:	3601      	adds	r6, #1
 80025f6:	e7f2      	b.n	80025de <__libc_init_array+0x1e>
 80025f8:	080039e4 	.word	0x080039e4
 80025fc:	080039e4 	.word	0x080039e4
 8002600:	080039e4 	.word	0x080039e4
 8002604:	080039e8 	.word	0x080039e8

08002608 <__retarget_lock_acquire_recursive>:
 8002608:	4770      	bx	lr

0800260a <__retarget_lock_release_recursive>:
 800260a:	4770      	bx	lr

0800260c <memcpy>:
 800260c:	440a      	add	r2, r1
 800260e:	4291      	cmp	r1, r2
 8002610:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002614:	d100      	bne.n	8002618 <memcpy+0xc>
 8002616:	4770      	bx	lr
 8002618:	b510      	push	{r4, lr}
 800261a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800261e:	4291      	cmp	r1, r2
 8002620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002624:	d1f9      	bne.n	800261a <memcpy+0xe>
 8002626:	bd10      	pop	{r4, pc}

08002628 <_free_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4605      	mov	r5, r0
 800262c:	2900      	cmp	r1, #0
 800262e:	d040      	beq.n	80026b2 <_free_r+0x8a>
 8002630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002634:	1f0c      	subs	r4, r1, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfb8      	it	lt
 800263a:	18e4      	addlt	r4, r4, r3
 800263c:	f000 f8de 	bl	80027fc <__malloc_lock>
 8002640:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <_free_r+0x8c>)
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	b933      	cbnz	r3, 8002654 <_free_r+0x2c>
 8002646:	6063      	str	r3, [r4, #4]
 8002648:	6014      	str	r4, [r2, #0]
 800264a:	4628      	mov	r0, r5
 800264c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002650:	f000 b8da 	b.w	8002808 <__malloc_unlock>
 8002654:	42a3      	cmp	r3, r4
 8002656:	d908      	bls.n	800266a <_free_r+0x42>
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	1821      	adds	r1, r4, r0
 800265c:	428b      	cmp	r3, r1
 800265e:	bf01      	itttt	eq
 8002660:	6819      	ldreq	r1, [r3, #0]
 8002662:	685b      	ldreq	r3, [r3, #4]
 8002664:	1809      	addeq	r1, r1, r0
 8002666:	6021      	streq	r1, [r4, #0]
 8002668:	e7ed      	b.n	8002646 <_free_r+0x1e>
 800266a:	461a      	mov	r2, r3
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	b10b      	cbz	r3, 8002674 <_free_r+0x4c>
 8002670:	42a3      	cmp	r3, r4
 8002672:	d9fa      	bls.n	800266a <_free_r+0x42>
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	1850      	adds	r0, r2, r1
 8002678:	42a0      	cmp	r0, r4
 800267a:	d10b      	bne.n	8002694 <_free_r+0x6c>
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	4401      	add	r1, r0
 8002680:	1850      	adds	r0, r2, r1
 8002682:	4283      	cmp	r3, r0
 8002684:	6011      	str	r1, [r2, #0]
 8002686:	d1e0      	bne.n	800264a <_free_r+0x22>
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4408      	add	r0, r1
 800268e:	6010      	str	r0, [r2, #0]
 8002690:	6053      	str	r3, [r2, #4]
 8002692:	e7da      	b.n	800264a <_free_r+0x22>
 8002694:	d902      	bls.n	800269c <_free_r+0x74>
 8002696:	230c      	movs	r3, #12
 8002698:	602b      	str	r3, [r5, #0]
 800269a:	e7d6      	b.n	800264a <_free_r+0x22>
 800269c:	6820      	ldr	r0, [r4, #0]
 800269e:	1821      	adds	r1, r4, r0
 80026a0:	428b      	cmp	r3, r1
 80026a2:	bf01      	itttt	eq
 80026a4:	6819      	ldreq	r1, [r3, #0]
 80026a6:	685b      	ldreq	r3, [r3, #4]
 80026a8:	1809      	addeq	r1, r1, r0
 80026aa:	6021      	streq	r1, [r4, #0]
 80026ac:	6063      	str	r3, [r4, #4]
 80026ae:	6054      	str	r4, [r2, #4]
 80026b0:	e7cb      	b.n	800264a <_free_r+0x22>
 80026b2:	bd38      	pop	{r3, r4, r5, pc}
 80026b4:	20000434 	.word	0x20000434

080026b8 <sbrk_aligned>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4e0f      	ldr	r6, [pc, #60]	@ (80026f8 <sbrk_aligned+0x40>)
 80026bc:	460c      	mov	r4, r1
 80026be:	6831      	ldr	r1, [r6, #0]
 80026c0:	4605      	mov	r5, r0
 80026c2:	b911      	cbnz	r1, 80026ca <sbrk_aligned+0x12>
 80026c4:	f000 ff34 	bl	8003530 <_sbrk_r>
 80026c8:	6030      	str	r0, [r6, #0]
 80026ca:	4621      	mov	r1, r4
 80026cc:	4628      	mov	r0, r5
 80026ce:	f000 ff2f 	bl	8003530 <_sbrk_r>
 80026d2:	1c43      	adds	r3, r0, #1
 80026d4:	d103      	bne.n	80026de <sbrk_aligned+0x26>
 80026d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80026da:	4620      	mov	r0, r4
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	1cc4      	adds	r4, r0, #3
 80026e0:	f024 0403 	bic.w	r4, r4, #3
 80026e4:	42a0      	cmp	r0, r4
 80026e6:	d0f8      	beq.n	80026da <sbrk_aligned+0x22>
 80026e8:	1a21      	subs	r1, r4, r0
 80026ea:	4628      	mov	r0, r5
 80026ec:	f000 ff20 	bl	8003530 <_sbrk_r>
 80026f0:	3001      	adds	r0, #1
 80026f2:	d1f2      	bne.n	80026da <sbrk_aligned+0x22>
 80026f4:	e7ef      	b.n	80026d6 <sbrk_aligned+0x1e>
 80026f6:	bf00      	nop
 80026f8:	20000430 	.word	0x20000430

080026fc <_malloc_r>:
 80026fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002700:	1ccd      	adds	r5, r1, #3
 8002702:	f025 0503 	bic.w	r5, r5, #3
 8002706:	3508      	adds	r5, #8
 8002708:	2d0c      	cmp	r5, #12
 800270a:	bf38      	it	cc
 800270c:	250c      	movcc	r5, #12
 800270e:	2d00      	cmp	r5, #0
 8002710:	4606      	mov	r6, r0
 8002712:	db01      	blt.n	8002718 <_malloc_r+0x1c>
 8002714:	42a9      	cmp	r1, r5
 8002716:	d904      	bls.n	8002722 <_malloc_r+0x26>
 8002718:	230c      	movs	r3, #12
 800271a:	6033      	str	r3, [r6, #0]
 800271c:	2000      	movs	r0, #0
 800271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027f8 <_malloc_r+0xfc>
 8002726:	f000 f869 	bl	80027fc <__malloc_lock>
 800272a:	f8d8 3000 	ldr.w	r3, [r8]
 800272e:	461c      	mov	r4, r3
 8002730:	bb44      	cbnz	r4, 8002784 <_malloc_r+0x88>
 8002732:	4629      	mov	r1, r5
 8002734:	4630      	mov	r0, r6
 8002736:	f7ff ffbf 	bl	80026b8 <sbrk_aligned>
 800273a:	1c43      	adds	r3, r0, #1
 800273c:	4604      	mov	r4, r0
 800273e:	d158      	bne.n	80027f2 <_malloc_r+0xf6>
 8002740:	f8d8 4000 	ldr.w	r4, [r8]
 8002744:	4627      	mov	r7, r4
 8002746:	2f00      	cmp	r7, #0
 8002748:	d143      	bne.n	80027d2 <_malloc_r+0xd6>
 800274a:	2c00      	cmp	r4, #0
 800274c:	d04b      	beq.n	80027e6 <_malloc_r+0xea>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	4639      	mov	r1, r7
 8002752:	4630      	mov	r0, r6
 8002754:	eb04 0903 	add.w	r9, r4, r3
 8002758:	f000 feea 	bl	8003530 <_sbrk_r>
 800275c:	4581      	cmp	r9, r0
 800275e:	d142      	bne.n	80027e6 <_malloc_r+0xea>
 8002760:	6821      	ldr	r1, [r4, #0]
 8002762:	4630      	mov	r0, r6
 8002764:	1a6d      	subs	r5, r5, r1
 8002766:	4629      	mov	r1, r5
 8002768:	f7ff ffa6 	bl	80026b8 <sbrk_aligned>
 800276c:	3001      	adds	r0, #1
 800276e:	d03a      	beq.n	80027e6 <_malloc_r+0xea>
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	442b      	add	r3, r5
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	f8d8 3000 	ldr.w	r3, [r8]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	bb62      	cbnz	r2, 80027d8 <_malloc_r+0xdc>
 800277e:	f8c8 7000 	str.w	r7, [r8]
 8002782:	e00f      	b.n	80027a4 <_malloc_r+0xa8>
 8002784:	6822      	ldr	r2, [r4, #0]
 8002786:	1b52      	subs	r2, r2, r5
 8002788:	d420      	bmi.n	80027cc <_malloc_r+0xd0>
 800278a:	2a0b      	cmp	r2, #11
 800278c:	d917      	bls.n	80027be <_malloc_r+0xc2>
 800278e:	1961      	adds	r1, r4, r5
 8002790:	42a3      	cmp	r3, r4
 8002792:	6025      	str	r5, [r4, #0]
 8002794:	bf18      	it	ne
 8002796:	6059      	strne	r1, [r3, #4]
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	bf08      	it	eq
 800279c:	f8c8 1000 	streq.w	r1, [r8]
 80027a0:	5162      	str	r2, [r4, r5]
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	4630      	mov	r0, r6
 80027a6:	f000 f82f 	bl	8002808 <__malloc_unlock>
 80027aa:	f104 000b 	add.w	r0, r4, #11
 80027ae:	1d23      	adds	r3, r4, #4
 80027b0:	f020 0007 	bic.w	r0, r0, #7
 80027b4:	1ac2      	subs	r2, r0, r3
 80027b6:	bf1c      	itt	ne
 80027b8:	1a1b      	subne	r3, r3, r0
 80027ba:	50a3      	strne	r3, [r4, r2]
 80027bc:	e7af      	b.n	800271e <_malloc_r+0x22>
 80027be:	6862      	ldr	r2, [r4, #4]
 80027c0:	42a3      	cmp	r3, r4
 80027c2:	bf0c      	ite	eq
 80027c4:	f8c8 2000 	streq.w	r2, [r8]
 80027c8:	605a      	strne	r2, [r3, #4]
 80027ca:	e7eb      	b.n	80027a4 <_malloc_r+0xa8>
 80027cc:	4623      	mov	r3, r4
 80027ce:	6864      	ldr	r4, [r4, #4]
 80027d0:	e7ae      	b.n	8002730 <_malloc_r+0x34>
 80027d2:	463c      	mov	r4, r7
 80027d4:	687f      	ldr	r7, [r7, #4]
 80027d6:	e7b6      	b.n	8002746 <_malloc_r+0x4a>
 80027d8:	461a      	mov	r2, r3
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	42a3      	cmp	r3, r4
 80027de:	d1fb      	bne.n	80027d8 <_malloc_r+0xdc>
 80027e0:	2300      	movs	r3, #0
 80027e2:	6053      	str	r3, [r2, #4]
 80027e4:	e7de      	b.n	80027a4 <_malloc_r+0xa8>
 80027e6:	230c      	movs	r3, #12
 80027e8:	4630      	mov	r0, r6
 80027ea:	6033      	str	r3, [r6, #0]
 80027ec:	f000 f80c 	bl	8002808 <__malloc_unlock>
 80027f0:	e794      	b.n	800271c <_malloc_r+0x20>
 80027f2:	6005      	str	r5, [r0, #0]
 80027f4:	e7d6      	b.n	80027a4 <_malloc_r+0xa8>
 80027f6:	bf00      	nop
 80027f8:	20000434 	.word	0x20000434

080027fc <__malloc_lock>:
 80027fc:	4801      	ldr	r0, [pc, #4]	@ (8002804 <__malloc_lock+0x8>)
 80027fe:	f7ff bf03 	b.w	8002608 <__retarget_lock_acquire_recursive>
 8002802:	bf00      	nop
 8002804:	2000042c 	.word	0x2000042c

08002808 <__malloc_unlock>:
 8002808:	4801      	ldr	r0, [pc, #4]	@ (8002810 <__malloc_unlock+0x8>)
 800280a:	f7ff befe 	b.w	800260a <__retarget_lock_release_recursive>
 800280e:	bf00      	nop
 8002810:	2000042c 	.word	0x2000042c

08002814 <__ssputs_r>:
 8002814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002818:	461f      	mov	r7, r3
 800281a:	688e      	ldr	r6, [r1, #8]
 800281c:	4682      	mov	sl, r0
 800281e:	42be      	cmp	r6, r7
 8002820:	460c      	mov	r4, r1
 8002822:	4690      	mov	r8, r2
 8002824:	680b      	ldr	r3, [r1, #0]
 8002826:	d82d      	bhi.n	8002884 <__ssputs_r+0x70>
 8002828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800282c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002830:	d026      	beq.n	8002880 <__ssputs_r+0x6c>
 8002832:	6965      	ldr	r5, [r4, #20]
 8002834:	6909      	ldr	r1, [r1, #16]
 8002836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800283a:	eba3 0901 	sub.w	r9, r3, r1
 800283e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002842:	1c7b      	adds	r3, r7, #1
 8002844:	444b      	add	r3, r9
 8002846:	106d      	asrs	r5, r5, #1
 8002848:	429d      	cmp	r5, r3
 800284a:	bf38      	it	cc
 800284c:	461d      	movcc	r5, r3
 800284e:	0553      	lsls	r3, r2, #21
 8002850:	d527      	bpl.n	80028a2 <__ssputs_r+0x8e>
 8002852:	4629      	mov	r1, r5
 8002854:	f7ff ff52 	bl	80026fc <_malloc_r>
 8002858:	4606      	mov	r6, r0
 800285a:	b360      	cbz	r0, 80028b6 <__ssputs_r+0xa2>
 800285c:	464a      	mov	r2, r9
 800285e:	6921      	ldr	r1, [r4, #16]
 8002860:	f7ff fed4 	bl	800260c <memcpy>
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800286a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800286e:	81a3      	strh	r3, [r4, #12]
 8002870:	6126      	str	r6, [r4, #16]
 8002872:	444e      	add	r6, r9
 8002874:	6026      	str	r6, [r4, #0]
 8002876:	463e      	mov	r6, r7
 8002878:	6165      	str	r5, [r4, #20]
 800287a:	eba5 0509 	sub.w	r5, r5, r9
 800287e:	60a5      	str	r5, [r4, #8]
 8002880:	42be      	cmp	r6, r7
 8002882:	d900      	bls.n	8002886 <__ssputs_r+0x72>
 8002884:	463e      	mov	r6, r7
 8002886:	4632      	mov	r2, r6
 8002888:	4641      	mov	r1, r8
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	f000 fe35 	bl	80034fa <memmove>
 8002890:	2000      	movs	r0, #0
 8002892:	68a3      	ldr	r3, [r4, #8]
 8002894:	1b9b      	subs	r3, r3, r6
 8002896:	60a3      	str	r3, [r4, #8]
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	4433      	add	r3, r6
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a2:	462a      	mov	r2, r5
 80028a4:	f000 fe62 	bl	800356c <_realloc_r>
 80028a8:	4606      	mov	r6, r0
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d1e0      	bne.n	8002870 <__ssputs_r+0x5c>
 80028ae:	4650      	mov	r0, sl
 80028b0:	6921      	ldr	r1, [r4, #16]
 80028b2:	f7ff feb9 	bl	8002628 <_free_r>
 80028b6:	230c      	movs	r3, #12
 80028b8:	f8ca 3000 	str.w	r3, [sl]
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c6:	81a3      	strh	r3, [r4, #12]
 80028c8:	e7e9      	b.n	800289e <__ssputs_r+0x8a>
	...

080028cc <_svfiprintf_r>:
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	4698      	mov	r8, r3
 80028d2:	898b      	ldrh	r3, [r1, #12]
 80028d4:	4607      	mov	r7, r0
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	460d      	mov	r5, r1
 80028da:	4614      	mov	r4, r2
 80028dc:	b09d      	sub	sp, #116	@ 0x74
 80028de:	d510      	bpl.n	8002902 <_svfiprintf_r+0x36>
 80028e0:	690b      	ldr	r3, [r1, #16]
 80028e2:	b973      	cbnz	r3, 8002902 <_svfiprintf_r+0x36>
 80028e4:	2140      	movs	r1, #64	@ 0x40
 80028e6:	f7ff ff09 	bl	80026fc <_malloc_r>
 80028ea:	6028      	str	r0, [r5, #0]
 80028ec:	6128      	str	r0, [r5, #16]
 80028ee:	b930      	cbnz	r0, 80028fe <_svfiprintf_r+0x32>
 80028f0:	230c      	movs	r3, #12
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028f8:	b01d      	add	sp, #116	@ 0x74
 80028fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fe:	2340      	movs	r3, #64	@ 0x40
 8002900:	616b      	str	r3, [r5, #20]
 8002902:	2300      	movs	r3, #0
 8002904:	9309      	str	r3, [sp, #36]	@ 0x24
 8002906:	2320      	movs	r3, #32
 8002908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800290c:	2330      	movs	r3, #48	@ 0x30
 800290e:	f04f 0901 	mov.w	r9, #1
 8002912:	f8cd 800c 	str.w	r8, [sp, #12]
 8002916:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002ab0 <_svfiprintf_r+0x1e4>
 800291a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800291e:	4623      	mov	r3, r4
 8002920:	469a      	mov	sl, r3
 8002922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002926:	b10a      	cbz	r2, 800292c <_svfiprintf_r+0x60>
 8002928:	2a25      	cmp	r2, #37	@ 0x25
 800292a:	d1f9      	bne.n	8002920 <_svfiprintf_r+0x54>
 800292c:	ebba 0b04 	subs.w	fp, sl, r4
 8002930:	d00b      	beq.n	800294a <_svfiprintf_r+0x7e>
 8002932:	465b      	mov	r3, fp
 8002934:	4622      	mov	r2, r4
 8002936:	4629      	mov	r1, r5
 8002938:	4638      	mov	r0, r7
 800293a:	f7ff ff6b 	bl	8002814 <__ssputs_r>
 800293e:	3001      	adds	r0, #1
 8002940:	f000 80a7 	beq.w	8002a92 <_svfiprintf_r+0x1c6>
 8002944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002946:	445a      	add	r2, fp
 8002948:	9209      	str	r2, [sp, #36]	@ 0x24
 800294a:	f89a 3000 	ldrb.w	r3, [sl]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 809f 	beq.w	8002a92 <_svfiprintf_r+0x1c6>
 8002954:	2300      	movs	r3, #0
 8002956:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800295a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800295e:	f10a 0a01 	add.w	sl, sl, #1
 8002962:	9304      	str	r3, [sp, #16]
 8002964:	9307      	str	r3, [sp, #28]
 8002966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800296a:	931a      	str	r3, [sp, #104]	@ 0x68
 800296c:	4654      	mov	r4, sl
 800296e:	2205      	movs	r2, #5
 8002970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002974:	484e      	ldr	r0, [pc, #312]	@ (8002ab0 <_svfiprintf_r+0x1e4>)
 8002976:	f000 fdeb 	bl	8003550 <memchr>
 800297a:	9a04      	ldr	r2, [sp, #16]
 800297c:	b9d8      	cbnz	r0, 80029b6 <_svfiprintf_r+0xea>
 800297e:	06d0      	lsls	r0, r2, #27
 8002980:	bf44      	itt	mi
 8002982:	2320      	movmi	r3, #32
 8002984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002988:	0711      	lsls	r1, r2, #28
 800298a:	bf44      	itt	mi
 800298c:	232b      	movmi	r3, #43	@ 0x2b
 800298e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002992:	f89a 3000 	ldrb.w	r3, [sl]
 8002996:	2b2a      	cmp	r3, #42	@ 0x2a
 8002998:	d015      	beq.n	80029c6 <_svfiprintf_r+0xfa>
 800299a:	4654      	mov	r4, sl
 800299c:	2000      	movs	r0, #0
 800299e:	f04f 0c0a 	mov.w	ip, #10
 80029a2:	9a07      	ldr	r2, [sp, #28]
 80029a4:	4621      	mov	r1, r4
 80029a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029aa:	3b30      	subs	r3, #48	@ 0x30
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	d94b      	bls.n	8002a48 <_svfiprintf_r+0x17c>
 80029b0:	b1b0      	cbz	r0, 80029e0 <_svfiprintf_r+0x114>
 80029b2:	9207      	str	r2, [sp, #28]
 80029b4:	e014      	b.n	80029e0 <_svfiprintf_r+0x114>
 80029b6:	eba0 0308 	sub.w	r3, r0, r8
 80029ba:	fa09 f303 	lsl.w	r3, r9, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	46a2      	mov	sl, r4
 80029c2:	9304      	str	r3, [sp, #16]
 80029c4:	e7d2      	b.n	800296c <_svfiprintf_r+0xa0>
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	1d19      	adds	r1, r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	9103      	str	r1, [sp, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bfbb      	ittet	lt
 80029d2:	425b      	neglt	r3, r3
 80029d4:	f042 0202 	orrlt.w	r2, r2, #2
 80029d8:	9307      	strge	r3, [sp, #28]
 80029da:	9307      	strlt	r3, [sp, #28]
 80029dc:	bfb8      	it	lt
 80029de:	9204      	strlt	r2, [sp, #16]
 80029e0:	7823      	ldrb	r3, [r4, #0]
 80029e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80029e4:	d10a      	bne.n	80029fc <_svfiprintf_r+0x130>
 80029e6:	7863      	ldrb	r3, [r4, #1]
 80029e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80029ea:	d132      	bne.n	8002a52 <_svfiprintf_r+0x186>
 80029ec:	9b03      	ldr	r3, [sp, #12]
 80029ee:	3402      	adds	r4, #2
 80029f0:	1d1a      	adds	r2, r3, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	9203      	str	r2, [sp, #12]
 80029f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029fa:	9305      	str	r3, [sp, #20]
 80029fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002ab4 <_svfiprintf_r+0x1e8>
 8002a00:	2203      	movs	r2, #3
 8002a02:	4650      	mov	r0, sl
 8002a04:	7821      	ldrb	r1, [r4, #0]
 8002a06:	f000 fda3 	bl	8003550 <memchr>
 8002a0a:	b138      	cbz	r0, 8002a1c <_svfiprintf_r+0x150>
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	9b04      	ldr	r3, [sp, #16]
 8002a10:	eba0 000a 	sub.w	r0, r0, sl
 8002a14:	4082      	lsls	r2, r0
 8002a16:	4313      	orrs	r3, r2
 8002a18:	3401      	adds	r4, #1
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a20:	2206      	movs	r2, #6
 8002a22:	4825      	ldr	r0, [pc, #148]	@ (8002ab8 <_svfiprintf_r+0x1ec>)
 8002a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a28:	f000 fd92 	bl	8003550 <memchr>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d036      	beq.n	8002a9e <_svfiprintf_r+0x1d2>
 8002a30:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <_svfiprintf_r+0x1f0>)
 8002a32:	bb1b      	cbnz	r3, 8002a7c <_svfiprintf_r+0x1b0>
 8002a34:	9b03      	ldr	r3, [sp, #12]
 8002a36:	3307      	adds	r3, #7
 8002a38:	f023 0307 	bic.w	r3, r3, #7
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	9303      	str	r3, [sp, #12]
 8002a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a42:	4433      	add	r3, r6
 8002a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a46:	e76a      	b.n	800291e <_svfiprintf_r+0x52>
 8002a48:	460c      	mov	r4, r1
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a50:	e7a8      	b.n	80029a4 <_svfiprintf_r+0xd8>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 0c0a 	mov.w	ip, #10
 8002a58:	4619      	mov	r1, r3
 8002a5a:	3401      	adds	r4, #1
 8002a5c:	9305      	str	r3, [sp, #20]
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a64:	3a30      	subs	r2, #48	@ 0x30
 8002a66:	2a09      	cmp	r2, #9
 8002a68:	d903      	bls.n	8002a72 <_svfiprintf_r+0x1a6>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0c6      	beq.n	80029fc <_svfiprintf_r+0x130>
 8002a6e:	9105      	str	r1, [sp, #20]
 8002a70:	e7c4      	b.n	80029fc <_svfiprintf_r+0x130>
 8002a72:	4604      	mov	r4, r0
 8002a74:	2301      	movs	r3, #1
 8002a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a7a:	e7f0      	b.n	8002a5e <_svfiprintf_r+0x192>
 8002a7c:	ab03      	add	r3, sp, #12
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	462a      	mov	r2, r5
 8002a82:	4638      	mov	r0, r7
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <_svfiprintf_r+0x1f4>)
 8002a86:	a904      	add	r1, sp, #16
 8002a88:	f3af 8000 	nop.w
 8002a8c:	1c42      	adds	r2, r0, #1
 8002a8e:	4606      	mov	r6, r0
 8002a90:	d1d6      	bne.n	8002a40 <_svfiprintf_r+0x174>
 8002a92:	89ab      	ldrh	r3, [r5, #12]
 8002a94:	065b      	lsls	r3, r3, #25
 8002a96:	f53f af2d 	bmi.w	80028f4 <_svfiprintf_r+0x28>
 8002a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a9c:	e72c      	b.n	80028f8 <_svfiprintf_r+0x2c>
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <_svfiprintf_r+0x1f4>)
 8002aa8:	a904      	add	r1, sp, #16
 8002aaa:	f000 fa4b 	bl	8002f44 <_printf_i>
 8002aae:	e7ed      	b.n	8002a8c <_svfiprintf_r+0x1c0>
 8002ab0:	0800388a 	.word	0x0800388a
 8002ab4:	08003890 	.word	0x08003890
 8002ab8:	08003894 	.word	0x08003894
 8002abc:	00000000 	.word	0x00000000
 8002ac0:	08002815 	.word	0x08002815

08002ac4 <_sungetc_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	1c4b      	adds	r3, r1, #1
 8002ac8:	4614      	mov	r4, r2
 8002aca:	d103      	bne.n	8002ad4 <_sungetc_r+0x10>
 8002acc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
 8002ad4:	8993      	ldrh	r3, [r2, #12]
 8002ad6:	b2cd      	uxtb	r5, r1
 8002ad8:	f023 0320 	bic.w	r3, r3, #32
 8002adc:	8193      	strh	r3, [r2, #12]
 8002ade:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ae0:	6852      	ldr	r2, [r2, #4]
 8002ae2:	b18b      	cbz	r3, 8002b08 <_sungetc_r+0x44>
 8002ae4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	dd08      	ble.n	8002afc <_sungetc_r+0x38>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	6022      	str	r2, [r4, #0]
 8002af0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002af4:	6863      	ldr	r3, [r4, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	6063      	str	r3, [r4, #4]
 8002afa:	e7e9      	b.n	8002ad0 <_sungetc_r+0xc>
 8002afc:	4621      	mov	r1, r4
 8002afe:	f000 fcc4 	bl	800348a <__submore>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d0f1      	beq.n	8002aea <_sungetc_r+0x26>
 8002b06:	e7e1      	b.n	8002acc <_sungetc_r+0x8>
 8002b08:	6921      	ldr	r1, [r4, #16]
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	b151      	cbz	r1, 8002b24 <_sungetc_r+0x60>
 8002b0e:	4299      	cmp	r1, r3
 8002b10:	d208      	bcs.n	8002b24 <_sungetc_r+0x60>
 8002b12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002b16:	42a9      	cmp	r1, r5
 8002b18:	d104      	bne.n	8002b24 <_sungetc_r+0x60>
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	6023      	str	r3, [r4, #0]
 8002b20:	6062      	str	r2, [r4, #4]
 8002b22:	e7d5      	b.n	8002ad0 <_sungetc_r+0xc>
 8002b24:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8002b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b2e:	2303      	movs	r3, #3
 8002b30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002b32:	4623      	mov	r3, r4
 8002b34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e7dc      	b.n	8002af8 <_sungetc_r+0x34>

08002b3e <__ssrefill_r>:
 8002b3e:	b510      	push	{r4, lr}
 8002b40:	460c      	mov	r4, r1
 8002b42:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002b44:	b169      	cbz	r1, 8002b62 <__ssrefill_r+0x24>
 8002b46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	d001      	beq.n	8002b52 <__ssrefill_r+0x14>
 8002b4e:	f7ff fd6b 	bl	8002628 <_free_r>
 8002b52:	2000      	movs	r0, #0
 8002b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b56:	6360      	str	r0, [r4, #52]	@ 0x34
 8002b58:	6063      	str	r3, [r4, #4]
 8002b5a:	b113      	cbz	r3, 8002b62 <__ssrefill_r+0x24>
 8002b5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	6923      	ldr	r3, [r4, #16]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	81a3      	strh	r3, [r4, #12]
 8002b76:	e7f3      	b.n	8002b60 <__ssrefill_r+0x22>

08002b78 <__ssvfiscanf_r>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4606      	mov	r6, r0
 8002b82:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8002b86:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8002b8a:	49ab      	ldr	r1, [pc, #684]	@ (8002e38 <__ssvfiscanf_r+0x2c0>)
 8002b8c:	f10d 0804 	add.w	r8, sp, #4
 8002b90:	91a0      	str	r1, [sp, #640]	@ 0x280
 8002b92:	49aa      	ldr	r1, [pc, #680]	@ (8002e3c <__ssvfiscanf_r+0x2c4>)
 8002b94:	4faa      	ldr	r7, [pc, #680]	@ (8002e40 <__ssvfiscanf_r+0x2c8>)
 8002b96:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8002b9a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f892 9000 	ldrb.w	r9, [r2]
 8002ba2:	f1b9 0f00 	cmp.w	r9, #0
 8002ba6:	f000 8159 	beq.w	8002e5c <__ssvfiscanf_r+0x2e4>
 8002baa:	f817 3009 	ldrb.w	r3, [r7, r9]
 8002bae:	1c55      	adds	r5, r2, #1
 8002bb0:	f013 0308 	ands.w	r3, r3, #8
 8002bb4:	d019      	beq.n	8002bea <__ssvfiscanf_r+0x72>
 8002bb6:	6863      	ldr	r3, [r4, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	dd0f      	ble.n	8002bdc <__ssvfiscanf_r+0x64>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	5cba      	ldrb	r2, [r7, r2]
 8002bc2:	0712      	lsls	r2, r2, #28
 8002bc4:	d401      	bmi.n	8002bca <__ssvfiscanf_r+0x52>
 8002bc6:	462a      	mov	r2, r5
 8002bc8:	e7e9      	b.n	8002b9e <__ssvfiscanf_r+0x26>
 8002bca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002bcc:	3301      	adds	r3, #1
 8002bce:	3201      	adds	r2, #1
 8002bd0:	9245      	str	r2, [sp, #276]	@ 0x114
 8002bd2:	6862      	ldr	r2, [r4, #4]
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	6062      	str	r2, [r4, #4]
 8002bda:	e7ec      	b.n	8002bb6 <__ssvfiscanf_r+0x3e>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4630      	mov	r0, r6
 8002be0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002be2:	4798      	blx	r3
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d0e9      	beq.n	8002bbc <__ssvfiscanf_r+0x44>
 8002be8:	e7ed      	b.n	8002bc6 <__ssvfiscanf_r+0x4e>
 8002bea:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8002bee:	f040 8086 	bne.w	8002cfe <__ssvfiscanf_r+0x186>
 8002bf2:	9341      	str	r3, [sp, #260]	@ 0x104
 8002bf4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8002bf6:	7853      	ldrb	r3, [r2, #1]
 8002bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bfa:	bf04      	itt	eq
 8002bfc:	2310      	moveq	r3, #16
 8002bfe:	1c95      	addeq	r5, r2, #2
 8002c00:	f04f 020a 	mov.w	r2, #10
 8002c04:	bf08      	it	eq
 8002c06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002c08:	46aa      	mov	sl, r5
 8002c0a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002c0e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	d91e      	bls.n	8002c54 <__ssvfiscanf_r+0xdc>
 8002c16:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8002e44 <__ssvfiscanf_r+0x2cc>
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4658      	mov	r0, fp
 8002c1e:	f000 fc97 	bl	8003550 <memchr>
 8002c22:	b138      	cbz	r0, 8002c34 <__ssvfiscanf_r+0xbc>
 8002c24:	2301      	movs	r3, #1
 8002c26:	4655      	mov	r5, sl
 8002c28:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002c2a:	eba0 000b 	sub.w	r0, r0, fp
 8002c2e:	4083      	lsls	r3, r0
 8002c30:	4313      	orrs	r3, r2
 8002c32:	9341      	str	r3, [sp, #260]	@ 0x104
 8002c34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c38:	2b78      	cmp	r3, #120	@ 0x78
 8002c3a:	d806      	bhi.n	8002c4a <__ssvfiscanf_r+0xd2>
 8002c3c:	2b57      	cmp	r3, #87	@ 0x57
 8002c3e:	d810      	bhi.n	8002c62 <__ssvfiscanf_r+0xea>
 8002c40:	2b25      	cmp	r3, #37	@ 0x25
 8002c42:	d05c      	beq.n	8002cfe <__ssvfiscanf_r+0x186>
 8002c44:	d856      	bhi.n	8002cf4 <__ssvfiscanf_r+0x17c>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d074      	beq.n	8002d34 <__ssvfiscanf_r+0x1bc>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002c4e:	230a      	movs	r3, #10
 8002c50:	9342      	str	r3, [sp, #264]	@ 0x108
 8002c52:	e087      	b.n	8002d64 <__ssvfiscanf_r+0x1ec>
 8002c54:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8002c56:	4655      	mov	r5, sl
 8002c58:	fb02 1103 	mla	r1, r2, r3, r1
 8002c5c:	3930      	subs	r1, #48	@ 0x30
 8002c5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002c60:	e7d2      	b.n	8002c08 <__ssvfiscanf_r+0x90>
 8002c62:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8002c66:	2a20      	cmp	r2, #32
 8002c68:	d8ef      	bhi.n	8002c4a <__ssvfiscanf_r+0xd2>
 8002c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8002c70 <__ssvfiscanf_r+0xf8>)
 8002c6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002c70:	08002d43 	.word	0x08002d43
 8002c74:	08002c4b 	.word	0x08002c4b
 8002c78:	08002c4b 	.word	0x08002c4b
 8002c7c:	08002d9d 	.word	0x08002d9d
 8002c80:	08002c4b 	.word	0x08002c4b
 8002c84:	08002c4b 	.word	0x08002c4b
 8002c88:	08002c4b 	.word	0x08002c4b
 8002c8c:	08002c4b 	.word	0x08002c4b
 8002c90:	08002c4b 	.word	0x08002c4b
 8002c94:	08002c4b 	.word	0x08002c4b
 8002c98:	08002c4b 	.word	0x08002c4b
 8002c9c:	08002db3 	.word	0x08002db3
 8002ca0:	08002d99 	.word	0x08002d99
 8002ca4:	08002cfb 	.word	0x08002cfb
 8002ca8:	08002cfb 	.word	0x08002cfb
 8002cac:	08002cfb 	.word	0x08002cfb
 8002cb0:	08002c4b 	.word	0x08002c4b
 8002cb4:	08002d55 	.word	0x08002d55
 8002cb8:	08002c4b 	.word	0x08002c4b
 8002cbc:	08002c4b 	.word	0x08002c4b
 8002cc0:	08002c4b 	.word	0x08002c4b
 8002cc4:	08002c4b 	.word	0x08002c4b
 8002cc8:	08002dc3 	.word	0x08002dc3
 8002ccc:	08002d5d 	.word	0x08002d5d
 8002cd0:	08002d3b 	.word	0x08002d3b
 8002cd4:	08002c4b 	.word	0x08002c4b
 8002cd8:	08002c4b 	.word	0x08002c4b
 8002cdc:	08002dbf 	.word	0x08002dbf
 8002ce0:	08002c4b 	.word	0x08002c4b
 8002ce4:	08002d99 	.word	0x08002d99
 8002ce8:	08002c4b 	.word	0x08002c4b
 8002cec:	08002c4b 	.word	0x08002c4b
 8002cf0:	08002d43 	.word	0x08002d43
 8002cf4:	3b45      	subs	r3, #69	@ 0x45
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d8a7      	bhi.n	8002c4a <__ssvfiscanf_r+0xd2>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e031      	b.n	8002d62 <__ssvfiscanf_r+0x1ea>
 8002cfe:	6863      	ldr	r3, [r4, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dd0d      	ble.n	8002d20 <__ssvfiscanf_r+0x1a8>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	454a      	cmp	r2, r9
 8002d0a:	f040 80a7 	bne.w	8002e5c <__ssvfiscanf_r+0x2e4>
 8002d0e:	3301      	adds	r3, #1
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8002d16:	3a01      	subs	r2, #1
 8002d18:	3301      	adds	r3, #1
 8002d1a:	6062      	str	r2, [r4, #4]
 8002d1c:	9345      	str	r3, [sp, #276]	@ 0x114
 8002d1e:	e752      	b.n	8002bc6 <__ssvfiscanf_r+0x4e>
 8002d20:	4621      	mov	r1, r4
 8002d22:	4630      	mov	r0, r6
 8002d24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002d26:	4798      	blx	r3
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d0eb      	beq.n	8002d04 <__ssvfiscanf_r+0x18c>
 8002d2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f040 808c 	bne.w	8002e4c <__ssvfiscanf_r+0x2d4>
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d38:	e08c      	b.n	8002e54 <__ssvfiscanf_r+0x2dc>
 8002d3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	9241      	str	r2, [sp, #260]	@ 0x104
 8002d42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d48:	9241      	str	r2, [sp, #260]	@ 0x104
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8002d4e:	9242      	str	r2, [sp, #264]	@ 0x108
 8002d50:	d902      	bls.n	8002d58 <__ssvfiscanf_r+0x1e0>
 8002d52:	e005      	b.n	8002d60 <__ssvfiscanf_r+0x1e8>
 8002d54:	2300      	movs	r3, #0
 8002d56:	9342      	str	r3, [sp, #264]	@ 0x108
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e002      	b.n	8002d62 <__ssvfiscanf_r+0x1ea>
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8002d60:	2304      	movs	r3, #4
 8002d62:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002d64:	6863      	ldr	r3, [r4, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	dd39      	ble.n	8002dde <__ssvfiscanf_r+0x266>
 8002d6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002d6c:	0659      	lsls	r1, r3, #25
 8002d6e:	d404      	bmi.n	8002d7a <__ssvfiscanf_r+0x202>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	5cba      	ldrb	r2, [r7, r2]
 8002d76:	0712      	lsls	r2, r2, #28
 8002d78:	d438      	bmi.n	8002dec <__ssvfiscanf_r+0x274>
 8002d7a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	dc47      	bgt.n	8002e10 <__ssvfiscanf_r+0x298>
 8002d80:	466b      	mov	r3, sp
 8002d82:	4622      	mov	r2, r4
 8002d84:	4630      	mov	r0, r6
 8002d86:	a941      	add	r1, sp, #260	@ 0x104
 8002d88:	f000 f9fa 	bl	8003180 <_scanf_chars>
 8002d8c:	2801      	cmp	r0, #1
 8002d8e:	d065      	beq.n	8002e5c <__ssvfiscanf_r+0x2e4>
 8002d90:	2802      	cmp	r0, #2
 8002d92:	f47f af18 	bne.w	8002bc6 <__ssvfiscanf_r+0x4e>
 8002d96:	e7c9      	b.n	8002d2c <__ssvfiscanf_r+0x1b4>
 8002d98:	220a      	movs	r2, #10
 8002d9a:	e7d7      	b.n	8002d4c <__ssvfiscanf_r+0x1d4>
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	4640      	mov	r0, r8
 8002da0:	f000 fb3a 	bl	8003418 <__sccl>
 8002da4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002da6:	4605      	mov	r5, r0
 8002da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dac:	9341      	str	r3, [sp, #260]	@ 0x104
 8002dae:	2301      	movs	r3, #1
 8002db0:	e7d7      	b.n	8002d62 <__ssvfiscanf_r+0x1ea>
 8002db2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002db8:	9341      	str	r3, [sp, #260]	@ 0x104
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e7d1      	b.n	8002d62 <__ssvfiscanf_r+0x1ea>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e7cf      	b.n	8002d62 <__ssvfiscanf_r+0x1ea>
 8002dc2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002dc4:	06c3      	lsls	r3, r0, #27
 8002dc6:	f53f aefe 	bmi.w	8002bc6 <__ssvfiscanf_r+0x4e>
 8002dca:	9b00      	ldr	r3, [sp, #0]
 8002dcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002dce:	1d19      	adds	r1, r3, #4
 8002dd0:	9100      	str	r1, [sp, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	07c0      	lsls	r0, r0, #31
 8002dd6:	bf4c      	ite	mi
 8002dd8:	801a      	strhmi	r2, [r3, #0]
 8002dda:	601a      	strpl	r2, [r3, #0]
 8002ddc:	e6f3      	b.n	8002bc6 <__ssvfiscanf_r+0x4e>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4630      	mov	r0, r6
 8002de2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002de4:	4798      	blx	r3
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d0bf      	beq.n	8002d6a <__ssvfiscanf_r+0x1f2>
 8002dea:	e79f      	b.n	8002d2c <__ssvfiscanf_r+0x1b4>
 8002dec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002dee:	3201      	adds	r2, #1
 8002df0:	9245      	str	r2, [sp, #276]	@ 0x114
 8002df2:	6862      	ldr	r2, [r4, #4]
 8002df4:	3a01      	subs	r2, #1
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	6062      	str	r2, [r4, #4]
 8002dfa:	dd02      	ble.n	8002e02 <__ssvfiscanf_r+0x28a>
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	6023      	str	r3, [r4, #0]
 8002e00:	e7b6      	b.n	8002d70 <__ssvfiscanf_r+0x1f8>
 8002e02:	4621      	mov	r1, r4
 8002e04:	4630      	mov	r0, r6
 8002e06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002e08:	4798      	blx	r3
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d0b0      	beq.n	8002d70 <__ssvfiscanf_r+0x1f8>
 8002e0e:	e78d      	b.n	8002d2c <__ssvfiscanf_r+0x1b4>
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	dc06      	bgt.n	8002e22 <__ssvfiscanf_r+0x2aa>
 8002e14:	466b      	mov	r3, sp
 8002e16:	4622      	mov	r2, r4
 8002e18:	4630      	mov	r0, r6
 8002e1a:	a941      	add	r1, sp, #260	@ 0x104
 8002e1c:	f000 fa0a 	bl	8003234 <_scanf_i>
 8002e20:	e7b4      	b.n	8002d8c <__ssvfiscanf_r+0x214>
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <__ssvfiscanf_r+0x2d0>)
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f43f aece 	beq.w	8002bc6 <__ssvfiscanf_r+0x4e>
 8002e2a:	466b      	mov	r3, sp
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4630      	mov	r0, r6
 8002e30:	a941      	add	r1, sp, #260	@ 0x104
 8002e32:	f3af 8000 	nop.w
 8002e36:	e7a9      	b.n	8002d8c <__ssvfiscanf_r+0x214>
 8002e38:	08002ac5 	.word	0x08002ac5
 8002e3c:	08002b3f 	.word	0x08002b3f
 8002e40:	080038d9 	.word	0x080038d9
 8002e44:	08003890 	.word	0x08003890
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	065b      	lsls	r3, r3, #25
 8002e50:	f53f af70 	bmi.w	8002d34 <__ssvfiscanf_r+0x1bc>
 8002e54:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8002e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002e5e:	e7f9      	b.n	8002e54 <__ssvfiscanf_r+0x2dc>

08002e60 <_printf_common>:
 8002e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e64:	4616      	mov	r6, r2
 8002e66:	4698      	mov	r8, r3
 8002e68:	688a      	ldr	r2, [r1, #8]
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bfb8      	it	lt
 8002e72:	4613      	movlt	r3, r2
 8002e74:	6033      	str	r3, [r6, #0]
 8002e76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e80:	b10a      	cbz	r2, 8002e86 <_printf_common+0x26>
 8002e82:	3301      	adds	r3, #1
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	0699      	lsls	r1, r3, #26
 8002e8a:	bf42      	ittt	mi
 8002e8c:	6833      	ldrmi	r3, [r6, #0]
 8002e8e:	3302      	addmi	r3, #2
 8002e90:	6033      	strmi	r3, [r6, #0]
 8002e92:	6825      	ldr	r5, [r4, #0]
 8002e94:	f015 0506 	ands.w	r5, r5, #6
 8002e98:	d106      	bne.n	8002ea8 <_printf_common+0x48>
 8002e9a:	f104 0a19 	add.w	sl, r4, #25
 8002e9e:	68e3      	ldr	r3, [r4, #12]
 8002ea0:	6832      	ldr	r2, [r6, #0]
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	42ab      	cmp	r3, r5
 8002ea6:	dc2b      	bgt.n	8002f00 <_printf_common+0xa0>
 8002ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	3b00      	subs	r3, #0
 8002eb0:	bf18      	it	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	0692      	lsls	r2, r2, #26
 8002eb6:	d430      	bmi.n	8002f1a <_printf_common+0xba>
 8002eb8:	4641      	mov	r1, r8
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ec0:	47c8      	blx	r9
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	d023      	beq.n	8002f0e <_printf_common+0xae>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	6922      	ldr	r2, [r4, #16]
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf14      	ite	ne
 8002ed2:	2500      	movne	r5, #0
 8002ed4:	6833      	ldreq	r3, [r6, #0]
 8002ed6:	f04f 0600 	mov.w	r6, #0
 8002eda:	bf08      	it	eq
 8002edc:	68e5      	ldreq	r5, [r4, #12]
 8002ede:	f104 041a 	add.w	r4, r4, #26
 8002ee2:	bf08      	it	eq
 8002ee4:	1aed      	subeq	r5, r5, r3
 8002ee6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002eea:	bf08      	it	eq
 8002eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bfc4      	itt	gt
 8002ef4:	1a9b      	subgt	r3, r3, r2
 8002ef6:	18ed      	addgt	r5, r5, r3
 8002ef8:	42b5      	cmp	r5, r6
 8002efa:	d11a      	bne.n	8002f32 <_printf_common+0xd2>
 8002efc:	2000      	movs	r0, #0
 8002efe:	e008      	b.n	8002f12 <_printf_common+0xb2>
 8002f00:	2301      	movs	r3, #1
 8002f02:	4652      	mov	r2, sl
 8002f04:	4641      	mov	r1, r8
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c8      	blx	r9
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d103      	bne.n	8002f16 <_printf_common+0xb6>
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f16:	3501      	adds	r5, #1
 8002f18:	e7c1      	b.n	8002e9e <_printf_common+0x3e>
 8002f1a:	2030      	movs	r0, #48	@ 0x30
 8002f1c:	18e1      	adds	r1, r4, r3
 8002f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f28:	4422      	add	r2, r4
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f30:	e7c2      	b.n	8002eb8 <_printf_common+0x58>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4622      	mov	r2, r4
 8002f36:	4641      	mov	r1, r8
 8002f38:	4638      	mov	r0, r7
 8002f3a:	47c8      	blx	r9
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d0e6      	beq.n	8002f0e <_printf_common+0xae>
 8002f40:	3601      	adds	r6, #1
 8002f42:	e7d9      	b.n	8002ef8 <_printf_common+0x98>

08002f44 <_printf_i>:
 8002f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	7e0f      	ldrb	r7, [r1, #24]
 8002f4a:	4691      	mov	r9, r2
 8002f4c:	2f78      	cmp	r7, #120	@ 0x78
 8002f4e:	4680      	mov	r8, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	469a      	mov	sl, r3
 8002f54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f5a:	d807      	bhi.n	8002f6c <_printf_i+0x28>
 8002f5c:	2f62      	cmp	r7, #98	@ 0x62
 8002f5e:	d80a      	bhi.n	8002f76 <_printf_i+0x32>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	f000 80d1 	beq.w	8003108 <_printf_i+0x1c4>
 8002f66:	2f58      	cmp	r7, #88	@ 0x58
 8002f68:	f000 80b8 	beq.w	80030dc <_printf_i+0x198>
 8002f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f74:	e03a      	b.n	8002fec <_printf_i+0xa8>
 8002f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f7a:	2b15      	cmp	r3, #21
 8002f7c:	d8f6      	bhi.n	8002f6c <_printf_i+0x28>
 8002f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8002f84 <_printf_i+0x40>)
 8002f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002f6d 	.word	0x08002f6d
 8002f90:	08002f6d 	.word	0x08002f6d
 8002f94:	08002f6d 	.word	0x08002f6d
 8002f98:	08002f6d 	.word	0x08002f6d
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002f6d 	.word	0x08002f6d
 8002fa4:	08002f6d 	.word	0x08002f6d
 8002fa8:	08002f6d 	.word	0x08002f6d
 8002fac:	08002f6d 	.word	0x08002f6d
 8002fb0:	080030ef 	.word	0x080030ef
 8002fb4:	0800301b 	.word	0x0800301b
 8002fb8:	080030a9 	.word	0x080030a9
 8002fbc:	08002f6d 	.word	0x08002f6d
 8002fc0:	08002f6d 	.word	0x08002f6d
 8002fc4:	08003111 	.word	0x08003111
 8002fc8:	08002f6d 	.word	0x08002f6d
 8002fcc:	0800301b 	.word	0x0800301b
 8002fd0:	08002f6d 	.word	0x08002f6d
 8002fd4:	08002f6d 	.word	0x08002f6d
 8002fd8:	080030b1 	.word	0x080030b1
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6032      	str	r2, [r6, #0]
 8002fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fec:	2301      	movs	r3, #1
 8002fee:	e09c      	b.n	800312a <_printf_i+0x1e6>
 8002ff0:	6833      	ldr	r3, [r6, #0]
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	1d19      	adds	r1, r3, #4
 8002ff6:	6031      	str	r1, [r6, #0]
 8002ff8:	0606      	lsls	r6, r0, #24
 8002ffa:	d501      	bpl.n	8003000 <_printf_i+0xbc>
 8002ffc:	681d      	ldr	r5, [r3, #0]
 8002ffe:	e003      	b.n	8003008 <_printf_i+0xc4>
 8003000:	0645      	lsls	r5, r0, #25
 8003002:	d5fb      	bpl.n	8002ffc <_printf_i+0xb8>
 8003004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003008:	2d00      	cmp	r5, #0
 800300a:	da03      	bge.n	8003014 <_printf_i+0xd0>
 800300c:	232d      	movs	r3, #45	@ 0x2d
 800300e:	426d      	negs	r5, r5
 8003010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003014:	230a      	movs	r3, #10
 8003016:	4858      	ldr	r0, [pc, #352]	@ (8003178 <_printf_i+0x234>)
 8003018:	e011      	b.n	800303e <_printf_i+0xfa>
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	6833      	ldr	r3, [r6, #0]
 800301e:	0608      	lsls	r0, r1, #24
 8003020:	f853 5b04 	ldr.w	r5, [r3], #4
 8003024:	d402      	bmi.n	800302c <_printf_i+0xe8>
 8003026:	0649      	lsls	r1, r1, #25
 8003028:	bf48      	it	mi
 800302a:	b2ad      	uxthmi	r5, r5
 800302c:	2f6f      	cmp	r7, #111	@ 0x6f
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	bf14      	ite	ne
 8003032:	230a      	movne	r3, #10
 8003034:	2308      	moveq	r3, #8
 8003036:	4850      	ldr	r0, [pc, #320]	@ (8003178 <_printf_i+0x234>)
 8003038:	2100      	movs	r1, #0
 800303a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800303e:	6866      	ldr	r6, [r4, #4]
 8003040:	2e00      	cmp	r6, #0
 8003042:	60a6      	str	r6, [r4, #8]
 8003044:	db05      	blt.n	8003052 <_printf_i+0x10e>
 8003046:	6821      	ldr	r1, [r4, #0]
 8003048:	432e      	orrs	r6, r5
 800304a:	f021 0104 	bic.w	r1, r1, #4
 800304e:	6021      	str	r1, [r4, #0]
 8003050:	d04b      	beq.n	80030ea <_printf_i+0x1a6>
 8003052:	4616      	mov	r6, r2
 8003054:	fbb5 f1f3 	udiv	r1, r5, r3
 8003058:	fb03 5711 	mls	r7, r3, r1, r5
 800305c:	5dc7      	ldrb	r7, [r0, r7]
 800305e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003062:	462f      	mov	r7, r5
 8003064:	42bb      	cmp	r3, r7
 8003066:	460d      	mov	r5, r1
 8003068:	d9f4      	bls.n	8003054 <_printf_i+0x110>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d10b      	bne.n	8003086 <_printf_i+0x142>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	07df      	lsls	r7, r3, #31
 8003072:	d508      	bpl.n	8003086 <_printf_i+0x142>
 8003074:	6923      	ldr	r3, [r4, #16]
 8003076:	6861      	ldr	r1, [r4, #4]
 8003078:	4299      	cmp	r1, r3
 800307a:	bfde      	ittt	le
 800307c:	2330      	movle	r3, #48	@ 0x30
 800307e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003082:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003086:	1b92      	subs	r2, r2, r6
 8003088:	6122      	str	r2, [r4, #16]
 800308a:	464b      	mov	r3, r9
 800308c:	4621      	mov	r1, r4
 800308e:	4640      	mov	r0, r8
 8003090:	f8cd a000 	str.w	sl, [sp]
 8003094:	aa03      	add	r2, sp, #12
 8003096:	f7ff fee3 	bl	8002e60 <_printf_common>
 800309a:	3001      	adds	r0, #1
 800309c:	d14a      	bne.n	8003134 <_printf_i+0x1f0>
 800309e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a2:	b004      	add	sp, #16
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	2778      	movs	r7, #120	@ 0x78
 80030b2:	4832      	ldr	r0, [pc, #200]	@ (800317c <_printf_i+0x238>)
 80030b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	6831      	ldr	r1, [r6, #0]
 80030bc:	061f      	lsls	r7, r3, #24
 80030be:	f851 5b04 	ldr.w	r5, [r1], #4
 80030c2:	d402      	bmi.n	80030ca <_printf_i+0x186>
 80030c4:	065f      	lsls	r7, r3, #25
 80030c6:	bf48      	it	mi
 80030c8:	b2ad      	uxthmi	r5, r5
 80030ca:	6031      	str	r1, [r6, #0]
 80030cc:	07d9      	lsls	r1, r3, #31
 80030ce:	bf44      	itt	mi
 80030d0:	f043 0320 	orrmi.w	r3, r3, #32
 80030d4:	6023      	strmi	r3, [r4, #0]
 80030d6:	b11d      	cbz	r5, 80030e0 <_printf_i+0x19c>
 80030d8:	2310      	movs	r3, #16
 80030da:	e7ad      	b.n	8003038 <_printf_i+0xf4>
 80030dc:	4826      	ldr	r0, [pc, #152]	@ (8003178 <_printf_i+0x234>)
 80030de:	e7e9      	b.n	80030b4 <_printf_i+0x170>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	e7f6      	b.n	80030d8 <_printf_i+0x194>
 80030ea:	4616      	mov	r6, r2
 80030ec:	e7bd      	b.n	800306a <_printf_i+0x126>
 80030ee:	6833      	ldr	r3, [r6, #0]
 80030f0:	6825      	ldr	r5, [r4, #0]
 80030f2:	1d18      	adds	r0, r3, #4
 80030f4:	6961      	ldr	r1, [r4, #20]
 80030f6:	6030      	str	r0, [r6, #0]
 80030f8:	062e      	lsls	r6, r5, #24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	d501      	bpl.n	8003102 <_printf_i+0x1be>
 80030fe:	6019      	str	r1, [r3, #0]
 8003100:	e002      	b.n	8003108 <_printf_i+0x1c4>
 8003102:	0668      	lsls	r0, r5, #25
 8003104:	d5fb      	bpl.n	80030fe <_printf_i+0x1ba>
 8003106:	8019      	strh	r1, [r3, #0]
 8003108:	2300      	movs	r3, #0
 800310a:	4616      	mov	r6, r2
 800310c:	6123      	str	r3, [r4, #16]
 800310e:	e7bc      	b.n	800308a <_printf_i+0x146>
 8003110:	6833      	ldr	r3, [r6, #0]
 8003112:	2100      	movs	r1, #0
 8003114:	1d1a      	adds	r2, r3, #4
 8003116:	6032      	str	r2, [r6, #0]
 8003118:	681e      	ldr	r6, [r3, #0]
 800311a:	6862      	ldr	r2, [r4, #4]
 800311c:	4630      	mov	r0, r6
 800311e:	f000 fa17 	bl	8003550 <memchr>
 8003122:	b108      	cbz	r0, 8003128 <_printf_i+0x1e4>
 8003124:	1b80      	subs	r0, r0, r6
 8003126:	6060      	str	r0, [r4, #4]
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	2300      	movs	r3, #0
 800312e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003132:	e7aa      	b.n	800308a <_printf_i+0x146>
 8003134:	4632      	mov	r2, r6
 8003136:	4649      	mov	r1, r9
 8003138:	4640      	mov	r0, r8
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	47d0      	blx	sl
 800313e:	3001      	adds	r0, #1
 8003140:	d0ad      	beq.n	800309e <_printf_i+0x15a>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	079b      	lsls	r3, r3, #30
 8003146:	d413      	bmi.n	8003170 <_printf_i+0x22c>
 8003148:	68e0      	ldr	r0, [r4, #12]
 800314a:	9b03      	ldr	r3, [sp, #12]
 800314c:	4298      	cmp	r0, r3
 800314e:	bfb8      	it	lt
 8003150:	4618      	movlt	r0, r3
 8003152:	e7a6      	b.n	80030a2 <_printf_i+0x15e>
 8003154:	2301      	movs	r3, #1
 8003156:	4632      	mov	r2, r6
 8003158:	4649      	mov	r1, r9
 800315a:	4640      	mov	r0, r8
 800315c:	47d0      	blx	sl
 800315e:	3001      	adds	r0, #1
 8003160:	d09d      	beq.n	800309e <_printf_i+0x15a>
 8003162:	3501      	adds	r5, #1
 8003164:	68e3      	ldr	r3, [r4, #12]
 8003166:	9903      	ldr	r1, [sp, #12]
 8003168:	1a5b      	subs	r3, r3, r1
 800316a:	42ab      	cmp	r3, r5
 800316c:	dcf2      	bgt.n	8003154 <_printf_i+0x210>
 800316e:	e7eb      	b.n	8003148 <_printf_i+0x204>
 8003170:	2500      	movs	r5, #0
 8003172:	f104 0619 	add.w	r6, r4, #25
 8003176:	e7f5      	b.n	8003164 <_printf_i+0x220>
 8003178:	0800389b 	.word	0x0800389b
 800317c:	080038ac 	.word	0x080038ac

08003180 <_scanf_chars>:
 8003180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003184:	4615      	mov	r5, r2
 8003186:	688a      	ldr	r2, [r1, #8]
 8003188:	4680      	mov	r8, r0
 800318a:	460c      	mov	r4, r1
 800318c:	b932      	cbnz	r2, 800319c <_scanf_chars+0x1c>
 800318e:	698a      	ldr	r2, [r1, #24]
 8003190:	2a00      	cmp	r2, #0
 8003192:	bf14      	ite	ne
 8003194:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8003198:	2201      	moveq	r2, #1
 800319a:	608a      	str	r2, [r1, #8]
 800319c:	2700      	movs	r7, #0
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003230 <_scanf_chars+0xb0>
 80031a4:	06d1      	lsls	r1, r2, #27
 80031a6:	bf5f      	itttt	pl
 80031a8:	681a      	ldrpl	r2, [r3, #0]
 80031aa:	1d11      	addpl	r1, r2, #4
 80031ac:	6019      	strpl	r1, [r3, #0]
 80031ae:	6816      	ldrpl	r6, [r2, #0]
 80031b0:	69a0      	ldr	r0, [r4, #24]
 80031b2:	b188      	cbz	r0, 80031d8 <_scanf_chars+0x58>
 80031b4:	2801      	cmp	r0, #1
 80031b6:	d107      	bne.n	80031c8 <_scanf_chars+0x48>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	5c9b      	ldrb	r3, [r3, r2]
 80031c0:	b953      	cbnz	r3, 80031d8 <_scanf_chars+0x58>
 80031c2:	2f00      	cmp	r7, #0
 80031c4:	d031      	beq.n	800322a <_scanf_chars+0xaa>
 80031c6:	e022      	b.n	800320e <_scanf_chars+0x8e>
 80031c8:	2802      	cmp	r0, #2
 80031ca:	d120      	bne.n	800320e <_scanf_chars+0x8e>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80031d4:	071b      	lsls	r3, r3, #28
 80031d6:	d41a      	bmi.n	800320e <_scanf_chars+0x8e>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	3701      	adds	r7, #1
 80031dc:	06da      	lsls	r2, r3, #27
 80031de:	bf5e      	ittt	pl
 80031e0:	682b      	ldrpl	r3, [r5, #0]
 80031e2:	781b      	ldrbpl	r3, [r3, #0]
 80031e4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80031e8:	682a      	ldr	r2, [r5, #0]
 80031ea:	686b      	ldr	r3, [r5, #4]
 80031ec:	3201      	adds	r2, #1
 80031ee:	602a      	str	r2, [r5, #0]
 80031f0:	68a2      	ldr	r2, [r4, #8]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	3a01      	subs	r2, #1
 80031f6:	606b      	str	r3, [r5, #4]
 80031f8:	60a2      	str	r2, [r4, #8]
 80031fa:	b142      	cbz	r2, 800320e <_scanf_chars+0x8e>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	dcd7      	bgt.n	80031b0 <_scanf_chars+0x30>
 8003200:	4629      	mov	r1, r5
 8003202:	4640      	mov	r0, r8
 8003204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003208:	4798      	blx	r3
 800320a:	2800      	cmp	r0, #0
 800320c:	d0d0      	beq.n	80031b0 <_scanf_chars+0x30>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	f013 0310 	ands.w	r3, r3, #16
 8003214:	d105      	bne.n	8003222 <_scanf_chars+0xa2>
 8003216:	68e2      	ldr	r2, [r4, #12]
 8003218:	3201      	adds	r2, #1
 800321a:	60e2      	str	r2, [r4, #12]
 800321c:	69a2      	ldr	r2, [r4, #24]
 800321e:	b102      	cbz	r2, 8003222 <_scanf_chars+0xa2>
 8003220:	7033      	strb	r3, [r6, #0]
 8003222:	2000      	movs	r0, #0
 8003224:	6923      	ldr	r3, [r4, #16]
 8003226:	443b      	add	r3, r7
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322e:	bf00      	nop
 8003230:	080038d9 	.word	0x080038d9

08003234 <_scanf_i>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	460c      	mov	r4, r1
 800323a:	4698      	mov	r8, r3
 800323c:	4b72      	ldr	r3, [pc, #456]	@ (8003408 <_scanf_i+0x1d4>)
 800323e:	b087      	sub	sp, #28
 8003240:	4682      	mov	sl, r0
 8003242:	4616      	mov	r6, r2
 8003244:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003248:	ab03      	add	r3, sp, #12
 800324a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800324e:	4b6f      	ldr	r3, [pc, #444]	@ (800340c <_scanf_i+0x1d8>)
 8003250:	69a1      	ldr	r1, [r4, #24]
 8003252:	4a6f      	ldr	r2, [pc, #444]	@ (8003410 <_scanf_i+0x1dc>)
 8003254:	4627      	mov	r7, r4
 8003256:	2903      	cmp	r1, #3
 8003258:	bf08      	it	eq
 800325a:	461a      	moveq	r2, r3
 800325c:	68a3      	ldr	r3, [r4, #8]
 800325e:	9201      	str	r2, [sp, #4]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003266:	bf81      	itttt	hi
 8003268:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800326c:	eb03 0905 	addhi.w	r9, r3, r5
 8003270:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003274:	60a3      	strhi	r3, [r4, #8]
 8003276:	f857 3b1c 	ldr.w	r3, [r7], #28
 800327a:	bf98      	it	ls
 800327c:	f04f 0900 	movls.w	r9, #0
 8003280:	463d      	mov	r5, r7
 8003282:	f04f 0b00 	mov.w	fp, #0
 8003286:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	6831      	ldr	r1, [r6, #0]
 800328e:	ab03      	add	r3, sp, #12
 8003290:	2202      	movs	r2, #2
 8003292:	7809      	ldrb	r1, [r1, #0]
 8003294:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003298:	f000 f95a 	bl	8003550 <memchr>
 800329c:	b328      	cbz	r0, 80032ea <_scanf_i+0xb6>
 800329e:	f1bb 0f01 	cmp.w	fp, #1
 80032a2:	d159      	bne.n	8003358 <_scanf_i+0x124>
 80032a4:	6862      	ldr	r2, [r4, #4]
 80032a6:	b92a      	cbnz	r2, 80032b4 <_scanf_i+0x80>
 80032a8:	2108      	movs	r1, #8
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	6061      	str	r1, [r4, #4]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b2:	6022      	str	r2, [r4, #0]
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80032ba:	6022      	str	r2, [r4, #0]
 80032bc:	68a2      	ldr	r2, [r4, #8]
 80032be:	1e51      	subs	r1, r2, #1
 80032c0:	60a1      	str	r1, [r4, #8]
 80032c2:	b192      	cbz	r2, 80032ea <_scanf_i+0xb6>
 80032c4:	6832      	ldr	r2, [r6, #0]
 80032c6:	1c51      	adds	r1, r2, #1
 80032c8:	6031      	str	r1, [r6, #0]
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	f805 2b01 	strb.w	r2, [r5], #1
 80032d0:	6872      	ldr	r2, [r6, #4]
 80032d2:	3a01      	subs	r2, #1
 80032d4:	2a00      	cmp	r2, #0
 80032d6:	6072      	str	r2, [r6, #4]
 80032d8:	dc07      	bgt.n	80032ea <_scanf_i+0xb6>
 80032da:	4631      	mov	r1, r6
 80032dc:	4650      	mov	r0, sl
 80032de:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80032e2:	4790      	blx	r2
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f040 8085 	bne.w	80033f4 <_scanf_i+0x1c0>
 80032ea:	f10b 0b01 	add.w	fp, fp, #1
 80032ee:	f1bb 0f03 	cmp.w	fp, #3
 80032f2:	d1cb      	bne.n	800328c <_scanf_i+0x58>
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	b90b      	cbnz	r3, 80032fc <_scanf_i+0xc8>
 80032f8:	230a      	movs	r3, #10
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	6863      	ldr	r3, [r4, #4]
 80032fe:	4945      	ldr	r1, [pc, #276]	@ (8003414 <_scanf_i+0x1e0>)
 8003300:	6960      	ldr	r0, [r4, #20]
 8003302:	1ac9      	subs	r1, r1, r3
 8003304:	f000 f888 	bl	8003418 <__sccl>
 8003308:	f04f 0b00 	mov.w	fp, #0
 800330c:	68a3      	ldr	r3, [r4, #8]
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03d      	beq.n	8003390 <_scanf_i+0x15c>
 8003314:	6831      	ldr	r1, [r6, #0]
 8003316:	6960      	ldr	r0, [r4, #20]
 8003318:	f891 c000 	ldrb.w	ip, [r1]
 800331c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003320:	2800      	cmp	r0, #0
 8003322:	d035      	beq.n	8003390 <_scanf_i+0x15c>
 8003324:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003328:	d124      	bne.n	8003374 <_scanf_i+0x140>
 800332a:	0510      	lsls	r0, r2, #20
 800332c:	d522      	bpl.n	8003374 <_scanf_i+0x140>
 800332e:	f10b 0b01 	add.w	fp, fp, #1
 8003332:	f1b9 0f00 	cmp.w	r9, #0
 8003336:	d003      	beq.n	8003340 <_scanf_i+0x10c>
 8003338:	3301      	adds	r3, #1
 800333a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800333e:	60a3      	str	r3, [r4, #8]
 8003340:	6873      	ldr	r3, [r6, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	6073      	str	r3, [r6, #4]
 8003348:	dd1b      	ble.n	8003382 <_scanf_i+0x14e>
 800334a:	6833      	ldr	r3, [r6, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	6033      	str	r3, [r6, #0]
 8003350:	68a3      	ldr	r3, [r4, #8]
 8003352:	3b01      	subs	r3, #1
 8003354:	60a3      	str	r3, [r4, #8]
 8003356:	e7d9      	b.n	800330c <_scanf_i+0xd8>
 8003358:	f1bb 0f02 	cmp.w	fp, #2
 800335c:	d1ae      	bne.n	80032bc <_scanf_i+0x88>
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003364:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003368:	d1c4      	bne.n	80032f4 <_scanf_i+0xc0>
 800336a:	2110      	movs	r1, #16
 800336c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003370:	6061      	str	r1, [r4, #4]
 8003372:	e7a2      	b.n	80032ba <_scanf_i+0x86>
 8003374:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003378:	6022      	str	r2, [r4, #0]
 800337a:	780b      	ldrb	r3, [r1, #0]
 800337c:	f805 3b01 	strb.w	r3, [r5], #1
 8003380:	e7de      	b.n	8003340 <_scanf_i+0x10c>
 8003382:	4631      	mov	r1, r6
 8003384:	4650      	mov	r0, sl
 8003386:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800338a:	4798      	blx	r3
 800338c:	2800      	cmp	r0, #0
 800338e:	d0df      	beq.n	8003350 <_scanf_i+0x11c>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	05d9      	lsls	r1, r3, #23
 8003394:	d50d      	bpl.n	80033b2 <_scanf_i+0x17e>
 8003396:	42bd      	cmp	r5, r7
 8003398:	d909      	bls.n	80033ae <_scanf_i+0x17a>
 800339a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800339e:	4632      	mov	r2, r6
 80033a0:	4650      	mov	r0, sl
 80033a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80033a6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80033aa:	4798      	blx	r3
 80033ac:	464d      	mov	r5, r9
 80033ae:	42bd      	cmp	r5, r7
 80033b0:	d028      	beq.n	8003404 <_scanf_i+0x1d0>
 80033b2:	6822      	ldr	r2, [r4, #0]
 80033b4:	f012 0210 	ands.w	r2, r2, #16
 80033b8:	d113      	bne.n	80033e2 <_scanf_i+0x1ae>
 80033ba:	702a      	strb	r2, [r5, #0]
 80033bc:	4639      	mov	r1, r7
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	4650      	mov	r0, sl
 80033c2:	9e01      	ldr	r6, [sp, #4]
 80033c4:	47b0      	blx	r6
 80033c6:	f8d8 3000 	ldr.w	r3, [r8]
 80033ca:	6821      	ldr	r1, [r4, #0]
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	f8c8 2000 	str.w	r2, [r8]
 80033d2:	f011 0f20 	tst.w	r1, #32
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	d00f      	beq.n	80033fa <_scanf_i+0x1c6>
 80033da:	6018      	str	r0, [r3, #0]
 80033dc:	68e3      	ldr	r3, [r4, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60e3      	str	r3, [r4, #12]
 80033e2:	2000      	movs	r0, #0
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	1bed      	subs	r5, r5, r7
 80033e8:	445d      	add	r5, fp
 80033ea:	442b      	add	r3, r5
 80033ec:	6123      	str	r3, [r4, #16]
 80033ee:	b007      	add	sp, #28
 80033f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f4:	f04f 0b00 	mov.w	fp, #0
 80033f8:	e7ca      	b.n	8003390 <_scanf_i+0x15c>
 80033fa:	07ca      	lsls	r2, r1, #31
 80033fc:	bf4c      	ite	mi
 80033fe:	8018      	strhmi	r0, [r3, #0]
 8003400:	6018      	strpl	r0, [r3, #0]
 8003402:	e7eb      	b.n	80033dc <_scanf_i+0x1a8>
 8003404:	2001      	movs	r0, #1
 8003406:	e7f2      	b.n	80033ee <_scanf_i+0x1ba>
 8003408:	08003854 	.word	0x08003854
 800340c:	080036bd 	.word	0x080036bd
 8003410:	0800379d 	.word	0x0800379d
 8003414:	080038cd 	.word	0x080038cd

08003418 <__sccl>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	780b      	ldrb	r3, [r1, #0]
 800341c:	4604      	mov	r4, r0
 800341e:	2b5e      	cmp	r3, #94	@ 0x5e
 8003420:	bf0b      	itete	eq
 8003422:	784b      	ldrbeq	r3, [r1, #1]
 8003424:	1c4a      	addne	r2, r1, #1
 8003426:	1c8a      	addeq	r2, r1, #2
 8003428:	2100      	movne	r1, #0
 800342a:	bf08      	it	eq
 800342c:	2101      	moveq	r1, #1
 800342e:	3801      	subs	r0, #1
 8003430:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003434:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003438:	42a8      	cmp	r0, r5
 800343a:	d1fb      	bne.n	8003434 <__sccl+0x1c>
 800343c:	b90b      	cbnz	r3, 8003442 <__sccl+0x2a>
 800343e:	1e50      	subs	r0, r2, #1
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	f081 0101 	eor.w	r1, r1, #1
 8003446:	4610      	mov	r0, r2
 8003448:	54e1      	strb	r1, [r4, r3]
 800344a:	4602      	mov	r2, r0
 800344c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003450:	2d2d      	cmp	r5, #45	@ 0x2d
 8003452:	d005      	beq.n	8003460 <__sccl+0x48>
 8003454:	2d5d      	cmp	r5, #93	@ 0x5d
 8003456:	d016      	beq.n	8003486 <__sccl+0x6e>
 8003458:	2d00      	cmp	r5, #0
 800345a:	d0f1      	beq.n	8003440 <__sccl+0x28>
 800345c:	462b      	mov	r3, r5
 800345e:	e7f2      	b.n	8003446 <__sccl+0x2e>
 8003460:	7846      	ldrb	r6, [r0, #1]
 8003462:	2e5d      	cmp	r6, #93	@ 0x5d
 8003464:	d0fa      	beq.n	800345c <__sccl+0x44>
 8003466:	42b3      	cmp	r3, r6
 8003468:	dcf8      	bgt.n	800345c <__sccl+0x44>
 800346a:	461a      	mov	r2, r3
 800346c:	3002      	adds	r0, #2
 800346e:	3201      	adds	r2, #1
 8003470:	4296      	cmp	r6, r2
 8003472:	54a1      	strb	r1, [r4, r2]
 8003474:	dcfb      	bgt.n	800346e <__sccl+0x56>
 8003476:	1af2      	subs	r2, r6, r3
 8003478:	3a01      	subs	r2, #1
 800347a:	42b3      	cmp	r3, r6
 800347c:	bfa8      	it	ge
 800347e:	2200      	movge	r2, #0
 8003480:	1c5d      	adds	r5, r3, #1
 8003482:	18ab      	adds	r3, r5, r2
 8003484:	e7e1      	b.n	800344a <__sccl+0x32>
 8003486:	4610      	mov	r0, r2
 8003488:	e7da      	b.n	8003440 <__sccl+0x28>

0800348a <__submore>:
 800348a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348e:	460c      	mov	r4, r1
 8003490:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003496:	4299      	cmp	r1, r3
 8003498:	d11b      	bne.n	80034d2 <__submore+0x48>
 800349a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800349e:	f7ff f92d 	bl	80026fc <_malloc_r>
 80034a2:	b918      	cbnz	r0, 80034ac <__submore+0x22>
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80034b2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80034b6:	6360      	str	r0, [r4, #52]	@ 0x34
 80034b8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80034bc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80034c0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80034c4:	7043      	strb	r3, [r0, #1]
 80034c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80034ca:	7003      	strb	r3, [r0, #0]
 80034cc:	6020      	str	r0, [r4, #0]
 80034ce:	2000      	movs	r0, #0
 80034d0:	e7ea      	b.n	80034a8 <__submore+0x1e>
 80034d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80034d4:	0077      	lsls	r7, r6, #1
 80034d6:	463a      	mov	r2, r7
 80034d8:	f000 f848 	bl	800356c <_realloc_r>
 80034dc:	4605      	mov	r5, r0
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0e0      	beq.n	80034a4 <__submore+0x1a>
 80034e2:	eb00 0806 	add.w	r8, r0, r6
 80034e6:	4601      	mov	r1, r0
 80034e8:	4632      	mov	r2, r6
 80034ea:	4640      	mov	r0, r8
 80034ec:	f7ff f88e 	bl	800260c <memcpy>
 80034f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80034f4:	f8c4 8000 	str.w	r8, [r4]
 80034f8:	e7e9      	b.n	80034ce <__submore+0x44>

080034fa <memmove>:
 80034fa:	4288      	cmp	r0, r1
 80034fc:	b510      	push	{r4, lr}
 80034fe:	eb01 0402 	add.w	r4, r1, r2
 8003502:	d902      	bls.n	800350a <memmove+0x10>
 8003504:	4284      	cmp	r4, r0
 8003506:	4623      	mov	r3, r4
 8003508:	d807      	bhi.n	800351a <memmove+0x20>
 800350a:	1e43      	subs	r3, r0, #1
 800350c:	42a1      	cmp	r1, r4
 800350e:	d008      	beq.n	8003522 <memmove+0x28>
 8003510:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003514:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003518:	e7f8      	b.n	800350c <memmove+0x12>
 800351a:	4601      	mov	r1, r0
 800351c:	4402      	add	r2, r0
 800351e:	428a      	cmp	r2, r1
 8003520:	d100      	bne.n	8003524 <memmove+0x2a>
 8003522:	bd10      	pop	{r4, pc}
 8003524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003528:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800352c:	e7f7      	b.n	800351e <memmove+0x24>
	...

08003530 <_sbrk_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	2300      	movs	r3, #0
 8003534:	4d05      	ldr	r5, [pc, #20]	@ (800354c <_sbrk_r+0x1c>)
 8003536:	4604      	mov	r4, r0
 8003538:	4608      	mov	r0, r1
 800353a:	602b      	str	r3, [r5, #0]
 800353c:	f7fd fa22 	bl	8000984 <_sbrk>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d102      	bne.n	800354a <_sbrk_r+0x1a>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	b103      	cbz	r3, 800354a <_sbrk_r+0x1a>
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	bd38      	pop	{r3, r4, r5, pc}
 800354c:	20000428 	.word	0x20000428

08003550 <memchr>:
 8003550:	4603      	mov	r3, r0
 8003552:	b510      	push	{r4, lr}
 8003554:	b2c9      	uxtb	r1, r1
 8003556:	4402      	add	r2, r0
 8003558:	4293      	cmp	r3, r2
 800355a:	4618      	mov	r0, r3
 800355c:	d101      	bne.n	8003562 <memchr+0x12>
 800355e:	2000      	movs	r0, #0
 8003560:	e003      	b.n	800356a <memchr+0x1a>
 8003562:	7804      	ldrb	r4, [r0, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	428c      	cmp	r4, r1
 8003568:	d1f6      	bne.n	8003558 <memchr+0x8>
 800356a:	bd10      	pop	{r4, pc}

0800356c <_realloc_r>:
 800356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003570:	4607      	mov	r7, r0
 8003572:	4614      	mov	r4, r2
 8003574:	460d      	mov	r5, r1
 8003576:	b921      	cbnz	r1, 8003582 <_realloc_r+0x16>
 8003578:	4611      	mov	r1, r2
 800357a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	f7ff b8bd 	b.w	80026fc <_malloc_r>
 8003582:	b92a      	cbnz	r2, 8003590 <_realloc_r+0x24>
 8003584:	f7ff f850 	bl	8002628 <_free_r>
 8003588:	4625      	mov	r5, r4
 800358a:	4628      	mov	r0, r5
 800358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003590:	f000 f906 	bl	80037a0 <_malloc_usable_size_r>
 8003594:	4284      	cmp	r4, r0
 8003596:	4606      	mov	r6, r0
 8003598:	d802      	bhi.n	80035a0 <_realloc_r+0x34>
 800359a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800359e:	d8f4      	bhi.n	800358a <_realloc_r+0x1e>
 80035a0:	4621      	mov	r1, r4
 80035a2:	4638      	mov	r0, r7
 80035a4:	f7ff f8aa 	bl	80026fc <_malloc_r>
 80035a8:	4680      	mov	r8, r0
 80035aa:	b908      	cbnz	r0, 80035b0 <_realloc_r+0x44>
 80035ac:	4645      	mov	r5, r8
 80035ae:	e7ec      	b.n	800358a <_realloc_r+0x1e>
 80035b0:	42b4      	cmp	r4, r6
 80035b2:	4622      	mov	r2, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	bf28      	it	cs
 80035b8:	4632      	movcs	r2, r6
 80035ba:	f7ff f827 	bl	800260c <memcpy>
 80035be:	4629      	mov	r1, r5
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff f831 	bl	8002628 <_free_r>
 80035c6:	e7f1      	b.n	80035ac <_realloc_r+0x40>

080035c8 <_strtol_l.isra.0>:
 80035c8:	2b24      	cmp	r3, #36	@ 0x24
 80035ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ce:	4686      	mov	lr, r0
 80035d0:	4690      	mov	r8, r2
 80035d2:	d801      	bhi.n	80035d8 <_strtol_l.isra.0+0x10>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <_strtol_l.isra.0+0x1e>
 80035d8:	f7fe ffec 	bl	80025b4 <__errno>
 80035dc:	2316      	movs	r3, #22
 80035de:	6003      	str	r3, [r0, #0]
 80035e0:	2000      	movs	r0, #0
 80035e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e6:	460d      	mov	r5, r1
 80035e8:	4833      	ldr	r0, [pc, #204]	@ (80036b8 <_strtol_l.isra.0+0xf0>)
 80035ea:	462a      	mov	r2, r5
 80035ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035f0:	5d06      	ldrb	r6, [r0, r4]
 80035f2:	f016 0608 	ands.w	r6, r6, #8
 80035f6:	d1f8      	bne.n	80035ea <_strtol_l.isra.0+0x22>
 80035f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80035fa:	d110      	bne.n	800361e <_strtol_l.isra.0+0x56>
 80035fc:	2601      	movs	r6, #1
 80035fe:	782c      	ldrb	r4, [r5, #0]
 8003600:	1c95      	adds	r5, r2, #2
 8003602:	f033 0210 	bics.w	r2, r3, #16
 8003606:	d115      	bne.n	8003634 <_strtol_l.isra.0+0x6c>
 8003608:	2c30      	cmp	r4, #48	@ 0x30
 800360a:	d10d      	bne.n	8003628 <_strtol_l.isra.0+0x60>
 800360c:	782a      	ldrb	r2, [r5, #0]
 800360e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003612:	2a58      	cmp	r2, #88	@ 0x58
 8003614:	d108      	bne.n	8003628 <_strtol_l.isra.0+0x60>
 8003616:	786c      	ldrb	r4, [r5, #1]
 8003618:	3502      	adds	r5, #2
 800361a:	2310      	movs	r3, #16
 800361c:	e00a      	b.n	8003634 <_strtol_l.isra.0+0x6c>
 800361e:	2c2b      	cmp	r4, #43	@ 0x2b
 8003620:	bf04      	itt	eq
 8003622:	782c      	ldrbeq	r4, [r5, #0]
 8003624:	1c95      	addeq	r5, r2, #2
 8003626:	e7ec      	b.n	8003602 <_strtol_l.isra.0+0x3a>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f6      	bne.n	800361a <_strtol_l.isra.0+0x52>
 800362c:	2c30      	cmp	r4, #48	@ 0x30
 800362e:	bf14      	ite	ne
 8003630:	230a      	movne	r3, #10
 8003632:	2308      	moveq	r3, #8
 8003634:	2200      	movs	r2, #0
 8003636:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800363a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800363e:	fbbc f9f3 	udiv	r9, ip, r3
 8003642:	4610      	mov	r0, r2
 8003644:	fb03 ca19 	mls	sl, r3, r9, ip
 8003648:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800364c:	2f09      	cmp	r7, #9
 800364e:	d80f      	bhi.n	8003670 <_strtol_l.isra.0+0xa8>
 8003650:	463c      	mov	r4, r7
 8003652:	42a3      	cmp	r3, r4
 8003654:	dd1b      	ble.n	800368e <_strtol_l.isra.0+0xc6>
 8003656:	1c57      	adds	r7, r2, #1
 8003658:	d007      	beq.n	800366a <_strtol_l.isra.0+0xa2>
 800365a:	4581      	cmp	r9, r0
 800365c:	d314      	bcc.n	8003688 <_strtol_l.isra.0+0xc0>
 800365e:	d101      	bne.n	8003664 <_strtol_l.isra.0+0x9c>
 8003660:	45a2      	cmp	sl, r4
 8003662:	db11      	blt.n	8003688 <_strtol_l.isra.0+0xc0>
 8003664:	2201      	movs	r2, #1
 8003666:	fb00 4003 	mla	r0, r0, r3, r4
 800366a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800366e:	e7eb      	b.n	8003648 <_strtol_l.isra.0+0x80>
 8003670:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003674:	2f19      	cmp	r7, #25
 8003676:	d801      	bhi.n	800367c <_strtol_l.isra.0+0xb4>
 8003678:	3c37      	subs	r4, #55	@ 0x37
 800367a:	e7ea      	b.n	8003652 <_strtol_l.isra.0+0x8a>
 800367c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003680:	2f19      	cmp	r7, #25
 8003682:	d804      	bhi.n	800368e <_strtol_l.isra.0+0xc6>
 8003684:	3c57      	subs	r4, #87	@ 0x57
 8003686:	e7e4      	b.n	8003652 <_strtol_l.isra.0+0x8a>
 8003688:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800368c:	e7ed      	b.n	800366a <_strtol_l.isra.0+0xa2>
 800368e:	1c53      	adds	r3, r2, #1
 8003690:	d108      	bne.n	80036a4 <_strtol_l.isra.0+0xdc>
 8003692:	2322      	movs	r3, #34	@ 0x22
 8003694:	4660      	mov	r0, ip
 8003696:	f8ce 3000 	str.w	r3, [lr]
 800369a:	f1b8 0f00 	cmp.w	r8, #0
 800369e:	d0a0      	beq.n	80035e2 <_strtol_l.isra.0+0x1a>
 80036a0:	1e69      	subs	r1, r5, #1
 80036a2:	e006      	b.n	80036b2 <_strtol_l.isra.0+0xea>
 80036a4:	b106      	cbz	r6, 80036a8 <_strtol_l.isra.0+0xe0>
 80036a6:	4240      	negs	r0, r0
 80036a8:	f1b8 0f00 	cmp.w	r8, #0
 80036ac:	d099      	beq.n	80035e2 <_strtol_l.isra.0+0x1a>
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d1f6      	bne.n	80036a0 <_strtol_l.isra.0+0xd8>
 80036b2:	f8c8 1000 	str.w	r1, [r8]
 80036b6:	e794      	b.n	80035e2 <_strtol_l.isra.0+0x1a>
 80036b8:	080038d9 	.word	0x080038d9

080036bc <_strtol_r>:
 80036bc:	f7ff bf84 	b.w	80035c8 <_strtol_l.isra.0>

080036c0 <_strtoul_l.isra.0>:
 80036c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036c4:	4686      	mov	lr, r0
 80036c6:	460d      	mov	r5, r1
 80036c8:	4e33      	ldr	r6, [pc, #204]	@ (8003798 <_strtoul_l.isra.0+0xd8>)
 80036ca:	4628      	mov	r0, r5
 80036cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036d0:	5d37      	ldrb	r7, [r6, r4]
 80036d2:	f017 0708 	ands.w	r7, r7, #8
 80036d6:	d1f8      	bne.n	80036ca <_strtoul_l.isra.0+0xa>
 80036d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80036da:	d110      	bne.n	80036fe <_strtoul_l.isra.0+0x3e>
 80036dc:	2701      	movs	r7, #1
 80036de:	782c      	ldrb	r4, [r5, #0]
 80036e0:	1c85      	adds	r5, r0, #2
 80036e2:	f033 0010 	bics.w	r0, r3, #16
 80036e6:	d115      	bne.n	8003714 <_strtoul_l.isra.0+0x54>
 80036e8:	2c30      	cmp	r4, #48	@ 0x30
 80036ea:	d10d      	bne.n	8003708 <_strtoul_l.isra.0+0x48>
 80036ec:	7828      	ldrb	r0, [r5, #0]
 80036ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80036f2:	2858      	cmp	r0, #88	@ 0x58
 80036f4:	d108      	bne.n	8003708 <_strtoul_l.isra.0+0x48>
 80036f6:	786c      	ldrb	r4, [r5, #1]
 80036f8:	3502      	adds	r5, #2
 80036fa:	2310      	movs	r3, #16
 80036fc:	e00a      	b.n	8003714 <_strtoul_l.isra.0+0x54>
 80036fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8003700:	bf04      	itt	eq
 8003702:	782c      	ldrbeq	r4, [r5, #0]
 8003704:	1c85      	addeq	r5, r0, #2
 8003706:	e7ec      	b.n	80036e2 <_strtoul_l.isra.0+0x22>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f6      	bne.n	80036fa <_strtoul_l.isra.0+0x3a>
 800370c:	2c30      	cmp	r4, #48	@ 0x30
 800370e:	bf14      	ite	ne
 8003710:	230a      	movne	r3, #10
 8003712:	2308      	moveq	r3, #8
 8003714:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8003718:	fbb8 f8f3 	udiv	r8, r8, r3
 800371c:	2600      	movs	r6, #0
 800371e:	fb03 f908 	mul.w	r9, r3, r8
 8003722:	4630      	mov	r0, r6
 8003724:	ea6f 0909 	mvn.w	r9, r9
 8003728:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800372c:	f1bc 0f09 	cmp.w	ip, #9
 8003730:	d810      	bhi.n	8003754 <_strtoul_l.isra.0+0x94>
 8003732:	4664      	mov	r4, ip
 8003734:	42a3      	cmp	r3, r4
 8003736:	dd1e      	ble.n	8003776 <_strtoul_l.isra.0+0xb6>
 8003738:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800373c:	d007      	beq.n	800374e <_strtoul_l.isra.0+0x8e>
 800373e:	4580      	cmp	r8, r0
 8003740:	d316      	bcc.n	8003770 <_strtoul_l.isra.0+0xb0>
 8003742:	d101      	bne.n	8003748 <_strtoul_l.isra.0+0x88>
 8003744:	45a1      	cmp	r9, r4
 8003746:	db13      	blt.n	8003770 <_strtoul_l.isra.0+0xb0>
 8003748:	2601      	movs	r6, #1
 800374a:	fb00 4003 	mla	r0, r0, r3, r4
 800374e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003752:	e7e9      	b.n	8003728 <_strtoul_l.isra.0+0x68>
 8003754:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003758:	f1bc 0f19 	cmp.w	ip, #25
 800375c:	d801      	bhi.n	8003762 <_strtoul_l.isra.0+0xa2>
 800375e:	3c37      	subs	r4, #55	@ 0x37
 8003760:	e7e8      	b.n	8003734 <_strtoul_l.isra.0+0x74>
 8003762:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003766:	f1bc 0f19 	cmp.w	ip, #25
 800376a:	d804      	bhi.n	8003776 <_strtoul_l.isra.0+0xb6>
 800376c:	3c57      	subs	r4, #87	@ 0x57
 800376e:	e7e1      	b.n	8003734 <_strtoul_l.isra.0+0x74>
 8003770:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8003774:	e7eb      	b.n	800374e <_strtoul_l.isra.0+0x8e>
 8003776:	1c73      	adds	r3, r6, #1
 8003778:	d106      	bne.n	8003788 <_strtoul_l.isra.0+0xc8>
 800377a:	2322      	movs	r3, #34	@ 0x22
 800377c:	4630      	mov	r0, r6
 800377e:	f8ce 3000 	str.w	r3, [lr]
 8003782:	b932      	cbnz	r2, 8003792 <_strtoul_l.isra.0+0xd2>
 8003784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003788:	b107      	cbz	r7, 800378c <_strtoul_l.isra.0+0xcc>
 800378a:	4240      	negs	r0, r0
 800378c:	2a00      	cmp	r2, #0
 800378e:	d0f9      	beq.n	8003784 <_strtoul_l.isra.0+0xc4>
 8003790:	b106      	cbz	r6, 8003794 <_strtoul_l.isra.0+0xd4>
 8003792:	1e69      	subs	r1, r5, #1
 8003794:	6011      	str	r1, [r2, #0]
 8003796:	e7f5      	b.n	8003784 <_strtoul_l.isra.0+0xc4>
 8003798:	080038d9 	.word	0x080038d9

0800379c <_strtoul_r>:
 800379c:	f7ff bf90 	b.w	80036c0 <_strtoul_l.isra.0>

080037a0 <_malloc_usable_size_r>:
 80037a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a4:	1f18      	subs	r0, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bfbc      	itt	lt
 80037aa:	580b      	ldrlt	r3, [r1, r0]
 80037ac:	18c0      	addlt	r0, r0, r3
 80037ae:	4770      	bx	lr

080037b0 <_init>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr

080037bc <_fini>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr
