
swv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ccc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001dd8  08001dd8  00002dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e48  08001e48  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001e48  08001e48  00003068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001e48  08001e48  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e48  08001e48  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e4c  08001e4c  00002e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001e50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001eb8  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001eb8  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fe4  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f10  00000000  00000000  00006075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00006f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000304  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171d4  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004905  00000000  00000000  0001e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081519  00000000  00000000  000231a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a46be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001674  00000000  00000000  000a4704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000a5d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001dc0 	.word	0x08001dc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001dc0 	.word	0x08001dc0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9a2 	bl	8000498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("The count value: %d \n", count);
 8000158:	4b0b      	ldr	r3, [pc, #44]	@ (8000188 <main+0x3c>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	4619      	mov	r1, r3
 800015e:	480b      	ldr	r0, [pc, #44]	@ (800018c <main+0x40>)
 8000160:	f001 f860 	bl	8001224 <iprintf>
	  count++;
 8000164:	4b08      	ldr	r3, [pc, #32]	@ (8000188 <main+0x3c>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	3301      	adds	r3, #1
 800016a:	b2da      	uxtb	r2, r3
 800016c:	4b06      	ldr	r3, [pc, #24]	@ (8000188 <main+0x3c>)
 800016e:	701a      	strb	r2, [r3, #0]
	  fflush(stdout);
 8000170:	4b07      	ldr	r3, [pc, #28]	@ (8000190 <main+0x44>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 ff7e 	bl	8001078 <fflush>
	  HAL_Delay(1000);
 800017c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000180:	f000 f9ec 	bl	800055c <HAL_Delay>
	  printf("The count value: %d \n", count);
 8000184:	bf00      	nop
 8000186:	e7e7      	b.n	8000158 <main+0xc>
 8000188:	20000084 	.word	0x20000084
 800018c:	08001dd8 	.word	0x08001dd8
 8000190:	20000018 	.word	0x20000018

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	@ 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 f893 	bl	80012ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c2:	2300      	movs	r3, #0
 80001c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 face 	bl	800076c <HAL_RCC_OscConfig>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d6:	f000 f818 	bl	800020a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	230f      	movs	r3, #15
 80001dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fd3c 	bl	8000c70 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fe:	f000 f804 	bl	800020a <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	@ 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}

0800020a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800020a:	b480      	push	{r7}
 800020c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800020e:	b672      	cpsid	i
}
 8000210:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000212:	bf00      	nop
 8000214:	e7fd      	b.n	8000212 <Error_Handler+0x8>
	...

08000218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800021e:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <HAL_MspInit+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <HAL_MspInit+0x40>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <HAL_MspInit+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000236:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <HAL_MspInit+0x40>)
 8000238:	69db      	ldr	r3, [r3, #28]
 800023a:	4a07      	ldr	r2, [pc, #28]	@ (8000258 <HAL_MspInit+0x40>)
 800023c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000240:	61d3      	str	r3, [r2, #28]
 8000242:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <HAL_MspInit+0x40>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000

0800025c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <NMI_Handler+0x4>

08000264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000268:	bf00      	nop
 800026a:	e7fd      	b.n	8000268 <HardFault_Handler+0x4>

0800026c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <MemManage_Handler+0x4>

08000274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <BusFault_Handler+0x4>

0800027c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000280:	bf00      	nop
 8000282:	e7fd      	b.n	8000280 <UsageFault_Handler+0x4>

08000284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ac:	f000 f93a 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <ITM_SendChar>:
#define DEMCR *((volatile uint32_t*) 0xE000EDFC)
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <ITM_SendChar+0x44>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <ITM_SendChar+0x44>)
 80002c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002c8:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1 << 0);
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <ITM_SendChar+0x48>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <ITM_SendChar+0x48>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]
	while (!(ITM_STIMULUS_PORT0 & 1));
 80002d6:	bf00      	nop
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f8      	beq.n	80002d8 <ITM_SendChar+0x24>
	ITM_STIMULUS_PORT0 = ch;
 80002e6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	e000edfc 	.word	0xe000edfc
 80002fc:	e0000e00 	.word	0xe0000e00

08000300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	e00a      	b.n	8000328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000312:	f3af 8000 	nop.w
 8000316:	4601      	mov	r1, r0
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	1c5a      	adds	r2, r3, #1
 800031c:	60ba      	str	r2, [r7, #8]
 800031e:	b2ca      	uxtb	r2, r1
 8000320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf0      	blt.n	8000312 <_read+0x12>
  }

  return len;
 8000330:	687b      	ldr	r3, [r7, #4]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b086      	sub	sp, #24
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	e009      	b.n	8000360 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	60ba      	str	r2, [r7, #8]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ffad 	bl	80002b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	3301      	adds	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	697a      	ldr	r2, [r7, #20]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	dbf1      	blt.n	800034c <_write+0x12>
  }
  return len;
 8000368:	687b      	ldr	r3, [r7, #4]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_close>:

int _close(int file)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800037a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000398:	605a      	str	r2, [r3, #4]
  return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <_isatty>:

int _isatty(int file)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003ae:	2301      	movs	r3, #1
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	60b9      	str	r1, [r7, #8]
 80003c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003dc:	4a14      	ldr	r2, [pc, #80]	@ (8000430 <_sbrk+0x5c>)
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <_sbrk+0x60>)
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <_sbrk+0x64>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	@ (800043c <_sbrk+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f6:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	429a      	cmp	r2, r3
 8000402:	d207      	bcs.n	8000414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000404:	f000 ffb2 	bl	800136c <__errno>
 8000408:	4603      	mov	r3, r0
 800040a:	220c      	movs	r2, #12
 800040c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000412:	e009      	b.n	8000428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000414:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041a:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <_sbrk+0x64>)
 8000424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20005000 	.word	0x20005000
 8000434:	00000400 	.word	0x00000400
 8000438:	20000088 	.word	0x20000088
 800043c:	200001e0 	.word	0x200001e0

08000440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800044c:	f7ff fff8 	bl	8000440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480b      	ldr	r0, [pc, #44]	@ (8000480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000452:	490c      	ldr	r1, [pc, #48]	@ (8000484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000454:	4a0c      	ldr	r2, [pc, #48]	@ (8000488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a09      	ldr	r2, [pc, #36]	@ (800048c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000468:	4c09      	ldr	r4, [pc, #36]	@ (8000490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000476:	f000 ff7f 	bl	8001378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fe67 	bl	800014c <main>
  bx lr
 800047e:	4770      	bx	lr
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000488:	08001e50 	.word	0x08001e50
  ldr r2, =_sbss
 800048c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000490:	200001dc 	.word	0x200001dc

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <HAL_Init+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <HAL_Init+0x28>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a8:	2003      	movs	r0, #3
 80004aa:	f000 f92b 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ae:	200f      	movs	r0, #15
 80004b0:	f000 f808 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b4:	f7ff feb0 	bl	8000218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40022000 	.word	0x40022000

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f935 	bl	8000752 <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000500:	f000 f90b 	bl	800071a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <HAL_IncTick+0x1c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_IncTick+0x20>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a03      	ldr	r2, [pc, #12]	@ (8000544 <HAL_IncTick+0x20>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000008 	.word	0x20000008
 8000544:	2000008c 	.word	0x2000008c

08000548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;
 800054c:	4b02      	ldr	r3, [pc, #8]	@ (8000558 <HAL_GetTick+0x10>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	2000008c 	.word	0x2000008c

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff0 	bl	8000548 <HAL_GetTick>
 8000568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000574:	d005      	beq.n	8000582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_Delay+0x44>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000582:	bf00      	nop
 8000584:	f7ff ffe0 	bl	8000548 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d8f7      	bhi.n	8000584 <HAL_Delay+0x28>
  {
  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000008 	.word	0x20000008

080005a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <__NVIC_SetPriorityGrouping+0x44>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005c0:	4013      	ands	r3, r2
 80005c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d6:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <__NVIC_SetPriorityGrouping+0x44>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <__NVIC_GetPriorityGrouping+0x18>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	f003 0307 	and.w	r3, r3, #7
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	@ (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	@ 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	@ 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006d0:	d301      	bcc.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00f      	b.n	80006f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <SysTick_Config+0x40>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	210f      	movs	r1, #15
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006e4:	f7ff ff90 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <SysTick_Config+0x40>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <SysTick_Config+0x40>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff49 	bl	80005a4 <__NVIC_SetPriorityGrouping>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff5e 	bl	80005ec <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ffb0 	bl	80006c0 <SysTick_Config>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e272      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 8087 	beq.w	800089a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800078c:	4b92      	ldr	r3, [pc, #584]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	2b04      	cmp	r3, #4
 8000796:	d00c      	beq.n	80007b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000798:	4b8f      	ldr	r3, [pc, #572]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 030c 	and.w	r3, r3, #12
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d112      	bne.n	80007ca <HAL_RCC_OscConfig+0x5e>
 80007a4:	4b8c      	ldr	r3, [pc, #560]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007b0:	d10b      	bne.n	80007ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007b2:	4b89      	ldr	r3, [pc, #548]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d06c      	beq.n	8000898 <HAL_RCC_OscConfig+0x12c>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d168      	bne.n	8000898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e24c      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007d2:	d106      	bne.n	80007e2 <HAL_RCC_OscConfig+0x76>
 80007d4:	4b80      	ldr	r3, [pc, #512]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7f      	ldr	r2, [pc, #508]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e02e      	b.n	8000840 <HAL_RCC_OscConfig+0xd4>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10c      	bne.n	8000804 <HAL_RCC_OscConfig+0x98>
 80007ea:	4b7b      	ldr	r3, [pc, #492]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a7a      	ldr	r2, [pc, #488]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b78      	ldr	r3, [pc, #480]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a77      	ldr	r2, [pc, #476]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e01d      	b.n	8000840 <HAL_RCC_OscConfig+0xd4>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800080c:	d10c      	bne.n	8000828 <HAL_RCC_OscConfig+0xbc>
 800080e:	4b72      	ldr	r3, [pc, #456]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a71      	ldr	r2, [pc, #452]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b6f      	ldr	r3, [pc, #444]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e00b      	b.n	8000840 <HAL_RCC_OscConfig+0xd4>
 8000828:	4b6b      	ldr	r3, [pc, #428]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a6a      	ldr	r2, [pc, #424]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800082e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b68      	ldr	r3, [pc, #416]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a67      	ldr	r2, [pc, #412]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800083a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800083e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d013      	beq.n	8000870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000848:	f7ff fe7e 	bl	8000548 <HAL_GetTick>
 800084c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084e:	e008      	b.n	8000862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000850:	f7ff fe7a 	bl	8000548 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	2b64      	cmp	r3, #100	@ 0x64
 800085c:	d901      	bls.n	8000862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800085e:	2303      	movs	r3, #3
 8000860:	e200      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f0      	beq.n	8000850 <HAL_RCC_OscConfig+0xe4>
 800086e:	e014      	b.n	800089a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000870:	f7ff fe6a 	bl	8000548 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	e008      	b.n	800088a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000878:	f7ff fe66 	bl	8000548 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b64      	cmp	r3, #100	@ 0x64
 8000884:	d901      	bls.n	800088a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000886:	2303      	movs	r3, #3
 8000888:	e1ec      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088a:	4b53      	ldr	r3, [pc, #332]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1f0      	bne.n	8000878 <HAL_RCC_OscConfig+0x10c>
 8000896:	e000      	b.n	800089a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d063      	beq.n	800096e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008a6:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 030c 	and.w	r3, r3, #12
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00b      	beq.n	80008ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008b2:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 030c 	and.w	r3, r3, #12
 80008ba:	2b08      	cmp	r3, #8
 80008bc:	d11c      	bne.n	80008f8 <HAL_RCC_OscConfig+0x18c>
 80008be:	4b46      	ldr	r3, [pc, #280]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d116      	bne.n	80008f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ca:	4b43      	ldr	r3, [pc, #268]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d005      	beq.n	80008e2 <HAL_RCC_OscConfig+0x176>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d001      	beq.n	80008e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e1c0      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e2:	4b3d      	ldr	r3, [pc, #244]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4939      	ldr	r1, [pc, #228]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80008f2:	4313      	orrs	r3, r2
 80008f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f6:	e03a      	b.n	800096e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d020      	beq.n	8000942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000900:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <HAL_RCC_OscConfig+0x270>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000906:	f7ff fe1f 	bl	8000548 <HAL_GetTick>
 800090a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	e008      	b.n	8000920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800090e:	f7ff fe1b 	bl	8000548 <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d901      	bls.n	8000920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800091c:	2303      	movs	r3, #3
 800091e:	e1a1      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000920:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f0      	beq.n	800090e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092c:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4927      	ldr	r1, [pc, #156]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]
 8000940:	e015      	b.n	800096e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_RCC_OscConfig+0x270>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000948:	f7ff fdfe 	bl	8000548 <HAL_GetTick>
 800094c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	e008      	b.n	8000962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000950:	f7ff fdfa 	bl	8000548 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d901      	bls.n	8000962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800095e:	2303      	movs	r3, #3
 8000960:	e180      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f0      	bne.n	8000950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	2b00      	cmp	r3, #0
 8000978:	d03a      	beq.n	80009f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d019      	beq.n	80009b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_RCC_OscConfig+0x274>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000988:	f7ff fdde 	bl	8000548 <HAL_GetTick>
 800098c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000990:	f7ff fdda 	bl	8000548 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e160      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f0      	beq.n	8000990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fa9c 	bl	8000eec <RCC_Delay>
 80009b4:	e01c      	b.n	80009f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_RCC_OscConfig+0x274>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdc4 	bl	8000548 <HAL_GetTick>
 80009c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c2:	e00f      	b.n	80009e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009c4:	f7ff fdc0 	bl	8000548 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d908      	bls.n	80009e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e146      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	42420000 	.word	0x42420000
 80009e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e4:	4b92      	ldr	r3, [pc, #584]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 80009e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1e9      	bne.n	80009c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f000 80a6 	beq.w	8000b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a02:	4b8b      	ldr	r3, [pc, #556]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10d      	bne.n	8000a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b88      	ldr	r3, [pc, #544]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a87      	ldr	r2, [pc, #540]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b85      	ldr	r3, [pc, #532]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a26:	2301      	movs	r3, #1
 8000a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2a:	4b82      	ldr	r3, [pc, #520]	@ (8000c34 <HAL_RCC_OscConfig+0x4c8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d118      	bne.n	8000a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a36:	4b7f      	ldr	r3, [pc, #508]	@ (8000c34 <HAL_RCC_OscConfig+0x4c8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8000c34 <HAL_RCC_OscConfig+0x4c8>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a42:	f7ff fd81 	bl	8000548 <HAL_GetTick>
 8000a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a4a:	f7ff fd7d 	bl	8000548 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b64      	cmp	r3, #100	@ 0x64
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e103      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	4b75      	ldr	r3, [pc, #468]	@ (8000c34 <HAL_RCC_OscConfig+0x4c8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f0      	beq.n	8000a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d106      	bne.n	8000a7e <HAL_RCC_OscConfig+0x312>
 8000a70:	4b6f      	ldr	r3, [pc, #444]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a6e      	ldr	r2, [pc, #440]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6213      	str	r3, [r2, #32]
 8000a7c:	e02d      	b.n	8000ada <HAL_RCC_OscConfig+0x36e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10c      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x334>
 8000a86:	4b6a      	ldr	r3, [pc, #424]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a69      	ldr	r2, [pc, #420]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	6213      	str	r3, [r2, #32]
 8000a92:	4b67      	ldr	r3, [pc, #412]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a66      	ldr	r2, [pc, #408]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000a98:	f023 0304 	bic.w	r3, r3, #4
 8000a9c:	6213      	str	r3, [r2, #32]
 8000a9e:	e01c      	b.n	8000ada <HAL_RCC_OscConfig+0x36e>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	d10c      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x356>
 8000aa8:	4b61      	ldr	r3, [pc, #388]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4a60      	ldr	r2, [pc, #384]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6213      	str	r3, [r2, #32]
 8000ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6213      	str	r3, [r2, #32]
 8000ac0:	e00b      	b.n	8000ada <HAL_RCC_OscConfig+0x36e>
 8000ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	f023 0301 	bic.w	r3, r3, #1
 8000acc:	6213      	str	r3, [r2, #32]
 8000ace:	4b58      	ldr	r3, [pc, #352]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a57      	ldr	r2, [pc, #348]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	f023 0304 	bic.w	r3, r3, #4
 8000ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d015      	beq.n	8000b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fd31 	bl	8000548 <HAL_GetTick>
 8000ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae8:	e00a      	b.n	8000b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aea:	f7ff fd2d 	bl	8000548 <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e0b1      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b00:	4b4b      	ldr	r3, [pc, #300]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0ee      	beq.n	8000aea <HAL_RCC_OscConfig+0x37e>
 8000b0c:	e014      	b.n	8000b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fd1b 	bl	8000548 <HAL_GetTick>
 8000b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	e00a      	b.n	8000b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f7ff fd17 	bl	8000548 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e09b      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1ee      	bne.n	8000b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d105      	bne.n	8000b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a3b      	ldr	r2, [pc, #236]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8087 	beq.w	8000c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b54:	4b36      	ldr	r3, [pc, #216]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d061      	beq.n	8000c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d146      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b68:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <HAL_RCC_OscConfig+0x4cc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fceb 	bl	8000548 <HAL_GetTick>
 8000b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b74:	e008      	b.n	8000b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fce7 	bl	8000548 <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d901      	bls.n	8000b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	e06d      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b88:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f0      	bne.n	8000b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b9c:	d108      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4921      	ldr	r1, [pc, #132]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a19      	ldr	r1, [r3, #32]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	491b      	ldr	r1, [pc, #108]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_RCC_OscConfig+0x4cc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bce:	f7ff fcbb 	bl	8000548 <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd6:	f7ff fcb7 	bl	8000548 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e03d      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f0      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x46a>
 8000bf4:	e035      	b.n	8000c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_RCC_OscConfig+0x4cc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fca4 	bl	8000548 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c04:	f7ff fca0 	bl	8000548 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e026      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0x498>
 8000c22:	e01e      	b.n	8000c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d107      	bne.n	8000c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e019      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40007000 	.word	0x40007000
 8000c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_RCC_OscConfig+0x500>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d106      	bne.n	8000c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e0d0      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c84:	4b6a      	ldr	r3, [pc, #424]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d910      	bls.n	8000cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c92:	4b67      	ldr	r3, [pc, #412]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 0207 	bic.w	r2, r3, #7
 8000c9a:	4965      	ldr	r1, [pc, #404]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca2:	4b63      	ldr	r3, [pc, #396]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d001      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e0b8      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ccc:	4b59      	ldr	r3, [pc, #356]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a58      	ldr	r2, [pc, #352]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce4:	4b53      	ldr	r3, [pc, #332]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a52      	ldr	r2, [pc, #328]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf0:	4b50      	ldr	r3, [pc, #320]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	494d      	ldr	r1, [pc, #308]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d040      	beq.n	8000d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d107      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	4b47      	ldr	r3, [pc, #284]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d115      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e07f      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d107      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e073      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e06b      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f023 0203 	bic.w	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4936      	ldr	r1, [pc, #216]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d60:	f7ff fbf2 	bl	8000548 <HAL_GetTick>
 8000d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d66:	e00a      	b.n	8000d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d68:	f7ff fbee 	bl	8000548 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e053      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 020c 	and.w	r2, r3, #12
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d1eb      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d210      	bcs.n	8000dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9e:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 0207 	bic.w	r2, r3, #7
 8000da6:	4922      	ldr	r1, [pc, #136]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <HAL_RCC_ClockConfig+0x1c0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e032      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4916      	ldr	r1, [pc, #88]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	490e      	ldr	r1, [pc, #56]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dfe:	f000 f821 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_RCC_ClockConfig+0x1c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	490a      	ldr	r1, [pc, #40]	@ (8000e38 <HAL_RCC_ClockConfig+0x1c8>)
 8000e10:	5ccb      	ldrb	r3, [r1, r3]
 8000e12:	fa22 f303 	lsr.w	r3, r2, r3
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <HAL_RCC_ClockConfig+0x1cc>)
 8000e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_RCC_ClockConfig+0x1d0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb50 	bl	80004c4 <HAL_InitTick>

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40022000 	.word	0x40022000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	08001df0 	.word	0x08001df0
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d002      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x30>
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d003      	beq.n	8000e7a <HAL_RCC_GetSysClockFreq+0x36>
 8000e72:	e027      	b.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
 8000e76:	613b      	str	r3, [r7, #16]
      break;
 8000e78:	e027      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	0c9b      	lsrs	r3, r3, #18
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	0c5b      	lsrs	r3, r3, #17
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
 8000ea6:	fb03 f202 	mul.w	r2, r3, r2
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e004      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	613b      	str	r3, [r7, #16]
      break;
 8000ec2:	e002      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
 8000ec6:	613b      	str	r3, [r7, #16]
      break;
 8000ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eca:	693b      	ldr	r3, [r7, #16]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	007a1200 	.word	0x007a1200
 8000ee0:	08001e00 	.word	0x08001e00
 8000ee4:	08001e10 	.word	0x08001e10
 8000ee8:	003d0900 	.word	0x003d0900

08000eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <RCC_Delay+0x34>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <RCC_Delay+0x38>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f08:	bf00      	nop
  }
  while (Delay --);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	60fa      	str	r2, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f9      	bne.n	8000f08 <RCC_Delay+0x1c>
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000000 	.word	0x20000000
 8000f24:	10624dd3 	.word	0x10624dd3

08000f28 <__sflush_r>:
 8000f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	0716      	lsls	r6, r2, #28
 8000f30:	4605      	mov	r5, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	d454      	bmi.n	8000fe0 <__sflush_r+0xb8>
 8000f36:	684b      	ldr	r3, [r1, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc02      	bgt.n	8000f42 <__sflush_r+0x1a>
 8000f3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dd48      	ble.n	8000fd4 <__sflush_r+0xac>
 8000f42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d045      	beq.n	8000fd4 <__sflush_r+0xac>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f4e:	682f      	ldr	r7, [r5, #0]
 8000f50:	6a21      	ldr	r1, [r4, #32]
 8000f52:	602b      	str	r3, [r5, #0]
 8000f54:	d030      	beq.n	8000fb8 <__sflush_r+0x90>
 8000f56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f58:	89a3      	ldrh	r3, [r4, #12]
 8000f5a:	0759      	lsls	r1, r3, #29
 8000f5c:	d505      	bpl.n	8000f6a <__sflush_r+0x42>
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f64:	b10b      	cbz	r3, 8000f6a <__sflush_r+0x42>
 8000f66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f70:	6a21      	ldr	r1, [r4, #32]
 8000f72:	47b0      	blx	r6
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	89a3      	ldrh	r3, [r4, #12]
 8000f78:	d106      	bne.n	8000f88 <__sflush_r+0x60>
 8000f7a:	6829      	ldr	r1, [r5, #0]
 8000f7c:	291d      	cmp	r1, #29
 8000f7e:	d82b      	bhi.n	8000fd8 <__sflush_r+0xb0>
 8000f80:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <__sflush_r+0xfc>)
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	07d6      	lsls	r6, r2, #31
 8000f86:	d527      	bpl.n	8000fd8 <__sflush_r+0xb0>
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6062      	str	r2, [r4, #4]
 8000f8c:	6922      	ldr	r2, [r4, #16]
 8000f8e:	04d9      	lsls	r1, r3, #19
 8000f90:	6022      	str	r2, [r4, #0]
 8000f92:	d504      	bpl.n	8000f9e <__sflush_r+0x76>
 8000f94:	1c42      	adds	r2, r0, #1
 8000f96:	d101      	bne.n	8000f9c <__sflush_r+0x74>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	b903      	cbnz	r3, 8000f9e <__sflush_r+0x76>
 8000f9c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fa0:	602f      	str	r7, [r5, #0]
 8000fa2:	b1b9      	cbz	r1, 8000fd4 <__sflush_r+0xac>
 8000fa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d002      	beq.n	8000fb2 <__sflush_r+0x8a>
 8000fac:	4628      	mov	r0, r5
 8000fae:	f000 fa0b 	bl	80013c8 <_free_r>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000fb6:	e00d      	b.n	8000fd4 <__sflush_r+0xac>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4628      	mov	r0, r5
 8000fbc:	47b0      	blx	r6
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	1c50      	adds	r0, r2, #1
 8000fc2:	d1c9      	bne.n	8000f58 <__sflush_r+0x30>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0c6      	beq.n	8000f58 <__sflush_r+0x30>
 8000fca:	2b1d      	cmp	r3, #29
 8000fcc:	d001      	beq.n	8000fd2 <__sflush_r+0xaa>
 8000fce:	2b16      	cmp	r3, #22
 8000fd0:	d11d      	bne.n	800100e <__sflush_r+0xe6>
 8000fd2:	602f      	str	r7, [r5, #0]
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	e021      	b.n	800101c <__sflush_r+0xf4>
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	e01a      	b.n	8001016 <__sflush_r+0xee>
 8000fe0:	690f      	ldr	r7, [r1, #16]
 8000fe2:	2f00      	cmp	r7, #0
 8000fe4:	d0f6      	beq.n	8000fd4 <__sflush_r+0xac>
 8000fe6:	0793      	lsls	r3, r2, #30
 8000fe8:	bf18      	it	ne
 8000fea:	2300      	movne	r3, #0
 8000fec:	680e      	ldr	r6, [r1, #0]
 8000fee:	bf08      	it	eq
 8000ff0:	694b      	ldreq	r3, [r1, #20]
 8000ff2:	1bf6      	subs	r6, r6, r7
 8000ff4:	600f      	str	r7, [r1, #0]
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	ddeb      	ble.n	8000fd4 <__sflush_r+0xac>
 8000ffc:	4633      	mov	r3, r6
 8000ffe:	463a      	mov	r2, r7
 8001000:	4628      	mov	r0, r5
 8001002:	6a21      	ldr	r1, [r4, #32]
 8001004:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001008:	47e0      	blx	ip
 800100a:	2800      	cmp	r0, #0
 800100c:	dc07      	bgt.n	800101e <__sflush_r+0xf6>
 800100e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001016:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800101a:	81a3      	strh	r3, [r4, #12]
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101e:	4407      	add	r7, r0
 8001020:	1a36      	subs	r6, r6, r0
 8001022:	e7e9      	b.n	8000ff8 <__sflush_r+0xd0>
 8001024:	20400001 	.word	0x20400001

08001028 <_fflush_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	690b      	ldr	r3, [r1, #16]
 800102c:	4605      	mov	r5, r0
 800102e:	460c      	mov	r4, r1
 8001030:	b913      	cbnz	r3, 8001038 <_fflush_r+0x10>
 8001032:	2500      	movs	r5, #0
 8001034:	4628      	mov	r0, r5
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	b118      	cbz	r0, 8001042 <_fflush_r+0x1a>
 800103a:	6a03      	ldr	r3, [r0, #32]
 800103c:	b90b      	cbnz	r3, 8001042 <_fflush_r+0x1a>
 800103e:	f000 f8bb 	bl	80011b8 <__sinit>
 8001042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f3      	beq.n	8001032 <_fflush_r+0xa>
 800104a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800104c:	07d0      	lsls	r0, r2, #31
 800104e:	d404      	bmi.n	800105a <_fflush_r+0x32>
 8001050:	0599      	lsls	r1, r3, #22
 8001052:	d402      	bmi.n	800105a <_fflush_r+0x32>
 8001054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001056:	f000 f9b4 	bl	80013c2 <__retarget_lock_acquire_recursive>
 800105a:	4628      	mov	r0, r5
 800105c:	4621      	mov	r1, r4
 800105e:	f7ff ff63 	bl	8000f28 <__sflush_r>
 8001062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001064:	4605      	mov	r5, r0
 8001066:	07da      	lsls	r2, r3, #31
 8001068:	d4e4      	bmi.n	8001034 <_fflush_r+0xc>
 800106a:	89a3      	ldrh	r3, [r4, #12]
 800106c:	059b      	lsls	r3, r3, #22
 800106e:	d4e1      	bmi.n	8001034 <_fflush_r+0xc>
 8001070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001072:	f000 f9a7 	bl	80013c4 <__retarget_lock_release_recursive>
 8001076:	e7dd      	b.n	8001034 <_fflush_r+0xc>

08001078 <fflush>:
 8001078:	4601      	mov	r1, r0
 800107a:	b920      	cbnz	r0, 8001086 <fflush+0xe>
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <fflush+0x18>)
 800107e:	4905      	ldr	r1, [pc, #20]	@ (8001094 <fflush+0x1c>)
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <fflush+0x20>)
 8001082:	f000 b8b1 	b.w	80011e8 <_fwalk_sglue>
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <fflush+0x24>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	f7ff bfcd 	b.w	8001028 <_fflush_r>
 800108e:	bf00      	nop
 8001090:	2000000c 	.word	0x2000000c
 8001094:	08001029 	.word	0x08001029
 8001098:	2000001c 	.word	0x2000001c
 800109c:	20000018 	.word	0x20000018

080010a0 <std>:
 80010a0:	2300      	movs	r3, #0
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
 80010a6:	e9c0 3300 	strd	r3, r3, [r0]
 80010aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010ae:	6083      	str	r3, [r0, #8]
 80010b0:	8181      	strh	r1, [r0, #12]
 80010b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80010b4:	81c2      	strh	r2, [r0, #14]
 80010b6:	6183      	str	r3, [r0, #24]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2208      	movs	r2, #8
 80010bc:	305c      	adds	r0, #92	@ 0x5c
 80010be:	f000 f906 	bl	80012ce <memset>
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <std+0x58>)
 80010c4:	6224      	str	r4, [r4, #32]
 80010c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <std+0x5c>)
 80010ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <std+0x60>)
 80010ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <std+0x64>)
 80010d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <std+0x68>)
 80010d6:	429c      	cmp	r4, r3
 80010d8:	d006      	beq.n	80010e8 <std+0x48>
 80010da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80010de:	4294      	cmp	r4, r2
 80010e0:	d002      	beq.n	80010e8 <std+0x48>
 80010e2:	33d0      	adds	r3, #208	@ 0xd0
 80010e4:	429c      	cmp	r4, r3
 80010e6:	d105      	bne.n	80010f4 <std+0x54>
 80010e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f0:	f000 b966 	b.w	80013c0 <__retarget_lock_init_recursive>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	08001249 	.word	0x08001249
 80010fc:	0800126b 	.word	0x0800126b
 8001100:	080012a3 	.word	0x080012a3
 8001104:	080012c7 	.word	0x080012c7
 8001108:	20000090 	.word	0x20000090

0800110c <stdio_exit_handler>:
 800110c:	4a02      	ldr	r2, [pc, #8]	@ (8001118 <stdio_exit_handler+0xc>)
 800110e:	4903      	ldr	r1, [pc, #12]	@ (800111c <stdio_exit_handler+0x10>)
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <stdio_exit_handler+0x14>)
 8001112:	f000 b869 	b.w	80011e8 <_fwalk_sglue>
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c
 800111c:	08001029 	.word	0x08001029
 8001120:	2000001c 	.word	0x2000001c

08001124 <cleanup_stdio>:
 8001124:	6841      	ldr	r1, [r0, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <cleanup_stdio+0x34>)
 8001128:	b510      	push	{r4, lr}
 800112a:	4299      	cmp	r1, r3
 800112c:	4604      	mov	r4, r0
 800112e:	d001      	beq.n	8001134 <cleanup_stdio+0x10>
 8001130:	f7ff ff7a 	bl	8001028 <_fflush_r>
 8001134:	68a1      	ldr	r1, [r4, #8]
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <cleanup_stdio+0x38>)
 8001138:	4299      	cmp	r1, r3
 800113a:	d002      	beq.n	8001142 <cleanup_stdio+0x1e>
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff73 	bl	8001028 <_fflush_r>
 8001142:	68e1      	ldr	r1, [r4, #12]
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <cleanup_stdio+0x3c>)
 8001146:	4299      	cmp	r1, r3
 8001148:	d004      	beq.n	8001154 <cleanup_stdio+0x30>
 800114a:	4620      	mov	r0, r4
 800114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001150:	f7ff bf6a 	b.w	8001028 <_fflush_r>
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090
 800115c:	200000f8 	.word	0x200000f8
 8001160:	20000160 	.word	0x20000160

08001164 <global_stdio_init.part.0>:
 8001164:	b510      	push	{r4, lr}
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <global_stdio_init.part.0+0x30>)
 8001168:	4c0b      	ldr	r4, [pc, #44]	@ (8001198 <global_stdio_init.part.0+0x34>)
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <global_stdio_init.part.0+0x38>)
 800116c:	4620      	mov	r0, r4
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	2104      	movs	r1, #4
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff ff94 	bl	80010a0 <std>
 8001178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800117c:	2201      	movs	r2, #1
 800117e:	2109      	movs	r1, #9
 8001180:	f7ff ff8e 	bl	80010a0 <std>
 8001184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001188:	2202      	movs	r2, #2
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800118e:	2112      	movs	r1, #18
 8001190:	f7ff bf86 	b.w	80010a0 <std>
 8001194:	200001c8 	.word	0x200001c8
 8001198:	20000090 	.word	0x20000090
 800119c:	0800110d 	.word	0x0800110d

080011a0 <__sfp_lock_acquire>:
 80011a0:	4801      	ldr	r0, [pc, #4]	@ (80011a8 <__sfp_lock_acquire+0x8>)
 80011a2:	f000 b90e 	b.w	80013c2 <__retarget_lock_acquire_recursive>
 80011a6:	bf00      	nop
 80011a8:	200001d1 	.word	0x200001d1

080011ac <__sfp_lock_release>:
 80011ac:	4801      	ldr	r0, [pc, #4]	@ (80011b4 <__sfp_lock_release+0x8>)
 80011ae:	f000 b909 	b.w	80013c4 <__retarget_lock_release_recursive>
 80011b2:	bf00      	nop
 80011b4:	200001d1 	.word	0x200001d1

080011b8 <__sinit>:
 80011b8:	b510      	push	{r4, lr}
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff fff0 	bl	80011a0 <__sfp_lock_acquire>
 80011c0:	6a23      	ldr	r3, [r4, #32]
 80011c2:	b11b      	cbz	r3, 80011cc <__sinit+0x14>
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011c8:	f7ff bff0 	b.w	80011ac <__sfp_lock_release>
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__sinit+0x28>)
 80011ce:	6223      	str	r3, [r4, #32]
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__sinit+0x2c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f5      	bne.n	80011c4 <__sinit+0xc>
 80011d8:	f7ff ffc4 	bl	8001164 <global_stdio_init.part.0>
 80011dc:	e7f2      	b.n	80011c4 <__sinit+0xc>
 80011de:	bf00      	nop
 80011e0:	08001125 	.word	0x08001125
 80011e4:	200001c8 	.word	0x200001c8

080011e8 <_fwalk_sglue>:
 80011e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ec:	4607      	mov	r7, r0
 80011ee:	4688      	mov	r8, r1
 80011f0:	4614      	mov	r4, r2
 80011f2:	2600      	movs	r6, #0
 80011f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011f8:	f1b9 0901 	subs.w	r9, r9, #1
 80011fc:	d505      	bpl.n	800120a <_fwalk_sglue+0x22>
 80011fe:	6824      	ldr	r4, [r4, #0]
 8001200:	2c00      	cmp	r4, #0
 8001202:	d1f7      	bne.n	80011f4 <_fwalk_sglue+0xc>
 8001204:	4630      	mov	r0, r6
 8001206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800120a:	89ab      	ldrh	r3, [r5, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d907      	bls.n	8001220 <_fwalk_sglue+0x38>
 8001210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001214:	3301      	adds	r3, #1
 8001216:	d003      	beq.n	8001220 <_fwalk_sglue+0x38>
 8001218:	4629      	mov	r1, r5
 800121a:	4638      	mov	r0, r7
 800121c:	47c0      	blx	r8
 800121e:	4306      	orrs	r6, r0
 8001220:	3568      	adds	r5, #104	@ 0x68
 8001222:	e7e9      	b.n	80011f8 <_fwalk_sglue+0x10>

08001224 <iprintf>:
 8001224:	b40f      	push	{r0, r1, r2, r3}
 8001226:	b507      	push	{r0, r1, r2, lr}
 8001228:	4906      	ldr	r1, [pc, #24]	@ (8001244 <iprintf+0x20>)
 800122a:	ab04      	add	r3, sp, #16
 800122c:	6808      	ldr	r0, [r1, #0]
 800122e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001232:	6881      	ldr	r1, [r0, #8]
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f000 f9e5 	bl	8001604 <_vfiprintf_r>
 800123a:	b003      	add	sp, #12
 800123c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr
 8001244:	20000018 	.word	0x20000018

08001248 <__sread>:
 8001248:	b510      	push	{r4, lr}
 800124a:	460c      	mov	r4, r1
 800124c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001250:	f000 f868 	bl	8001324 <_read_r>
 8001254:	2800      	cmp	r0, #0
 8001256:	bfab      	itete	ge
 8001258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800125a:	89a3      	ldrhlt	r3, [r4, #12]
 800125c:	181b      	addge	r3, r3, r0
 800125e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001262:	bfac      	ite	ge
 8001264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001266:	81a3      	strhlt	r3, [r4, #12]
 8001268:	bd10      	pop	{r4, pc}

0800126a <__swrite>:
 800126a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126e:	461f      	mov	r7, r3
 8001270:	898b      	ldrh	r3, [r1, #12]
 8001272:	4605      	mov	r5, r0
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	460c      	mov	r4, r1
 8001278:	4616      	mov	r6, r2
 800127a:	d505      	bpl.n	8001288 <__swrite+0x1e>
 800127c:	2302      	movs	r3, #2
 800127e:	2200      	movs	r2, #0
 8001280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001284:	f000 f83c 	bl	8001300 <_lseek_r>
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	4632      	mov	r2, r6
 800128c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	4628      	mov	r0, r5
 8001294:	463b      	mov	r3, r7
 8001296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800129a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800129e:	f000 b853 	b.w	8001348 <_write_r>

080012a2 <__sseek>:
 80012a2:	b510      	push	{r4, lr}
 80012a4:	460c      	mov	r4, r1
 80012a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012aa:	f000 f829 	bl	8001300 <_lseek_r>
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	bf15      	itete	ne
 80012b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012be:	81a3      	strheq	r3, [r4, #12]
 80012c0:	bf18      	it	ne
 80012c2:	81a3      	strhne	r3, [r4, #12]
 80012c4:	bd10      	pop	{r4, pc}

080012c6 <__sclose>:
 80012c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ca:	f000 b809 	b.w	80012e0 <_close_r>

080012ce <memset>:
 80012ce:	4603      	mov	r3, r0
 80012d0:	4402      	add	r2, r0
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d100      	bne.n	80012d8 <memset+0xa>
 80012d6:	4770      	bx	lr
 80012d8:	f803 1b01 	strb.w	r1, [r3], #1
 80012dc:	e7f9      	b.n	80012d2 <memset+0x4>
	...

080012e0 <_close_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	2300      	movs	r3, #0
 80012e4:	4d05      	ldr	r5, [pc, #20]	@ (80012fc <_close_r+0x1c>)
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	f7ff f841 	bl	8000372 <_close>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_close_r+0x1a>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_close_r+0x1a>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	200001cc 	.word	0x200001cc

08001300 <_lseek_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	2200      	movs	r2, #0
 800130a:	4d05      	ldr	r5, [pc, #20]	@ (8001320 <_lseek_r+0x20>)
 800130c:	602a      	str	r2, [r5, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f7ff f853 	bl	80003ba <_lseek>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_lseek_r+0x1e>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_lseek_r+0x1e>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001cc 	.word	0x200001cc

08001324 <_read_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	2200      	movs	r2, #0
 800132e:	4d05      	ldr	r5, [pc, #20]	@ (8001344 <_read_r+0x20>)
 8001330:	602a      	str	r2, [r5, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f7fe ffe4 	bl	8000300 <_read>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_read_r+0x1e>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_read_r+0x1e>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	200001cc 	.word	0x200001cc

08001348 <_write_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	2200      	movs	r2, #0
 8001352:	4d05      	ldr	r5, [pc, #20]	@ (8001368 <_write_r+0x20>)
 8001354:	602a      	str	r2, [r5, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f7fe ffef 	bl	800033a <_write>
 800135c:	1c43      	adds	r3, r0, #1
 800135e:	d102      	bne.n	8001366 <_write_r+0x1e>
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	b103      	cbz	r3, 8001366 <_write_r+0x1e>
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	200001cc 	.word	0x200001cc

0800136c <__errno>:
 800136c:	4b01      	ldr	r3, [pc, #4]	@ (8001374 <__errno+0x8>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000018 	.word	0x20000018

08001378 <__libc_init_array>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	2600      	movs	r6, #0
 800137c:	4d0c      	ldr	r5, [pc, #48]	@ (80013b0 <__libc_init_array+0x38>)
 800137e:	4c0d      	ldr	r4, [pc, #52]	@ (80013b4 <__libc_init_array+0x3c>)
 8001380:	1b64      	subs	r4, r4, r5
 8001382:	10a4      	asrs	r4, r4, #2
 8001384:	42a6      	cmp	r6, r4
 8001386:	d109      	bne.n	800139c <__libc_init_array+0x24>
 8001388:	f000 fd1a 	bl	8001dc0 <_init>
 800138c:	2600      	movs	r6, #0
 800138e:	4d0a      	ldr	r5, [pc, #40]	@ (80013b8 <__libc_init_array+0x40>)
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <__libc_init_array+0x44>)
 8001392:	1b64      	subs	r4, r4, r5
 8001394:	10a4      	asrs	r4, r4, #2
 8001396:	42a6      	cmp	r6, r4
 8001398:	d105      	bne.n	80013a6 <__libc_init_array+0x2e>
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a0:	4798      	blx	r3
 80013a2:	3601      	adds	r6, #1
 80013a4:	e7ee      	b.n	8001384 <__libc_init_array+0xc>
 80013a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013aa:	4798      	blx	r3
 80013ac:	3601      	adds	r6, #1
 80013ae:	e7f2      	b.n	8001396 <__libc_init_array+0x1e>
 80013b0:	08001e48 	.word	0x08001e48
 80013b4:	08001e48 	.word	0x08001e48
 80013b8:	08001e48 	.word	0x08001e48
 80013bc:	08001e4c 	.word	0x08001e4c

080013c0 <__retarget_lock_init_recursive>:
 80013c0:	4770      	bx	lr

080013c2 <__retarget_lock_acquire_recursive>:
 80013c2:	4770      	bx	lr

080013c4 <__retarget_lock_release_recursive>:
 80013c4:	4770      	bx	lr
	...

080013c8 <_free_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4605      	mov	r5, r0
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d040      	beq.n	8001452 <_free_r+0x8a>
 80013d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013d4:	1f0c      	subs	r4, r1, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bfb8      	it	lt
 80013da:	18e4      	addlt	r4, r4, r3
 80013dc:	f000 f8de 	bl	800159c <__malloc_lock>
 80013e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <_free_r+0x8c>)
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	b933      	cbnz	r3, 80013f4 <_free_r+0x2c>
 80013e6:	6063      	str	r3, [r4, #4]
 80013e8:	6014      	str	r4, [r2, #0]
 80013ea:	4628      	mov	r0, r5
 80013ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013f0:	f000 b8da 	b.w	80015a8 <__malloc_unlock>
 80013f4:	42a3      	cmp	r3, r4
 80013f6:	d908      	bls.n	800140a <_free_r+0x42>
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	1821      	adds	r1, r4, r0
 80013fc:	428b      	cmp	r3, r1
 80013fe:	bf01      	itttt	eq
 8001400:	6819      	ldreq	r1, [r3, #0]
 8001402:	685b      	ldreq	r3, [r3, #4]
 8001404:	1809      	addeq	r1, r1, r0
 8001406:	6021      	streq	r1, [r4, #0]
 8001408:	e7ed      	b.n	80013e6 <_free_r+0x1e>
 800140a:	461a      	mov	r2, r3
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	b10b      	cbz	r3, 8001414 <_free_r+0x4c>
 8001410:	42a3      	cmp	r3, r4
 8001412:	d9fa      	bls.n	800140a <_free_r+0x42>
 8001414:	6811      	ldr	r1, [r2, #0]
 8001416:	1850      	adds	r0, r2, r1
 8001418:	42a0      	cmp	r0, r4
 800141a:	d10b      	bne.n	8001434 <_free_r+0x6c>
 800141c:	6820      	ldr	r0, [r4, #0]
 800141e:	4401      	add	r1, r0
 8001420:	1850      	adds	r0, r2, r1
 8001422:	4283      	cmp	r3, r0
 8001424:	6011      	str	r1, [r2, #0]
 8001426:	d1e0      	bne.n	80013ea <_free_r+0x22>
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4408      	add	r0, r1
 800142e:	6010      	str	r0, [r2, #0]
 8001430:	6053      	str	r3, [r2, #4]
 8001432:	e7da      	b.n	80013ea <_free_r+0x22>
 8001434:	d902      	bls.n	800143c <_free_r+0x74>
 8001436:	230c      	movs	r3, #12
 8001438:	602b      	str	r3, [r5, #0]
 800143a:	e7d6      	b.n	80013ea <_free_r+0x22>
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	1821      	adds	r1, r4, r0
 8001440:	428b      	cmp	r3, r1
 8001442:	bf01      	itttt	eq
 8001444:	6819      	ldreq	r1, [r3, #0]
 8001446:	685b      	ldreq	r3, [r3, #4]
 8001448:	1809      	addeq	r1, r1, r0
 800144a:	6021      	streq	r1, [r4, #0]
 800144c:	6063      	str	r3, [r4, #4]
 800144e:	6054      	str	r4, [r2, #4]
 8001450:	e7cb      	b.n	80013ea <_free_r+0x22>
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	200001d8 	.word	0x200001d8

08001458 <sbrk_aligned>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	4e0f      	ldr	r6, [pc, #60]	@ (8001498 <sbrk_aligned+0x40>)
 800145c:	460c      	mov	r4, r1
 800145e:	6831      	ldr	r1, [r6, #0]
 8001460:	4605      	mov	r5, r0
 8001462:	b911      	cbnz	r1, 800146a <sbrk_aligned+0x12>
 8001464:	f000 fc0a 	bl	8001c7c <_sbrk_r>
 8001468:	6030      	str	r0, [r6, #0]
 800146a:	4621      	mov	r1, r4
 800146c:	4628      	mov	r0, r5
 800146e:	f000 fc05 	bl	8001c7c <_sbrk_r>
 8001472:	1c43      	adds	r3, r0, #1
 8001474:	d103      	bne.n	800147e <sbrk_aligned+0x26>
 8001476:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800147a:	4620      	mov	r0, r4
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	1cc4      	adds	r4, r0, #3
 8001480:	f024 0403 	bic.w	r4, r4, #3
 8001484:	42a0      	cmp	r0, r4
 8001486:	d0f8      	beq.n	800147a <sbrk_aligned+0x22>
 8001488:	1a21      	subs	r1, r4, r0
 800148a:	4628      	mov	r0, r5
 800148c:	f000 fbf6 	bl	8001c7c <_sbrk_r>
 8001490:	3001      	adds	r0, #1
 8001492:	d1f2      	bne.n	800147a <sbrk_aligned+0x22>
 8001494:	e7ef      	b.n	8001476 <sbrk_aligned+0x1e>
 8001496:	bf00      	nop
 8001498:	200001d4 	.word	0x200001d4

0800149c <_malloc_r>:
 800149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014a0:	1ccd      	adds	r5, r1, #3
 80014a2:	f025 0503 	bic.w	r5, r5, #3
 80014a6:	3508      	adds	r5, #8
 80014a8:	2d0c      	cmp	r5, #12
 80014aa:	bf38      	it	cc
 80014ac:	250c      	movcc	r5, #12
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	4606      	mov	r6, r0
 80014b2:	db01      	blt.n	80014b8 <_malloc_r+0x1c>
 80014b4:	42a9      	cmp	r1, r5
 80014b6:	d904      	bls.n	80014c2 <_malloc_r+0x26>
 80014b8:	230c      	movs	r3, #12
 80014ba:	6033      	str	r3, [r6, #0]
 80014bc:	2000      	movs	r0, #0
 80014be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001598 <_malloc_r+0xfc>
 80014c6:	f000 f869 	bl	800159c <__malloc_lock>
 80014ca:	f8d8 3000 	ldr.w	r3, [r8]
 80014ce:	461c      	mov	r4, r3
 80014d0:	bb44      	cbnz	r4, 8001524 <_malloc_r+0x88>
 80014d2:	4629      	mov	r1, r5
 80014d4:	4630      	mov	r0, r6
 80014d6:	f7ff ffbf 	bl	8001458 <sbrk_aligned>
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	4604      	mov	r4, r0
 80014de:	d158      	bne.n	8001592 <_malloc_r+0xf6>
 80014e0:	f8d8 4000 	ldr.w	r4, [r8]
 80014e4:	4627      	mov	r7, r4
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	d143      	bne.n	8001572 <_malloc_r+0xd6>
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d04b      	beq.n	8001586 <_malloc_r+0xea>
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	4639      	mov	r1, r7
 80014f2:	4630      	mov	r0, r6
 80014f4:	eb04 0903 	add.w	r9, r4, r3
 80014f8:	f000 fbc0 	bl	8001c7c <_sbrk_r>
 80014fc:	4581      	cmp	r9, r0
 80014fe:	d142      	bne.n	8001586 <_malloc_r+0xea>
 8001500:	6821      	ldr	r1, [r4, #0]
 8001502:	4630      	mov	r0, r6
 8001504:	1a6d      	subs	r5, r5, r1
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff ffa6 	bl	8001458 <sbrk_aligned>
 800150c:	3001      	adds	r0, #1
 800150e:	d03a      	beq.n	8001586 <_malloc_r+0xea>
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	442b      	add	r3, r5
 8001514:	6023      	str	r3, [r4, #0]
 8001516:	f8d8 3000 	ldr.w	r3, [r8]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	bb62      	cbnz	r2, 8001578 <_malloc_r+0xdc>
 800151e:	f8c8 7000 	str.w	r7, [r8]
 8001522:	e00f      	b.n	8001544 <_malloc_r+0xa8>
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	1b52      	subs	r2, r2, r5
 8001528:	d420      	bmi.n	800156c <_malloc_r+0xd0>
 800152a:	2a0b      	cmp	r2, #11
 800152c:	d917      	bls.n	800155e <_malloc_r+0xc2>
 800152e:	1961      	adds	r1, r4, r5
 8001530:	42a3      	cmp	r3, r4
 8001532:	6025      	str	r5, [r4, #0]
 8001534:	bf18      	it	ne
 8001536:	6059      	strne	r1, [r3, #4]
 8001538:	6863      	ldr	r3, [r4, #4]
 800153a:	bf08      	it	eq
 800153c:	f8c8 1000 	streq.w	r1, [r8]
 8001540:	5162      	str	r2, [r4, r5]
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f82f 	bl	80015a8 <__malloc_unlock>
 800154a:	f104 000b 	add.w	r0, r4, #11
 800154e:	1d23      	adds	r3, r4, #4
 8001550:	f020 0007 	bic.w	r0, r0, #7
 8001554:	1ac2      	subs	r2, r0, r3
 8001556:	bf1c      	itt	ne
 8001558:	1a1b      	subne	r3, r3, r0
 800155a:	50a3      	strne	r3, [r4, r2]
 800155c:	e7af      	b.n	80014be <_malloc_r+0x22>
 800155e:	6862      	ldr	r2, [r4, #4]
 8001560:	42a3      	cmp	r3, r4
 8001562:	bf0c      	ite	eq
 8001564:	f8c8 2000 	streq.w	r2, [r8]
 8001568:	605a      	strne	r2, [r3, #4]
 800156a:	e7eb      	b.n	8001544 <_malloc_r+0xa8>
 800156c:	4623      	mov	r3, r4
 800156e:	6864      	ldr	r4, [r4, #4]
 8001570:	e7ae      	b.n	80014d0 <_malloc_r+0x34>
 8001572:	463c      	mov	r4, r7
 8001574:	687f      	ldr	r7, [r7, #4]
 8001576:	e7b6      	b.n	80014e6 <_malloc_r+0x4a>
 8001578:	461a      	mov	r2, r3
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	42a3      	cmp	r3, r4
 800157e:	d1fb      	bne.n	8001578 <_malloc_r+0xdc>
 8001580:	2300      	movs	r3, #0
 8001582:	6053      	str	r3, [r2, #4]
 8001584:	e7de      	b.n	8001544 <_malloc_r+0xa8>
 8001586:	230c      	movs	r3, #12
 8001588:	4630      	mov	r0, r6
 800158a:	6033      	str	r3, [r6, #0]
 800158c:	f000 f80c 	bl	80015a8 <__malloc_unlock>
 8001590:	e794      	b.n	80014bc <_malloc_r+0x20>
 8001592:	6005      	str	r5, [r0, #0]
 8001594:	e7d6      	b.n	8001544 <_malloc_r+0xa8>
 8001596:	bf00      	nop
 8001598:	200001d8 	.word	0x200001d8

0800159c <__malloc_lock>:
 800159c:	4801      	ldr	r0, [pc, #4]	@ (80015a4 <__malloc_lock+0x8>)
 800159e:	f7ff bf10 	b.w	80013c2 <__retarget_lock_acquire_recursive>
 80015a2:	bf00      	nop
 80015a4:	200001d0 	.word	0x200001d0

080015a8 <__malloc_unlock>:
 80015a8:	4801      	ldr	r0, [pc, #4]	@ (80015b0 <__malloc_unlock+0x8>)
 80015aa:	f7ff bf0b 	b.w	80013c4 <__retarget_lock_release_recursive>
 80015ae:	bf00      	nop
 80015b0:	200001d0 	.word	0x200001d0

080015b4 <__sfputc_r>:
 80015b4:	6893      	ldr	r3, [r2, #8]
 80015b6:	b410      	push	{r4}
 80015b8:	3b01      	subs	r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	6093      	str	r3, [r2, #8]
 80015be:	da07      	bge.n	80015d0 <__sfputc_r+0x1c>
 80015c0:	6994      	ldr	r4, [r2, #24]
 80015c2:	42a3      	cmp	r3, r4
 80015c4:	db01      	blt.n	80015ca <__sfputc_r+0x16>
 80015c6:	290a      	cmp	r1, #10
 80015c8:	d102      	bne.n	80015d0 <__sfputc_r+0x1c>
 80015ca:	bc10      	pop	{r4}
 80015cc:	f000 bac2 	b.w	8001b54 <__swbuf_r>
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	1c58      	adds	r0, r3, #1
 80015d4:	6010      	str	r0, [r2, #0]
 80015d6:	7019      	strb	r1, [r3, #0]
 80015d8:	4608      	mov	r0, r1
 80015da:	bc10      	pop	{r4}
 80015dc:	4770      	bx	lr

080015de <__sfputs_r>:
 80015de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e0:	4606      	mov	r6, r0
 80015e2:	460f      	mov	r7, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	18d5      	adds	r5, r2, r3
 80015e8:	42ac      	cmp	r4, r5
 80015ea:	d101      	bne.n	80015f0 <__sfputs_r+0x12>
 80015ec:	2000      	movs	r0, #0
 80015ee:	e007      	b.n	8001600 <__sfputs_r+0x22>
 80015f0:	463a      	mov	r2, r7
 80015f2:	4630      	mov	r0, r6
 80015f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015f8:	f7ff ffdc 	bl	80015b4 <__sfputc_r>
 80015fc:	1c43      	adds	r3, r0, #1
 80015fe:	d1f3      	bne.n	80015e8 <__sfputs_r+0xa>
 8001600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001604 <_vfiprintf_r>:
 8001604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001608:	460d      	mov	r5, r1
 800160a:	4614      	mov	r4, r2
 800160c:	4698      	mov	r8, r3
 800160e:	4606      	mov	r6, r0
 8001610:	b09d      	sub	sp, #116	@ 0x74
 8001612:	b118      	cbz	r0, 800161c <_vfiprintf_r+0x18>
 8001614:	6a03      	ldr	r3, [r0, #32]
 8001616:	b90b      	cbnz	r3, 800161c <_vfiprintf_r+0x18>
 8001618:	f7ff fdce 	bl	80011b8 <__sinit>
 800161c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800161e:	07d9      	lsls	r1, r3, #31
 8001620:	d405      	bmi.n	800162e <_vfiprintf_r+0x2a>
 8001622:	89ab      	ldrh	r3, [r5, #12]
 8001624:	059a      	lsls	r2, r3, #22
 8001626:	d402      	bmi.n	800162e <_vfiprintf_r+0x2a>
 8001628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800162a:	f7ff feca 	bl	80013c2 <__retarget_lock_acquire_recursive>
 800162e:	89ab      	ldrh	r3, [r5, #12]
 8001630:	071b      	lsls	r3, r3, #28
 8001632:	d501      	bpl.n	8001638 <_vfiprintf_r+0x34>
 8001634:	692b      	ldr	r3, [r5, #16]
 8001636:	b99b      	cbnz	r3, 8001660 <_vfiprintf_r+0x5c>
 8001638:	4629      	mov	r1, r5
 800163a:	4630      	mov	r0, r6
 800163c:	f000 fac8 	bl	8001bd0 <__swsetup_r>
 8001640:	b170      	cbz	r0, 8001660 <_vfiprintf_r+0x5c>
 8001642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001644:	07dc      	lsls	r4, r3, #31
 8001646:	d504      	bpl.n	8001652 <_vfiprintf_r+0x4e>
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800164c:	b01d      	add	sp, #116	@ 0x74
 800164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001652:	89ab      	ldrh	r3, [r5, #12]
 8001654:	0598      	lsls	r0, r3, #22
 8001656:	d4f7      	bmi.n	8001648 <_vfiprintf_r+0x44>
 8001658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800165a:	f7ff feb3 	bl	80013c4 <__retarget_lock_release_recursive>
 800165e:	e7f3      	b.n	8001648 <_vfiprintf_r+0x44>
 8001660:	2300      	movs	r3, #0
 8001662:	9309      	str	r3, [sp, #36]	@ 0x24
 8001664:	2320      	movs	r3, #32
 8001666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800166a:	2330      	movs	r3, #48	@ 0x30
 800166c:	f04f 0901 	mov.w	r9, #1
 8001670:	f8cd 800c 	str.w	r8, [sp, #12]
 8001674:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001820 <_vfiprintf_r+0x21c>
 8001678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800167c:	4623      	mov	r3, r4
 800167e:	469a      	mov	sl, r3
 8001680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001684:	b10a      	cbz	r2, 800168a <_vfiprintf_r+0x86>
 8001686:	2a25      	cmp	r2, #37	@ 0x25
 8001688:	d1f9      	bne.n	800167e <_vfiprintf_r+0x7a>
 800168a:	ebba 0b04 	subs.w	fp, sl, r4
 800168e:	d00b      	beq.n	80016a8 <_vfiprintf_r+0xa4>
 8001690:	465b      	mov	r3, fp
 8001692:	4622      	mov	r2, r4
 8001694:	4629      	mov	r1, r5
 8001696:	4630      	mov	r0, r6
 8001698:	f7ff ffa1 	bl	80015de <__sfputs_r>
 800169c:	3001      	adds	r0, #1
 800169e:	f000 80a7 	beq.w	80017f0 <_vfiprintf_r+0x1ec>
 80016a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80016a4:	445a      	add	r2, fp
 80016a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80016a8:	f89a 3000 	ldrb.w	r3, [sl]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 809f 	beq.w	80017f0 <_vfiprintf_r+0x1ec>
 80016b2:	2300      	movs	r3, #0
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016bc:	f10a 0a01 	add.w	sl, sl, #1
 80016c0:	9304      	str	r3, [sp, #16]
 80016c2:	9307      	str	r3, [sp, #28]
 80016c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80016ca:	4654      	mov	r4, sl
 80016cc:	2205      	movs	r2, #5
 80016ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016d2:	4853      	ldr	r0, [pc, #332]	@ (8001820 <_vfiprintf_r+0x21c>)
 80016d4:	f000 fae2 	bl	8001c9c <memchr>
 80016d8:	9a04      	ldr	r2, [sp, #16]
 80016da:	b9d8      	cbnz	r0, 8001714 <_vfiprintf_r+0x110>
 80016dc:	06d1      	lsls	r1, r2, #27
 80016de:	bf44      	itt	mi
 80016e0:	2320      	movmi	r3, #32
 80016e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016e6:	0713      	lsls	r3, r2, #28
 80016e8:	bf44      	itt	mi
 80016ea:	232b      	movmi	r3, #43	@ 0x2b
 80016ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016f0:	f89a 3000 	ldrb.w	r3, [sl]
 80016f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80016f6:	d015      	beq.n	8001724 <_vfiprintf_r+0x120>
 80016f8:	4654      	mov	r4, sl
 80016fa:	2000      	movs	r0, #0
 80016fc:	f04f 0c0a 	mov.w	ip, #10
 8001700:	9a07      	ldr	r2, [sp, #28]
 8001702:	4621      	mov	r1, r4
 8001704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001708:	3b30      	subs	r3, #48	@ 0x30
 800170a:	2b09      	cmp	r3, #9
 800170c:	d94b      	bls.n	80017a6 <_vfiprintf_r+0x1a2>
 800170e:	b1b0      	cbz	r0, 800173e <_vfiprintf_r+0x13a>
 8001710:	9207      	str	r2, [sp, #28]
 8001712:	e014      	b.n	800173e <_vfiprintf_r+0x13a>
 8001714:	eba0 0308 	sub.w	r3, r0, r8
 8001718:	fa09 f303 	lsl.w	r3, r9, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	46a2      	mov	sl, r4
 8001720:	9304      	str	r3, [sp, #16]
 8001722:	e7d2      	b.n	80016ca <_vfiprintf_r+0xc6>
 8001724:	9b03      	ldr	r3, [sp, #12]
 8001726:	1d19      	adds	r1, r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	9103      	str	r1, [sp, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	bfbb      	ittet	lt
 8001730:	425b      	neglt	r3, r3
 8001732:	f042 0202 	orrlt.w	r2, r2, #2
 8001736:	9307      	strge	r3, [sp, #28]
 8001738:	9307      	strlt	r3, [sp, #28]
 800173a:	bfb8      	it	lt
 800173c:	9204      	strlt	r2, [sp, #16]
 800173e:	7823      	ldrb	r3, [r4, #0]
 8001740:	2b2e      	cmp	r3, #46	@ 0x2e
 8001742:	d10a      	bne.n	800175a <_vfiprintf_r+0x156>
 8001744:	7863      	ldrb	r3, [r4, #1]
 8001746:	2b2a      	cmp	r3, #42	@ 0x2a
 8001748:	d132      	bne.n	80017b0 <_vfiprintf_r+0x1ac>
 800174a:	9b03      	ldr	r3, [sp, #12]
 800174c:	3402      	adds	r4, #2
 800174e:	1d1a      	adds	r2, r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	9203      	str	r2, [sp, #12]
 8001754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001758:	9305      	str	r3, [sp, #20]
 800175a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001824 <_vfiprintf_r+0x220>
 800175e:	2203      	movs	r2, #3
 8001760:	4650      	mov	r0, sl
 8001762:	7821      	ldrb	r1, [r4, #0]
 8001764:	f000 fa9a 	bl	8001c9c <memchr>
 8001768:	b138      	cbz	r0, 800177a <_vfiprintf_r+0x176>
 800176a:	2240      	movs	r2, #64	@ 0x40
 800176c:	9b04      	ldr	r3, [sp, #16]
 800176e:	eba0 000a 	sub.w	r0, r0, sl
 8001772:	4082      	lsls	r2, r0
 8001774:	4313      	orrs	r3, r2
 8001776:	3401      	adds	r4, #1
 8001778:	9304      	str	r3, [sp, #16]
 800177a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800177e:	2206      	movs	r2, #6
 8001780:	4829      	ldr	r0, [pc, #164]	@ (8001828 <_vfiprintf_r+0x224>)
 8001782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001786:	f000 fa89 	bl	8001c9c <memchr>
 800178a:	2800      	cmp	r0, #0
 800178c:	d03f      	beq.n	800180e <_vfiprintf_r+0x20a>
 800178e:	4b27      	ldr	r3, [pc, #156]	@ (800182c <_vfiprintf_r+0x228>)
 8001790:	bb1b      	cbnz	r3, 80017da <_vfiprintf_r+0x1d6>
 8001792:	9b03      	ldr	r3, [sp, #12]
 8001794:	3307      	adds	r3, #7
 8001796:	f023 0307 	bic.w	r3, r3, #7
 800179a:	3308      	adds	r3, #8
 800179c:	9303      	str	r3, [sp, #12]
 800179e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80017a0:	443b      	add	r3, r7
 80017a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80017a4:	e76a      	b.n	800167c <_vfiprintf_r+0x78>
 80017a6:	460c      	mov	r4, r1
 80017a8:	2001      	movs	r0, #1
 80017aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80017ae:	e7a8      	b.n	8001702 <_vfiprintf_r+0xfe>
 80017b0:	2300      	movs	r3, #0
 80017b2:	f04f 0c0a 	mov.w	ip, #10
 80017b6:	4619      	mov	r1, r3
 80017b8:	3401      	adds	r4, #1
 80017ba:	9305      	str	r3, [sp, #20]
 80017bc:	4620      	mov	r0, r4
 80017be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017c2:	3a30      	subs	r2, #48	@ 0x30
 80017c4:	2a09      	cmp	r2, #9
 80017c6:	d903      	bls.n	80017d0 <_vfiprintf_r+0x1cc>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0c6      	beq.n	800175a <_vfiprintf_r+0x156>
 80017cc:	9105      	str	r1, [sp, #20]
 80017ce:	e7c4      	b.n	800175a <_vfiprintf_r+0x156>
 80017d0:	4604      	mov	r4, r0
 80017d2:	2301      	movs	r3, #1
 80017d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80017d8:	e7f0      	b.n	80017bc <_vfiprintf_r+0x1b8>
 80017da:	ab03      	add	r3, sp, #12
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	462a      	mov	r2, r5
 80017e0:	4630      	mov	r0, r6
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_vfiprintf_r+0x22c>)
 80017e4:	a904      	add	r1, sp, #16
 80017e6:	f3af 8000 	nop.w
 80017ea:	4607      	mov	r7, r0
 80017ec:	1c78      	adds	r0, r7, #1
 80017ee:	d1d6      	bne.n	800179e <_vfiprintf_r+0x19a>
 80017f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017f2:	07d9      	lsls	r1, r3, #31
 80017f4:	d405      	bmi.n	8001802 <_vfiprintf_r+0x1fe>
 80017f6:	89ab      	ldrh	r3, [r5, #12]
 80017f8:	059a      	lsls	r2, r3, #22
 80017fa:	d402      	bmi.n	8001802 <_vfiprintf_r+0x1fe>
 80017fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017fe:	f7ff fde1 	bl	80013c4 <__retarget_lock_release_recursive>
 8001802:	89ab      	ldrh	r3, [r5, #12]
 8001804:	065b      	lsls	r3, r3, #25
 8001806:	f53f af1f 	bmi.w	8001648 <_vfiprintf_r+0x44>
 800180a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800180c:	e71e      	b.n	800164c <_vfiprintf_r+0x48>
 800180e:	ab03      	add	r3, sp, #12
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	462a      	mov	r2, r5
 8001814:	4630      	mov	r0, r6
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <_vfiprintf_r+0x22c>)
 8001818:	a904      	add	r1, sp, #16
 800181a:	f000 f87d 	bl	8001918 <_printf_i>
 800181e:	e7e4      	b.n	80017ea <_vfiprintf_r+0x1e6>
 8001820:	08001e12 	.word	0x08001e12
 8001824:	08001e18 	.word	0x08001e18
 8001828:	08001e1c 	.word	0x08001e1c
 800182c:	00000000 	.word	0x00000000
 8001830:	080015df 	.word	0x080015df

08001834 <_printf_common>:
 8001834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001838:	4616      	mov	r6, r2
 800183a:	4698      	mov	r8, r3
 800183c:	688a      	ldr	r2, [r1, #8]
 800183e:	690b      	ldr	r3, [r1, #16]
 8001840:	4607      	mov	r7, r0
 8001842:	4293      	cmp	r3, r2
 8001844:	bfb8      	it	lt
 8001846:	4613      	movlt	r3, r2
 8001848:	6033      	str	r3, [r6, #0]
 800184a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800184e:	460c      	mov	r4, r1
 8001850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001854:	b10a      	cbz	r2, 800185a <_printf_common+0x26>
 8001856:	3301      	adds	r3, #1
 8001858:	6033      	str	r3, [r6, #0]
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	0699      	lsls	r1, r3, #26
 800185e:	bf42      	ittt	mi
 8001860:	6833      	ldrmi	r3, [r6, #0]
 8001862:	3302      	addmi	r3, #2
 8001864:	6033      	strmi	r3, [r6, #0]
 8001866:	6825      	ldr	r5, [r4, #0]
 8001868:	f015 0506 	ands.w	r5, r5, #6
 800186c:	d106      	bne.n	800187c <_printf_common+0x48>
 800186e:	f104 0a19 	add.w	sl, r4, #25
 8001872:	68e3      	ldr	r3, [r4, #12]
 8001874:	6832      	ldr	r2, [r6, #0]
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	42ab      	cmp	r3, r5
 800187a:	dc2b      	bgt.n	80018d4 <_printf_common+0xa0>
 800187c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	3b00      	subs	r3, #0
 8001884:	bf18      	it	ne
 8001886:	2301      	movne	r3, #1
 8001888:	0692      	lsls	r2, r2, #26
 800188a:	d430      	bmi.n	80018ee <_printf_common+0xba>
 800188c:	4641      	mov	r1, r8
 800188e:	4638      	mov	r0, r7
 8001890:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001894:	47c8      	blx	r9
 8001896:	3001      	adds	r0, #1
 8001898:	d023      	beq.n	80018e2 <_printf_common+0xae>
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	6922      	ldr	r2, [r4, #16]
 800189e:	f003 0306 	and.w	r3, r3, #6
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf14      	ite	ne
 80018a6:	2500      	movne	r5, #0
 80018a8:	6833      	ldreq	r3, [r6, #0]
 80018aa:	f04f 0600 	mov.w	r6, #0
 80018ae:	bf08      	it	eq
 80018b0:	68e5      	ldreq	r5, [r4, #12]
 80018b2:	f104 041a 	add.w	r4, r4, #26
 80018b6:	bf08      	it	eq
 80018b8:	1aed      	subeq	r5, r5, r3
 80018ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80018be:	bf08      	it	eq
 80018c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bfc4      	itt	gt
 80018c8:	1a9b      	subgt	r3, r3, r2
 80018ca:	18ed      	addgt	r5, r5, r3
 80018cc:	42b5      	cmp	r5, r6
 80018ce:	d11a      	bne.n	8001906 <_printf_common+0xd2>
 80018d0:	2000      	movs	r0, #0
 80018d2:	e008      	b.n	80018e6 <_printf_common+0xb2>
 80018d4:	2301      	movs	r3, #1
 80018d6:	4652      	mov	r2, sl
 80018d8:	4641      	mov	r1, r8
 80018da:	4638      	mov	r0, r7
 80018dc:	47c8      	blx	r9
 80018de:	3001      	adds	r0, #1
 80018e0:	d103      	bne.n	80018ea <_printf_common+0xb6>
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ea:	3501      	adds	r5, #1
 80018ec:	e7c1      	b.n	8001872 <_printf_common+0x3e>
 80018ee:	2030      	movs	r0, #48	@ 0x30
 80018f0:	18e1      	adds	r1, r4, r3
 80018f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80018fc:	4422      	add	r2, r4
 80018fe:	3302      	adds	r3, #2
 8001900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001904:	e7c2      	b.n	800188c <_printf_common+0x58>
 8001906:	2301      	movs	r3, #1
 8001908:	4622      	mov	r2, r4
 800190a:	4641      	mov	r1, r8
 800190c:	4638      	mov	r0, r7
 800190e:	47c8      	blx	r9
 8001910:	3001      	adds	r0, #1
 8001912:	d0e6      	beq.n	80018e2 <_printf_common+0xae>
 8001914:	3601      	adds	r6, #1
 8001916:	e7d9      	b.n	80018cc <_printf_common+0x98>

08001918 <_printf_i>:
 8001918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800191c:	7e0f      	ldrb	r7, [r1, #24]
 800191e:	4691      	mov	r9, r2
 8001920:	2f78      	cmp	r7, #120	@ 0x78
 8001922:	4680      	mov	r8, r0
 8001924:	460c      	mov	r4, r1
 8001926:	469a      	mov	sl, r3
 8001928:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800192a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800192e:	d807      	bhi.n	8001940 <_printf_i+0x28>
 8001930:	2f62      	cmp	r7, #98	@ 0x62
 8001932:	d80a      	bhi.n	800194a <_printf_i+0x32>
 8001934:	2f00      	cmp	r7, #0
 8001936:	f000 80d1 	beq.w	8001adc <_printf_i+0x1c4>
 800193a:	2f58      	cmp	r7, #88	@ 0x58
 800193c:	f000 80b8 	beq.w	8001ab0 <_printf_i+0x198>
 8001940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001948:	e03a      	b.n	80019c0 <_printf_i+0xa8>
 800194a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800194e:	2b15      	cmp	r3, #21
 8001950:	d8f6      	bhi.n	8001940 <_printf_i+0x28>
 8001952:	a101      	add	r1, pc, #4	@ (adr r1, 8001958 <_printf_i+0x40>)
 8001954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001958:	080019b1 	.word	0x080019b1
 800195c:	080019c5 	.word	0x080019c5
 8001960:	08001941 	.word	0x08001941
 8001964:	08001941 	.word	0x08001941
 8001968:	08001941 	.word	0x08001941
 800196c:	08001941 	.word	0x08001941
 8001970:	080019c5 	.word	0x080019c5
 8001974:	08001941 	.word	0x08001941
 8001978:	08001941 	.word	0x08001941
 800197c:	08001941 	.word	0x08001941
 8001980:	08001941 	.word	0x08001941
 8001984:	08001ac3 	.word	0x08001ac3
 8001988:	080019ef 	.word	0x080019ef
 800198c:	08001a7d 	.word	0x08001a7d
 8001990:	08001941 	.word	0x08001941
 8001994:	08001941 	.word	0x08001941
 8001998:	08001ae5 	.word	0x08001ae5
 800199c:	08001941 	.word	0x08001941
 80019a0:	080019ef 	.word	0x080019ef
 80019a4:	08001941 	.word	0x08001941
 80019a8:	08001941 	.word	0x08001941
 80019ac:	08001a85 	.word	0x08001a85
 80019b0:	6833      	ldr	r3, [r6, #0]
 80019b2:	1d1a      	adds	r2, r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6032      	str	r2, [r6, #0]
 80019b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80019bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019c0:	2301      	movs	r3, #1
 80019c2:	e09c      	b.n	8001afe <_printf_i+0x1e6>
 80019c4:	6833      	ldr	r3, [r6, #0]
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	1d19      	adds	r1, r3, #4
 80019ca:	6031      	str	r1, [r6, #0]
 80019cc:	0606      	lsls	r6, r0, #24
 80019ce:	d501      	bpl.n	80019d4 <_printf_i+0xbc>
 80019d0:	681d      	ldr	r5, [r3, #0]
 80019d2:	e003      	b.n	80019dc <_printf_i+0xc4>
 80019d4:	0645      	lsls	r5, r0, #25
 80019d6:	d5fb      	bpl.n	80019d0 <_printf_i+0xb8>
 80019d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80019dc:	2d00      	cmp	r5, #0
 80019de:	da03      	bge.n	80019e8 <_printf_i+0xd0>
 80019e0:	232d      	movs	r3, #45	@ 0x2d
 80019e2:	426d      	negs	r5, r5
 80019e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019e8:	230a      	movs	r3, #10
 80019ea:	4858      	ldr	r0, [pc, #352]	@ (8001b4c <_printf_i+0x234>)
 80019ec:	e011      	b.n	8001a12 <_printf_i+0xfa>
 80019ee:	6821      	ldr	r1, [r4, #0]
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	0608      	lsls	r0, r1, #24
 80019f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80019f8:	d402      	bmi.n	8001a00 <_printf_i+0xe8>
 80019fa:	0649      	lsls	r1, r1, #25
 80019fc:	bf48      	it	mi
 80019fe:	b2ad      	uxthmi	r5, r5
 8001a00:	2f6f      	cmp	r7, #111	@ 0x6f
 8001a02:	6033      	str	r3, [r6, #0]
 8001a04:	bf14      	ite	ne
 8001a06:	230a      	movne	r3, #10
 8001a08:	2308      	moveq	r3, #8
 8001a0a:	4850      	ldr	r0, [pc, #320]	@ (8001b4c <_printf_i+0x234>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001a12:	6866      	ldr	r6, [r4, #4]
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	60a6      	str	r6, [r4, #8]
 8001a18:	db05      	blt.n	8001a26 <_printf_i+0x10e>
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	432e      	orrs	r6, r5
 8001a1e:	f021 0104 	bic.w	r1, r1, #4
 8001a22:	6021      	str	r1, [r4, #0]
 8001a24:	d04b      	beq.n	8001abe <_printf_i+0x1a6>
 8001a26:	4616      	mov	r6, r2
 8001a28:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a2c:	fb03 5711 	mls	r7, r3, r1, r5
 8001a30:	5dc7      	ldrb	r7, [r0, r7]
 8001a32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a36:	462f      	mov	r7, r5
 8001a38:	42bb      	cmp	r3, r7
 8001a3a:	460d      	mov	r5, r1
 8001a3c:	d9f4      	bls.n	8001a28 <_printf_i+0x110>
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d10b      	bne.n	8001a5a <_printf_i+0x142>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	07df      	lsls	r7, r3, #31
 8001a46:	d508      	bpl.n	8001a5a <_printf_i+0x142>
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	6861      	ldr	r1, [r4, #4]
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	bfde      	ittt	le
 8001a50:	2330      	movle	r3, #48	@ 0x30
 8001a52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a56:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001a5a:	1b92      	subs	r2, r2, r6
 8001a5c:	6122      	str	r2, [r4, #16]
 8001a5e:	464b      	mov	r3, r9
 8001a60:	4621      	mov	r1, r4
 8001a62:	4640      	mov	r0, r8
 8001a64:	f8cd a000 	str.w	sl, [sp]
 8001a68:	aa03      	add	r2, sp, #12
 8001a6a:	f7ff fee3 	bl	8001834 <_printf_common>
 8001a6e:	3001      	adds	r0, #1
 8001a70:	d14a      	bne.n	8001b08 <_printf_i+0x1f0>
 8001a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a76:	b004      	add	sp, #16
 8001a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	2778      	movs	r7, #120	@ 0x78
 8001a86:	4832      	ldr	r0, [pc, #200]	@ (8001b50 <_printf_i+0x238>)
 8001a88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	6831      	ldr	r1, [r6, #0]
 8001a90:	061f      	lsls	r7, r3, #24
 8001a92:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a96:	d402      	bmi.n	8001a9e <_printf_i+0x186>
 8001a98:	065f      	lsls	r7, r3, #25
 8001a9a:	bf48      	it	mi
 8001a9c:	b2ad      	uxthmi	r5, r5
 8001a9e:	6031      	str	r1, [r6, #0]
 8001aa0:	07d9      	lsls	r1, r3, #31
 8001aa2:	bf44      	itt	mi
 8001aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8001aa8:	6023      	strmi	r3, [r4, #0]
 8001aaa:	b11d      	cbz	r5, 8001ab4 <_printf_i+0x19c>
 8001aac:	2310      	movs	r3, #16
 8001aae:	e7ad      	b.n	8001a0c <_printf_i+0xf4>
 8001ab0:	4826      	ldr	r0, [pc, #152]	@ (8001b4c <_printf_i+0x234>)
 8001ab2:	e7e9      	b.n	8001a88 <_printf_i+0x170>
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f023 0320 	bic.w	r3, r3, #32
 8001aba:	6023      	str	r3, [r4, #0]
 8001abc:	e7f6      	b.n	8001aac <_printf_i+0x194>
 8001abe:	4616      	mov	r6, r2
 8001ac0:	e7bd      	b.n	8001a3e <_printf_i+0x126>
 8001ac2:	6833      	ldr	r3, [r6, #0]
 8001ac4:	6825      	ldr	r5, [r4, #0]
 8001ac6:	1d18      	adds	r0, r3, #4
 8001ac8:	6961      	ldr	r1, [r4, #20]
 8001aca:	6030      	str	r0, [r6, #0]
 8001acc:	062e      	lsls	r6, r5, #24
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	d501      	bpl.n	8001ad6 <_printf_i+0x1be>
 8001ad2:	6019      	str	r1, [r3, #0]
 8001ad4:	e002      	b.n	8001adc <_printf_i+0x1c4>
 8001ad6:	0668      	lsls	r0, r5, #25
 8001ad8:	d5fb      	bpl.n	8001ad2 <_printf_i+0x1ba>
 8001ada:	8019      	strh	r1, [r3, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	4616      	mov	r6, r2
 8001ae0:	6123      	str	r3, [r4, #16]
 8001ae2:	e7bc      	b.n	8001a5e <_printf_i+0x146>
 8001ae4:	6833      	ldr	r3, [r6, #0]
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	1d1a      	adds	r2, r3, #4
 8001aea:	6032      	str	r2, [r6, #0]
 8001aec:	681e      	ldr	r6, [r3, #0]
 8001aee:	6862      	ldr	r2, [r4, #4]
 8001af0:	4630      	mov	r0, r6
 8001af2:	f000 f8d3 	bl	8001c9c <memchr>
 8001af6:	b108      	cbz	r0, 8001afc <_printf_i+0x1e4>
 8001af8:	1b80      	subs	r0, r0, r6
 8001afa:	6060      	str	r0, [r4, #4]
 8001afc:	6863      	ldr	r3, [r4, #4]
 8001afe:	6123      	str	r3, [r4, #16]
 8001b00:	2300      	movs	r3, #0
 8001b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b06:	e7aa      	b.n	8001a5e <_printf_i+0x146>
 8001b08:	4632      	mov	r2, r6
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	4640      	mov	r0, r8
 8001b0e:	6923      	ldr	r3, [r4, #16]
 8001b10:	47d0      	blx	sl
 8001b12:	3001      	adds	r0, #1
 8001b14:	d0ad      	beq.n	8001a72 <_printf_i+0x15a>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	079b      	lsls	r3, r3, #30
 8001b1a:	d413      	bmi.n	8001b44 <_printf_i+0x22c>
 8001b1c:	68e0      	ldr	r0, [r4, #12]
 8001b1e:	9b03      	ldr	r3, [sp, #12]
 8001b20:	4298      	cmp	r0, r3
 8001b22:	bfb8      	it	lt
 8001b24:	4618      	movlt	r0, r3
 8001b26:	e7a6      	b.n	8001a76 <_printf_i+0x15e>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4632      	mov	r2, r6
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	4640      	mov	r0, r8
 8001b30:	47d0      	blx	sl
 8001b32:	3001      	adds	r0, #1
 8001b34:	d09d      	beq.n	8001a72 <_printf_i+0x15a>
 8001b36:	3501      	adds	r5, #1
 8001b38:	68e3      	ldr	r3, [r4, #12]
 8001b3a:	9903      	ldr	r1, [sp, #12]
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	42ab      	cmp	r3, r5
 8001b40:	dcf2      	bgt.n	8001b28 <_printf_i+0x210>
 8001b42:	e7eb      	b.n	8001b1c <_printf_i+0x204>
 8001b44:	2500      	movs	r5, #0
 8001b46:	f104 0619 	add.w	r6, r4, #25
 8001b4a:	e7f5      	b.n	8001b38 <_printf_i+0x220>
 8001b4c:	08001e23 	.word	0x08001e23
 8001b50:	08001e34 	.word	0x08001e34

08001b54 <__swbuf_r>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	460e      	mov	r6, r1
 8001b58:	4614      	mov	r4, r2
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	b118      	cbz	r0, 8001b66 <__swbuf_r+0x12>
 8001b5e:	6a03      	ldr	r3, [r0, #32]
 8001b60:	b90b      	cbnz	r3, 8001b66 <__swbuf_r+0x12>
 8001b62:	f7ff fb29 	bl	80011b8 <__sinit>
 8001b66:	69a3      	ldr	r3, [r4, #24]
 8001b68:	60a3      	str	r3, [r4, #8]
 8001b6a:	89a3      	ldrh	r3, [r4, #12]
 8001b6c:	071a      	lsls	r2, r3, #28
 8001b6e:	d501      	bpl.n	8001b74 <__swbuf_r+0x20>
 8001b70:	6923      	ldr	r3, [r4, #16]
 8001b72:	b943      	cbnz	r3, 8001b86 <__swbuf_r+0x32>
 8001b74:	4621      	mov	r1, r4
 8001b76:	4628      	mov	r0, r5
 8001b78:	f000 f82a 	bl	8001bd0 <__swsetup_r>
 8001b7c:	b118      	cbz	r0, 8001b86 <__swbuf_r+0x32>
 8001b7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001b82:	4638      	mov	r0, r7
 8001b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	6922      	ldr	r2, [r4, #16]
 8001b8a:	b2f6      	uxtb	r6, r6
 8001b8c:	1a98      	subs	r0, r3, r2
 8001b8e:	6963      	ldr	r3, [r4, #20]
 8001b90:	4637      	mov	r7, r6
 8001b92:	4283      	cmp	r3, r0
 8001b94:	dc05      	bgt.n	8001ba2 <__swbuf_r+0x4e>
 8001b96:	4621      	mov	r1, r4
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7ff fa45 	bl	8001028 <_fflush_r>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d1ed      	bne.n	8001b7e <__swbuf_r+0x2a>
 8001ba2:	68a3      	ldr	r3, [r4, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60a3      	str	r3, [r4, #8]
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	6022      	str	r2, [r4, #0]
 8001bae:	701e      	strb	r6, [r3, #0]
 8001bb0:	6962      	ldr	r2, [r4, #20]
 8001bb2:	1c43      	adds	r3, r0, #1
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d004      	beq.n	8001bc2 <__swbuf_r+0x6e>
 8001bb8:	89a3      	ldrh	r3, [r4, #12]
 8001bba:	07db      	lsls	r3, r3, #31
 8001bbc:	d5e1      	bpl.n	8001b82 <__swbuf_r+0x2e>
 8001bbe:	2e0a      	cmp	r6, #10
 8001bc0:	d1df      	bne.n	8001b82 <__swbuf_r+0x2e>
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fa2f 	bl	8001028 <_fflush_r>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d0d9      	beq.n	8001b82 <__swbuf_r+0x2e>
 8001bce:	e7d6      	b.n	8001b7e <__swbuf_r+0x2a>

08001bd0 <__swsetup_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <__swsetup_r+0xa8>)
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	460c      	mov	r4, r1
 8001bda:	b118      	cbz	r0, 8001be4 <__swsetup_r+0x14>
 8001bdc:	6a03      	ldr	r3, [r0, #32]
 8001bde:	b90b      	cbnz	r3, 8001be4 <__swsetup_r+0x14>
 8001be0:	f7ff faea 	bl	80011b8 <__sinit>
 8001be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001be8:	0719      	lsls	r1, r3, #28
 8001bea:	d422      	bmi.n	8001c32 <__swsetup_r+0x62>
 8001bec:	06da      	lsls	r2, r3, #27
 8001bee:	d407      	bmi.n	8001c00 <__swsetup_r+0x30>
 8001bf0:	2209      	movs	r2, #9
 8001bf2:	602a      	str	r2, [r5, #0]
 8001bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bfc:	81a3      	strh	r3, [r4, #12]
 8001bfe:	e033      	b.n	8001c68 <__swsetup_r+0x98>
 8001c00:	0758      	lsls	r0, r3, #29
 8001c02:	d512      	bpl.n	8001c2a <__swsetup_r+0x5a>
 8001c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c06:	b141      	cbz	r1, 8001c1a <__swsetup_r+0x4a>
 8001c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001c0c:	4299      	cmp	r1, r3
 8001c0e:	d002      	beq.n	8001c16 <__swsetup_r+0x46>
 8001c10:	4628      	mov	r0, r5
 8001c12:	f7ff fbd9 	bl	80013c8 <_free_r>
 8001c16:	2300      	movs	r3, #0
 8001c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001c20:	81a3      	strh	r3, [r4, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	6063      	str	r3, [r4, #4]
 8001c26:	6923      	ldr	r3, [r4, #16]
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	6923      	ldr	r3, [r4, #16]
 8001c34:	b94b      	cbnz	r3, 8001c4a <__swsetup_r+0x7a>
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c40:	d003      	beq.n	8001c4a <__swsetup_r+0x7a>
 8001c42:	4621      	mov	r1, r4
 8001c44:	4628      	mov	r0, r5
 8001c46:	f000 f85c 	bl	8001d02 <__smakebuf_r>
 8001c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c4e:	f013 0201 	ands.w	r2, r3, #1
 8001c52:	d00a      	beq.n	8001c6a <__swsetup_r+0x9a>
 8001c54:	2200      	movs	r2, #0
 8001c56:	60a2      	str	r2, [r4, #8]
 8001c58:	6962      	ldr	r2, [r4, #20]
 8001c5a:	4252      	negs	r2, r2
 8001c5c:	61a2      	str	r2, [r4, #24]
 8001c5e:	6922      	ldr	r2, [r4, #16]
 8001c60:	b942      	cbnz	r2, 8001c74 <__swsetup_r+0xa4>
 8001c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001c66:	d1c5      	bne.n	8001bf4 <__swsetup_r+0x24>
 8001c68:	bd38      	pop	{r3, r4, r5, pc}
 8001c6a:	0799      	lsls	r1, r3, #30
 8001c6c:	bf58      	it	pl
 8001c6e:	6962      	ldrpl	r2, [r4, #20]
 8001c70:	60a2      	str	r2, [r4, #8]
 8001c72:	e7f4      	b.n	8001c5e <__swsetup_r+0x8e>
 8001c74:	2000      	movs	r0, #0
 8001c76:	e7f7      	b.n	8001c68 <__swsetup_r+0x98>
 8001c78:	20000018 	.word	0x20000018

08001c7c <_sbrk_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	2300      	movs	r3, #0
 8001c80:	4d05      	ldr	r5, [pc, #20]	@ (8001c98 <_sbrk_r+0x1c>)
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	602b      	str	r3, [r5, #0]
 8001c88:	f7fe fba4 	bl	80003d4 <_sbrk>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d102      	bne.n	8001c96 <_sbrk_r+0x1a>
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	b103      	cbz	r3, 8001c96 <_sbrk_r+0x1a>
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
 8001c98:	200001cc 	.word	0x200001cc

08001c9c <memchr>:
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	b2c9      	uxtb	r1, r1
 8001ca2:	4402      	add	r2, r0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	d101      	bne.n	8001cae <memchr+0x12>
 8001caa:	2000      	movs	r0, #0
 8001cac:	e003      	b.n	8001cb6 <memchr+0x1a>
 8001cae:	7804      	ldrb	r4, [r0, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	428c      	cmp	r4, r1
 8001cb4:	d1f6      	bne.n	8001ca4 <memchr+0x8>
 8001cb6:	bd10      	pop	{r4, pc}

08001cb8 <__swhatbuf_r>:
 8001cb8:	b570      	push	{r4, r5, r6, lr}
 8001cba:	460c      	mov	r4, r1
 8001cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cc0:	4615      	mov	r5, r2
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	461e      	mov	r6, r3
 8001cc6:	b096      	sub	sp, #88	@ 0x58
 8001cc8:	da0c      	bge.n	8001ce4 <__swhatbuf_r+0x2c>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001cd2:	bf14      	ite	ne
 8001cd4:	2340      	movne	r3, #64	@ 0x40
 8001cd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001cda:	2000      	movs	r0, #0
 8001cdc:	6031      	str	r1, [r6, #0]
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	b016      	add	sp, #88	@ 0x58
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	466a      	mov	r2, sp
 8001ce6:	f000 f849 	bl	8001d7c <_fstat_r>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	dbed      	blt.n	8001cca <__swhatbuf_r+0x12>
 8001cee:	9901      	ldr	r1, [sp, #4]
 8001cf0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001cf4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001cf8:	4259      	negs	r1, r3
 8001cfa:	4159      	adcs	r1, r3
 8001cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d00:	e7eb      	b.n	8001cda <__swhatbuf_r+0x22>

08001d02 <__smakebuf_r>:
 8001d02:	898b      	ldrh	r3, [r1, #12]
 8001d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d06:	079d      	lsls	r5, r3, #30
 8001d08:	4606      	mov	r6, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	d507      	bpl.n	8001d1e <__smakebuf_r+0x1c>
 8001d0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001d12:	6023      	str	r3, [r4, #0]
 8001d14:	6123      	str	r3, [r4, #16]
 8001d16:	2301      	movs	r3, #1
 8001d18:	6163      	str	r3, [r4, #20]
 8001d1a:	b003      	add	sp, #12
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	466a      	mov	r2, sp
 8001d20:	ab01      	add	r3, sp, #4
 8001d22:	f7ff ffc9 	bl	8001cb8 <__swhatbuf_r>
 8001d26:	9f00      	ldr	r7, [sp, #0]
 8001d28:	4605      	mov	r5, r0
 8001d2a:	4639      	mov	r1, r7
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f7ff fbb5 	bl	800149c <_malloc_r>
 8001d32:	b948      	cbnz	r0, 8001d48 <__smakebuf_r+0x46>
 8001d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d38:	059a      	lsls	r2, r3, #22
 8001d3a:	d4ee      	bmi.n	8001d1a <__smakebuf_r+0x18>
 8001d3c:	f023 0303 	bic.w	r3, r3, #3
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	81a3      	strh	r3, [r4, #12]
 8001d46:	e7e2      	b.n	8001d0e <__smakebuf_r+0xc>
 8001d48:	89a3      	ldrh	r3, [r4, #12]
 8001d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d52:	81a3      	strh	r3, [r4, #12]
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	6020      	str	r0, [r4, #0]
 8001d58:	b15b      	cbz	r3, 8001d72 <__smakebuf_r+0x70>
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d60:	f000 f81e 	bl	8001da0 <_isatty_r>
 8001d64:	b128      	cbz	r0, 8001d72 <__smakebuf_r+0x70>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f023 0303 	bic.w	r3, r3, #3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	431d      	orrs	r5, r3
 8001d76:	81a5      	strh	r5, [r4, #12]
 8001d78:	e7cf      	b.n	8001d1a <__smakebuf_r+0x18>
	...

08001d7c <_fstat_r>:
 8001d7c:	b538      	push	{r3, r4, r5, lr}
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4d06      	ldr	r5, [pc, #24]	@ (8001d9c <_fstat_r+0x20>)
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	602b      	str	r3, [r5, #0]
 8001d8a:	f7fe fafd 	bl	8000388 <_fstat>
 8001d8e:	1c43      	adds	r3, r0, #1
 8001d90:	d102      	bne.n	8001d98 <_fstat_r+0x1c>
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	b103      	cbz	r3, 8001d98 <_fstat_r+0x1c>
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001cc 	.word	0x200001cc

08001da0 <_isatty_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	2300      	movs	r3, #0
 8001da4:	4d05      	ldr	r5, [pc, #20]	@ (8001dbc <_isatty_r+0x1c>)
 8001da6:	4604      	mov	r4, r0
 8001da8:	4608      	mov	r0, r1
 8001daa:	602b      	str	r3, [r5, #0]
 8001dac:	f7fe fafb 	bl	80003a6 <_isatty>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_isatty_r+0x1a>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_isatty_r+0x1a>
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	200001cc 	.word	0x200001cc

08001dc0 <_init>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	bf00      	nop
 8001dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc6:	bc08      	pop	{r3}
 8001dc8:	469e      	mov	lr, r3
 8001dca:	4770      	bx	lr

08001dcc <_fini>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	bf00      	nop
 8001dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd2:	bc08      	pop	{r3}
 8001dd4:	469e      	mov	lr, r3
 8001dd6:	4770      	bx	lr
