
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8d0  080032e8  080032e8  000042e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb8  0800dbb8  0000f028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800dbb8  0800dbb8  0000f028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800dbb8  0800dbb8  0000f028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800dbc0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000028  0800dbe8  0000f028  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20000a44  0800dbe8  0000fa44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b03  00000000  00000000  0000f051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001935  00000000  00000000  00015b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00017490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016d45  00000000  00000000  00017bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000855e  00000000  00000000  0002e90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008185b  00000000  00000000  00036e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b86c6  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000553  00000000  00000000  000b8709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bac  00000000  00000000  000b8c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ba808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080032d0 	.word	0x080032d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080032d0 	.word	0x080032d0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fa54 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a6 	bl	80002a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f886 	bl	800026c <MX_DMA_Init>
  MX_SPI1_Init();
 8000160:	f000 f84e 	bl	8000200 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 8000164:	f000 f9d4 	bl	8000510 <ST7789_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2108      	movs	r1, #8
 800016c:	4802      	ldr	r0, [pc, #8]	@ (8000178 <main+0x2c>)
 800016e:	f001 ffc3 	bl	80020f8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7789_Test();
 8000172:	f000 ff81 	bl	8001078 <ST7789_Test>
 8000176:	e7fc      	b.n	8000172 <main+0x26>
 8000178:	40010800 	.word	0x40010800

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	@ 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	@ 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f003 f873 	bl	8003276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019e:	2302      	movs	r3, #2
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a6:	2310      	movs	r3, #16
 80001a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ae:	2300      	movs	r3, #0
 80001b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 ffb3 	bl	8002128 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c8:	f000 f8a0 	bl	800030c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2101      	movs	r1, #1
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fa20 	bl	800262c <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f2:	f000 f88b 	bl	800030c <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	@ 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000204:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000206:	4a18      	ldr	r2, [pc, #96]	@ (8000268 <MX_SPI1_Init+0x68>)
 8000208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800020a:	4b16      	ldr	r3, [pc, #88]	@ (8000264 <MX_SPI1_Init+0x64>)
 800020c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000212:	4b14      	ldr	r3, [pc, #80]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000218:	4b12      	ldr	r3, [pc, #72]	@ (8000264 <MX_SPI1_Init+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000220:	2202      	movs	r2, #2
 8000222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000224:	4b0f      	ldr	r3, [pc, #60]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <MX_SPI1_Init+0x64>)
 800022c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000232:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000234:	2210      	movs	r2, #16
 8000236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <MX_SPI1_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800023e:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <MX_SPI1_Init+0x64>)
 800024c:	220a      	movs	r2, #10
 800024e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	@ (8000264 <MX_SPI1_Init+0x64>)
 8000252:	f002 fb47 	bl	80028e4 <HAL_SPI_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800025c:	f000 f856 	bl	800030c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000044 	.word	0x20000044
 8000268:	40013000 	.word	0x40013000

0800026c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000272:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <MX_DMA_Init+0x38>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a0b      	ldr	r2, [pc, #44]	@ (80002a4 <MX_DMA_Init+0x38>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6153      	str	r3, [r2, #20]
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <MX_DMA_Init+0x38>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	200d      	movs	r0, #13
 8000290:	f001 fb11 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000294:	200d      	movs	r0, #13
 8000296:	f001 fb2a 	bl	80018ee <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_GPIO_Init+0x5c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a10      	ldr	r2, [pc, #64]	@ (8000304 <MX_GPIO_Init+0x5c>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_GPIO_Init+0x5c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	210e      	movs	r1, #14
 80002d8:	480b      	ldr	r0, [pc, #44]	@ (8000308 <MX_GPIO_Init+0x60>)
 80002da:	f001 ff0d 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002de:	230e      	movs	r3, #14
 80002e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	2302      	movs	r3, #2
 80002ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	4619      	mov	r1, r3
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <MX_GPIO_Init+0x60>)
 80002f6:	f001 fd7b 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40010800 	.word	0x40010800

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <Error_Handler+0x8>

08000318 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000322:	bf00      	nop
	ST7789_DC_Clr();
 8000324:	2200      	movs	r2, #0
 8000326:	2104      	movs	r1, #4
 8000328:	4807      	ldr	r0, [pc, #28]	@ (8000348 <ST7789_WriteCommand+0x30>)
 800032a:	f001 fee5 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800032e:	1df9      	adds	r1, r7, #7
 8000330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000334:	2201      	movs	r2, #1
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <ST7789_WriteCommand+0x34>)
 8000338:	f002 fb58 	bl	80029ec <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800033c:	bf00      	nop
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010800 	.word	0x40010800
 800034c:	20000044 	.word	0x20000044

08000350 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800035a:	bf00      	nop
	ST7789_DC_Set();
 800035c:	2201      	movs	r2, #1
 800035e:	2104      	movs	r1, #4
 8000360:	481b      	ldr	r0, [pc, #108]	@ (80003d0 <ST7789_WriteData+0x80>)
 8000362:	f001 fec9 	bl	80020f8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000366:	e02a      	b.n	80003be <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800036e:	4293      	cmp	r3, r2
 8000370:	bf28      	it	cs
 8000372:	4613      	movcs	r3, r2
 8000374:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000376:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <ST7789_WriteData+0x84>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	4293      	cmp	r3, r2
 8000380:	d30e      	bcc.n	80003a0 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000382:	89fb      	ldrh	r3, [r7, #14]
 8000384:	461a      	mov	r2, r3
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	4813      	ldr	r0, [pc, #76]	@ (80003d8 <ST7789_WriteData+0x88>)
 800038a:	f002 fc73 	bl	8002c74 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <ST7789_WriteData+0x88>)
 8000392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000394:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b01      	cmp	r3, #1
 800039c:	d1f8      	bne.n	8000390 <ST7789_WriteData+0x40>
 800039e:	e006      	b.n	80003ae <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80003a0:	89fa      	ldrh	r2, [r7, #14]
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	480b      	ldr	r0, [pc, #44]	@ (80003d8 <ST7789_WriteData+0x88>)
 80003aa:	f002 fb1f 	bl	80029ec <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80003ae:	89fb      	ldrh	r3, [r7, #14]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80003b6:	89fb      	ldrh	r3, [r7, #14]
 80003b8:	683a      	ldr	r2, [r7, #0]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1d1      	bne.n	8000368 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 80003c4:	bf00      	nop
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010800 	.word	0x40010800
 80003d4:	20000018 	.word	0x20000018
 80003d8:	20000044 	.word	0x20000044

080003dc <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80003e6:	bf00      	nop
	ST7789_DC_Set();
 80003e8:	2201      	movs	r2, #1
 80003ea:	2104      	movs	r1, #4
 80003ec:	4807      	ldr	r0, [pc, #28]	@ (800040c <ST7789_WriteSmallData+0x30>)
 80003ee:	f001 fe83 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80003f2:	1df9      	adds	r1, r7, #7
 80003f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003f8:	2201      	movs	r2, #1
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <ST7789_WriteSmallData+0x34>)
 80003fc:	f002 faf6 	bl	80029ec <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000400:	bf00      	nop
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800
 8000410:	20000044 	.word	0x20000044

08000414 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800041e:	2036      	movs	r0, #54	@ 0x36
 8000420:	f7ff ff7a 	bl	8000318 <ST7789_WriteCommand>
	switch (m) {
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d81a      	bhi.n	8000460 <ST7789_SetRotation+0x4c>
 800042a:	a201      	add	r2, pc, #4	@ (adr r2, 8000430 <ST7789_SetRotation+0x1c>)
 800042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000430:	08000441 	.word	0x08000441
 8000434:	08000449 	.word	0x08000449
 8000438:	08000451 	.word	0x08000451
 800043c:	08000459 	.word	0x08000459
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000440:	20c0      	movs	r0, #192	@ 0xc0
 8000442:	f7ff ffcb 	bl	80003dc <ST7789_WriteSmallData>
		break;
 8000446:	e00c      	b.n	8000462 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000448:	20a0      	movs	r0, #160	@ 0xa0
 800044a:	f7ff ffc7 	bl	80003dc <ST7789_WriteSmallData>
		break;
 800044e:	e008      	b.n	8000462 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff ffc3 	bl	80003dc <ST7789_WriteSmallData>
		break;
 8000456:	e004      	b.n	8000462 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000458:	2060      	movs	r0, #96	@ 0x60
 800045a:	f7ff ffbf 	bl	80003dc <ST7789_WriteSmallData>
		break;
 800045e:	e000      	b.n	8000462 <ST7789_SetRotation+0x4e>
	default:
		break;
 8000460:	bf00      	nop
	}
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop

0800046c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b087      	sub	sp, #28
 8000470:	af00      	add	r7, sp, #0
 8000472:	4604      	mov	r4, r0
 8000474:	4608      	mov	r0, r1
 8000476:	4611      	mov	r1, r2
 8000478:	461a      	mov	r2, r3
 800047a:	4623      	mov	r3, r4
 800047c:	80fb      	strh	r3, [r7, #6]
 800047e:	4603      	mov	r3, r0
 8000480:	80bb      	strh	r3, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	807b      	strh	r3, [r7, #2]
 8000486:	4613      	mov	r3, r2
 8000488:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800048a:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	82fb      	strh	r3, [r7, #22]
 8000490:	887b      	ldrh	r3, [r7, #2]
 8000492:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000494:	88bb      	ldrh	r3, [r7, #4]
 8000496:	827b      	strh	r3, [r7, #18]
 8000498:	883b      	ldrh	r3, [r7, #0]
 800049a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800049c:	202a      	movs	r0, #42	@ 0x2a
 800049e:	f7ff ff3b 	bl	8000318 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80004a2:	8afb      	ldrh	r3, [r7, #22]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	733b      	strb	r3, [r7, #12]
 80004ac:	8afb      	ldrh	r3, [r7, #22]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	737b      	strb	r3, [r7, #13]
 80004b2:	8abb      	ldrh	r3, [r7, #20]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	8abb      	ldrh	r3, [r7, #20]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	2104      	movs	r1, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff41 	bl	8000350 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80004ce:	202b      	movs	r0, #43	@ 0x2b
 80004d0:	f7ff ff22 	bl	8000318 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80004d4:	8a7b      	ldrh	r3, [r7, #18]
 80004d6:	0a1b      	lsrs	r3, r3, #8
 80004d8:	b29b      	uxth	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	723b      	strb	r3, [r7, #8]
 80004de:	8a7b      	ldrh	r3, [r7, #18]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	727b      	strb	r3, [r7, #9]
 80004e4:	8a3b      	ldrh	r3, [r7, #16]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	72bb      	strb	r3, [r7, #10]
 80004ee:	8a3b      	ldrh	r3, [r7, #16]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff28 	bl	8000350 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000500:	202c      	movs	r0, #44	@ 0x2c
 8000502:	f7ff ff09 	bl	8000318 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000506:	bf00      	nop
}
 8000508:	bf00      	nop
 800050a:	371c      	adds	r7, #28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b08b      	sub	sp, #44	@ 0x2c
 8000514:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8000516:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800051a:	2100      	movs	r1, #0
 800051c:	484a      	ldr	r0, [pc, #296]	@ (8000648 <ST7789_Init+0x138>)
 800051e:	f002 feaa 	bl	8003276 <memset>
	#endif
	HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f001 f8cc 	bl	80016c0 <HAL_Delay>
    ST7789_RST_Clr();
 8000528:	2200      	movs	r2, #0
 800052a:	2102      	movs	r1, #2
 800052c:	4847      	ldr	r0, [pc, #284]	@ (800064c <ST7789_Init+0x13c>)
 800052e:	f001 fde3 	bl	80020f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000532:	200a      	movs	r0, #10
 8000534:	f001 f8c4 	bl	80016c0 <HAL_Delay>
    ST7789_RST_Set();
 8000538:	2201      	movs	r2, #1
 800053a:	2102      	movs	r1, #2
 800053c:	4843      	ldr	r0, [pc, #268]	@ (800064c <ST7789_Init+0x13c>)
 800053e:	f001 fddb 	bl	80020f8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000542:	2014      	movs	r0, #20
 8000544:	f001 f8bc 	bl	80016c0 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000548:	203a      	movs	r0, #58	@ 0x3a
 800054a:	f7ff fee5 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800054e:	2055      	movs	r0, #85	@ 0x55
 8000550:	f7ff ff44 	bl	80003dc <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000554:	20b2      	movs	r0, #178	@ 0xb2
 8000556:	f7ff fedf 	bl	8000318 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800055a:	4a3d      	ldr	r2, [pc, #244]	@ (8000650 <ST7789_Init+0x140>)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	6018      	str	r0, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2105      	movs	r1, #5
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff feed 	bl	8000350 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000576:	2002      	movs	r0, #2
 8000578:	f7ff ff4c 	bl	8000414 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800057c:	20b7      	movs	r0, #183	@ 0xb7
 800057e:	f7ff fecb 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000582:	2035      	movs	r0, #53	@ 0x35
 8000584:	f7ff ff2a 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000588:	20bb      	movs	r0, #187	@ 0xbb
 800058a:	f7ff fec5 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800058e:	2019      	movs	r0, #25
 8000590:	f7ff ff24 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000594:	20c0      	movs	r0, #192	@ 0xc0
 8000596:	f7ff febf 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800059a:	202c      	movs	r0, #44	@ 0x2c
 800059c:	f7ff ff1e 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80005a0:	20c2      	movs	r0, #194	@ 0xc2
 80005a2:	f7ff feb9 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ff18 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80005ac:	20c3      	movs	r0, #195	@ 0xc3
 80005ae:	f7ff feb3 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80005b2:	2012      	movs	r0, #18
 80005b4:	f7ff ff12 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80005b8:	20c4      	movs	r0, #196	@ 0xc4
 80005ba:	f7ff fead 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80005be:	2020      	movs	r0, #32
 80005c0:	f7ff ff0c 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80005c4:	20c6      	movs	r0, #198	@ 0xc6
 80005c6:	f7ff fea7 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80005ca:	200f      	movs	r0, #15
 80005cc:	f7ff ff06 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80005d0:	20d0      	movs	r0, #208	@ 0xd0
 80005d2:	f7ff fea1 	bl	8000318 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80005d6:	20a4      	movs	r0, #164	@ 0xa4
 80005d8:	f7ff ff00 	bl	80003dc <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80005dc:	20a1      	movs	r0, #161	@ 0xa1
 80005de:	f7ff fefd 	bl	80003dc <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80005e2:	20e0      	movs	r0, #224	@ 0xe0
 80005e4:	f7ff fe98 	bl	8000318 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <ST7789_Init+0x144>)
 80005ea:	f107 0410 	add.w	r4, r7, #16
 80005ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f0:	c407      	stmia	r4!, {r0, r1, r2}
 80005f2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	210e      	movs	r1, #14
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fea8 	bl	8000350 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000600:	20e1      	movs	r0, #225	@ 0xe1
 8000602:	f7ff fe89 	bl	8000318 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <ST7789_Init+0x148>)
 8000608:	463c      	mov	r4, r7
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	c407      	stmia	r4!, {r0, r1, r2}
 800060e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000610:	463b      	mov	r3, r7
 8000612:	210e      	movs	r1, #14
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fe9b 	bl	8000350 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800061a:	2021      	movs	r0, #33	@ 0x21
 800061c:	f7ff fe7c 	bl	8000318 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000620:	2011      	movs	r0, #17
 8000622:	f7ff fe79 	bl	8000318 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000626:	2013      	movs	r0, #19
 8000628:	f7ff fe76 	bl	8000318 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800062c:	2029      	movs	r0, #41	@ 0x29
 800062e:	f7ff fe73 	bl	8000318 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000632:	2032      	movs	r0, #50	@ 0x32
 8000634:	f001 f844 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f80f 	bl	800065c <ST7789_Fill_Color>
}
 800063e:	bf00      	nop
 8000640:	372c      	adds	r7, #44	@ 0x2c
 8000642:	46bd      	mov	sp, r7
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	bf00      	nop
 8000648:	200000e0 	.word	0x200000e0
 800064c:	40010800 	.word	0x40010800
 8000650:	080032e8 	.word	0x080032e8
 8000654:	080032f0 	.word	0x080032f0
 8000658:	08003300 	.word	0x08003300

0800065c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000666:	23ef      	movs	r3, #239	@ 0xef
 8000668:	22ef      	movs	r2, #239	@ 0xef
 800066a:	2100      	movs	r1, #0
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fefd 	bl	800046c <ST7789_SetAddressWindow>
	ST7789_Select();
 8000672:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	e00e      	b.n	8000698 <ST7789_Fill_Color+0x3c>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000680:	4619      	mov	r1, r3
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <ST7789_Fill_Color+0x4c>)
 8000684:	f002 fdf7 	bl	8003276 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8000688:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800068c:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <ST7789_Fill_Color+0x4c>)
 800068e:	f7ff fe5f 	bl	8000350 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	3301      	adds	r3, #1
 8000696:	81fb      	strh	r3, [r7, #14]
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	2b2f      	cmp	r3, #47	@ 0x2f
 800069c:	d9ed      	bls.n	800067a <ST7789_Fill_Color+0x1e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800069e:	bf00      	nop
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000e0 	.word	0x200000e0

080006ac <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
 80006b6:	460b      	mov	r3, r1
 80006b8:	80bb      	strh	r3, [r7, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	2bef      	cmp	r3, #239	@ 0xef
 80006c2:	d819      	bhi.n	80006f8 <ST7789_DrawPixel+0x4c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	2bef      	cmp	r3, #239	@ 0xef
 80006c8:	d816      	bhi.n	80006f8 <ST7789_DrawPixel+0x4c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	88b9      	ldrh	r1, [r7, #4]
 80006d0:	88f8      	ldrh	r0, [r7, #6]
 80006d2:	f7ff fecb 	bl	800046c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	733b      	strb	r3, [r7, #12]
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80006e6:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fe2e 	bl	8000350 <ST7789_WriteData>
	ST7789_UnSelect();
 80006f4:	bf00      	nop
 80006f6:	e000      	b.n	80006fa <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80006f8:	bf00      	nop
}
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	4611      	mov	r1, r2
 800070c:	461a      	mov	r2, r3
 800070e:	4623      	mov	r3, r4
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	4603      	mov	r3, r0
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	807b      	strh	r3, [r7, #2]
 800071a:	4613      	mov	r3, r2
 800071c:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 800071e:	883a      	ldrh	r2, [r7, #0]
 8000720:	88bb      	ldrh	r3, [r7, #4]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000728:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800072c:	8879      	ldrh	r1, [r7, #2]
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	bfb8      	it	lt
 8000736:	425b      	neglt	r3, r3
 8000738:	429a      	cmp	r2, r3
 800073a:	bfcc      	ite	gt
 800073c:	2301      	movgt	r3, #1
 800073e:	2300      	movle	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000744:	8a7b      	ldrh	r3, [r7, #18]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00b      	beq.n	8000762 <ST7789_DrawLine+0x62>
		swap = x0;
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8000752:	8a3b      	ldrh	r3, [r7, #16]
 8000754:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 800075a:	883b      	ldrh	r3, [r7, #0]
 800075c:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 800075e:	8a3b      	ldrh	r3, [r7, #16]
 8000760:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	429a      	cmp	r2, r3
 8000768:	d90b      	bls.n	8000782 <ST7789_DrawLine+0x82>
		swap = x0;
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8000772:	8a3b      	ldrh	r3, [r7, #16]
 8000774:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 800077a:	883b      	ldrh	r3, [r7, #0]
 800077c:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 800077e:	8a3b      	ldrh	r3, [r7, #16]
 8000780:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000782:	887a      	ldrh	r2, [r7, #2]
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b29b      	uxth	r3, r3
 800078a:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 800078c:	883a      	ldrh	r2, [r7, #0]
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	bfb8      	it	lt
 8000796:	425b      	neglt	r3, r3
 8000798:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 800079a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800079e:	0fda      	lsrs	r2, r3, #31
 80007a0:	4413      	add	r3, r2
 80007a2:	105b      	asrs	r3, r3, #1
 80007a4:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80007a6:	88ba      	ldrh	r2, [r7, #4]
 80007a8:	883b      	ldrh	r3, [r7, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d202      	bcs.n	80007b4 <ST7789_DrawLine+0xb4>
        ystep = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	82bb      	strh	r3, [r7, #20]
 80007b2:	e028      	b.n	8000806 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80007b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b8:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80007ba:	e024      	b.n	8000806 <ST7789_DrawLine+0x106>
        if (steep) {
 80007bc:	8a7b      	ldrh	r3, [r7, #18]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80007c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007c4:	88f9      	ldrh	r1, [r7, #6]
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff6f 	bl	80006ac <ST7789_DrawPixel>
 80007ce:	e005      	b.n	80007dc <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80007d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007d2:	88b9      	ldrh	r1, [r7, #4]
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff68 	bl	80006ac <ST7789_DrawPixel>
        }
        err -= dy;
 80007dc:	8afa      	ldrh	r2, [r7, #22]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80007e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da08      	bge.n	8000800 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80007ee:	8aba      	ldrh	r2, [r7, #20]
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80007f6:	8afa      	ldrh	r2, [r7, #22]
 80007f8:	89fb      	ldrh	r3, [r7, #14]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	3301      	adds	r3, #1
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	88fa      	ldrh	r2, [r7, #6]
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9d6      	bls.n	80007bc <ST7789_DrawLine+0xbc>
        }
    }
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	371c      	adds	r7, #28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd90      	pop	{r4, r7, pc}

08000818 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af02      	add	r7, sp, #8
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4623      	mov	r3, r4
 8000828:	80fb      	strh	r3, [r7, #6]
 800082a:	4603      	mov	r3, r0
 800082c:	80bb      	strh	r3, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	807b      	strh	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000836:	bf00      	nop
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8000838:	88bc      	ldrh	r4, [r7, #4]
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	88b9      	ldrh	r1, [r7, #4]
 800083e:	88f8      	ldrh	r0, [r7, #6]
 8000840:	8b3b      	ldrh	r3, [r7, #24]
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	4623      	mov	r3, r4
 8000846:	f7ff ff5b 	bl	8000700 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 800084a:	883c      	ldrh	r4, [r7, #0]
 800084c:	88fa      	ldrh	r2, [r7, #6]
 800084e:	88b9      	ldrh	r1, [r7, #4]
 8000850:	88f8      	ldrh	r0, [r7, #6]
 8000852:	8b3b      	ldrh	r3, [r7, #24]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4623      	mov	r3, r4
 8000858:	f7ff ff52 	bl	8000700 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 800085c:	883c      	ldrh	r4, [r7, #0]
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	8839      	ldrh	r1, [r7, #0]
 8000862:	88f8      	ldrh	r0, [r7, #6]
 8000864:	8b3b      	ldrh	r3, [r7, #24]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4623      	mov	r3, r4
 800086a:	f7ff ff49 	bl	8000700 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 800086e:	883c      	ldrh	r4, [r7, #0]
 8000870:	887a      	ldrh	r2, [r7, #2]
 8000872:	88b9      	ldrh	r1, [r7, #4]
 8000874:	8878      	ldrh	r0, [r7, #2]
 8000876:	8b3b      	ldrh	r3, [r7, #24]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	4623      	mov	r3, r4
 800087c:	f7ff ff40 	bl	8000700 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000880:	bf00      	nop
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bd90      	pop	{r4, r7, pc}

0800088a <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 800088a:	b590      	push	{r4, r7, lr}
 800088c:	b087      	sub	sp, #28
 800088e:	af00      	add	r7, sp, #0
 8000890:	4604      	mov	r4, r0
 8000892:	4608      	mov	r0, r1
 8000894:	4611      	mov	r1, r2
 8000896:	461a      	mov	r2, r3
 8000898:	4623      	mov	r3, r4
 800089a:	80fb      	strh	r3, [r7, #6]
 800089c:	4603      	mov	r3, r0
 800089e:	80bb      	strh	r3, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
 80008a4:	4613      	mov	r3, r2
 80008a6:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f1c3 0301 	rsb	r3, r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	03d2      	lsls	r2, r2, #15
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 80008d0:	bf00      	nop
	ST7789_DrawPixel(x0, y0 + r, color);
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	b299      	uxth	r1, r3
 80008dc:	883a      	ldrh	r2, [r7, #0]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fee3 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	88ba      	ldrh	r2, [r7, #4]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	b299      	uxth	r1, r3
 80008f0:	883a      	ldrh	r2, [r7, #0]
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fed9 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4413      	add	r3, r2
 8000902:	b29b      	uxth	r3, r3
 8000904:	883a      	ldrh	r2, [r7, #0]
 8000906:	88b9      	ldrh	r1, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fecf 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	b29b      	uxth	r3, r3
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	b29b      	uxth	r3, r3
 8000918:	883a      	ldrh	r2, [r7, #0]
 800091a:	88b9      	ldrh	r1, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fec5 	bl	80006ac <ST7789_DrawPixel>

	while (x < y) {
 8000922:	e081      	b.n	8000a28 <ST7789_DrawCircle+0x19e>
		if (f >= 0) {
 8000924:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0e      	blt.n	800094a <ST7789_DrawCircle+0xc0>
			y--;
 800092c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000930:	b29b      	uxth	r3, r3
 8000932:	3b01      	subs	r3, #1
 8000934:	b29b      	uxth	r3, r3
 8000936:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000938:	8a7b      	ldrh	r3, [r7, #18]
 800093a:	3302      	adds	r3, #2
 800093c:	b29b      	uxth	r3, r3
 800093e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000940:	8afa      	ldrh	r2, [r7, #22]
 8000942:	8a7b      	ldrh	r3, [r7, #18]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800094a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800094e:	b29b      	uxth	r3, r3
 8000950:	3301      	adds	r3, #1
 8000952:	b29b      	uxth	r3, r3
 8000954:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000956:	8abb      	ldrh	r3, [r7, #20]
 8000958:	3302      	adds	r3, #2
 800095a:	b29b      	uxth	r3, r3
 800095c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800095e:	8afa      	ldrh	r2, [r7, #22]
 8000960:	8abb      	ldrh	r3, [r7, #20]
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8000968:	8a3a      	ldrh	r2, [r7, #16]
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4413      	add	r3, r2
 800096e:	b298      	uxth	r0, r3
 8000970:	89fa      	ldrh	r2, [r7, #14]
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	883a      	ldrh	r2, [r7, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	f7ff fe96 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000980:	8a3b      	ldrh	r3, [r7, #16]
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	b298      	uxth	r0, r3
 8000988:	89fa      	ldrh	r2, [r7, #14]
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	883a      	ldrh	r2, [r7, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	f7ff fe8a 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8000998:	8a3a      	ldrh	r2, [r7, #16]
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	4413      	add	r3, r2
 800099e:	b298      	uxth	r0, r3
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	88ba      	ldrh	r2, [r7, #4]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	883a      	ldrh	r2, [r7, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f7ff fe7e 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 80009b0:	8a3b      	ldrh	r3, [r7, #16]
 80009b2:	88fa      	ldrh	r2, [r7, #6]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b298      	uxth	r0, r3
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	88ba      	ldrh	r2, [r7, #4]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	883a      	ldrh	r2, [r7, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f7ff fe72 	bl	80006ac <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 80009c8:	89fa      	ldrh	r2, [r7, #14]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4413      	add	r3, r2
 80009ce:	b298      	uxth	r0, r3
 80009d0:	8a3a      	ldrh	r2, [r7, #16]
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	883a      	ldrh	r2, [r7, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	f7ff fe66 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	88fa      	ldrh	r2, [r7, #6]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b298      	uxth	r0, r3
 80009e8:	8a3a      	ldrh	r2, [r7, #16]
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	883a      	ldrh	r2, [r7, #0]
 80009f2:	4619      	mov	r1, r3
 80009f4:	f7ff fe5a 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 80009f8:	89fa      	ldrh	r2, [r7, #14]
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	4413      	add	r3, r2
 80009fe:	b298      	uxth	r0, r3
 8000a00:	8a3b      	ldrh	r3, [r7, #16]
 8000a02:	88ba      	ldrh	r2, [r7, #4]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	883a      	ldrh	r2, [r7, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f7ff fe4e 	bl	80006ac <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b298      	uxth	r0, r3
 8000a18:	8a3b      	ldrh	r3, [r7, #16]
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	883a      	ldrh	r2, [r7, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	f7ff fe42 	bl	80006ac <ST7789_DrawPixel>
	while (x < y) {
 8000a28:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f6ff af77 	blt.w	8000924 <ST7789_DrawCircle+0x9a>
	}
	ST7789_UnSelect();
 8000a36:	bf00      	nop
}
 8000a38:	bf00      	nop
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4604      	mov	r4, r0
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4623      	mov	r3, r4
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	4603      	mov	r3, r0
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	807b      	strh	r3, [r7, #2]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	2bef      	cmp	r3, #239	@ 0xef
 8000a62:	d829      	bhi.n	8000ab8 <ST7789_DrawImage+0x78>
 8000a64:	88bb      	ldrh	r3, [r7, #4]
 8000a66:	2bef      	cmp	r3, #239	@ 0xef
 8000a68:	d826      	bhi.n	8000ab8 <ST7789_DrawImage+0x78>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000a6a:	88fa      	ldrh	r2, [r7, #6]
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	4413      	add	r3, r2
 8000a70:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a72:	dc23      	bgt.n	8000abc <ST7789_DrawImage+0x7c>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8000a74:	88ba      	ldrh	r2, [r7, #4]
 8000a76:	883b      	ldrh	r3, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a7c:	dc20      	bgt.n	8000ac0 <ST7789_DrawImage+0x80>
		return;

	ST7789_Select();
 8000a7e:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000a80:	88fa      	ldrh	r2, [r7, #6]
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	b29c      	uxth	r4, r3
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	883b      	ldrh	r3, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	88b9      	ldrh	r1, [r7, #4]
 8000a9a:	88f8      	ldrh	r0, [r7, #6]
 8000a9c:	4622      	mov	r2, r4
 8000a9e:	f7ff fce5 	bl	800046c <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	883a      	ldrh	r2, [r7, #0]
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4619      	mov	r1, r3
 8000aae:	69b8      	ldr	r0, [r7, #24]
 8000ab0:	f7ff fc4e 	bl	8000350 <ST7789_WriteData>
	ST7789_UnSelect();
 8000ab4:	bf00      	nop
 8000ab6:	e004      	b.n	8000ac2 <ST7789_DrawImage+0x82>
		return;
 8000ab8:	bf00      	nop
 8000aba:	e002      	b.n	8000ac2 <ST7789_DrawImage+0x82>
		return;
 8000abc:	bf00      	nop
 8000abe:	e000      	b.n	8000ac2 <ST7789_DrawImage+0x82>
		return;
 8000ac0:	bf00      	nop
}
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd90      	pop	{r4, r7, pc}

08000ac8 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000ac8:	b082      	sub	sp, #8
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b088      	sub	sp, #32
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000ade:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000af4:	4619      	mov	r1, r3
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	440b      	add	r3, r1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	88b9      	ldrh	r1, [r7, #4]
 8000b02:	88f8      	ldrh	r0, [r7, #6]
 8000b04:	f7ff fcb2 	bl	800046c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	e041      	b.n	8000b92 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8000b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	3b20      	subs	r3, #32
 8000b14:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000b18:	fb01 f303 	mul.w	r3, r1, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	440b      	add	r3, r1
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	e027      	b.n	8000b80 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00e      	beq.n	8000b5e <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000b40:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	743b      	strb	r3, [r7, #16]
 8000b4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fbfa 	bl	8000350 <ST7789_WriteData>
 8000b5c:	e00d      	b.n	8000b7a <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000b5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	733b      	strb	r3, [r7, #12]
 8000b68:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fbeb 	bl	8000350 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b84:	461a      	mov	r2, r3
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d3d1      	bcc.n	8000b30 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b96:	461a      	mov	r2, r3
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d3b7      	bcc.n	8000b0e <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8000b9e:	bf00      	nop
}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000baa:	b002      	add	sp, #8
 8000bac:	4770      	bx	lr

08000bae <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000bae:	b082      	sub	sp, #8
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af04      	add	r7, sp, #16
 8000bb6:	603a      	str	r2, [r7, #0]
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000bc2:	bf00      	nop
	while (*str) {
 8000bc4:	e02d      	b.n	8000c22 <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	7d3a      	ldrb	r2, [r7, #20]
 8000bca:	4413      	add	r3, r2
 8000bcc:	2bef      	cmp	r3, #239	@ 0xef
 8000bce:	dd13      	ble.n	8000bf8 <ST7789_WriteString+0x4a>
			x = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000bd4:	7d7b      	ldrb	r3, [r7, #21]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	7d7a      	ldrb	r2, [r7, #21]
 8000be2:	4413      	add	r3, r2
 8000be4:	2bef      	cmp	r3, #239	@ 0xef
 8000be6:	dc21      	bgt.n	8000c2c <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b20      	cmp	r3, #32
 8000bee:	d103      	bne.n	8000bf8 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
				continue;
 8000bf6:	e014      	b.n	8000c22 <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	88b9      	ldrh	r1, [r7, #4]
 8000bfe:	88f8      	ldrh	r0, [r7, #6]
 8000c00:	8c3b      	ldrh	r3, [r7, #32]
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	8bbb      	ldrh	r3, [r7, #28]
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	f7ff ff5b 	bl	8000ac8 <ST7789_WriteChar>
		x += font.width;
 8000c12:	7d3b      	ldrb	r3, [r7, #20]
 8000c14:	461a      	mov	r2, r3
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4413      	add	r3, r2
 8000c1a:	80fb      	strh	r3, [r7, #6]
		str++;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1cd      	bne.n	8000bc6 <ST7789_WriteString+0x18>
 8000c2a:	e000      	b.n	8000c2e <ST7789_WriteString+0x80>
				break;
 8000c2c:	bf00      	nop
	}
	ST7789_UnSelect();
 8000c2e:	bf00      	nop
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c3a:	b002      	add	sp, #8
 8000c3c:	4770      	bx	lr

08000c3e <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	af02      	add	r7, sp, #8
 8000c44:	4604      	mov	r4, r0
 8000c46:	4608      	mov	r0, r1
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	80fb      	strh	r3, [r7, #6]
 8000c50:	4603      	mov	r3, r0
 8000c52:	80bb      	strh	r3, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c5c:	bf00      	nop
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2bef      	cmp	r3, #239	@ 0xef
 8000c62:	d836      	bhi.n	8000cd2 <ST7789_DrawFilledRectangle+0x94>
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	2bef      	cmp	r3, #239	@ 0xef
 8000c68:	d833      	bhi.n	8000cd2 <ST7789_DrawFilledRectangle+0x94>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	2bef      	cmp	r3, #239	@ 0xef
 8000c72:	dd03      	ble.n	8000c7c <ST7789_DrawFilledRectangle+0x3e>
		w = ST7789_WIDTH - x;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000c7a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000c7c:	88ba      	ldrh	r2, [r7, #4]
 8000c7e:	883b      	ldrh	r3, [r7, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	2bef      	cmp	r3, #239	@ 0xef
 8000c84:	dd03      	ble.n	8000c8e <ST7789_DrawFilledRectangle+0x50>
		h = ST7789_HEIGHT - y;
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000c8c:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e017      	b.n	8000cc4 <ST7789_DrawFilledRectangle+0x86>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29c      	uxth	r4, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	88f8      	ldrh	r0, [r7, #6]
 8000cb2:	8c3b      	ldrh	r3, [r7, #32]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	4622      	mov	r2, r4
 8000cba:	f7ff fd21 	bl	8000700 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	883a      	ldrh	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d2e2      	bcs.n	8000c94 <ST7789_DrawFilledRectangle+0x56>
	}
	ST7789_UnSelect();
 8000cce:	bf00      	nop
 8000cd0:	e000      	b.n	8000cd4 <ST7789_DrawFilledRectangle+0x96>
		return;
 8000cd2:	bf00      	nop
}
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}

08000cda <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af02      	add	r7, sp, #8
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4623      	mov	r3, r4
 8000cea:	80fb      	strh	r3, [r7, #6]
 8000cec:	4603      	mov	r3, r0
 8000cee:	80bb      	strh	r3, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000cf8:	bf00      	nop
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8000cfa:	883c      	ldrh	r4, [r7, #0]
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	88b9      	ldrh	r1, [r7, #4]
 8000d00:	88f8      	ldrh	r0, [r7, #6]
 8000d02:	8c3b      	ldrh	r3, [r7, #32]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4623      	mov	r3, r4
 8000d08:	f7ff fcfa 	bl	8000700 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8000d0c:	8bbc      	ldrh	r4, [r7, #28]
 8000d0e:	8b3a      	ldrh	r2, [r7, #24]
 8000d10:	8839      	ldrh	r1, [r7, #0]
 8000d12:	8878      	ldrh	r0, [r7, #2]
 8000d14:	8c3b      	ldrh	r3, [r7, #32]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	4623      	mov	r3, r4
 8000d1a:	f7ff fcf1 	bl	8000700 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8000d1e:	88bc      	ldrh	r4, [r7, #4]
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	8bb9      	ldrh	r1, [r7, #28]
 8000d24:	8b38      	ldrh	r0, [r7, #24]
 8000d26:	8c3b      	ldrh	r3, [r7, #32]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	f7ff fce8 	bl	8000700 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000d30:	bf00      	nop
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}

08000d3a <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000d3a:	b590      	push	{r4, r7, lr}
 8000d3c:	b08d      	sub	sp, #52	@ 0x34
 8000d3e:	af02      	add	r7, sp, #8
 8000d40:	4604      	mov	r4, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4611      	mov	r1, r2
 8000d46:	461a      	mov	r2, r3
 8000d48:	4623      	mov	r3, r4
 8000d4a:	80fb      	strh	r3, [r7, #6]
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80bb      	strh	r3, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000d58:	bf00      	nop
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	823b      	strh	r3, [r7, #16]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81fb      	strh	r3, [r7, #14]
 8000d62:	2300      	movs	r3, #0
 8000d64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d66:	2300      	movs	r3, #0
 8000d68:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000d6e:	2300      	movs	r3, #0
 8000d70:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000d72:	2300      	movs	r3, #0
 8000d74:	83fb      	strh	r3, [r7, #30]
 8000d76:	2300      	movs	r3, #0
 8000d78:	83bb      	strh	r3, [r7, #28]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	837b      	strh	r3, [r7, #26]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	833b      	strh	r3, [r7, #24]
 8000d82:	2300      	movs	r3, #0
 8000d84:	82fb      	strh	r3, [r7, #22]
 8000d86:	2300      	movs	r3, #0
 8000d88:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bfb8      	it	lt
 8000d98:	425b      	neglt	r3, r3
 8000d9a:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000d9c:	883a      	ldrh	r2, [r7, #0]
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bfb8      	it	lt
 8000da6:	425b      	neglt	r3, r3
 8000da8:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d304      	bcc.n	8000dc4 <ST7789_DrawFilledTriangle+0x8a>
		xinc1 = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	843b      	strh	r3, [r7, #32]
 8000dc2:	e005      	b.n	8000dd0 <ST7789_DrawFilledTriangle+0x96>
	}
	else {
		xinc1 = -1;
 8000dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc8:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8000dca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dce:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000dd0:	883a      	ldrh	r2, [r7, #0]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d304      	bcc.n	8000de2 <ST7789_DrawFilledTriangle+0xa8>
		yinc1 = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	83bb      	strh	r3, [r7, #28]
 8000de0:	e005      	b.n	8000dee <ST7789_DrawFilledTriangle+0xb4>
	}
	else {
		yinc1 = -1;
 8000de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de6:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dec:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000dee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000df2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	db10      	blt.n	8000e1c <ST7789_DrawFilledTriangle+0xe2>
		xinc1 = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000e02:	8a3b      	ldrh	r3, [r7, #16]
 8000e04:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000e06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e0a:	0fda      	lsrs	r2, r3, #31
 8000e0c:	4413      	add	r3, r2
 8000e0e:	105b      	asrs	r3, r3, #1
 8000e10:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000e16:	8a3b      	ldrh	r3, [r7, #16]
 8000e18:	82bb      	strh	r3, [r7, #20]
 8000e1a:	e00f      	b.n	8000e3c <ST7789_DrawFilledTriangle+0x102>
	}
	else {
		xinc2 = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2c:	0fda      	lsrs	r2, r3, #31
 8000e2e:	4413      	add	r3, r2
 8000e30:	105b      	asrs	r3, r3, #1
 8000e32:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000e34:	8a3b      	ldrh	r3, [r7, #16]
 8000e36:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	827b      	strh	r3, [r7, #18]
 8000e40:	e033      	b.n	8000eaa <ST7789_DrawFilledTriangle+0x170>
		ST7789_DrawLine(x, y, x3, y3, color);
 8000e42:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000e44:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000e46:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8000e48:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000e4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4623      	mov	r3, r4
 8000e52:	f7ff fc55 	bl	8000700 <ST7789_DrawLine>

		num += numadd;
 8000e56:	8b3a      	ldrh	r2, [r7, #24]
 8000e58:	8afb      	ldrh	r3, [r7, #22]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000e60:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	db0e      	blt.n	8000e8a <ST7789_DrawFilledTriangle+0x150>
			num -= den;
 8000e6c:	8b3a      	ldrh	r2, [r7, #24]
 8000e6e:	8b7b      	ldrh	r3, [r7, #26]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000e76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 8000e80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e82:	8bfb      	ldrh	r3, [r7, #30]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8000e8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e8c:	8c3b      	ldrh	r3, [r7, #32]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 8000e94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e96:	8bbb      	ldrh	r3, [r7, #28]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	827b      	strh	r3, [r7, #18]
 8000eaa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000eae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	ddc5      	ble.n	8000e42 <ST7789_DrawFilledTriangle+0x108>
	}
	ST7789_UnSelect();
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	372c      	adds	r7, #44	@ 0x2c
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}

08000ec0 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000ede:	bf00      	nop
	int16_t f = 1 - r;
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	f1c3 0301 	rsb	r3, r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	03d2      	lsls	r2, r2, #15
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8000f04:	88f8      	ldrh	r0, [r7, #6]
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	883a      	ldrh	r2, [r7, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fbcb 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000f16:	88f8      	ldrh	r0, [r7, #6]
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	883a      	ldrh	r2, [r7, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fbc2 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	88b9      	ldrh	r1, [r7, #4]
 8000f32:	883a      	ldrh	r2, [r7, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbb9 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	88b9      	ldrh	r1, [r7, #4]
 8000f44:	883a      	ldrh	r2, [r7, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fbb0 	bl	80006ac <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b298      	uxth	r0, r3
 8000f54:	88b9      	ldrh	r1, [r7, #4]
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	88bc      	ldrh	r4, [r7, #4]
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4623      	mov	r3, r4
 8000f66:	f7ff fbcb 	bl	8000700 <ST7789_DrawLine>

	while (x < y) {
 8000f6a:	e079      	b.n	8001060 <ST7789_DrawFilledCircle+0x1a0>
		if (f >= 0) {
 8000f6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0e      	blt.n	8000f92 <ST7789_DrawFilledCircle+0xd2>
			y--;
 8000f74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	3302      	adds	r3, #2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000f88:	8afa      	ldrh	r2, [r7, #22]
 8000f8a:	8a7b      	ldrh	r3, [r7, #18]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000f92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000f9e:	8abb      	ldrh	r3, [r7, #20]
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000fa6:	8afa      	ldrh	r2, [r7, #22]
 8000fa8:	8abb      	ldrh	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	8a3b      	ldrh	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b298      	uxth	r0, r3
 8000fb8:	88ba      	ldrh	r2, [r7, #4]
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	8a3b      	ldrh	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29c      	uxth	r4, r3
 8000fc8:	88ba      	ldrh	r2, [r7, #4]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	f7ff fb92 	bl	8000700 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8000fdc:	88fa      	ldrh	r2, [r7, #6]
 8000fde:	8a3b      	ldrh	r3, [r7, #16]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b298      	uxth	r0, r3
 8000fe4:	88ba      	ldrh	r2, [r7, #4]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	b299      	uxth	r1, r3
 8000fec:	88fa      	ldrh	r2, [r7, #6]
 8000fee:	8a3b      	ldrh	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29c      	uxth	r4, r3
 8000ff4:	88ba      	ldrh	r2, [r7, #4]
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4613      	mov	r3, r2
 8001002:	4622      	mov	r2, r4
 8001004:	f7ff fb7c 	bl	8000700 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	4413      	add	r3, r2
 800100e:	b298      	uxth	r0, r3
 8001010:	88ba      	ldrh	r2, [r7, #4]
 8001012:	8a3b      	ldrh	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	b299      	uxth	r1, r3
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29c      	uxth	r4, r3
 8001020:	88ba      	ldrh	r2, [r7, #4]
 8001022:	8a3b      	ldrh	r3, [r7, #16]
 8001024:	4413      	add	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	883b      	ldrh	r3, [r7, #0]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	4622      	mov	r2, r4
 8001030:	f7ff fb66 	bl	8000700 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001034:	88fa      	ldrh	r2, [r7, #6]
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	4413      	add	r3, r2
 800103a:	b298      	uxth	r0, r3
 800103c:	88ba      	ldrh	r2, [r7, #4]
 800103e:	8a3b      	ldrh	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b299      	uxth	r1, r3
 8001044:	88fa      	ldrh	r2, [r7, #6]
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29c      	uxth	r4, r3
 800104c:	88ba      	ldrh	r2, [r7, #4]
 800104e:	8a3b      	ldrh	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	b29a      	uxth	r2, r3
 8001054:	883b      	ldrh	r3, [r7, #0]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	4622      	mov	r2, r4
 800105c:	f7ff fb50 	bl	8000700 <ST7789_DrawLine>
	while (x < y) {
 8001060:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001068:	429a      	cmp	r2, r3
 800106a:	f6ff af7f 	blt.w	8000f6c <ST7789_DrawFilledCircle+0xac>
	}
	ST7789_UnSelect();
 800106e:	bf00      	nop
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}

08001078 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 800107e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001082:	f7ff faeb 	bl	800065c <ST7789_Fill_Color>
	HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108a:	f000 fb19 	bl	80016c0 <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 800108e:	4bc1      	ldr	r3, [pc, #772]	@ (8001394 <ST7789_Test+0x31c>)
 8001090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001094:	9202      	str	r2, [sp, #8]
 8001096:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4abd      	ldr	r2, [pc, #756]	@ (8001398 <ST7789_Test+0x320>)
 80010a4:	2114      	movs	r1, #20
 80010a6:	200a      	movs	r0, #10
 80010a8:	f7ff fd81 	bl	8000bae <ST7789_WriteString>
	HAL_Delay(1000);
 80010ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b0:	f000 fb06 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 80010b4:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80010b8:	f7ff fad0 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 80010bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c0:	f000 fafe 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(RED);
 80010c4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80010c8:	f7ff fac8 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 80010cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d0:	f000 faf6 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 80010d4:	201f      	movs	r0, #31
 80010d6:	f7ff fac1 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 80010da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010de:	f000 faef 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 80010e2:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80010e6:	f7ff fab9 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ee:	f000 fae7 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 80010f2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80010f6:	f7ff fab1 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 80010fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010fe:	f000 fadf 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8001102:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 8001106:	f7ff faa9 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800110a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800110e:	f000 fad7 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8001112:	f240 10cf 	movw	r0, #463	@ 0x1cf
 8001116:	f7ff faa1 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111e:	f000 facf 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8001122:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8001126:	f7ff fa99 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800112a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800112e:	f000 fac7 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8001132:	f248 401f 	movw	r0, #33823	@ 0x841f
 8001136:	f7ff fa91 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800113a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800113e:	f000 fabf 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8001142:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8001146:	f7ff fa89 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800114e:	f000 fab7 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8001152:	f642 3012 	movw	r0, #11026	@ 0x2b12
 8001156:	f7ff fa81 	bl	800065c <ST7789_Fill_Color>
    HAL_Delay(500);
 800115a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800115e:	f000 faaf 	bl	80016c0 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8001162:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001166:	f7ff fa79 	bl	800065c <ST7789_Fill_Color>
	HAL_Delay(500);
 800116a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116e:	f000 faa7 	bl	80016c0 <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 8001172:	4b8a      	ldr	r3, [pc, #552]	@ (800139c <ST7789_Test+0x324>)
 8001174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001178:	9202      	str	r2, [sp, #8]
 800117a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	9200      	str	r2, [sp, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a86      	ldr	r2, [pc, #536]	@ (80013a0 <ST7789_Test+0x328>)
 8001188:	210a      	movs	r1, #10
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff fd0f 	bl	8000bae <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8001190:	4b84      	ldr	r3, [pc, #528]	@ (80013a4 <ST7789_Test+0x32c>)
 8001192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001196:	9202      	str	r2, [sp, #8]
 8001198:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800119c:	9201      	str	r2, [sp, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a80      	ldr	r2, [pc, #512]	@ (80013a8 <ST7789_Test+0x330>)
 80011a6:	2132      	movs	r1, #50	@ 0x32
 80011a8:	200a      	movs	r0, #10
 80011aa:	f7ff fd00 	bl	8000bae <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 80011ae:	4b79      	ldr	r3, [pc, #484]	@ (8001394 <ST7789_Test+0x31c>)
 80011b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b4:	9202      	str	r2, [sp, #8]
 80011b6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	9200      	str	r2, [sp, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a79      	ldr	r2, [pc, #484]	@ (80013a8 <ST7789_Test+0x330>)
 80011c4:	214b      	movs	r1, #75	@ 0x4b
 80011c6:	200a      	movs	r0, #10
 80011c8:	f7ff fcf1 	bl	8000bae <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 80011cc:	4b73      	ldr	r3, [pc, #460]	@ (800139c <ST7789_Test+0x324>)
 80011ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a71      	ldr	r2, [pc, #452]	@ (80013a8 <ST7789_Test+0x330>)
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	200a      	movs	r0, #10
 80011e6:	f7ff fce2 	bl	8000bae <ST7789_WriteString>
	HAL_Delay(1000);
 80011ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ee:	f000 fa67 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80011f2:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80011f6:	f7ff fa31 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 80011fa:	4b66      	ldr	r3, [pc, #408]	@ (8001394 <ST7789_Test+0x31c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001204:	9201      	str	r2, [sp, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	9200      	str	r2, [sp, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a67      	ldr	r2, [pc, #412]	@ (80013ac <ST7789_Test+0x334>)
 800120e:	210a      	movs	r1, #10
 8001210:	200a      	movs	r0, #10
 8001212:	f7ff fccc 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8001216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2364      	movs	r3, #100	@ 0x64
 800121e:	2264      	movs	r2, #100	@ 0x64
 8001220:	211e      	movs	r1, #30
 8001222:	201e      	movs	r0, #30
 8001224:	f7ff faf8 	bl	8000818 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f000 fa48 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001230:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001234:	f7ff fa12 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001238:	4b56      	ldr	r3, [pc, #344]	@ (8001394 <ST7789_Test+0x31c>)
 800123a:	2200      	movs	r2, #0
 800123c:	9202      	str	r2, [sp, #8]
 800123e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	9200      	str	r2, [sp, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a59      	ldr	r2, [pc, #356]	@ (80013b0 <ST7789_Test+0x338>)
 800124c:	210a      	movs	r1, #10
 800124e:	200a      	movs	r0, #10
 8001250:	f7ff fcad 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 8001254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2332      	movs	r3, #50	@ 0x32
 800125c:	2232      	movs	r2, #50	@ 0x32
 800125e:	211e      	movs	r1, #30
 8001260:	201e      	movs	r0, #30
 8001262:	f7ff fcec 	bl	8000c3e <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f000 fa29 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 800126e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001272:	f7ff f9f3 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 8001276:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <ST7789_Test+0x31c>)
 8001278:	2200      	movs	r2, #0
 800127a:	9202      	str	r2, [sp, #8]
 800127c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001280:	9201      	str	r2, [sp, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	9200      	str	r2, [sp, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a4a      	ldr	r2, [pc, #296]	@ (80013b4 <ST7789_Test+0x33c>)
 800128a:	210a      	movs	r1, #10
 800128c:	200a      	movs	r0, #10
 800128e:	f7ff fc8e 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 8001292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001296:	2219      	movs	r2, #25
 8001298:	213c      	movs	r1, #60	@ 0x3c
 800129a:	203c      	movs	r0, #60	@ 0x3c
 800129c:	f7ff faf5 	bl	800088a <ST7789_DrawCircle>
	HAL_Delay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a4:	f000 fa0c 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80012a8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80012ac:	f7ff f9d6 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <ST7789_Test+0x31c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	9202      	str	r2, [sp, #8]
 80012b6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a3d      	ldr	r2, [pc, #244]	@ (80013b8 <ST7789_Test+0x340>)
 80012c4:	210a      	movs	r1, #10
 80012c6:	200a      	movs	r0, #10
 80012c8:	f7ff fc71 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 80012cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d0:	2219      	movs	r2, #25
 80012d2:	213c      	movs	r1, #60	@ 0x3c
 80012d4:	203c      	movs	r0, #60	@ 0x3c
 80012d6:	f7ff fdf3 	bl	8000ec0 <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012de:	f000 f9ef 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80012e2:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80012e6:	f7ff f9b9 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <ST7789_Test+0x31c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80012f4:	9201      	str	r2, [sp, #4]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <ST7789_Test+0x344>)
 80012fe:	210a      	movs	r1, #10
 8001300:	200a      	movs	r0, #10
 8001302:	f7ff fc54 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001306:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2328      	movs	r3, #40	@ 0x28
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	233c      	movs	r3, #60	@ 0x3c
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2346      	movs	r3, #70	@ 0x46
 8001316:	221e      	movs	r2, #30
 8001318:	211e      	movs	r1, #30
 800131a:	201e      	movs	r0, #30
 800131c:	f7ff fcdd 	bl	8000cda <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001324:	f000 f9cc 	bl	80016c0 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001328:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800132c:	f7ff f996 	bl	800065c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <ST7789_Test+0x31c>)
 8001332:	2200      	movs	r2, #0
 8001334:	9202      	str	r2, [sp, #8]
 8001336:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <ST7789_Test+0x348>)
 8001344:	210a      	movs	r1, #10
 8001346:	200a      	movs	r0, #10
 8001348:	f7ff fc31 	bl	8000bae <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 800134c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2328      	movs	r3, #40	@ 0x28
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	233c      	movs	r3, #60	@ 0x3c
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2346      	movs	r3, #70	@ 0x46
 800135c:	221e      	movs	r2, #30
 800135e:	211e      	movs	r1, #30
 8001360:	201e      	movs	r0, #30
 8001362:	f7ff fcea 	bl	8000d3a <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136a:	f000 f9a9 	bl	80016c0 <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 800136e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001372:	f7ff f973 	bl	800065c <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <ST7789_Test+0x34c>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fb5d 	bl	8000a40 <ST7789_DrawImage>
	HAL_Delay(3000);
 8001386:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800138a:	f000 f999 	bl	80016c0 <HAL_Delay>
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008
 8001398:	08003310 	.word	0x08003310
 800139c:	20000010 	.word	0x20000010
 80013a0:	0800331c 	.word	0x0800331c
 80013a4:	20000000 	.word	0x20000000
 80013a8:	08003328 	.word	0x08003328
 80013ac:	08003338 	.word	0x08003338
 80013b0:	08003344 	.word	0x08003344
 80013b4:	08003354 	.word	0x08003354
 80013b8:	0800335c 	.word	0x0800335c
 80013bc:	08003368 	.word	0x08003368
 80013c0:	08003374 	.word	0x08003374
 80013c4:	08005b94 	.word	0x08005b94

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a32      	ldr	r2, [pc, #200]	@ (8001510 <HAL_SPI_MspInit+0xe4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d15d      	bne.n	8001508 <HAL_SPI_MspInit+0xdc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144c:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a30      	ldr	r2, [pc, #192]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 8001452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <HAL_SPI_MspInit+0xe8>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800147c:	23a0      	movs	r3, #160	@ 0xa0
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	4822      	ldr	r0, [pc, #136]	@ (8001518 <HAL_SPI_MspInit+0xec>)
 8001490:	f000 fcae 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	481c      	ldr	r0, [pc, #112]	@ (8001518 <HAL_SPI_MspInit+0xec>)
 80014a8:	f000 fca2 	bl	8001df0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <HAL_SPI_MspInit+0xf4>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014b4:	2210      	movs	r2, #16
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014dc:	480f      	ldr	r0, [pc, #60]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014de:	f000 fa21 	bl	8001924 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80014e8:	f7fe ff10 	bl	800030c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014f0:	649a      	str	r2, [r3, #72]	@ 0x48
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_SPI_MspInit+0xf0>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2023      	movs	r0, #35	@ 0x23
 80014fe:	f000 f9da 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001502:	2023      	movs	r0, #35	@ 0x23
 8001504:	f000 f9f3 	bl	80018ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	2000009c 	.word	0x2000009c
 8001520:	40020030 	.word	0x40020030

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f888 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <DMA1_Channel3_IRQHandler+0x10>)
 8001582:	f000 fb01 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000009c 	.word	0x2000009c

08001590 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <SPI1_IRQHandler+0x10>)
 8001596:	f001 fc1f 	bl	8002dd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000044 	.word	0x20000044

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff fff8 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015cc:	4c09      	ldr	r4, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f001 fe55 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7fe fdb5 	bl	800014c <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80015ec:	0800dbc0 	.word	0x0800dbc0
  ldr r2, =_sbss
 80015f0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80015f4:	20000a44 	.word	0x20000a44

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f947 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fed6 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f95f 	bl	800190a <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001664:	f000 f927 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000001c 	.word	0x2000001c
 8001680:	20000024 	.word	0x20000024
 8001684:	20000020 	.word	0x20000020

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000024 	.word	0x20000024
 80016a8:	20000a40 	.word	0x20000a40

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	@ (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000a40 	.word	0x20000a40

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fff0 	bl	80016ac <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffe0 	bl	80016ac <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000024 	.word	0x20000024

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4906      	ldr	r1, [pc, #24]	@ (80017a0 <__NVIC_EnableIRQ+0x34>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	@ 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001880:	f7ff ff90 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff2d 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff42 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff90 	bl	80017f8 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5f 	bl	80017a4 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff35 	bl	800176c <__NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffa2 	bl	800185c <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e043      	b.n	80019c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <HAL_DMA_Init+0xa8>)
 8001942:	4413      	add	r3, r2
 8001944:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <HAL_DMA_Init+0xac>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a1f      	ldr	r2, [pc, #124]	@ (80019d4 <HAL_DMA_Init+0xb0>)
 8001956:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800196e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	bffdfff8 	.word	0xbffdfff8
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	40020000 	.word	0x40020000

080019d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_DMA_Start_IT+0x20>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e04b      	b.n	8001a90 <HAL_DMA_Start_IT+0xb8>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d13a      	bne.n	8001a82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f9af 	bl	8001d94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 020e 	orr.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e00f      	b.n	8001a70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 020a 	orr.w	r2, r2, #10
 8001a6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e005      	b.n	8001a8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d005      	beq.n	8001abc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e051      	b.n	8001b60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020e 	bic.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <HAL_DMA_Abort_IT+0xd4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d029      	beq.n	8001b3a <HAL_DMA_Abort_IT+0xa2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <HAL_DMA_Abort_IT+0xd8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x9e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_DMA_Abort_IT+0xdc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_Abort_IT+0x98>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_DMA_Abort_IT+0xe0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d012      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x92>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_DMA_Abort_IT+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00a      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x8c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	@ (8001b80 <HAL_DMA_Abort_IT+0xe8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_DMA_Abort_IT+0x86>
 8001b18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b1c:	e00e      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b22:	e00b      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b28:	e008      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2e:	e005      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b34:	e002      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b36:	2310      	movs	r3, #16
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <HAL_DMA_Abort_IT+0xec>)
 8001b3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
    } 
  }
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020008 	.word	0x40020008
 8001b70:	4002001c 	.word	0x4002001c
 8001b74:	40020030 	.word	0x40020030
 8001b78:	40020044 	.word	0x40020044
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	4002006c 	.word	0x4002006c
 8001b84:	40020000 	.word	0x40020000

08001b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d04f      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xc8>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a66      	ldr	r2, [pc, #408]	@ (8001d78 <HAL_DMA_IRQHandler+0x1f0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d029      	beq.n	8001c36 <HAL_DMA_IRQHandler+0xae>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a65      	ldr	r2, [pc, #404]	@ (8001d7c <HAL_DMA_IRQHandler+0x1f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xaa>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a63      	ldr	r2, [pc, #396]	@ (8001d80 <HAL_DMA_IRQHandler+0x1f8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xa4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a62      	ldr	r2, [pc, #392]	@ (8001d84 <HAL_DMA_IRQHandler+0x1fc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d012      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x9e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a60      	ldr	r2, [pc, #384]	@ (8001d88 <HAL_DMA_IRQHandler+0x200>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00a      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x98>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d8c <HAL_DMA_IRQHandler+0x204>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d102      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x92>
 8001c14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c18:	e00e      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c1e:	e00b      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c24:	e008      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c2a:	e005      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c30:	e002      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c32:	2340      	movs	r3, #64	@ 0x40
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0xb0>
 8001c36:	2304      	movs	r3, #4
 8001c38:	4a55      	ldr	r2, [pc, #340]	@ (8001d90 <HAL_DMA_IRQHandler+0x208>)
 8001c3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8094 	beq.w	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c4e:	e08e      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	2202      	movs	r2, #2
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d056      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x186>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d051      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020a 	bic.w	r2, r2, #10
 8001c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a38      	ldr	r2, [pc, #224]	@ (8001d78 <HAL_DMA_IRQHandler+0x1f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d029      	beq.n	8001cee <HAL_DMA_IRQHandler+0x166>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a37      	ldr	r2, [pc, #220]	@ (8001d7c <HAL_DMA_IRQHandler+0x1f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_IRQHandler+0x162>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a35      	ldr	r2, [pc, #212]	@ (8001d80 <HAL_DMA_IRQHandler+0x1f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x15c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a34      	ldr	r2, [pc, #208]	@ (8001d84 <HAL_DMA_IRQHandler+0x1fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d012      	beq.n	8001cde <HAL_DMA_IRQHandler+0x156>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a32      	ldr	r2, [pc, #200]	@ (8001d88 <HAL_DMA_IRQHandler+0x200>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x150>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a31      	ldr	r2, [pc, #196]	@ (8001d8c <HAL_DMA_IRQHandler+0x204>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d102      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x14a>
 8001ccc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cd0:	e00e      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cd6:	e00b      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cdc:	e008      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce2:	e005      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce8:	e002      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cea:	2320      	movs	r3, #32
 8001cec:	e000      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_DMA_IRQHandler+0x208>)
 8001cf2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d034      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d0c:	e02f      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	2208      	movs	r2, #8
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d028      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020e 	bic.w	r2, r2, #14
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
    }
  }
  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40020008 	.word	0x40020008
 8001d7c:	4002001c 	.word	0x4002001c
 8001d80:	40020030 	.word	0x40020030
 8001d84:	40020044 	.word	0x40020044
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	40020000 	.word	0x40020000

08001d94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d108      	bne.n	8001dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dd2:	e007      	b.n	8001de4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	@ 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	@ (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	@ 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	@ (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	492c      	ldr	r1, [pc, #176]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4922      	ldr	r1, [pc, #136]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4918      	ldr	r1, [pc, #96]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	490e      	ldr	r1, [pc, #56]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	@ 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e272      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	4b92      	ldr	r3, [pc, #584]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	d00c      	beq.n	800216e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002154:	4b8f      	ldr	r3, [pc, #572]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
 8002160:	4b8c      	ldr	r3, [pc, #560]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06c      	beq.n	8002254 <HAL_RCC_OscConfig+0x12c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d168      	bne.n	8002254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e24c      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x76>
 8002190:	4b80      	ldr	r3, [pc, #512]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7f      	ldr	r2, [pc, #508]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02e      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b78      	ldr	r3, [pc, #480]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a77      	ldr	r2, [pc, #476]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0xbc>
 80021ca:	4b72      	ldr	r3, [pc, #456]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a71      	ldr	r2, [pc, #452]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b68      	ldr	r3, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a67      	ldr	r2, [pc, #412]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fa52 	bl	80016ac <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fa4e 	bl	80016ac <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e200      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xe4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fa3e 	bl	80016ac <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fa3a 	bl	80016ac <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1ec      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x10c>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	4b4c      	ldr	r3, [pc, #304]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b43      	ldr	r3, [pc, #268]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1c0      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3d      	ldr	r3, [pc, #244]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4939      	ldr	r1, [pc, #228]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f9f3 	bl	80016ac <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff f9ef 	bl	80016ac <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1a1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4927      	ldr	r1, [pc, #156]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b26      	ldr	r3, [pc, #152]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff f9d2 	bl	80016ac <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7ff f9ce 	bl	80016ac <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e180      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03a      	beq.n	80023ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b17      	ldr	r3, [pc, #92]	@ (800239c <HAL_RCC_OscConfig+0x274>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7ff f9b2 	bl	80016ac <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff f9ae 	bl	80016ac <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e160      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fa9c 	bl	80028a8 <RCC_Delay>
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_RCC_OscConfig+0x274>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff f998 	bl	80016ac <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff f994 	bl	80016ac <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e146      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	42420000 	.word	0x42420000
 800239c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b92      	ldr	r3, [pc, #584]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a6 	beq.w	8002506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b8b      	ldr	r3, [pc, #556]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a87      	ldr	r2, [pc, #540]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b82      	ldr	r3, [pc, #520]	@ (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b7f      	ldr	r3, [pc, #508]	@ (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	@ (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7ff f955 	bl	80016ac <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7ff f951 	bl	80016ac <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	@ 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e103      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b75      	ldr	r3, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x312>
 800242c:	4b6f      	ldr	r3, [pc, #444]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a6e      	ldr	r2, [pc, #440]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e02d      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x334>
 8002442:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a69      	ldr	r2, [pc, #420]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b67      	ldr	r3, [pc, #412]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a66      	ldr	r2, [pc, #408]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01c      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x356>
 8002464:	4b61      	ldr	r3, [pc, #388]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a60      	ldr	r2, [pc, #384]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b5e      	ldr	r3, [pc, #376]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a5d      	ldr	r2, [pc, #372]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800247e:	4b5b      	ldr	r3, [pc, #364]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a5a      	ldr	r2, [pc, #360]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b58      	ldr	r3, [pc, #352]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff f905 	bl	80016ac <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff f901 	bl	80016ac <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0b1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x37e>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff f8ef 	bl	80016ac <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff f8eb 	bl	80016ac <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e09b      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4b40      	ldr	r3, [pc, #256]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b3c      	ldr	r3, [pc, #240]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a3b      	ldr	r2, [pc, #236]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d146      	bne.n	80025b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff f8bf 	bl	80016ac <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff f8bb 	bl	80016ac <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e06d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4921      	ldr	r1, [pc, #132]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a19      	ldr	r1, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	430b      	orrs	r3, r1
 800257e:	491b      	ldr	r1, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff f88f 	bl	80016ac <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff f88b 	bl	80016ac <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e03d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x46a>
 80025b0:	e035      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f878 	bl	80016ac <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff f874 	bl	80016ac <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e026      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x498>
 80025de:	e01e      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e019      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_RCC_OscConfig+0x500>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4965      	ldr	r1, [pc, #404]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe ffc6 	bl	80016ac <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe ffc2 	bl	80016ac <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4922      	ldr	r1, [pc, #136]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x1cc>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe ff24 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	0800db94 	.word	0x0800db94
 80027f8:	2000001c 	.word	0x2000001c
 80027fc:	20000020 	.word	0x20000020

08002800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x30>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x36>
 800282e:	e027      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	613b      	str	r3, [r7, #16]
      break;
 8002834:	e027      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	4a17      	ldr	r2, [pc, #92]	@ (800289c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800284e:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0c5b      	lsrs	r3, r3, #17
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a0d      	ldr	r2, [pc, #52]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	fb03 f202 	mul.w	r2, r3, r2
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e004      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0c      	ldr	r2, [pc, #48]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	613b      	str	r3, [r7, #16]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	693b      	ldr	r3, [r7, #16]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	0800dba4 	.word	0x0800dba4
 80028a0:	0800dbb4 	.word	0x0800dbb4
 80028a4:	003d0900 	.word	0x003d0900

080028a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <RCC_Delay+0x34>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <RCC_Delay+0x38>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c4:	bf00      	nop
  }
  while (Delay --);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	60fa      	str	r2, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <RCC_Delay+0x1c>
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	2000001c 	.word	0x2000001c
 80028e0:	10624dd3 	.word	0x10624dd3

080028e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e076      	b.n	80029e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002906:	d009      	beq.n	800291c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
 800290e:	e005      	b.n	800291c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fd78 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002952:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a0:	ea42 0103 	orr.w	r1, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	0c1a      	lsrs	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f002 0204 	and.w	r2, r2, #4
 80029c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fc:	f7fe fe56 	bl	80016ac <HAL_GetTick>
 8002a00:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e12a      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_SPI_Transmit+0x36>
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e122      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_SPI_Transmit+0x48>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e11b      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a82:	d10f      	bne.n	8002aa4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b40      	cmp	r3, #64	@ 0x40
 8002ab0:	d007      	beq.n	8002ac2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aca:	d152      	bne.n	8002b72 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_Transmit+0xee>
 8002ad4:	8b7b      	ldrh	r3, [r7, #26]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d145      	bne.n	8002b66 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	881a      	ldrh	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	1c9a      	adds	r2, r3, #2
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002afe:	e032      	b.n	8002b66 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d112      	bne.n	8002b34 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	1c9a      	adds	r2, r3, #2
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b32:	e018      	b.n	8002b66 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b34:	f7fe fdba 	bl	80016ac <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d803      	bhi.n	8002b4c <HAL_SPI_Transmit+0x160>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b4a:	d102      	bne.n	8002b52 <HAL_SPI_Transmit+0x166>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e082      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1c7      	bne.n	8002b00 <HAL_SPI_Transmit+0x114>
 8002b70:	e053      	b.n	8002c1a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_SPI_Transmit+0x194>
 8002b7a:	8b7b      	ldrh	r3, [r7, #26]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d147      	bne.n	8002c10 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ba6:	e033      	b.n	8002c10 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d113      	bne.n	8002bde <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bdc:	e018      	b.n	8002c10 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bde:	f7fe fd65 	bl	80016ac <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d803      	bhi.n	8002bf6 <HAL_SPI_Transmit+0x20a>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_Transmit+0x210>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e02d      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1c6      	bne.n	8002ba8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 faf8 	bl	8003214 <SPI_EndRxTxTransaction>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e097      	b.n	8002dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit_DMA+0x2a>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e08f      	b.n	8002dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_SPI_Transmit_DMA+0x3c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e088      	b.n	8002dc2 <HAL_SPI_Transmit_DMA+0x14e>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfe:	d10f      	bne.n	8002d20 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d24:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <HAL_SPI_Transmit_DMA+0x158>)
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <HAL_SPI_Transmit_DMA+0x15c>)
 8002d2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	4a27      	ldr	r2, [pc, #156]	@ (8002dd4 <HAL_SPI_Transmit_DMA+0x160>)
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d58:	f7fe fe3e 	bl	80019d8 <HAL_DMA_Start_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e023      	b.n	8002dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d84:	2b40      	cmp	r3, #64	@ 0x40
 8002d86:	d007      	beq.n	8002d98 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0202 	orr.w	r2, r2, #2
 8002dbe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	08003081 	.word	0x08003081
 8002dd0:	08002fdb 	.word	0x08002fdb
 8002dd4:	0800309d 	.word	0x0800309d

08002dd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
    return;
 8002e1a:	e0be      	b.n	8002f9a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_SPI_IRQHandler+0x66>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	09db      	lsrs	r3, r3, #7
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
    return;
 8002e3c:	e0ad      	b.n	8002f9a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_SPI_IRQHandler+0x80>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a1 	beq.w	8002f9a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809a 	beq.w	8002f9a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d023      	beq.n	8002eba <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d011      	beq.n	8002ea2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e82:	f043 0204 	orr.w	r2, r3, #4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	e00b      	b.n	8002eba <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8002eb8:	e06f      	b.n	8002f9a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d014      	beq.n	8002ef0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d04f      	beq.n	8002f98 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_SPI_IRQHandler+0x14c>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d034      	beq.n	8002f8e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0203 	bic.w	r2, r2, #3
 8002f32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d011      	beq.n	8002f60 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <HAL_SPI_IRQHandler+0x1c8>)
 8002f42:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fda5 	bl	8001a98 <HAL_DMA_Abort_IT>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d016      	beq.n	8002f96 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa0 <HAL_SPI_IRQHandler+0x1c8>)
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fd8f 	bl	8001a98 <HAL_DMA_Abort_IT>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002f8c:	e003      	b.n	8002f96 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f81a 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f94:	e000      	b.n	8002f98 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002f96:	bf00      	nop
    return;
 8002f98:	bf00      	nop
  }
}
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	080030dd 	.word	0x080030dd

08002fa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe8:	f7fe fb60 	bl	80016ac <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d03b      	beq.n	8003074 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0220 	bic.w	r2, r2, #32
 800300a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0202 	bic.w	r2, r2, #2
 800301a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	2164      	movs	r1, #100	@ 0x64
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f000 f8f7 	bl	8003214 <SPI_EndRxTxTransaction>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7ff ffab 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003072:	e002      	b.n	800307a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7ff ff95 	bl	8002fa4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff ff91 	bl	8002fb6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0203 	bic.w	r2, r2, #3
 80030b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	f043 0210 	orr.w	r2, r3, #16
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff ff7a 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff ff66 	bl	8002fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003114:	f7fe faca 	bl	80016ac <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003124:	f7fe fac2 	bl	80016ac <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312a:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	e054      	b.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003142:	d050      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003144:	f7fe fab2 	bl	80016ac <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13d      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003172:	d111      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317c:	d004      	beq.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d107      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a0:	d10f      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e017      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d19b      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000001c 	.word	0x2000001c

08003214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	2102      	movs	r1, #2
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff ff6a 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e013      	b.n	800326e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	2180      	movs	r1, #128	@ 0x80
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff57 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e000      	b.n	800326e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <memset>:
 8003276:	4603      	mov	r3, r0
 8003278:	4402      	add	r2, r0
 800327a:	4293      	cmp	r3, r2
 800327c:	d100      	bne.n	8003280 <memset+0xa>
 800327e:	4770      	bx	lr
 8003280:	f803 1b01 	strb.w	r1, [r3], #1
 8003284:	e7f9      	b.n	800327a <memset+0x4>
	...

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	2600      	movs	r6, #0
 800328c:	4d0c      	ldr	r5, [pc, #48]	@ (80032c0 <__libc_init_array+0x38>)
 800328e:	4c0d      	ldr	r4, [pc, #52]	@ (80032c4 <__libc_init_array+0x3c>)
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	42a6      	cmp	r6, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	f000 f81a 	bl	80032d0 <_init>
 800329c:	2600      	movs	r6, #0
 800329e:	4d0a      	ldr	r5, [pc, #40]	@ (80032c8 <__libc_init_array+0x40>)
 80032a0:	4c0a      	ldr	r4, [pc, #40]	@ (80032cc <__libc_init_array+0x44>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b0:	4798      	blx	r3
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ba:	4798      	blx	r3
 80032bc:	3601      	adds	r6, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	0800dbb8 	.word	0x0800dbb8
 80032c4:	0800dbb8 	.word	0x0800dbb8
 80032c8:	0800dbb8 	.word	0x0800dbb8
 80032cc:	0800dbbc 	.word	0x0800dbbc

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
