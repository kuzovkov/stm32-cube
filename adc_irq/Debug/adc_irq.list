
adc_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017ec  08008ab8  08008ab8  00009ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a4  0800a2a4  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2a4  0800a2a4  0000b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2ac  0800a2ac  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2ac  0800a2ac  0000b2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2b0  0800a2b0  0000b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a2b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  200001e0  0800a494  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000e10  0800a494  0000ce10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ef  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aef  00000000  00000000  0001d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000202e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019da6  00000000  00000000  00021430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012ace  00000000  00000000  0003b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009390e  00000000  00000000  0004dca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e15b2  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000d6d  00000000  00000000  000e15f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a40  00000000  00000000  000e2364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e7da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008aa0 	.word	0x08008aa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008aa0 	.word	0x08008aa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ca      	sub	sp, #296	@ 0x128
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ff2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ff6:	6018      	str	r0, [r3, #0]
	char msg_display[128];
	uint16_t rawValue;
	float temp;
	float mV;

	rawValue = HAL_ADC_GetValue(&hadc1);
 8000ff8:	486d      	ldr	r0, [pc, #436]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000ffa:	f001 fa59 	bl	80024b0 <HAL_ADC_GetValue>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	mV = ((float)rawValue) / 4095 * 3300;
 8001004:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe43 	bl	8000c94 <__aeabi_ui2f>
 800100e:	4603      	mov	r3, r0
 8001010:	4968      	ldr	r1, [pc, #416]	@ (80011b4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff4a 	bl	8000eac <__aeabi_fdiv>
 8001018:	4603      	mov	r3, r0
 800101a:	4967      	ldr	r1, [pc, #412]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fe91 	bl	8000d44 <__aeabi_fmul>
 8001022:	4603      	mov	r3, r0
 8001024:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	//Temperature (in °C) = {(V 25 - V SENSE ) / Avg_Slope} + 25.
	//Avg_Slope(1) Average slope 4.0 4.3 4.6 mV/°C
	//V25(1) Voltage at 25 °C 1.34 1.43 1.52 V
	//https://www.st.com/resource/en/datasheet/stm32f103c8.pdf

	temp = ((1460 - mV) / 4.3) + 25;
 8001028:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800102c:	4863      	ldr	r0, [pc, #396]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x1d4>)
 800102e:	f7ff fd7f 	bl	8000b30 <__aeabi_fsub>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f9f7 	bl	8000428 <__aeabi_f2d>
 800103a:	a35b      	add	r3, pc, #364	@ (adr r3, 80011a8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fb74 	bl	800072c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b5b      	ldr	r3, [pc, #364]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001052:	f7ff f88b 	bl	800016c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd13 	bl	8000a88 <__aeabi_d2f>
 8001062:	4603      	mov	r3, r0
 8001064:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	sprintf(msg_uart, "rawValue: %hu\r\n", rawValue);
 8001068:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 800106c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001070:	4954      	ldr	r1, [pc, #336]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001072:	4618      	mov	r0, r3
 8001074:	f005 fbd8 	bl	8006828 <siprintf>
	sprintf(msg_display, "%d", rawValue);
 8001078:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4951      	ldr	r1, [pc, #324]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fbd0 	bl	8006828 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 8001088:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f85f 	bl	8000150 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109e:	484b      	ldr	r0, [pc, #300]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010a0:	f004 f8e1 	bl	8005266 <HAL_UART_Transmit>
	ST7789_WriteString(20, 10, msg_display, Font_16x26, GBLUE, BLACK);
 80010a4:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	9202      	str	r2, [sp, #8]
 80010ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	460a      	mov	r2, r1
 80010bc:	210a      	movs	r1, #10
 80010be:	2014      	movs	r0, #20
 80010c0:	f000 fd1b 	bl	8001afa <ST7789_WriteString>
	sprintf(msg_uart, "mV: %f\r\n", mV);
 80010c4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80010c8:	f7ff f9ae 	bl	8000428 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80010d4:	493f      	ldr	r1, [pc, #252]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80010d6:	f005 fba7 	bl	8006828 <siprintf>
	sprintf(msg_display, "U: %.4f V", mV/1000.0);
 80010da:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80010de:	f7ff f9a3 	bl	8000428 <__aeabi_f2d>
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b3c      	ldr	r3, [pc, #240]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80010e8:	f7ff fb20 	bl	800072c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	f107 000c 	add.w	r0, r7, #12
 80010f4:	4939      	ldr	r1, [pc, #228]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x1f4>)
 80010f6:	f005 fb97 	bl	8006828 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 80010fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f826 	bl	8000150 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001110:	482e      	ldr	r0, [pc, #184]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001112:	f004 f8a8 	bl	8005266 <HAL_UART_Transmit>
	ST7789_WriteString(20, 40, msg_display, Font_16x26, RED, BLACK);
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001118:	f107 010c 	add.w	r1, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001124:	9201      	str	r2, [sp, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	460a      	mov	r2, r1
 800112e:	2128      	movs	r1, #40	@ 0x28
 8001130:	2014      	movs	r0, #20
 8001132:	f000 fce2 	bl	8001afa <ST7789_WriteString>
	sprintf(msg_uart, "Temperature: %.2f\r\n", temp);
 8001136:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800113a:	f7ff f975 	bl	8000428 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001146:	4926      	ldr	r1, [pc, #152]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001148:	f005 fb6e 	bl	8006828 <siprintf>
	sprintf(msg_display, "t: %.2f C", temp);
 800114c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001150:	f7ff f96a 	bl	8000428 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f107 000c 	add.w	r0, r7, #12
 800115c:	4921      	ldr	r1, [pc, #132]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800115e:	f005 fb63 	bl	8006828 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg_uart, strlen(msg_uart), HAL_MAX_DELAY);
 8001162:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001166:	4618      	mov	r0, r3
 8001168:	f7fe fff2 	bl	8000150 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001178:	4814      	ldr	r0, [pc, #80]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x1e4>)
 800117a:	f004 f874 	bl	8005266 <HAL_UART_Transmit>
	ST7789_WriteString(20, 60, msg_display, Font_16x26, YELLOW, BLACK);
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001180:	f107 010c 	add.w	r1, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	9202      	str	r2, [sp, #8]
 8001188:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	460a      	mov	r2, r1
 8001196:	213c      	movs	r1, #60	@ 0x3c
 8001198:	2014      	movs	r0, #20
 800119a:	f000 fcae 	bl	8001afa <ST7789_WriteString>

}
 800119e:	bf00      	nop
 80011a0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	33333333 	.word	0x33333333
 80011ac:	40113333 	.word	0x40113333
 80011b0:	200001fc 	.word	0x200001fc
 80011b4:	457ff000 	.word	0x457ff000
 80011b8:	454e4000 	.word	0x454e4000
 80011bc:	44b68000 	.word	0x44b68000
 80011c0:	40390000 	.word	0x40390000
 80011c4:	08008ab8 	.word	0x08008ab8
 80011c8:	08008ac8 	.word	0x08008ac8
 80011cc:	20000310 	.word	0x20000310
 80011d0:	20000000 	.word	0x20000000
 80011d4:	08008acc 	.word	0x08008acc
 80011d8:	408f4000 	.word	0x408f4000
 80011dc:	08008ad8 	.word	0x08008ad8
 80011e0:	08008ae4 	.word	0x08008ae4
 80011e4:	08008af8 	.word	0x08008af8

080011e8 <run_adc>:

void run_adc()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	static uint16_t count = 0;
	count++;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <run_adc+0x54>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <run_adc+0x54>)
 80011f8:	801a      	strh	r2, [r3, #0]
	if ((count % 5) == 0){
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <run_adc+0x54>)
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <run_adc+0x58>)
 8001200:	fba3 1302 	umull	r1, r3, r3, r2
 8001204:	0899      	lsrs	r1, r3, #2
 8001206:	460b      	mov	r3, r1
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29b      	uxth	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10f      	bne.n	8001234 <run_adc+0x4c>
		char* text = "run_adc\r\n";
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <run_adc+0x5c>)
 8001216:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) text, strlen(text), HAL_MAX_DELAY);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7fe ff99 	bl	8000150 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <run_adc+0x60>)
 800122a:	f004 f81c 	bl	8005266 <HAL_UART_Transmit>
		HAL_ADC_Start_IT(&hadc1);
 800122e:	4807      	ldr	r0, [pc, #28]	@ (800124c <run_adc+0x64>)
 8001230:	f001 f888 	bl	8002344 <HAL_ADC_Start_IT>
	}

}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000358 	.word	0x20000358
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	08008b04 	.word	0x08008b04
 8001248:	20000310 	.word	0x20000310
 800124c:	200001fc 	.word	0x200001fc

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f000 ff18 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f834 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 f9cc 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001260:	f000 f9ac 	bl	80015bc <MX_DMA_Init>
  MX_ADC1_Init();
 8001264:	f000 f88a 	bl	800137c <MX_ADC1_Init>
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <main+0x68>)
 800126a:	f001 fb89 	bl	8002980 <HAL_ADCEx_Calibration_Start>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <main+0x28>
      Error_Handler();
 8001274:	f000 f9fe 	bl	8001674 <Error_Handler>
  }
  MX_USART1_UART_Init();
 8001278:	f000 f976 	bl	8001568 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800127c:	f000 f8bc 	bl	80013f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001280:	f000 f8f0 	bl	8001464 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8001284:	f000 faf8 	bl	8001878 <ST7789_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2108      	movs	r1, #8
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <main+0x6c>)
 800128e:	f002 f963 	bl	8003558 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2012      	movs	r0, #18
 8001298:	f001 fd01 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800129c:	2012      	movs	r0, #18
 800129e:	f001 fd1a 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc1);
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <main+0x68>)
 80012a4:	f001 f84e 	bl	8002344 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80012a8:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <main+0x70>)
 80012aa:	f003 fab9 	bl	8004820 <HAL_TIM_Base_Start_IT>
  ST7789_Fill_Color(BLACK);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 fb88 	bl	80019c4 <ST7789_Fill_Color>

  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <main+0x64>
 80012b8:	200001fc 	.word	0x200001fc
 80012bc:	40010800 	.word	0x40010800
 80012c0:	200002c8 	.word	0x200002c8

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	@ 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	2228      	movs	r2, #40	@ 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 fb0d 	bl	80068f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001310:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f934 	bl	8003588 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001326:	f000 f9a5 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2102      	movs	r1, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fba0 	bl	8003a8c <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001352:	f000 f98f 	bl	8001674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001356:	2302      	movs	r3, #2
 8001358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800135a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800135e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fd20 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800136e:	f000 f981 	bl	8001674 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_ADC1_Init+0x74>)
 800138e:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <MX_ADC1_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_ADC1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <MX_ADC1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013a6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013ba:	f000 feeb 	bl	8002194 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f956 	bl	8001674 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013c8:	2310      	movs	r3, #16
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013d0:	2307      	movs	r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_ADC1_Init+0x74>)
 80013da:	f001 f93d 	bl	8002658 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013e4:	f000 f946 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001fc 	.word	0x200001fc
 80013f4:	40012400 	.word	0x40012400

080013f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_SPI1_Init+0x64>)
 80013fe:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <MX_SPI1_Init+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_SPI1_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_SPI1_Init+0x64>)
 8001418:	2202      	movs	r2, #2
 800141a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_SPI1_Init+0x64>)
 800141e:	2201      	movs	r2, #1
 8001420:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_SPI1_Init+0x64>)
 8001424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001428:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_SPI1_Init+0x64>)
 800142c:	2210      	movs	r2, #16
 800142e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_SPI1_Init+0x64>)
 8001444:	220a      	movs	r2, #10
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	@ (800145c <MX_SPI1_Init+0x64>)
 800144a:	f002 fe19 	bl	8004080 <HAL_SPI_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001454:	f000 f90e 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000022c 	.word	0x2000022c
 8001460:	40013000 	.word	0x40013000

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b092      	sub	sp, #72	@ 0x48
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2220      	movs	r2, #32
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fa2f 	bl	80068f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <MX_TIM1_Init+0xfc>)
 8001496:	4a33      	ldr	r2, [pc, #204]	@ (8001564 <MX_TIM1_Init+0x100>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <MX_TIM1_Init+0xfc>)
 800149c:	f240 529f 	movw	r2, #1439	@ 0x59f
 80014a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014aa:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014c2:	4827      	ldr	r0, [pc, #156]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014c4:	f003 f9fe 	bl	80048c4 <HAL_TIM_OC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 f8d1 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014de:	4619      	mov	r1, r3
 80014e0:	481f      	ldr	r0, [pc, #124]	@ (8001560 <MX_TIM1_Init+0xfc>)
 80014e2:	f003 fdaf 	bl	8005044 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f000 f8c2 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	4812      	ldr	r0, [pc, #72]	@ (8001560 <MX_TIM1_Init+0xfc>)
 8001516:	f003 fb15 	bl	8004b44 <HAL_TIM_OC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001520:	f000 f8a8 	bl	8001674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <MX_TIM1_Init+0xfc>)
 8001548:	f003 fdda 	bl	8005100 <HAL_TIMEx_ConfigBreakDeadTime>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001552:	f000 f88f 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3748      	adds	r7, #72	@ 0x48
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002c8 	.word	0x200002c8
 8001564:	40012c00 	.word	0x40012c00

08001568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_USART1_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_USART1_UART_Init+0x4c>)
 80015a0:	f003 fe11 	bl	80051c6 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f000 f863 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000310 	.word	0x20000310
 80015b8:	40013800 	.word	0x40013800

080015bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_DMA_Init+0x38>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <MX_DMA_Init+0x38>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_DMA_Init+0x38>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200d      	movs	r0, #13
 80015e0:	f001 fb5d 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015e4:	200d      	movs	r0, #13
 80015e6:	f001 fb76 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <MX_GPIO_Init+0x74>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a16      	ldr	r2, [pc, #88]	@ (800166c <MX_GPIO_Init+0x74>)
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_GPIO_Init+0x74>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_GPIO_Init+0x74>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a10      	ldr	r2, [pc, #64]	@ (800166c <MX_GPIO_Init+0x74>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_GPIO_Init+0x74>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	210e      	movs	r1, #14
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <MX_GPIO_Init+0x78>)
 8001642:	f001 ff89 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001646:	230e      	movs	r3, #14
 8001648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2302      	movs	r3, #2
 8001654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_GPIO_Init+0x78>)
 800165e:	f001 fdf7 	bl	8003250 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800168a:	bf00      	nop
	ST7789_DC_Clr();
 800168c:	2200      	movs	r2, #0
 800168e:	2104      	movs	r1, #4
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <ST7789_WriteCommand+0x30>)
 8001692:	f001 ff61 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001696:	1df9      	adds	r1, r7, #7
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169c:	2201      	movs	r2, #1
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <ST7789_WriteCommand+0x34>)
 80016a0:	f002 fd72 	bl	8004188 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80016a4:	bf00      	nop
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010800 	.word	0x40010800
 80016b4:	2000022c 	.word	0x2000022c

080016b8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80016c2:	bf00      	nop
	ST7789_DC_Set();
 80016c4:	2201      	movs	r2, #1
 80016c6:	2104      	movs	r1, #4
 80016c8:	481b      	ldr	r0, [pc, #108]	@ (8001738 <ST7789_WriteData+0x80>)
 80016ca:	f001 ff45 	bl	8003558 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80016ce:	e02a      	b.n	8001726 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	4293      	cmp	r3, r2
 80016d8:	bf28      	it	cs
 80016da:	4613      	movcs	r3, r2
 80016dc:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <ST7789_WriteData+0x84>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d30e      	bcc.n	8001708 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80016ea:	89fb      	ldrh	r3, [r7, #14]
 80016ec:	461a      	mov	r2, r3
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4813      	ldr	r0, [pc, #76]	@ (8001740 <ST7789_WriteData+0x88>)
 80016f2:	f002 fe8d 	bl	8004410 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80016f6:	bf00      	nop
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <ST7789_WriteData+0x88>)
 80016fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d1f8      	bne.n	80016f8 <ST7789_WriteData+0x40>
 8001706:	e006      	b.n	8001716 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001708:	89fa      	ldrh	r2, [r7, #14]
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	480b      	ldr	r0, [pc, #44]	@ (8001740 <ST7789_WriteData+0x88>)
 8001712:	f002 fd39 	bl	8004188 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1d1      	bne.n	80016d0 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 800172c:	bf00      	nop
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40010800 	.word	0x40010800
 800173c:	20000008 	.word	0x20000008
 8001740:	2000022c 	.word	0x2000022c

08001744 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800174e:	bf00      	nop
	ST7789_DC_Set();
 8001750:	2201      	movs	r2, #1
 8001752:	2104      	movs	r1, #4
 8001754:	4807      	ldr	r0, [pc, #28]	@ (8001774 <ST7789_WriteSmallData+0x30>)
 8001756:	f001 feff 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800175a:	1df9      	adds	r1, r7, #7
 800175c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001760:	2201      	movs	r2, #1
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <ST7789_WriteSmallData+0x34>)
 8001764:	f002 fd10 	bl	8004188 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001768:	bf00      	nop
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010800 	.word	0x40010800
 8001778:	2000022c 	.word	0x2000022c

0800177c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001786:	2036      	movs	r0, #54	@ 0x36
 8001788:	f7ff ff7a 	bl	8001680 <ST7789_WriteCommand>
	switch (m) {
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d81a      	bhi.n	80017c8 <ST7789_SetRotation+0x4c>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <ST7789_SetRotation+0x1c>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017a9 	.word	0x080017a9
 800179c:	080017b1 	.word	0x080017b1
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017c1 	.word	0x080017c1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80017a8:	20c0      	movs	r0, #192	@ 0xc0
 80017aa:	f7ff ffcb 	bl	8001744 <ST7789_WriteSmallData>
		break;
 80017ae:	e00c      	b.n	80017ca <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80017b0:	20a0      	movs	r0, #160	@ 0xa0
 80017b2:	f7ff ffc7 	bl	8001744 <ST7789_WriteSmallData>
		break;
 80017b6:	e008      	b.n	80017ca <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ffc3 	bl	8001744 <ST7789_WriteSmallData>
		break;
 80017be:	e004      	b.n	80017ca <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80017c0:	2060      	movs	r0, #96	@ 0x60
 80017c2:	f7ff ffbf 	bl	8001744 <ST7789_WriteSmallData>
		break;
 80017c6:	e000      	b.n	80017ca <ST7789_SetRotation+0x4e>
	default:
		break;
 80017c8:	bf00      	nop
	}
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop

080017d4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	4603      	mov	r3, r0
 80017e8:	80bb      	strh	r3, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80017f2:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	82fb      	strh	r3, [r7, #22]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	827b      	strh	r3, [r7, #18]
 8001800:	883b      	ldrh	r3, [r7, #0]
 8001802:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001804:	202a      	movs	r0, #42	@ 0x2a
 8001806:	f7ff ff3b 	bl	8001680 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b29b      	uxth	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	733b      	strb	r3, [r7, #12]
 8001814:	8afb      	ldrh	r3, [r7, #22]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	737b      	strb	r3, [r7, #13]
 800181a:	8abb      	ldrh	r3, [r7, #20]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	73bb      	strb	r3, [r7, #14]
 8001824:	8abb      	ldrh	r3, [r7, #20]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff41 	bl	80016b8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001836:	202b      	movs	r0, #43	@ 0x2b
 8001838:	f7ff ff22 	bl	8001680 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800183c:	8a7b      	ldrh	r3, [r7, #18]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	723b      	strb	r3, [r7, #8]
 8001846:	8a7b      	ldrh	r3, [r7, #18]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	727b      	strb	r3, [r7, #9]
 800184c:	8a3b      	ldrh	r3, [r7, #16]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	72bb      	strb	r3, [r7, #10]
 8001856:	8a3b      	ldrh	r3, [r7, #16]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2104      	movs	r1, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff28 	bl	80016b8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001868:	202c      	movs	r0, #44	@ 0x2c
 800186a:	f7ff ff09 	bl	8001680 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800186e:	bf00      	nop
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}

08001878 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b08b      	sub	sp, #44	@ 0x2c
 800187c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800187e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001882:	2100      	movs	r1, #0
 8001884:	484a      	ldr	r0, [pc, #296]	@ (80019b0 <ST7789_Init+0x138>)
 8001886:	f005 f834 	bl	80068f2 <memset>
	#endif
	HAL_Delay(10);
 800188a:	200a      	movs	r0, #10
 800188c:	f000 fc5e 	bl	800214c <HAL_Delay>
    ST7789_RST_Clr();
 8001890:	2200      	movs	r2, #0
 8001892:	2102      	movs	r1, #2
 8001894:	4847      	ldr	r0, [pc, #284]	@ (80019b4 <ST7789_Init+0x13c>)
 8001896:	f001 fe5f 	bl	8003558 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800189a:	200a      	movs	r0, #10
 800189c:	f000 fc56 	bl	800214c <HAL_Delay>
    ST7789_RST_Set();
 80018a0:	2201      	movs	r2, #1
 80018a2:	2102      	movs	r1, #2
 80018a4:	4843      	ldr	r0, [pc, #268]	@ (80019b4 <ST7789_Init+0x13c>)
 80018a6:	f001 fe57 	bl	8003558 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80018aa:	2014      	movs	r0, #20
 80018ac:	f000 fc4e 	bl	800214c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80018b0:	203a      	movs	r0, #58	@ 0x3a
 80018b2:	f7ff fee5 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80018b6:	2055      	movs	r0, #85	@ 0x55
 80018b8:	f7ff ff44 	bl	8001744 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80018bc:	20b2      	movs	r0, #178	@ 0xb2
 80018be:	f7ff fedf 	bl	8001680 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80018c2:	4a3d      	ldr	r2, [pc, #244]	@ (80019b8 <ST7789_Init+0x140>)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018cc:	6018      	str	r0, [r3, #0]
 80018ce:	3304      	adds	r3, #4
 80018d0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2105      	movs	r1, #5
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff feed 	bl	80016b8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff ff4c 	bl	800177c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80018e4:	20b7      	movs	r0, #183	@ 0xb7
 80018e6:	f7ff fecb 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80018ea:	2035      	movs	r0, #53	@ 0x35
 80018ec:	f7ff ff2a 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80018f0:	20bb      	movs	r0, #187	@ 0xbb
 80018f2:	f7ff fec5 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80018f6:	2019      	movs	r0, #25
 80018f8:	f7ff ff24 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80018fc:	20c0      	movs	r0, #192	@ 0xc0
 80018fe:	f7ff febf 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001902:	202c      	movs	r0, #44	@ 0x2c
 8001904:	f7ff ff1e 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001908:	20c2      	movs	r0, #194	@ 0xc2
 800190a:	f7ff feb9 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff ff18 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001914:	20c3      	movs	r0, #195	@ 0xc3
 8001916:	f7ff feb3 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800191a:	2012      	movs	r0, #18
 800191c:	f7ff ff12 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001920:	20c4      	movs	r0, #196	@ 0xc4
 8001922:	f7ff fead 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001926:	2020      	movs	r0, #32
 8001928:	f7ff ff0c 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800192c:	20c6      	movs	r0, #198	@ 0xc6
 800192e:	f7ff fea7 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001932:	200f      	movs	r0, #15
 8001934:	f7ff ff06 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001938:	20d0      	movs	r0, #208	@ 0xd0
 800193a:	f7ff fea1 	bl	8001680 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800193e:	20a4      	movs	r0, #164	@ 0xa4
 8001940:	f7ff ff00 	bl	8001744 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001944:	20a1      	movs	r0, #161	@ 0xa1
 8001946:	f7ff fefd 	bl	8001744 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800194a:	20e0      	movs	r0, #224	@ 0xe0
 800194c:	f7ff fe98 	bl	8001680 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <ST7789_Init+0x144>)
 8001952:	f107 0410 	add.w	r4, r7, #16
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	c407      	stmia	r4!, {r0, r1, r2}
 800195a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	210e      	movs	r1, #14
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fea8 	bl	80016b8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001968:	20e1      	movs	r0, #225	@ 0xe1
 800196a:	f7ff fe89 	bl	8001680 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <ST7789_Init+0x148>)
 8001970:	463c      	mov	r4, r7
 8001972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001974:	c407      	stmia	r4!, {r0, r1, r2}
 8001976:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001978:	463b      	mov	r3, r7
 800197a:	210e      	movs	r1, #14
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe9b 	bl	80016b8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001982:	2021      	movs	r0, #33	@ 0x21
 8001984:	f7ff fe7c 	bl	8001680 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001988:	2011      	movs	r0, #17
 800198a:	f7ff fe79 	bl	8001680 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800198e:	2013      	movs	r0, #19
 8001990:	f7ff fe76 	bl	8001680 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001994:	2029      	movs	r0, #41	@ 0x29
 8001996:	f7ff fe73 	bl	8001680 <ST7789_WriteCommand>

	HAL_Delay(50);
 800199a:	2032      	movs	r0, #50	@ 0x32
 800199c:	f000 fbd6 	bl	800214c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f80f 	bl	80019c4 <ST7789_Fill_Color>
}
 80019a6:	bf00      	nop
 80019a8:	372c      	adds	r7, #44	@ 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000035c 	.word	0x2000035c
 80019b4:	40010800 	.word	0x40010800
 80019b8:	08008b10 	.word	0x08008b10
 80019bc:	08008b18 	.word	0x08008b18
 80019c0:	08008b28 	.word	0x08008b28

080019c4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80019ce:	23ef      	movs	r3, #239	@ 0xef
 80019d0:	22ef      	movs	r2, #239	@ 0xef
 80019d2:	2100      	movs	r1, #0
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fefd 	bl	80017d4 <ST7789_SetAddressWindow>
	ST7789_Select();
 80019da:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	81fb      	strh	r3, [r7, #14]
 80019e0:	e00e      	b.n	8001a00 <ST7789_Fill_Color+0x3c>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80019e8:	4619      	mov	r1, r3
 80019ea:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <ST7789_Fill_Color+0x4c>)
 80019ec:	f004 ff81 	bl	80068f2 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 80019f0:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80019f4:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <ST7789_Fill_Color+0x4c>)
 80019f6:	f7ff fe5f 	bl	80016b8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80019fa:	89fb      	ldrh	r3, [r7, #14]
 80019fc:	3301      	adds	r3, #1
 80019fe:	81fb      	strh	r3, [r7, #14]
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a04:	d9ed      	bls.n	80019e2 <ST7789_Fill_Color+0x1e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001a06:	bf00      	nop
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000035c 	.word	0x2000035c

08001a14 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001a14:	b082      	sub	sp, #8
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b088      	sub	sp, #32
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	460b      	mov	r3, r1
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001a2a:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a30:	461a      	mov	r2, r3
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001a40:	4619      	mov	r1, r3
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	440b      	add	r3, r1
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	88b9      	ldrh	r1, [r7, #4]
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	f7ff fec0 	bl	80017d4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e041      	b.n	8001ade <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8001a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	3b20      	subs	r3, #32
 8001a60:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e027      	b.n	8001acc <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001a8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	743b      	strb	r3, [r7, #16]
 8001a96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe08 	bl	80016b8 <ST7789_WriteData>
 8001aa8:	e00d      	b.n	8001ac6 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001aaa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	733b      	strb	r3, [r7, #12]
 8001ab4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fdf9 	bl	80016b8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d3d1      	bcc.n	8001a7c <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d3b7      	bcc.n	8001a5a <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8001aea:	bf00      	nop
}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001af6:	b002      	add	sp, #8
 8001af8:	4770      	bx	lr

08001afa <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001afa:	b082      	sub	sp, #8
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	603a      	str	r2, [r7, #0]
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001b0e:	bf00      	nop
	while (*str) {
 8001b10:	e02d      	b.n	8001b6e <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	7d3a      	ldrb	r2, [r7, #20]
 8001b16:	4413      	add	r3, r2
 8001b18:	2bef      	cmp	r3, #239	@ 0xef
 8001b1a:	dd13      	ble.n	8001b44 <ST7789_WriteString+0x4a>
			x = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001b20:	7d7b      	ldrb	r3, [r7, #21]
 8001b22:	461a      	mov	r2, r3
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	7d7a      	ldrb	r2, [r7, #21]
 8001b2e:	4413      	add	r3, r2
 8001b30:	2bef      	cmp	r3, #239	@ 0xef
 8001b32:	dc21      	bgt.n	8001b78 <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d103      	bne.n	8001b44 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	603b      	str	r3, [r7, #0]
				continue;
 8001b42:	e014      	b.n	8001b6e <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	88b9      	ldrh	r1, [r7, #4]
 8001b4a:	88f8      	ldrh	r0, [r7, #6]
 8001b4c:	8c3b      	ldrh	r3, [r7, #32]
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	8bbb      	ldrh	r3, [r7, #28]
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f7ff ff5b 	bl	8001a14 <ST7789_WriteChar>
		x += font.width;
 8001b5e:	7d3b      	ldrb	r3, [r7, #20]
 8001b60:	461a      	mov	r2, r3
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	4413      	add	r3, r2
 8001b66:	80fb      	strh	r3, [r7, #6]
		str++;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1cd      	bne.n	8001b12 <ST7789_WriteString+0x18>
 8001b76:	e000      	b.n	8001b7a <ST7789_WriteString+0x80>
				break;
 8001b78:	bf00      	nop
	}
	ST7789_UnSelect();
 8001b7a:	bf00      	nop
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b86:	b002      	add	sp, #8
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6193      	str	r3, [r2, #24]
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_MspInit+0x5c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_MspInit+0x60>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_MspInit+0x60>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000

08001bf0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_ADC_MspInit+0x44>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d113      	bne.n	8001c2a <HAL_ADC_MspInit+0x3a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_ADC_MspInit+0x48>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <HAL_ADC_MspInit+0x48>)
 8001c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_ADC_MspInit+0x48>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2012      	movs	r0, #18
 8001c20:	f001 f83d 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c24:	2012      	movs	r0, #18
 8001c26:	f001 f856 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012400 	.word	0x40012400
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a28      	ldr	r2, [pc, #160]	@ (8001cf8 <HAL_SPI_MspInit+0xbc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d149      	bne.n	8001cf0 <HAL_SPI_MspInit+0xb4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a20      	ldr	r2, [pc, #128]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_SPI_MspInit+0xc0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c8c:	23a0      	movs	r3, #160	@ 0xa0
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4818      	ldr	r0, [pc, #96]	@ (8001d00 <HAL_SPI_MspInit+0xc4>)
 8001ca0:	f001 fad6 	bl	8003250 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001ca6:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_SPI_MspInit+0xcc>)
 8001ca8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cd6:	f001 f819 	bl	8002d0c <HAL_DMA_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001ce0:	f7ff fcc8 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001ce8:	649a      	str	r2, [r3, #72]	@ 0x48
 8001cea:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_SPI_MspInit+0xc8>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40013000 	.word	0x40013000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	20000284 	.word	0x20000284
 8001d08:	40020030 	.word	0x40020030

08001d0c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <HAL_TIM_OC_MspInit+0x44>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d113      	bne.n	8001d46 <HAL_TIM_OC_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_TIM_OC_MspInit+0x48>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <HAL_TIM_OC_MspInit+0x48>)
 8001d24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_TIM_OC_MspInit+0x48>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2019      	movs	r0, #25
 8001d3c:	f000 ffaf 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d40:	2019      	movs	r0, #25
 8001d42:	f000 ffc8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_UART_MspInit+0x9c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d139      	bne.n	8001dec <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480f      	ldr	r0, [pc, #60]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001dbe:	f001 fa47 	bl	8003250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4809      	ldr	r0, [pc, #36]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001dd8:	f001 fa3a 	bl	8003250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2025      	movs	r0, #37	@ 0x25
 8001de2:	f000 ff5c 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de6:	2025      	movs	r0, #37	@ 0x25
 8001de8:	f000 ff75 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010800 	.word	0x40010800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <NMI_Handler+0x4>

08001e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <MemManage_Handler+0x4>

08001e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f000 f960 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA1_Channel3_IRQHandler+0x10>)
 8001e5e:	f001 f8c3 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000284 	.word	0x20000284

08001e6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <ADC1_2_IRQHandler+0x10>)
 8001e72:	f000 fb29 	bl	80024c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	//HAL_ADC_Stop_IT(&hadc1);
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200001fc 	.word	0x200001fc

08001e80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  run_adc();
 8001e84:	f7ff f9b0 	bl	80011e8 <run_adc>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <TIM1_UP_IRQHandler+0x14>)
 8001e8a:	f002 fd6a 	bl	8004962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200002c8 	.word	0x200002c8

08001e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <USART1_IRQHandler+0x10>)
 8001e9e:	f003 fa6d 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000310 	.word	0x20000310

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_kill>:

int _kill(int pid, int sig)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec4:	f004 fd68 	bl	8006998 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2216      	movs	r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_exit>:

void _exit (int status)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffe7 	bl	8001eba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <_exit+0x12>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
  }

  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
  }
  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f004 fcd0 	bl	8006998 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20005000 	.word	0x20005000
 8002024:	00001000 	.word	0x00001000
 8002028:	20000cbc 	.word	0x20000cbc
 800202c:	20000e10 	.word	0x20000e10

08002030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800203c:	f7ff fff8 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480b      	ldr	r0, [pc, #44]	@ (8002070 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002042:	490c      	ldr	r1, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002044:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a09      	ldr	r2, [pc, #36]	@ (800207c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002058:	4c09      	ldr	r4, [pc, #36]	@ (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f004 fc9d 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800206a:	f7ff f8f1 	bl	8001250 <main>
  bx lr
 800206e:	4770      	bx	lr
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002078:	0800a2b4 	.word	0x0800a2b4
  ldr r2, =_sbss
 800207c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002080:	20000e10 	.word	0x20000e10

08002084 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <CAN1_RX1_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fdf5 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	200f      	movs	r0, #15
 80020a0:	f000 f808 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fd72 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fe0d 	bl	8002cf2 <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020f0:	f000 fdd5 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	@ (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20000014 	.word	0x20000014
 8002110:	20000010 	.word	0x20000010

08002114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_IncTick+0x1c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_IncTick+0x20>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a03      	ldr	r2, [pc, #12]	@ (8002134 <HAL_IncTick+0x20>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000014 	.word	0x20000014
 8002134:	20000cc0 	.word	0x20000cc0

08002138 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <HAL_GetTick+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000cc0 	.word	0x20000cc0

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff fff0 	bl	8002138 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffe0 	bl	8002138 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000014 	.word	0x20000014

08002194 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0be      	b.n	8002334 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fd0c 	bl	8001bf0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fb8f 	bl	80028fc <ADC_ConversionStop_Disable>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8099 	bne.w	8002322 <HAL_ADC_Init+0x18e>
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8095 	bne.w	8002322 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002214:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7b1b      	ldrb	r3, [r3, #12]
 800221a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800221c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4313      	orrs	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800222c:	d003      	beq.n	8002236 <HAL_ADC_Init+0xa2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_ADC_Init+0xa8>
 8002236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223a:	e000      	b.n	800223e <HAL_ADC_Init+0xaa>
 800223c:	2300      	movs	r3, #0
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7d1b      	ldrb	r3, [r3, #20]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d119      	bne.n	8002280 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7b1b      	ldrb	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	3b01      	subs	r3, #1
 800225a:	035a      	lsls	r2, r3, #13
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e00b      	b.n	8002280 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <HAL_ADC_Init+0x1a8>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b0:	d003      	beq.n	80022ba <HAL_ADC_Init+0x126>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d104      	bne.n	80022c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	3b01      	subs	r3, #1
 80022c0:	051b      	lsls	r3, r3, #20
 80022c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_ADC_Init+0x1ac>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10b      	bne.n	8002300 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022fe:	e018      	b.n	8002332 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	f023 0312 	bic.w	r3, r3, #18
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	ffe1f7fd 	.word	0xffe1f7fd
 8002340:	ff1f0efe 	.word	0xff1f0efe

08002344 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Start_IT+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e0a0      	b.n	80024a0 <HAL_ADC_Start_IT+0x15c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa6e 	bl	8002848 <ADC_Enable>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 808f 	bne.w	8002496 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a45      	ldr	r2, [pc, #276]	@ (80024a8 <HAL_ADC_Start_IT+0x164>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d105      	bne.n	80023a2 <HAL_ADC_Start_IT+0x5e>
 8002396:	4b45      	ldr	r3, [pc, #276]	@ (80024ac <HAL_ADC_Start_IT+0x168>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d026      	beq.n	800240a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023cc:	e01d      	b.n	800240a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <HAL_ADC_Start_IT+0x168>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Start_IT+0xaa>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2f      	ldr	r2, [pc, #188]	@ (80024a8 <HAL_ADC_Start_IT+0x164>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10d      	bne.n	800240a <HAL_ADC_Start_IT+0xc6>
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_ADC_Start_IT+0x168>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002402:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f023 0206 	bic.w	r2, r3, #6
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002422:	e002      	b.n	800242a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0202 	mvn.w	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0220 	orr.w	r2, r2, #32
 800244a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002456:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800245a:	d113      	bne.n	8002484 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_ADC_Start_IT+0x164>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d105      	bne.n	8002472 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_ADC_Start_IT+0x168>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e00c      	b.n	800249e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e003      	b.n	800249e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40012800 	.word	0x40012800
 80024ac:	40012400 	.word	0x40012400

080024b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d03e      	beq.n	8002568 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d039      	beq.n	8002568 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002516:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800251a:	d11d      	bne.n	8002558 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002520:	2b00      	cmp	r3, #0
 8002522:	d119      	bne.n	8002558 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0220 	bic.w	r2, r2, #32
 8002532:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fd45 	bl	8000fe8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0212 	mvn.w	r2, #18
 8002566:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04d      	beq.n	800260e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d048      	beq.n	800260e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800259e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80025a2:	d012      	beq.n	80025ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d125      	bne.n	80025fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025c0:	d11d      	bne.n	80025fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d119      	bne.n	80025fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa6c 	bl	8002adc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 020c 	mvn.w	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f809 	bl	8002646 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0201 	mvn.w	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x20>
 8002674:	2302      	movs	r3, #2
 8002676:	e0dc      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1da>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d81c      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b05      	subs	r3, #5
 800269a:	221f      	movs	r2, #31
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4019      	ands	r1, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b05      	subs	r3, #5
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	635a      	str	r2, [r3, #52]	@ 0x34
 80026c0:	e03c      	b.n	800273c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d81c      	bhi.n	8002704 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b23      	subs	r3, #35	@ 0x23
 80026dc:	221f      	movs	r2, #31
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4019      	ands	r1, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b23      	subs	r3, #35	@ 0x23
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
 8002702:	e01b      	b.n	800273c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b41      	subs	r3, #65	@ 0x41
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b41      	subs	r3, #65	@ 0x41
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b09      	cmp	r3, #9
 8002742:	d91c      	bls.n	800277e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3b1e      	subs	r3, #30
 8002756:	2207      	movs	r2, #7
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	4019      	ands	r1, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6898      	ldr	r0, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	3b1e      	subs	r3, #30
 8002770:	fa00 f203 	lsl.w	r2, r0, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	e019      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	2207      	movs	r2, #7
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6898      	ldr	r0, [r3, #8]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d003      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027be:	2b11      	cmp	r3, #17
 80027c0:	d132      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <HAL_ADC_ConfigChannel+0x1e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d125      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d126      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d11a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027f2:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_ADC_ConfigChannel+0x1e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a13      	ldr	r2, [pc, #76]	@ (8002844 <HAL_ADC_ConfigChannel+0x1ec>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9a      	lsrs	r2, r3, #18
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_ConfigChannel+0x1b2>
 8002816:	e007      	b.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012400 	.word	0x40012400
 8002840:	2000000c 	.word	0x2000000c
 8002844:	431bde83 	.word	0x431bde83

08002848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d040      	beq.n	80028e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002876:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <ADC_Enable+0xac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <ADC_Enable+0xb0>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002884:	e002      	b.n	800288c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002892:	f7ff fc51 	bl	8002138 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002898:	e01f      	b.n	80028da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800289a:	f7ff fc4d 	bl	8002138 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d918      	bls.n	80028da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d011      	beq.n	80028da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e007      	b.n	80028ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d1d8      	bne.n	800289a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	431bde83 	.word	0x431bde83

080028fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12e      	bne.n	8002974 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002926:	f7ff fc07 	bl	8002138 <HAL_GetTick>
 800292a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800292c:	e01b      	b.n	8002966 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292e:	f7ff fc03 	bl	8002138 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d914      	bls.n	8002966 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10d      	bne.n	8002966 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e007      	b.n	8002976 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d0dc      	beq.n	800292e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_ADCEx_Calibration_Start+0x1e>
 800299a:	2302      	movs	r3, #2
 800299c:	e097      	b.n	8002ace <HAL_ADCEx_Calibration_Start+0x14e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ffa8 	bl	80028fc <ADC_ConversionStop_Disable>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff49 	bl	8002848 <ADC_Enable>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 8081 	bne.w	8002ac4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029d6:	4b40      	ldr	r3, [pc, #256]	@ (8002ad8 <HAL_ADCEx_Calibration_Start+0x158>)
 80029d8:	681c      	ldr	r4, [r3, #0]
 80029da:	2002      	movs	r0, #2
 80029dc:	f001 fa9a 	bl	8003f14 <HAL_RCCEx_GetPeriphCLKFreq>
 80029e0:	4603      	mov	r3, r0
 80029e2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80029e6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80029e8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80029ea:	e002      	b.n	80029f2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0208 	orr.w	r2, r2, #8
 8002a06:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a08:	f7ff fb96 	bl	8002138 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a0e:	e01b      	b.n	8002a48 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a10:	f7ff fb92 	bl	8002138 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b0a      	cmp	r3, #10
 8002a1c:	d914      	bls.n	8002a48 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	f023 0312 	bic.w	r3, r3, #18
 8002a34:	f043 0210 	orr.w	r2, r3, #16
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e042      	b.n	8002ace <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1dc      	bne.n	8002a10 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0204 	orr.w	r2, r2, #4
 8002a64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a66:	f7ff fb67 	bl	8002138 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a6c:	e01b      	b.n	8002aa6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a6e:	f7ff fb63 	bl	8002138 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b0a      	cmp	r3, #10
 8002a7a:	d914      	bls.n	8002aa6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	f023 0312 	bic.w	r3, r3, #18
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e013      	b.n	8002ace <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1dc      	bne.n	8002a6e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	f023 0303 	bic.w	r3, r3, #3
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4906      	ldr	r1, [pc, #24]	@ (8002b88 <__NVIC_EnableIRQ+0x34>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	@ (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c68:	f7ff ff90 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff2d 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff42 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff90 	bl	8002be0 <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5f 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff35 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e043      	b.n	8002daa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_DMA_Init+0xa8>)
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <HAL_DMA_Init+0xac>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_DMA_Init+0xb0>)
 8002d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d56:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	bffdfff8 	.word	0xbffdfff8
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Start_IT+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e04b      	b.n	8002e78 <HAL_DMA_Start_IT+0xb8>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d13a      	bne.n	8002e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f9eb 	bl	80031f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 020e 	orr.w	r2, r2, #14
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e00f      	b.n	8002e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 020a 	orr.w	r2, r2, #10
 8002e56:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e005      	b.n	8002e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e020      	b.n	8002eec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 020e 	bic.w	r2, r2, #14
 8002eb8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d005      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2204      	movs	r2, #4
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e051      	b.n	8002fc0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020e 	bic.w	r2, r2, #14
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a22      	ldr	r2, [pc, #136]	@ (8002fcc <HAL_DMA_Abort_IT+0xd4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d029      	beq.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a21      	ldr	r2, [pc, #132]	@ (8002fd0 <HAL_DMA_Abort_IT+0xd8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_Abort_IT+0x9e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd4 <HAL_DMA_Abort_IT+0xdc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01a      	beq.n	8002f90 <HAL_DMA_Abort_IT+0x98>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd8 <HAL_DMA_Abort_IT+0xe0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d012      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x92>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <HAL_DMA_Abort_IT+0xe4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00a      	beq.n	8002f84 <HAL_DMA_Abort_IT+0x8c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <HAL_DMA_Abort_IT+0xe8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <HAL_DMA_Abort_IT+0x86>
 8002f78:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f7c:	e00e      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f82:	e00b      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f88:	e008      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f8e:	e005      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f94:	e002      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f96:	2310      	movs	r3, #16
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_Abort_IT+0xa4>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <HAL_DMA_Abort_IT+0xec>)
 8002f9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
    } 
  }
  return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020008 	.word	0x40020008
 8002fd0:	4002001c 	.word	0x4002001c
 8002fd4:	40020030 	.word	0x40020030
 8002fd8:	40020044 	.word	0x40020044
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	4002006c 	.word	0x4002006c
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	2204      	movs	r2, #4
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d04f      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xc8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a66      	ldr	r2, [pc, #408]	@ (80031d8 <HAL_DMA_IRQHandler+0x1f0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d029      	beq.n	8003096 <HAL_DMA_IRQHandler+0xae>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a65      	ldr	r2, [pc, #404]	@ (80031dc <HAL_DMA_IRQHandler+0x1f4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0xaa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a63      	ldr	r2, [pc, #396]	@ (80031e0 <HAL_DMA_IRQHandler+0x1f8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01a      	beq.n	800308c <HAL_DMA_IRQHandler+0xa4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a62      	ldr	r2, [pc, #392]	@ (80031e4 <HAL_DMA_IRQHandler+0x1fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d012      	beq.n	8003086 <HAL_DMA_IRQHandler+0x9e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a60      	ldr	r2, [pc, #384]	@ (80031e8 <HAL_DMA_IRQHandler+0x200>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00a      	beq.n	8003080 <HAL_DMA_IRQHandler+0x98>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5f      	ldr	r2, [pc, #380]	@ (80031ec <HAL_DMA_IRQHandler+0x204>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <HAL_DMA_IRQHandler+0x92>
 8003074:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003078:	e00e      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 800307a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800307e:	e00b      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003080:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003084:	e008      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003086:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800308a:	e005      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 800308c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003090:	e002      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003092:	2340      	movs	r3, #64	@ 0x40
 8003094:	e000      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003096:	2304      	movs	r3, #4
 8003098:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_DMA_IRQHandler+0x208>)
 800309a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8094 	beq.w	80031ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030ae:	e08e      	b.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2202      	movs	r2, #2
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d056      	beq.n	800316e <HAL_DMA_IRQHandler+0x186>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d051      	beq.n	800316e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 020a 	bic.w	r2, r2, #10
 80030e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a38      	ldr	r2, [pc, #224]	@ (80031d8 <HAL_DMA_IRQHandler+0x1f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d029      	beq.n	800314e <HAL_DMA_IRQHandler+0x166>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a37      	ldr	r2, [pc, #220]	@ (80031dc <HAL_DMA_IRQHandler+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x162>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a35      	ldr	r2, [pc, #212]	@ (80031e0 <HAL_DMA_IRQHandler+0x1f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x15c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a34      	ldr	r2, [pc, #208]	@ (80031e4 <HAL_DMA_IRQHandler+0x1fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d012      	beq.n	800313e <HAL_DMA_IRQHandler+0x156>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a32      	ldr	r2, [pc, #200]	@ (80031e8 <HAL_DMA_IRQHandler+0x200>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x150>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a31      	ldr	r2, [pc, #196]	@ (80031ec <HAL_DMA_IRQHandler+0x204>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d102      	bne.n	8003132 <HAL_DMA_IRQHandler+0x14a>
 800312c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003130:	e00e      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003136:	e00b      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800313c:	e008      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800313e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003142:	e005      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003148:	e002      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800314a:	2320      	movs	r3, #32
 800314c:	e000      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800314e:	2302      	movs	r3, #2
 8003150:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <HAL_DMA_IRQHandler+0x208>)
 8003152:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d034      	beq.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800316c:	e02f      	b.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2208      	movs	r2, #8
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d023      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020e 	bic.w	r2, r2, #14
 8003196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
    }
  }
  return;
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
}
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40020008 	.word	0x40020008
 80031dc:	4002001c 	.word	0x4002001c
 80031e0:	40020030 	.word	0x40020030
 80031e4:	40020044 	.word	0x40020044
 80031e8:	40020058 	.word	0x40020058
 80031ec:	4002006c 	.word	0x4002006c
 80031f0:	40020000 	.word	0x40020000

080031f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d108      	bne.n	8003234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003232:	e007      	b.n	8003244 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b08b      	sub	sp, #44	@ 0x2c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003262:	e169      	b.n	8003538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003264:	2201      	movs	r2, #1
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8158 	bne.w	8003532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a9a      	ldr	r2, [pc, #616]	@ (80034f0 <HAL_GPIO_Init+0x2a0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d05e      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 800328c:	4a98      	ldr	r2, [pc, #608]	@ (80034f0 <HAL_GPIO_Init+0x2a0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d875      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 8003292:	4a98      	ldr	r2, [pc, #608]	@ (80034f4 <HAL_GPIO_Init+0x2a4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d058      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 8003298:	4a96      	ldr	r2, [pc, #600]	@ (80034f4 <HAL_GPIO_Init+0x2a4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d86f      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 800329e:	4a96      	ldr	r2, [pc, #600]	@ (80034f8 <HAL_GPIO_Init+0x2a8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d052      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032a4:	4a94      	ldr	r2, [pc, #592]	@ (80034f8 <HAL_GPIO_Init+0x2a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d869      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032aa:	4a94      	ldr	r2, [pc, #592]	@ (80034fc <HAL_GPIO_Init+0x2ac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04c      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032b0:	4a92      	ldr	r2, [pc, #584]	@ (80034fc <HAL_GPIO_Init+0x2ac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d863      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032b6:	4a92      	ldr	r2, [pc, #584]	@ (8003500 <HAL_GPIO_Init+0x2b0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d046      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032bc:	4a90      	ldr	r2, [pc, #576]	@ (8003500 <HAL_GPIO_Init+0x2b0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d85d      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032c2:	2b12      	cmp	r3, #18
 80032c4:	d82a      	bhi.n	800331c <HAL_GPIO_Init+0xcc>
 80032c6:	2b12      	cmp	r3, #18
 80032c8:	d859      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032ca:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <HAL_GPIO_Init+0x80>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	0800334b 	.word	0x0800334b
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003337 	.word	0x08003337
 80032dc:	08003379 	.word	0x08003379
 80032e0:	0800337f 	.word	0x0800337f
 80032e4:	0800337f 	.word	0x0800337f
 80032e8:	0800337f 	.word	0x0800337f
 80032ec:	0800337f 	.word	0x0800337f
 80032f0:	0800337f 	.word	0x0800337f
 80032f4:	0800337f 	.word	0x0800337f
 80032f8:	0800337f 	.word	0x0800337f
 80032fc:	0800337f 	.word	0x0800337f
 8003300:	0800337f 	.word	0x0800337f
 8003304:	0800337f 	.word	0x0800337f
 8003308:	0800337f 	.word	0x0800337f
 800330c:	0800337f 	.word	0x0800337f
 8003310:	0800337f 	.word	0x0800337f
 8003314:	0800332d 	.word	0x0800332d
 8003318:	08003341 	.word	0x08003341
 800331c:	4a79      	ldr	r2, [pc, #484]	@ (8003504 <HAL_GPIO_Init+0x2b4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003322:	e02c      	b.n	800337e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	623b      	str	r3, [r7, #32]
          break;
 800332a:	e029      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	3304      	adds	r3, #4
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e024      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	3308      	adds	r3, #8
 800333c:	623b      	str	r3, [r7, #32]
          break;
 800333e:	e01f      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	330c      	adds	r3, #12
 8003346:	623b      	str	r3, [r7, #32]
          break;
 8003348:	e01a      	b.n	8003380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003352:	2304      	movs	r3, #4
 8003354:	623b      	str	r3, [r7, #32]
          break;
 8003356:	e013      	b.n	8003380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003360:	2308      	movs	r3, #8
 8003362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	611a      	str	r2, [r3, #16]
          break;
 800336a:	e009      	b.n	8003380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800336c:	2308      	movs	r3, #8
 800336e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	615a      	str	r2, [r3, #20]
          break;
 8003376:	e003      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
          break;
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x130>
          break;
 800337e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2bff      	cmp	r3, #255	@ 0xff
 8003384:	d801      	bhi.n	800338a <HAL_GPIO_Init+0x13a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	e001      	b.n	800338e <HAL_GPIO_Init+0x13e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2bff      	cmp	r3, #255	@ 0xff
 8003394:	d802      	bhi.n	800339c <HAL_GPIO_Init+0x14c>
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	e002      	b.n	80033a2 <HAL_GPIO_Init+0x152>
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	3b08      	subs	r3, #8
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	210f      	movs	r1, #15
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	431a      	orrs	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80b1 	beq.w	8003532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003508 <HAL_GPIO_Init+0x2b8>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003508 <HAL_GPIO_Init+0x2b8>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6193      	str	r3, [r2, #24]
 80033dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003508 <HAL_GPIO_Init+0x2b8>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033e8:	4a48      	ldr	r2, [pc, #288]	@ (800350c <HAL_GPIO_Init+0x2bc>)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a40      	ldr	r2, [pc, #256]	@ (8003510 <HAL_GPIO_Init+0x2c0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_GPIO_Init+0x1ec>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3f      	ldr	r2, [pc, #252]	@ (8003514 <HAL_GPIO_Init+0x2c4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00d      	beq.n	8003438 <HAL_GPIO_Init+0x1e8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3e      	ldr	r2, [pc, #248]	@ (8003518 <HAL_GPIO_Init+0x2c8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <HAL_GPIO_Init+0x1e4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3d      	ldr	r2, [pc, #244]	@ (800351c <HAL_GPIO_Init+0x2cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_GPIO_Init+0x1e0>
 800342c:	2303      	movs	r3, #3
 800342e:	e006      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003430:	2304      	movs	r3, #4
 8003432:	e004      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003434:	2302      	movs	r3, #2
 8003436:	e002      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 800343c:	2300      	movs	r3, #0
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	4093      	lsls	r3, r2
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800344e:	492f      	ldr	r1, [pc, #188]	@ (800350c <HAL_GPIO_Init+0x2bc>)
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003468:	4b2d      	ldr	r3, [pc, #180]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	492c      	ldr	r1, [pc, #176]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003476:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	43db      	mvns	r3, r3
 800347e:	4928      	ldr	r1, [pc, #160]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 8003480:	4013      	ands	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4922      	ldr	r1, [pc, #136]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	491e      	ldr	r1, [pc, #120]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b8:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4918      	ldr	r1, [pc, #96]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4914      	ldr	r1, [pc, #80]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d021      	beq.n	8003524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	490e      	ldr	r1, [pc, #56]	@ (8003520 <HAL_GPIO_Init+0x2d0>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e021      	b.n	8003532 <HAL_GPIO_Init+0x2e2>
 80034ee:	bf00      	nop
 80034f0:	10320000 	.word	0x10320000
 80034f4:	10310000 	.word	0x10310000
 80034f8:	10220000 	.word	0x10220000
 80034fc:	10210000 	.word	0x10210000
 8003500:	10120000 	.word	0x10120000
 8003504:	10110000 	.word	0x10110000
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000
 8003510:	40010800 	.word	0x40010800
 8003514:	40010c00 	.word	0x40010c00
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_GPIO_Init+0x304>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	43db      	mvns	r3, r3
 800352c:	4909      	ldr	r1, [pc, #36]	@ (8003554 <HAL_GPIO_Init+0x304>)
 800352e:	4013      	ands	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	f47f ae8e 	bne.w	8003264 <HAL_GPIO_Init+0x14>
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	372c      	adds	r7, #44	@ 0x2c
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003568:	787b      	ldrb	r3, [r7, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003574:	e003      	b.n	800357e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	041a      	lsls	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e272      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a8:	4b92      	ldr	r3, [pc, #584]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d00c      	beq.n	80035ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b4:	4b8f      	ldr	r3, [pc, #572]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d112      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
 80035c0:	4b8c      	ldr	r3, [pc, #560]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x12c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d168      	bne.n	80036b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e24c      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x76>
 80035f0:	4b80      	ldr	r3, [pc, #512]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a7f      	ldr	r2, [pc, #508]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e02e      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b7b      	ldr	r3, [pc, #492]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7a      	ldr	r2, [pc, #488]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b78      	ldr	r3, [pc, #480]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a77      	ldr	r2, [pc, #476]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e01d      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0xbc>
 800362a:	4b72      	ldr	r3, [pc, #456]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a71      	ldr	r2, [pc, #452]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6e      	ldr	r2, [pc, #440]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003644:	4b6b      	ldr	r3, [pc, #428]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6a      	ldr	r2, [pc, #424]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b68      	ldr	r3, [pc, #416]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a67      	ldr	r2, [pc, #412]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fd68 	bl	8002138 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fd64 	bl	8002138 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e200      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b5d      	ldr	r3, [pc, #372]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0xe4>
 800368a:	e014      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fd54 	bl	8002138 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe fd50 	bl	8002138 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1ec      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x10c>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d063      	beq.n	800378a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c2:	4b4c      	ldr	r3, [pc, #304]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ce:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11c      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
 80036da:	4b46      	ldr	r3, [pc, #280]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	4b43      	ldr	r3, [pc, #268]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1c0      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4939      	ldr	r1, [pc, #228]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	e03a      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <HAL_RCC_OscConfig+0x270>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fe fd09 	bl	8002138 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fe fd05 	bl	8002138 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1a1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b2a      	ldr	r3, [pc, #168]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4927      	ldr	r1, [pc, #156]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fce8 	bl	8002138 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe fce4 	bl	8002138 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e180      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03a      	beq.n	800380c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d019      	beq.n	80037d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_RCC_OscConfig+0x274>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fe fcc8 	bl	8002138 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe fcc4 	bl	8002138 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e160      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f000 face 	bl	8003d6c <RCC_Delay>
 80037d0:	e01c      	b.n	800380c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_RCC_OscConfig+0x274>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fcae 	bl	8002138 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe fcaa 	bl	8002138 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d908      	bls.n	8003800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e146      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	42420000 	.word	0x42420000
 80037fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	4b92      	ldr	r3, [pc, #584]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e9      	bne.n	80037e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a6 	beq.w	8003966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a87      	ldr	r2, [pc, #540]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b82      	ldr	r3, [pc, #520]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7e      	ldr	r2, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fe fc6b 	bl	8002138 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe fc67 	bl	8002138 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	@ 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e103      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b75      	ldr	r3, [pc, #468]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x312>
 800388c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a6e      	ldr	r2, [pc, #440]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	e02d      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a69      	ldr	r2, [pc, #420]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	4b67      	ldr	r3, [pc, #412]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a66      	ldr	r2, [pc, #408]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	e01c      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x356>
 80038c4:	4b61      	ldr	r3, [pc, #388]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a60      	ldr	r2, [pc, #384]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	e00b      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038de:	4b5b      	ldr	r3, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6213      	str	r3, [r2, #32]
 80038ea:	4b58      	ldr	r3, [pc, #352]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d015      	beq.n	800392a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fe fc1b 	bl	8002138 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fe fc17 	bl	8002138 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0b1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RCC_OscConfig+0x37e>
 8003928:	e014      	b.n	8003954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fe fc05 	bl	8002138 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fc01 	bl	8002138 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003970:	4b36      	ldr	r3, [pc, #216]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d061      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d146      	bne.n	8003a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	4b33      	ldr	r3, [pc, #204]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe fbd5 	bl	8002138 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fbd1 	bl	8002138 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e06d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b8:	d108      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4921      	ldr	r1, [pc, #132]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a19      	ldr	r1, [r3, #32]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	430b      	orrs	r3, r1
 80039de:	491b      	ldr	r1, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe fba5 	bl	8002138 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fe fba1 	bl	8002138 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x46a>
 8003a10:	e035      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fb8e 	bl	8002138 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe fb8a 	bl	8002138 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e026      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x498>
 8003a3e:	e01e      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e019      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_OscConfig+0x500>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d0      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	4965      	ldr	r1, [pc, #404]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a58      	ldr	r2, [pc, #352]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a52      	ldr	r2, [pc, #328]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d040      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e073      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fe fadc 	bl	8002138 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe fad8 	bl	8002138 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d210      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4922      	ldr	r1, [pc, #136]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c06:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f821 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1cc>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_ClockConfig+0x1d0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fa3a 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08009ef4 	.word	0x08009ef4
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	20000010 	.word	0x20000010

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x30>
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8e:	e027      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c92:	613b      	str	r3, [r7, #16]
      break;
 8003c94:	e027      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0c9b      	lsrs	r3, r3, #18
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cae:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0c5b      	lsrs	r3, r3, #17
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e004      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce2:	613b      	str	r3, [r7, #16]
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	693b      	ldr	r3, [r7, #16]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	007a1200 	.word	0x007a1200
 8003cfc:	08009f0c 	.word	0x08009f0c
 8003d00:	08009f1c 	.word	0x08009f1c
 8003d04:	003d0900 	.word	0x003d0900

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b02      	ldr	r3, [pc, #8]	@ (8003d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f7ff fff2 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08009f04 	.word	0x08009f04

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	@ (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08009f04 	.word	0x08009f04

08003d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d74:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <RCC_Delay+0x34>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <RCC_Delay+0x38>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d88:	bf00      	nop
  }
  while (Delay --);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	60fa      	str	r2, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <RCC_Delay+0x1c>
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	2000000c 	.word	0x2000000c
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d07d      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
 8003de0:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e08:	f7fe f996 	bl	8002138 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe f992 	bl	8002138 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e06d      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2e:	4b36      	ldr	r3, [pc, #216]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d027      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e56:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e62:	4a29      	ldr	r2, [pc, #164]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d014      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe f961 	bl	8002138 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe f95d 	bl	8002138 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e036      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4917      	ldr	r1, [pc, #92]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	490b      	ldr	r1, [pc, #44]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4904      	ldr	r1, [pc, #16]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42420440 	.word	0x42420440

08003f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	f200 808a 	bhi.w	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d045      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d075      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f4a:	e082      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003f4c:	4b46      	ldr	r3, [pc, #280]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f52:	4b45      	ldr	r3, [pc, #276]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d07b      	beq.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	0c9b      	lsrs	r3, r3, #18
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	4a41      	ldr	r2, [pc, #260]	@ (800406c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003f68:	5cd3      	ldrb	r3, [r2, r3]
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f76:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	0c5b      	lsrs	r3, r3, #17
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	4a3b      	ldr	r2, [pc, #236]	@ (8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f82:	5cd3      	ldrb	r3, [r2, r3]
 8003f84:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f90:	4a38      	ldr	r2, [pc, #224]	@ (8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e004      	b.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4a34      	ldr	r2, [pc, #208]	@ (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fac:	4b2e      	ldr	r3, [pc, #184]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb8:	d102      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	61bb      	str	r3, [r7, #24]
      break;
 8003fbe:	e04a      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
      break;
 8003fce:	e042      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003fd0:	4b25      	ldr	r3, [pc, #148]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe0:	d108      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e01f      	b.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ffe:	d109      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004000:	4b19      	ldr	r3, [pc, #100]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800400c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e00f      	b.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800401e:	d11c      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800402c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004030:	61bb      	str	r3, [r7, #24]
      break;
 8004032:	e012      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004034:	e011      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004036:	f7ff fe85 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0b9b      	lsrs	r3, r3, #14
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	3301      	adds	r3, #1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
      break;
 8004050:	e004      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800405a:	bf00      	nop
    }
  }
  return (frequency);
 800405c:	69bb      	ldr	r3, [r7, #24]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	08009f20 	.word	0x08009f20
 8004070:	08009f30 	.word	0x08009f30
 8004074:	007a1200 	.word	0x007a1200
 8004078:	003d0900 	.word	0x003d0900
 800407c:	aaaaaaab 	.word	0xaaaaaaab

08004080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e076      	b.n	8004180 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a2:	d009      	beq.n	80040b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	61da      	str	r2, [r3, #28]
 80040aa:	e005      	b.n	80040b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fdb2 	bl	8001c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413c:	ea42 0103 	orr.w	r1, r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	0c1a      	lsrs	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f002 0204 	and.w	r2, r2, #4
 800415e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004198:	f7fd ffce 	bl	8002138 <HAL_GetTick>
 800419c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e12a      	b.n	8004408 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_Transmit+0x36>
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e122      	b.n	8004408 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_SPI_Transmit+0x48>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e11b      	b.n	8004408 <HAL_SPI_Transmit+0x280>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2203      	movs	r2, #3
 80041dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800421e:	d10f      	bne.n	8004240 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800422e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800423e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b40      	cmp	r3, #64	@ 0x40
 800424c:	d007      	beq.n	800425e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004266:	d152      	bne.n	800430e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0xee>
 8004270:	8b7b      	ldrh	r3, [r7, #26]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d145      	bne.n	8004302 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800429a:	e032      	b.n	8004302 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d112      	bne.n	80042d0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	881a      	ldrh	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	1c9a      	adds	r2, r3, #2
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042ce:	e018      	b.n	8004302 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d0:	f7fd ff32 	bl	8002138 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d803      	bhi.n	80042e8 <HAL_SPI_Transmit+0x160>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_Transmit+0x166>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e082      	b.n	8004408 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1c7      	bne.n	800429c <HAL_SPI_Transmit+0x114>
 800430c:	e053      	b.n	80043b6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x194>
 8004316:	8b7b      	ldrh	r3, [r7, #26]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d147      	bne.n	80043ac <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004342:	e033      	b.n	80043ac <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d113      	bne.n	800437a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004378:	e018      	b.n	80043ac <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437a:	f7fd fedd 	bl	8002138 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d803      	bhi.n	8004392 <HAL_SPI_Transmit+0x20a>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Transmit+0x210>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e02d      	b.n	8004408 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1c6      	bne.n	8004344 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f9fe 	bl	80047bc <SPI_EndRxTxTransaction>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	e097      	b.n	800455e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_SPI_Transmit_DMA+0x2a>
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08f      	b.n	800455e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_SPI_Transmit_DMA+0x3c>
 8004448:	2302      	movs	r3, #2
 800444a:	e088      	b.n	800455e <HAL_SPI_Transmit_DMA+0x14e>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2203      	movs	r2, #3
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800449a:	d10f      	bne.n	80044bc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c0:	4a29      	ldr	r2, [pc, #164]	@ (8004568 <HAL_SPI_Transmit_DMA+0x158>)
 80044c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c8:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_SPI_Transmit_DMA+0x15c>)
 80044ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d0:	4a27      	ldr	r2, [pc, #156]	@ (8004570 <HAL_SPI_Transmit_DMA+0x160>)
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	2200      	movs	r2, #0
 80044da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	4619      	mov	r1, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044f4:	f7fe fc64 	bl	8002dc0 <HAL_DMA_Start_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e023      	b.n	800455e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b40      	cmp	r3, #64	@ 0x40
 8004522:	d007      	beq.n	8004534 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0220 	orr.w	r2, r2, #32
 800454a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0202 	orr.w	r2, r2, #2
 800455a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	08004651 	.word	0x08004651
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800466d 	.word	0x0800466d

08004574 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b8:	f7fd fdbe 	bl	8002138 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d03b      	beq.n	8004644 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0220 	bic.w	r2, r2, #32
 80045da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0202 	bic.w	r2, r2, #2
 80045ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	2164      	movs	r1, #100	@ 0x64
 80045f0:	6978      	ldr	r0, [r7, #20]
 80045f2:	f000 f8e3 	bl	80047bc <SPI_EndRxTxTransaction>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f7ff ffab 	bl	8004598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004642:	e002      	b.n	800464a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7ff ff95 	bl	8004574 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff91 	bl	8004586 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0203 	bic.w	r2, r2, #3
 8004688:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	f043 0210 	orr.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff7a 	bl	8004598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046bc:	f7fd fd3c 	bl	8002138 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046cc:	f7fd fd34 	bl	8002138 <HAL_GetTick>
 80046d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046d2:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	015b      	lsls	r3, r3, #5
 80046d8:	0d1b      	lsrs	r3, r3, #20
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046e2:	e054      	b.n	800478e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ea:	d050      	beq.n	800478e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ec:	f7fd fd24 	bl	8002138 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d902      	bls.n	8004702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d13d      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d111      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004724:	d004      	beq.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d107      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d10f      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e017      	b.n	80047ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3b01      	subs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d19b      	bne.n	80046e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2000000c 	.word	0x2000000c

080047bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2201      	movs	r2, #1
 80047d0:	2102      	movs	r1, #2
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff ff6a 	bl	80046ac <SPI_WaitFlagStateUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e013      	b.n	8004816 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff ff57 	bl	80046ac <SPI_WaitFlagStateUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e000      	b.n	8004816 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e03a      	b.n	80048ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_TIM_Base_Start_IT+0x98>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x58>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x58>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <HAL_TIM_Base_Start_IT+0x9c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x58>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800

080048c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e041      	b.n	800495a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fa0e 	bl	8001d0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 f9a8 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0202 	mvn.w	r2, #2
 8004996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f937 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 80049b2:	e005      	b.n	80049c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f92a 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f939 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01b      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0204 	mvn.w	r2, #4
 80049e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f911 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f904 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f913 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01b      	beq.n	8004a5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0208 	mvn.w	r2, #8
 8004a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8eb 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004a4a:	e005      	b.n	8004a58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8de 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8ed 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01b      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0210 	mvn.w	r2, #16
 8004a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2208      	movs	r2, #8
 8004a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8c5 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004a96:	e005      	b.n	8004aa4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8b8 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8c7 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00c      	beq.n	8004ace <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0201 	mvn.w	r2, #1
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f897 	bl	8004bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fb61 	bl	80051b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f897 	bl	8004c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0220 	mvn.w	r2, #32
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fb34 	bl	80051a2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e048      	b.n	8004bf4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d839      	bhi.n	8004be4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004be5 	.word	0x08004be5
 8004b88:	08004bbb 	.word	0x08004bbb
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004bc9 	.word	0x08004bc9
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004be5 	.word	0x08004be5
 8004ba4:	08004be5 	.word	0x08004be5
 8004ba8:	08004bd7 	.word	0x08004bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f8be 	bl	8004d34 <TIM_OC1_SetConfig>
      break;
 8004bb8:	e017      	b.n	8004bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f91d 	bl	8004e00 <TIM_OC2_SetConfig>
      break;
 8004bc6:	e010      	b.n	8004bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f980 	bl	8004ed4 <TIM_OC3_SetConfig>
      break;
 8004bd4:	e009      	b.n	8004bea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f9e3 	bl	8004fa8 <TIM_OC4_SetConfig>
      break;
 8004be2:	e002      	b.n	8004bea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
	...

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <TIM_Base_SetConfig+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a2b      	ldr	r2, [pc, #172]	@ (8004d30 <TIM_Base_SetConfig+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <TIM_Base_SetConfig+0xd4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <TIM_Base_SetConfig+0xd8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d103      	bne.n	8004d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	611a      	str	r2, [r3, #16]
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800

08004d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0201 	bic.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0302 	bic.w	r3, r3, #2
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <TIM_OC1_SetConfig+0xc8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0308 	bic.w	r3, r3, #8
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <TIM_OC1_SetConfig+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d111      	bne.n	8004dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00

08004e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 0210 	bic.w	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0320 	bic.w	r3, r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <TIM_OC2_SetConfig+0xd0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <TIM_OC2_SetConfig+0xd0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d113      	bne.n	8004eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00

08004ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <TIM_OC3_SetConfig+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10d      	bne.n	8004f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	@ (8004fa4 <TIM_OC3_SetConfig+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d113      	bne.n	8004f7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0f      	ldr	r2, [pc, #60]	@ (8005040 <TIM_OC4_SetConfig+0x98>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d109      	bne.n	800501c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800500e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00

08005044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005058:	2302      	movs	r3, #2
 800505a:	e046      	b.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a8:	d009      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a12      	ldr	r2, [pc, #72]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10c      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800

08005100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005118:	2302      	movs	r3, #2
 800511a:	e03d      	b.n	8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e042      	b.n	800525e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc fdb3 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	@ 0x24
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005208:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fd62 	bl	8005cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800521e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800522e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800523e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08a      	sub	sp, #40	@ 0x28
 800526a:	af02      	add	r7, sp, #8
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	d175      	bne.n	8005372 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_UART_Transmit+0x2c>
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e06e      	b.n	8005374 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2221      	movs	r2, #33	@ 0x21
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a4:	f7fc ff48 	bl	8002138 <HAL_GetTick>
 80052a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052be:	d108      	bne.n	80052d2 <HAL_UART_Transmit+0x6c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e003      	b.n	80052da <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052da:	e02e      	b.n	800533a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2180      	movs	r1, #128	@ 0x80
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fb00 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e03a      	b.n	8005374 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005312:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	3302      	adds	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e007      	b.n	800532c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1cb      	bne.n	80052dc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 facc 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e006      	b.n	8005374 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	@ 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fbbc 	bl	8005b58 <UART_Receive_IT>
      return;
 80053e0:	e25b      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80de 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d1 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0202 	orr.w	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 81f2 	beq.w	8005890 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb47 	bl	8005b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_IRQHandler+0x17a>
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa51 	bl	800599e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d041      	beq.n	800558e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	4a7e      	ldr	r2, [pc, #504]	@ (800575c <HAL_UART_IRQHandler+0x3e0>)
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fcc4 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00e      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f99c 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00a      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f998 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e006      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f994 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055a2:	e175      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	bf00      	nop
    return;
 80055a6:	e173      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 814f 	bne.w	8005850 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8148 	beq.w	8005850 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8141 	beq.w	8005850 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80b6 	beq.w	8005760 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8145 	beq.w	8005894 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 813e 	bcs.w	8005894 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800561e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b20      	cmp	r3, #32
 8005628:	f000 8088 	beq.w	800573c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005646:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005658:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800565c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005664:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1d9      	bne.n	800562c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005688:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800569c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e1      	bne.n	8005678 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e3      	bne.n	80056b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800570a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570c:	f023 0310 	bic.w	r3, r3, #16
 8005710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800571e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005720:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005724:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800572c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd fba2 	bl	8002e80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574a:	b29b      	uxth	r3, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8bf 	bl	80058d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005758:	e09c      	b.n	8005894 <HAL_UART_IRQHandler+0x518>
 800575a:	bf00      	nop
 800575c:	08005a63 	.word	0x08005a63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005768:	b29b      	uxth	r3, r3
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 808e 	beq.w	8005898 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800577c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8089 	beq.w	8005898 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	623b      	str	r3, [r7, #32]
   return(result);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e3      	bne.n	80057be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60fb      	str	r3, [r7, #12]
   return(result);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	617b      	str	r3, [r7, #20]
   return(result);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e3      	bne.n	8005804 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f844 	bl	80058d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800584e:	e023      	b.n	8005898 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <HAL_UART_IRQHandler+0x4f4>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f90e 	bl	8005a8a <UART_Transmit_IT>
    return;
 800586e:	e014      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <HAL_UART_IRQHandler+0x51e>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f94d 	bl	8005b28 <UART_EndTransmit_IT>
    return;
 800588e:	e004      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
    return;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
      return;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
      return;
 8005898:	bf00      	nop
  }
}
 800589a:	37e8      	adds	r7, #232	@ 0xe8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fc:	e03b      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005904:	d037      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fc fc17 	bl	8002138 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <UART_WaitOnFlagUntilTimeout+0x30>
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e03a      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d023      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b80      	cmp	r3, #128	@ 0x80
 8005932:	d020      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d01d      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b08      	cmp	r3, #8
 8005946:	d116      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f81d 	bl	800599e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2208      	movs	r2, #8
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e00f      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0b4      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b095      	sub	sp, #84	@ 0x54
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80059c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e5      	bne.n	80059a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3314      	adds	r3, #20
 80059e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d119      	bne.n	8005a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a36:	61ba      	str	r2, [r7, #24]
 8005a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	613b      	str	r3, [r7, #16]
   return(result);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e5      	bne.n	8005a16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a58:	bf00      	nop
 8005a5a:	3754      	adds	r7, #84	@ 0x54
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr

08005a62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff ff21 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b21      	cmp	r3, #33	@ 0x21
 8005a9c:	d13e      	bne.n	8005b1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa6:	d114      	bne.n	8005ad2 <UART_Transmit_IT+0x48>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d110      	bne.n	8005ad2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	621a      	str	r2, [r3, #32]
 8005ad0:	e008      	b.n	8005ae4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6211      	str	r1, [r2, #32]
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4619      	mov	r1, r3
 8005af2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10f      	bne.n	8005b18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e000      	b.n	8005b1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fea9 	bl	80058a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	@ 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b22      	cmp	r3, #34	@ 0x22
 8005b6a:	f040 80ae 	bne.w	8005cca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b76:	d117      	bne.n	8005ba8 <UART_Receive_IT+0x50>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d113      	bne.n	8005ba8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ba6:	e026      	b.n	8005bf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d007      	beq.n	8005bcc <UART_Receive_IT+0x74>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <UART_Receive_IT+0x82>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e008      	b.n	8005bec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4619      	mov	r1, r3
 8005c04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d15d      	bne.n	8005cc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0220 	bic.w	r2, r2, #32
 8005c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d135      	bne.n	8005cbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	613b      	str	r3, [r7, #16]
   return(result);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f023 0310 	bic.w	r3, r3, #16
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c76:	623a      	str	r2, [r7, #32]
 8005c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d10a      	bne.n	8005cae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fe0e 	bl	80058d6 <HAL_UARTEx_RxEventCallback>
 8005cba:	e002      	b.n	8005cc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fdf8 	bl	80058b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e002      	b.n	8005ccc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005d0e:	f023 030c 	bic.w	r3, r3, #12
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <UART_SetConfig+0x114>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d3c:	f7fe f802 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	e002      	b.n	8005d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fd ffea 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009a      	lsls	r2, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <UART_SetConfig+0x118>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	0119      	lsls	r1, r3, #4
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d80:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <UART_SetConfig+0x118>)
 8005d82:	fba3 0302 	umull	r0, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2064      	movs	r0, #100	@ 0x64
 8005d8a:	fb00 f303 	mul.w	r3, r0, r3
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	3332      	adds	r3, #50	@ 0x32
 8005d94:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <UART_SetConfig+0x118>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da0:	4419      	add	r1, r3
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009a      	lsls	r2, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <UART_SetConfig+0x118>)
 8005dba:	fba3 0302 	umull	r0, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2064      	movs	r0, #100	@ 0x64
 8005dc2:	fb00 f303 	mul.w	r3, r0, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	3332      	adds	r3, #50	@ 0x32
 8005dcc:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <UART_SetConfig+0x118>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f003 020f 	and.w	r2, r3, #15
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	440a      	add	r2, r1
 8005dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40013800 	.word	0x40013800
 8005dec:	51eb851f 	.word	0x51eb851f

08005df0 <__cvt>:
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df6:	461d      	mov	r5, r3
 8005df8:	bfbb      	ittet	lt
 8005dfa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005dfe:	461d      	movlt	r5, r3
 8005e00:	2300      	movge	r3, #0
 8005e02:	232d      	movlt	r3, #45	@ 0x2d
 8005e04:	b088      	sub	sp, #32
 8005e06:	4614      	mov	r4, r2
 8005e08:	bfb8      	it	lt
 8005e0a:	4614      	movlt	r4, r2
 8005e0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005e10:	7013      	strb	r3, [r2, #0]
 8005e12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005e18:	f023 0820 	bic.w	r8, r3, #32
 8005e1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e20:	d005      	beq.n	8005e2e <__cvt+0x3e>
 8005e22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e26:	d100      	bne.n	8005e2a <__cvt+0x3a>
 8005e28:	3601      	adds	r6, #1
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e000      	b.n	8005e30 <__cvt+0x40>
 8005e2e:	2303      	movs	r3, #3
 8005e30:	aa07      	add	r2, sp, #28
 8005e32:	9204      	str	r2, [sp, #16]
 8005e34:	aa06      	add	r2, sp, #24
 8005e36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e3a:	e9cd 3600 	strd	r3, r6, [sp]
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f000 fe6d 	bl	8006b20 <_dtoa_r>
 8005e46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	d119      	bne.n	8005e82 <__cvt+0x92>
 8005e4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e50:	07db      	lsls	r3, r3, #31
 8005e52:	d50e      	bpl.n	8005e72 <__cvt+0x82>
 8005e54:	eb00 0906 	add.w	r9, r0, r6
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f7fa fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8005e64:	b108      	cbz	r0, 8005e6a <__cvt+0x7a>
 8005e66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e6a:	2230      	movs	r2, #48	@ 0x30
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	454b      	cmp	r3, r9
 8005e70:	d31e      	bcc.n	8005eb0 <__cvt+0xc0>
 8005e72:	4638      	mov	r0, r7
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005e78:	1bdb      	subs	r3, r3, r7
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	b008      	add	sp, #32
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e86:	eb00 0906 	add.w	r9, r0, r6
 8005e8a:	d1e5      	bne.n	8005e58 <__cvt+0x68>
 8005e8c:	7803      	ldrb	r3, [r0, #0]
 8005e8e:	2b30      	cmp	r3, #48	@ 0x30
 8005e90:	d10a      	bne.n	8005ea8 <__cvt+0xb8>
 8005e92:	2200      	movs	r2, #0
 8005e94:	2300      	movs	r3, #0
 8005e96:	4620      	mov	r0, r4
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7fa fd85 	bl	80009a8 <__aeabi_dcmpeq>
 8005e9e:	b918      	cbnz	r0, 8005ea8 <__cvt+0xb8>
 8005ea0:	f1c6 0601 	rsb	r6, r6, #1
 8005ea4:	f8ca 6000 	str.w	r6, [sl]
 8005ea8:	f8da 3000 	ldr.w	r3, [sl]
 8005eac:	4499      	add	r9, r3
 8005eae:	e7d3      	b.n	8005e58 <__cvt+0x68>
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	9107      	str	r1, [sp, #28]
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e7d9      	b.n	8005e6c <__cvt+0x7c>

08005eb8 <__exponent>:
 8005eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	bfb6      	itet	lt
 8005ebe:	232d      	movlt	r3, #45	@ 0x2d
 8005ec0:	232b      	movge	r3, #43	@ 0x2b
 8005ec2:	4249      	neglt	r1, r1
 8005ec4:	2909      	cmp	r1, #9
 8005ec6:	7002      	strb	r2, [r0, #0]
 8005ec8:	7043      	strb	r3, [r0, #1]
 8005eca:	dd29      	ble.n	8005f20 <__exponent+0x68>
 8005ecc:	f10d 0307 	add.w	r3, sp, #7
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	270a      	movs	r7, #10
 8005ed4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ed8:	461a      	mov	r2, r3
 8005eda:	fb07 1416 	mls	r4, r7, r6, r1
 8005ede:	3430      	adds	r4, #48	@ 0x30
 8005ee0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	2c63      	cmp	r4, #99	@ 0x63
 8005ee8:	4631      	mov	r1, r6
 8005eea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005eee:	dcf1      	bgt.n	8005ed4 <__exponent+0x1c>
 8005ef0:	3130      	adds	r1, #48	@ 0x30
 8005ef2:	1e94      	subs	r4, r2, #2
 8005ef4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ef8:	4623      	mov	r3, r4
 8005efa:	1c41      	adds	r1, r0, #1
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	d30a      	bcc.n	8005f16 <__exponent+0x5e>
 8005f00:	f10d 0309 	add.w	r3, sp, #9
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	42ac      	cmp	r4, r5
 8005f08:	bf88      	it	hi
 8005f0a:	2300      	movhi	r3, #0
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	4403      	add	r3, r0
 8005f10:	1a18      	subs	r0, r3, r0
 8005f12:	b003      	add	sp, #12
 8005f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f1e:	e7ed      	b.n	8005efc <__exponent+0x44>
 8005f20:	2330      	movs	r3, #48	@ 0x30
 8005f22:	3130      	adds	r1, #48	@ 0x30
 8005f24:	7083      	strb	r3, [r0, #2]
 8005f26:	70c1      	strb	r1, [r0, #3]
 8005f28:	1d03      	adds	r3, r0, #4
 8005f2a:	e7f1      	b.n	8005f10 <__exponent+0x58>

08005f2c <_printf_float>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	b091      	sub	sp, #68	@ 0x44
 8005f32:	460c      	mov	r4, r1
 8005f34:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005f38:	4616      	mov	r6, r2
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	f000 fce1 	bl	8006904 <_localeconv_r>
 8005f42:	6803      	ldr	r3, [r0, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	9308      	str	r3, [sp, #32]
 8005f48:	f7fa f902 	bl	8000150 <strlen>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f50:	f8d8 3000 	ldr.w	r3, [r8]
 8005f54:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f56:	3307      	adds	r3, #7
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	f103 0208 	add.w	r2, r3, #8
 8005f60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f64:	f8d4 b000 	ldr.w	fp, [r4]
 8005f68:	f8c8 2000 	str.w	r2, [r8]
 8005f6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f76:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f86:	4b9c      	ldr	r3, [pc, #624]	@ (80061f8 <_printf_float+0x2cc>)
 8005f88:	f7fa fd40 	bl	8000a0c <__aeabi_dcmpun>
 8005f8c:	bb70      	cbnz	r0, 8005fec <_printf_float+0xc0>
 8005f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f96:	4b98      	ldr	r3, [pc, #608]	@ (80061f8 <_printf_float+0x2cc>)
 8005f98:	f7fa fd1a 	bl	80009d0 <__aeabi_dcmple>
 8005f9c:	bb30      	cbnz	r0, 8005fec <_printf_float+0xc0>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	f7fa fd09 	bl	80009bc <__aeabi_dcmplt>
 8005faa:	b110      	cbz	r0, 8005fb2 <_printf_float+0x86>
 8005fac:	232d      	movs	r3, #45	@ 0x2d
 8005fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb2:	4a92      	ldr	r2, [pc, #584]	@ (80061fc <_printf_float+0x2d0>)
 8005fb4:	4b92      	ldr	r3, [pc, #584]	@ (8006200 <_printf_float+0x2d4>)
 8005fb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fba:	bf8c      	ite	hi
 8005fbc:	4690      	movhi	r8, r2
 8005fbe:	4698      	movls	r8, r3
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	f04f 0900 	mov.w	r9, #0
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	f02b 0304 	bic.w	r3, fp, #4
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	4633      	mov	r3, r6
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	9700      	str	r7, [sp, #0]
 8005fd6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005fd8:	f000 f9d4 	bl	8006384 <_printf_common>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f040 8090 	bne.w	8006102 <_printf_float+0x1d6>
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fe6:	b011      	add	sp, #68	@ 0x44
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	4642      	mov	r2, r8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fd0a 	bl	8000a0c <__aeabi_dcmpun>
 8005ff8:	b148      	cbz	r0, 800600e <_printf_float+0xe2>
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfb8      	it	lt
 8006000:	232d      	movlt	r3, #45	@ 0x2d
 8006002:	4a80      	ldr	r2, [pc, #512]	@ (8006204 <_printf_float+0x2d8>)
 8006004:	bfb8      	it	lt
 8006006:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800600a:	4b7f      	ldr	r3, [pc, #508]	@ (8006208 <_printf_float+0x2dc>)
 800600c:	e7d3      	b.n	8005fb6 <_printf_float+0x8a>
 800600e:	6863      	ldr	r3, [r4, #4]
 8006010:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	d13f      	bne.n	8006098 <_printf_float+0x16c>
 8006018:	2306      	movs	r3, #6
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	9206      	str	r2, [sp, #24]
 8006026:	aa0e      	add	r2, sp, #56	@ 0x38
 8006028:	e9cd a204 	strd	sl, r2, [sp, #16]
 800602c:	aa0d      	add	r2, sp, #52	@ 0x34
 800602e:	9203      	str	r2, [sp, #12]
 8006030:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006034:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	4642      	mov	r2, r8
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4628      	mov	r0, r5
 8006040:	464b      	mov	r3, r9
 8006042:	910a      	str	r1, [sp, #40]	@ 0x28
 8006044:	f7ff fed4 	bl	8005df0 <__cvt>
 8006048:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800604a:	4680      	mov	r8, r0
 800604c:	2947      	cmp	r1, #71	@ 0x47
 800604e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006050:	d128      	bne.n	80060a4 <_printf_float+0x178>
 8006052:	1cc8      	adds	r0, r1, #3
 8006054:	db02      	blt.n	800605c <_printf_float+0x130>
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	4299      	cmp	r1, r3
 800605a:	dd40      	ble.n	80060de <_printf_float+0x1b2>
 800605c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006060:	fa5f fa8a 	uxtb.w	sl, sl
 8006064:	4652      	mov	r2, sl
 8006066:	3901      	subs	r1, #1
 8006068:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800606c:	910d      	str	r1, [sp, #52]	@ 0x34
 800606e:	f7ff ff23 	bl	8005eb8 <__exponent>
 8006072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006074:	4681      	mov	r9, r0
 8006076:	1813      	adds	r3, r2, r0
 8006078:	2a01      	cmp	r2, #1
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	dc02      	bgt.n	8006084 <_printf_float+0x158>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	07d2      	lsls	r2, r2, #31
 8006082:	d501      	bpl.n	8006088 <_printf_float+0x15c>
 8006084:	3301      	adds	r3, #1
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800608c:	2b00      	cmp	r3, #0
 800608e:	d09e      	beq.n	8005fce <_printf_float+0xa2>
 8006090:	232d      	movs	r3, #45	@ 0x2d
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006096:	e79a      	b.n	8005fce <_printf_float+0xa2>
 8006098:	2947      	cmp	r1, #71	@ 0x47
 800609a:	d1bf      	bne.n	800601c <_printf_float+0xf0>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1bd      	bne.n	800601c <_printf_float+0xf0>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e7ba      	b.n	800601a <_printf_float+0xee>
 80060a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060a8:	d9dc      	bls.n	8006064 <_printf_float+0x138>
 80060aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060ae:	d118      	bne.n	80060e2 <_printf_float+0x1b6>
 80060b0:	2900      	cmp	r1, #0
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	dd0b      	ble.n	80060ce <_printf_float+0x1a2>
 80060b6:	6121      	str	r1, [r4, #16]
 80060b8:	b913      	cbnz	r3, 80060c0 <_printf_float+0x194>
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	07d0      	lsls	r0, r2, #31
 80060be:	d502      	bpl.n	80060c6 <_printf_float+0x19a>
 80060c0:	3301      	adds	r3, #1
 80060c2:	440b      	add	r3, r1
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	f04f 0900 	mov.w	r9, #0
 80060ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060cc:	e7dc      	b.n	8006088 <_printf_float+0x15c>
 80060ce:	b913      	cbnz	r3, 80060d6 <_printf_float+0x1aa>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	07d2      	lsls	r2, r2, #31
 80060d4:	d501      	bpl.n	80060da <_printf_float+0x1ae>
 80060d6:	3302      	adds	r3, #2
 80060d8:	e7f4      	b.n	80060c4 <_printf_float+0x198>
 80060da:	2301      	movs	r3, #1
 80060dc:	e7f2      	b.n	80060c4 <_printf_float+0x198>
 80060de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e4:	4299      	cmp	r1, r3
 80060e6:	db05      	blt.n	80060f4 <_printf_float+0x1c8>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	6121      	str	r1, [r4, #16]
 80060ec:	07d8      	lsls	r0, r3, #31
 80060ee:	d5ea      	bpl.n	80060c6 <_printf_float+0x19a>
 80060f0:	1c4b      	adds	r3, r1, #1
 80060f2:	e7e7      	b.n	80060c4 <_printf_float+0x198>
 80060f4:	2900      	cmp	r1, #0
 80060f6:	bfcc      	ite	gt
 80060f8:	2201      	movgt	r2, #1
 80060fa:	f1c1 0202 	rsble	r2, r1, #2
 80060fe:	4413      	add	r3, r2
 8006100:	e7e0      	b.n	80060c4 <_printf_float+0x198>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	055a      	lsls	r2, r3, #21
 8006106:	d407      	bmi.n	8006118 <_printf_float+0x1ec>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	4642      	mov	r2, r8
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	d12b      	bne.n	800616e <_printf_float+0x242>
 8006116:	e764      	b.n	8005fe2 <_printf_float+0xb6>
 8006118:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800611c:	f240 80dc 	bls.w	80062d8 <_printf_float+0x3ac>
 8006120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	f7fa fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800612c:	2800      	cmp	r0, #0
 800612e:	d033      	beq.n	8006198 <_printf_float+0x26c>
 8006130:	2301      	movs	r3, #1
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	4a35      	ldr	r2, [pc, #212]	@ (800620c <_printf_float+0x2e0>)
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f af51 	beq.w	8005fe2 <_printf_float+0xb6>
 8006140:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006144:	4543      	cmp	r3, r8
 8006146:	db02      	blt.n	800614e <_printf_float+0x222>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07d8      	lsls	r0, r3, #31
 800614c:	d50f      	bpl.n	800616e <_printf_float+0x242>
 800614e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f af42 	beq.w	8005fe2 <_printf_float+0xb6>
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	45c8      	cmp	r8, r9
 800616c:	dc09      	bgt.n	8006182 <_printf_float+0x256>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	079b      	lsls	r3, r3, #30
 8006172:	f100 8102 	bmi.w	800637a <_printf_float+0x44e>
 8006176:	68e0      	ldr	r0, [r4, #12]
 8006178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800617a:	4298      	cmp	r0, r3
 800617c:	bfb8      	it	lt
 800617e:	4618      	movlt	r0, r3
 8006180:	e731      	b.n	8005fe6 <_printf_float+0xba>
 8006182:	2301      	movs	r3, #1
 8006184:	4652      	mov	r2, sl
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f af28 	beq.w	8005fe2 <_printf_float+0xb6>
 8006192:	f109 0901 	add.w	r9, r9, #1
 8006196:	e7e8      	b.n	800616a <_printf_float+0x23e>
 8006198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800619a:	2b00      	cmp	r3, #0
 800619c:	dc38      	bgt.n	8006210 <_printf_float+0x2e4>
 800619e:	2301      	movs	r3, #1
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <_printf_float+0x2e0>)
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f af1a 	beq.w	8005fe2 <_printf_float+0xb6>
 80061ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80061b2:	ea59 0303 	orrs.w	r3, r9, r3
 80061b6:	d102      	bne.n	80061be <_printf_float+0x292>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	d5d7      	bpl.n	800616e <_printf_float+0x242>
 80061be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f af0a 	beq.w	8005fe2 <_printf_float+0xb6>
 80061ce:	f04f 0a00 	mov.w	sl, #0
 80061d2:	f104 0b1a 	add.w	fp, r4, #26
 80061d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061d8:	425b      	negs	r3, r3
 80061da:	4553      	cmp	r3, sl
 80061dc:	dc01      	bgt.n	80061e2 <_printf_float+0x2b6>
 80061de:	464b      	mov	r3, r9
 80061e0:	e793      	b.n	800610a <_printf_float+0x1de>
 80061e2:	2301      	movs	r3, #1
 80061e4:	465a      	mov	r2, fp
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f aef8 	beq.w	8005fe2 <_printf_float+0xb6>
 80061f2:	f10a 0a01 	add.w	sl, sl, #1
 80061f6:	e7ee      	b.n	80061d6 <_printf_float+0x2aa>
 80061f8:	7fefffff 	.word	0x7fefffff
 80061fc:	08009f36 	.word	0x08009f36
 8006200:	08009f32 	.word	0x08009f32
 8006204:	08009f3e 	.word	0x08009f3e
 8006208:	08009f3a 	.word	0x08009f3a
 800620c:	08009f42 	.word	0x08009f42
 8006210:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006212:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006216:	4553      	cmp	r3, sl
 8006218:	bfa8      	it	ge
 800621a:	4653      	movge	r3, sl
 800621c:	2b00      	cmp	r3, #0
 800621e:	4699      	mov	r9, r3
 8006220:	dc36      	bgt.n	8006290 <_printf_float+0x364>
 8006222:	f04f 0b00 	mov.w	fp, #0
 8006226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622a:	f104 021a 	add.w	r2, r4, #26
 800622e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006230:	930a      	str	r3, [sp, #40]	@ 0x28
 8006232:	eba3 0309 	sub.w	r3, r3, r9
 8006236:	455b      	cmp	r3, fp
 8006238:	dc31      	bgt.n	800629e <_printf_float+0x372>
 800623a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800623c:	459a      	cmp	sl, r3
 800623e:	dc3a      	bgt.n	80062b6 <_printf_float+0x38a>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	07da      	lsls	r2, r3, #31
 8006244:	d437      	bmi.n	80062b6 <_printf_float+0x38a>
 8006246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006248:	ebaa 0903 	sub.w	r9, sl, r3
 800624c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800624e:	ebaa 0303 	sub.w	r3, sl, r3
 8006252:	4599      	cmp	r9, r3
 8006254:	bfa8      	it	ge
 8006256:	4699      	movge	r9, r3
 8006258:	f1b9 0f00 	cmp.w	r9, #0
 800625c:	dc33      	bgt.n	80062c6 <_printf_float+0x39a>
 800625e:	f04f 0800 	mov.w	r8, #0
 8006262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006266:	f104 0b1a 	add.w	fp, r4, #26
 800626a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800626c:	ebaa 0303 	sub.w	r3, sl, r3
 8006270:	eba3 0309 	sub.w	r3, r3, r9
 8006274:	4543      	cmp	r3, r8
 8006276:	f77f af7a 	ble.w	800616e <_printf_float+0x242>
 800627a:	2301      	movs	r3, #1
 800627c:	465a      	mov	r2, fp
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	f43f aeac 	beq.w	8005fe2 <_printf_float+0xb6>
 800628a:	f108 0801 	add.w	r8, r8, #1
 800628e:	e7ec      	b.n	800626a <_printf_float+0x33e>
 8006290:	4642      	mov	r2, r8
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	d1c2      	bne.n	8006222 <_printf_float+0x2f6>
 800629c:	e6a1      	b.n	8005fe2 <_printf_float+0xb6>
 800629e:	2301      	movs	r3, #1
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	f43f ae9a 	beq.w	8005fe2 <_printf_float+0xb6>
 80062ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062b0:	f10b 0b01 	add.w	fp, fp, #1
 80062b4:	e7bb      	b.n	800622e <_printf_float+0x302>
 80062b6:	4631      	mov	r1, r6
 80062b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1c0      	bne.n	8006246 <_printf_float+0x31a>
 80062c4:	e68d      	b.n	8005fe2 <_printf_float+0xb6>
 80062c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062c8:	464b      	mov	r3, r9
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	4442      	add	r2, r8
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	d1c3      	bne.n	800625e <_printf_float+0x332>
 80062d6:	e684      	b.n	8005fe2 <_printf_float+0xb6>
 80062d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80062dc:	f1ba 0f01 	cmp.w	sl, #1
 80062e0:	dc01      	bgt.n	80062e6 <_printf_float+0x3ba>
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d536      	bpl.n	8006354 <_printf_float+0x428>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4642      	mov	r2, r8
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f ae76 	beq.w	8005fe2 <_printf_float+0xb6>
 80062f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae6e 	beq.w	8005fe2 <_printf_float+0xb6>
 8006306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800630a:	2200      	movs	r2, #0
 800630c:	2300      	movs	r3, #0
 800630e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006312:	f7fa fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8006316:	b9c0      	cbnz	r0, 800634a <_printf_float+0x41e>
 8006318:	4653      	mov	r3, sl
 800631a:	f108 0201 	add.w	r2, r8, #1
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d10c      	bne.n	8006342 <_printf_float+0x416>
 8006328:	e65b      	b.n	8005fe2 <_printf_float+0xb6>
 800632a:	2301      	movs	r3, #1
 800632c:	465a      	mov	r2, fp
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	f43f ae54 	beq.w	8005fe2 <_printf_float+0xb6>
 800633a:	f108 0801 	add.w	r8, r8, #1
 800633e:	45d0      	cmp	r8, sl
 8006340:	dbf3      	blt.n	800632a <_printf_float+0x3fe>
 8006342:	464b      	mov	r3, r9
 8006344:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006348:	e6e0      	b.n	800610c <_printf_float+0x1e0>
 800634a:	f04f 0800 	mov.w	r8, #0
 800634e:	f104 0b1a 	add.w	fp, r4, #26
 8006352:	e7f4      	b.n	800633e <_printf_float+0x412>
 8006354:	2301      	movs	r3, #1
 8006356:	4642      	mov	r2, r8
 8006358:	e7e1      	b.n	800631e <_printf_float+0x3f2>
 800635a:	2301      	movs	r3, #1
 800635c:	464a      	mov	r2, r9
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	47b8      	blx	r7
 8006364:	3001      	adds	r0, #1
 8006366:	f43f ae3c 	beq.w	8005fe2 <_printf_float+0xb6>
 800636a:	f108 0801 	add.w	r8, r8, #1
 800636e:	68e3      	ldr	r3, [r4, #12]
 8006370:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006372:	1a5b      	subs	r3, r3, r1
 8006374:	4543      	cmp	r3, r8
 8006376:	dcf0      	bgt.n	800635a <_printf_float+0x42e>
 8006378:	e6fd      	b.n	8006176 <_printf_float+0x24a>
 800637a:	f04f 0800 	mov.w	r8, #0
 800637e:	f104 0919 	add.w	r9, r4, #25
 8006382:	e7f4      	b.n	800636e <_printf_float+0x442>

08006384 <_printf_common>:
 8006384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	4616      	mov	r6, r2
 800638a:	4698      	mov	r8, r3
 800638c:	688a      	ldr	r2, [r1, #8]
 800638e:	690b      	ldr	r3, [r1, #16]
 8006390:	4607      	mov	r7, r0
 8006392:	4293      	cmp	r3, r2
 8006394:	bfb8      	it	lt
 8006396:	4613      	movlt	r3, r2
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800639e:	460c      	mov	r4, r1
 80063a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a4:	b10a      	cbz	r2, 80063aa <_printf_common+0x26>
 80063a6:	3301      	adds	r3, #1
 80063a8:	6033      	str	r3, [r6, #0]
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	0699      	lsls	r1, r3, #26
 80063ae:	bf42      	ittt	mi
 80063b0:	6833      	ldrmi	r3, [r6, #0]
 80063b2:	3302      	addmi	r3, #2
 80063b4:	6033      	strmi	r3, [r6, #0]
 80063b6:	6825      	ldr	r5, [r4, #0]
 80063b8:	f015 0506 	ands.w	r5, r5, #6
 80063bc:	d106      	bne.n	80063cc <_printf_common+0x48>
 80063be:	f104 0a19 	add.w	sl, r4, #25
 80063c2:	68e3      	ldr	r3, [r4, #12]
 80063c4:	6832      	ldr	r2, [r6, #0]
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	dc2b      	bgt.n	8006424 <_printf_common+0xa0>
 80063cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	3b00      	subs	r3, #0
 80063d4:	bf18      	it	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	0692      	lsls	r2, r2, #26
 80063da:	d430      	bmi.n	800643e <_printf_common+0xba>
 80063dc:	4641      	mov	r1, r8
 80063de:	4638      	mov	r0, r7
 80063e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063e4:	47c8      	blx	r9
 80063e6:	3001      	adds	r0, #1
 80063e8:	d023      	beq.n	8006432 <_printf_common+0xae>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	f003 0306 	and.w	r3, r3, #6
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	bf14      	ite	ne
 80063f6:	2500      	movne	r5, #0
 80063f8:	6833      	ldreq	r3, [r6, #0]
 80063fa:	f04f 0600 	mov.w	r6, #0
 80063fe:	bf08      	it	eq
 8006400:	68e5      	ldreq	r5, [r4, #12]
 8006402:	f104 041a 	add.w	r4, r4, #26
 8006406:	bf08      	it	eq
 8006408:	1aed      	subeq	r5, r5, r3
 800640a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800640e:	bf08      	it	eq
 8006410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006414:	4293      	cmp	r3, r2
 8006416:	bfc4      	itt	gt
 8006418:	1a9b      	subgt	r3, r3, r2
 800641a:	18ed      	addgt	r5, r5, r3
 800641c:	42b5      	cmp	r5, r6
 800641e:	d11a      	bne.n	8006456 <_printf_common+0xd2>
 8006420:	2000      	movs	r0, #0
 8006422:	e008      	b.n	8006436 <_printf_common+0xb2>
 8006424:	2301      	movs	r3, #1
 8006426:	4652      	mov	r2, sl
 8006428:	4641      	mov	r1, r8
 800642a:	4638      	mov	r0, r7
 800642c:	47c8      	blx	r9
 800642e:	3001      	adds	r0, #1
 8006430:	d103      	bne.n	800643a <_printf_common+0xb6>
 8006432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	3501      	adds	r5, #1
 800643c:	e7c1      	b.n	80063c2 <_printf_common+0x3e>
 800643e:	2030      	movs	r0, #48	@ 0x30
 8006440:	18e1      	adds	r1, r4, r3
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800644c:	4422      	add	r2, r4
 800644e:	3302      	adds	r3, #2
 8006450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006454:	e7c2      	b.n	80063dc <_printf_common+0x58>
 8006456:	2301      	movs	r3, #1
 8006458:	4622      	mov	r2, r4
 800645a:	4641      	mov	r1, r8
 800645c:	4638      	mov	r0, r7
 800645e:	47c8      	blx	r9
 8006460:	3001      	adds	r0, #1
 8006462:	d0e6      	beq.n	8006432 <_printf_common+0xae>
 8006464:	3601      	adds	r6, #1
 8006466:	e7d9      	b.n	800641c <_printf_common+0x98>

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	4691      	mov	r9, r2
 8006470:	2f78      	cmp	r7, #120	@ 0x78
 8006472:	4680      	mov	r8, r0
 8006474:	460c      	mov	r4, r1
 8006476:	469a      	mov	sl, r3
 8006478:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800647a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	@ 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d1 	beq.w	800662c <_printf_i+0x1c4>
 800648a:	2f58      	cmp	r7, #88	@ 0x58
 800648c:	f000 80b8 	beq.w	8006600 <_printf_i+0x198>
 8006490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	@ (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006613 	.word	0x08006613
 80064d8:	0800653f 	.word	0x0800653f
 80064dc:	080065cd 	.word	0x080065cd
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006635 	.word	0x08006635
 80064ec:	08006491 	.word	0x08006491
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065d5 	.word	0x080065d5
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6032      	str	r2, [r6, #0]
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e09c      	b.n	800664e <_printf_i+0x1e6>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6031      	str	r1, [r6, #0]
 800651c:	0606      	lsls	r6, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xbc>
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	e003      	b.n	800652c <_printf_i+0xc4>
 8006524:	0645      	lsls	r5, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xb8>
 8006528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800652c:	2d00      	cmp	r5, #0
 800652e:	da03      	bge.n	8006538 <_printf_i+0xd0>
 8006530:	232d      	movs	r3, #45	@ 0x2d
 8006532:	426d      	negs	r5, r5
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	230a      	movs	r3, #10
 800653a:	4858      	ldr	r0, [pc, #352]	@ (800669c <_printf_i+0x234>)
 800653c:	e011      	b.n	8006562 <_printf_i+0xfa>
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	0608      	lsls	r0, r1, #24
 8006544:	f853 5b04 	ldr.w	r5, [r3], #4
 8006548:	d402      	bmi.n	8006550 <_printf_i+0xe8>
 800654a:	0649      	lsls	r1, r1, #25
 800654c:	bf48      	it	mi
 800654e:	b2ad      	uxthmi	r5, r5
 8006550:	2f6f      	cmp	r7, #111	@ 0x6f
 8006552:	6033      	str	r3, [r6, #0]
 8006554:	bf14      	ite	ne
 8006556:	230a      	movne	r3, #10
 8006558:	2308      	moveq	r3, #8
 800655a:	4850      	ldr	r0, [pc, #320]	@ (800669c <_printf_i+0x234>)
 800655c:	2100      	movs	r1, #0
 800655e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	2e00      	cmp	r6, #0
 8006566:	60a6      	str	r6, [r4, #8]
 8006568:	db05      	blt.n	8006576 <_printf_i+0x10e>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	432e      	orrs	r6, r5
 800656e:	f021 0104 	bic.w	r1, r1, #4
 8006572:	6021      	str	r1, [r4, #0]
 8006574:	d04b      	beq.n	800660e <_printf_i+0x1a6>
 8006576:	4616      	mov	r6, r2
 8006578:	fbb5 f1f3 	udiv	r1, r5, r3
 800657c:	fb03 5711 	mls	r7, r3, r1, r5
 8006580:	5dc7      	ldrb	r7, [r0, r7]
 8006582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006586:	462f      	mov	r7, r5
 8006588:	42bb      	cmp	r3, r7
 800658a:	460d      	mov	r5, r1
 800658c:	d9f4      	bls.n	8006578 <_printf_i+0x110>
 800658e:	2b08      	cmp	r3, #8
 8006590:	d10b      	bne.n	80065aa <_printf_i+0x142>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	07df      	lsls	r7, r3, #31
 8006596:	d508      	bpl.n	80065aa <_printf_i+0x142>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	6861      	ldr	r1, [r4, #4]
 800659c:	4299      	cmp	r1, r3
 800659e:	bfde      	ittt	le
 80065a0:	2330      	movle	r3, #48	@ 0x30
 80065a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065aa:	1b92      	subs	r2, r2, r6
 80065ac:	6122      	str	r2, [r4, #16]
 80065ae:	464b      	mov	r3, r9
 80065b0:	4621      	mov	r1, r4
 80065b2:	4640      	mov	r0, r8
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	aa03      	add	r2, sp, #12
 80065ba:	f7ff fee3 	bl	8006384 <_printf_common>
 80065be:	3001      	adds	r0, #1
 80065c0:	d14a      	bne.n	8006658 <_printf_i+0x1f0>
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c6:	b004      	add	sp, #16
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	f043 0320 	orr.w	r3, r3, #32
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	2778      	movs	r7, #120	@ 0x78
 80065d6:	4832      	ldr	r0, [pc, #200]	@ (80066a0 <_printf_i+0x238>)
 80065d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	6831      	ldr	r1, [r6, #0]
 80065e0:	061f      	lsls	r7, r3, #24
 80065e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80065e6:	d402      	bmi.n	80065ee <_printf_i+0x186>
 80065e8:	065f      	lsls	r7, r3, #25
 80065ea:	bf48      	it	mi
 80065ec:	b2ad      	uxthmi	r5, r5
 80065ee:	6031      	str	r1, [r6, #0]
 80065f0:	07d9      	lsls	r1, r3, #31
 80065f2:	bf44      	itt	mi
 80065f4:	f043 0320 	orrmi.w	r3, r3, #32
 80065f8:	6023      	strmi	r3, [r4, #0]
 80065fa:	b11d      	cbz	r5, 8006604 <_printf_i+0x19c>
 80065fc:	2310      	movs	r3, #16
 80065fe:	e7ad      	b.n	800655c <_printf_i+0xf4>
 8006600:	4826      	ldr	r0, [pc, #152]	@ (800669c <_printf_i+0x234>)
 8006602:	e7e9      	b.n	80065d8 <_printf_i+0x170>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	e7f6      	b.n	80065fc <_printf_i+0x194>
 800660e:	4616      	mov	r6, r2
 8006610:	e7bd      	b.n	800658e <_printf_i+0x126>
 8006612:	6833      	ldr	r3, [r6, #0]
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	1d18      	adds	r0, r3, #4
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	6030      	str	r0, [r6, #0]
 800661c:	062e      	lsls	r6, r5, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	d501      	bpl.n	8006626 <_printf_i+0x1be>
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	e002      	b.n	800662c <_printf_i+0x1c4>
 8006626:	0668      	lsls	r0, r5, #25
 8006628:	d5fb      	bpl.n	8006622 <_printf_i+0x1ba>
 800662a:	8019      	strh	r1, [r3, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	4616      	mov	r6, r2
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	e7bc      	b.n	80065ae <_printf_i+0x146>
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	2100      	movs	r1, #0
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	6032      	str	r2, [r6, #0]
 800663c:	681e      	ldr	r6, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	4630      	mov	r0, r6
 8006642:	f000 f9d6 	bl	80069f2 <memchr>
 8006646:	b108      	cbz	r0, 800664c <_printf_i+0x1e4>
 8006648:	1b80      	subs	r0, r0, r6
 800664a:	6060      	str	r0, [r4, #4]
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	2300      	movs	r3, #0
 8006652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006656:	e7aa      	b.n	80065ae <_printf_i+0x146>
 8006658:	4632      	mov	r2, r6
 800665a:	4649      	mov	r1, r9
 800665c:	4640      	mov	r0, r8
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	47d0      	blx	sl
 8006662:	3001      	adds	r0, #1
 8006664:	d0ad      	beq.n	80065c2 <_printf_i+0x15a>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	079b      	lsls	r3, r3, #30
 800666a:	d413      	bmi.n	8006694 <_printf_i+0x22c>
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	4298      	cmp	r0, r3
 8006672:	bfb8      	it	lt
 8006674:	4618      	movlt	r0, r3
 8006676:	e7a6      	b.n	80065c6 <_printf_i+0x15e>
 8006678:	2301      	movs	r3, #1
 800667a:	4632      	mov	r2, r6
 800667c:	4649      	mov	r1, r9
 800667e:	4640      	mov	r0, r8
 8006680:	47d0      	blx	sl
 8006682:	3001      	adds	r0, #1
 8006684:	d09d      	beq.n	80065c2 <_printf_i+0x15a>
 8006686:	3501      	adds	r5, #1
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	9903      	ldr	r1, [sp, #12]
 800668c:	1a5b      	subs	r3, r3, r1
 800668e:	42ab      	cmp	r3, r5
 8006690:	dcf2      	bgt.n	8006678 <_printf_i+0x210>
 8006692:	e7eb      	b.n	800666c <_printf_i+0x204>
 8006694:	2500      	movs	r5, #0
 8006696:	f104 0619 	add.w	r6, r4, #25
 800669a:	e7f5      	b.n	8006688 <_printf_i+0x220>
 800669c:	08009f44 	.word	0x08009f44
 80066a0:	08009f55 	.word	0x08009f55

080066a4 <std>:
 80066a4:	2300      	movs	r3, #0
 80066a6:	b510      	push	{r4, lr}
 80066a8:	4604      	mov	r4, r0
 80066aa:	e9c0 3300 	strd	r3, r3, [r0]
 80066ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b2:	6083      	str	r3, [r0, #8]
 80066b4:	8181      	strh	r1, [r0, #12]
 80066b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066b8:	81c2      	strh	r2, [r0, #14]
 80066ba:	6183      	str	r3, [r0, #24]
 80066bc:	4619      	mov	r1, r3
 80066be:	2208      	movs	r2, #8
 80066c0:	305c      	adds	r0, #92	@ 0x5c
 80066c2:	f000 f916 	bl	80068f2 <memset>
 80066c6:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <std+0x58>)
 80066c8:	6224      	str	r4, [r4, #32]
 80066ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80066cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <std+0x5c>)
 80066ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <std+0x60>)
 80066d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <std+0x64>)
 80066d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80066d8:	4b0c      	ldr	r3, [pc, #48]	@ (800670c <std+0x68>)
 80066da:	429c      	cmp	r4, r3
 80066dc:	d006      	beq.n	80066ec <std+0x48>
 80066de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066e2:	4294      	cmp	r4, r2
 80066e4:	d002      	beq.n	80066ec <std+0x48>
 80066e6:	33d0      	adds	r3, #208	@ 0xd0
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d105      	bne.n	80066f8 <std+0x54>
 80066ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f4:	f000 b97a 	b.w	80069ec <__retarget_lock_init_recursive>
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	bf00      	nop
 80066fc:	0800686d 	.word	0x0800686d
 8006700:	0800688f 	.word	0x0800688f
 8006704:	080068c7 	.word	0x080068c7
 8006708:	080068eb 	.word	0x080068eb
 800670c:	20000cc4 	.word	0x20000cc4

08006710 <stdio_exit_handler>:
 8006710:	4a02      	ldr	r2, [pc, #8]	@ (800671c <stdio_exit_handler+0xc>)
 8006712:	4903      	ldr	r1, [pc, #12]	@ (8006720 <stdio_exit_handler+0x10>)
 8006714:	4803      	ldr	r0, [pc, #12]	@ (8006724 <stdio_exit_handler+0x14>)
 8006716:	f000 b869 	b.w	80067ec <_fwalk_sglue>
 800671a:	bf00      	nop
 800671c:	20000018 	.word	0x20000018
 8006720:	08008369 	.word	0x08008369
 8006724:	20000028 	.word	0x20000028

08006728 <cleanup_stdio>:
 8006728:	6841      	ldr	r1, [r0, #4]
 800672a:	4b0c      	ldr	r3, [pc, #48]	@ (800675c <cleanup_stdio+0x34>)
 800672c:	b510      	push	{r4, lr}
 800672e:	4299      	cmp	r1, r3
 8006730:	4604      	mov	r4, r0
 8006732:	d001      	beq.n	8006738 <cleanup_stdio+0x10>
 8006734:	f001 fe18 	bl	8008368 <_fflush_r>
 8006738:	68a1      	ldr	r1, [r4, #8]
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <cleanup_stdio+0x38>)
 800673c:	4299      	cmp	r1, r3
 800673e:	d002      	beq.n	8006746 <cleanup_stdio+0x1e>
 8006740:	4620      	mov	r0, r4
 8006742:	f001 fe11 	bl	8008368 <_fflush_r>
 8006746:	68e1      	ldr	r1, [r4, #12]
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <cleanup_stdio+0x3c>)
 800674a:	4299      	cmp	r1, r3
 800674c:	d004      	beq.n	8006758 <cleanup_stdio+0x30>
 800674e:	4620      	mov	r0, r4
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f001 be08 	b.w	8008368 <_fflush_r>
 8006758:	bd10      	pop	{r4, pc}
 800675a:	bf00      	nop
 800675c:	20000cc4 	.word	0x20000cc4
 8006760:	20000d2c 	.word	0x20000d2c
 8006764:	20000d94 	.word	0x20000d94

08006768 <global_stdio_init.part.0>:
 8006768:	b510      	push	{r4, lr}
 800676a:	4b0b      	ldr	r3, [pc, #44]	@ (8006798 <global_stdio_init.part.0+0x30>)
 800676c:	4c0b      	ldr	r4, [pc, #44]	@ (800679c <global_stdio_init.part.0+0x34>)
 800676e:	4a0c      	ldr	r2, [pc, #48]	@ (80067a0 <global_stdio_init.part.0+0x38>)
 8006770:	4620      	mov	r0, r4
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	2104      	movs	r1, #4
 8006776:	2200      	movs	r2, #0
 8006778:	f7ff ff94 	bl	80066a4 <std>
 800677c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006780:	2201      	movs	r2, #1
 8006782:	2109      	movs	r1, #9
 8006784:	f7ff ff8e 	bl	80066a4 <std>
 8006788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800678c:	2202      	movs	r2, #2
 800678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006792:	2112      	movs	r1, #18
 8006794:	f7ff bf86 	b.w	80066a4 <std>
 8006798:	20000dfc 	.word	0x20000dfc
 800679c:	20000cc4 	.word	0x20000cc4
 80067a0:	08006711 	.word	0x08006711

080067a4 <__sfp_lock_acquire>:
 80067a4:	4801      	ldr	r0, [pc, #4]	@ (80067ac <__sfp_lock_acquire+0x8>)
 80067a6:	f000 b922 	b.w	80069ee <__retarget_lock_acquire_recursive>
 80067aa:	bf00      	nop
 80067ac:	20000e05 	.word	0x20000e05

080067b0 <__sfp_lock_release>:
 80067b0:	4801      	ldr	r0, [pc, #4]	@ (80067b8 <__sfp_lock_release+0x8>)
 80067b2:	f000 b91d 	b.w	80069f0 <__retarget_lock_release_recursive>
 80067b6:	bf00      	nop
 80067b8:	20000e05 	.word	0x20000e05

080067bc <__sinit>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	4604      	mov	r4, r0
 80067c0:	f7ff fff0 	bl	80067a4 <__sfp_lock_acquire>
 80067c4:	6a23      	ldr	r3, [r4, #32]
 80067c6:	b11b      	cbz	r3, 80067d0 <__sinit+0x14>
 80067c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067cc:	f7ff bff0 	b.w	80067b0 <__sfp_lock_release>
 80067d0:	4b04      	ldr	r3, [pc, #16]	@ (80067e4 <__sinit+0x28>)
 80067d2:	6223      	str	r3, [r4, #32]
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <__sinit+0x2c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f5      	bne.n	80067c8 <__sinit+0xc>
 80067dc:	f7ff ffc4 	bl	8006768 <global_stdio_init.part.0>
 80067e0:	e7f2      	b.n	80067c8 <__sinit+0xc>
 80067e2:	bf00      	nop
 80067e4:	08006729 	.word	0x08006729
 80067e8:	20000dfc 	.word	0x20000dfc

080067ec <_fwalk_sglue>:
 80067ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f0:	4607      	mov	r7, r0
 80067f2:	4688      	mov	r8, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	2600      	movs	r6, #0
 80067f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006800:	d505      	bpl.n	800680e <_fwalk_sglue+0x22>
 8006802:	6824      	ldr	r4, [r4, #0]
 8006804:	2c00      	cmp	r4, #0
 8006806:	d1f7      	bne.n	80067f8 <_fwalk_sglue+0xc>
 8006808:	4630      	mov	r0, r6
 800680a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d907      	bls.n	8006824 <_fwalk_sglue+0x38>
 8006814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006818:	3301      	adds	r3, #1
 800681a:	d003      	beq.n	8006824 <_fwalk_sglue+0x38>
 800681c:	4629      	mov	r1, r5
 800681e:	4638      	mov	r0, r7
 8006820:	47c0      	blx	r8
 8006822:	4306      	orrs	r6, r0
 8006824:	3568      	adds	r5, #104	@ 0x68
 8006826:	e7e9      	b.n	80067fc <_fwalk_sglue+0x10>

08006828 <siprintf>:
 8006828:	b40e      	push	{r1, r2, r3}
 800682a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800682e:	b510      	push	{r4, lr}
 8006830:	2400      	movs	r4, #0
 8006832:	b09d      	sub	sp, #116	@ 0x74
 8006834:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006836:	9002      	str	r0, [sp, #8]
 8006838:	9006      	str	r0, [sp, #24]
 800683a:	9107      	str	r1, [sp, #28]
 800683c:	9104      	str	r1, [sp, #16]
 800683e:	4809      	ldr	r0, [pc, #36]	@ (8006864 <siprintf+0x3c>)
 8006840:	4909      	ldr	r1, [pc, #36]	@ (8006868 <siprintf+0x40>)
 8006842:	f853 2b04 	ldr.w	r2, [r3], #4
 8006846:	9105      	str	r1, [sp, #20]
 8006848:	6800      	ldr	r0, [r0, #0]
 800684a:	a902      	add	r1, sp, #8
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006850:	f001 fc0e 	bl	8008070 <_svfiprintf_r>
 8006854:	9b02      	ldr	r3, [sp, #8]
 8006856:	701c      	strb	r4, [r3, #0]
 8006858:	b01d      	add	sp, #116	@ 0x74
 800685a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685e:	b003      	add	sp, #12
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000024 	.word	0x20000024
 8006868:	ffff0208 	.word	0xffff0208

0800686c <__sread>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	f000 f86c 	bl	8006950 <_read_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	bfab      	itete	ge
 800687c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800687e:	89a3      	ldrhlt	r3, [r4, #12]
 8006880:	181b      	addge	r3, r3, r0
 8006882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006886:	bfac      	ite	ge
 8006888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800688a:	81a3      	strhlt	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__swrite>:
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	461f      	mov	r7, r3
 8006894:	898b      	ldrh	r3, [r1, #12]
 8006896:	4605      	mov	r5, r0
 8006898:	05db      	lsls	r3, r3, #23
 800689a:	460c      	mov	r4, r1
 800689c:	4616      	mov	r6, r2
 800689e:	d505      	bpl.n	80068ac <__swrite+0x1e>
 80068a0:	2302      	movs	r3, #2
 80068a2:	2200      	movs	r2, #0
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	f000 f840 	bl	800692c <_lseek_r>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	4632      	mov	r2, r6
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	4628      	mov	r0, r5
 80068b8:	463b      	mov	r3, r7
 80068ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	f000 b857 	b.w	8006974 <_write_r>

080068c6 <__sseek>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 f82d 	bl	800692c <_lseek_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	bf15      	itete	ne
 80068d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068e2:	81a3      	strheq	r3, [r4, #12]
 80068e4:	bf18      	it	ne
 80068e6:	81a3      	strhne	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__sclose>:
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 b80d 	b.w	800690c <_close_r>

080068f2 <memset>:
 80068f2:	4603      	mov	r3, r0
 80068f4:	4402      	add	r2, r0
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d100      	bne.n	80068fc <memset+0xa>
 80068fa:	4770      	bx	lr
 80068fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006900:	e7f9      	b.n	80068f6 <memset+0x4>
	...

08006904 <_localeconv_r>:
 8006904:	4800      	ldr	r0, [pc, #0]	@ (8006908 <_localeconv_r+0x4>)
 8006906:	4770      	bx	lr
 8006908:	20000164 	.word	0x20000164

0800690c <_close_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	2300      	movs	r3, #0
 8006910:	4d05      	ldr	r5, [pc, #20]	@ (8006928 <_close_r+0x1c>)
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	f7fb fb23 	bl	8001f62 <_close>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_close_r+0x1a>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_close_r+0x1a>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000e00 	.word	0x20000e00

0800692c <_lseek_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	2200      	movs	r2, #0
 8006936:	4d05      	ldr	r5, [pc, #20]	@ (800694c <_lseek_r+0x20>)
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fb fb35 	bl	8001faa <_lseek>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_lseek_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_lseek_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000e00 	.word	0x20000e00

08006950 <_read_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4604      	mov	r4, r0
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	2200      	movs	r2, #0
 800695a:	4d05      	ldr	r5, [pc, #20]	@ (8006970 <_read_r+0x20>)
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f7fb fac6 	bl	8001ef0 <_read>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_read_r+0x1e>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_read_r+0x1e>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000e00 	.word	0x20000e00

08006974 <_write_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	4611      	mov	r1, r2
 800697c:	2200      	movs	r2, #0
 800697e:	4d05      	ldr	r5, [pc, #20]	@ (8006994 <_write_r+0x20>)
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fb fad1 	bl	8001f2a <_write>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_write_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_write_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000e00 	.word	0x20000e00

08006998 <__errno>:
 8006998:	4b01      	ldr	r3, [pc, #4]	@ (80069a0 <__errno+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20000024 	.word	0x20000024

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	2600      	movs	r6, #0
 80069a8:	4d0c      	ldr	r5, [pc, #48]	@ (80069dc <__libc_init_array+0x38>)
 80069aa:	4c0d      	ldr	r4, [pc, #52]	@ (80069e0 <__libc_init_array+0x3c>)
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	f002 f874 	bl	8008aa0 <_init>
 80069b8:	2600      	movs	r6, #0
 80069ba:	4d0a      	ldr	r5, [pc, #40]	@ (80069e4 <__libc_init_array+0x40>)
 80069bc:	4c0a      	ldr	r4, [pc, #40]	@ (80069e8 <__libc_init_array+0x44>)
 80069be:	1b64      	subs	r4, r4, r5
 80069c0:	10a4      	asrs	r4, r4, #2
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	0800a2ac 	.word	0x0800a2ac
 80069e0:	0800a2ac 	.word	0x0800a2ac
 80069e4:	0800a2ac 	.word	0x0800a2ac
 80069e8:	0800a2b0 	.word	0x0800a2b0

080069ec <__retarget_lock_init_recursive>:
 80069ec:	4770      	bx	lr

080069ee <__retarget_lock_acquire_recursive>:
 80069ee:	4770      	bx	lr

080069f0 <__retarget_lock_release_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <memchr>:
 80069f2:	4603      	mov	r3, r0
 80069f4:	b510      	push	{r4, lr}
 80069f6:	b2c9      	uxtb	r1, r1
 80069f8:	4402      	add	r2, r0
 80069fa:	4293      	cmp	r3, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	d101      	bne.n	8006a04 <memchr+0x12>
 8006a00:	2000      	movs	r0, #0
 8006a02:	e003      	b.n	8006a0c <memchr+0x1a>
 8006a04:	7804      	ldrb	r4, [r0, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	428c      	cmp	r4, r1
 8006a0a:	d1f6      	bne.n	80069fa <memchr+0x8>
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <quorem>:
 8006a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a12:	6903      	ldr	r3, [r0, #16]
 8006a14:	690c      	ldr	r4, [r1, #16]
 8006a16:	4607      	mov	r7, r0
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	db7e      	blt.n	8006b1a <quorem+0x10c>
 8006a1c:	3c01      	subs	r4, #1
 8006a1e:	00a3      	lsls	r3, r4, #2
 8006a20:	f100 0514 	add.w	r5, r0, #20
 8006a24:	f101 0814 	add.w	r8, r1, #20
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a44:	d32e      	bcc.n	8006aa4 <quorem+0x96>
 8006a46:	f04f 0a00 	mov.w	sl, #0
 8006a4a:	46c4      	mov	ip, r8
 8006a4c:	46ae      	mov	lr, r5
 8006a4e:	46d3      	mov	fp, sl
 8006a50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a54:	b298      	uxth	r0, r3
 8006a56:	fb06 a000 	mla	r0, r6, r0, sl
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	0c02      	lsrs	r2, r0, #16
 8006a5e:	fb06 2303 	mla	r3, r6, r3, r2
 8006a62:	f8de 2000 	ldr.w	r2, [lr]
 8006a66:	b280      	uxth	r0, r0
 8006a68:	b292      	uxth	r2, r2
 8006a6a:	1a12      	subs	r2, r2, r0
 8006a6c:	445a      	add	r2, fp
 8006a6e:	f8de 0000 	ldr.w	r0, [lr]
 8006a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a80:	b292      	uxth	r2, r2
 8006a82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a86:	45e1      	cmp	r9, ip
 8006a88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a90:	d2de      	bcs.n	8006a50 <quorem+0x42>
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	58eb      	ldr	r3, [r5, r3]
 8006a96:	b92b      	cbnz	r3, 8006aa4 <quorem+0x96>
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	3b04      	subs	r3, #4
 8006a9c:	429d      	cmp	r5, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	d32f      	bcc.n	8006b02 <quorem+0xf4>
 8006aa2:	613c      	str	r4, [r7, #16]
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	f001 f97f 	bl	8007da8 <__mcmp>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	db25      	blt.n	8006afa <quorem+0xec>
 8006aae:	4629      	mov	r1, r5
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ab6:	f8d1 c000 	ldr.w	ip, [r1]
 8006aba:	fa1f fe82 	uxth.w	lr, r2
 8006abe:	fa1f f38c 	uxth.w	r3, ip
 8006ac2:	eba3 030e 	sub.w	r3, r3, lr
 8006ac6:	4403      	add	r3, r0
 8006ac8:	0c12      	lsrs	r2, r2, #16
 8006aca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ace:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad8:	45c1      	cmp	r9, r8
 8006ada:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ade:	f841 3b04 	str.w	r3, [r1], #4
 8006ae2:	d2e6      	bcs.n	8006ab2 <quorem+0xa4>
 8006ae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aec:	b922      	cbnz	r2, 8006af8 <quorem+0xea>
 8006aee:	3b04      	subs	r3, #4
 8006af0:	429d      	cmp	r5, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	d30b      	bcc.n	8006b0e <quorem+0x100>
 8006af6:	613c      	str	r4, [r7, #16]
 8006af8:	3601      	adds	r6, #1
 8006afa:	4630      	mov	r0, r6
 8006afc:	b003      	add	sp, #12
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	3b04      	subs	r3, #4
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d1cb      	bne.n	8006aa2 <quorem+0x94>
 8006b0a:	3c01      	subs	r4, #1
 8006b0c:	e7c6      	b.n	8006a9c <quorem+0x8e>
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1ef      	bne.n	8006af6 <quorem+0xe8>
 8006b16:	3c01      	subs	r4, #1
 8006b18:	e7ea      	b.n	8006af0 <quorem+0xe2>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e7ee      	b.n	8006afc <quorem+0xee>
	...

08006b20 <_dtoa_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4614      	mov	r4, r2
 8006b26:	461d      	mov	r5, r3
 8006b28:	69c7      	ldr	r7, [r0, #28]
 8006b2a:	b097      	sub	sp, #92	@ 0x5c
 8006b2c:	4681      	mov	r9, r0
 8006b2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006b34:	b97f      	cbnz	r7, 8006b56 <_dtoa_r+0x36>
 8006b36:	2010      	movs	r0, #16
 8006b38:	f000 fe0e 	bl	8007758 <malloc>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006b42:	b920      	cbnz	r0, 8006b4e <_dtoa_r+0x2e>
 8006b44:	21ef      	movs	r1, #239	@ 0xef
 8006b46:	4bac      	ldr	r3, [pc, #688]	@ (8006df8 <_dtoa_r+0x2d8>)
 8006b48:	48ac      	ldr	r0, [pc, #688]	@ (8006dfc <_dtoa_r+0x2dc>)
 8006b4a:	f001 fc6d 	bl	8008428 <__assert_func>
 8006b4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b52:	6007      	str	r7, [r0, #0]
 8006b54:	60c7      	str	r7, [r0, #12]
 8006b56:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b5a:	6819      	ldr	r1, [r3, #0]
 8006b5c:	b159      	cbz	r1, 8006b76 <_dtoa_r+0x56>
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	2301      	movs	r3, #1
 8006b62:	4093      	lsls	r3, r2
 8006b64:	604a      	str	r2, [r1, #4]
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	4648      	mov	r0, r9
 8006b6a:	f000 feeb 	bl	8007944 <_Bfree>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	1e2b      	subs	r3, r5, #0
 8006b78:	bfaf      	iteee	ge
 8006b7a:	2300      	movge	r3, #0
 8006b7c:	2201      	movlt	r2, #1
 8006b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b82:	9307      	strlt	r3, [sp, #28]
 8006b84:	bfa8      	it	ge
 8006b86:	6033      	strge	r3, [r6, #0]
 8006b88:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8006e00 <_dtoa_r+0x2e0>)
 8006b8e:	bfb8      	it	lt
 8006b90:	6032      	strlt	r2, [r6, #0]
 8006b92:	ea33 0308 	bics.w	r3, r3, r8
 8006b96:	d112      	bne.n	8006bbe <_dtoa_r+0x9e>
 8006b98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ba4:	4323      	orrs	r3, r4
 8006ba6:	f000 855e 	beq.w	8007666 <_dtoa_r+0xb46>
 8006baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e04 <_dtoa_r+0x2e4>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8560 	beq.w	8007676 <_dtoa_r+0xb56>
 8006bb6:	f10a 0303 	add.w	r3, sl, #3
 8006bba:	f000 bd5a 	b.w	8007672 <_dtoa_r+0xb52>
 8006bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f7f9 feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	b158      	cbz	r0, 8006bee <_dtoa_r+0xce>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bde:	b113      	cbz	r3, 8006be6 <_dtoa_r+0xc6>
 8006be0:	4b89      	ldr	r3, [pc, #548]	@ (8006e08 <_dtoa_r+0x2e8>)
 8006be2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006e0c <_dtoa_r+0x2ec>
 8006bea:	f000 bd44 	b.w	8007676 <_dtoa_r+0xb56>
 8006bee:	ab14      	add	r3, sp, #80	@ 0x50
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	ab15      	add	r3, sp, #84	@ 0x54
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006bfc:	f001 f984 	bl	8007f08 <__d2b>
 8006c00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006c04:	9003      	str	r0, [sp, #12]
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	d078      	beq.n	8006cfc <_dtoa_r+0x1dc>
 8006c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c20:	9712      	str	r7, [sp, #72]	@ 0x48
 8006c22:	4619      	mov	r1, r3
 8006c24:	2200      	movs	r2, #0
 8006c26:	4b7a      	ldr	r3, [pc, #488]	@ (8006e10 <_dtoa_r+0x2f0>)
 8006c28:	f7f9 fa9e 	bl	8000168 <__aeabi_dsub>
 8006c2c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006de0 <_dtoa_r+0x2c0>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fc51 	bl	80004d8 <__aeabi_dmul>
 8006c36:	a36c      	add	r3, pc, #432	@ (adr r3, 8006de8 <_dtoa_r+0x2c8>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fa96 	bl	800016c <__adddf3>
 8006c40:	4604      	mov	r4, r0
 8006c42:	4630      	mov	r0, r6
 8006c44:	460d      	mov	r5, r1
 8006c46:	f7f9 fbdd 	bl	8000404 <__aeabi_i2d>
 8006c4a:	a369      	add	r3, pc, #420	@ (adr r3, 8006df0 <_dtoa_r+0x2d0>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fc42 	bl	80004d8 <__aeabi_dmul>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4620      	mov	r0, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	f7f9 fa86 	bl	800016c <__adddf3>
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	f7f9 fee8 	bl	8000a38 <__aeabi_d2iz>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4607      	mov	r7, r0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 fea3 	bl	80009bc <__aeabi_dcmplt>
 8006c76:	b140      	cbz	r0, 8006c8a <_dtoa_r+0x16a>
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7f9 fbc3 	bl	8000404 <__aeabi_i2d>
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	f7f9 fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8006c86:	b900      	cbnz	r0, 8006c8a <_dtoa_r+0x16a>
 8006c88:	3f01      	subs	r7, #1
 8006c8a:	2f16      	cmp	r7, #22
 8006c8c:	d854      	bhi.n	8006d38 <_dtoa_r+0x218>
 8006c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c92:	4b60      	ldr	r3, [pc, #384]	@ (8006e14 <_dtoa_r+0x2f4>)
 8006c94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fe8e 	bl	80009bc <__aeabi_dcmplt>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d04b      	beq.n	8006d3c <_dtoa_r+0x21c>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	3f01      	subs	r7, #1
 8006ca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006caa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cac:	1b9b      	subs	r3, r3, r6
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	bf49      	itett	mi
 8006cb2:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cb6:	2300      	movpl	r3, #0
 8006cb8:	9304      	strmi	r3, [sp, #16]
 8006cba:	2300      	movmi	r3, #0
 8006cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cbe:	bf54      	ite	pl
 8006cc0:	9304      	strpl	r3, [sp, #16]
 8006cc2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006cc4:	2f00      	cmp	r7, #0
 8006cc6:	db3b      	blt.n	8006d40 <_dtoa_r+0x220>
 8006cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cca:	970e      	str	r7, [sp, #56]	@ 0x38
 8006ccc:	443b      	add	r3, r7
 8006cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d865      	bhi.n	8006da6 <_dtoa_r+0x286>
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	bfc4      	itt	gt
 8006cde:	3b04      	subgt	r3, #4
 8006ce0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ce4:	bfc8      	it	gt
 8006ce6:	2400      	movgt	r4, #0
 8006ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8006cec:	bfd8      	it	le
 8006cee:	2401      	movle	r4, #1
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d864      	bhi.n	8006dbe <_dtoa_r+0x29e>
 8006cf4:	e8df f003 	tbb	[pc, r3]
 8006cf8:	2c385553 	.word	0x2c385553
 8006cfc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d00:	441e      	add	r6, r3
 8006d02:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	bfc1      	itttt	gt
 8006d0a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d0e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d1a:	bfd6      	itet	le
 8006d1c:	f1c3 0320 	rsble	r3, r3, #32
 8006d20:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d24:	fa04 f003 	lslle.w	r0, r4, r3
 8006d28:	f7f9 fb5c 	bl	80003e4 <__aeabi_ui2d>
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d32:	3e01      	subs	r6, #1
 8006d34:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d36:	e774      	b.n	8006c22 <_dtoa_r+0x102>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7b5      	b.n	8006ca8 <_dtoa_r+0x188>
 8006d3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006d3e:	e7b4      	b.n	8006caa <_dtoa_r+0x18a>
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	1bdb      	subs	r3, r3, r7
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	427b      	negs	r3, r7
 8006d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d4e:	e7c1      	b.n	8006cd4 <_dtoa_r+0x1b4>
 8006d50:	2301      	movs	r3, #1
 8006d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d56:	eb07 0b03 	add.w	fp, r7, r3
 8006d5a:	f10b 0301 	add.w	r3, fp, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	9308      	str	r3, [sp, #32]
 8006d62:	bfb8      	it	lt
 8006d64:	2301      	movlt	r3, #1
 8006d66:	e006      	b.n	8006d76 <_dtoa_r+0x256>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dd28      	ble.n	8006dc4 <_dtoa_r+0x2a4>
 8006d72:	469b      	mov	fp, r3
 8006d74:	9308      	str	r3, [sp, #32]
 8006d76:	2100      	movs	r1, #0
 8006d78:	2204      	movs	r2, #4
 8006d7a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006d7e:	f102 0514 	add.w	r5, r2, #20
 8006d82:	429d      	cmp	r5, r3
 8006d84:	d926      	bls.n	8006dd4 <_dtoa_r+0x2b4>
 8006d86:	6041      	str	r1, [r0, #4]
 8006d88:	4648      	mov	r0, r9
 8006d8a:	f000 fd9b 	bl	80078c4 <_Balloc>
 8006d8e:	4682      	mov	sl, r0
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d143      	bne.n	8006e1c <_dtoa_r+0x2fc>
 8006d94:	4602      	mov	r2, r0
 8006d96:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e18 <_dtoa_r+0x2f8>)
 8006d9c:	e6d4      	b.n	8006b48 <_dtoa_r+0x28>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e7e3      	b.n	8006d6a <_dtoa_r+0x24a>
 8006da2:	2300      	movs	r3, #0
 8006da4:	e7d5      	b.n	8006d52 <_dtoa_r+0x232>
 8006da6:	2401      	movs	r4, #1
 8006da8:	2300      	movs	r3, #0
 8006daa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006dac:	9320      	str	r3, [sp, #128]	@ 0x80
 8006dae:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006db2:	2200      	movs	r2, #0
 8006db4:	2312      	movs	r3, #18
 8006db6:	f8cd b020 	str.w	fp, [sp, #32]
 8006dba:	9221      	str	r2, [sp, #132]	@ 0x84
 8006dbc:	e7db      	b.n	8006d76 <_dtoa_r+0x256>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dc2:	e7f4      	b.n	8006dae <_dtoa_r+0x28e>
 8006dc4:	f04f 0b01 	mov.w	fp, #1
 8006dc8:	465b      	mov	r3, fp
 8006dca:	f8cd b020 	str.w	fp, [sp, #32]
 8006dce:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006dd2:	e7d0      	b.n	8006d76 <_dtoa_r+0x256>
 8006dd4:	3101      	adds	r1, #1
 8006dd6:	0052      	lsls	r2, r2, #1
 8006dd8:	e7d1      	b.n	8006d7e <_dtoa_r+0x25e>
 8006dda:	bf00      	nop
 8006ddc:	f3af 8000 	nop.w
 8006de0:	636f4361 	.word	0x636f4361
 8006de4:	3fd287a7 	.word	0x3fd287a7
 8006de8:	8b60c8b3 	.word	0x8b60c8b3
 8006dec:	3fc68a28 	.word	0x3fc68a28
 8006df0:	509f79fb 	.word	0x509f79fb
 8006df4:	3fd34413 	.word	0x3fd34413
 8006df8:	08009f73 	.word	0x08009f73
 8006dfc:	08009f8a 	.word	0x08009f8a
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	08009f6f 	.word	0x08009f6f
 8006e08:	08009f43 	.word	0x08009f43
 8006e0c:	08009f42 	.word	0x08009f42
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	0800a0d8 	.word	0x0800a0d8
 8006e18:	08009fe2 	.word	0x08009fe2
 8006e1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e20:	6018      	str	r0, [r3, #0]
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	2b0e      	cmp	r3, #14
 8006e26:	f200 80a1 	bhi.w	8006f6c <_dtoa_r+0x44c>
 8006e2a:	2c00      	cmp	r4, #0
 8006e2c:	f000 809e 	beq.w	8006f6c <_dtoa_r+0x44c>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	dd33      	ble.n	8006e9c <_dtoa_r+0x37c>
 8006e34:	4b9c      	ldr	r3, [pc, #624]	@ (80070a8 <_dtoa_r+0x588>)
 8006e36:	f007 020f 	and.w	r2, r7, #15
 8006e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e3e:	05f8      	lsls	r0, r7, #23
 8006e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e44:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e4c:	d516      	bpl.n	8006e7c <_dtoa_r+0x35c>
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e52:	4b96      	ldr	r3, [pc, #600]	@ (80070ac <_dtoa_r+0x58c>)
 8006e54:	2603      	movs	r6, #3
 8006e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e5a:	f7f9 fc67 	bl	800072c <__aeabi_ddiv>
 8006e5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e62:	f004 040f 	and.w	r4, r4, #15
 8006e66:	4d91      	ldr	r5, [pc, #580]	@ (80070ac <_dtoa_r+0x58c>)
 8006e68:	b954      	cbnz	r4, 8006e80 <_dtoa_r+0x360>
 8006e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e72:	f7f9 fc5b 	bl	800072c <__aeabi_ddiv>
 8006e76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e7a:	e028      	b.n	8006ece <_dtoa_r+0x3ae>
 8006e7c:	2602      	movs	r6, #2
 8006e7e:	e7f2      	b.n	8006e66 <_dtoa_r+0x346>
 8006e80:	07e1      	lsls	r1, r4, #31
 8006e82:	d508      	bpl.n	8006e96 <_dtoa_r+0x376>
 8006e84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e8c:	f7f9 fb24 	bl	80004d8 <__aeabi_dmul>
 8006e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e94:	3601      	adds	r6, #1
 8006e96:	1064      	asrs	r4, r4, #1
 8006e98:	3508      	adds	r5, #8
 8006e9a:	e7e5      	b.n	8006e68 <_dtoa_r+0x348>
 8006e9c:	f000 80af 	beq.w	8006ffe <_dtoa_r+0x4de>
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ea4:	427c      	negs	r4, r7
 8006ea6:	4b80      	ldr	r3, [pc, #512]	@ (80070a8 <_dtoa_r+0x588>)
 8006ea8:	f004 020f 	and.w	r2, r4, #15
 8006eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 fb10 	bl	80004d8 <__aeabi_dmul>
 8006eb8:	2602      	movs	r6, #2
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ec0:	4d7a      	ldr	r5, [pc, #488]	@ (80070ac <_dtoa_r+0x58c>)
 8006ec2:	1124      	asrs	r4, r4, #4
 8006ec4:	2c00      	cmp	r4, #0
 8006ec6:	f040 808f 	bne.w	8006fe8 <_dtoa_r+0x4c8>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1d3      	bne.n	8006e76 <_dtoa_r+0x356>
 8006ece:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006ed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8094 	beq.w	8007002 <_dtoa_r+0x4e2>
 8006eda:	2200      	movs	r2, #0
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4b73      	ldr	r3, [pc, #460]	@ (80070b0 <_dtoa_r+0x590>)
 8006ee2:	f7f9 fd6b 	bl	80009bc <__aeabi_dcmplt>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f000 808b 	beq.w	8007002 <_dtoa_r+0x4e2>
 8006eec:	9b08      	ldr	r3, [sp, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 8087 	beq.w	8007002 <_dtoa_r+0x4e2>
 8006ef4:	f1bb 0f00 	cmp.w	fp, #0
 8006ef8:	dd34      	ble.n	8006f64 <_dtoa_r+0x444>
 8006efa:	4620      	mov	r0, r4
 8006efc:	2200      	movs	r2, #0
 8006efe:	4629      	mov	r1, r5
 8006f00:	4b6c      	ldr	r3, [pc, #432]	@ (80070b4 <_dtoa_r+0x594>)
 8006f02:	f7f9 fae9 	bl	80004d8 <__aeabi_dmul>
 8006f06:	465c      	mov	r4, fp
 8006f08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f0c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006f10:	3601      	adds	r6, #1
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7f9 fa76 	bl	8000404 <__aeabi_i2d>
 8006f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f1c:	f7f9 fadc 	bl	80004d8 <__aeabi_dmul>
 8006f20:	2200      	movs	r2, #0
 8006f22:	4b65      	ldr	r3, [pc, #404]	@ (80070b8 <_dtoa_r+0x598>)
 8006f24:	f7f9 f922 	bl	800016c <__adddf3>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f2e:	2c00      	cmp	r4, #0
 8006f30:	d16a      	bne.n	8007008 <_dtoa_r+0x4e8>
 8006f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f36:	2200      	movs	r2, #0
 8006f38:	4b60      	ldr	r3, [pc, #384]	@ (80070bc <_dtoa_r+0x59c>)
 8006f3a:	f7f9 f915 	bl	8000168 <__aeabi_dsub>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f46:	462a      	mov	r2, r5
 8006f48:	4633      	mov	r3, r6
 8006f4a:	f7f9 fd55 	bl	80009f8 <__aeabi_dcmpgt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f040 8298 	bne.w	8007484 <_dtoa_r+0x964>
 8006f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f58:	462a      	mov	r2, r5
 8006f5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f5e:	f7f9 fd2d 	bl	80009bc <__aeabi_dcmplt>
 8006f62:	bb38      	cbnz	r0, 8006fb4 <_dtoa_r+0x494>
 8006f64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f68:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f2c0 8157 	blt.w	8007222 <_dtoa_r+0x702>
 8006f74:	2f0e      	cmp	r7, #14
 8006f76:	f300 8154 	bgt.w	8007222 <_dtoa_r+0x702>
 8006f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80070a8 <_dtoa_r+0x588>)
 8006f7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f84:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f280 80e5 	bge.w	800715a <_dtoa_r+0x63a>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f300 80e1 	bgt.w	800715a <_dtoa_r+0x63a>
 8006f98:	d10c      	bne.n	8006fb4 <_dtoa_r+0x494>
 8006f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b46      	ldr	r3, [pc, #280]	@ (80070bc <_dtoa_r+0x59c>)
 8006fa2:	f7f9 fa99 	bl	80004d8 <__aeabi_dmul>
 8006fa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006faa:	f7f9 fd1b 	bl	80009e4 <__aeabi_dcmpge>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f000 8266 	beq.w	8007480 <_dtoa_r+0x960>
 8006fb4:	2400      	movs	r4, #0
 8006fb6:	4625      	mov	r5, r4
 8006fb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fba:	4656      	mov	r6, sl
 8006fbc:	ea6f 0803 	mvn.w	r8, r3
 8006fc0:	2700      	movs	r7, #0
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4648      	mov	r0, r9
 8006fc6:	f000 fcbd 	bl	8007944 <_Bfree>
 8006fca:	2d00      	cmp	r5, #0
 8006fcc:	f000 80bd 	beq.w	800714a <_dtoa_r+0x62a>
 8006fd0:	b12f      	cbz	r7, 8006fde <_dtoa_r+0x4be>
 8006fd2:	42af      	cmp	r7, r5
 8006fd4:	d003      	beq.n	8006fde <_dtoa_r+0x4be>
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f000 fcb3 	bl	8007944 <_Bfree>
 8006fde:	4629      	mov	r1, r5
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f000 fcaf 	bl	8007944 <_Bfree>
 8006fe6:	e0b0      	b.n	800714a <_dtoa_r+0x62a>
 8006fe8:	07e2      	lsls	r2, r4, #31
 8006fea:	d505      	bpl.n	8006ff8 <_dtoa_r+0x4d8>
 8006fec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ff0:	f7f9 fa72 	bl	80004d8 <__aeabi_dmul>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	1064      	asrs	r4, r4, #1
 8006ffa:	3508      	adds	r5, #8
 8006ffc:	e762      	b.n	8006ec4 <_dtoa_r+0x3a4>
 8006ffe:	2602      	movs	r6, #2
 8007000:	e765      	b.n	8006ece <_dtoa_r+0x3ae>
 8007002:	46b8      	mov	r8, r7
 8007004:	9c08      	ldr	r4, [sp, #32]
 8007006:	e784      	b.n	8006f12 <_dtoa_r+0x3f2>
 8007008:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <_dtoa_r+0x588>)
 800700a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800700c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007014:	4454      	add	r4, sl
 8007016:	2900      	cmp	r1, #0
 8007018:	d054      	beq.n	80070c4 <_dtoa_r+0x5a4>
 800701a:	2000      	movs	r0, #0
 800701c:	4928      	ldr	r1, [pc, #160]	@ (80070c0 <_dtoa_r+0x5a0>)
 800701e:	f7f9 fb85 	bl	800072c <__aeabi_ddiv>
 8007022:	4633      	mov	r3, r6
 8007024:	462a      	mov	r2, r5
 8007026:	f7f9 f89f 	bl	8000168 <__aeabi_dsub>
 800702a:	4656      	mov	r6, sl
 800702c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007034:	f7f9 fd00 	bl	8000a38 <__aeabi_d2iz>
 8007038:	4605      	mov	r5, r0
 800703a:	f7f9 f9e3 	bl	8000404 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007046:	f7f9 f88f 	bl	8000168 <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	3530      	adds	r5, #48	@ 0x30
 8007050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007058:	f806 5b01 	strb.w	r5, [r6], #1
 800705c:	f7f9 fcae 	bl	80009bc <__aeabi_dcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d172      	bne.n	800714a <_dtoa_r+0x62a>
 8007064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007068:	2000      	movs	r0, #0
 800706a:	4911      	ldr	r1, [pc, #68]	@ (80070b0 <_dtoa_r+0x590>)
 800706c:	f7f9 f87c 	bl	8000168 <__aeabi_dsub>
 8007070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007074:	f7f9 fca2 	bl	80009bc <__aeabi_dcmplt>
 8007078:	2800      	cmp	r0, #0
 800707a:	f040 80b4 	bne.w	80071e6 <_dtoa_r+0x6c6>
 800707e:	42a6      	cmp	r6, r4
 8007080:	f43f af70 	beq.w	8006f64 <_dtoa_r+0x444>
 8007084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007088:	2200      	movs	r2, #0
 800708a:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <_dtoa_r+0x594>)
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <_dtoa_r+0x594>)
 800709c:	f7f9 fa1c 	bl	80004d8 <__aeabi_dmul>
 80070a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070a4:	e7c4      	b.n	8007030 <_dtoa_r+0x510>
 80070a6:	bf00      	nop
 80070a8:	0800a0d8 	.word	0x0800a0d8
 80070ac:	0800a0b0 	.word	0x0800a0b0
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	40240000 	.word	0x40240000
 80070b8:	401c0000 	.word	0x401c0000
 80070bc:	40140000 	.word	0x40140000
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7f9 fa06 	bl	80004d8 <__aeabi_dmul>
 80070cc:	4656      	mov	r6, sl
 80070ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070d2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80070d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d8:	f7f9 fcae 	bl	8000a38 <__aeabi_d2iz>
 80070dc:	4605      	mov	r5, r0
 80070de:	f7f9 f991 	bl	8000404 <__aeabi_i2d>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ea:	f7f9 f83d 	bl	8000168 <__aeabi_dsub>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	3530      	adds	r5, #48	@ 0x30
 80070f4:	f806 5b01 	strb.w	r5, [r6], #1
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	d124      	bne.n	800714e <_dtoa_r+0x62e>
 8007104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007108:	4bae      	ldr	r3, [pc, #696]	@ (80073c4 <_dtoa_r+0x8a4>)
 800710a:	f7f9 f82f 	bl	800016c <__adddf3>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007116:	f7f9 fc6f 	bl	80009f8 <__aeabi_dcmpgt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d163      	bne.n	80071e6 <_dtoa_r+0x6c6>
 800711e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007122:	2000      	movs	r0, #0
 8007124:	49a7      	ldr	r1, [pc, #668]	@ (80073c4 <_dtoa_r+0x8a4>)
 8007126:	f7f9 f81f 	bl	8000168 <__aeabi_dsub>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007132:	f7f9 fc43 	bl	80009bc <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	f43f af14 	beq.w	8006f64 <_dtoa_r+0x444>
 800713c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800713e:	1e73      	subs	r3, r6, #1
 8007140:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007142:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007146:	2b30      	cmp	r3, #48	@ 0x30
 8007148:	d0f8      	beq.n	800713c <_dtoa_r+0x61c>
 800714a:	4647      	mov	r7, r8
 800714c:	e03b      	b.n	80071c6 <_dtoa_r+0x6a6>
 800714e:	4b9e      	ldr	r3, [pc, #632]	@ (80073c8 <_dtoa_r+0x8a8>)
 8007150:	f7f9 f9c2 	bl	80004d8 <__aeabi_dmul>
 8007154:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007158:	e7bc      	b.n	80070d4 <_dtoa_r+0x5b4>
 800715a:	4656      	mov	r6, sl
 800715c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 fae0 	bl	800072c <__aeabi_ddiv>
 800716c:	f7f9 fc64 	bl	8000a38 <__aeabi_d2iz>
 8007170:	4680      	mov	r8, r0
 8007172:	f7f9 f947 	bl	8000404 <__aeabi_i2d>
 8007176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800717a:	f7f9 f9ad 	bl	80004d8 <__aeabi_dmul>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4620      	mov	r0, r4
 8007184:	4629      	mov	r1, r5
 8007186:	f7f8 ffef 	bl	8000168 <__aeabi_dsub>
 800718a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800718e:	9d08      	ldr	r5, [sp, #32]
 8007190:	f806 4b01 	strb.w	r4, [r6], #1
 8007194:	eba6 040a 	sub.w	r4, r6, sl
 8007198:	42a5      	cmp	r5, r4
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	d133      	bne.n	8007208 <_dtoa_r+0x6e8>
 80071a0:	f7f8 ffe4 	bl	800016c <__adddf3>
 80071a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	f7f9 fc24 	bl	80009f8 <__aeabi_dcmpgt>
 80071b0:	b9c0      	cbnz	r0, 80071e4 <_dtoa_r+0x6c4>
 80071b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 80071be:	b110      	cbz	r0, 80071c6 <_dtoa_r+0x6a6>
 80071c0:	f018 0f01 	tst.w	r8, #1
 80071c4:	d10e      	bne.n	80071e4 <_dtoa_r+0x6c4>
 80071c6:	4648      	mov	r0, r9
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	f000 fbbb 	bl	8007944 <_Bfree>
 80071ce:	2300      	movs	r3, #0
 80071d0:	7033      	strb	r3, [r6, #0]
 80071d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80071d4:	3701      	adds	r7, #1
 80071d6:	601f      	str	r7, [r3, #0]
 80071d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 824b 	beq.w	8007676 <_dtoa_r+0xb56>
 80071e0:	601e      	str	r6, [r3, #0]
 80071e2:	e248      	b.n	8007676 <_dtoa_r+0xb56>
 80071e4:	46b8      	mov	r8, r7
 80071e6:	4633      	mov	r3, r6
 80071e8:	461e      	mov	r6, r3
 80071ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ee:	2a39      	cmp	r2, #57	@ 0x39
 80071f0:	d106      	bne.n	8007200 <_dtoa_r+0x6e0>
 80071f2:	459a      	cmp	sl, r3
 80071f4:	d1f8      	bne.n	80071e8 <_dtoa_r+0x6c8>
 80071f6:	2230      	movs	r2, #48	@ 0x30
 80071f8:	f108 0801 	add.w	r8, r8, #1
 80071fc:	f88a 2000 	strb.w	r2, [sl]
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	3201      	adds	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e7a0      	b.n	800714a <_dtoa_r+0x62a>
 8007208:	2200      	movs	r2, #0
 800720a:	4b6f      	ldr	r3, [pc, #444]	@ (80073c8 <_dtoa_r+0x8a8>)
 800720c:	f7f9 f964 	bl	80004d8 <__aeabi_dmul>
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	4604      	mov	r4, r0
 8007216:	460d      	mov	r5, r1
 8007218:	f7f9 fbc6 	bl	80009a8 <__aeabi_dcmpeq>
 800721c:	2800      	cmp	r0, #0
 800721e:	d09f      	beq.n	8007160 <_dtoa_r+0x640>
 8007220:	e7d1      	b.n	80071c6 <_dtoa_r+0x6a6>
 8007222:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007224:	2a00      	cmp	r2, #0
 8007226:	f000 80ea 	beq.w	80073fe <_dtoa_r+0x8de>
 800722a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800722c:	2a01      	cmp	r2, #1
 800722e:	f300 80cd 	bgt.w	80073cc <_dtoa_r+0x8ac>
 8007232:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007234:	2a00      	cmp	r2, #0
 8007236:	f000 80c1 	beq.w	80073bc <_dtoa_r+0x89c>
 800723a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800723e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007240:	9e04      	ldr	r6, [sp, #16]
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	2101      	movs	r1, #1
 8007246:	441a      	add	r2, r3
 8007248:	9204      	str	r2, [sp, #16]
 800724a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724c:	4648      	mov	r0, r9
 800724e:	441a      	add	r2, r3
 8007250:	9209      	str	r2, [sp, #36]	@ 0x24
 8007252:	f000 fc2b 	bl	8007aac <__i2b>
 8007256:	4605      	mov	r5, r0
 8007258:	b166      	cbz	r6, 8007274 <_dtoa_r+0x754>
 800725a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd09      	ble.n	8007274 <_dtoa_r+0x754>
 8007260:	42b3      	cmp	r3, r6
 8007262:	bfa8      	it	ge
 8007264:	4633      	movge	r3, r6
 8007266:	9a04      	ldr	r2, [sp, #16]
 8007268:	1af6      	subs	r6, r6, r3
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	9204      	str	r2, [sp, #16]
 800726e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	9309      	str	r3, [sp, #36]	@ 0x24
 8007274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007276:	b30b      	cbz	r3, 80072bc <_dtoa_r+0x79c>
 8007278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80c6 	beq.w	800740c <_dtoa_r+0x8ec>
 8007280:	2c00      	cmp	r4, #0
 8007282:	f000 80c0 	beq.w	8007406 <_dtoa_r+0x8e6>
 8007286:	4629      	mov	r1, r5
 8007288:	4622      	mov	r2, r4
 800728a:	4648      	mov	r0, r9
 800728c:	f000 fcc6 	bl	8007c1c <__pow5mult>
 8007290:	9a03      	ldr	r2, [sp, #12]
 8007292:	4601      	mov	r1, r0
 8007294:	4605      	mov	r5, r0
 8007296:	4648      	mov	r0, r9
 8007298:	f000 fc1e 	bl	8007ad8 <__multiply>
 800729c:	9903      	ldr	r1, [sp, #12]
 800729e:	4680      	mov	r8, r0
 80072a0:	4648      	mov	r0, r9
 80072a2:	f000 fb4f 	bl	8007944 <_Bfree>
 80072a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a8:	1b1b      	subs	r3, r3, r4
 80072aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ac:	f000 80b1 	beq.w	8007412 <_dtoa_r+0x8f2>
 80072b0:	4641      	mov	r1, r8
 80072b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072b4:	4648      	mov	r0, r9
 80072b6:	f000 fcb1 	bl	8007c1c <__pow5mult>
 80072ba:	9003      	str	r0, [sp, #12]
 80072bc:	2101      	movs	r1, #1
 80072be:	4648      	mov	r0, r9
 80072c0:	f000 fbf4 	bl	8007aac <__i2b>
 80072c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c6:	4604      	mov	r4, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 81d8 	beq.w	800767e <_dtoa_r+0xb5e>
 80072ce:	461a      	mov	r2, r3
 80072d0:	4601      	mov	r1, r0
 80072d2:	4648      	mov	r0, r9
 80072d4:	f000 fca2 	bl	8007c1c <__pow5mult>
 80072d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072da:	4604      	mov	r4, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	f300 809f 	bgt.w	8007420 <_dtoa_r+0x900>
 80072e2:	9b06      	ldr	r3, [sp, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8097 	bne.w	8007418 <_dtoa_r+0x8f8>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 8093 	bne.w	800741c <_dtoa_r+0x8fc>
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072fc:	0d1b      	lsrs	r3, r3, #20
 80072fe:	051b      	lsls	r3, r3, #20
 8007300:	b133      	cbz	r3, 8007310 <_dtoa_r+0x7f0>
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	3301      	adds	r3, #1
 800730c:	9309      	str	r3, [sp, #36]	@ 0x24
 800730e:	2301      	movs	r3, #1
 8007310:	930a      	str	r3, [sp, #40]	@ 0x28
 8007312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 81b8 	beq.w	800768a <_dtoa_r+0xb6a>
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007320:	6918      	ldr	r0, [r3, #16]
 8007322:	f000 fb77 	bl	8007a14 <__hi0bits>
 8007326:	f1c0 0020 	rsb	r0, r0, #32
 800732a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732c:	4418      	add	r0, r3
 800732e:	f010 001f 	ands.w	r0, r0, #31
 8007332:	f000 8082 	beq.w	800743a <_dtoa_r+0x91a>
 8007336:	f1c0 0320 	rsb	r3, r0, #32
 800733a:	2b04      	cmp	r3, #4
 800733c:	dd73      	ble.n	8007426 <_dtoa_r+0x906>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	f1c0 001c 	rsb	r0, r0, #28
 8007344:	4403      	add	r3, r0
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	4406      	add	r6, r0
 800734c:	4403      	add	r3, r0
 800734e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007350:	9b04      	ldr	r3, [sp, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd05      	ble.n	8007362 <_dtoa_r+0x842>
 8007356:	461a      	mov	r2, r3
 8007358:	4648      	mov	r0, r9
 800735a:	9903      	ldr	r1, [sp, #12]
 800735c:	f000 fcb8 	bl	8007cd0 <__lshift>
 8007360:	9003      	str	r0, [sp, #12]
 8007362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd05      	ble.n	8007374 <_dtoa_r+0x854>
 8007368:	4621      	mov	r1, r4
 800736a:	461a      	mov	r2, r3
 800736c:	4648      	mov	r0, r9
 800736e:	f000 fcaf 	bl	8007cd0 <__lshift>
 8007372:	4604      	mov	r4, r0
 8007374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d061      	beq.n	800743e <_dtoa_r+0x91e>
 800737a:	4621      	mov	r1, r4
 800737c:	9803      	ldr	r0, [sp, #12]
 800737e:	f000 fd13 	bl	8007da8 <__mcmp>
 8007382:	2800      	cmp	r0, #0
 8007384:	da5b      	bge.n	800743e <_dtoa_r+0x91e>
 8007386:	2300      	movs	r3, #0
 8007388:	220a      	movs	r2, #10
 800738a:	4648      	mov	r0, r9
 800738c:	9903      	ldr	r1, [sp, #12]
 800738e:	f000 fafb 	bl	8007988 <__multadd>
 8007392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007394:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007398:	9003      	str	r0, [sp, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8177 	beq.w	800768e <_dtoa_r+0xb6e>
 80073a0:	4629      	mov	r1, r5
 80073a2:	2300      	movs	r3, #0
 80073a4:	220a      	movs	r2, #10
 80073a6:	4648      	mov	r0, r9
 80073a8:	f000 faee 	bl	8007988 <__multadd>
 80073ac:	f1bb 0f00 	cmp.w	fp, #0
 80073b0:	4605      	mov	r5, r0
 80073b2:	dc6f      	bgt.n	8007494 <_dtoa_r+0x974>
 80073b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	dc49      	bgt.n	800744e <_dtoa_r+0x92e>
 80073ba:	e06b      	b.n	8007494 <_dtoa_r+0x974>
 80073bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80073c2:	e73c      	b.n	800723e <_dtoa_r+0x71e>
 80073c4:	3fe00000 	.word	0x3fe00000
 80073c8:	40240000 	.word	0x40240000
 80073cc:	9b08      	ldr	r3, [sp, #32]
 80073ce:	1e5c      	subs	r4, r3, #1
 80073d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	db09      	blt.n	80073ea <_dtoa_r+0x8ca>
 80073d6:	1b1c      	subs	r4, r3, r4
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f6bf af30 	bge.w	8007240 <_dtoa_r+0x720>
 80073e0:	9b04      	ldr	r3, [sp, #16]
 80073e2:	9a08      	ldr	r2, [sp, #32]
 80073e4:	1a9e      	subs	r6, r3, r2
 80073e6:	2300      	movs	r3, #0
 80073e8:	e72b      	b.n	8007242 <_dtoa_r+0x722>
 80073ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073ee:	1ae3      	subs	r3, r4, r3
 80073f0:	441a      	add	r2, r3
 80073f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80073f4:	9e04      	ldr	r6, [sp, #16]
 80073f6:	2400      	movs	r4, #0
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80073fc:	e721      	b.n	8007242 <_dtoa_r+0x722>
 80073fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007400:	9e04      	ldr	r6, [sp, #16]
 8007402:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007404:	e728      	b.n	8007258 <_dtoa_r+0x738>
 8007406:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800740a:	e751      	b.n	80072b0 <_dtoa_r+0x790>
 800740c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	e750      	b.n	80072b4 <_dtoa_r+0x794>
 8007412:	f8cd 800c 	str.w	r8, [sp, #12]
 8007416:	e751      	b.n	80072bc <_dtoa_r+0x79c>
 8007418:	2300      	movs	r3, #0
 800741a:	e779      	b.n	8007310 <_dtoa_r+0x7f0>
 800741c:	9b06      	ldr	r3, [sp, #24]
 800741e:	e777      	b.n	8007310 <_dtoa_r+0x7f0>
 8007420:	2300      	movs	r3, #0
 8007422:	930a      	str	r3, [sp, #40]	@ 0x28
 8007424:	e779      	b.n	800731a <_dtoa_r+0x7fa>
 8007426:	d093      	beq.n	8007350 <_dtoa_r+0x830>
 8007428:	9a04      	ldr	r2, [sp, #16]
 800742a:	331c      	adds	r3, #28
 800742c:	441a      	add	r2, r3
 800742e:	9204      	str	r2, [sp, #16]
 8007430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007432:	441e      	add	r6, r3
 8007434:	441a      	add	r2, r3
 8007436:	9209      	str	r2, [sp, #36]	@ 0x24
 8007438:	e78a      	b.n	8007350 <_dtoa_r+0x830>
 800743a:	4603      	mov	r3, r0
 800743c:	e7f4      	b.n	8007428 <_dtoa_r+0x908>
 800743e:	9b08      	ldr	r3, [sp, #32]
 8007440:	46b8      	mov	r8, r7
 8007442:	2b00      	cmp	r3, #0
 8007444:	dc20      	bgt.n	8007488 <_dtoa_r+0x968>
 8007446:	469b      	mov	fp, r3
 8007448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800744a:	2b02      	cmp	r3, #2
 800744c:	dd1e      	ble.n	800748c <_dtoa_r+0x96c>
 800744e:	f1bb 0f00 	cmp.w	fp, #0
 8007452:	f47f adb1 	bne.w	8006fb8 <_dtoa_r+0x498>
 8007456:	4621      	mov	r1, r4
 8007458:	465b      	mov	r3, fp
 800745a:	2205      	movs	r2, #5
 800745c:	4648      	mov	r0, r9
 800745e:	f000 fa93 	bl	8007988 <__multadd>
 8007462:	4601      	mov	r1, r0
 8007464:	4604      	mov	r4, r0
 8007466:	9803      	ldr	r0, [sp, #12]
 8007468:	f000 fc9e 	bl	8007da8 <__mcmp>
 800746c:	2800      	cmp	r0, #0
 800746e:	f77f ada3 	ble.w	8006fb8 <_dtoa_r+0x498>
 8007472:	4656      	mov	r6, sl
 8007474:	2331      	movs	r3, #49	@ 0x31
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	f806 3b01 	strb.w	r3, [r6], #1
 800747e:	e59f      	b.n	8006fc0 <_dtoa_r+0x4a0>
 8007480:	46b8      	mov	r8, r7
 8007482:	9c08      	ldr	r4, [sp, #32]
 8007484:	4625      	mov	r5, r4
 8007486:	e7f4      	b.n	8007472 <_dtoa_r+0x952>
 8007488:	f8dd b020 	ldr.w	fp, [sp, #32]
 800748c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8101 	beq.w	8007696 <_dtoa_r+0xb76>
 8007494:	2e00      	cmp	r6, #0
 8007496:	dd05      	ble.n	80074a4 <_dtoa_r+0x984>
 8007498:	4629      	mov	r1, r5
 800749a:	4632      	mov	r2, r6
 800749c:	4648      	mov	r0, r9
 800749e:	f000 fc17 	bl	8007cd0 <__lshift>
 80074a2:	4605      	mov	r5, r0
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d05c      	beq.n	8007564 <_dtoa_r+0xa44>
 80074aa:	4648      	mov	r0, r9
 80074ac:	6869      	ldr	r1, [r5, #4]
 80074ae:	f000 fa09 	bl	80078c4 <_Balloc>
 80074b2:	4606      	mov	r6, r0
 80074b4:	b928      	cbnz	r0, 80074c2 <_dtoa_r+0x9a2>
 80074b6:	4602      	mov	r2, r0
 80074b8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80074bc:	4b80      	ldr	r3, [pc, #512]	@ (80076c0 <_dtoa_r+0xba0>)
 80074be:	f7ff bb43 	b.w	8006b48 <_dtoa_r+0x28>
 80074c2:	692a      	ldr	r2, [r5, #16]
 80074c4:	f105 010c 	add.w	r1, r5, #12
 80074c8:	3202      	adds	r2, #2
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	300c      	adds	r0, #12
 80074ce:	f000 ff9d 	bl	800840c <memcpy>
 80074d2:	2201      	movs	r2, #1
 80074d4:	4631      	mov	r1, r6
 80074d6:	4648      	mov	r0, r9
 80074d8:	f000 fbfa 	bl	8007cd0 <__lshift>
 80074dc:	462f      	mov	r7, r5
 80074de:	4605      	mov	r5, r0
 80074e0:	f10a 0301 	add.w	r3, sl, #1
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	eb0a 030b 	add.w	r3, sl, fp
 80074ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ec:	9b06      	ldr	r3, [sp, #24]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	4621      	mov	r1, r4
 80074f8:	9803      	ldr	r0, [sp, #12]
 80074fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80074fe:	f7ff fa86 	bl	8006a0e <quorem>
 8007502:	4603      	mov	r3, r0
 8007504:	4639      	mov	r1, r7
 8007506:	3330      	adds	r3, #48	@ 0x30
 8007508:	9006      	str	r0, [sp, #24]
 800750a:	9803      	ldr	r0, [sp, #12]
 800750c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800750e:	f000 fc4b 	bl	8007da8 <__mcmp>
 8007512:	462a      	mov	r2, r5
 8007514:	9008      	str	r0, [sp, #32]
 8007516:	4621      	mov	r1, r4
 8007518:	4648      	mov	r0, r9
 800751a:	f000 fc61 	bl	8007de0 <__mdiff>
 800751e:	68c2      	ldr	r2, [r0, #12]
 8007520:	4606      	mov	r6, r0
 8007522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007524:	bb02      	cbnz	r2, 8007568 <_dtoa_r+0xa48>
 8007526:	4601      	mov	r1, r0
 8007528:	9803      	ldr	r0, [sp, #12]
 800752a:	f000 fc3d 	bl	8007da8 <__mcmp>
 800752e:	4602      	mov	r2, r0
 8007530:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007532:	4631      	mov	r1, r6
 8007534:	4648      	mov	r0, r9
 8007536:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800753a:	f000 fa03 	bl	8007944 <_Bfree>
 800753e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007542:	9e04      	ldr	r6, [sp, #16]
 8007544:	ea42 0103 	orr.w	r1, r2, r3
 8007548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754a:	4319      	orrs	r1, r3
 800754c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800754e:	d10d      	bne.n	800756c <_dtoa_r+0xa4c>
 8007550:	2b39      	cmp	r3, #57	@ 0x39
 8007552:	d027      	beq.n	80075a4 <_dtoa_r+0xa84>
 8007554:	9a08      	ldr	r2, [sp, #32]
 8007556:	2a00      	cmp	r2, #0
 8007558:	dd01      	ble.n	800755e <_dtoa_r+0xa3e>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	3331      	adds	r3, #49	@ 0x31
 800755e:	f88b 3000 	strb.w	r3, [fp]
 8007562:	e52e      	b.n	8006fc2 <_dtoa_r+0x4a2>
 8007564:	4628      	mov	r0, r5
 8007566:	e7b9      	b.n	80074dc <_dtoa_r+0x9bc>
 8007568:	2201      	movs	r2, #1
 800756a:	e7e2      	b.n	8007532 <_dtoa_r+0xa12>
 800756c:	9908      	ldr	r1, [sp, #32]
 800756e:	2900      	cmp	r1, #0
 8007570:	db04      	blt.n	800757c <_dtoa_r+0xa5c>
 8007572:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007574:	4301      	orrs	r1, r0
 8007576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007578:	4301      	orrs	r1, r0
 800757a:	d120      	bne.n	80075be <_dtoa_r+0xa9e>
 800757c:	2a00      	cmp	r2, #0
 800757e:	ddee      	ble.n	800755e <_dtoa_r+0xa3e>
 8007580:	2201      	movs	r2, #1
 8007582:	9903      	ldr	r1, [sp, #12]
 8007584:	4648      	mov	r0, r9
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	f000 fba2 	bl	8007cd0 <__lshift>
 800758c:	4621      	mov	r1, r4
 800758e:	9003      	str	r0, [sp, #12]
 8007590:	f000 fc0a 	bl	8007da8 <__mcmp>
 8007594:	2800      	cmp	r0, #0
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	dc02      	bgt.n	80075a0 <_dtoa_r+0xa80>
 800759a:	d1e0      	bne.n	800755e <_dtoa_r+0xa3e>
 800759c:	07da      	lsls	r2, r3, #31
 800759e:	d5de      	bpl.n	800755e <_dtoa_r+0xa3e>
 80075a0:	2b39      	cmp	r3, #57	@ 0x39
 80075a2:	d1da      	bne.n	800755a <_dtoa_r+0xa3a>
 80075a4:	2339      	movs	r3, #57	@ 0x39
 80075a6:	f88b 3000 	strb.w	r3, [fp]
 80075aa:	4633      	mov	r3, r6
 80075ac:	461e      	mov	r6, r3
 80075ae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	2a39      	cmp	r2, #57	@ 0x39
 80075b6:	d04e      	beq.n	8007656 <_dtoa_r+0xb36>
 80075b8:	3201      	adds	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e501      	b.n	8006fc2 <_dtoa_r+0x4a2>
 80075be:	2a00      	cmp	r2, #0
 80075c0:	dd03      	ble.n	80075ca <_dtoa_r+0xaaa>
 80075c2:	2b39      	cmp	r3, #57	@ 0x39
 80075c4:	d0ee      	beq.n	80075a4 <_dtoa_r+0xa84>
 80075c6:	3301      	adds	r3, #1
 80075c8:	e7c9      	b.n	800755e <_dtoa_r+0xa3e>
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80075d2:	428a      	cmp	r2, r1
 80075d4:	d028      	beq.n	8007628 <_dtoa_r+0xb08>
 80075d6:	2300      	movs	r3, #0
 80075d8:	220a      	movs	r2, #10
 80075da:	9903      	ldr	r1, [sp, #12]
 80075dc:	4648      	mov	r0, r9
 80075de:	f000 f9d3 	bl	8007988 <__multadd>
 80075e2:	42af      	cmp	r7, r5
 80075e4:	9003      	str	r0, [sp, #12]
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	f04f 020a 	mov.w	r2, #10
 80075ee:	4639      	mov	r1, r7
 80075f0:	4648      	mov	r0, r9
 80075f2:	d107      	bne.n	8007604 <_dtoa_r+0xae4>
 80075f4:	f000 f9c8 	bl	8007988 <__multadd>
 80075f8:	4607      	mov	r7, r0
 80075fa:	4605      	mov	r5, r0
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	3301      	adds	r3, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	e777      	b.n	80074f4 <_dtoa_r+0x9d4>
 8007604:	f000 f9c0 	bl	8007988 <__multadd>
 8007608:	4629      	mov	r1, r5
 800760a:	4607      	mov	r7, r0
 800760c:	2300      	movs	r3, #0
 800760e:	220a      	movs	r2, #10
 8007610:	4648      	mov	r0, r9
 8007612:	f000 f9b9 	bl	8007988 <__multadd>
 8007616:	4605      	mov	r5, r0
 8007618:	e7f0      	b.n	80075fc <_dtoa_r+0xadc>
 800761a:	f1bb 0f00 	cmp.w	fp, #0
 800761e:	bfcc      	ite	gt
 8007620:	465e      	movgt	r6, fp
 8007622:	2601      	movle	r6, #1
 8007624:	2700      	movs	r7, #0
 8007626:	4456      	add	r6, sl
 8007628:	2201      	movs	r2, #1
 800762a:	9903      	ldr	r1, [sp, #12]
 800762c:	4648      	mov	r0, r9
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	f000 fb4e 	bl	8007cd0 <__lshift>
 8007634:	4621      	mov	r1, r4
 8007636:	9003      	str	r0, [sp, #12]
 8007638:	f000 fbb6 	bl	8007da8 <__mcmp>
 800763c:	2800      	cmp	r0, #0
 800763e:	dcb4      	bgt.n	80075aa <_dtoa_r+0xa8a>
 8007640:	d102      	bne.n	8007648 <_dtoa_r+0xb28>
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	07db      	lsls	r3, r3, #31
 8007646:	d4b0      	bmi.n	80075aa <_dtoa_r+0xa8a>
 8007648:	4633      	mov	r3, r6
 800764a:	461e      	mov	r6, r3
 800764c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007650:	2a30      	cmp	r2, #48	@ 0x30
 8007652:	d0fa      	beq.n	800764a <_dtoa_r+0xb2a>
 8007654:	e4b5      	b.n	8006fc2 <_dtoa_r+0x4a2>
 8007656:	459a      	cmp	sl, r3
 8007658:	d1a8      	bne.n	80075ac <_dtoa_r+0xa8c>
 800765a:	2331      	movs	r3, #49	@ 0x31
 800765c:	f108 0801 	add.w	r8, r8, #1
 8007660:	f88a 3000 	strb.w	r3, [sl]
 8007664:	e4ad      	b.n	8006fc2 <_dtoa_r+0x4a2>
 8007666:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007668:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80076c4 <_dtoa_r+0xba4>
 800766c:	b11b      	cbz	r3, 8007676 <_dtoa_r+0xb56>
 800766e:	f10a 0308 	add.w	r3, sl, #8
 8007672:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	4650      	mov	r0, sl
 8007678:	b017      	add	sp, #92	@ 0x5c
 800767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007680:	2b01      	cmp	r3, #1
 8007682:	f77f ae2e 	ble.w	80072e2 <_dtoa_r+0x7c2>
 8007686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007688:	930a      	str	r3, [sp, #40]	@ 0x28
 800768a:	2001      	movs	r0, #1
 800768c:	e64d      	b.n	800732a <_dtoa_r+0x80a>
 800768e:	f1bb 0f00 	cmp.w	fp, #0
 8007692:	f77f aed9 	ble.w	8007448 <_dtoa_r+0x928>
 8007696:	4656      	mov	r6, sl
 8007698:	4621      	mov	r1, r4
 800769a:	9803      	ldr	r0, [sp, #12]
 800769c:	f7ff f9b7 	bl	8006a0e <quorem>
 80076a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80076a4:	f806 3b01 	strb.w	r3, [r6], #1
 80076a8:	eba6 020a 	sub.w	r2, r6, sl
 80076ac:	4593      	cmp	fp, r2
 80076ae:	ddb4      	ble.n	800761a <_dtoa_r+0xafa>
 80076b0:	2300      	movs	r3, #0
 80076b2:	220a      	movs	r2, #10
 80076b4:	4648      	mov	r0, r9
 80076b6:	9903      	ldr	r1, [sp, #12]
 80076b8:	f000 f966 	bl	8007988 <__multadd>
 80076bc:	9003      	str	r0, [sp, #12]
 80076be:	e7eb      	b.n	8007698 <_dtoa_r+0xb78>
 80076c0:	08009fe2 	.word	0x08009fe2
 80076c4:	08009f66 	.word	0x08009f66

080076c8 <_free_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d040      	beq.n	8007752 <_free_r+0x8a>
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f0c      	subs	r4, r1, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfb8      	it	lt
 80076da:	18e4      	addlt	r4, r4, r3
 80076dc:	f000 f8e6 	bl	80078ac <__malloc_lock>
 80076e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007754 <_free_r+0x8c>)
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	b933      	cbnz	r3, 80076f4 <_free_r+0x2c>
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	6014      	str	r4, [r2, #0]
 80076ea:	4628      	mov	r0, r5
 80076ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f0:	f000 b8e2 	b.w	80078b8 <__malloc_unlock>
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d908      	bls.n	800770a <_free_r+0x42>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	1821      	adds	r1, r4, r0
 80076fc:	428b      	cmp	r3, r1
 80076fe:	bf01      	itttt	eq
 8007700:	6819      	ldreq	r1, [r3, #0]
 8007702:	685b      	ldreq	r3, [r3, #4]
 8007704:	1809      	addeq	r1, r1, r0
 8007706:	6021      	streq	r1, [r4, #0]
 8007708:	e7ed      	b.n	80076e6 <_free_r+0x1e>
 800770a:	461a      	mov	r2, r3
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	b10b      	cbz	r3, 8007714 <_free_r+0x4c>
 8007710:	42a3      	cmp	r3, r4
 8007712:	d9fa      	bls.n	800770a <_free_r+0x42>
 8007714:	6811      	ldr	r1, [r2, #0]
 8007716:	1850      	adds	r0, r2, r1
 8007718:	42a0      	cmp	r0, r4
 800771a:	d10b      	bne.n	8007734 <_free_r+0x6c>
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	4401      	add	r1, r0
 8007720:	1850      	adds	r0, r2, r1
 8007722:	4283      	cmp	r3, r0
 8007724:	6011      	str	r1, [r2, #0]
 8007726:	d1e0      	bne.n	80076ea <_free_r+0x22>
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4408      	add	r0, r1
 800772e:	6010      	str	r0, [r2, #0]
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	e7da      	b.n	80076ea <_free_r+0x22>
 8007734:	d902      	bls.n	800773c <_free_r+0x74>
 8007736:	230c      	movs	r3, #12
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	e7d6      	b.n	80076ea <_free_r+0x22>
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	1821      	adds	r1, r4, r0
 8007740:	428b      	cmp	r3, r1
 8007742:	bf01      	itttt	eq
 8007744:	6819      	ldreq	r1, [r3, #0]
 8007746:	685b      	ldreq	r3, [r3, #4]
 8007748:	1809      	addeq	r1, r1, r0
 800774a:	6021      	streq	r1, [r4, #0]
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	6054      	str	r4, [r2, #4]
 8007750:	e7cb      	b.n	80076ea <_free_r+0x22>
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000e0c 	.word	0x20000e0c

08007758 <malloc>:
 8007758:	4b02      	ldr	r3, [pc, #8]	@ (8007764 <malloc+0xc>)
 800775a:	4601      	mov	r1, r0
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	f000 b825 	b.w	80077ac <_malloc_r>
 8007762:	bf00      	nop
 8007764:	20000024 	.word	0x20000024

08007768 <sbrk_aligned>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4e0f      	ldr	r6, [pc, #60]	@ (80077a8 <sbrk_aligned+0x40>)
 800776c:	460c      	mov	r4, r1
 800776e:	6831      	ldr	r1, [r6, #0]
 8007770:	4605      	mov	r5, r0
 8007772:	b911      	cbnz	r1, 800777a <sbrk_aligned+0x12>
 8007774:	f000 fe3a 	bl	80083ec <_sbrk_r>
 8007778:	6030      	str	r0, [r6, #0]
 800777a:	4621      	mov	r1, r4
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fe35 	bl	80083ec <_sbrk_r>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	d103      	bne.n	800778e <sbrk_aligned+0x26>
 8007786:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800778a:	4620      	mov	r0, r4
 800778c:	bd70      	pop	{r4, r5, r6, pc}
 800778e:	1cc4      	adds	r4, r0, #3
 8007790:	f024 0403 	bic.w	r4, r4, #3
 8007794:	42a0      	cmp	r0, r4
 8007796:	d0f8      	beq.n	800778a <sbrk_aligned+0x22>
 8007798:	1a21      	subs	r1, r4, r0
 800779a:	4628      	mov	r0, r5
 800779c:	f000 fe26 	bl	80083ec <_sbrk_r>
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1f2      	bne.n	800778a <sbrk_aligned+0x22>
 80077a4:	e7ef      	b.n	8007786 <sbrk_aligned+0x1e>
 80077a6:	bf00      	nop
 80077a8:	20000e08 	.word	0x20000e08

080077ac <_malloc_r>:
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b0:	1ccd      	adds	r5, r1, #3
 80077b2:	f025 0503 	bic.w	r5, r5, #3
 80077b6:	3508      	adds	r5, #8
 80077b8:	2d0c      	cmp	r5, #12
 80077ba:	bf38      	it	cc
 80077bc:	250c      	movcc	r5, #12
 80077be:	2d00      	cmp	r5, #0
 80077c0:	4606      	mov	r6, r0
 80077c2:	db01      	blt.n	80077c8 <_malloc_r+0x1c>
 80077c4:	42a9      	cmp	r1, r5
 80077c6:	d904      	bls.n	80077d2 <_malloc_r+0x26>
 80077c8:	230c      	movs	r3, #12
 80077ca:	6033      	str	r3, [r6, #0]
 80077cc:	2000      	movs	r0, #0
 80077ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078a8 <_malloc_r+0xfc>
 80077d6:	f000 f869 	bl	80078ac <__malloc_lock>
 80077da:	f8d8 3000 	ldr.w	r3, [r8]
 80077de:	461c      	mov	r4, r3
 80077e0:	bb44      	cbnz	r4, 8007834 <_malloc_r+0x88>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff ffbf 	bl	8007768 <sbrk_aligned>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	4604      	mov	r4, r0
 80077ee:	d158      	bne.n	80078a2 <_malloc_r+0xf6>
 80077f0:	f8d8 4000 	ldr.w	r4, [r8]
 80077f4:	4627      	mov	r7, r4
 80077f6:	2f00      	cmp	r7, #0
 80077f8:	d143      	bne.n	8007882 <_malloc_r+0xd6>
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	d04b      	beq.n	8007896 <_malloc_r+0xea>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4639      	mov	r1, r7
 8007802:	4630      	mov	r0, r6
 8007804:	eb04 0903 	add.w	r9, r4, r3
 8007808:	f000 fdf0 	bl	80083ec <_sbrk_r>
 800780c:	4581      	cmp	r9, r0
 800780e:	d142      	bne.n	8007896 <_malloc_r+0xea>
 8007810:	6821      	ldr	r1, [r4, #0]
 8007812:	4630      	mov	r0, r6
 8007814:	1a6d      	subs	r5, r5, r1
 8007816:	4629      	mov	r1, r5
 8007818:	f7ff ffa6 	bl	8007768 <sbrk_aligned>
 800781c:	3001      	adds	r0, #1
 800781e:	d03a      	beq.n	8007896 <_malloc_r+0xea>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	442b      	add	r3, r5
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	f8d8 3000 	ldr.w	r3, [r8]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	bb62      	cbnz	r2, 8007888 <_malloc_r+0xdc>
 800782e:	f8c8 7000 	str.w	r7, [r8]
 8007832:	e00f      	b.n	8007854 <_malloc_r+0xa8>
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	1b52      	subs	r2, r2, r5
 8007838:	d420      	bmi.n	800787c <_malloc_r+0xd0>
 800783a:	2a0b      	cmp	r2, #11
 800783c:	d917      	bls.n	800786e <_malloc_r+0xc2>
 800783e:	1961      	adds	r1, r4, r5
 8007840:	42a3      	cmp	r3, r4
 8007842:	6025      	str	r5, [r4, #0]
 8007844:	bf18      	it	ne
 8007846:	6059      	strne	r1, [r3, #4]
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	bf08      	it	eq
 800784c:	f8c8 1000 	streq.w	r1, [r8]
 8007850:	5162      	str	r2, [r4, r5]
 8007852:	604b      	str	r3, [r1, #4]
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f82f 	bl	80078b8 <__malloc_unlock>
 800785a:	f104 000b 	add.w	r0, r4, #11
 800785e:	1d23      	adds	r3, r4, #4
 8007860:	f020 0007 	bic.w	r0, r0, #7
 8007864:	1ac2      	subs	r2, r0, r3
 8007866:	bf1c      	itt	ne
 8007868:	1a1b      	subne	r3, r3, r0
 800786a:	50a3      	strne	r3, [r4, r2]
 800786c:	e7af      	b.n	80077ce <_malloc_r+0x22>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	42a3      	cmp	r3, r4
 8007872:	bf0c      	ite	eq
 8007874:	f8c8 2000 	streq.w	r2, [r8]
 8007878:	605a      	strne	r2, [r3, #4]
 800787a:	e7eb      	b.n	8007854 <_malloc_r+0xa8>
 800787c:	4623      	mov	r3, r4
 800787e:	6864      	ldr	r4, [r4, #4]
 8007880:	e7ae      	b.n	80077e0 <_malloc_r+0x34>
 8007882:	463c      	mov	r4, r7
 8007884:	687f      	ldr	r7, [r7, #4]
 8007886:	e7b6      	b.n	80077f6 <_malloc_r+0x4a>
 8007888:	461a      	mov	r2, r3
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	42a3      	cmp	r3, r4
 800788e:	d1fb      	bne.n	8007888 <_malloc_r+0xdc>
 8007890:	2300      	movs	r3, #0
 8007892:	6053      	str	r3, [r2, #4]
 8007894:	e7de      	b.n	8007854 <_malloc_r+0xa8>
 8007896:	230c      	movs	r3, #12
 8007898:	4630      	mov	r0, r6
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f000 f80c 	bl	80078b8 <__malloc_unlock>
 80078a0:	e794      	b.n	80077cc <_malloc_r+0x20>
 80078a2:	6005      	str	r5, [r0, #0]
 80078a4:	e7d6      	b.n	8007854 <_malloc_r+0xa8>
 80078a6:	bf00      	nop
 80078a8:	20000e0c 	.word	0x20000e0c

080078ac <__malloc_lock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	@ (80078b4 <__malloc_lock+0x8>)
 80078ae:	f7ff b89e 	b.w	80069ee <__retarget_lock_acquire_recursive>
 80078b2:	bf00      	nop
 80078b4:	20000e04 	.word	0x20000e04

080078b8 <__malloc_unlock>:
 80078b8:	4801      	ldr	r0, [pc, #4]	@ (80078c0 <__malloc_unlock+0x8>)
 80078ba:	f7ff b899 	b.w	80069f0 <__retarget_lock_release_recursive>
 80078be:	bf00      	nop
 80078c0:	20000e04 	.word	0x20000e04

080078c4 <_Balloc>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	69c6      	ldr	r6, [r0, #28]
 80078c8:	4604      	mov	r4, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	b976      	cbnz	r6, 80078ec <_Balloc+0x28>
 80078ce:	2010      	movs	r0, #16
 80078d0:	f7ff ff42 	bl	8007758 <malloc>
 80078d4:	4602      	mov	r2, r0
 80078d6:	61e0      	str	r0, [r4, #28]
 80078d8:	b920      	cbnz	r0, 80078e4 <_Balloc+0x20>
 80078da:	216b      	movs	r1, #107	@ 0x6b
 80078dc:	4b17      	ldr	r3, [pc, #92]	@ (800793c <_Balloc+0x78>)
 80078de:	4818      	ldr	r0, [pc, #96]	@ (8007940 <_Balloc+0x7c>)
 80078e0:	f000 fda2 	bl	8008428 <__assert_func>
 80078e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e8:	6006      	str	r6, [r0, #0]
 80078ea:	60c6      	str	r6, [r0, #12]
 80078ec:	69e6      	ldr	r6, [r4, #28]
 80078ee:	68f3      	ldr	r3, [r6, #12]
 80078f0:	b183      	cbz	r3, 8007914 <_Balloc+0x50>
 80078f2:	69e3      	ldr	r3, [r4, #28]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078fa:	b9b8      	cbnz	r0, 800792c <_Balloc+0x68>
 80078fc:	2101      	movs	r1, #1
 80078fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007902:	1d72      	adds	r2, r6, #5
 8007904:	4620      	mov	r0, r4
 8007906:	0092      	lsls	r2, r2, #2
 8007908:	f000 fdac 	bl	8008464 <_calloc_r>
 800790c:	b160      	cbz	r0, 8007928 <_Balloc+0x64>
 800790e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007912:	e00e      	b.n	8007932 <_Balloc+0x6e>
 8007914:	2221      	movs	r2, #33	@ 0x21
 8007916:	2104      	movs	r1, #4
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fda3 	bl	8008464 <_calloc_r>
 800791e:	69e3      	ldr	r3, [r4, #28]
 8007920:	60f0      	str	r0, [r6, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e4      	bne.n	80078f2 <_Balloc+0x2e>
 8007928:	2000      	movs	r0, #0
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	6802      	ldr	r2, [r0, #0]
 800792e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007932:	2300      	movs	r3, #0
 8007934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007938:	e7f7      	b.n	800792a <_Balloc+0x66>
 800793a:	bf00      	nop
 800793c:	08009f73 	.word	0x08009f73
 8007940:	08009ff3 	.word	0x08009ff3

08007944 <_Bfree>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	69c6      	ldr	r6, [r0, #28]
 8007948:	4605      	mov	r5, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b976      	cbnz	r6, 800796c <_Bfree+0x28>
 800794e:	2010      	movs	r0, #16
 8007950:	f7ff ff02 	bl	8007758 <malloc>
 8007954:	4602      	mov	r2, r0
 8007956:	61e8      	str	r0, [r5, #28]
 8007958:	b920      	cbnz	r0, 8007964 <_Bfree+0x20>
 800795a:	218f      	movs	r1, #143	@ 0x8f
 800795c:	4b08      	ldr	r3, [pc, #32]	@ (8007980 <_Bfree+0x3c>)
 800795e:	4809      	ldr	r0, [pc, #36]	@ (8007984 <_Bfree+0x40>)
 8007960:	f000 fd62 	bl	8008428 <__assert_func>
 8007964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007968:	6006      	str	r6, [r0, #0]
 800796a:	60c6      	str	r6, [r0, #12]
 800796c:	b13c      	cbz	r4, 800797e <_Bfree+0x3a>
 800796e:	69eb      	ldr	r3, [r5, #28]
 8007970:	6862      	ldr	r2, [r4, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007978:	6021      	str	r1, [r4, #0]
 800797a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800797e:	bd70      	pop	{r4, r5, r6, pc}
 8007980:	08009f73 	.word	0x08009f73
 8007984:	08009ff3 	.word	0x08009ff3

08007988 <__multadd>:
 8007988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798c:	4607      	mov	r7, r0
 800798e:	460c      	mov	r4, r1
 8007990:	461e      	mov	r6, r3
 8007992:	2000      	movs	r0, #0
 8007994:	690d      	ldr	r5, [r1, #16]
 8007996:	f101 0c14 	add.w	ip, r1, #20
 800799a:	f8dc 3000 	ldr.w	r3, [ip]
 800799e:	3001      	adds	r0, #1
 80079a0:	b299      	uxth	r1, r3
 80079a2:	fb02 6101 	mla	r1, r2, r1, r6
 80079a6:	0c1e      	lsrs	r6, r3, #16
 80079a8:	0c0b      	lsrs	r3, r1, #16
 80079aa:	fb02 3306 	mla	r3, r2, r6, r3
 80079ae:	b289      	uxth	r1, r1
 80079b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079b4:	4285      	cmp	r5, r0
 80079b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ba:	f84c 1b04 	str.w	r1, [ip], #4
 80079be:	dcec      	bgt.n	800799a <__multadd+0x12>
 80079c0:	b30e      	cbz	r6, 8007a06 <__multadd+0x7e>
 80079c2:	68a3      	ldr	r3, [r4, #8]
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dc19      	bgt.n	80079fc <__multadd+0x74>
 80079c8:	6861      	ldr	r1, [r4, #4]
 80079ca:	4638      	mov	r0, r7
 80079cc:	3101      	adds	r1, #1
 80079ce:	f7ff ff79 	bl	80078c4 <_Balloc>
 80079d2:	4680      	mov	r8, r0
 80079d4:	b928      	cbnz	r0, 80079e2 <__multadd+0x5a>
 80079d6:	4602      	mov	r2, r0
 80079d8:	21ba      	movs	r1, #186	@ 0xba
 80079da:	4b0c      	ldr	r3, [pc, #48]	@ (8007a0c <__multadd+0x84>)
 80079dc:	480c      	ldr	r0, [pc, #48]	@ (8007a10 <__multadd+0x88>)
 80079de:	f000 fd23 	bl	8008428 <__assert_func>
 80079e2:	6922      	ldr	r2, [r4, #16]
 80079e4:	f104 010c 	add.w	r1, r4, #12
 80079e8:	3202      	adds	r2, #2
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	300c      	adds	r0, #12
 80079ee:	f000 fd0d 	bl	800840c <memcpy>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff ffa5 	bl	8007944 <_Bfree>
 80079fa:	4644      	mov	r4, r8
 80079fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a00:	3501      	adds	r5, #1
 8007a02:	615e      	str	r6, [r3, #20]
 8007a04:	6125      	str	r5, [r4, #16]
 8007a06:	4620      	mov	r0, r4
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a0c:	08009fe2 	.word	0x08009fe2
 8007a10:	08009ff3 	.word	0x08009ff3

08007a14 <__hi0bits>:
 8007a14:	4603      	mov	r3, r0
 8007a16:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a1a:	bf3a      	itte	cc
 8007a1c:	0403      	lslcc	r3, r0, #16
 8007a1e:	2010      	movcc	r0, #16
 8007a20:	2000      	movcs	r0, #0
 8007a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a26:	bf3c      	itt	cc
 8007a28:	021b      	lslcc	r3, r3, #8
 8007a2a:	3008      	addcc	r0, #8
 8007a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a30:	bf3c      	itt	cc
 8007a32:	011b      	lslcc	r3, r3, #4
 8007a34:	3004      	addcc	r0, #4
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3a:	bf3c      	itt	cc
 8007a3c:	009b      	lslcc	r3, r3, #2
 8007a3e:	3002      	addcc	r0, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	db05      	blt.n	8007a50 <__hi0bits+0x3c>
 8007a44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a48:	f100 0001 	add.w	r0, r0, #1
 8007a4c:	bf08      	it	eq
 8007a4e:	2020      	moveq	r0, #32
 8007a50:	4770      	bx	lr

08007a52 <__lo0bits>:
 8007a52:	6803      	ldr	r3, [r0, #0]
 8007a54:	4602      	mov	r2, r0
 8007a56:	f013 0007 	ands.w	r0, r3, #7
 8007a5a:	d00b      	beq.n	8007a74 <__lo0bits+0x22>
 8007a5c:	07d9      	lsls	r1, r3, #31
 8007a5e:	d421      	bmi.n	8007aa4 <__lo0bits+0x52>
 8007a60:	0798      	lsls	r0, r3, #30
 8007a62:	bf49      	itett	mi
 8007a64:	085b      	lsrmi	r3, r3, #1
 8007a66:	089b      	lsrpl	r3, r3, #2
 8007a68:	2001      	movmi	r0, #1
 8007a6a:	6013      	strmi	r3, [r2, #0]
 8007a6c:	bf5c      	itt	pl
 8007a6e:	2002      	movpl	r0, #2
 8007a70:	6013      	strpl	r3, [r2, #0]
 8007a72:	4770      	bx	lr
 8007a74:	b299      	uxth	r1, r3
 8007a76:	b909      	cbnz	r1, 8007a7c <__lo0bits+0x2a>
 8007a78:	2010      	movs	r0, #16
 8007a7a:	0c1b      	lsrs	r3, r3, #16
 8007a7c:	b2d9      	uxtb	r1, r3
 8007a7e:	b909      	cbnz	r1, 8007a84 <__lo0bits+0x32>
 8007a80:	3008      	adds	r0, #8
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	0719      	lsls	r1, r3, #28
 8007a86:	bf04      	itt	eq
 8007a88:	091b      	lsreq	r3, r3, #4
 8007a8a:	3004      	addeq	r0, #4
 8007a8c:	0799      	lsls	r1, r3, #30
 8007a8e:	bf04      	itt	eq
 8007a90:	089b      	lsreq	r3, r3, #2
 8007a92:	3002      	addeq	r0, #2
 8007a94:	07d9      	lsls	r1, r3, #31
 8007a96:	d403      	bmi.n	8007aa0 <__lo0bits+0x4e>
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	f100 0001 	add.w	r0, r0, #1
 8007a9e:	d003      	beq.n	8007aa8 <__lo0bits+0x56>
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4770      	bx	lr
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	4770      	bx	lr
 8007aa8:	2020      	movs	r0, #32
 8007aaa:	4770      	bx	lr

08007aac <__i2b>:
 8007aac:	b510      	push	{r4, lr}
 8007aae:	460c      	mov	r4, r1
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	f7ff ff07 	bl	80078c4 <_Balloc>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	b928      	cbnz	r0, 8007ac6 <__i2b+0x1a>
 8007aba:	f240 1145 	movw	r1, #325	@ 0x145
 8007abe:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <__i2b+0x24>)
 8007ac0:	4804      	ldr	r0, [pc, #16]	@ (8007ad4 <__i2b+0x28>)
 8007ac2:	f000 fcb1 	bl	8008428 <__assert_func>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	6144      	str	r4, [r0, #20]
 8007aca:	6103      	str	r3, [r0, #16]
 8007acc:	bd10      	pop	{r4, pc}
 8007ace:	bf00      	nop
 8007ad0:	08009fe2 	.word	0x08009fe2
 8007ad4:	08009ff3 	.word	0x08009ff3

08007ad8 <__multiply>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4617      	mov	r7, r2
 8007ade:	690a      	ldr	r2, [r1, #16]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4689      	mov	r9, r1
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	bfa2      	ittt	ge
 8007ae8:	463b      	movge	r3, r7
 8007aea:	460f      	movge	r7, r1
 8007aec:	4699      	movge	r9, r3
 8007aee:	693d      	ldr	r5, [r7, #16]
 8007af0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	eb05 060a 	add.w	r6, r5, sl
 8007afc:	42b3      	cmp	r3, r6
 8007afe:	b085      	sub	sp, #20
 8007b00:	bfb8      	it	lt
 8007b02:	3101      	addlt	r1, #1
 8007b04:	f7ff fede 	bl	80078c4 <_Balloc>
 8007b08:	b930      	cbnz	r0, 8007b18 <__multiply+0x40>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b10:	4b40      	ldr	r3, [pc, #256]	@ (8007c14 <__multiply+0x13c>)
 8007b12:	4841      	ldr	r0, [pc, #260]	@ (8007c18 <__multiply+0x140>)
 8007b14:	f000 fc88 	bl	8008428 <__assert_func>
 8007b18:	f100 0414 	add.w	r4, r0, #20
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	2200      	movs	r2, #0
 8007b20:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007b24:	4573      	cmp	r3, lr
 8007b26:	d320      	bcc.n	8007b6a <__multiply+0x92>
 8007b28:	f107 0814 	add.w	r8, r7, #20
 8007b2c:	f109 0114 	add.w	r1, r9, #20
 8007b30:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b34:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	1beb      	subs	r3, r5, r7
 8007b3c:	3b15      	subs	r3, #21
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	3304      	adds	r3, #4
 8007b44:	3715      	adds	r7, #21
 8007b46:	42bd      	cmp	r5, r7
 8007b48:	bf38      	it	cc
 8007b4a:	2304      	movcc	r3, #4
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	9b02      	ldr	r3, [sp, #8]
 8007b50:	9103      	str	r1, [sp, #12]
 8007b52:	428b      	cmp	r3, r1
 8007b54:	d80c      	bhi.n	8007b70 <__multiply+0x98>
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	dd03      	ble.n	8007b62 <__multiply+0x8a>
 8007b5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d055      	beq.n	8007c0e <__multiply+0x136>
 8007b62:	6106      	str	r6, [r0, #16]
 8007b64:	b005      	add	sp, #20
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	f843 2b04 	str.w	r2, [r3], #4
 8007b6e:	e7d9      	b.n	8007b24 <__multiply+0x4c>
 8007b70:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b74:	f1ba 0f00 	cmp.w	sl, #0
 8007b78:	d01f      	beq.n	8007bba <__multiply+0xe2>
 8007b7a:	46c4      	mov	ip, r8
 8007b7c:	46a1      	mov	r9, r4
 8007b7e:	2700      	movs	r7, #0
 8007b80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b84:	f8d9 3000 	ldr.w	r3, [r9]
 8007b88:	fa1f fb82 	uxth.w	fp, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b92:	443b      	add	r3, r7
 8007b94:	f8d9 7000 	ldr.w	r7, [r9]
 8007b98:	0c12      	lsrs	r2, r2, #16
 8007b9a:	0c3f      	lsrs	r7, r7, #16
 8007b9c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ba0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007baa:	4565      	cmp	r5, ip
 8007bac:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007bb0:	f849 3b04 	str.w	r3, [r9], #4
 8007bb4:	d8e4      	bhi.n	8007b80 <__multiply+0xa8>
 8007bb6:	9b01      	ldr	r3, [sp, #4]
 8007bb8:	50e7      	str	r7, [r4, r3]
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	3104      	adds	r1, #4
 8007bbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	d020      	beq.n	8007c0a <__multiply+0x132>
 8007bc8:	4647      	mov	r7, r8
 8007bca:	46a4      	mov	ip, r4
 8007bcc:	f04f 0a00 	mov.w	sl, #0
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	f8b7 b000 	ldrh.w	fp, [r7]
 8007bd6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	fb09 220b 	mla	r2, r9, fp, r2
 8007be0:	4452      	add	r2, sl
 8007be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be6:	f84c 3b04 	str.w	r3, [ip], #4
 8007bea:	f857 3b04 	ldr.w	r3, [r7], #4
 8007bee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bf2:	f8bc 3000 	ldrh.w	r3, [ip]
 8007bf6:	42bd      	cmp	r5, r7
 8007bf8:	fb09 330a 	mla	r3, r9, sl, r3
 8007bfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c04:	d8e5      	bhi.n	8007bd2 <__multiply+0xfa>
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	50a3      	str	r3, [r4, r2]
 8007c0a:	3404      	adds	r4, #4
 8007c0c:	e79f      	b.n	8007b4e <__multiply+0x76>
 8007c0e:	3e01      	subs	r6, #1
 8007c10:	e7a1      	b.n	8007b56 <__multiply+0x7e>
 8007c12:	bf00      	nop
 8007c14:	08009fe2 	.word	0x08009fe2
 8007c18:	08009ff3 	.word	0x08009ff3

08007c1c <__pow5mult>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	4615      	mov	r5, r2
 8007c22:	f012 0203 	ands.w	r2, r2, #3
 8007c26:	4607      	mov	r7, r0
 8007c28:	460e      	mov	r6, r1
 8007c2a:	d007      	beq.n	8007c3c <__pow5mult+0x20>
 8007c2c:	4c25      	ldr	r4, [pc, #148]	@ (8007cc4 <__pow5mult+0xa8>)
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	2300      	movs	r3, #0
 8007c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c36:	f7ff fea7 	bl	8007988 <__multadd>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	10ad      	asrs	r5, r5, #2
 8007c3e:	d03d      	beq.n	8007cbc <__pow5mult+0xa0>
 8007c40:	69fc      	ldr	r4, [r7, #28]
 8007c42:	b97c      	cbnz	r4, 8007c64 <__pow5mult+0x48>
 8007c44:	2010      	movs	r0, #16
 8007c46:	f7ff fd87 	bl	8007758 <malloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	61f8      	str	r0, [r7, #28]
 8007c4e:	b928      	cbnz	r0, 8007c5c <__pow5mult+0x40>
 8007c50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c54:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc8 <__pow5mult+0xac>)
 8007c56:	481d      	ldr	r0, [pc, #116]	@ (8007ccc <__pow5mult+0xb0>)
 8007c58:	f000 fbe6 	bl	8008428 <__assert_func>
 8007c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c60:	6004      	str	r4, [r0, #0]
 8007c62:	60c4      	str	r4, [r0, #12]
 8007c64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c6c:	b94c      	cbnz	r4, 8007c82 <__pow5mult+0x66>
 8007c6e:	f240 2171 	movw	r1, #625	@ 0x271
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff ff1a 	bl	8007aac <__i2b>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c80:	6003      	str	r3, [r0, #0]
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	07eb      	lsls	r3, r5, #31
 8007c88:	d50a      	bpl.n	8007ca0 <__pow5mult+0x84>
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7ff ff22 	bl	8007ad8 <__multiply>
 8007c94:	4680      	mov	r8, r0
 8007c96:	4631      	mov	r1, r6
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fe53 	bl	8007944 <_Bfree>
 8007c9e:	4646      	mov	r6, r8
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	d00b      	beq.n	8007cbc <__pow5mult+0xa0>
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	b938      	cbnz	r0, 8007cb8 <__pow5mult+0x9c>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4621      	mov	r1, r4
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff ff13 	bl	8007ad8 <__multiply>
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	f8c0 9000 	str.w	r9, [r0]
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e7e4      	b.n	8007c86 <__pow5mult+0x6a>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800a0a4 	.word	0x0800a0a4
 8007cc8:	08009f73 	.word	0x08009f73
 8007ccc:	08009ff3 	.word	0x08009ff3

08007cd0 <__lshift>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	4691      	mov	r9, r2
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	6849      	ldr	r1, [r1, #4]
 8007cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce8:	f108 0601 	add.w	r6, r8, #1
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	db0b      	blt.n	8007d08 <__lshift+0x38>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fde7 	bl	80078c4 <_Balloc>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b948      	cbnz	r0, 8007d0e <__lshift+0x3e>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d00:	4b27      	ldr	r3, [pc, #156]	@ (8007da0 <__lshift+0xd0>)
 8007d02:	4828      	ldr	r0, [pc, #160]	@ (8007da4 <__lshift+0xd4>)
 8007d04:	f000 fb90 	bl	8008428 <__assert_func>
 8007d08:	3101      	adds	r1, #1
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	e7ee      	b.n	8007cec <__lshift+0x1c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f100 0114 	add.w	r1, r0, #20
 8007d14:	f100 0210 	add.w	r2, r0, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4553      	cmp	r3, sl
 8007d1c:	db33      	blt.n	8007d86 <__lshift+0xb6>
 8007d1e:	6920      	ldr	r0, [r4, #16]
 8007d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d24:	f104 0314 	add.w	r3, r4, #20
 8007d28:	f019 091f 	ands.w	r9, r9, #31
 8007d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d34:	d02b      	beq.n	8007d8e <__lshift+0xbe>
 8007d36:	468a      	mov	sl, r1
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	fa00 f009 	lsl.w	r0, r0, r9
 8007d44:	4310      	orrs	r0, r2
 8007d46:	f84a 0b04 	str.w	r0, [sl], #4
 8007d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4e:	459c      	cmp	ip, r3
 8007d50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d54:	d8f3      	bhi.n	8007d3e <__lshift+0x6e>
 8007d56:	ebac 0304 	sub.w	r3, ip, r4
 8007d5a:	3b15      	subs	r3, #21
 8007d5c:	f023 0303 	bic.w	r3, r3, #3
 8007d60:	3304      	adds	r3, #4
 8007d62:	f104 0015 	add.w	r0, r4, #21
 8007d66:	4560      	cmp	r0, ip
 8007d68:	bf88      	it	hi
 8007d6a:	2304      	movhi	r3, #4
 8007d6c:	50ca      	str	r2, [r1, r3]
 8007d6e:	b10a      	cbz	r2, 8007d74 <__lshift+0xa4>
 8007d70:	f108 0602 	add.w	r6, r8, #2
 8007d74:	3e01      	subs	r6, #1
 8007d76:	4638      	mov	r0, r7
 8007d78:	4621      	mov	r1, r4
 8007d7a:	612e      	str	r6, [r5, #16]
 8007d7c:	f7ff fde2 	bl	8007944 <_Bfree>
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	e7c5      	b.n	8007d1a <__lshift+0x4a>
 8007d8e:	3904      	subs	r1, #4
 8007d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d94:	459c      	cmp	ip, r3
 8007d96:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d9a:	d8f9      	bhi.n	8007d90 <__lshift+0xc0>
 8007d9c:	e7ea      	b.n	8007d74 <__lshift+0xa4>
 8007d9e:	bf00      	nop
 8007da0:	08009fe2 	.word	0x08009fe2
 8007da4:	08009ff3 	.word	0x08009ff3

08007da8 <__mcmp>:
 8007da8:	4603      	mov	r3, r0
 8007daa:	690a      	ldr	r2, [r1, #16]
 8007dac:	6900      	ldr	r0, [r0, #16]
 8007dae:	b530      	push	{r4, r5, lr}
 8007db0:	1a80      	subs	r0, r0, r2
 8007db2:	d10e      	bne.n	8007dd2 <__mcmp+0x2a>
 8007db4:	3314      	adds	r3, #20
 8007db6:	3114      	adds	r1, #20
 8007db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dc8:	4295      	cmp	r5, r2
 8007dca:	d003      	beq.n	8007dd4 <__mcmp+0x2c>
 8007dcc:	d205      	bcs.n	8007dda <__mcmp+0x32>
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dd2:	bd30      	pop	{r4, r5, pc}
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d3f3      	bcc.n	8007dc0 <__mcmp+0x18>
 8007dd8:	e7fb      	b.n	8007dd2 <__mcmp+0x2a>
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e7f9      	b.n	8007dd2 <__mcmp+0x2a>
	...

08007de0 <__mdiff>:
 8007de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	4689      	mov	r9, r1
 8007de6:	4606      	mov	r6, r0
 8007de8:	4611      	mov	r1, r2
 8007dea:	4648      	mov	r0, r9
 8007dec:	4614      	mov	r4, r2
 8007dee:	f7ff ffdb 	bl	8007da8 <__mcmp>
 8007df2:	1e05      	subs	r5, r0, #0
 8007df4:	d112      	bne.n	8007e1c <__mdiff+0x3c>
 8007df6:	4629      	mov	r1, r5
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff fd63 	bl	80078c4 <_Balloc>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	b928      	cbnz	r0, 8007e0e <__mdiff+0x2e>
 8007e02:	f240 2137 	movw	r1, #567	@ 0x237
 8007e06:	4b3e      	ldr	r3, [pc, #248]	@ (8007f00 <__mdiff+0x120>)
 8007e08:	483e      	ldr	r0, [pc, #248]	@ (8007f04 <__mdiff+0x124>)
 8007e0a:	f000 fb0d 	bl	8008428 <__assert_func>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e14:	4610      	mov	r0, r2
 8007e16:	b003      	add	sp, #12
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	bfbc      	itt	lt
 8007e1e:	464b      	movlt	r3, r9
 8007e20:	46a1      	movlt	r9, r4
 8007e22:	4630      	mov	r0, r6
 8007e24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e28:	bfba      	itte	lt
 8007e2a:	461c      	movlt	r4, r3
 8007e2c:	2501      	movlt	r5, #1
 8007e2e:	2500      	movge	r5, #0
 8007e30:	f7ff fd48 	bl	80078c4 <_Balloc>
 8007e34:	4602      	mov	r2, r0
 8007e36:	b918      	cbnz	r0, 8007e40 <__mdiff+0x60>
 8007e38:	f240 2145 	movw	r1, #581	@ 0x245
 8007e3c:	4b30      	ldr	r3, [pc, #192]	@ (8007f00 <__mdiff+0x120>)
 8007e3e:	e7e3      	b.n	8007e08 <__mdiff+0x28>
 8007e40:	f100 0b14 	add.w	fp, r0, #20
 8007e44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e48:	f109 0310 	add.w	r3, r9, #16
 8007e4c:	60c5      	str	r5, [r0, #12]
 8007e4e:	f04f 0c00 	mov.w	ip, #0
 8007e52:	f109 0514 	add.w	r5, r9, #20
 8007e56:	46d9      	mov	r9, fp
 8007e58:	6926      	ldr	r6, [r4, #16]
 8007e5a:	f104 0e14 	add.w	lr, r4, #20
 8007e5e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e62:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e72:	b281      	uxth	r1, r0
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	fa1f f38a 	uxth.w	r3, sl
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	0c00      	lsrs	r0, r0, #16
 8007e7e:	4463      	add	r3, ip
 8007e80:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e84:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e8e:	4576      	cmp	r6, lr
 8007e90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e94:	f849 3b04 	str.w	r3, [r9], #4
 8007e98:	d8e6      	bhi.n	8007e68 <__mdiff+0x88>
 8007e9a:	1b33      	subs	r3, r6, r4
 8007e9c:	3b15      	subs	r3, #21
 8007e9e:	f023 0303 	bic.w	r3, r3, #3
 8007ea2:	3415      	adds	r4, #21
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	42a6      	cmp	r6, r4
 8007ea8:	bf38      	it	cc
 8007eaa:	2304      	movcc	r3, #4
 8007eac:	441d      	add	r5, r3
 8007eae:	445b      	add	r3, fp
 8007eb0:	461e      	mov	r6, r3
 8007eb2:	462c      	mov	r4, r5
 8007eb4:	4544      	cmp	r4, r8
 8007eb6:	d30e      	bcc.n	8007ed6 <__mdiff+0xf6>
 8007eb8:	f108 0103 	add.w	r1, r8, #3
 8007ebc:	1b49      	subs	r1, r1, r5
 8007ebe:	f021 0103 	bic.w	r1, r1, #3
 8007ec2:	3d03      	subs	r5, #3
 8007ec4:	45a8      	cmp	r8, r5
 8007ec6:	bf38      	it	cc
 8007ec8:	2100      	movcc	r1, #0
 8007eca:	440b      	add	r3, r1
 8007ecc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ed0:	b199      	cbz	r1, 8007efa <__mdiff+0x11a>
 8007ed2:	6117      	str	r7, [r2, #16]
 8007ed4:	e79e      	b.n	8007e14 <__mdiff+0x34>
 8007ed6:	46e6      	mov	lr, ip
 8007ed8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007edc:	fa1f fc81 	uxth.w	ip, r1
 8007ee0:	44f4      	add	ip, lr
 8007ee2:	0c08      	lsrs	r0, r1, #16
 8007ee4:	4471      	add	r1, lr
 8007ee6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eea:	b289      	uxth	r1, r1
 8007eec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ef0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ef4:	f846 1b04 	str.w	r1, [r6], #4
 8007ef8:	e7dc      	b.n	8007eb4 <__mdiff+0xd4>
 8007efa:	3f01      	subs	r7, #1
 8007efc:	e7e6      	b.n	8007ecc <__mdiff+0xec>
 8007efe:	bf00      	nop
 8007f00:	08009fe2 	.word	0x08009fe2
 8007f04:	08009ff3 	.word	0x08009ff3

08007f08 <__d2b>:
 8007f08:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4690      	mov	r8, r2
 8007f10:	4699      	mov	r9, r3
 8007f12:	9e08      	ldr	r6, [sp, #32]
 8007f14:	f7ff fcd6 	bl	80078c4 <_Balloc>
 8007f18:	4604      	mov	r4, r0
 8007f1a:	b930      	cbnz	r0, 8007f2a <__d2b+0x22>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f22:	4b23      	ldr	r3, [pc, #140]	@ (8007fb0 <__d2b+0xa8>)
 8007f24:	4823      	ldr	r0, [pc, #140]	@ (8007fb4 <__d2b+0xac>)
 8007f26:	f000 fa7f 	bl	8008428 <__assert_func>
 8007f2a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f32:	b10d      	cbz	r5, 8007f38 <__d2b+0x30>
 8007f34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	f1b8 0300 	subs.w	r3, r8, #0
 8007f3e:	d024      	beq.n	8007f8a <__d2b+0x82>
 8007f40:	4668      	mov	r0, sp
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	f7ff fd85 	bl	8007a52 <__lo0bits>
 8007f48:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f4c:	b1d8      	cbz	r0, 8007f86 <__d2b+0x7e>
 8007f4e:	f1c0 0320 	rsb	r3, r0, #32
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	430b      	orrs	r3, r1
 8007f58:	40c2      	lsrs	r2, r0
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	9201      	str	r2, [sp, #4]
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bf0c      	ite	eq
 8007f64:	2201      	moveq	r2, #1
 8007f66:	2202      	movne	r2, #2
 8007f68:	61a3      	str	r3, [r4, #24]
 8007f6a:	6122      	str	r2, [r4, #16]
 8007f6c:	b1ad      	cbz	r5, 8007f9a <__d2b+0x92>
 8007f6e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f72:	4405      	add	r5, r0
 8007f74:	6035      	str	r5, [r6, #0]
 8007f76:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	6018      	str	r0, [r3, #0]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	b002      	add	sp, #8
 8007f82:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007f86:	6161      	str	r1, [r4, #20]
 8007f88:	e7e9      	b.n	8007f5e <__d2b+0x56>
 8007f8a:	a801      	add	r0, sp, #4
 8007f8c:	f7ff fd61 	bl	8007a52 <__lo0bits>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	6163      	str	r3, [r4, #20]
 8007f96:	3020      	adds	r0, #32
 8007f98:	e7e7      	b.n	8007f6a <__d2b+0x62>
 8007f9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fa2:	6030      	str	r0, [r6, #0]
 8007fa4:	6918      	ldr	r0, [r3, #16]
 8007fa6:	f7ff fd35 	bl	8007a14 <__hi0bits>
 8007faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fae:	e7e4      	b.n	8007f7a <__d2b+0x72>
 8007fb0:	08009fe2 	.word	0x08009fe2
 8007fb4:	08009ff3 	.word	0x08009ff3

08007fb8 <__ssputs_r>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	461f      	mov	r7, r3
 8007fbe:	688e      	ldr	r6, [r1, #8]
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	42be      	cmp	r6, r7
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	680b      	ldr	r3, [r1, #0]
 8007fca:	d82d      	bhi.n	8008028 <__ssputs_r+0x70>
 8007fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fd4:	d026      	beq.n	8008024 <__ssputs_r+0x6c>
 8007fd6:	6965      	ldr	r5, [r4, #20]
 8007fd8:	6909      	ldr	r1, [r1, #16]
 8007fda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fde:	eba3 0901 	sub.w	r9, r3, r1
 8007fe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe6:	1c7b      	adds	r3, r7, #1
 8007fe8:	444b      	add	r3, r9
 8007fea:	106d      	asrs	r5, r5, #1
 8007fec:	429d      	cmp	r5, r3
 8007fee:	bf38      	it	cc
 8007ff0:	461d      	movcc	r5, r3
 8007ff2:	0553      	lsls	r3, r2, #21
 8007ff4:	d527      	bpl.n	8008046 <__ssputs_r+0x8e>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	f7ff fbd8 	bl	80077ac <_malloc_r>
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	b360      	cbz	r0, 800805a <__ssputs_r+0xa2>
 8008000:	464a      	mov	r2, r9
 8008002:	6921      	ldr	r1, [r4, #16]
 8008004:	f000 fa02 	bl	800840c <memcpy>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800800e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	6126      	str	r6, [r4, #16]
 8008016:	444e      	add	r6, r9
 8008018:	6026      	str	r6, [r4, #0]
 800801a:	463e      	mov	r6, r7
 800801c:	6165      	str	r5, [r4, #20]
 800801e:	eba5 0509 	sub.w	r5, r5, r9
 8008022:	60a5      	str	r5, [r4, #8]
 8008024:	42be      	cmp	r6, r7
 8008026:	d900      	bls.n	800802a <__ssputs_r+0x72>
 8008028:	463e      	mov	r6, r7
 800802a:	4632      	mov	r2, r6
 800802c:	4641      	mov	r1, r8
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	f000 f9c2 	bl	80083b8 <memmove>
 8008034:	2000      	movs	r0, #0
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	4433      	add	r3, r6
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	462a      	mov	r2, r5
 8008048:	f000 fa32 	bl	80084b0 <_realloc_r>
 800804c:	4606      	mov	r6, r0
 800804e:	2800      	cmp	r0, #0
 8008050:	d1e0      	bne.n	8008014 <__ssputs_r+0x5c>
 8008052:	4650      	mov	r0, sl
 8008054:	6921      	ldr	r1, [r4, #16]
 8008056:	f7ff fb37 	bl	80076c8 <_free_r>
 800805a:	230c      	movs	r3, #12
 800805c:	f8ca 3000 	str.w	r3, [sl]
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	e7e9      	b.n	8008042 <__ssputs_r+0x8a>
	...

08008070 <_svfiprintf_r>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4698      	mov	r8, r3
 8008076:	898b      	ldrh	r3, [r1, #12]
 8008078:	4607      	mov	r7, r0
 800807a:	061b      	lsls	r3, r3, #24
 800807c:	460d      	mov	r5, r1
 800807e:	4614      	mov	r4, r2
 8008080:	b09d      	sub	sp, #116	@ 0x74
 8008082:	d510      	bpl.n	80080a6 <_svfiprintf_r+0x36>
 8008084:	690b      	ldr	r3, [r1, #16]
 8008086:	b973      	cbnz	r3, 80080a6 <_svfiprintf_r+0x36>
 8008088:	2140      	movs	r1, #64	@ 0x40
 800808a:	f7ff fb8f 	bl	80077ac <_malloc_r>
 800808e:	6028      	str	r0, [r5, #0]
 8008090:	6128      	str	r0, [r5, #16]
 8008092:	b930      	cbnz	r0, 80080a2 <_svfiprintf_r+0x32>
 8008094:	230c      	movs	r3, #12
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800809c:	b01d      	add	sp, #116	@ 0x74
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	2340      	movs	r3, #64	@ 0x40
 80080a4:	616b      	str	r3, [r5, #20]
 80080a6:	2300      	movs	r3, #0
 80080a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080aa:	2320      	movs	r3, #32
 80080ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080b0:	2330      	movs	r3, #48	@ 0x30
 80080b2:	f04f 0901 	mov.w	r9, #1
 80080b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008254 <_svfiprintf_r+0x1e4>
 80080be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c2:	4623      	mov	r3, r4
 80080c4:	469a      	mov	sl, r3
 80080c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ca:	b10a      	cbz	r2, 80080d0 <_svfiprintf_r+0x60>
 80080cc:	2a25      	cmp	r2, #37	@ 0x25
 80080ce:	d1f9      	bne.n	80080c4 <_svfiprintf_r+0x54>
 80080d0:	ebba 0b04 	subs.w	fp, sl, r4
 80080d4:	d00b      	beq.n	80080ee <_svfiprintf_r+0x7e>
 80080d6:	465b      	mov	r3, fp
 80080d8:	4622      	mov	r2, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	4638      	mov	r0, r7
 80080de:	f7ff ff6b 	bl	8007fb8 <__ssputs_r>
 80080e2:	3001      	adds	r0, #1
 80080e4:	f000 80a7 	beq.w	8008236 <_svfiprintf_r+0x1c6>
 80080e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ea:	445a      	add	r2, fp
 80080ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ee:	f89a 3000 	ldrb.w	r3, [sl]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 809f 	beq.w	8008236 <_svfiprintf_r+0x1c6>
 80080f8:	2300      	movs	r3, #0
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008102:	f10a 0a01 	add.w	sl, sl, #1
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800810e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008110:	4654      	mov	r4, sl
 8008112:	2205      	movs	r2, #5
 8008114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008118:	484e      	ldr	r0, [pc, #312]	@ (8008254 <_svfiprintf_r+0x1e4>)
 800811a:	f7fe fc6a 	bl	80069f2 <memchr>
 800811e:	9a04      	ldr	r2, [sp, #16]
 8008120:	b9d8      	cbnz	r0, 800815a <_svfiprintf_r+0xea>
 8008122:	06d0      	lsls	r0, r2, #27
 8008124:	bf44      	itt	mi
 8008126:	2320      	movmi	r3, #32
 8008128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800812c:	0711      	lsls	r1, r2, #28
 800812e:	bf44      	itt	mi
 8008130:	232b      	movmi	r3, #43	@ 0x2b
 8008132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b2a      	cmp	r3, #42	@ 0x2a
 800813c:	d015      	beq.n	800816a <_svfiprintf_r+0xfa>
 800813e:	4654      	mov	r4, sl
 8008140:	2000      	movs	r0, #0
 8008142:	f04f 0c0a 	mov.w	ip, #10
 8008146:	9a07      	ldr	r2, [sp, #28]
 8008148:	4621      	mov	r1, r4
 800814a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800814e:	3b30      	subs	r3, #48	@ 0x30
 8008150:	2b09      	cmp	r3, #9
 8008152:	d94b      	bls.n	80081ec <_svfiprintf_r+0x17c>
 8008154:	b1b0      	cbz	r0, 8008184 <_svfiprintf_r+0x114>
 8008156:	9207      	str	r2, [sp, #28]
 8008158:	e014      	b.n	8008184 <_svfiprintf_r+0x114>
 800815a:	eba0 0308 	sub.w	r3, r0, r8
 800815e:	fa09 f303 	lsl.w	r3, r9, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	46a2      	mov	sl, r4
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	e7d2      	b.n	8008110 <_svfiprintf_r+0xa0>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	1d19      	adds	r1, r3, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	9103      	str	r1, [sp, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bfbb      	ittet	lt
 8008176:	425b      	neglt	r3, r3
 8008178:	f042 0202 	orrlt.w	r2, r2, #2
 800817c:	9307      	strge	r3, [sp, #28]
 800817e:	9307      	strlt	r3, [sp, #28]
 8008180:	bfb8      	it	lt
 8008182:	9204      	strlt	r2, [sp, #16]
 8008184:	7823      	ldrb	r3, [r4, #0]
 8008186:	2b2e      	cmp	r3, #46	@ 0x2e
 8008188:	d10a      	bne.n	80081a0 <_svfiprintf_r+0x130>
 800818a:	7863      	ldrb	r3, [r4, #1]
 800818c:	2b2a      	cmp	r3, #42	@ 0x2a
 800818e:	d132      	bne.n	80081f6 <_svfiprintf_r+0x186>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	3402      	adds	r4, #2
 8008194:	1d1a      	adds	r2, r3, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	9203      	str	r2, [sp, #12]
 800819a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008258 <_svfiprintf_r+0x1e8>
 80081a4:	2203      	movs	r2, #3
 80081a6:	4650      	mov	r0, sl
 80081a8:	7821      	ldrb	r1, [r4, #0]
 80081aa:	f7fe fc22 	bl	80069f2 <memchr>
 80081ae:	b138      	cbz	r0, 80081c0 <_svfiprintf_r+0x150>
 80081b0:	2240      	movs	r2, #64	@ 0x40
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	eba0 000a 	sub.w	r0, r0, sl
 80081b8:	4082      	lsls	r2, r0
 80081ba:	4313      	orrs	r3, r2
 80081bc:	3401      	adds	r4, #1
 80081be:	9304      	str	r3, [sp, #16]
 80081c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c4:	2206      	movs	r2, #6
 80081c6:	4825      	ldr	r0, [pc, #148]	@ (800825c <_svfiprintf_r+0x1ec>)
 80081c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081cc:	f7fe fc11 	bl	80069f2 <memchr>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d036      	beq.n	8008242 <_svfiprintf_r+0x1d2>
 80081d4:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <_svfiprintf_r+0x1f0>)
 80081d6:	bb1b      	cbnz	r3, 8008220 <_svfiprintf_r+0x1b0>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	3307      	adds	r3, #7
 80081dc:	f023 0307 	bic.w	r3, r3, #7
 80081e0:	3308      	adds	r3, #8
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e6:	4433      	add	r3, r6
 80081e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ea:	e76a      	b.n	80080c2 <_svfiprintf_r+0x52>
 80081ec:	460c      	mov	r4, r1
 80081ee:	2001      	movs	r0, #1
 80081f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f4:	e7a8      	b.n	8008148 <_svfiprintf_r+0xd8>
 80081f6:	2300      	movs	r3, #0
 80081f8:	f04f 0c0a 	mov.w	ip, #10
 80081fc:	4619      	mov	r1, r3
 80081fe:	3401      	adds	r4, #1
 8008200:	9305      	str	r3, [sp, #20]
 8008202:	4620      	mov	r0, r4
 8008204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008208:	3a30      	subs	r2, #48	@ 0x30
 800820a:	2a09      	cmp	r2, #9
 800820c:	d903      	bls.n	8008216 <_svfiprintf_r+0x1a6>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0c6      	beq.n	80081a0 <_svfiprintf_r+0x130>
 8008212:	9105      	str	r1, [sp, #20]
 8008214:	e7c4      	b.n	80081a0 <_svfiprintf_r+0x130>
 8008216:	4604      	mov	r4, r0
 8008218:	2301      	movs	r3, #1
 800821a:	fb0c 2101 	mla	r1, ip, r1, r2
 800821e:	e7f0      	b.n	8008202 <_svfiprintf_r+0x192>
 8008220:	ab03      	add	r3, sp, #12
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	462a      	mov	r2, r5
 8008226:	4638      	mov	r0, r7
 8008228:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <_svfiprintf_r+0x1f4>)
 800822a:	a904      	add	r1, sp, #16
 800822c:	f7fd fe7e 	bl	8005f2c <_printf_float>
 8008230:	1c42      	adds	r2, r0, #1
 8008232:	4606      	mov	r6, r0
 8008234:	d1d6      	bne.n	80081e4 <_svfiprintf_r+0x174>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	065b      	lsls	r3, r3, #25
 800823a:	f53f af2d 	bmi.w	8008098 <_svfiprintf_r+0x28>
 800823e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008240:	e72c      	b.n	800809c <_svfiprintf_r+0x2c>
 8008242:	ab03      	add	r3, sp, #12
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	462a      	mov	r2, r5
 8008248:	4638      	mov	r0, r7
 800824a:	4b06      	ldr	r3, [pc, #24]	@ (8008264 <_svfiprintf_r+0x1f4>)
 800824c:	a904      	add	r1, sp, #16
 800824e:	f7fe f90b 	bl	8006468 <_printf_i>
 8008252:	e7ed      	b.n	8008230 <_svfiprintf_r+0x1c0>
 8008254:	0800a04c 	.word	0x0800a04c
 8008258:	0800a052 	.word	0x0800a052
 800825c:	0800a056 	.word	0x0800a056
 8008260:	08005f2d 	.word	0x08005f2d
 8008264:	08007fb9 	.word	0x08007fb9

08008268 <__sflush_r>:
 8008268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	0716      	lsls	r6, r2, #28
 8008270:	4605      	mov	r5, r0
 8008272:	460c      	mov	r4, r1
 8008274:	d454      	bmi.n	8008320 <__sflush_r+0xb8>
 8008276:	684b      	ldr	r3, [r1, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dc02      	bgt.n	8008282 <__sflush_r+0x1a>
 800827c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd48      	ble.n	8008314 <__sflush_r+0xac>
 8008282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008284:	2e00      	cmp	r6, #0
 8008286:	d045      	beq.n	8008314 <__sflush_r+0xac>
 8008288:	2300      	movs	r3, #0
 800828a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800828e:	682f      	ldr	r7, [r5, #0]
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	d030      	beq.n	80082f8 <__sflush_r+0x90>
 8008296:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	0759      	lsls	r1, r3, #29
 800829c:	d505      	bpl.n	80082aa <__sflush_r+0x42>
 800829e:	6863      	ldr	r3, [r4, #4]
 80082a0:	1ad2      	subs	r2, r2, r3
 80082a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082a4:	b10b      	cbz	r3, 80082aa <__sflush_r+0x42>
 80082a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	2300      	movs	r3, #0
 80082ac:	4628      	mov	r0, r5
 80082ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082b0:	6a21      	ldr	r1, [r4, #32]
 80082b2:	47b0      	blx	r6
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	d106      	bne.n	80082c8 <__sflush_r+0x60>
 80082ba:	6829      	ldr	r1, [r5, #0]
 80082bc:	291d      	cmp	r1, #29
 80082be:	d82b      	bhi.n	8008318 <__sflush_r+0xb0>
 80082c0:	4a28      	ldr	r2, [pc, #160]	@ (8008364 <__sflush_r+0xfc>)
 80082c2:	40ca      	lsrs	r2, r1
 80082c4:	07d6      	lsls	r6, r2, #31
 80082c6:	d527      	bpl.n	8008318 <__sflush_r+0xb0>
 80082c8:	2200      	movs	r2, #0
 80082ca:	6062      	str	r2, [r4, #4]
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	04d9      	lsls	r1, r3, #19
 80082d0:	6022      	str	r2, [r4, #0]
 80082d2:	d504      	bpl.n	80082de <__sflush_r+0x76>
 80082d4:	1c42      	adds	r2, r0, #1
 80082d6:	d101      	bne.n	80082dc <__sflush_r+0x74>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b903      	cbnz	r3, 80082de <__sflush_r+0x76>
 80082dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80082de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082e0:	602f      	str	r7, [r5, #0]
 80082e2:	b1b9      	cbz	r1, 8008314 <__sflush_r+0xac>
 80082e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d002      	beq.n	80082f2 <__sflush_r+0x8a>
 80082ec:	4628      	mov	r0, r5
 80082ee:	f7ff f9eb 	bl	80076c8 <_free_r>
 80082f2:	2300      	movs	r3, #0
 80082f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082f6:	e00d      	b.n	8008314 <__sflush_r+0xac>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b0      	blx	r6
 80082fe:	4602      	mov	r2, r0
 8008300:	1c50      	adds	r0, r2, #1
 8008302:	d1c9      	bne.n	8008298 <__sflush_r+0x30>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c6      	beq.n	8008298 <__sflush_r+0x30>
 800830a:	2b1d      	cmp	r3, #29
 800830c:	d001      	beq.n	8008312 <__sflush_r+0xaa>
 800830e:	2b16      	cmp	r3, #22
 8008310:	d11d      	bne.n	800834e <__sflush_r+0xe6>
 8008312:	602f      	str	r7, [r5, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e021      	b.n	800835c <__sflush_r+0xf4>
 8008318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831c:	b21b      	sxth	r3, r3
 800831e:	e01a      	b.n	8008356 <__sflush_r+0xee>
 8008320:	690f      	ldr	r7, [r1, #16]
 8008322:	2f00      	cmp	r7, #0
 8008324:	d0f6      	beq.n	8008314 <__sflush_r+0xac>
 8008326:	0793      	lsls	r3, r2, #30
 8008328:	bf18      	it	ne
 800832a:	2300      	movne	r3, #0
 800832c:	680e      	ldr	r6, [r1, #0]
 800832e:	bf08      	it	eq
 8008330:	694b      	ldreq	r3, [r1, #20]
 8008332:	1bf6      	subs	r6, r6, r7
 8008334:	600f      	str	r7, [r1, #0]
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	2e00      	cmp	r6, #0
 800833a:	ddeb      	ble.n	8008314 <__sflush_r+0xac>
 800833c:	4633      	mov	r3, r6
 800833e:	463a      	mov	r2, r7
 8008340:	4628      	mov	r0, r5
 8008342:	6a21      	ldr	r1, [r4, #32]
 8008344:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008348:	47e0      	blx	ip
 800834a:	2800      	cmp	r0, #0
 800834c:	dc07      	bgt.n	800835e <__sflush_r+0xf6>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835e:	4407      	add	r7, r0
 8008360:	1a36      	subs	r6, r6, r0
 8008362:	e7e9      	b.n	8008338 <__sflush_r+0xd0>
 8008364:	20400001 	.word	0x20400001

08008368 <_fflush_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	690b      	ldr	r3, [r1, #16]
 800836c:	4605      	mov	r5, r0
 800836e:	460c      	mov	r4, r1
 8008370:	b913      	cbnz	r3, 8008378 <_fflush_r+0x10>
 8008372:	2500      	movs	r5, #0
 8008374:	4628      	mov	r0, r5
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	b118      	cbz	r0, 8008382 <_fflush_r+0x1a>
 800837a:	6a03      	ldr	r3, [r0, #32]
 800837c:	b90b      	cbnz	r3, 8008382 <_fflush_r+0x1a>
 800837e:	f7fe fa1d 	bl	80067bc <__sinit>
 8008382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f3      	beq.n	8008372 <_fflush_r+0xa>
 800838a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800838c:	07d0      	lsls	r0, r2, #31
 800838e:	d404      	bmi.n	800839a <_fflush_r+0x32>
 8008390:	0599      	lsls	r1, r3, #22
 8008392:	d402      	bmi.n	800839a <_fflush_r+0x32>
 8008394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008396:	f7fe fb2a 	bl	80069ee <__retarget_lock_acquire_recursive>
 800839a:	4628      	mov	r0, r5
 800839c:	4621      	mov	r1, r4
 800839e:	f7ff ff63 	bl	8008268 <__sflush_r>
 80083a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083a4:	4605      	mov	r5, r0
 80083a6:	07da      	lsls	r2, r3, #31
 80083a8:	d4e4      	bmi.n	8008374 <_fflush_r+0xc>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	059b      	lsls	r3, r3, #22
 80083ae:	d4e1      	bmi.n	8008374 <_fflush_r+0xc>
 80083b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083b2:	f7fe fb1d 	bl	80069f0 <__retarget_lock_release_recursive>
 80083b6:	e7dd      	b.n	8008374 <_fflush_r+0xc>

080083b8 <memmove>:
 80083b8:	4288      	cmp	r0, r1
 80083ba:	b510      	push	{r4, lr}
 80083bc:	eb01 0402 	add.w	r4, r1, r2
 80083c0:	d902      	bls.n	80083c8 <memmove+0x10>
 80083c2:	4284      	cmp	r4, r0
 80083c4:	4623      	mov	r3, r4
 80083c6:	d807      	bhi.n	80083d8 <memmove+0x20>
 80083c8:	1e43      	subs	r3, r0, #1
 80083ca:	42a1      	cmp	r1, r4
 80083cc:	d008      	beq.n	80083e0 <memmove+0x28>
 80083ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083d6:	e7f8      	b.n	80083ca <memmove+0x12>
 80083d8:	4601      	mov	r1, r0
 80083da:	4402      	add	r2, r0
 80083dc:	428a      	cmp	r2, r1
 80083de:	d100      	bne.n	80083e2 <memmove+0x2a>
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ea:	e7f7      	b.n	80083dc <memmove+0x24>

080083ec <_sbrk_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	2300      	movs	r3, #0
 80083f0:	4d05      	ldr	r5, [pc, #20]	@ (8008408 <_sbrk_r+0x1c>)
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 fde4 	bl	8001fc4 <_sbrk>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_sbrk_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_sbrk_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000e00 	.word	0x20000e00

0800840c <memcpy>:
 800840c:	440a      	add	r2, r1
 800840e:	4291      	cmp	r1, r2
 8008410:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008414:	d100      	bne.n	8008418 <memcpy+0xc>
 8008416:	4770      	bx	lr
 8008418:	b510      	push	{r4, lr}
 800841a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841e:	4291      	cmp	r1, r2
 8008420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008424:	d1f9      	bne.n	800841a <memcpy+0xe>
 8008426:	bd10      	pop	{r4, pc}

08008428 <__assert_func>:
 8008428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800842a:	4614      	mov	r4, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <__assert_func+0x2c>)
 8008430:	4605      	mov	r5, r0
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68d8      	ldr	r0, [r3, #12]
 8008436:	b14c      	cbz	r4, 800844c <__assert_func+0x24>
 8008438:	4b07      	ldr	r3, [pc, #28]	@ (8008458 <__assert_func+0x30>)
 800843a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800843e:	9100      	str	r1, [sp, #0]
 8008440:	462b      	mov	r3, r5
 8008442:	4906      	ldr	r1, [pc, #24]	@ (800845c <__assert_func+0x34>)
 8008444:	f000 f870 	bl	8008528 <fiprintf>
 8008448:	f000 f880 	bl	800854c <abort>
 800844c:	4b04      	ldr	r3, [pc, #16]	@ (8008460 <__assert_func+0x38>)
 800844e:	461c      	mov	r4, r3
 8008450:	e7f3      	b.n	800843a <__assert_func+0x12>
 8008452:	bf00      	nop
 8008454:	20000024 	.word	0x20000024
 8008458:	0800a067 	.word	0x0800a067
 800845c:	0800a074 	.word	0x0800a074
 8008460:	0800a0a2 	.word	0x0800a0a2

08008464 <_calloc_r>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	fba1 5402 	umull	r5, r4, r1, r2
 800846a:	b934      	cbnz	r4, 800847a <_calloc_r+0x16>
 800846c:	4629      	mov	r1, r5
 800846e:	f7ff f99d 	bl	80077ac <_malloc_r>
 8008472:	4606      	mov	r6, r0
 8008474:	b928      	cbnz	r0, 8008482 <_calloc_r+0x1e>
 8008476:	4630      	mov	r0, r6
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	220c      	movs	r2, #12
 800847c:	2600      	movs	r6, #0
 800847e:	6002      	str	r2, [r0, #0]
 8008480:	e7f9      	b.n	8008476 <_calloc_r+0x12>
 8008482:	462a      	mov	r2, r5
 8008484:	4621      	mov	r1, r4
 8008486:	f7fe fa34 	bl	80068f2 <memset>
 800848a:	e7f4      	b.n	8008476 <_calloc_r+0x12>

0800848c <__ascii_mbtowc>:
 800848c:	b082      	sub	sp, #8
 800848e:	b901      	cbnz	r1, 8008492 <__ascii_mbtowc+0x6>
 8008490:	a901      	add	r1, sp, #4
 8008492:	b142      	cbz	r2, 80084a6 <__ascii_mbtowc+0x1a>
 8008494:	b14b      	cbz	r3, 80084aa <__ascii_mbtowc+0x1e>
 8008496:	7813      	ldrb	r3, [r2, #0]
 8008498:	600b      	str	r3, [r1, #0]
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	1e10      	subs	r0, r2, #0
 800849e:	bf18      	it	ne
 80084a0:	2001      	movne	r0, #1
 80084a2:	b002      	add	sp, #8
 80084a4:	4770      	bx	lr
 80084a6:	4610      	mov	r0, r2
 80084a8:	e7fb      	b.n	80084a2 <__ascii_mbtowc+0x16>
 80084aa:	f06f 0001 	mvn.w	r0, #1
 80084ae:	e7f8      	b.n	80084a2 <__ascii_mbtowc+0x16>

080084b0 <_realloc_r>:
 80084b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b4:	4607      	mov	r7, r0
 80084b6:	4614      	mov	r4, r2
 80084b8:	460d      	mov	r5, r1
 80084ba:	b921      	cbnz	r1, 80084c6 <_realloc_r+0x16>
 80084bc:	4611      	mov	r1, r2
 80084be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	f7ff b973 	b.w	80077ac <_malloc_r>
 80084c6:	b92a      	cbnz	r2, 80084d4 <_realloc_r+0x24>
 80084c8:	f7ff f8fe 	bl	80076c8 <_free_r>
 80084cc:	4625      	mov	r5, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d4:	f000 f841 	bl	800855a <_malloc_usable_size_r>
 80084d8:	4284      	cmp	r4, r0
 80084da:	4606      	mov	r6, r0
 80084dc:	d802      	bhi.n	80084e4 <_realloc_r+0x34>
 80084de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084e2:	d8f4      	bhi.n	80084ce <_realloc_r+0x1e>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4638      	mov	r0, r7
 80084e8:	f7ff f960 	bl	80077ac <_malloc_r>
 80084ec:	4680      	mov	r8, r0
 80084ee:	b908      	cbnz	r0, 80084f4 <_realloc_r+0x44>
 80084f0:	4645      	mov	r5, r8
 80084f2:	e7ec      	b.n	80084ce <_realloc_r+0x1e>
 80084f4:	42b4      	cmp	r4, r6
 80084f6:	4622      	mov	r2, r4
 80084f8:	4629      	mov	r1, r5
 80084fa:	bf28      	it	cs
 80084fc:	4632      	movcs	r2, r6
 80084fe:	f7ff ff85 	bl	800840c <memcpy>
 8008502:	4629      	mov	r1, r5
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff f8df 	bl	80076c8 <_free_r>
 800850a:	e7f1      	b.n	80084f0 <_realloc_r+0x40>

0800850c <__ascii_wctomb>:
 800850c:	4603      	mov	r3, r0
 800850e:	4608      	mov	r0, r1
 8008510:	b141      	cbz	r1, 8008524 <__ascii_wctomb+0x18>
 8008512:	2aff      	cmp	r2, #255	@ 0xff
 8008514:	d904      	bls.n	8008520 <__ascii_wctomb+0x14>
 8008516:	228a      	movs	r2, #138	@ 0x8a
 8008518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	4770      	bx	lr
 8008520:	2001      	movs	r0, #1
 8008522:	700a      	strb	r2, [r1, #0]
 8008524:	4770      	bx	lr
	...

08008528 <fiprintf>:
 8008528:	b40e      	push	{r1, r2, r3}
 800852a:	b503      	push	{r0, r1, lr}
 800852c:	4601      	mov	r1, r0
 800852e:	ab03      	add	r3, sp, #12
 8008530:	4805      	ldr	r0, [pc, #20]	@ (8008548 <fiprintf+0x20>)
 8008532:	f853 2b04 	ldr.w	r2, [r3], #4
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	f000 f83d 	bl	80085b8 <_vfiprintf_r>
 800853e:	b002      	add	sp, #8
 8008540:	f85d eb04 	ldr.w	lr, [sp], #4
 8008544:	b003      	add	sp, #12
 8008546:	4770      	bx	lr
 8008548:	20000024 	.word	0x20000024

0800854c <abort>:
 800854c:	2006      	movs	r0, #6
 800854e:	b508      	push	{r3, lr}
 8008550:	f000 fa06 	bl	8008960 <raise>
 8008554:	2001      	movs	r0, #1
 8008556:	f7f9 fcc0 	bl	8001eda <_exit>

0800855a <_malloc_usable_size_r>:
 800855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855e:	1f18      	subs	r0, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	bfbc      	itt	lt
 8008564:	580b      	ldrlt	r3, [r1, r0]
 8008566:	18c0      	addlt	r0, r0, r3
 8008568:	4770      	bx	lr

0800856a <__sfputc_r>:
 800856a:	6893      	ldr	r3, [r2, #8]
 800856c:	b410      	push	{r4}
 800856e:	3b01      	subs	r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	6093      	str	r3, [r2, #8]
 8008574:	da07      	bge.n	8008586 <__sfputc_r+0x1c>
 8008576:	6994      	ldr	r4, [r2, #24]
 8008578:	42a3      	cmp	r3, r4
 800857a:	db01      	blt.n	8008580 <__sfputc_r+0x16>
 800857c:	290a      	cmp	r1, #10
 800857e:	d102      	bne.n	8008586 <__sfputc_r+0x1c>
 8008580:	bc10      	pop	{r4}
 8008582:	f000 b931 	b.w	80087e8 <__swbuf_r>
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	1c58      	adds	r0, r3, #1
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	7019      	strb	r1, [r3, #0]
 800858e:	4608      	mov	r0, r1
 8008590:	bc10      	pop	{r4}
 8008592:	4770      	bx	lr

08008594 <__sfputs_r>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	4606      	mov	r6, r0
 8008598:	460f      	mov	r7, r1
 800859a:	4614      	mov	r4, r2
 800859c:	18d5      	adds	r5, r2, r3
 800859e:	42ac      	cmp	r4, r5
 80085a0:	d101      	bne.n	80085a6 <__sfputs_r+0x12>
 80085a2:	2000      	movs	r0, #0
 80085a4:	e007      	b.n	80085b6 <__sfputs_r+0x22>
 80085a6:	463a      	mov	r2, r7
 80085a8:	4630      	mov	r0, r6
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	f7ff ffdc 	bl	800856a <__sfputc_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d1f3      	bne.n	800859e <__sfputs_r+0xa>
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085b8 <_vfiprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	460d      	mov	r5, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	4698      	mov	r8, r3
 80085c2:	4606      	mov	r6, r0
 80085c4:	b09d      	sub	sp, #116	@ 0x74
 80085c6:	b118      	cbz	r0, 80085d0 <_vfiprintf_r+0x18>
 80085c8:	6a03      	ldr	r3, [r0, #32]
 80085ca:	b90b      	cbnz	r3, 80085d0 <_vfiprintf_r+0x18>
 80085cc:	f7fe f8f6 	bl	80067bc <__sinit>
 80085d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d405      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	059a      	lsls	r2, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085de:	f7fe fa06 	bl	80069ee <__retarget_lock_acquire_recursive>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	d501      	bpl.n	80085ec <_vfiprintf_r+0x34>
 80085e8:	692b      	ldr	r3, [r5, #16]
 80085ea:	b99b      	cbnz	r3, 8008614 <_vfiprintf_r+0x5c>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f000 f938 	bl	8008864 <__swsetup_r>
 80085f4:	b170      	cbz	r0, 8008614 <_vfiprintf_r+0x5c>
 80085f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f8:	07dc      	lsls	r4, r3, #31
 80085fa:	d504      	bpl.n	8008606 <_vfiprintf_r+0x4e>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008600:	b01d      	add	sp, #116	@ 0x74
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	0598      	lsls	r0, r3, #22
 800860a:	d4f7      	bmi.n	80085fc <_vfiprintf_r+0x44>
 800860c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860e:	f7fe f9ef 	bl	80069f0 <__retarget_lock_release_recursive>
 8008612:	e7f3      	b.n	80085fc <_vfiprintf_r+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	@ 0x24
 8008618:	2320      	movs	r3, #32
 800861a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800861e:	2330      	movs	r3, #48	@ 0x30
 8008620:	f04f 0901 	mov.w	r9, #1
 8008624:	f8cd 800c 	str.w	r8, [sp, #12]
 8008628:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80087d4 <_vfiprintf_r+0x21c>
 800862c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008630:	4623      	mov	r3, r4
 8008632:	469a      	mov	sl, r3
 8008634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008638:	b10a      	cbz	r2, 800863e <_vfiprintf_r+0x86>
 800863a:	2a25      	cmp	r2, #37	@ 0x25
 800863c:	d1f9      	bne.n	8008632 <_vfiprintf_r+0x7a>
 800863e:	ebba 0b04 	subs.w	fp, sl, r4
 8008642:	d00b      	beq.n	800865c <_vfiprintf_r+0xa4>
 8008644:	465b      	mov	r3, fp
 8008646:	4622      	mov	r2, r4
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ffa2 	bl	8008594 <__sfputs_r>
 8008650:	3001      	adds	r0, #1
 8008652:	f000 80a7 	beq.w	80087a4 <_vfiprintf_r+0x1ec>
 8008656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008658:	445a      	add	r2, fp
 800865a:	9209      	str	r2, [sp, #36]	@ 0x24
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 809f 	beq.w	80087a4 <_vfiprintf_r+0x1ec>
 8008666:	2300      	movs	r3, #0
 8008668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800866c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008670:	f10a 0a01 	add.w	sl, sl, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800867c:	931a      	str	r3, [sp, #104]	@ 0x68
 800867e:	4654      	mov	r4, sl
 8008680:	2205      	movs	r2, #5
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4853      	ldr	r0, [pc, #332]	@ (80087d4 <_vfiprintf_r+0x21c>)
 8008688:	f7fe f9b3 	bl	80069f2 <memchr>
 800868c:	9a04      	ldr	r2, [sp, #16]
 800868e:	b9d8      	cbnz	r0, 80086c8 <_vfiprintf_r+0x110>
 8008690:	06d1      	lsls	r1, r2, #27
 8008692:	bf44      	itt	mi
 8008694:	2320      	movmi	r3, #32
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800869a:	0713      	lsls	r3, r2, #28
 800869c:	bf44      	itt	mi
 800869e:	232b      	movmi	r3, #43	@ 0x2b
 80086a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086aa:	d015      	beq.n	80086d8 <_vfiprintf_r+0x120>
 80086ac:	4654      	mov	r4, sl
 80086ae:	2000      	movs	r0, #0
 80086b0:	f04f 0c0a 	mov.w	ip, #10
 80086b4:	9a07      	ldr	r2, [sp, #28]
 80086b6:	4621      	mov	r1, r4
 80086b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086bc:	3b30      	subs	r3, #48	@ 0x30
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d94b      	bls.n	800875a <_vfiprintf_r+0x1a2>
 80086c2:	b1b0      	cbz	r0, 80086f2 <_vfiprintf_r+0x13a>
 80086c4:	9207      	str	r2, [sp, #28]
 80086c6:	e014      	b.n	80086f2 <_vfiprintf_r+0x13a>
 80086c8:	eba0 0308 	sub.w	r3, r0, r8
 80086cc:	fa09 f303 	lsl.w	r3, r9, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	46a2      	mov	sl, r4
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	e7d2      	b.n	800867e <_vfiprintf_r+0xc6>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbb      	ittet	lt
 80086e4:	425b      	neglt	r3, r3
 80086e6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ea:	9307      	strge	r3, [sp, #28]
 80086ec:	9307      	strlt	r3, [sp, #28]
 80086ee:	bfb8      	it	lt
 80086f0:	9204      	strlt	r2, [sp, #16]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f6:	d10a      	bne.n	800870e <_vfiprintf_r+0x156>
 80086f8:	7863      	ldrb	r3, [r4, #1]
 80086fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fc:	d132      	bne.n	8008764 <_vfiprintf_r+0x1ac>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3402      	adds	r4, #2
 8008702:	1d1a      	adds	r2, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	9203      	str	r2, [sp, #12]
 8008708:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80087d8 <_vfiprintf_r+0x220>
 8008712:	2203      	movs	r2, #3
 8008714:	4650      	mov	r0, sl
 8008716:	7821      	ldrb	r1, [r4, #0]
 8008718:	f7fe f96b 	bl	80069f2 <memchr>
 800871c:	b138      	cbz	r0, 800872e <_vfiprintf_r+0x176>
 800871e:	2240      	movs	r2, #64	@ 0x40
 8008720:	9b04      	ldr	r3, [sp, #16]
 8008722:	eba0 000a 	sub.w	r0, r0, sl
 8008726:	4082      	lsls	r2, r0
 8008728:	4313      	orrs	r3, r2
 800872a:	3401      	adds	r4, #1
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008732:	2206      	movs	r2, #6
 8008734:	4829      	ldr	r0, [pc, #164]	@ (80087dc <_vfiprintf_r+0x224>)
 8008736:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800873a:	f7fe f95a 	bl	80069f2 <memchr>
 800873e:	2800      	cmp	r0, #0
 8008740:	d03f      	beq.n	80087c2 <_vfiprintf_r+0x20a>
 8008742:	4b27      	ldr	r3, [pc, #156]	@ (80087e0 <_vfiprintf_r+0x228>)
 8008744:	bb1b      	cbnz	r3, 800878e <_vfiprintf_r+0x1d6>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3307      	adds	r3, #7
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	3308      	adds	r3, #8
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008754:	443b      	add	r3, r7
 8008756:	9309      	str	r3, [sp, #36]	@ 0x24
 8008758:	e76a      	b.n	8008630 <_vfiprintf_r+0x78>
 800875a:	460c      	mov	r4, r1
 800875c:	2001      	movs	r0, #1
 800875e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008762:	e7a8      	b.n	80086b6 <_vfiprintf_r+0xfe>
 8008764:	2300      	movs	r3, #0
 8008766:	f04f 0c0a 	mov.w	ip, #10
 800876a:	4619      	mov	r1, r3
 800876c:	3401      	adds	r4, #1
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	4620      	mov	r0, r4
 8008772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008776:	3a30      	subs	r2, #48	@ 0x30
 8008778:	2a09      	cmp	r2, #9
 800877a:	d903      	bls.n	8008784 <_vfiprintf_r+0x1cc>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0c6      	beq.n	800870e <_vfiprintf_r+0x156>
 8008780:	9105      	str	r1, [sp, #20]
 8008782:	e7c4      	b.n	800870e <_vfiprintf_r+0x156>
 8008784:	4604      	mov	r4, r0
 8008786:	2301      	movs	r3, #1
 8008788:	fb0c 2101 	mla	r1, ip, r1, r2
 800878c:	e7f0      	b.n	8008770 <_vfiprintf_r+0x1b8>
 800878e:	ab03      	add	r3, sp, #12
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	462a      	mov	r2, r5
 8008794:	4630      	mov	r0, r6
 8008796:	4b13      	ldr	r3, [pc, #76]	@ (80087e4 <_vfiprintf_r+0x22c>)
 8008798:	a904      	add	r1, sp, #16
 800879a:	f7fd fbc7 	bl	8005f2c <_printf_float>
 800879e:	4607      	mov	r7, r0
 80087a0:	1c78      	adds	r0, r7, #1
 80087a2:	d1d6      	bne.n	8008752 <_vfiprintf_r+0x19a>
 80087a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a6:	07d9      	lsls	r1, r3, #31
 80087a8:	d405      	bmi.n	80087b6 <_vfiprintf_r+0x1fe>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	059a      	lsls	r2, r3, #22
 80087ae:	d402      	bmi.n	80087b6 <_vfiprintf_r+0x1fe>
 80087b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087b2:	f7fe f91d 	bl	80069f0 <__retarget_lock_release_recursive>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	065b      	lsls	r3, r3, #25
 80087ba:	f53f af1f 	bmi.w	80085fc <_vfiprintf_r+0x44>
 80087be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c0:	e71e      	b.n	8008600 <_vfiprintf_r+0x48>
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	462a      	mov	r2, r5
 80087c8:	4630      	mov	r0, r6
 80087ca:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <_vfiprintf_r+0x22c>)
 80087cc:	a904      	add	r1, sp, #16
 80087ce:	f7fd fe4b 	bl	8006468 <_printf_i>
 80087d2:	e7e4      	b.n	800879e <_vfiprintf_r+0x1e6>
 80087d4:	0800a04c 	.word	0x0800a04c
 80087d8:	0800a052 	.word	0x0800a052
 80087dc:	0800a056 	.word	0x0800a056
 80087e0:	08005f2d 	.word	0x08005f2d
 80087e4:	08008595 	.word	0x08008595

080087e8 <__swbuf_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	460e      	mov	r6, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	4605      	mov	r5, r0
 80087f0:	b118      	cbz	r0, 80087fa <__swbuf_r+0x12>
 80087f2:	6a03      	ldr	r3, [r0, #32]
 80087f4:	b90b      	cbnz	r3, 80087fa <__swbuf_r+0x12>
 80087f6:	f7fd ffe1 	bl	80067bc <__sinit>
 80087fa:	69a3      	ldr	r3, [r4, #24]
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	071a      	lsls	r2, r3, #28
 8008802:	d501      	bpl.n	8008808 <__swbuf_r+0x20>
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	b943      	cbnz	r3, 800881a <__swbuf_r+0x32>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f82a 	bl	8008864 <__swsetup_r>
 8008810:	b118      	cbz	r0, 800881a <__swbuf_r+0x32>
 8008812:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008816:	4638      	mov	r0, r7
 8008818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	b2f6      	uxtb	r6, r6
 8008820:	1a98      	subs	r0, r3, r2
 8008822:	6963      	ldr	r3, [r4, #20]
 8008824:	4637      	mov	r7, r6
 8008826:	4283      	cmp	r3, r0
 8008828:	dc05      	bgt.n	8008836 <__swbuf_r+0x4e>
 800882a:	4621      	mov	r1, r4
 800882c:	4628      	mov	r0, r5
 800882e:	f7ff fd9b 	bl	8008368 <_fflush_r>
 8008832:	2800      	cmp	r0, #0
 8008834:	d1ed      	bne.n	8008812 <__swbuf_r+0x2a>
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	701e      	strb	r6, [r3, #0]
 8008844:	6962      	ldr	r2, [r4, #20]
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	429a      	cmp	r2, r3
 800884a:	d004      	beq.n	8008856 <__swbuf_r+0x6e>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	07db      	lsls	r3, r3, #31
 8008850:	d5e1      	bpl.n	8008816 <__swbuf_r+0x2e>
 8008852:	2e0a      	cmp	r6, #10
 8008854:	d1df      	bne.n	8008816 <__swbuf_r+0x2e>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f7ff fd85 	bl	8008368 <_fflush_r>
 800885e:	2800      	cmp	r0, #0
 8008860:	d0d9      	beq.n	8008816 <__swbuf_r+0x2e>
 8008862:	e7d6      	b.n	8008812 <__swbuf_r+0x2a>

08008864 <__swsetup_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4b29      	ldr	r3, [pc, #164]	@ (800890c <__swsetup_r+0xa8>)
 8008868:	4605      	mov	r5, r0
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	460c      	mov	r4, r1
 800886e:	b118      	cbz	r0, 8008878 <__swsetup_r+0x14>
 8008870:	6a03      	ldr	r3, [r0, #32]
 8008872:	b90b      	cbnz	r3, 8008878 <__swsetup_r+0x14>
 8008874:	f7fd ffa2 	bl	80067bc <__sinit>
 8008878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887c:	0719      	lsls	r1, r3, #28
 800887e:	d422      	bmi.n	80088c6 <__swsetup_r+0x62>
 8008880:	06da      	lsls	r2, r3, #27
 8008882:	d407      	bmi.n	8008894 <__swsetup_r+0x30>
 8008884:	2209      	movs	r2, #9
 8008886:	602a      	str	r2, [r5, #0]
 8008888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	e033      	b.n	80088fc <__swsetup_r+0x98>
 8008894:	0758      	lsls	r0, r3, #29
 8008896:	d512      	bpl.n	80088be <__swsetup_r+0x5a>
 8008898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889a:	b141      	cbz	r1, 80088ae <__swsetup_r+0x4a>
 800889c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a0:	4299      	cmp	r1, r3
 80088a2:	d002      	beq.n	80088aa <__swsetup_r+0x46>
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7fe ff0f 	bl	80076c8 <_free_r>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0308 	orr.w	r3, r3, #8
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	b94b      	cbnz	r3, 80088de <__swsetup_r+0x7a>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d4:	d003      	beq.n	80088de <__swsetup_r+0x7a>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f882 	bl	80089e2 <__smakebuf_r>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	f013 0201 	ands.w	r2, r3, #1
 80088e6:	d00a      	beq.n	80088fe <__swsetup_r+0x9a>
 80088e8:	2200      	movs	r2, #0
 80088ea:	60a2      	str	r2, [r4, #8]
 80088ec:	6962      	ldr	r2, [r4, #20]
 80088ee:	4252      	negs	r2, r2
 80088f0:	61a2      	str	r2, [r4, #24]
 80088f2:	6922      	ldr	r2, [r4, #16]
 80088f4:	b942      	cbnz	r2, 8008908 <__swsetup_r+0xa4>
 80088f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088fa:	d1c5      	bne.n	8008888 <__swsetup_r+0x24>
 80088fc:	bd38      	pop	{r3, r4, r5, pc}
 80088fe:	0799      	lsls	r1, r3, #30
 8008900:	bf58      	it	pl
 8008902:	6962      	ldrpl	r2, [r4, #20]
 8008904:	60a2      	str	r2, [r4, #8]
 8008906:	e7f4      	b.n	80088f2 <__swsetup_r+0x8e>
 8008908:	2000      	movs	r0, #0
 800890a:	e7f7      	b.n	80088fc <__swsetup_r+0x98>
 800890c:	20000024 	.word	0x20000024

08008910 <_raise_r>:
 8008910:	291f      	cmp	r1, #31
 8008912:	b538      	push	{r3, r4, r5, lr}
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	d904      	bls.n	8008924 <_raise_r+0x14>
 800891a:	2316      	movs	r3, #22
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008926:	b112      	cbz	r2, 800892e <_raise_r+0x1e>
 8008928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800892c:	b94b      	cbnz	r3, 8008942 <_raise_r+0x32>
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f830 	bl	8008994 <_getpid_r>
 8008934:	4622      	mov	r2, r4
 8008936:	4601      	mov	r1, r0
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800893e:	f000 b817 	b.w	8008970 <_kill_r>
 8008942:	2b01      	cmp	r3, #1
 8008944:	d00a      	beq.n	800895c <_raise_r+0x4c>
 8008946:	1c59      	adds	r1, r3, #1
 8008948:	d103      	bne.n	8008952 <_raise_r+0x42>
 800894a:	2316      	movs	r3, #22
 800894c:	6003      	str	r3, [r0, #0]
 800894e:	2001      	movs	r0, #1
 8008950:	e7e7      	b.n	8008922 <_raise_r+0x12>
 8008952:	2100      	movs	r1, #0
 8008954:	4620      	mov	r0, r4
 8008956:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800895a:	4798      	blx	r3
 800895c:	2000      	movs	r0, #0
 800895e:	e7e0      	b.n	8008922 <_raise_r+0x12>

08008960 <raise>:
 8008960:	4b02      	ldr	r3, [pc, #8]	@ (800896c <raise+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f7ff bfd3 	b.w	8008910 <_raise_r>
 800896a:	bf00      	nop
 800896c:	20000024 	.word	0x20000024

08008970 <_kill_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	2300      	movs	r3, #0
 8008974:	4d06      	ldr	r5, [pc, #24]	@ (8008990 <_kill_r+0x20>)
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	f7f9 fa9c 	bl	8001eba <_kill>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d102      	bne.n	800898c <_kill_r+0x1c>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	b103      	cbz	r3, 800898c <_kill_r+0x1c>
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	bd38      	pop	{r3, r4, r5, pc}
 800898e:	bf00      	nop
 8008990:	20000e00 	.word	0x20000e00

08008994 <_getpid_r>:
 8008994:	f7f9 ba8a 	b.w	8001eac <_getpid>

08008998 <__swhatbuf_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	460c      	mov	r4, r1
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	4615      	mov	r5, r2
 80089a2:	2900      	cmp	r1, #0
 80089a4:	461e      	mov	r6, r3
 80089a6:	b096      	sub	sp, #88	@ 0x58
 80089a8:	da0c      	bge.n	80089c4 <__swhatbuf_r+0x2c>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	2100      	movs	r1, #0
 80089ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089b2:	bf14      	ite	ne
 80089b4:	2340      	movne	r3, #64	@ 0x40
 80089b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089ba:	2000      	movs	r0, #0
 80089bc:	6031      	str	r1, [r6, #0]
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	b016      	add	sp, #88	@ 0x58
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	466a      	mov	r2, sp
 80089c6:	f000 f849 	bl	8008a5c <_fstat_r>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	dbed      	blt.n	80089aa <__swhatbuf_r+0x12>
 80089ce:	9901      	ldr	r1, [sp, #4]
 80089d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089d8:	4259      	negs	r1, r3
 80089da:	4159      	adcs	r1, r3
 80089dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089e0:	e7eb      	b.n	80089ba <__swhatbuf_r+0x22>

080089e2 <__smakebuf_r>:
 80089e2:	898b      	ldrh	r3, [r1, #12]
 80089e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089e6:	079d      	lsls	r5, r3, #30
 80089e8:	4606      	mov	r6, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	d507      	bpl.n	80089fe <__smakebuf_r+0x1c>
 80089ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	2301      	movs	r3, #1
 80089f8:	6163      	str	r3, [r4, #20]
 80089fa:	b003      	add	sp, #12
 80089fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fe:	466a      	mov	r2, sp
 8008a00:	ab01      	add	r3, sp, #4
 8008a02:	f7ff ffc9 	bl	8008998 <__swhatbuf_r>
 8008a06:	9f00      	ldr	r7, [sp, #0]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7fe fecd 	bl	80077ac <_malloc_r>
 8008a12:	b948      	cbnz	r0, 8008a28 <__smakebuf_r+0x46>
 8008a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d4ee      	bmi.n	80089fa <__smakebuf_r+0x18>
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	f043 0302 	orr.w	r3, r3, #2
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	e7e2      	b.n	80089ee <__smakebuf_r+0xc>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	9b01      	ldr	r3, [sp, #4]
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	b15b      	cbz	r3, 8008a52 <__smakebuf_r+0x70>
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a40:	f000 f81e 	bl	8008a80 <_isatty_r>
 8008a44:	b128      	cbz	r0, 8008a52 <__smakebuf_r+0x70>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f023 0303 	bic.w	r3, r3, #3
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	431d      	orrs	r5, r3
 8008a56:	81a5      	strh	r5, [r4, #12]
 8008a58:	e7cf      	b.n	80089fa <__smakebuf_r+0x18>
	...

08008a5c <_fstat_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	2300      	movs	r3, #0
 8008a60:	4d06      	ldr	r5, [pc, #24]	@ (8008a7c <_fstat_r+0x20>)
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	f7f9 fa85 	bl	8001f78 <_fstat>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d102      	bne.n	8008a78 <_fstat_r+0x1c>
 8008a72:	682b      	ldr	r3, [r5, #0]
 8008a74:	b103      	cbz	r3, 8008a78 <_fstat_r+0x1c>
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000e00 	.word	0x20000e00

08008a80 <_isatty_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	2300      	movs	r3, #0
 8008a84:	4d05      	ldr	r5, [pc, #20]	@ (8008a9c <_isatty_r+0x1c>)
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 fa83 	bl	8001f96 <_isatty>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_isatty_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_isatty_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20000e00 	.word	0x20000e00

08008aa0 <_init>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr

08008aac <_fini>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr
