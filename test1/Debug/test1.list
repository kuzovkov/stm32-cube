
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001e2c  08001e2c  00002e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb4  08001eb4  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001eb4  08001eb4  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001eb4  08001eb4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb4  08001eb4  00002eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eb8  08001eb8  00002eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001ebc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000005c  08001f18  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08001f18  0000324c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036fd  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d3  00000000  00000000  00006782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00007b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000391  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ee  00000000  00000000  000083f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005eaf  00000000  00000000  000205df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a62  00000000  00000000  0002648e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a4  00000000  00000000  000a8f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000aa5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e14 	.word	0x08001e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001e14 	.word	0x08001e14

0800014c <trace_printf>:

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 800014c:	b40f      	push	{r0, r1, r2, r3}
 800014e:	b580      	push	{r7, lr}
 8000150:	b082      	sub	sp, #8
 8000152:	af00      	add	r7, sp, #0
  int ret;
  va_list ap;

  va_start (ap, format);
 8000154:	f107 0314 	add.w	r3, r7, #20
 8000158:	603b      	str	r3, [r7, #0]
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 800015a:	683b      	ldr	r3, [r7, #0]
 800015c:	693a      	ldr	r2, [r7, #16]
 800015e:	2180      	movs	r1, #128	@ 0x80
 8000160:	480a      	ldr	r0, [pc, #40]	@ (800018c <trace_printf+0x40>)
 8000162:	f001 f9bb 	bl	80014dc <vsniprintf>
 8000166:	6078      	str	r0, [r7, #4]
  if (ret > 0)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b00      	cmp	r3, #0
 800016c:	dd05      	ble.n	800017a <trace_printf+0x2e>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4619      	mov	r1, r3
 8000172:	4806      	ldr	r0, [pc, #24]	@ (800018c <trace_printf+0x40>)
 8000174:	f000 f80c 	bl	8000190 <trace_write>
 8000178:	6078      	str	r0, [r7, #4]
    }

  va_end (ap);
  return ret;
 800017a:	687b      	ldr	r3, [r7, #4]
}
 800017c:	4618      	mov	r0, r3
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000186:	b004      	add	sp, #16
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	20000078 	.word	0x20000078

08000190 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
 800019a:	6839      	ldr	r1, [r7, #0]
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 f805 	bl	80001ac <_trace_write_semihosting_debug>
 80001a2:	4603      	mov	r3, r0
#endif

  return -1;
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <_trace_write_semihosting_debug>:

#define OS_INTEGER_TRACE_TMP_ARRAY_SIZE  (16)

static ssize_t
_trace_write_semihosting_debug (const char* buf, size_t nbyte)
{
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	b090      	sub	sp, #64	@ 0x40
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
  // Since the single character debug channel is quite slow, try to
  // optimise and send a null terminated string, if possible.
  if (buf[nbyte] == '\0')
 80001b6:	687a      	ldr	r2, [r7, #4]
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	4413      	add	r3, r2
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10b      	bne.n	80001da <_trace_write_semihosting_debug+0x2e>
 80001c2:	2304      	movs	r3, #4
 80001c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
static inline int
__attribute__ ((always_inline))
call_host (int reason, void* arg)
{
  int value;
  asm volatile (
 80001ca:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80001cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80001ce:	4620      	mov	r0, r4
 80001d0:	4629      	mov	r1, r5
 80001d2:	beab      	bkpt	0x00ab
 80001d4:	4604      	mov	r4, r0
 80001d6:	62bc      	str	r4, [r7, #40]	@ 0x28
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
 80001d8:	e036      	b.n	8000248 <_trace_write_semihosting_debug+0x9c>
    }
  else
    {
      // If not, use a local buffer to speed things up
      char tmp[OS_INTEGER_TRACE_TMP_ARRAY_SIZE];
      size_t togo = nbyte;
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (togo > 0)
 80001de:	e030      	b.n	8000242 <_trace_write_semihosting_debug+0x96>
        {
          unsigned int n = ((togo < sizeof(tmp)) ? togo : sizeof(tmp));
 80001e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80001e2:	2b10      	cmp	r3, #16
 80001e4:	bf28      	it	cs
 80001e6:	2310      	movcs	r3, #16
 80001e8:	637b      	str	r3, [r7, #52]	@ 0x34
          unsigned int i = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	63bb      	str	r3, [r7, #56]	@ 0x38
          for (; i < n; ++i, ++buf)
 80001ee:	e00d      	b.n	800020c <_trace_write_semihosting_debug+0x60>
            {
              tmp[i] = *buf;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	7819      	ldrb	r1, [r3, #0]
 80001f4:	f107 020c 	add.w	r2, r7, #12
 80001f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80001fa:	4413      	add	r3, r2
 80001fc:	460a      	mov	r2, r1
 80001fe:	701a      	strb	r2, [r3, #0]
          for (; i < n; ++i, ++buf)
 8000200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000202:	3301      	adds	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3301      	adds	r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800020e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000210:	429a      	cmp	r2, r3
 8000212:	d3ed      	bcc.n	80001f0 <_trace_write_semihosting_debug+0x44>
            }
          tmp[i] = '\0';
 8000214:	f107 020c 	add.w	r2, r7, #12
 8000218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800021a:	4413      	add	r3, r2
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
 8000220:	2304      	movs	r3, #4
 8000222:	627b      	str	r3, [r7, #36]	@ 0x24
 8000224:	f107 030c 	add.w	r3, r7, #12
 8000228:	623b      	str	r3, [r7, #32]
  asm volatile (
 800022a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800022c:	6a3d      	ldr	r5, [r7, #32]
 800022e:	4620      	mov	r0, r4
 8000230:	4629      	mov	r1, r5
 8000232:	beab      	bkpt	0x00ab
 8000234:	4604      	mov	r4, r0
 8000236:	61fc      	str	r4, [r7, #28]
  return value;
 8000238:	bf00      	nop

          call_host (SEMIHOSTING_SYS_WRITE0, (void*) tmp);

          togo -= n;
 800023a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800023c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (togo > 0)
 8000242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1cb      	bne.n	80001e0 <_trace_write_semihosting_debug+0x34>
        }
    }

  // All bytes written
  return (ssize_t) nbyte;
 8000248:	683b      	ldr	r3, [r7, #0]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3740      	adds	r7, #64	@ 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000254 <PINA_0_INIT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PINA_0_INIT(void) //Button PA0
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <PINA_0_INIT+0x48>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <PINA_0_INIT+0x48>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
  GPIOA->CRL &= ~GPIO_CRL_MODE0_0;
 8000264:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <PINA_0_INIT+0x4c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0d      	ldr	r2, [pc, #52]	@ (80002a0 <PINA_0_INIT+0x4c>)
 800026a:	f023 0301 	bic.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~GPIO_CRL_MODE0_1;
 8000270:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <PINA_0_INIT+0x4c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <PINA_0_INIT+0x4c>)
 8000276:	f023 0302 	bic.w	r3, r3, #2
 800027a:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~GPIO_CRL_CNF0_0;
 800027c:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <PINA_0_INIT+0x4c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a07      	ldr	r2, [pc, #28]	@ (80002a0 <PINA_0_INIT+0x4c>)
 8000282:	f023 0304 	bic.w	r3, r3, #4
 8000286:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 8000288:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <PINA_0_INIT+0x4c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <PINA_0_INIT+0x4c>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010800 	.word	0x40010800

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80002aa:	f000 f985 	bl	80005b8 <initialise_monitor_handles>
	uint32_t delay = 500;
 80002ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80002b2:	60bb      	str	r3, [r7, #8]
	uint8_t buttonState = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 f9e6 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f856 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f89a 	bl	80003f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  PINA_0_INIT();
 80002c4:	f7ff ffc6 	bl	8000254 <PINA_0_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  trace_printf("Semihosting is working!\n\r");
 80002c8:	4822      	ldr	r0, [pc, #136]	@ (8000354 <main+0xb0>)
 80002ca:	f7ff ff3f 	bl	800014c <trace_printf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//мигание светодиодом на плате, при нажатии на кнопку мигают еще 2 yf PC13 и PB5
	pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // так и так
 80002ce:	2101      	movs	r1, #1
 80002d0:	4821      	ldr	r0, [pc, #132]	@ (8000358 <main+0xb4>)
 80002d2:	f000 fcc7 	bl	8000c64 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	//pinState = READ_BIT(GPIOA->IDR, GPIO_IDR_IDR0);
    if (pinState == GPIO_PIN_SET){
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d102      	bne.n	80002e6 <main+0x42>
		buttonState = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e001      	b.n	80002ea <main+0x46>
	} else {
		buttonState = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2104      	movs	r1, #4
 80002ee:	481b      	ldr	r0, [pc, #108]	@ (800035c <main+0xb8>)
 80002f0:	f000 fccf 	bl	8000c92 <HAL_GPIO_WritePin>
	if (buttonState){
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d00a      	beq.n	8000310 <main+0x6c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000300:	4817      	ldr	r0, [pc, #92]	@ (8000360 <main+0xbc>)
 8000302:	f000 fcc6 	bl	8000c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2120      	movs	r1, #32
 800030a:	4814      	ldr	r0, [pc, #80]	@ (800035c <main+0xb8>)
 800030c:	f000 fcc1 	bl	8000c92 <HAL_GPIO_WritePin>
	}
    HAL_Delay(delay);
 8000310:	68b8      	ldr	r0, [r7, #8]
 8000312:	f000 fa1b 	bl	800074c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	2104      	movs	r1, #4
 800031a:	4810      	ldr	r0, [pc, #64]	@ (800035c <main+0xb8>)
 800031c:	f000 fcb9 	bl	8000c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000326:	480e      	ldr	r0, [pc, #56]	@ (8000360 <main+0xbc>)
 8000328:	f000 fcb3 	bl	8000c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2120      	movs	r1, #32
 8000330:	480a      	ldr	r0, [pc, #40]	@ (800035c <main+0xb8>)
 8000332:	f000 fcae 	bl	8000c92 <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 8000336:	68b8      	ldr	r0, [r7, #8]
 8000338:	f000 fa08 	bl	800074c <HAL_Delay>
	trace_printf("buttonState=%d\n\r", buttonState);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	4619      	mov	r1, r3
 8000340:	4808      	ldr	r0, [pc, #32]	@ (8000364 <main+0xc0>)
 8000342:	f7ff ff03 	bl	800014c <trace_printf>
	cnt++;
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <main+0xc4>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <main+0xc4>)
 8000350:	701a      	strb	r2, [r3, #0]
	pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // так и так
 8000352:	e7bc      	b.n	80002ce <main+0x2a>
 8000354:	08001e2c 	.word	0x08001e2c
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40011000 	.word	0x40011000
 8000364:	08001e48 	.word	0x08001e48
 8000368:	200000f8 	.word	0x200000f8

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	@ 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	@ 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f001 f8bc 	bl	80014f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fc85 	bl	8000cc4 <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c0:	f000 f896 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fef2 	bl	80011c8 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ea:	f000 f881 	bl	80004f0 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	@ 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b34      	ldr	r3, [pc, #208]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a33      	ldr	r2, [pc, #204]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b31      	ldr	r3, [pc, #196]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b2e      	ldr	r3, [pc, #184]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2d      	ldr	r2, [pc, #180]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b2b      	ldr	r3, [pc, #172]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b28      	ldr	r3, [pc, #160]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a27      	ldr	r2, [pc, #156]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b25      	ldr	r3, [pc, #148]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b22      	ldr	r3, [pc, #136]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <MX_GPIO_Init+0xe8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000472:	481c      	ldr	r0, [pc, #112]	@ (80004e4 <MX_GPIO_Init+0xec>)
 8000474:	f000 fc0d 	bl	8000c92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2124      	movs	r1, #36	@ 0x24
 800047c:	481a      	ldr	r0, [pc, #104]	@ (80004e8 <MX_GPIO_Init+0xf0>)
 800047e:	f000 fc08 	bl	8000c92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000482:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4812      	ldr	r0, [pc, #72]	@ (80004e4 <MX_GPIO_Init+0xec>)
 800049c:	f000 fa5e 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480d      	ldr	r0, [pc, #52]	@ (80004ec <MX_GPIO_Init+0xf4>)
 80004b8:	f000 fa50 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80004bc:	2324      	movs	r3, #36	@ 0x24
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	@ (80004e8 <MX_GPIO_Init+0xf0>)
 80004d4:	f000 fa42 	bl	800095c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40011000 	.word	0x40011000
 80004e8:	40010c00 	.word	0x40010c00
 80004ec:	40010800 	.word	0x40010800

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	@ (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <NMI_Handler+0x4>

08000568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <MemManage_Handler+0x4>

08000578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <UsageFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f8b0 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	@ (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f000 ff88 	bl	8001508 <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20005000 	.word	0x20005000
 8000624:	00000400 	.word	0x00000400
 8000628:	200000fc 	.word	0x200000fc
 800062c:	20000250 	.word	0x20000250

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff fff8 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000642:	490c      	ldr	r1, [pc, #48]	@ (8000674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a09      	ldr	r2, [pc, #36]	@ (800067c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000658:	4c09      	ldr	r4, [pc, #36]	@ (8000680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f000 ff55 	bl	8001514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fe1b 	bl	80002a4 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000678:	08001ebc 	.word	0x08001ebc
  ldr r2, =_sbss
 800067c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000680:	2000024c 	.word	0x2000024c

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f92b 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff ff2a 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f935 	bl	8000942 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006f0:	f000 f90b 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	@ (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	20000100 	.word	0x20000100

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	@ (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000100 	.word	0x20000100

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000754:	f7ff fff0 	bl	8000738 <HAL_GetTick>
 8000758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000764:	d005      	beq.n	8000772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_Delay+0x44>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000772:	bf00      	nop
 8000774:	f7ff ffe0 	bl	8000738 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8f7      	bhi.n	8000774 <HAL_Delay+0x28>
  {
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	@ (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	@ (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	@ 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d4:	f7ff ff90 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff49 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff5e 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff90 	bl	800084c <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5f 	bl	80007f8 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffb0 	bl	80008b0 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b08b      	sub	sp, #44	@ 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e169      	b.n	8000c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000970:	2201      	movs	r2, #1
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	f040 8158 	bne.w	8000c3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4a9a      	ldr	r2, [pc, #616]	@ (8000bfc <HAL_GPIO_Init+0x2a0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d05e      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 8000998:	4a98      	ldr	r2, [pc, #608]	@ (8000bfc <HAL_GPIO_Init+0x2a0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d875      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 800099e:	4a98      	ldr	r2, [pc, #608]	@ (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d058      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009a4:	4a96      	ldr	r2, [pc, #600]	@ (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d86f      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009aa:	4a96      	ldr	r2, [pc, #600]	@ (8000c04 <HAL_GPIO_Init+0x2a8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d052      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009b0:	4a94      	ldr	r2, [pc, #592]	@ (8000c04 <HAL_GPIO_Init+0x2a8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d869      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009b6:	4a94      	ldr	r2, [pc, #592]	@ (8000c08 <HAL_GPIO_Init+0x2ac>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d04c      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009bc:	4a92      	ldr	r2, [pc, #584]	@ (8000c08 <HAL_GPIO_Init+0x2ac>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d863      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009c2:	4a92      	ldr	r2, [pc, #584]	@ (8000c0c <HAL_GPIO_Init+0x2b0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d046      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009c8:	4a90      	ldr	r2, [pc, #576]	@ (8000c0c <HAL_GPIO_Init+0x2b0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d85d      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d82a      	bhi.n	8000a28 <HAL_GPIO_Init+0xcc>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d859      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <HAL_GPIO_Init+0x80>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a31 	.word	0x08000a31
 80009e4:	08000a43 	.word	0x08000a43
 80009e8:	08000a85 	.word	0x08000a85
 80009ec:	08000a8b 	.word	0x08000a8b
 80009f0:	08000a8b 	.word	0x08000a8b
 80009f4:	08000a8b 	.word	0x08000a8b
 80009f8:	08000a8b 	.word	0x08000a8b
 80009fc:	08000a8b 	.word	0x08000a8b
 8000a00:	08000a8b 	.word	0x08000a8b
 8000a04:	08000a8b 	.word	0x08000a8b
 8000a08:	08000a8b 	.word	0x08000a8b
 8000a0c:	08000a8b 	.word	0x08000a8b
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a8b 	.word	0x08000a8b
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a8b 	.word	0x08000a8b
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	4a79      	ldr	r2, [pc, #484]	@ (8000c10 <HAL_GPIO_Init+0x2b4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2e:	e02c      	b.n	8000a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e029      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e024      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e01f      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	330c      	adds	r3, #12
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e01a      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e013      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	611a      	str	r2, [r3, #16]
          break;
 8000a76:	e009      	b.n	8000a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	615a      	str	r2, [r3, #20]
          break;
 8000a82:	e003      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          break;
 8000a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2bff      	cmp	r3, #255	@ 0xff
 8000a90:	d801      	bhi.n	8000a96 <HAL_GPIO_Init+0x13a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	e001      	b.n	8000a9a <HAL_GPIO_Init+0x13e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	@ 0xff
 8000aa0:	d802      	bhi.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x152>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aaa:	3b08      	subs	r3, #8
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	6a39      	ldr	r1, [r7, #32]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80b1 	beq.w	8000c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000adc:	4b4d      	ldr	r3, [pc, #308]	@ (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	@ (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af4:	4a48      	ldr	r2, [pc, #288]	@ (8000c18 <HAL_GPIO_Init+0x2bc>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a40      	ldr	r2, [pc, #256]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1ec>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3f      	ldr	r2, [pc, #252]	@ (8000c20 <HAL_GPIO_Init+0x2c4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1e8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c24 <HAL_GPIO_Init+0x2c8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1e4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3d      	ldr	r2, [pc, #244]	@ (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5a:	492f      	ldr	r1, [pc, #188]	@ (8000c18 <HAL_GPIO_Init+0x2bc>)
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b74:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	492c      	ldr	r1, [pc, #176]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	608b      	str	r3, [r1, #8]
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b82:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	4928      	ldr	r1, [pc, #160]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	4922      	ldr	r1, [pc, #136]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60cb      	str	r3, [r1, #12]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	491e      	ldr	r1, [pc, #120]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	4918      	ldr	r1, [pc, #96]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4914      	ldr	r1, [pc, #80]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d021      	beq.n	8000c30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	490e      	ldr	r1, [pc, #56]	@ (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
 8000bf8:	e021      	b.n	8000c3e <HAL_GPIO_Init+0x2e2>
 8000bfa:	bf00      	nop
 8000bfc:	10320000 	.word	0x10320000
 8000c00:	10310000 	.word	0x10310000
 8000c04:	10220000 	.word	0x10220000
 8000c08:	10210000 	.word	0x10210000
 8000c0c:	10120000 	.word	0x10120000
 8000c10:	10110000 	.word	0x10110000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_GPIO_Init+0x304>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4909      	ldr	r1, [pc, #36]	@ (8000c60 <HAL_GPIO_Init+0x304>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	3301      	adds	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f47f ae8e 	bne.w	8000970 <HAL_GPIO_Init+0x14>
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	372c      	adds	r7, #44	@ 0x2c
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e001      	b.n	8000c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	807b      	strh	r3, [r7, #2]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca8:	887a      	ldrh	r2, [r7, #2]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cae:	e003      	b.n	8000cb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	041a      	lsls	r2, r3, #16
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e272      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8087 	beq.w	8000df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce4:	4b92      	ldr	r3, [pc, #584]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d00c      	beq.n	8000d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d112      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d08:	d10b      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0a:	4b89      	ldr	r3, [pc, #548]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d06c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x12c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d168      	bne.n	8000df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e24c      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2a:	d106      	bne.n	8000d3a <HAL_RCC_OscConfig+0x76>
 8000d2c:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7f      	ldr	r2, [pc, #508]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e02e      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0x98>
 8000d42:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7a      	ldr	r2, [pc, #488]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e01d      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0xbc>
 8000d66:	4b72      	ldr	r3, [pc, #456]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a71      	ldr	r2, [pc, #452]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b6f      	ldr	r3, [pc, #444]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a6e      	ldr	r2, [pc, #440]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d80:	4b6b      	ldr	r3, [pc, #428]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a6a      	ldr	r2, [pc, #424]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b68      	ldr	r3, [pc, #416]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a67      	ldr	r2, [pc, #412]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fcca 	bl	8000738 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fcc6 	bl	8000738 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	@ 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e200      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0xe4>
 8000dc6:	e014      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fcb6 	bl	8000738 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fcb2 	bl	8000738 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	@ 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1ec      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x10c>
 8000dee:	e000      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d063      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d11c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
 8000e16:	4b46      	ldr	r3, [pc, #280]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e1c0      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4939      	ldr	r1, [pc, #228]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	e03a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d020      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc6b 	bl	8000738 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc67 	bl	8000738 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1a1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4927      	ldr	r1, [pc, #156]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc4a 	bl	8000738 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc46 	bl	8000738 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e180      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d03a      	beq.n	8000f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d019      	beq.n	8000f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fc2a 	bl	8000738 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc26 	bl	8000738 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e160      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 fa9c 	bl	8001444 <RCC_Delay>
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fc10 	bl	8000738 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1a:	e00f      	b.n	8000f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc0c 	bl	8000738 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d908      	bls.n	8000f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e146      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	42420000 	.word	0x42420000
 8000f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e9      	bne.n	8000f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a6 	beq.w	80010a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b88      	ldr	r3, [pc, #544]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a87      	ldr	r2, [pc, #540]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b85      	ldr	r3, [pc, #532]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b82      	ldr	r3, [pc, #520]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7e      	ldr	r2, [pc, #504]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbcd 	bl	8000738 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fbc9 	bl	8000738 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	@ 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e103      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x312>
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e02d      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x334>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a66      	ldr	r2, [pc, #408]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	e01c      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x356>
 8001000:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a60      	ldr	r2, [pc, #384]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	4b5e      	ldr	r3, [pc, #376]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a5d      	ldr	r2, [pc, #372]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e00b      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 800101a:	4b5b      	ldr	r3, [pc, #364]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a5a      	ldr	r2, [pc, #360]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b58      	ldr	r3, [pc, #352]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a57      	ldr	r2, [pc, #348]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fb7d 	bl	8000738 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fb79 	bl	8000738 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4293      	cmp	r3, r2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e0b1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ee      	beq.n	8001042 <HAL_RCC_OscConfig+0x37e>
 8001064:	e014      	b.n	8001090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb67 	bl	8000738 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fb63 	bl	8000738 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e09b      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ee      	bne.n	800106e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d105      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b3c      	ldr	r3, [pc, #240]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a3b      	ldr	r2, [pc, #236]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8087 	beq.w	80011ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d061      	beq.n	800117c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d146      	bne.n	800114e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb37 	bl	8000738 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fb33 	bl	8000738 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e06d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d108      	bne.n	8001108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4921      	ldr	r1, [pc, #132]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a19      	ldr	r1, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	430b      	orrs	r3, r1
 800111a:	491b      	ldr	r1, [pc, #108]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb07 	bl	8000738 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fb03 	bl	8000738 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e03d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x46a>
 800114c:	e035      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff faf0 	bl	8000738 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff faec 	bl	8000738 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e026      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x498>
 800117a:	e01e      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e019      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_OscConfig+0x500>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4965      	ldr	r1, [pc, #404]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800122e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e073      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e06b      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b39      	ldr	r3, [pc, #228]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4936      	ldr	r1, [pc, #216]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fa3e 	bl	8000738 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fa3a 	bl	8000738 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e053      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d210      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f821 	bl	800139c <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1cc>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f99c 	bl	80006b4 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	08001e5c 	.word	0x08001e5c
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x30>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ca:	e027      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	613b      	str	r3, [r7, #16]
      break;
 80013d0:	e027      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0c5b      	lsrs	r3, r3, #17
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	693b      	ldr	r3, [r7, #16]
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	007a1200 	.word	0x007a1200
 8001438:	08001e6c 	.word	0x08001e6c
 800143c:	08001e7c 	.word	0x08001e7c
 8001440:	003d0900 	.word	0x003d0900

08001444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <RCC_Delay+0x34>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <RCC_Delay+0x38>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a5b      	lsrs	r3, r3, #9
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001460:	bf00      	nop
  }
  while (Delay --);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f9      	bne.n	8001460 <RCC_Delay+0x1c>
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <_vsniprintf_r>:
 8001480:	b530      	push	{r4, r5, lr}
 8001482:	4614      	mov	r4, r2
 8001484:	2c00      	cmp	r4, #0
 8001486:	4605      	mov	r5, r0
 8001488:	461a      	mov	r2, r3
 800148a:	b09b      	sub	sp, #108	@ 0x6c
 800148c:	da05      	bge.n	800149a <_vsniprintf_r+0x1a>
 800148e:	238b      	movs	r3, #139	@ 0x8b
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001496:	b01b      	add	sp, #108	@ 0x6c
 8001498:	bd30      	pop	{r4, r5, pc}
 800149a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800149e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	9319      	str	r3, [sp, #100]	@ 0x64
 80014a8:	bf0c      	ite	eq
 80014aa:	4623      	moveq	r3, r4
 80014ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	9305      	str	r3, [sp, #20]
 80014b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b8:	9100      	str	r1, [sp, #0]
 80014ba:	9104      	str	r1, [sp, #16]
 80014bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80014c0:	4669      	mov	r1, sp
 80014c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80014c4:	f000 f99e 	bl	8001804 <_svfiprintf_r>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	bfbc      	itt	lt
 80014cc:	238b      	movlt	r3, #139	@ 0x8b
 80014ce:	602b      	strlt	r3, [r5, #0]
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	d0e0      	beq.n	8001496 <_vsniprintf_r+0x16>
 80014d4:	2200      	movs	r2, #0
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e7dc      	b.n	8001496 <_vsniprintf_r+0x16>

080014dc <vsniprintf>:
 80014dc:	b507      	push	{r0, r1, r2, lr}
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	4601      	mov	r1, r0
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <vsniprintf+0x18>)
 80014e8:	6800      	ldr	r0, [r0, #0]
 80014ea:	f7ff ffc9 	bl	8001480 <_vsniprintf_r>
 80014ee:	b003      	add	sp, #12
 80014f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <memset>:
 80014f8:	4603      	mov	r3, r0
 80014fa:	4402      	add	r2, r0
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d100      	bne.n	8001502 <memset+0xa>
 8001500:	4770      	bx	lr
 8001502:	f803 1b01 	strb.w	r1, [r3], #1
 8001506:	e7f9      	b.n	80014fc <memset+0x4>

08001508 <__errno>:
 8001508:	4b01      	ldr	r3, [pc, #4]	@ (8001510 <__errno+0x8>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c

08001514 <__libc_init_array>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	2600      	movs	r6, #0
 8001518:	4d0c      	ldr	r5, [pc, #48]	@ (800154c <__libc_init_array+0x38>)
 800151a:	4c0d      	ldr	r4, [pc, #52]	@ (8001550 <__libc_init_array+0x3c>)
 800151c:	1b64      	subs	r4, r4, r5
 800151e:	10a4      	asrs	r4, r4, #2
 8001520:	42a6      	cmp	r6, r4
 8001522:	d109      	bne.n	8001538 <__libc_init_array+0x24>
 8001524:	f000 fc76 	bl	8001e14 <_init>
 8001528:	2600      	movs	r6, #0
 800152a:	4d0a      	ldr	r5, [pc, #40]	@ (8001554 <__libc_init_array+0x40>)
 800152c:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <__libc_init_array+0x44>)
 800152e:	1b64      	subs	r4, r4, r5
 8001530:	10a4      	asrs	r4, r4, #2
 8001532:	42a6      	cmp	r6, r4
 8001534:	d105      	bne.n	8001542 <__libc_init_array+0x2e>
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	f855 3b04 	ldr.w	r3, [r5], #4
 800153c:	4798      	blx	r3
 800153e:	3601      	adds	r6, #1
 8001540:	e7ee      	b.n	8001520 <__libc_init_array+0xc>
 8001542:	f855 3b04 	ldr.w	r3, [r5], #4
 8001546:	4798      	blx	r3
 8001548:	3601      	adds	r6, #1
 800154a:	e7f2      	b.n	8001532 <__libc_init_array+0x1e>
 800154c:	08001eb4 	.word	0x08001eb4
 8001550:	08001eb4 	.word	0x08001eb4
 8001554:	08001eb4 	.word	0x08001eb4
 8001558:	08001eb8 	.word	0x08001eb8

0800155c <__retarget_lock_acquire_recursive>:
 800155c:	4770      	bx	lr

0800155e <__retarget_lock_release_recursive>:
 800155e:	4770      	bx	lr

08001560 <_free_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	2900      	cmp	r1, #0
 8001566:	d040      	beq.n	80015ea <_free_r+0x8a>
 8001568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800156c:	1f0c      	subs	r4, r1, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	bfb8      	it	lt
 8001572:	18e4      	addlt	r4, r4, r3
 8001574:	f000 f8de 	bl	8001734 <__malloc_lock>
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <_free_r+0x8c>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	b933      	cbnz	r3, 800158c <_free_r+0x2c>
 800157e:	6063      	str	r3, [r4, #4]
 8001580:	6014      	str	r4, [r2, #0]
 8001582:	4628      	mov	r0, r5
 8001584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001588:	f000 b8da 	b.w	8001740 <__malloc_unlock>
 800158c:	42a3      	cmp	r3, r4
 800158e:	d908      	bls.n	80015a2 <_free_r+0x42>
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	1821      	adds	r1, r4, r0
 8001594:	428b      	cmp	r3, r1
 8001596:	bf01      	itttt	eq
 8001598:	6819      	ldreq	r1, [r3, #0]
 800159a:	685b      	ldreq	r3, [r3, #4]
 800159c:	1809      	addeq	r1, r1, r0
 800159e:	6021      	streq	r1, [r4, #0]
 80015a0:	e7ed      	b.n	800157e <_free_r+0x1e>
 80015a2:	461a      	mov	r2, r3
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	b10b      	cbz	r3, 80015ac <_free_r+0x4c>
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d9fa      	bls.n	80015a2 <_free_r+0x42>
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	1850      	adds	r0, r2, r1
 80015b0:	42a0      	cmp	r0, r4
 80015b2:	d10b      	bne.n	80015cc <_free_r+0x6c>
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	4401      	add	r1, r0
 80015b8:	1850      	adds	r0, r2, r1
 80015ba:	4283      	cmp	r3, r0
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	d1e0      	bne.n	8001582 <_free_r+0x22>
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4408      	add	r0, r1
 80015c6:	6010      	str	r0, [r2, #0]
 80015c8:	6053      	str	r3, [r2, #4]
 80015ca:	e7da      	b.n	8001582 <_free_r+0x22>
 80015cc:	d902      	bls.n	80015d4 <_free_r+0x74>
 80015ce:	230c      	movs	r3, #12
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	e7d6      	b.n	8001582 <_free_r+0x22>
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	1821      	adds	r1, r4, r0
 80015d8:	428b      	cmp	r3, r1
 80015da:	bf01      	itttt	eq
 80015dc:	6819      	ldreq	r1, [r3, #0]
 80015de:	685b      	ldreq	r3, [r3, #4]
 80015e0:	1809      	addeq	r1, r1, r0
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	6054      	str	r4, [r2, #4]
 80015e8:	e7cb      	b.n	8001582 <_free_r+0x22>
 80015ea:	bd38      	pop	{r3, r4, r5, pc}
 80015ec:	20000248 	.word	0x20000248

080015f0 <sbrk_aligned>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	4e0f      	ldr	r6, [pc, #60]	@ (8001630 <sbrk_aligned+0x40>)
 80015f4:	460c      	mov	r4, r1
 80015f6:	6831      	ldr	r1, [r6, #0]
 80015f8:	4605      	mov	r5, r0
 80015fa:	b911      	cbnz	r1, 8001602 <sbrk_aligned+0x12>
 80015fc:	f000 fba8 	bl	8001d50 <_sbrk_r>
 8001600:	6030      	str	r0, [r6, #0]
 8001602:	4621      	mov	r1, r4
 8001604:	4628      	mov	r0, r5
 8001606:	f000 fba3 	bl	8001d50 <_sbrk_r>
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	d103      	bne.n	8001616 <sbrk_aligned+0x26>
 800160e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001612:	4620      	mov	r0, r4
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	1cc4      	adds	r4, r0, #3
 8001618:	f024 0403 	bic.w	r4, r4, #3
 800161c:	42a0      	cmp	r0, r4
 800161e:	d0f8      	beq.n	8001612 <sbrk_aligned+0x22>
 8001620:	1a21      	subs	r1, r4, r0
 8001622:	4628      	mov	r0, r5
 8001624:	f000 fb94 	bl	8001d50 <_sbrk_r>
 8001628:	3001      	adds	r0, #1
 800162a:	d1f2      	bne.n	8001612 <sbrk_aligned+0x22>
 800162c:	e7ef      	b.n	800160e <sbrk_aligned+0x1e>
 800162e:	bf00      	nop
 8001630:	20000244 	.word	0x20000244

08001634 <_malloc_r>:
 8001634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001638:	1ccd      	adds	r5, r1, #3
 800163a:	f025 0503 	bic.w	r5, r5, #3
 800163e:	3508      	adds	r5, #8
 8001640:	2d0c      	cmp	r5, #12
 8001642:	bf38      	it	cc
 8001644:	250c      	movcc	r5, #12
 8001646:	2d00      	cmp	r5, #0
 8001648:	4606      	mov	r6, r0
 800164a:	db01      	blt.n	8001650 <_malloc_r+0x1c>
 800164c:	42a9      	cmp	r1, r5
 800164e:	d904      	bls.n	800165a <_malloc_r+0x26>
 8001650:	230c      	movs	r3, #12
 8001652:	6033      	str	r3, [r6, #0]
 8001654:	2000      	movs	r0, #0
 8001656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800165a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001730 <_malloc_r+0xfc>
 800165e:	f000 f869 	bl	8001734 <__malloc_lock>
 8001662:	f8d8 3000 	ldr.w	r3, [r8]
 8001666:	461c      	mov	r4, r3
 8001668:	bb44      	cbnz	r4, 80016bc <_malloc_r+0x88>
 800166a:	4629      	mov	r1, r5
 800166c:	4630      	mov	r0, r6
 800166e:	f7ff ffbf 	bl	80015f0 <sbrk_aligned>
 8001672:	1c43      	adds	r3, r0, #1
 8001674:	4604      	mov	r4, r0
 8001676:	d158      	bne.n	800172a <_malloc_r+0xf6>
 8001678:	f8d8 4000 	ldr.w	r4, [r8]
 800167c:	4627      	mov	r7, r4
 800167e:	2f00      	cmp	r7, #0
 8001680:	d143      	bne.n	800170a <_malloc_r+0xd6>
 8001682:	2c00      	cmp	r4, #0
 8001684:	d04b      	beq.n	800171e <_malloc_r+0xea>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	4639      	mov	r1, r7
 800168a:	4630      	mov	r0, r6
 800168c:	eb04 0903 	add.w	r9, r4, r3
 8001690:	f000 fb5e 	bl	8001d50 <_sbrk_r>
 8001694:	4581      	cmp	r9, r0
 8001696:	d142      	bne.n	800171e <_malloc_r+0xea>
 8001698:	6821      	ldr	r1, [r4, #0]
 800169a:	4630      	mov	r0, r6
 800169c:	1a6d      	subs	r5, r5, r1
 800169e:	4629      	mov	r1, r5
 80016a0:	f7ff ffa6 	bl	80015f0 <sbrk_aligned>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d03a      	beq.n	800171e <_malloc_r+0xea>
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	442b      	add	r3, r5
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	f8d8 3000 	ldr.w	r3, [r8]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	bb62      	cbnz	r2, 8001710 <_malloc_r+0xdc>
 80016b6:	f8c8 7000 	str.w	r7, [r8]
 80016ba:	e00f      	b.n	80016dc <_malloc_r+0xa8>
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	1b52      	subs	r2, r2, r5
 80016c0:	d420      	bmi.n	8001704 <_malloc_r+0xd0>
 80016c2:	2a0b      	cmp	r2, #11
 80016c4:	d917      	bls.n	80016f6 <_malloc_r+0xc2>
 80016c6:	1961      	adds	r1, r4, r5
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	6025      	str	r5, [r4, #0]
 80016cc:	bf18      	it	ne
 80016ce:	6059      	strne	r1, [r3, #4]
 80016d0:	6863      	ldr	r3, [r4, #4]
 80016d2:	bf08      	it	eq
 80016d4:	f8c8 1000 	streq.w	r1, [r8]
 80016d8:	5162      	str	r2, [r4, r5]
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	4630      	mov	r0, r6
 80016de:	f000 f82f 	bl	8001740 <__malloc_unlock>
 80016e2:	f104 000b 	add.w	r0, r4, #11
 80016e6:	1d23      	adds	r3, r4, #4
 80016e8:	f020 0007 	bic.w	r0, r0, #7
 80016ec:	1ac2      	subs	r2, r0, r3
 80016ee:	bf1c      	itt	ne
 80016f0:	1a1b      	subne	r3, r3, r0
 80016f2:	50a3      	strne	r3, [r4, r2]
 80016f4:	e7af      	b.n	8001656 <_malloc_r+0x22>
 80016f6:	6862      	ldr	r2, [r4, #4]
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	bf0c      	ite	eq
 80016fc:	f8c8 2000 	streq.w	r2, [r8]
 8001700:	605a      	strne	r2, [r3, #4]
 8001702:	e7eb      	b.n	80016dc <_malloc_r+0xa8>
 8001704:	4623      	mov	r3, r4
 8001706:	6864      	ldr	r4, [r4, #4]
 8001708:	e7ae      	b.n	8001668 <_malloc_r+0x34>
 800170a:	463c      	mov	r4, r7
 800170c:	687f      	ldr	r7, [r7, #4]
 800170e:	e7b6      	b.n	800167e <_malloc_r+0x4a>
 8001710:	461a      	mov	r2, r3
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	42a3      	cmp	r3, r4
 8001716:	d1fb      	bne.n	8001710 <_malloc_r+0xdc>
 8001718:	2300      	movs	r3, #0
 800171a:	6053      	str	r3, [r2, #4]
 800171c:	e7de      	b.n	80016dc <_malloc_r+0xa8>
 800171e:	230c      	movs	r3, #12
 8001720:	4630      	mov	r0, r6
 8001722:	6033      	str	r3, [r6, #0]
 8001724:	f000 f80c 	bl	8001740 <__malloc_unlock>
 8001728:	e794      	b.n	8001654 <_malloc_r+0x20>
 800172a:	6005      	str	r5, [r0, #0]
 800172c:	e7d6      	b.n	80016dc <_malloc_r+0xa8>
 800172e:	bf00      	nop
 8001730:	20000248 	.word	0x20000248

08001734 <__malloc_lock>:
 8001734:	4801      	ldr	r0, [pc, #4]	@ (800173c <__malloc_lock+0x8>)
 8001736:	f7ff bf11 	b.w	800155c <__retarget_lock_acquire_recursive>
 800173a:	bf00      	nop
 800173c:	20000240 	.word	0x20000240

08001740 <__malloc_unlock>:
 8001740:	4801      	ldr	r0, [pc, #4]	@ (8001748 <__malloc_unlock+0x8>)
 8001742:	f7ff bf0c 	b.w	800155e <__retarget_lock_release_recursive>
 8001746:	bf00      	nop
 8001748:	20000240 	.word	0x20000240

0800174c <__ssputs_r>:
 800174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001750:	461f      	mov	r7, r3
 8001752:	688e      	ldr	r6, [r1, #8]
 8001754:	4682      	mov	sl, r0
 8001756:	42be      	cmp	r6, r7
 8001758:	460c      	mov	r4, r1
 800175a:	4690      	mov	r8, r2
 800175c:	680b      	ldr	r3, [r1, #0]
 800175e:	d82d      	bhi.n	80017bc <__ssputs_r+0x70>
 8001760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001768:	d026      	beq.n	80017b8 <__ssputs_r+0x6c>
 800176a:	6965      	ldr	r5, [r4, #20]
 800176c:	6909      	ldr	r1, [r1, #16]
 800176e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001772:	eba3 0901 	sub.w	r9, r3, r1
 8001776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800177a:	1c7b      	adds	r3, r7, #1
 800177c:	444b      	add	r3, r9
 800177e:	106d      	asrs	r5, r5, #1
 8001780:	429d      	cmp	r5, r3
 8001782:	bf38      	it	cc
 8001784:	461d      	movcc	r5, r3
 8001786:	0553      	lsls	r3, r2, #21
 8001788:	d527      	bpl.n	80017da <__ssputs_r+0x8e>
 800178a:	4629      	mov	r1, r5
 800178c:	f7ff ff52 	bl	8001634 <_malloc_r>
 8001790:	4606      	mov	r6, r0
 8001792:	b360      	cbz	r0, 80017ee <__ssputs_r+0xa2>
 8001794:	464a      	mov	r2, r9
 8001796:	6921      	ldr	r1, [r4, #16]
 8001798:	f000 faf8 	bl	8001d8c <memcpy>
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80017a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a6:	81a3      	strh	r3, [r4, #12]
 80017a8:	6126      	str	r6, [r4, #16]
 80017aa:	444e      	add	r6, r9
 80017ac:	6026      	str	r6, [r4, #0]
 80017ae:	463e      	mov	r6, r7
 80017b0:	6165      	str	r5, [r4, #20]
 80017b2:	eba5 0509 	sub.w	r5, r5, r9
 80017b6:	60a5      	str	r5, [r4, #8]
 80017b8:	42be      	cmp	r6, r7
 80017ba:	d900      	bls.n	80017be <__ssputs_r+0x72>
 80017bc:	463e      	mov	r6, r7
 80017be:	4632      	mov	r2, r6
 80017c0:	4641      	mov	r1, r8
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	f000 faaa 	bl	8001d1c <memmove>
 80017c8:	2000      	movs	r0, #0
 80017ca:	68a3      	ldr	r3, [r4, #8]
 80017cc:	1b9b      	subs	r3, r3, r6
 80017ce:	60a3      	str	r3, [r4, #8]
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	4433      	add	r3, r6
 80017d4:	6023      	str	r3, [r4, #0]
 80017d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017da:	462a      	mov	r2, r5
 80017dc:	f000 fae4 	bl	8001da8 <_realloc_r>
 80017e0:	4606      	mov	r6, r0
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d1e0      	bne.n	80017a8 <__ssputs_r+0x5c>
 80017e6:	4650      	mov	r0, sl
 80017e8:	6921      	ldr	r1, [r4, #16]
 80017ea:	f7ff feb9 	bl	8001560 <_free_r>
 80017ee:	230c      	movs	r3, #12
 80017f0:	f8ca 3000 	str.w	r3, [sl]
 80017f4:	89a3      	ldrh	r3, [r4, #12]
 80017f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fe:	81a3      	strh	r3, [r4, #12]
 8001800:	e7e9      	b.n	80017d6 <__ssputs_r+0x8a>
	...

08001804 <_svfiprintf_r>:
 8001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001808:	4698      	mov	r8, r3
 800180a:	898b      	ldrh	r3, [r1, #12]
 800180c:	4607      	mov	r7, r0
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	460d      	mov	r5, r1
 8001812:	4614      	mov	r4, r2
 8001814:	b09d      	sub	sp, #116	@ 0x74
 8001816:	d510      	bpl.n	800183a <_svfiprintf_r+0x36>
 8001818:	690b      	ldr	r3, [r1, #16]
 800181a:	b973      	cbnz	r3, 800183a <_svfiprintf_r+0x36>
 800181c:	2140      	movs	r1, #64	@ 0x40
 800181e:	f7ff ff09 	bl	8001634 <_malloc_r>
 8001822:	6028      	str	r0, [r5, #0]
 8001824:	6128      	str	r0, [r5, #16]
 8001826:	b930      	cbnz	r0, 8001836 <_svfiprintf_r+0x32>
 8001828:	230c      	movs	r3, #12
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001830:	b01d      	add	sp, #116	@ 0x74
 8001832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001836:	2340      	movs	r3, #64	@ 0x40
 8001838:	616b      	str	r3, [r5, #20]
 800183a:	2300      	movs	r3, #0
 800183c:	9309      	str	r3, [sp, #36]	@ 0x24
 800183e:	2320      	movs	r3, #32
 8001840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001844:	2330      	movs	r3, #48	@ 0x30
 8001846:	f04f 0901 	mov.w	r9, #1
 800184a:	f8cd 800c 	str.w	r8, [sp, #12]
 800184e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80019e8 <_svfiprintf_r+0x1e4>
 8001852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001856:	4623      	mov	r3, r4
 8001858:	469a      	mov	sl, r3
 800185a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800185e:	b10a      	cbz	r2, 8001864 <_svfiprintf_r+0x60>
 8001860:	2a25      	cmp	r2, #37	@ 0x25
 8001862:	d1f9      	bne.n	8001858 <_svfiprintf_r+0x54>
 8001864:	ebba 0b04 	subs.w	fp, sl, r4
 8001868:	d00b      	beq.n	8001882 <_svfiprintf_r+0x7e>
 800186a:	465b      	mov	r3, fp
 800186c:	4622      	mov	r2, r4
 800186e:	4629      	mov	r1, r5
 8001870:	4638      	mov	r0, r7
 8001872:	f7ff ff6b 	bl	800174c <__ssputs_r>
 8001876:	3001      	adds	r0, #1
 8001878:	f000 80a7 	beq.w	80019ca <_svfiprintf_r+0x1c6>
 800187c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800187e:	445a      	add	r2, fp
 8001880:	9209      	str	r2, [sp, #36]	@ 0x24
 8001882:	f89a 3000 	ldrb.w	r3, [sl]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 809f 	beq.w	80019ca <_svfiprintf_r+0x1c6>
 800188c:	2300      	movs	r3, #0
 800188e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001896:	f10a 0a01 	add.w	sl, sl, #1
 800189a:	9304      	str	r3, [sp, #16]
 800189c:	9307      	str	r3, [sp, #28]
 800189e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80018a4:	4654      	mov	r4, sl
 80018a6:	2205      	movs	r2, #5
 80018a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ac:	484e      	ldr	r0, [pc, #312]	@ (80019e8 <_svfiprintf_r+0x1e4>)
 80018ae:	f000 fa5f 	bl	8001d70 <memchr>
 80018b2:	9a04      	ldr	r2, [sp, #16]
 80018b4:	b9d8      	cbnz	r0, 80018ee <_svfiprintf_r+0xea>
 80018b6:	06d0      	lsls	r0, r2, #27
 80018b8:	bf44      	itt	mi
 80018ba:	2320      	movmi	r3, #32
 80018bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018c0:	0711      	lsls	r1, r2, #28
 80018c2:	bf44      	itt	mi
 80018c4:	232b      	movmi	r3, #43	@ 0x2b
 80018c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018ca:	f89a 3000 	ldrb.w	r3, [sl]
 80018ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80018d0:	d015      	beq.n	80018fe <_svfiprintf_r+0xfa>
 80018d2:	4654      	mov	r4, sl
 80018d4:	2000      	movs	r0, #0
 80018d6:	f04f 0c0a 	mov.w	ip, #10
 80018da:	9a07      	ldr	r2, [sp, #28]
 80018dc:	4621      	mov	r1, r4
 80018de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018e2:	3b30      	subs	r3, #48	@ 0x30
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d94b      	bls.n	8001980 <_svfiprintf_r+0x17c>
 80018e8:	b1b0      	cbz	r0, 8001918 <_svfiprintf_r+0x114>
 80018ea:	9207      	str	r2, [sp, #28]
 80018ec:	e014      	b.n	8001918 <_svfiprintf_r+0x114>
 80018ee:	eba0 0308 	sub.w	r3, r0, r8
 80018f2:	fa09 f303 	lsl.w	r3, r9, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	46a2      	mov	sl, r4
 80018fa:	9304      	str	r3, [sp, #16]
 80018fc:	e7d2      	b.n	80018a4 <_svfiprintf_r+0xa0>
 80018fe:	9b03      	ldr	r3, [sp, #12]
 8001900:	1d19      	adds	r1, r3, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	9103      	str	r1, [sp, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	bfbb      	ittet	lt
 800190a:	425b      	neglt	r3, r3
 800190c:	f042 0202 	orrlt.w	r2, r2, #2
 8001910:	9307      	strge	r3, [sp, #28]
 8001912:	9307      	strlt	r3, [sp, #28]
 8001914:	bfb8      	it	lt
 8001916:	9204      	strlt	r2, [sp, #16]
 8001918:	7823      	ldrb	r3, [r4, #0]
 800191a:	2b2e      	cmp	r3, #46	@ 0x2e
 800191c:	d10a      	bne.n	8001934 <_svfiprintf_r+0x130>
 800191e:	7863      	ldrb	r3, [r4, #1]
 8001920:	2b2a      	cmp	r3, #42	@ 0x2a
 8001922:	d132      	bne.n	800198a <_svfiprintf_r+0x186>
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	3402      	adds	r4, #2
 8001928:	1d1a      	adds	r2, r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	9203      	str	r2, [sp, #12]
 800192e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001932:	9305      	str	r3, [sp, #20]
 8001934:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80019ec <_svfiprintf_r+0x1e8>
 8001938:	2203      	movs	r2, #3
 800193a:	4650      	mov	r0, sl
 800193c:	7821      	ldrb	r1, [r4, #0]
 800193e:	f000 fa17 	bl	8001d70 <memchr>
 8001942:	b138      	cbz	r0, 8001954 <_svfiprintf_r+0x150>
 8001944:	2240      	movs	r2, #64	@ 0x40
 8001946:	9b04      	ldr	r3, [sp, #16]
 8001948:	eba0 000a 	sub.w	r0, r0, sl
 800194c:	4082      	lsls	r2, r0
 800194e:	4313      	orrs	r3, r2
 8001950:	3401      	adds	r4, #1
 8001952:	9304      	str	r3, [sp, #16]
 8001954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001958:	2206      	movs	r2, #6
 800195a:	4825      	ldr	r0, [pc, #148]	@ (80019f0 <_svfiprintf_r+0x1ec>)
 800195c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001960:	f000 fa06 	bl	8001d70 <memchr>
 8001964:	2800      	cmp	r0, #0
 8001966:	d036      	beq.n	80019d6 <_svfiprintf_r+0x1d2>
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <_svfiprintf_r+0x1f0>)
 800196a:	bb1b      	cbnz	r3, 80019b4 <_svfiprintf_r+0x1b0>
 800196c:	9b03      	ldr	r3, [sp, #12]
 800196e:	3307      	adds	r3, #7
 8001970:	f023 0307 	bic.w	r3, r3, #7
 8001974:	3308      	adds	r3, #8
 8001976:	9303      	str	r3, [sp, #12]
 8001978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800197a:	4433      	add	r3, r6
 800197c:	9309      	str	r3, [sp, #36]	@ 0x24
 800197e:	e76a      	b.n	8001856 <_svfiprintf_r+0x52>
 8001980:	460c      	mov	r4, r1
 8001982:	2001      	movs	r0, #1
 8001984:	fb0c 3202 	mla	r2, ip, r2, r3
 8001988:	e7a8      	b.n	80018dc <_svfiprintf_r+0xd8>
 800198a:	2300      	movs	r3, #0
 800198c:	f04f 0c0a 	mov.w	ip, #10
 8001990:	4619      	mov	r1, r3
 8001992:	3401      	adds	r4, #1
 8001994:	9305      	str	r3, [sp, #20]
 8001996:	4620      	mov	r0, r4
 8001998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800199c:	3a30      	subs	r2, #48	@ 0x30
 800199e:	2a09      	cmp	r2, #9
 80019a0:	d903      	bls.n	80019aa <_svfiprintf_r+0x1a6>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0c6      	beq.n	8001934 <_svfiprintf_r+0x130>
 80019a6:	9105      	str	r1, [sp, #20]
 80019a8:	e7c4      	b.n	8001934 <_svfiprintf_r+0x130>
 80019aa:	4604      	mov	r4, r0
 80019ac:	2301      	movs	r3, #1
 80019ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80019b2:	e7f0      	b.n	8001996 <_svfiprintf_r+0x192>
 80019b4:	ab03      	add	r3, sp, #12
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	462a      	mov	r2, r5
 80019ba:	4638      	mov	r0, r7
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <_svfiprintf_r+0x1f4>)
 80019be:	a904      	add	r1, sp, #16
 80019c0:	f3af 8000 	nop.w
 80019c4:	1c42      	adds	r2, r0, #1
 80019c6:	4606      	mov	r6, r0
 80019c8:	d1d6      	bne.n	8001978 <_svfiprintf_r+0x174>
 80019ca:	89ab      	ldrh	r3, [r5, #12]
 80019cc:	065b      	lsls	r3, r3, #25
 80019ce:	f53f af2d 	bmi.w	800182c <_svfiprintf_r+0x28>
 80019d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019d4:	e72c      	b.n	8001830 <_svfiprintf_r+0x2c>
 80019d6:	ab03      	add	r3, sp, #12
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	462a      	mov	r2, r5
 80019dc:	4638      	mov	r0, r7
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <_svfiprintf_r+0x1f4>)
 80019e0:	a904      	add	r1, sp, #16
 80019e2:	f000 f87d 	bl	8001ae0 <_printf_i>
 80019e6:	e7ed      	b.n	80019c4 <_svfiprintf_r+0x1c0>
 80019e8:	08001e7e 	.word	0x08001e7e
 80019ec:	08001e84 	.word	0x08001e84
 80019f0:	08001e88 	.word	0x08001e88
 80019f4:	00000000 	.word	0x00000000
 80019f8:	0800174d 	.word	0x0800174d

080019fc <_printf_common>:
 80019fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a00:	4616      	mov	r6, r2
 8001a02:	4698      	mov	r8, r3
 8001a04:	688a      	ldr	r2, [r1, #8]
 8001a06:	690b      	ldr	r3, [r1, #16]
 8001a08:	4607      	mov	r7, r0
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	bfb8      	it	lt
 8001a0e:	4613      	movlt	r3, r2
 8001a10:	6033      	str	r3, [r6, #0]
 8001a12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a16:	460c      	mov	r4, r1
 8001a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a1c:	b10a      	cbz	r2, 8001a22 <_printf_common+0x26>
 8001a1e:	3301      	adds	r3, #1
 8001a20:	6033      	str	r3, [r6, #0]
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	0699      	lsls	r1, r3, #26
 8001a26:	bf42      	ittt	mi
 8001a28:	6833      	ldrmi	r3, [r6, #0]
 8001a2a:	3302      	addmi	r3, #2
 8001a2c:	6033      	strmi	r3, [r6, #0]
 8001a2e:	6825      	ldr	r5, [r4, #0]
 8001a30:	f015 0506 	ands.w	r5, r5, #6
 8001a34:	d106      	bne.n	8001a44 <_printf_common+0x48>
 8001a36:	f104 0a19 	add.w	sl, r4, #25
 8001a3a:	68e3      	ldr	r3, [r4, #12]
 8001a3c:	6832      	ldr	r2, [r6, #0]
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	42ab      	cmp	r3, r5
 8001a42:	dc2b      	bgt.n	8001a9c <_printf_common+0xa0>
 8001a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	3b00      	subs	r3, #0
 8001a4c:	bf18      	it	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	0692      	lsls	r2, r2, #26
 8001a52:	d430      	bmi.n	8001ab6 <_printf_common+0xba>
 8001a54:	4641      	mov	r1, r8
 8001a56:	4638      	mov	r0, r7
 8001a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a5c:	47c8      	blx	r9
 8001a5e:	3001      	adds	r0, #1
 8001a60:	d023      	beq.n	8001aaa <_printf_common+0xae>
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	6922      	ldr	r2, [r4, #16]
 8001a66:	f003 0306 	and.w	r3, r3, #6
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf14      	ite	ne
 8001a6e:	2500      	movne	r5, #0
 8001a70:	6833      	ldreq	r3, [r6, #0]
 8001a72:	f04f 0600 	mov.w	r6, #0
 8001a76:	bf08      	it	eq
 8001a78:	68e5      	ldreq	r5, [r4, #12]
 8001a7a:	f104 041a 	add.w	r4, r4, #26
 8001a7e:	bf08      	it	eq
 8001a80:	1aed      	subeq	r5, r5, r3
 8001a82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001a86:	bf08      	it	eq
 8001a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bfc4      	itt	gt
 8001a90:	1a9b      	subgt	r3, r3, r2
 8001a92:	18ed      	addgt	r5, r5, r3
 8001a94:	42b5      	cmp	r5, r6
 8001a96:	d11a      	bne.n	8001ace <_printf_common+0xd2>
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e008      	b.n	8001aae <_printf_common+0xb2>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	47c8      	blx	r9
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	d103      	bne.n	8001ab2 <_printf_common+0xb6>
 8001aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab2:	3501      	adds	r5, #1
 8001ab4:	e7c1      	b.n	8001a3a <_printf_common+0x3e>
 8001ab6:	2030      	movs	r0, #48	@ 0x30
 8001ab8:	18e1      	adds	r1, r4, r3
 8001aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ac4:	4422      	add	r2, r4
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001acc:	e7c2      	b.n	8001a54 <_printf_common+0x58>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	4641      	mov	r1, r8
 8001ad4:	4638      	mov	r0, r7
 8001ad6:	47c8      	blx	r9
 8001ad8:	3001      	adds	r0, #1
 8001ada:	d0e6      	beq.n	8001aaa <_printf_common+0xae>
 8001adc:	3601      	adds	r6, #1
 8001ade:	e7d9      	b.n	8001a94 <_printf_common+0x98>

08001ae0 <_printf_i>:
 8001ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae4:	7e0f      	ldrb	r7, [r1, #24]
 8001ae6:	4691      	mov	r9, r2
 8001ae8:	2f78      	cmp	r7, #120	@ 0x78
 8001aea:	4680      	mov	r8, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	469a      	mov	sl, r3
 8001af0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001af6:	d807      	bhi.n	8001b08 <_printf_i+0x28>
 8001af8:	2f62      	cmp	r7, #98	@ 0x62
 8001afa:	d80a      	bhi.n	8001b12 <_printf_i+0x32>
 8001afc:	2f00      	cmp	r7, #0
 8001afe:	f000 80d1 	beq.w	8001ca4 <_printf_i+0x1c4>
 8001b02:	2f58      	cmp	r7, #88	@ 0x58
 8001b04:	f000 80b8 	beq.w	8001c78 <_printf_i+0x198>
 8001b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b10:	e03a      	b.n	8001b88 <_printf_i+0xa8>
 8001b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b16:	2b15      	cmp	r3, #21
 8001b18:	d8f6      	bhi.n	8001b08 <_printf_i+0x28>
 8001b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8001b20 <_printf_i+0x40>)
 8001b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b20:	08001b79 	.word	0x08001b79
 8001b24:	08001b8d 	.word	0x08001b8d
 8001b28:	08001b09 	.word	0x08001b09
 8001b2c:	08001b09 	.word	0x08001b09
 8001b30:	08001b09 	.word	0x08001b09
 8001b34:	08001b09 	.word	0x08001b09
 8001b38:	08001b8d 	.word	0x08001b8d
 8001b3c:	08001b09 	.word	0x08001b09
 8001b40:	08001b09 	.word	0x08001b09
 8001b44:	08001b09 	.word	0x08001b09
 8001b48:	08001b09 	.word	0x08001b09
 8001b4c:	08001c8b 	.word	0x08001c8b
 8001b50:	08001bb7 	.word	0x08001bb7
 8001b54:	08001c45 	.word	0x08001c45
 8001b58:	08001b09 	.word	0x08001b09
 8001b5c:	08001b09 	.word	0x08001b09
 8001b60:	08001cad 	.word	0x08001cad
 8001b64:	08001b09 	.word	0x08001b09
 8001b68:	08001bb7 	.word	0x08001bb7
 8001b6c:	08001b09 	.word	0x08001b09
 8001b70:	08001b09 	.word	0x08001b09
 8001b74:	08001c4d 	.word	0x08001c4d
 8001b78:	6833      	ldr	r3, [r6, #0]
 8001b7a:	1d1a      	adds	r2, r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6032      	str	r2, [r6, #0]
 8001b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e09c      	b.n	8001cc6 <_printf_i+0x1e6>
 8001b8c:	6833      	ldr	r3, [r6, #0]
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	1d19      	adds	r1, r3, #4
 8001b92:	6031      	str	r1, [r6, #0]
 8001b94:	0606      	lsls	r6, r0, #24
 8001b96:	d501      	bpl.n	8001b9c <_printf_i+0xbc>
 8001b98:	681d      	ldr	r5, [r3, #0]
 8001b9a:	e003      	b.n	8001ba4 <_printf_i+0xc4>
 8001b9c:	0645      	lsls	r5, r0, #25
 8001b9e:	d5fb      	bpl.n	8001b98 <_printf_i+0xb8>
 8001ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ba4:	2d00      	cmp	r5, #0
 8001ba6:	da03      	bge.n	8001bb0 <_printf_i+0xd0>
 8001ba8:	232d      	movs	r3, #45	@ 0x2d
 8001baa:	426d      	negs	r5, r5
 8001bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	4858      	ldr	r0, [pc, #352]	@ (8001d14 <_printf_i+0x234>)
 8001bb4:	e011      	b.n	8001bda <_printf_i+0xfa>
 8001bb6:	6821      	ldr	r1, [r4, #0]
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	0608      	lsls	r0, r1, #24
 8001bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001bc0:	d402      	bmi.n	8001bc8 <_printf_i+0xe8>
 8001bc2:	0649      	lsls	r1, r1, #25
 8001bc4:	bf48      	it	mi
 8001bc6:	b2ad      	uxthmi	r5, r5
 8001bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001bca:	6033      	str	r3, [r6, #0]
 8001bcc:	bf14      	ite	ne
 8001bce:	230a      	movne	r3, #10
 8001bd0:	2308      	moveq	r3, #8
 8001bd2:	4850      	ldr	r0, [pc, #320]	@ (8001d14 <_printf_i+0x234>)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001bda:	6866      	ldr	r6, [r4, #4]
 8001bdc:	2e00      	cmp	r6, #0
 8001bde:	60a6      	str	r6, [r4, #8]
 8001be0:	db05      	blt.n	8001bee <_printf_i+0x10e>
 8001be2:	6821      	ldr	r1, [r4, #0]
 8001be4:	432e      	orrs	r6, r5
 8001be6:	f021 0104 	bic.w	r1, r1, #4
 8001bea:	6021      	str	r1, [r4, #0]
 8001bec:	d04b      	beq.n	8001c86 <_printf_i+0x1a6>
 8001bee:	4616      	mov	r6, r2
 8001bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8001bf8:	5dc7      	ldrb	r7, [r0, r7]
 8001bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bfe:	462f      	mov	r7, r5
 8001c00:	42bb      	cmp	r3, r7
 8001c02:	460d      	mov	r5, r1
 8001c04:	d9f4      	bls.n	8001bf0 <_printf_i+0x110>
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d10b      	bne.n	8001c22 <_printf_i+0x142>
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	07df      	lsls	r7, r3, #31
 8001c0e:	d508      	bpl.n	8001c22 <_printf_i+0x142>
 8001c10:	6923      	ldr	r3, [r4, #16]
 8001c12:	6861      	ldr	r1, [r4, #4]
 8001c14:	4299      	cmp	r1, r3
 8001c16:	bfde      	ittt	le
 8001c18:	2330      	movle	r3, #48	@ 0x30
 8001c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001c22:	1b92      	subs	r2, r2, r6
 8001c24:	6122      	str	r2, [r4, #16]
 8001c26:	464b      	mov	r3, r9
 8001c28:	4621      	mov	r1, r4
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	f8cd a000 	str.w	sl, [sp]
 8001c30:	aa03      	add	r2, sp, #12
 8001c32:	f7ff fee3 	bl	80019fc <_printf_common>
 8001c36:	3001      	adds	r0, #1
 8001c38:	d14a      	bne.n	8001cd0 <_printf_i+0x1f0>
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c3e:	b004      	add	sp, #16
 8001c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f043 0320 	orr.w	r3, r3, #32
 8001c4a:	6023      	str	r3, [r4, #0]
 8001c4c:	2778      	movs	r7, #120	@ 0x78
 8001c4e:	4832      	ldr	r0, [pc, #200]	@ (8001d18 <_printf_i+0x238>)
 8001c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	6831      	ldr	r1, [r6, #0]
 8001c58:	061f      	lsls	r7, r3, #24
 8001c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c5e:	d402      	bmi.n	8001c66 <_printf_i+0x186>
 8001c60:	065f      	lsls	r7, r3, #25
 8001c62:	bf48      	it	mi
 8001c64:	b2ad      	uxthmi	r5, r5
 8001c66:	6031      	str	r1, [r6, #0]
 8001c68:	07d9      	lsls	r1, r3, #31
 8001c6a:	bf44      	itt	mi
 8001c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8001c70:	6023      	strmi	r3, [r4, #0]
 8001c72:	b11d      	cbz	r5, 8001c7c <_printf_i+0x19c>
 8001c74:	2310      	movs	r3, #16
 8001c76:	e7ad      	b.n	8001bd4 <_printf_i+0xf4>
 8001c78:	4826      	ldr	r0, [pc, #152]	@ (8001d14 <_printf_i+0x234>)
 8001c7a:	e7e9      	b.n	8001c50 <_printf_i+0x170>
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	f023 0320 	bic.w	r3, r3, #32
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	e7f6      	b.n	8001c74 <_printf_i+0x194>
 8001c86:	4616      	mov	r6, r2
 8001c88:	e7bd      	b.n	8001c06 <_printf_i+0x126>
 8001c8a:	6833      	ldr	r3, [r6, #0]
 8001c8c:	6825      	ldr	r5, [r4, #0]
 8001c8e:	1d18      	adds	r0, r3, #4
 8001c90:	6961      	ldr	r1, [r4, #20]
 8001c92:	6030      	str	r0, [r6, #0]
 8001c94:	062e      	lsls	r6, r5, #24
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	d501      	bpl.n	8001c9e <_printf_i+0x1be>
 8001c9a:	6019      	str	r1, [r3, #0]
 8001c9c:	e002      	b.n	8001ca4 <_printf_i+0x1c4>
 8001c9e:	0668      	lsls	r0, r5, #25
 8001ca0:	d5fb      	bpl.n	8001c9a <_printf_i+0x1ba>
 8001ca2:	8019      	strh	r1, [r3, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4616      	mov	r6, r2
 8001ca8:	6123      	str	r3, [r4, #16]
 8001caa:	e7bc      	b.n	8001c26 <_printf_i+0x146>
 8001cac:	6833      	ldr	r3, [r6, #0]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	1d1a      	adds	r2, r3, #4
 8001cb2:	6032      	str	r2, [r6, #0]
 8001cb4:	681e      	ldr	r6, [r3, #0]
 8001cb6:	6862      	ldr	r2, [r4, #4]
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 f859 	bl	8001d70 <memchr>
 8001cbe:	b108      	cbz	r0, 8001cc4 <_printf_i+0x1e4>
 8001cc0:	1b80      	subs	r0, r0, r6
 8001cc2:	6060      	str	r0, [r4, #4]
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	6123      	str	r3, [r4, #16]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cce:	e7aa      	b.n	8001c26 <_printf_i+0x146>
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	4640      	mov	r0, r8
 8001cd6:	6923      	ldr	r3, [r4, #16]
 8001cd8:	47d0      	blx	sl
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d0ad      	beq.n	8001c3a <_printf_i+0x15a>
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	079b      	lsls	r3, r3, #30
 8001ce2:	d413      	bmi.n	8001d0c <_printf_i+0x22c>
 8001ce4:	68e0      	ldr	r0, [r4, #12]
 8001ce6:	9b03      	ldr	r3, [sp, #12]
 8001ce8:	4298      	cmp	r0, r3
 8001cea:	bfb8      	it	lt
 8001cec:	4618      	movlt	r0, r3
 8001cee:	e7a6      	b.n	8001c3e <_printf_i+0x15e>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	47d0      	blx	sl
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	d09d      	beq.n	8001c3a <_printf_i+0x15a>
 8001cfe:	3501      	adds	r5, #1
 8001d00:	68e3      	ldr	r3, [r4, #12]
 8001d02:	9903      	ldr	r1, [sp, #12]
 8001d04:	1a5b      	subs	r3, r3, r1
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	dcf2      	bgt.n	8001cf0 <_printf_i+0x210>
 8001d0a:	e7eb      	b.n	8001ce4 <_printf_i+0x204>
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	f104 0619 	add.w	r6, r4, #25
 8001d12:	e7f5      	b.n	8001d00 <_printf_i+0x220>
 8001d14:	08001e8f 	.word	0x08001e8f
 8001d18:	08001ea0 	.word	0x08001ea0

08001d1c <memmove>:
 8001d1c:	4288      	cmp	r0, r1
 8001d1e:	b510      	push	{r4, lr}
 8001d20:	eb01 0402 	add.w	r4, r1, r2
 8001d24:	d902      	bls.n	8001d2c <memmove+0x10>
 8001d26:	4284      	cmp	r4, r0
 8001d28:	4623      	mov	r3, r4
 8001d2a:	d807      	bhi.n	8001d3c <memmove+0x20>
 8001d2c:	1e43      	subs	r3, r0, #1
 8001d2e:	42a1      	cmp	r1, r4
 8001d30:	d008      	beq.n	8001d44 <memmove+0x28>
 8001d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d3a:	e7f8      	b.n	8001d2e <memmove+0x12>
 8001d3c:	4601      	mov	r1, r0
 8001d3e:	4402      	add	r2, r0
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d100      	bne.n	8001d46 <memmove+0x2a>
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d4e:	e7f7      	b.n	8001d40 <memmove+0x24>

08001d50 <_sbrk_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	2300      	movs	r3, #0
 8001d54:	4d05      	ldr	r5, [pc, #20]	@ (8001d6c <_sbrk_r+0x1c>)
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	602b      	str	r3, [r5, #0]
 8001d5c:	f7fe fc32 	bl	80005c4 <_sbrk>
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	d102      	bne.n	8001d6a <_sbrk_r+0x1a>
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	b103      	cbz	r3, 8001d6a <_sbrk_r+0x1a>
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	2000023c 	.word	0x2000023c

08001d70 <memchr>:
 8001d70:	4603      	mov	r3, r0
 8001d72:	b510      	push	{r4, lr}
 8001d74:	b2c9      	uxtb	r1, r1
 8001d76:	4402      	add	r2, r0
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	d101      	bne.n	8001d82 <memchr+0x12>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	e003      	b.n	8001d8a <memchr+0x1a>
 8001d82:	7804      	ldrb	r4, [r0, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	428c      	cmp	r4, r1
 8001d88:	d1f6      	bne.n	8001d78 <memchr+0x8>
 8001d8a:	bd10      	pop	{r4, pc}

08001d8c <memcpy>:
 8001d8c:	440a      	add	r2, r1
 8001d8e:	4291      	cmp	r1, r2
 8001d90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001d94:	d100      	bne.n	8001d98 <memcpy+0xc>
 8001d96:	4770      	bx	lr
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d9e:	4291      	cmp	r1, r2
 8001da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001da4:	d1f9      	bne.n	8001d9a <memcpy+0xe>
 8001da6:	bd10      	pop	{r4, pc}

08001da8 <_realloc_r>:
 8001da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dac:	4607      	mov	r7, r0
 8001dae:	4614      	mov	r4, r2
 8001db0:	460d      	mov	r5, r1
 8001db2:	b921      	cbnz	r1, 8001dbe <_realloc_r+0x16>
 8001db4:	4611      	mov	r1, r2
 8001db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dba:	f7ff bc3b 	b.w	8001634 <_malloc_r>
 8001dbe:	b92a      	cbnz	r2, 8001dcc <_realloc_r+0x24>
 8001dc0:	f7ff fbce 	bl	8001560 <_free_r>
 8001dc4:	4625      	mov	r5, r4
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dcc:	f000 f81a 	bl	8001e04 <_malloc_usable_size_r>
 8001dd0:	4284      	cmp	r4, r0
 8001dd2:	4606      	mov	r6, r0
 8001dd4:	d802      	bhi.n	8001ddc <_realloc_r+0x34>
 8001dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001dda:	d8f4      	bhi.n	8001dc6 <_realloc_r+0x1e>
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4638      	mov	r0, r7
 8001de0:	f7ff fc28 	bl	8001634 <_malloc_r>
 8001de4:	4680      	mov	r8, r0
 8001de6:	b908      	cbnz	r0, 8001dec <_realloc_r+0x44>
 8001de8:	4645      	mov	r5, r8
 8001dea:	e7ec      	b.n	8001dc6 <_realloc_r+0x1e>
 8001dec:	42b4      	cmp	r4, r6
 8001dee:	4622      	mov	r2, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	bf28      	it	cs
 8001df4:	4632      	movcs	r2, r6
 8001df6:	f7ff ffc9 	bl	8001d8c <memcpy>
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	4638      	mov	r0, r7
 8001dfe:	f7ff fbaf 	bl	8001560 <_free_r>
 8001e02:	e7f1      	b.n	8001de8 <_realloc_r+0x40>

08001e04 <_malloc_usable_size_r>:
 8001e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e08:	1f18      	subs	r0, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bfbc      	itt	lt
 8001e0e:	580b      	ldrlt	r3, [r1, r0]
 8001e10:	18c0      	addlt	r0, r0, r3
 8001e12:	4770      	bx	lr

08001e14 <_init>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr

08001e20 <_fini>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	bf00      	nop
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr
